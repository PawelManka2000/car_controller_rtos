
robot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5b8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800d798  0800d798  0000e798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd1c  0800dd1c  0000f1d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd1c  0800dd1c  0000ed1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd24  0800dd24  0000f1d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd24  0800dd24  0000ed24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd28  0800dd28  0000ed28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800dd2c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  200001d0  0800defc  0000f1d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000081c  0800defc  0000f81c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de93  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044ad  00000000  00000000  0002d093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  00031540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001113  00000000  00000000  00032b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a52  00000000  00000000  00033c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ed39  00000000  00000000  0005d6dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001060c7  00000000  00000000  0007c416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001824dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007160  00000000  00000000  00182520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00189680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d0 	.word	0x200001d0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d780 	.word	0x0800d780

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d4 	.word	0x200001d4
 800021c:	0800d780 	.word	0x0800d780

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	@ 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	2238      	movs	r2, #56	@ 0x38
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f008 fbb7 	bl	80097b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001056:	2000      	movs	r0, #0
 8001058:	f002 fac8 	bl	80035ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800105c:	2302      	movs	r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001060:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001066:	2340      	movs	r3, #64	@ 0x40
 8001068:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106a:	2302      	movs	r3, #2
 800106c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800106e:	2302      	movs	r3, #2
 8001070:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001072:	2304      	movs	r3, #4
 8001074:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001076:	2355      	movs	r3, #85	@ 0x55
 8001078:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800107a:	2302      	movs	r3, #2
 800107c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800107e:	2302      	movs	r3, #2
 8001080:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001082:	2302      	movs	r3, #2
 8001084:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	4618      	mov	r0, r3
 800108c:	f002 fb62 	bl	8003754 <HAL_RCC_OscConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001096:	f001 fb71 	bl	800277c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109a:	230f      	movs	r3, #15
 800109c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109e:	2303      	movs	r3, #3
 80010a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2104      	movs	r1, #4
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 fe60 	bl	8003d78 <HAL_RCC_ClockConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010be:	f001 fb5d 	bl	800277c <Error_Handler>
  }
}
 80010c2:	bf00      	nop
 80010c4:	3750      	adds	r7, #80	@ 0x50
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <MX_GPIO_Init>:

#include "gpio_configuration.h"


void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b2f      	ldr	r3, [pc, #188]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a2e      	ldr	r2, [pc, #184]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b2c      	ldr	r3, [pc, #176]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010fa:	4b29      	ldr	r3, [pc, #164]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a28      	ldr	r2, [pc, #160]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001100:	f043 0320 	orr.w	r3, r3, #32
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b26      	ldr	r3, [pc, #152]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0320 	and.w	r3, r3, #32
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b23      	ldr	r3, [pc, #140]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a22      	ldr	r2, [pc, #136]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a1c      	ldr	r2, [pc, #112]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2123      	movs	r1, #35	@ 0x23
 8001146:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800114a:	f002 fa37 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800114e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001154:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	480f      	ldr	r0, [pc, #60]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001166:	f002 f8a7 	bl	80032b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin;
 800116a:	2323      	movs	r3, #35	@ 0x23
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001184:	f002 f898 	bl	80032b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	2028      	movs	r0, #40	@ 0x28
 800118e:	f001 ffab 	bl	80030e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001192:	2028      	movs	r0, #40	@ 0x28
 8001194:	f001 ffc2 	bl	800311c <HAL_NVIC_EnableIRQ>

}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	@ 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48000800 	.word	0x48000800

080011a8 <MX_TIM1_Init>:




void MX_TIM1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b09c      	sub	sp, #112	@ 0x70
 80011ac:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ae:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
 80011d8:	615a      	str	r2, [r3, #20]
 80011da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	2234      	movs	r2, #52	@ 0x34
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f008 fae7 	bl	80097b6 <memset>

  htim1.Instance = TIM1;
 80011e8:	4b57      	ldr	r3, [pc, #348]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 80011ea:	4a58      	ldr	r2, [pc, #352]	@ (800134c <MX_TIM1_Init+0x1a4>)
 80011ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170000-1;
 80011ee:	4b56      	ldr	r3, [pc, #344]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 80011f0:	4a57      	ldr	r2, [pc, #348]	@ (8001350 <MX_TIM1_Init+0x1a8>)
 80011f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f4:	4b54      	ldr	r3, [pc, #336]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80011fa:	4b53      	ldr	r3, [pc, #332]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 80011fc:	2263      	movs	r2, #99	@ 0x63
 80011fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001200:	4b51      	ldr	r3, [pc, #324]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001206:	4b50      	ldr	r3, [pc, #320]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120c:	4b4e      	ldr	r3, [pc, #312]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001212:	484d      	ldr	r0, [pc, #308]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 8001214:	f003 fa4c 	bl	80046b0 <HAL_TIM_Base_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800121e:	f001 faad 	bl	800277c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001222:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001226:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001228:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800122c:	4619      	mov	r1, r3
 800122e:	4846      	ldr	r0, [pc, #280]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 8001230:	f004 f88a 	bl	8005348 <HAL_TIM_ConfigClockSource>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800123a:	f001 fa9f 	bl	800277c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800123e:	4842      	ldr	r0, [pc, #264]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 8001240:	f003 fb76 	bl	8004930 <HAL_TIM_PWM_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800124a:	f001 fa97 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800125a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800125e:	4619      	mov	r1, r3
 8001260:	4839      	ldr	r0, [pc, #228]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 8001262:	f004 fe4f 	bl	8005f04 <HAL_TIMEx_MasterConfigSynchronization>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800126c:	f001 fa86 	bl	800277c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001270:	2360      	movs	r3, #96	@ 0x60
 8001272:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001278:	2300      	movs	r3, #0
 800127a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800127c:	2300      	movs	r3, #0
 800127e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800128c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001290:	2200      	movs	r2, #0
 8001292:	4619      	mov	r1, r3
 8001294:	482c      	ldr	r0, [pc, #176]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 8001296:	f003 ff43 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80012a0:	f001 fa6c 	bl	800277c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012a8:	2204      	movs	r2, #4
 80012aa:	4619      	mov	r1, r3
 80012ac:	4826      	ldr	r0, [pc, #152]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 80012ae:	f003 ff37 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80012b8:	f001 fa60 	bl	800277c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012c0:	2208      	movs	r2, #8
 80012c2:	4619      	mov	r1, r3
 80012c4:	4820      	ldr	r0, [pc, #128]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 80012c6:	f003 ff2b 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80012d0:	f001 fa54 	bl	800277c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012d8:	220c      	movs	r2, #12
 80012da:	4619      	mov	r1, r3
 80012dc:	481a      	ldr	r0, [pc, #104]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 80012de:	f003 ff1f 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80012e8:	f001 fa48 	bl	800277c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001300:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001304:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001312:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001316:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800131c:	2300      	movs	r3, #0
 800131e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	4619      	mov	r1, r3
 8001328:	4807      	ldr	r0, [pc, #28]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 800132a:	f004 fe81 	bl	8006030 <HAL_TIMEx_ConfigBreakDeadTime>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8001334:	f001 fa22 	bl	800277c <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8001338:	4803      	ldr	r0, [pc, #12]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 800133a:	f001 fc19 	bl	8002b70 <HAL_TIM_MspPostInit>

}
 800133e:	bf00      	nop
 8001340:	3770      	adds	r7, #112	@ 0x70
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200001ec 	.word	0x200001ec
 800134c:	40012c00 	.word	0x40012c00
 8001350:	0002980f 	.word	0x0002980f

08001354 <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08c      	sub	sp, #48	@ 0x30
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	2224      	movs	r2, #36	@ 0x24
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f008 fa27 	bl	80097b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	463b      	mov	r3, r7
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001372:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 8001374:	4a21      	ldr	r2, [pc, #132]	@ (80013fc <MX_TIM3_Init+0xa8>)
 8001376:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001378:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 800137a:	2200      	movs	r2, #0
 800137c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137e:	4b1e      	ldr	r3, [pc, #120]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001384:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 8001386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800138a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138c:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001398:	2303      	movs	r3, #3
 800139a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800139c:	2300      	movs	r3, #0
 800139e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013a0:	2301      	movs	r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013b0:	2301      	movs	r3, #1
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	4619      	mov	r1, r3
 80013c2:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 80013c4:	f003 fc28 	bl	8004c18 <HAL_TIM_Encoder_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80013ce:	f001 f9d5 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013da:	463b      	mov	r3, r7
 80013dc:	4619      	mov	r1, r3
 80013de:	4806      	ldr	r0, [pc, #24]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 80013e0:	f004 fd90 	bl	8005f04 <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80013ea:	f001 f9c7 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	3730      	adds	r7, #48	@ 0x30
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000238 	.word	0x20000238
 80013fc:	40000400 	.word	0x40000400

08001400 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	@ 0x30
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	2224      	movs	r2, #36	@ 0x24
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f008 f9d1 	bl	80097b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001414:	463b      	mov	r3, r7
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800141e:	4b21      	ldr	r3, [pc, #132]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 8001420:	4a21      	ldr	r2, [pc, #132]	@ (80014a8 <MX_TIM4_Init+0xa8>)
 8001422:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001424:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 8001426:	2200      	movs	r2, #0
 8001428:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142a:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001430:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 8001432:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001436:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001438:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800143e:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 8001440:	2280      	movs	r2, #128	@ 0x80
 8001442:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001444:	2303      	movs	r3, #3
 8001446:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800144c:	2301      	movs	r3, #1
 800144e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001454:	230a      	movs	r3, #10
 8001456:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800145c:	2301      	movs	r3, #1
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 8001470:	f003 fbd2 	bl	8004c18 <HAL_TIM_Encoder_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800147a:	f001 f97f 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001486:	463b      	mov	r3, r7
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 800148c:	f004 fd3a 	bl	8005f04 <HAL_TIMEx_MasterConfigSynchronization>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001496:	f001 f971 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	3730      	adds	r7, #48	@ 0x30
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000284 	.word	0x20000284
 80014a8:	40000800 	.word	0x40000800

080014ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	@ 0x30
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	2224      	movs	r2, #36	@ 0x24
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f008 f97b 	bl	80097b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	463b      	mov	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014ca:	4b21      	ldr	r3, [pc, #132]	@ (8001550 <MX_TIM5_Init+0xa4>)
 80014cc:	4a21      	ldr	r2, [pc, #132]	@ (8001554 <MX_TIM5_Init+0xa8>)
 80014ce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001550 <MX_TIM5_Init+0xa4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001550 <MX_TIM5_Init+0xa4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 80014dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001550 <MX_TIM5_Init+0xa4>)
 80014de:	f04f 32ff 	mov.w	r2, #4294967295
 80014e2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <MX_TIM5_Init+0xa4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ea:	4b19      	ldr	r3, [pc, #100]	@ (8001550 <MX_TIM5_Init+0xa4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014f0:	2303      	movs	r3, #3
 80014f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014f4:	2300      	movs	r3, #0
 80014f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014f8:	2301      	movs	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001508:	2301      	movs	r3, #1
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	4619      	mov	r1, r3
 800151a:	480d      	ldr	r0, [pc, #52]	@ (8001550 <MX_TIM5_Init+0xa4>)
 800151c:	f003 fb7c 	bl	8004c18 <HAL_TIM_Encoder_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001526:	f001 f929 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001532:	463b      	mov	r3, r7
 8001534:	4619      	mov	r1, r3
 8001536:	4806      	ldr	r0, [pc, #24]	@ (8001550 <MX_TIM5_Init+0xa4>)
 8001538:	f004 fce4 	bl	8005f04 <HAL_TIMEx_MasterConfigSynchronization>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001542:	f001 f91b 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	3730      	adds	r7, #48	@ 0x30
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200002d0 	.word	0x200002d0
 8001554:	40000c00 	.word	0x40000c00

08001558 <MX_TIM7_Init>:

void MX_TIM7_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001568:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_TIM7_Init+0x64>)
 800156a:	4a15      	ldr	r2, [pc, #84]	@ (80015c0 <MX_TIM7_Init+0x68>)
 800156c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170-1;
 800156e:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <MX_TIM7_Init+0x64>)
 8001570:	22a9      	movs	r2, #169	@ 0xa9
 8001572:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <MX_TIM7_Init+0x64>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50000;
 800157a:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <MX_TIM7_Init+0x64>)
 800157c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001580:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001582:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <MX_TIM7_Init+0x64>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001588:	480c      	ldr	r0, [pc, #48]	@ (80015bc <MX_TIM7_Init+0x64>)
 800158a:	f003 f891 	bl	80046b0 <HAL_TIM_Base_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001594:	f001 f8f2 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	@ (80015bc <MX_TIM7_Init+0x64>)
 80015a6:	f004 fcad 	bl	8005f04 <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80015b0:	f001 f8e4 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	2000031c 	.word	0x2000031c
 80015c0:	40001400 	.word	0x40001400

080015c4 <MX_TIM8_Init>:

void MX_TIM8_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	@ 0x30
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	2224      	movs	r2, #36	@ 0x24
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f008 f8ef 	bl	80097b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	463b      	mov	r3, r7
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015e2:	4b23      	ldr	r3, [pc, #140]	@ (8001670 <MX_TIM8_Init+0xac>)
 80015e4:	4a23      	ldr	r2, [pc, #140]	@ (8001674 <MX_TIM8_Init+0xb0>)
 80015e6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015e8:	4b21      	ldr	r3, [pc, #132]	@ (8001670 <MX_TIM8_Init+0xac>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ee:	4b20      	ldr	r3, [pc, #128]	@ (8001670 <MX_TIM8_Init+0xac>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80015f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <MX_TIM8_Init+0xac>)
 80015f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015fa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <MX_TIM8_Init+0xac>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001602:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <MX_TIM8_Init+0xac>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001608:	4b19      	ldr	r3, [pc, #100]	@ (8001670 <MX_TIM8_Init+0xac>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800160e:	2303      	movs	r3, #3
 8001610:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001616:	2301      	movs	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001626:	2301      	movs	r3, #1
 8001628:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	4619      	mov	r1, r3
 8001638:	480d      	ldr	r0, [pc, #52]	@ (8001670 <MX_TIM8_Init+0xac>)
 800163a:	f003 faed 	bl	8004c18 <HAL_TIM_Encoder_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001644:	f001 f89a 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001654:	463b      	mov	r3, r7
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_TIM8_Init+0xac>)
 800165a:	f004 fc53 	bl	8005f04 <HAL_TIMEx_MasterConfigSynchronization>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001664:	f001 f88a 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	3730      	adds	r7, #48	@ 0x30
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000368 	.word	0x20000368
 8001674:	40013400 	.word	0x40013400

08001678 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800167c:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 800167e:	4a22      	ldr	r2, [pc, #136]	@ (8001708 <MX_LPUART1_UART_Init+0x90>)
 8001680:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001682:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 8001684:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001688:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b1e      	ldr	r3, [pc, #120]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b1c      	ldr	r3, [pc, #112]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001696:	4b1b      	ldr	r3, [pc, #108]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a8:	4b16      	ldr	r3, [pc, #88]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b4:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016ba:	4812      	ldr	r0, [pc, #72]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016bc:	f004 fd92 	bl	80061e4 <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80016c6:	f001 f859 	bl	800277c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ca:	2100      	movs	r1, #0
 80016cc:	480d      	ldr	r0, [pc, #52]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016ce:	f006 fdea 	bl	80082a6 <HAL_UARTEx_SetTxFifoThreshold>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80016d8:	f001 f850 	bl	800277c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016dc:	2100      	movs	r1, #0
 80016de:	4809      	ldr	r0, [pc, #36]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016e0:	f006 fe1f 	bl	8008322 <HAL_UARTEx_SetRxFifoThreshold>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80016ea:	f001 f847 	bl	800277c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016f0:	f006 fda0 	bl	8008234 <HAL_UARTEx_DisableFifoMode>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80016fa:	f001 f83f 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000448 	.word	0x20000448
 8001708:	40008000 	.word	0x40008000

0800170c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001710:	4b22      	ldr	r3, [pc, #136]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001712:	4a23      	ldr	r2, [pc, #140]	@ (80017a0 <MX_USART1_UART_Init+0x94>)
 8001714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001716:	4b21      	ldr	r3, [pc, #132]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b1f      	ldr	r3, [pc, #124]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800172a:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <MX_USART1_UART_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b19      	ldr	r3, [pc, #100]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b17      	ldr	r3, [pc, #92]	@ (800179c <MX_USART1_UART_Init+0x90>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001742:	4b16      	ldr	r3, [pc, #88]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001748:	4b14      	ldr	r3, [pc, #80]	@ (800179c <MX_USART1_UART_Init+0x90>)
 800174a:	2200      	movs	r2, #0
 800174c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800174e:	4b13      	ldr	r3, [pc, #76]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001754:	4811      	ldr	r0, [pc, #68]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001756:	f004 fd45 	bl	80061e4 <HAL_UART_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001760:	f001 f80c 	bl	800277c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001764:	2100      	movs	r1, #0
 8001766:	480d      	ldr	r0, [pc, #52]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001768:	f006 fd9d 	bl	80082a6 <HAL_UARTEx_SetTxFifoThreshold>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001772:	f001 f803 	bl	800277c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001776:	2100      	movs	r1, #0
 8001778:	4808      	ldr	r0, [pc, #32]	@ (800179c <MX_USART1_UART_Init+0x90>)
 800177a:	f006 fdd2 	bl	8008322 <HAL_UARTEx_SetRxFifoThreshold>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001784:	f000 fffa 	bl	800277c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001788:	4804      	ldr	r0, [pc, #16]	@ (800179c <MX_USART1_UART_Init+0x90>)
 800178a:	f006 fd53 	bl	8008234 <HAL_UARTEx_DisableFifoMode>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001794:	f000 fff2 	bl	800277c <Error_Handler>
  }

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200003b4 	.word	0x200003b4
 80017a0:	40013800 	.word	0x40013800

080017a4 <L298N_init>:
				TIM_HandleTypeDef* pwm_timer_,
				GPIO_TypeDef* GPIOx_1_,
				uint16_t GPIO_Pin_1_,
				GPIO_TypeDef* GPIOx_2_,
				uint16_t GPIO_Pin_2_)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
 80017b0:	603b      	str	r3, [r7, #0]
	L298N_driver->PWM_count = 0;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	721a      	strb	r2, [r3, #8]
	L298N_driver->pwm_timer = pwm_timer_;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	605a      	str	r2, [r3, #4]
	L298N_driver->pwm_channel=pwm_channel_;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	601a      	str	r2, [r3, #0]
	L298N_driver->GPIOx_1 =GPIOx_1_;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	60da      	str	r2, [r3, #12]
	L298N_driver->GPIO_Pin_1 = GPIO_Pin_1_;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8b3a      	ldrh	r2, [r7, #24]
 80017ce:	821a      	strh	r2, [r3, #16]
	L298N_driver->GPIOx_2 = GPIOx_2_;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	615a      	str	r2, [r3, #20]
	L298N_driver->GPIO_Pin_2 = GPIO_Pin_2_;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8c3a      	ldrh	r2, [r7, #32]
 80017da:	831a      	strh	r2, [r3, #24]

}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <L298N_set_pwm_count>:

void L298N_set_pwm_count(L298N_driver* L298_driver, uint8_t new_pwm_count){
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	70fb      	strb	r3, [r7, #3]

	L298_driver->PWM_count = new_pwm_count;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	78fa      	ldrb	r2, [r7, #3]
 80017f8:	721a      	strb	r2, [r3, #8]
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <L298N_update_pwm>:

void L298N_update_pwm(L298N_driver* L298_driver)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d106      	bne.n	8001824 <L298N_update_pwm+0x1e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	7a1a      	ldrb	r2, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001822:	e036      	b.n	8001892 <L298N_update_pwm+0x8c>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b04      	cmp	r3, #4
 800182a:	d107      	bne.n	800183c <L298N_update_pwm+0x36>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	7a19      	ldrb	r1, [r3, #8]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	460b      	mov	r3, r1
 8001838:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800183a:	e02a      	b.n	8001892 <L298N_update_pwm+0x8c>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b08      	cmp	r3, #8
 8001842:	d107      	bne.n	8001854 <L298N_update_pwm+0x4e>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	7a19      	ldrb	r1, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	460b      	mov	r3, r1
 8001850:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001852:	e01e      	b.n	8001892 <L298N_update_pwm+0x8c>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b0c      	cmp	r3, #12
 800185a:	d107      	bne.n	800186c <L298N_update_pwm+0x66>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	7a19      	ldrb	r1, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	460b      	mov	r3, r1
 8001868:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800186a:	e012      	b.n	8001892 <L298N_update_pwm+0x8c>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b10      	cmp	r3, #16
 8001872:	d107      	bne.n	8001884 <L298N_update_pwm+0x7e>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	7a19      	ldrb	r1, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	460b      	mov	r3, r1
 8001880:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001882:	e006      	b.n	8001892 <L298N_update_pwm+0x8c>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	7a19      	ldrb	r1, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	460b      	mov	r3, r1
 8001890:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <L298N_set_input_configuration>:


void L298N_set_input_configuration(L298N_driver* L298_driver, EL298N_MODE l298n_mode)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	460b      	mov	r3, r1
 80018a8:	70fb      	strb	r3, [r7, #3]

	if(l298n_mode == L298N_MODE_BACKWARD)
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d110      	bne.n	80018d2 <L298N_set_input_configuration+0x34>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_SET);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68d8      	ldr	r0, [r3, #12]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	8a1b      	ldrh	r3, [r3, #16]
 80018b8:	2201      	movs	r2, #1
 80018ba:	4619      	mov	r1, r3
 80018bc:	f001 fe7e 	bl	80035bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6958      	ldr	r0, [r3, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	8b1b      	ldrh	r3, [r3, #24]
 80018c8:	2200      	movs	r2, #0
 80018ca:	4619      	mov	r1, r3
 80018cc:	f001 fe76 	bl	80035bc <HAL_GPIO_WritePin>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
	}

}
 80018d0:	e026      	b.n	8001920 <L298N_set_input_configuration+0x82>
	}else if(l298n_mode == L298N_MODE_FORWARD)
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d110      	bne.n	80018fa <L298N_set_input_configuration+0x5c>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68d8      	ldr	r0, [r3, #12]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	8a1b      	ldrh	r3, [r3, #16]
 80018e0:	2200      	movs	r2, #0
 80018e2:	4619      	mov	r1, r3
 80018e4:	f001 fe6a 	bl	80035bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_SET);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6958      	ldr	r0, [r3, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	8b1b      	ldrh	r3, [r3, #24]
 80018f0:	2201      	movs	r2, #1
 80018f2:	4619      	mov	r1, r3
 80018f4:	f001 fe62 	bl	80035bc <HAL_GPIO_WritePin>
}
 80018f8:	e012      	b.n	8001920 <L298N_set_input_configuration+0x82>
	else if(l298n_mode == L298N_MODE_STOP)
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10f      	bne.n	8001920 <L298N_set_input_configuration+0x82>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68d8      	ldr	r0, [r3, #12]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	8a1b      	ldrh	r3, [r3, #16]
 8001908:	2200      	movs	r2, #0
 800190a:	4619      	mov	r1, r3
 800190c:	f001 fe56 	bl	80035bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6958      	ldr	r0, [r3, #20]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	8b1b      	ldrh	r3, [r3, #24]
 8001918:	2200      	movs	r2, #0
 800191a:	4619      	mov	r1, r3
 800191c:	f001 fe4e 	bl	80035bc <HAL_GPIO_WritePin>
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <init_driving_system>:
static char states_buffer[80];
static void add_state_to_states_buffer(MotorState* motor_state);


void init_driving_system(DrivingSystem* driving_system, MotorStruct* lb_motor, MotorStruct* lf_motor, MotorStruct* rb_motor, MotorStruct* rf_motor)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	603b      	str	r3, [r7, #0]

	driving_system->left_motors_lst[0] = lb_motor;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	601a      	str	r2, [r3, #0]
	driving_system->left_motors_lst[1] = lf_motor;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	605a      	str	r2, [r3, #4]
	driving_system->right_motors_lst[0] = rb_motor;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	609a      	str	r2, [r3, #8]
	driving_system->right_motors_lst[1] = rf_motor;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	60da      	str	r2, [r3, #12]
	driving_system->velo_ctrl_flag = 1;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2201      	movs	r2, #1
 8001952:	741a      	strb	r2, [r3, #16]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <default_init_driving_system_if>:

void default_init_driving_system_if(DrivingSystemIface* drv_system_if){
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

	drv_system_if->exe_cmd = execute_cmd;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a05      	ldr	r2, [pc, #20]	@ (8001980 <default_init_driving_system_if+0x20>)
 800196c:	601a      	str	r2, [r3, #0]
	drv_system_if->send_state = send_state;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <default_init_driving_system_if+0x24>)
 8001972:	605a      	str	r2, [r3, #4]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	08001a01 	.word	0x08001a01
 8001984:	08001c89 	.word	0x08001c89

08001988 <driving_system_drive>:

// TODO DELETE VELO
void driving_system_drive(DrivingSystem* driving_system, float velo){
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	ed87 0a00 	vstr	s0, [r7]
////		L298N_update_pwm(driving_system->right_motors_lst[i]->L298N_driver, )
//	}

	// TODO change to NO_OF_SIDE_MOTORS WHEN APPEARS
//	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i){
	for(int i = 0; i < 1; ++i){
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e029      	b.n	80019ee <driving_system_drive+0x66>

    	update_motor_position(driving_system->left_motors_lst[i]->motor_state, driving_system->left_motors_lst[i]->encoder_info);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	4619      	mov	r1, r3
 80019b0:	f000 fa35 	bl	8001e1e <update_motor_position>
    	update_measured_velocity(driving_system->left_motors_lst[i]);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 faac 	bl	8001f1a <update_measured_velocity>
//    	motor_state_set_velocity(driving_system->left_motors_lst[i]->motor_state, velo);

		if(driving_system->velo_ctrl_flag){
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7c1b      	ldrb	r3, [r3, #16]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <driving_system_drive+0x50>
			regulate_velocity(driving_system->left_motors_lst[i]);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f9fa 	bl	8001dcc <regulate_velocity>
//			regulate_velocity(driving_system->right_motors_lst[i]);
		}

		L298N_update_pwm(driving_system->left_motors_lst[i]->L298N_driver);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ff0f 	bl	8001806 <L298N_update_pwm>
	for(int i = 0; i < 1; ++i){
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	3301      	adds	r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	ddd2      	ble.n	800199a <driving_system_drive+0x12>


	}


}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <execute_cmd>:


int execute_cmd(DrivingSystem* driving_system, uint8_t* cmd){
 8001a00:	b5b0      	push	{r4, r5, r7, lr}
 8001a02:	b08e      	sub	sp, #56	@ 0x38
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]


	uint8_t cmd_code[] = "00";
 8001a0a:	4a43      	ldr	r2, [pc, #268]	@ (8001b18 <execute_cmd+0x118>)
 8001a0c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	4611      	mov	r1, r2
 8001a14:	8019      	strh	r1, [r3, #0]
 8001a16:	3302      	adds	r3, #2
 8001a18:	0c12      	lsrs	r2, r2, #16
 8001a1a:	701a      	strb	r2, [r3, #0]
	uint8_t payload[] = "000000";
 8001a1c:	4a3f      	ldr	r2, [pc, #252]	@ (8001b1c <execute_cmd+0x11c>)
 8001a1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a26:	6018      	str	r0, [r3, #0]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	8019      	strh	r1, [r3, #0]
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	0c0a      	lsrs	r2, r1, #16
 8001a30:	701a      	strb	r2, [r3, #0]

    if (parse_cmd_code(cmd, cmd_code)) {
 8001a32:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a36:	4619      	mov	r1, r3
 8001a38:	6838      	ldr	r0, [r7, #0]
 8001a3a:	f000 fccd 	bl	80023d8 <parse_cmd_code>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <execute_cmd+0x48>
        return 1;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e062      	b.n	8001b0e <execute_cmd+0x10e>
    }
    if (parse_payload(cmd, payload)) {
 8001a48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	6838      	ldr	r0, [r7, #0]
 8001a50:	f000 fcfc 	bl	800244c <parse_payload>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <execute_cmd+0x5e>
        return 1;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e057      	b.n	8001b0e <execute_cmd+0x10e>
    }


	if(cmd_code[CMD_ID_POS] == CMD_ID_STATE_REQ)
 8001a5e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d103      	bne.n	8001a6e <execute_cmd+0x6e>
	{
		send_state(driving_system);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f90e 	bl	8001c88 <send_state>
 8001a6c:	e04e      	b.n	8001b0c <execute_cmd+0x10c>

	}else if(cmd_code[CMD_ID_POS] == CMD_ID_CTRL_VELO_REQ)
 8001a6e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d11b      	bne.n	8001aae <execute_cmd+0xae>
	{

	    float vel = 0;
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	    sscanf(payload, "%f", &vel);
 8001a7c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001a80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a84:	4926      	ldr	r1, [pc, #152]	@ (8001b20 <execute_cmd+0x120>)
 8001a86:	4618      	mov	r0, r3
 8001a88:	f007 fe26 	bl	80096d8 <siscanf>
	    send_ack("CMD_ID_CTRL_VELO_REQ received");
 8001a8c:	4825      	ldr	r0, [pc, #148]	@ (8001b24 <execute_cmd+0x124>)
 8001a8e:	f000 f8b5 	bl	8001bfc <send_ack>
		drive_velo_dir(driving_system, cmd_code[DV_MODE_POS], vel);
 8001a92:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001a96:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 fb45 	bl	8002130 <drive_velo_dir>
		driving_system->velo_ctrl_flag = 1;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	741a      	strb	r2, [r3, #16]
 8001aac:	e02e      	b.n	8001b0c <execute_cmd+0x10c>


	}else if(cmd_code[CMD_ID_POS] == CMD_ID_PWM_DRIVING_REQ){
 8001aae:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d119      	bne.n	8001aea <execute_cmd+0xea>

	    uint8_t pwm = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	    sscanf(payload, "%d", &pwm);
 8001abc:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 8001ac0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ac4:	4918      	ldr	r1, [pc, #96]	@ (8001b28 <execute_cmd+0x128>)
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f007 fe06 	bl	80096d8 <siscanf>
	    send_ack("CMD_ID_PWM_DRIVING_REQ received");
 8001acc:	4817      	ldr	r0, [pc, #92]	@ (8001b2c <execute_cmd+0x12c>)
 8001ace:	f000 f895 	bl	8001bfc <send_ack>
		drive_pwm_dir(driving_system, cmd_code[DV_MODE_POS], pwm);
 8001ad2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001ad6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001ada:	4619      	mov	r1, r3
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 fb69 	bl	80021b4 <drive_pwm_dir>
		driving_system->velo_ctrl_flag = 0;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	741a      	strb	r2, [r3, #16]
 8001ae8:	e010      	b.n	8001b0c <execute_cmd+0x10c>
	}
	else{
		char msg[] = "Undefined First Cmd Literall";
 8001aea:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <execute_cmd+0x130>)
 8001aec:	f107 0408 	add.w	r4, r7, #8
 8001af0:	461d      	mov	r5, r3
 8001af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001af6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001afa:	c407      	stmia	r4!, {r0, r1, r2}
 8001afc:	7023      	strb	r3, [r4, #0]
		send_drv_err(msg);
 8001afe:	f107 0308 	add.w	r3, r7, #8
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f816 	bl	8001b34 <send_drv_err>
		return 1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <execute_cmd+0x10e>
	}
	return 0;
 8001b0c:	2300      	movs	r3, #0


}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3738      	adds	r7, #56	@ 0x38
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bdb0      	pop	{r4, r5, r7, pc}
 8001b16:	bf00      	nop
 8001b18:	0800d7e0 	.word	0x0800d7e0
 8001b1c:	0800d7e4 	.word	0x0800d7e4
 8001b20:	0800d798 	.word	0x0800d798
 8001b24:	0800d79c 	.word	0x0800d79c
 8001b28:	0800d7bc 	.word	0x0800d7bc
 8001b2c:	0800d7c0 	.word	0x0800d7c0
 8001b30:	0800d7ec 	.word	0x0800d7ec

08001b34 <send_drv_err>:



void send_drv_err(char* msg){
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b09c      	sub	sp, #112	@ 0x70
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]

	char err_buffer[100];
	memset(err_buffer, '\0', sizeof(err_buffer));
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	2264      	movs	r2, #100	@ 0x64
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f007 fe36 	bl	80097b6 <memset>
	strcat(err_buffer, DRIVING_ERR);
 8001b4a:	f107 030c 	add.w	r3, r7, #12
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fbb6 	bl	80002c0 <strlen>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461a      	mov	r2, r3
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4917      	ldr	r1, [pc, #92]	@ (8001bbc <send_drv_err+0x88>)
 8001b60:	461a      	mov	r2, r3
 8001b62:	460b      	mov	r3, r1
 8001b64:	cb03      	ldmia	r3!, {r0, r1}
 8001b66:	6010      	str	r0, [r2, #0]
 8001b68:	6051      	str	r1, [r2, #4]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	7213      	strb	r3, [r2, #8]
	strcat(err_buffer, msg);
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f007 fe26 	bl	80097c6 <strcat>
	strcat(err_buffer, "\n\r");
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fb9e 	bl	80002c0 <strlen>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	f107 030c 	add.w	r3, r7, #12
 8001b8c:	4413      	add	r3, r2
 8001b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc0 <send_drv_err+0x8c>)
 8001b90:	8811      	ldrh	r1, [r2, #0]
 8001b92:	7892      	ldrb	r2, [r2, #2]
 8001b94:	8019      	strh	r1, [r3, #0]
 8001b96:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&hlpuart1,(uint8_t*) err_buffer, strlen(err_buffer), STATE_SENDING_TIMEOUT);
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fb8f 	bl	80002c0 <strlen>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	f107 010c 	add.w	r1, r7, #12
 8001baa:	230a      	movs	r3, #10
 8001bac:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <send_drv_err+0x90>)
 8001bae:	f004 fb69 	bl	8006284 <HAL_UART_Transmit>

}
 8001bb2:	bf00      	nop
 8001bb4:	3770      	adds	r7, #112	@ 0x70
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	0800d80c 	.word	0x0800d80c
 8001bc0:	0800d818 	.word	0x0800d818
 8001bc4:	20000448 	.word	0x20000448

08001bc8 <add_state_to_states_buffer>:


static void add_state_to_states_buffer(MotorState* motor_state){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

	memset(state_str, '\0', sizeof(state_str));
 8001bd0:	2214      	movs	r2, #20
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4807      	ldr	r0, [pc, #28]	@ (8001bf4 <add_state_to_states_buffer+0x2c>)
 8001bd6:	f007 fdee 	bl	80097b6 <memset>
	str_motor_state(motor_state, state_str);
 8001bda:	4906      	ldr	r1, [pc, #24]	@ (8001bf4 <add_state_to_states_buffer+0x2c>)
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f8ad 	bl	8001d3c <str_motor_state>
	strcat(states_buffer, state_str);
 8001be2:	4904      	ldr	r1, [pc, #16]	@ (8001bf4 <add_state_to_states_buffer+0x2c>)
 8001be4:	4804      	ldr	r0, [pc, #16]	@ (8001bf8 <add_state_to_states_buffer+0x30>)
 8001be6:	f007 fdee 	bl	80097c6 <strcat>

}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200004dc 	.word	0x200004dc
 8001bf8:	200004f0 	.word	0x200004f0

08001bfc <send_ack>:

void send_ack(char* msg){
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b09c      	sub	sp, #112	@ 0x70
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	char ack_buffer[100];
	memset(ack_buffer, '\0', sizeof(ack_buffer));
 8001c04:	f107 030c 	add.w	r3, r7, #12
 8001c08:	2264      	movs	r2, #100	@ 0x64
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f007 fdd2 	bl	80097b6 <memset>
	strcat(ack_buffer, ACK_RESP_HEADER);
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fb52 	bl	80002c0 <strlen>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	4413      	add	r3, r2
 8001c26:	4a15      	ldr	r2, [pc, #84]	@ (8001c7c <send_ack+0x80>)
 8001c28:	6810      	ldr	r0, [r2, #0]
 8001c2a:	6018      	str	r0, [r3, #0]
 8001c2c:	7912      	ldrb	r2, [r2, #4]
 8001c2e:	711a      	strb	r2, [r3, #4]
	strcat(ack_buffer, msg);
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f007 fdc5 	bl	80097c6 <strcat>
	strcat(ack_buffer, "\n\r");
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fb3d 	bl	80002c0 <strlen>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a0b      	ldr	r2, [pc, #44]	@ (8001c80 <send_ack+0x84>)
 8001c52:	8811      	ldrh	r1, [r2, #0]
 8001c54:	7892      	ldrb	r2, [r2, #2]
 8001c56:	8019      	strh	r1, [r3, #0]
 8001c58:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&hlpuart1,(uint8_t*) ack_buffer, strlen(ack_buffer), STATE_SENDING_TIMEOUT);
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fb2e 	bl	80002c0 <strlen>
 8001c64:	4603      	mov	r3, r0
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	f107 010c 	add.w	r1, r7, #12
 8001c6c:	230a      	movs	r3, #10
 8001c6e:	4805      	ldr	r0, [pc, #20]	@ (8001c84 <send_ack+0x88>)
 8001c70:	f004 fb08 	bl	8006284 <HAL_UART_Transmit>

}
 8001c74:	bf00      	nop
 8001c76:	3770      	adds	r7, #112	@ 0x70
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	0800d81c 	.word	0x0800d81c
 8001c80:	0800d818 	.word	0x0800d818
 8001c84:	20000448 	.word	0x20000448

08001c88 <send_state>:

void send_state(DrivingSystem* driving_system){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]


	memset(states_buffer, '\0', sizeof(states_buffer));
 8001c90:	2250      	movs	r2, #80	@ 0x50
 8001c92:	2100      	movs	r1, #0
 8001c94:	4815      	ldr	r0, [pc, #84]	@ (8001cec <send_state+0x64>)
 8001c96:	f007 fd8e 	bl	80097b6 <memset>

	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i){
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	e013      	b.n	8001cc8 <send_state+0x40>

		add_state_to_states_buffer(driving_system->left_motors_lst[i]->motor_state);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff8c 	bl	8001bc8 <add_state_to_states_buffer>
		add_state_to_states_buffer(driving_system->right_motors_lst[i]->motor_state);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	3202      	adds	r2, #2
 8001cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff83 	bl	8001bc8 <add_state_to_states_buffer>
	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i){
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	dde8      	ble.n	8001ca0 <send_state+0x18>
	}

	HAL_UART_Transmit(&hlpuart1,(uint8_t*) states_buffer, strlen(states_buffer),STATE_SENDING_TIMEOUT);
 8001cce:	4807      	ldr	r0, [pc, #28]	@ (8001cec <send_state+0x64>)
 8001cd0:	f7fe faf6 	bl	80002c0 <strlen>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	230a      	movs	r3, #10
 8001cda:	4904      	ldr	r1, [pc, #16]	@ (8001cec <send_state+0x64>)
 8001cdc:	4804      	ldr	r0, [pc, #16]	@ (8001cf0 <send_state+0x68>)
 8001cde:	f004 fad1 	bl	8006284 <HAL_UART_Transmit>

}
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200004f0 	.word	0x200004f0
 8001cf0:	20000448 	.word	0x20000448

08001cf4 <init_encoder_info>:
 */

#include "encoder_driver.h"

void init_encoder_info(EncoderInfo* encoder_info, TIM_HandleTypeDef* encoder_timer_)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
	encoder_info->encoder_timer=encoder_timer_;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	601a      	str	r2, [r3, #0]

}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <update_encoder_info>:

void update_encoder_info(EncoderInfo* encoder_info)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

	encoder_info->last_counter_value = encoder_info->counter_value;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	889a      	ldrh	r2, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	80da      	strh	r2, [r3, #6]
	encoder_info->counter_value = __HAL_TIM_GET_COUNTER(encoder_info->encoder_timer);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	809a      	strh	r2, [r3, #4]

}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <str_motor_state>:
#include <motor_features.h>
#include "motor_driver.h"
#include "timers_configuration.h"


void str_motor_state(MotorState* motor_state, char* state_buffer){
 8001d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af04      	add	r7, sp, #16
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]

	sprintf(state_buffer, "%d,%.2f,%.2f\n\r", motor_state->motor_id, motor_state->set_velocity, motor_state->measured_velocity);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	7c1b      	ldrb	r3, [r3, #16]
 8001d4a:	461e      	mov	r6, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fc21 	bl	8000598 <__aeabi_f2d>
 8001d56:	4604      	mov	r4, r0
 8001d58:	460d      	mov	r5, r1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fc1a 	bl	8000598 <__aeabi_f2d>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d6c:	e9cd 4500 	strd	r4, r5, [sp]
 8001d70:	4632      	mov	r2, r6
 8001d72:	4904      	ldr	r1, [pc, #16]	@ (8001d84 <str_motor_state+0x48>)
 8001d74:	6838      	ldr	r0, [r7, #0]
 8001d76:	f007 fc8f 	bl	8009698 <siprintf>
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	0800d824 	.word	0x0800d824

08001d88 <init_motor>:
		MotorState *motor_state_,
		TIM_HandleTypeDef *updater_tim_,
		EncoderInfo *enc_inf_param_,
		PIDController *pid_controller_,
		L298N_driver *L298N_)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
	motor_struct->motor_state = motor_state_;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	601a      	str	r2, [r3, #0]
	motor_struct->motor_updater_tim = updater_tim_;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	60da      	str	r2, [r3, #12]
	motor_struct->updater_timer_periods = CountPeriodS(updater_tim_);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 fbd0 	bl	8002548 <CountPeriodS>
 8001da8:	eef0 7a40 	vmov.f32	s15, s0
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	edc3 7a04 	vstr	s15, [r3, #16]
	motor_struct->encoder_info = enc_inf_param_;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	609a      	str	r2, [r3, #8]
	motor_struct->L298N_driver = L298N_;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	615a      	str	r2, [r3, #20]
	motor_struct->pid_controller = pid_controller_;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	605a      	str	r2, [r3, #4]

}
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <regulate_velocity>:


void regulate_velocity(MotorStruct *motor_struct)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

	MotorState* current_motor_state = motor_struct->motor_state;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]
	uint16_t pwm_value = pid_calculate(	motor_struct->pid_controller,
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	ed93 7a00 	vldr	s14, [r3]
 8001dea:	eef0 0a47 	vmov.f32	s1, s14
 8001dee:	eeb0 0a67 	vmov.f32	s0, s15
 8001df2:	4610      	mov	r0, r2
 8001df4:	f000 f8e4 	bl	8001fc0 <pid_calculate>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	817b      	strh	r3, [r7, #10]
										current_motor_state->set_velocity,
										current_motor_state->measured_velocity);
	uint8_t saturated_pwm_value = saturate_pwm(pwm_value);
 8001dfc:	897b      	ldrh	r3, [r7, #10]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 fad2 	bl	80023a8 <saturate_pwm>
 8001e04:	4603      	mov	r3, r0
 8001e06:	727b      	strb	r3, [r7, #9]
	L298N_set_pwm_count(motor_struct->L298N_driver, saturated_pwm_value);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	7a7a      	ldrb	r2, [r7, #9]
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fce9 	bl	80017e8 <L298N_set_pwm_count>

}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <update_motor_position>:



void update_motor_position(MotorState* motor_state, EncoderInfo* encoder_info)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b086      	sub	sp, #24
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	6039      	str	r1, [r7, #0]

	motor_state->last_position = motor_state->position;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	60da      	str	r2, [r3, #12]
	update_encoder_info(encoder_info);
 8001e30:	6838      	ldr	r0, [r7, #0]
 8001e32:	f7ff ff6d 	bl	8001d10 <update_encoder_info>
	int16_t encoder_diff = encoder_info->counter_value - encoder_info->last_counter_value;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	889a      	ldrh	r2, [r3, #4]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	88db      	ldrh	r3, [r3, #6]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	82bb      	strh	r3, [r7, #20]
	int16_t position_change = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	82fb      	strh	r3, [r7, #22]
	//encoder increase
	if (encoder_diff > 0){
 8001e48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	dd1f      	ble.n	8001e90 <update_motor_position+0x72>

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0310 	and.w	r3, r3, #16
 8001e5c:	2b10      	cmp	r3, #16
 8001e5e:	d114      	bne.n	8001e8a <update_motor_position+0x6c>

			uint16_t postreload_count = abs(encoder_info->counter_value - __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	889b      	ldrh	r3, [r3, #4]
 8001e64:	461a      	mov	r2, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bfb8      	it	lt
 8001e74:	425b      	neglt	r3, r3
 8001e76:	81fb      	strh	r3, [r7, #14]
			position_change = -(encoder_info->last_counter_value + postreload_count); //- because its decreasing
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	88da      	ldrh	r2, [r3, #6]
 8001e7c:	89fb      	ldrh	r3, [r7, #14]
 8001e7e:	4413      	add	r3, r2
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	425b      	negs	r3, r3
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	82fb      	strh	r3, [r7, #22]
 8001e88:	e023      	b.n	8001ed2 <update_motor_position+0xb4>

		}else{
			position_change = encoder_diff;
 8001e8a:	8abb      	ldrh	r3, [r7, #20]
 8001e8c:	82fb      	strh	r3, [r7, #22]
 8001e8e:	e020      	b.n	8001ed2 <update_motor_position+0xb4>
		}
	}else if(encoder_diff < 0) //encoder decrease
 8001e90:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	da1c      	bge.n	8001ed2 <update_motor_position+0xb4>
	{
		if (!__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0310 	and.w	r3, r3, #16
 8001ea4:	2b10      	cmp	r3, #16
 8001ea6:	d012      	beq.n	8001ece <update_motor_position+0xb0>

			int16_t postreload_count = encoder_info->counter_value;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	889b      	ldrh	r3, [r3, #4]
 8001eac:	827b      	strh	r3, [r7, #18]
			int16_t prereload_count = __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer) - encoder_info->last_counter_value;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	88db      	ldrh	r3, [r3, #6]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	823b      	strh	r3, [r7, #16]
			position_change = postreload_count + prereload_count;
 8001ec2:	8a7a      	ldrh	r2, [r7, #18]
 8001ec4:	8a3b      	ldrh	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	82fb      	strh	r3, [r7, #22]
 8001ecc:	e001      	b.n	8001ed2 <update_motor_position+0xb4>

		}else{
			position_change = encoder_diff;
 8001ece:	8abb      	ldrh	r3, [r7, #20]
 8001ed0:	82fb      	strh	r3, [r7, #22]
		}
	}

	float position_change_rad = convert_to_radians(position_change);
 8001ed2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 fa32 	bl	8002340 <convert_to_radians>
 8001edc:	ed87 0a02 	vstr	s0, [r7, #8]
	motor_state->position = motor_state->last_position - position_change_rad;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ee6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8001ef4:	bf00      	nop
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <motor_state_set_velocity>:

void motor_state_set_velocity(MotorState *motor_state, float velocity)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	ed87 0a00 	vstr	s0, [r7]
	motor_state->set_velocity = velocity;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <update_measured_velocity>:

void update_measured_velocity(MotorStruct* motor_struct)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
	MotorState *curr_motor_state = motor_struct->motor_state;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	60fb      	str	r3, [r7, #12]
	float rotary_displacement_ = rotary_displacement(curr_motor_state);
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f810 	bl	8001f4e <rotary_displacement>
 8001f2e:	ed87 0a02 	vstr	s0, [r7, #8]
	curr_motor_state->measured_velocity = (float)rotary_displacement_ / motor_struct->updater_timer_periods;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	ed93 7a04 	vldr	s14, [r3, #16]
 8001f38:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	edc3 7a00 	vstr	s15, [r3]

}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <rotary_displacement>:

float rotary_displacement(MotorState *motor_state){
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]

	return motor_state->position - motor_state->last_position;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f62:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001f66:	eeb0 0a67 	vmov.f32	s0, s15
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <pid_init>:
#include "pid_controller.h"
#include "motor_features.h"

void pid_init(PIDController *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6178      	str	r0, [r7, #20]
 8001f7c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001f80:	edc7 0a03 	vstr	s1, [r7, #12]
 8001f84:	ed87 1a02 	vstr	s2, [r7, #8]
 8001f88:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	615a      	str	r2, [r3, #20]
}
 8001fb2:	bf00      	nop
 8001fb4:	371c      	adds	r7, #28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <pid_calculate>:
float d_term;
float pid_output;


uint8_t pid_calculate(PIDController *pid_data, float setpoint, float process_variable)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001fcc:	edc7 0a01 	vstr	s1, [r7, #4]

	error = setpoint - process_variable;
 8001fd0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001fd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fdc:	4b4f      	ldr	r3, [pc, #316]	@ (800211c <pid_calculate+0x15c>)
 8001fde:	edc3 7a00 	vstr	s15, [r3]
	pid_data->total_error += error;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fe8:	4b4c      	ldr	r3, [pc, #304]	@ (800211c <pid_calculate+0x15c>)
 8001fea:	edd3 7a00 	vldr	s15, [r3]
 8001fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	edc3 7a01 	vstr	s15, [r3, #4]

	p_term = (float)(pid_data->Kp * error);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ffe:	4b47      	ldr	r3, [pc, #284]	@ (800211c <pid_calculate+0x15c>)
 8002000:	edd3 7a00 	vldr	s15, [r3]
 8002004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002008:	4b45      	ldr	r3, [pc, #276]	@ (8002120 <pid_calculate+0x160>)
 800200a:	edc3 7a00 	vstr	s15, [r3]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	ed93 7a03 	vldr	s14, [r3, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	edd3 7a01 	vldr	s15, [r3, #4]
 800201a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201e:	4b41      	ldr	r3, [pc, #260]	@ (8002124 <pid_calculate+0x164>)
 8002020:	edc3 7a00 	vstr	s15, [r3]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	ed93 7a04 	vldr	s14, [r3, #16]
 800202a:	4b3c      	ldr	r3, [pc, #240]	@ (800211c <pid_calculate+0x15c>)
 800202c:	edd3 6a00 	vldr	s13, [r3]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	edd3 7a00 	vldr	s15, [r3]
 8002036:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800203a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203e:	4b3a      	ldr	r3, [pc, #232]	@ (8002128 <pid_calculate+0x168>)
 8002040:	edc3 7a00 	vstr	s15, [r3]

	pid_output = p_term + i_term + d_term;
 8002044:	4b36      	ldr	r3, [pc, #216]	@ (8002120 <pid_calculate+0x160>)
 8002046:	ed93 7a00 	vldr	s14, [r3]
 800204a:	4b36      	ldr	r3, [pc, #216]	@ (8002124 <pid_calculate+0x164>)
 800204c:	edd3 7a00 	vldr	s15, [r3]
 8002050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002054:	4b34      	ldr	r3, [pc, #208]	@ (8002128 <pid_calculate+0x168>)
 8002056:	edd3 7a00 	vldr	s15, [r3]
 800205a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205e:	4b33      	ldr	r3, [pc, #204]	@ (800212c <pid_calculate+0x16c>)
 8002060:	edc3 7a00 	vstr	s15, [r3]

    // Anti-windup
    if (pid_output < -pid_data->anti_windup_limit)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	425b      	negs	r3, r3
 800206a:	ee07 3a90 	vmov	s15, r3
 800206e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002072:	4b2e      	ldr	r3, [pc, #184]	@ (800212c <pid_calculate+0x16c>)
 8002074:	edd3 7a00 	vldr	s15, [r3]
 8002078:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800207c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002080:	dd15      	ble.n	80020ae <pid_calculate+0xee>
    {
        pid_output = -pid_data->anti_windup_limit;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	425b      	negs	r3, r3
 8002088:	ee07 3a90 	vmov	s15, r3
 800208c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002090:	4b26      	ldr	r3, [pc, #152]	@ (800212c <pid_calculate+0x16c>)
 8002092:	edc3 7a00 	vstr	s15, [r3]
        pid_data->total_error = pid_data->total_error - error;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	ed93 7a01 	vldr	s14, [r3, #4]
 800209c:	4b1f      	ldr	r3, [pc, #124]	@ (800211c <pid_calculate+0x15c>)
 800209e:	edd3 7a00 	vldr	s15, [r3]
 80020a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	edc3 7a01 	vstr	s15, [r3, #4]
 80020ac:	e021      	b.n	80020f2 <pid_calculate+0x132>

    } else if (pid_output > pid_data->anti_windup_limit)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	ee07 3a90 	vmov	s15, r3
 80020b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ba:	4b1c      	ldr	r3, [pc, #112]	@ (800212c <pid_calculate+0x16c>)
 80020bc:	edd3 7a00 	vldr	s15, [r3]
 80020c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c8:	d513      	bpl.n	80020f2 <pid_calculate+0x132>
    {
        pid_output = pid_data->anti_windup_limit;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	ee07 3a90 	vmov	s15, r3
 80020d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d6:	4b15      	ldr	r3, [pc, #84]	@ (800212c <pid_calculate+0x16c>)
 80020d8:	edc3 7a00 	vstr	s15, [r3]
        pid_data->total_error = pid_data->total_error - error;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	ed93 7a01 	vldr	s14, [r3, #4]
 80020e2:	4b0e      	ldr	r3, [pc, #56]	@ (800211c <pid_calculate+0x15c>)
 80020e4:	edd3 7a00 	vldr	s15, [r3]
 80020e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	edc3 7a01 	vstr	s15, [r3, #4]
    }


	pid_data->previous_error = error;
 80020f2:	4b0a      	ldr	r3, [pc, #40]	@ (800211c <pid_calculate+0x15c>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	601a      	str	r2, [r3, #0]
	uint8_t saturated_pwm_value = saturate_pwm(pid_output);
 80020fa:	4b0c      	ldr	r3, [pc, #48]	@ (800212c <pid_calculate+0x16c>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002104:	ee17 0a90 	vmov	r0, s15
 8002108:	f000 f94e 	bl	80023a8 <saturate_pwm>
 800210c:	4603      	mov	r3, r0
 800210e:	75fb      	strb	r3, [r7, #23]
	return saturated_pwm_value;
 8002110:	7dfb      	ldrb	r3, [r7, #23]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000540 	.word	0x20000540
 8002120:	20000544 	.word	0x20000544
 8002124:	20000548 	.word	0x20000548
 8002128:	2000054c 	.word	0x2000054c
 800212c:	20000550 	.word	0x20000550

08002130 <drive_velo_dir>:

#include "driving_modes.h"



void drive_velo_dir(DrivingSystem* driving_system, EDvDir dv_dir, float velocity){
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	460b      	mov	r3, r1
 800213a:	ed87 0a01 	vstr	s0, [r7, #4]
 800213e:	72fb      	strb	r3, [r7, #11]

	if(dv_dir == DV_DIR_STOP){
 8002140:	7afb      	ldrb	r3, [r7, #11]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d107      	bne.n	8002156 <drive_velo_dir+0x26>
		drive_velo(driving_system, velocity, L298N_MODE_STOP, L298N_MODE_STOP);
 8002146:	2200      	movs	r2, #0
 8002148:	2100      	movs	r1, #0
 800214a:	ed97 0a01 	vldr	s0, [r7, #4]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f86d 	bl	800222e <drive_velo>
	}else if(dv_dir == DV_DIR_LEFT){
		drive_velo(driving_system, velocity, L298N_MODE_FORWARD, L298N_MODE_BACKWARD);
	}else if(dv_dir == DV_DIR_RIGHT){
		drive_velo(driving_system, velocity, L298N_MODE_BACKWARD, L298N_MODE_FORWARD);
	}
}
 8002154:	e02a      	b.n	80021ac <drive_velo_dir+0x7c>
	}else if(dv_dir == DV_DIR_FORWARD){
 8002156:	7afb      	ldrb	r3, [r7, #11]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d107      	bne.n	800216c <drive_velo_dir+0x3c>
		drive_velo(driving_system, velocity, L298N_MODE_FORWARD, L298N_MODE_FORWARD);
 800215c:	2201      	movs	r2, #1
 800215e:	2101      	movs	r1, #1
 8002160:	ed97 0a01 	vldr	s0, [r7, #4]
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 f862 	bl	800222e <drive_velo>
}
 800216a:	e01f      	b.n	80021ac <drive_velo_dir+0x7c>
	}else if(dv_dir == DV_DIR_BACKWARD){
 800216c:	7afb      	ldrb	r3, [r7, #11]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d107      	bne.n	8002182 <drive_velo_dir+0x52>
		drive_velo(driving_system, velocity, L298N_MODE_BACKWARD, L298N_MODE_BACKWARD);
 8002172:	2202      	movs	r2, #2
 8002174:	2102      	movs	r1, #2
 8002176:	ed97 0a01 	vldr	s0, [r7, #4]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f857 	bl	800222e <drive_velo>
}
 8002180:	e014      	b.n	80021ac <drive_velo_dir+0x7c>
	}else if(dv_dir == DV_DIR_LEFT){
 8002182:	7afb      	ldrb	r3, [r7, #11]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d107      	bne.n	8002198 <drive_velo_dir+0x68>
		drive_velo(driving_system, velocity, L298N_MODE_FORWARD, L298N_MODE_BACKWARD);
 8002188:	2202      	movs	r2, #2
 800218a:	2101      	movs	r1, #1
 800218c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f84c 	bl	800222e <drive_velo>
}
 8002196:	e009      	b.n	80021ac <drive_velo_dir+0x7c>
	}else if(dv_dir == DV_DIR_RIGHT){
 8002198:	7afb      	ldrb	r3, [r7, #11]
 800219a:	2b04      	cmp	r3, #4
 800219c:	d106      	bne.n	80021ac <drive_velo_dir+0x7c>
		drive_velo(driving_system, velocity, L298N_MODE_BACKWARD, L298N_MODE_FORWARD);
 800219e:	2201      	movs	r2, #1
 80021a0:	2102      	movs	r1, #2
 80021a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f841 	bl	800222e <drive_velo>
}
 80021ac:	bf00      	nop
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <drive_pwm_dir>:

void drive_pwm_dir(DrivingSystem* driving_system, EDvDir dv_dir, uint8_t pwm){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	70fb      	strb	r3, [r7, #3]
 80021c0:	4613      	mov	r3, r2
 80021c2:	70bb      	strb	r3, [r7, #2]

	if(dv_dir == DV_DIR_STOP){
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d106      	bne.n	80021d8 <drive_pwm_dir+0x24>
		drive_pwm(driving_system, pwm, L298N_MODE_STOP, L298N_MODE_STOP);
 80021ca:	78b9      	ldrb	r1, [r7, #2]
 80021cc:	2300      	movs	r3, #0
 80021ce:	2200      	movs	r2, #0
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f86e 	bl	80022b2 <drive_pwm>
	}else if(dv_dir == DV_DIR_LEFT){
		drive_pwm(driving_system, pwm, L298N_MODE_FORWARD, L298N_MODE_BACKWARD);
	}else if(dv_dir == DV_DIR_RIGHT){
		drive_pwm(driving_system, pwm, L298N_MODE_BACKWARD, L298N_MODE_FORWARD);
	}
}
 80021d6:	e026      	b.n	8002226 <drive_pwm_dir+0x72>
	}else if(dv_dir == DV_DIR_FORWARD){
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d106      	bne.n	80021ec <drive_pwm_dir+0x38>
		drive_pwm(driving_system, pwm, L298N_MODE_FORWARD, L298N_MODE_FORWARD);
 80021de:	78b9      	ldrb	r1, [r7, #2]
 80021e0:	2301      	movs	r3, #1
 80021e2:	2201      	movs	r2, #1
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f864 	bl	80022b2 <drive_pwm>
}
 80021ea:	e01c      	b.n	8002226 <drive_pwm_dir+0x72>
	}else if(dv_dir == DV_DIR_BACKWARD){
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d106      	bne.n	8002200 <drive_pwm_dir+0x4c>
		drive_pwm(driving_system, pwm, L298N_MODE_BACKWARD, L298N_MODE_BACKWARD);
 80021f2:	78b9      	ldrb	r1, [r7, #2]
 80021f4:	2302      	movs	r3, #2
 80021f6:	2202      	movs	r2, #2
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f85a 	bl	80022b2 <drive_pwm>
}
 80021fe:	e012      	b.n	8002226 <drive_pwm_dir+0x72>
	}else if(dv_dir == DV_DIR_LEFT){
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	2b03      	cmp	r3, #3
 8002204:	d106      	bne.n	8002214 <drive_pwm_dir+0x60>
		drive_pwm(driving_system, pwm, L298N_MODE_FORWARD, L298N_MODE_BACKWARD);
 8002206:	78b9      	ldrb	r1, [r7, #2]
 8002208:	2302      	movs	r3, #2
 800220a:	2201      	movs	r2, #1
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f850 	bl	80022b2 <drive_pwm>
}
 8002212:	e008      	b.n	8002226 <drive_pwm_dir+0x72>
	}else if(dv_dir == DV_DIR_RIGHT){
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	2b04      	cmp	r3, #4
 8002218:	d105      	bne.n	8002226 <drive_pwm_dir+0x72>
		drive_pwm(driving_system, pwm, L298N_MODE_BACKWARD, L298N_MODE_FORWARD);
 800221a:	78b9      	ldrb	r1, [r7, #2]
 800221c:	2301      	movs	r3, #1
 800221e:	2202      	movs	r2, #2
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f846 	bl	80022b2 <drive_pwm>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <drive_velo>:



void drive_velo(DrivingSystem* driving_system, float velocity, EL298N_MODE left_dir, EL298N_MODE right_dir)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b086      	sub	sp, #24
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	ed87 0a02 	vstr	s0, [r7, #8]
 800223a:	460b      	mov	r3, r1
 800223c:	71fb      	strb	r3, [r7, #7]
 800223e:	4613      	mov	r3, r2
 8002240:	71bb      	strb	r3, [r7, #6]

	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i)
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	e02c      	b.n	80022a2 <drive_velo+0x74>
	{
		L298N_set_input_configuration(driving_system->left_motors_lst[i]->L298N_driver, left_dir);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	79fa      	ldrb	r2, [r7, #7]
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fb21 	bl	800189e <L298N_set_input_configuration>
		L298N_set_input_configuration(driving_system->right_motors_lst[i]->L298N_driver, right_dir);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	3202      	adds	r2, #2
 8002262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	79ba      	ldrb	r2, [r7, #6]
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fb16 	bl	800189e <L298N_set_input_configuration>
		motor_state_set_velocity(driving_system->left_motors_lst[i]->motor_state, velocity);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fe3b 	bl	8001efc <motor_state_set_velocity>
		motor_state_set_velocity(driving_system->right_motors_lst[i]->motor_state, velocity);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	3202      	adds	r2, #2
 800228c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	ed97 0a02 	vldr	s0, [r7, #8]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fe30 	bl	8001efc <motor_state_set_velocity>
	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	3301      	adds	r3, #1
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	ddcf      	ble.n	8002248 <drive_velo+0x1a>

	}
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <drive_pwm>:


void drive_pwm(DrivingSystem* driving_system, uint8_t pwm, EL298N_MODE left_dir, EL298N_MODE right_dir){
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	4608      	mov	r0, r1
 80022bc:	4611      	mov	r1, r2
 80022be:	461a      	mov	r2, r3
 80022c0:	4603      	mov	r3, r0
 80022c2:	70fb      	strb	r3, [r7, #3]
 80022c4:	460b      	mov	r3, r1
 80022c6:	70bb      	strb	r3, [r7, #2]
 80022c8:	4613      	mov	r3, r2
 80022ca:	707b      	strb	r3, [r7, #1]
	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i)
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	e02d      	b.n	800232e <drive_pwm+0x7c>
	{
		L298N_set_input_configuration(driving_system->left_motors_lst[i]->L298N_driver, left_dir);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	78ba      	ldrb	r2, [r7, #2]
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fadc 	bl	800189e <L298N_set_input_configuration>
		L298N_set_input_configuration(driving_system->right_motors_lst[i]->L298N_driver, right_dir);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	3202      	adds	r2, #2
 80022ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	787a      	ldrb	r2, [r7, #1]
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fad1 	bl	800189e <L298N_set_input_configuration>
		L298N_set_pwm_count(driving_system->right_motors_lst[i]->L298N_driver, pwm);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	3202      	adds	r2, #2
 8002302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fa6b 	bl	80017e8 <L298N_set_pwm_count>
		L298N_set_pwm_count(driving_system->right_motors_lst[i]->L298N_driver, pwm);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	3202      	adds	r2, #2
 8002318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fa60 	bl	80017e8 <L298N_set_pwm_count>
	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	3301      	adds	r3, #1
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b01      	cmp	r3, #1
 8002332:	ddce      	ble.n	80022d2 <drive_pwm+0x20>
	}

}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <convert_to_radians>:

#include "motor_features.h"



float convert_to_radians(int32_t enc_position){
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

	return 2* M_PI * (float)enc_position / (float) ONE_ROTATION_TICKS;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	ee07 3a90 	vmov	s15, r3
 800234e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002352:	ee17 0a90 	vmov	r0, s15
 8002356:	f7fe f91f 	bl	8000598 <__aeabi_f2d>
 800235a:	a30f      	add	r3, pc, #60	@ (adr r3, 8002398 <convert_to_radians+0x58>)
 800235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002360:	f7fe f972 	bl	8000648 <__aeabi_dmul>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	a30c      	add	r3, pc, #48	@ (adr r3, 80023a0 <convert_to_radians+0x60>)
 800236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002372:	f7fe fa93 	bl	800089c <__aeabi_ddiv>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	f7fe fc5b 	bl	8000c38 <__aeabi_d2f>
 8002382:	4603      	mov	r3, r0
 8002384:	ee07 3a90 	vmov	s15, r3

}
 8002388:	eeb0 0a67 	vmov.f32	s0, s15
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	f3af 8000 	nop.w
 8002398:	54442d18 	.word	0x54442d18
 800239c:	401921fb 	.word	0x401921fb
 80023a0:	00000000 	.word	0x00000000
 80023a4:	40ae6400 	.word	0x40ae6400

080023a8 <saturate_pwm>:


uint8_t saturate_pwm(int pwm_value){
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]


	if (pwm_value < PWM_MIN_VALUE){
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	da02      	bge.n	80023bc <saturate_pwm+0x14>
		pwm_value = (uint8_t)PWM_MIN_VALUE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	e004      	b.n	80023c6 <saturate_pwm+0x1e>
	}else if(pwm_value > PWM_MAX_VALUE){
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b62      	cmp	r3, #98	@ 0x62
 80023c0:	dd01      	ble.n	80023c6 <saturate_pwm+0x1e>
		pwm_value = (uint8_t)PWM_MAX_VALUE;
 80023c2:	2362      	movs	r3, #98	@ 0x62
 80023c4:	607b      	str	r3, [r7, #4]
	}
	return (uint8_t)pwm_value;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	b2db      	uxtb	r3, r3

}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <parse_cmd_code>:
#define SRC_FEATURES_PARSER_FEATURES_C_

#include "parser_features.h"


int parse_cmd_code(uint8_t* cmd, uint8_t* cmd_code){
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]

	if (cmd[0] >= '0' && cmd[0] <= '9') {
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80023e8:	d90f      	bls.n	800240a <parse_cmd_code+0x32>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b39      	cmp	r3, #57	@ 0x39
 80023f0:	d80b      	bhi.n	800240a <parse_cmd_code+0x32>
		cmd_code[0] = cmd[0] - '0';
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	3b30      	subs	r3, #48	@ 0x30
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	701a      	strb	r2, [r3, #0]
	}else{
		send_parsing_err("cmd[0] wrong format");
		return 1;
	}

	if (cmd[1] >= '0' && cmd[1] <= '9') {
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3301      	adds	r3, #1
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b2f      	cmp	r3, #47	@ 0x2f
 8002406:	d805      	bhi.n	8002414 <parse_cmd_code+0x3c>
 8002408:	e013      	b.n	8002432 <parse_cmd_code+0x5a>
		send_parsing_err("cmd[0] wrong format");
 800240a:	480e      	ldr	r0, [pc, #56]	@ (8002444 <parse_cmd_code+0x6c>)
 800240c:	f000 f850 	bl	80024b0 <send_parsing_err>
		return 1;
 8002410:	2301      	movs	r3, #1
 8002412:	e012      	b.n	800243a <parse_cmd_code+0x62>
	if (cmd[1] >= '0' && cmd[1] <= '9') {
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3301      	adds	r3, #1
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b39      	cmp	r3, #57	@ 0x39
 800241c:	d809      	bhi.n	8002432 <parse_cmd_code+0x5a>
		cmd_code[1] = cmd[1] - '0';
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3301      	adds	r3, #1
 8002422:	781a      	ldrb	r2, [r3, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	3301      	adds	r3, #1
 8002428:	3a30      	subs	r2, #48	@ 0x30
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]
	}else{
		send_parsing_err("cmd[1] wrong format");
		return 1;
	}
	return 0;
 800242e:	2300      	movs	r3, #0
 8002430:	e003      	b.n	800243a <parse_cmd_code+0x62>
		send_parsing_err("cmd[1] wrong format");
 8002432:	4805      	ldr	r0, [pc, #20]	@ (8002448 <parse_cmd_code+0x70>)
 8002434:	f000 f83c 	bl	80024b0 <send_parsing_err>
		return 1;
 8002438:	2301      	movs	r3, #1
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	0800d834 	.word	0x0800d834
 8002448:	0800d848 	.word	0x0800d848

0800244c <parse_payload>:

int parse_payload(uint8_t* cmd, uint8_t* payload) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]

    uint8_t cmd_index = 2;
 8002456:	2302      	movs	r3, #2
 8002458:	73fb      	strb	r3, [r7, #15]
    int i = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]

    while (cmd[cmd_index] != CMD_END_CHAR) {
 800245e:	e015      	b.n	800248c <parse_payload+0x40>

    	if(i == CMD_PAYLOAD_LENGTH-1){
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b05      	cmp	r3, #5
 8002464:	d104      	bne.n	8002470 <parse_payload+0x24>
    		send_parsing_err("cmd end char not received");
 8002466:	4811      	ldr	r0, [pc, #68]	@ (80024ac <parse_payload+0x60>)
 8002468:	f000 f822 	bl	80024b0 <send_parsing_err>
    		return 1;
 800246c:	2301      	movs	r3, #1
 800246e:	e019      	b.n	80024a4 <parse_payload+0x58>
    	}
        payload[i] = cmd[cmd_index];
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	441a      	add	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	6839      	ldr	r1, [r7, #0]
 800247a:	440b      	add	r3, r1
 800247c:	7812      	ldrb	r2, [r2, #0]
 800247e:	701a      	strb	r2, [r3, #0]
        i++;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	3301      	adds	r3, #1
 8002484:	60bb      	str	r3, [r7, #8]
        cmd_index++;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	3301      	adds	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
    while (cmd[cmd_index] != CMD_END_CHAR) {
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b66      	cmp	r3, #102	@ 0x66
 8002496:	d1e3      	bne.n	8002460 <parse_payload+0x14>
    }

    payload[i] = '\0';
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	4413      	add	r3, r2
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
    return 0;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	0800d85c 	.word	0x0800d85c

080024b0 <send_parsing_err>:

void send_parsing_err(char* msg){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b09c      	sub	sp, #112	@ 0x70
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

	char err_buffer[100];
	memset(err_buffer, '\0', sizeof(err_buffer));
 80024b8:	f107 030c 	add.w	r3, r7, #12
 80024bc:	2264      	movs	r2, #100	@ 0x64
 80024be:	2100      	movs	r1, #0
 80024c0:	4618      	mov	r0, r3
 80024c2:	f007 f978 	bl	80097b6 <memset>
	strcat(err_buffer, PARSING_ERR);
 80024c6:	f107 030c 	add.w	r3, r7, #12
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fd fef8 	bl	80002c0 <strlen>
 80024d0:	4603      	mov	r3, r0
 80024d2:	461a      	mov	r2, r3
 80024d4:	f107 030c 	add.w	r3, r7, #12
 80024d8:	4413      	add	r3, r2
 80024da:	4918      	ldr	r1, [pc, #96]	@ (800253c <send_parsing_err+0x8c>)
 80024dc:	461a      	mov	r2, r3
 80024de:	460b      	mov	r3, r1
 80024e0:	cb03      	ldmia	r3!, {r0, r1}
 80024e2:	6010      	str	r0, [r2, #0]
 80024e4:	6051      	str	r1, [r2, #4]
 80024e6:	8819      	ldrh	r1, [r3, #0]
 80024e8:	789b      	ldrb	r3, [r3, #2]
 80024ea:	8111      	strh	r1, [r2, #8]
 80024ec:	7293      	strb	r3, [r2, #10]
	strcat(err_buffer, msg);
 80024ee:	f107 030c 	add.w	r3, r7, #12
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f007 f966 	bl	80097c6 <strcat>
	strcat(err_buffer, "\n\r");
 80024fa:	f107 030c 	add.w	r3, r7, #12
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fd fede 	bl	80002c0 <strlen>
 8002504:	4603      	mov	r3, r0
 8002506:	461a      	mov	r2, r3
 8002508:	f107 030c 	add.w	r3, r7, #12
 800250c:	4413      	add	r3, r2
 800250e:	4a0c      	ldr	r2, [pc, #48]	@ (8002540 <send_parsing_err+0x90>)
 8002510:	8811      	ldrh	r1, [r2, #0]
 8002512:	7892      	ldrb	r2, [r2, #2]
 8002514:	8019      	strh	r1, [r3, #0]
 8002516:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&hlpuart1,(uint8_t*) err_buffer, strlen(err_buffer), PARSING_ERROR_TIMEOUT);
 8002518:	f107 030c 	add.w	r3, r7, #12
 800251c:	4618      	mov	r0, r3
 800251e:	f7fd fecf 	bl	80002c0 <strlen>
 8002522:	4603      	mov	r3, r0
 8002524:	b29a      	uxth	r2, r3
 8002526:	f107 010c 	add.w	r1, r7, #12
 800252a:	230a      	movs	r3, #10
 800252c:	4805      	ldr	r0, [pc, #20]	@ (8002544 <send_parsing_err+0x94>)
 800252e:	f003 fea9 	bl	8006284 <HAL_UART_Transmit>

}
 8002532:	bf00      	nop
 8002534:	3770      	adds	r7, #112	@ 0x70
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	0800d878 	.word	0x0800d878
 8002540:	0800d884 	.word	0x0800d884
 8002544:	20000448 	.word	0x20000448

08002548 <CountPeriodS>:
 */

#include "timers_feature.h"

// Funkcja obliczająca okres w sekundach
float CountPeriodS(TIM_HandleTypeDef *htim) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
    uint32_t prescaler = htim->Init.Prescaler;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	617b      	str	r3, [r7, #20]
    uint32_t period = htim->Init.Period;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	613b      	str	r3, [r7, #16]
    uint32_t clock_freq = HAL_RCC_GetHCLKFreq();
 800255c:	f001 fdaa 	bl	80040b4 <HAL_RCC_GetHCLKFreq>
 8002560:	60f8      	str	r0, [r7, #12]

    float period_seconds = (float)(prescaler * period) / (float)clock_freq;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	fb02 f303 	mul.w	r3, r2, r3
 800256a:	ee07 3a90 	vmov	s15, r3
 800256e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	ee07 3a90 	vmov	s15, r3
 8002578:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800257c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002580:	edc7 7a02 	vstr	s15, [r7, #8]

    return period_seconds;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	ee07 3a90 	vmov	s15, r3
}
 800258a:	eeb0 0a67 	vmov.f32	s0, s15
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <main>:
void generate_stair_signal_pwm(void);
void generate_random_signal_velo(void);


int main(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af04      	add	r7, sp, #16

  HAL_Init();
 800259a:	f000 fcc8 	bl	8002f2e <HAL_Init>
  SystemClock_Config();
 800259e:	f7fe fd49 	bl	8001034 <SystemClock_Config>
  MX_GPIO_Init();
 80025a2:	f7fe fd93 	bl	80010cc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80025a6:	f7ff f867 	bl	8001678 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80025aa:	f7ff f8af 	bl	800170c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80025ae:	f7fe fdfb 	bl	80011a8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80025b2:	f7fe fecf 	bl	8001354 <MX_TIM3_Init>
  MX_TIM4_Init();
 80025b6:	f7fe ff23 	bl	8001400 <MX_TIM4_Init>
  MX_TIM5_Init();
 80025ba:	f7fe ff77 	bl	80014ac <MX_TIM5_Init>
  MX_TIM7_Init();
 80025be:	f7fe ffcb 	bl	8001558 <MX_TIM7_Init>
  MX_TIM8_Init();
 80025c2:	f7fe ffff 	bl	80015c4 <MX_TIM8_Init>

  init_encoder_info(&encoder_info, &htim4);
 80025c6:	4936      	ldr	r1, [pc, #216]	@ (80026a0 <main+0x10c>)
 80025c8:	4836      	ldr	r0, [pc, #216]	@ (80026a4 <main+0x110>)
 80025ca:	f7ff fb93 	bl	8001cf4 <init_encoder_info>
  L298N_init(&L298N_lb, TIM_CHANNEL_1, &htim1, GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_1);
 80025ce:	2302      	movs	r3, #2
 80025d0:	9302      	str	r3, [sp, #8]
 80025d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	2301      	movs	r3, #1
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80025e0:	4a31      	ldr	r2, [pc, #196]	@ (80026a8 <main+0x114>)
 80025e2:	2100      	movs	r1, #0
 80025e4:	4831      	ldr	r0, [pc, #196]	@ (80026ac <main+0x118>)
 80025e6:	f7ff f8dd 	bl	80017a4 <L298N_init>
  pid_init(&pid_controller, MOTOR_Kp , MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 80025ea:	215f      	movs	r1, #95	@ 0x5f
 80025ec:	ed9f 1a30 	vldr	s2, [pc, #192]	@ 80026b0 <main+0x11c>
 80025f0:	eddf 0a30 	vldr	s1, [pc, #192]	@ 80026b4 <main+0x120>
 80025f4:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 80026b8 <main+0x124>
 80025f8:	4830      	ldr	r0, [pc, #192]	@ (80026bc <main+0x128>)
 80025fa:	f7ff fcbb 	bl	8001f74 <pid_init>
  init_motor(&lb_motor, &lb_motor_state, &htim7, &encoder_info, &pid_controller, &L298N_lb);
 80025fe:	4b2b      	ldr	r3, [pc, #172]	@ (80026ac <main+0x118>)
 8002600:	9301      	str	r3, [sp, #4]
 8002602:	4b2e      	ldr	r3, [pc, #184]	@ (80026bc <main+0x128>)
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	4b27      	ldr	r3, [pc, #156]	@ (80026a4 <main+0x110>)
 8002608:	4a2d      	ldr	r2, [pc, #180]	@ (80026c0 <main+0x12c>)
 800260a:	492e      	ldr	r1, [pc, #184]	@ (80026c4 <main+0x130>)
 800260c:	482e      	ldr	r0, [pc, #184]	@ (80026c8 <main+0x134>)
 800260e:	f7ff fbbb 	bl	8001d88 <init_motor>

  updater_timer_periods = CountPeriodS(lb_motor.motor_updater_tim);
 8002612:	4b2d      	ldr	r3, [pc, #180]	@ (80026c8 <main+0x134>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff ff96 	bl	8002548 <CountPeriodS>
 800261c:	eef0 7a40 	vmov.f32	s15, s0
 8002620:	4b2a      	ldr	r3, [pc, #168]	@ (80026cc <main+0x138>)
 8002622:	edc3 7a00 	vstr	s15, [r3]
  L298N_set_input_configuration(&L298N_lb, L298N_MODE_FORWARD);
 8002626:	2101      	movs	r1, #1
 8002628:	4820      	ldr	r0, [pc, #128]	@ (80026ac <main+0x118>)
 800262a:	f7ff f938 	bl	800189e <L298N_set_input_configuration>
  init_driving_system(&driving_system ,&lb_motor, &lb_motor,&lb_motor, &lb_motor);
 800262e:	4b26      	ldr	r3, [pc, #152]	@ (80026c8 <main+0x134>)
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	4b25      	ldr	r3, [pc, #148]	@ (80026c8 <main+0x134>)
 8002634:	4a24      	ldr	r2, [pc, #144]	@ (80026c8 <main+0x134>)
 8002636:	4924      	ldr	r1, [pc, #144]	@ (80026c8 <main+0x134>)
 8002638:	4825      	ldr	r0, [pc, #148]	@ (80026d0 <main+0x13c>)
 800263a:	f7ff f975 	bl	8001928 <init_driving_system>
  default_init_driving_system_if(&drv_system_if);
 800263e:	4825      	ldr	r0, [pc, #148]	@ (80026d4 <main+0x140>)
 8002640:	f7ff f98e 	bl	8001960 <default_init_driving_system_if>


  pwm_output = 0;
 8002644:	4b24      	ldr	r3, [pc, #144]	@ (80026d8 <main+0x144>)
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]
  tick = 0;
 800264a:	4924      	ldr	r1, [pc, #144]	@ (80026dc <main+0x148>)
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	e9c1 2300 	strd	r2, r3, [r1]
  velo = 0;
 8002658:	4b21      	ldr	r3, [pc, #132]	@ (80026e0 <main+0x14c>)
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 800265e:	4818      	ldr	r0, [pc, #96]	@ (80026c0 <main+0x12c>)
 8002660:	f002 f8ee 	bl	8004840 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim8);
 8002664:	481f      	ldr	r0, [pc, #124]	@ (80026e4 <main+0x150>)
 8002666:	f002 f87b 	bl	8004760 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800266a:	2100      	movs	r1, #0
 800266c:	480e      	ldr	r0, [pc, #56]	@ (80026a8 <main+0x114>)
 800266e:	f002 f9c1 	bl	80049f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002672:	2104      	movs	r1, #4
 8002674:	480c      	ldr	r0, [pc, #48]	@ (80026a8 <main+0x114>)
 8002676:	f002 f9bd 	bl	80049f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800267a:	2108      	movs	r1, #8
 800267c:	480a      	ldr	r0, [pc, #40]	@ (80026a8 <main+0x114>)
 800267e:	f002 f9b9 	bl	80049f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002682:	210c      	movs	r1, #12
 8002684:	4808      	ldr	r0, [pc, #32]	@ (80026a8 <main+0x114>)
 8002686:	f002 f9b5 	bl	80049f4 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800268a:	213c      	movs	r1, #60	@ 0x3c
 800268c:	4804      	ldr	r0, [pc, #16]	@ (80026a0 <main+0x10c>)
 800268e:	f002 fb69 	bl	8004d64 <HAL_TIM_Encoder_Start>


  /* USER CODE END 2 */

  HAL_UART_Receive_IT(&hlpuart1, cmd_data, CMD_CODE_LENGTH + CMD_PAYLOAD_LENGTH);
 8002692:	2208      	movs	r2, #8
 8002694:	4914      	ldr	r1, [pc, #80]	@ (80026e8 <main+0x154>)
 8002696:	4815      	ldr	r0, [pc, #84]	@ (80026ec <main+0x158>)
 8002698:	f003 fe82 	bl	80063a0 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  driving_system.velo_ctrl_flag = 1;
    while (1)
 800269c:	bf00      	nop
 800269e:	e7fd      	b.n	800269c <main+0x108>
 80026a0:	20000284 	.word	0x20000284
 80026a4:	20000554 	.word	0x20000554
 80026a8:	200001ec 	.word	0x200001ec
 80026ac:	2000058c 	.word	0x2000058c
 80026b0:	00000000 	.word	0x00000000
 80026b4:	3e4ccccd 	.word	0x3e4ccccd
 80026b8:	3c23d70a 	.word	0x3c23d70a
 80026bc:	20000574 	.word	0x20000574
 80026c0:	2000031c 	.word	0x2000031c
 80026c4:	200005a8 	.word	0x200005a8
 80026c8:	2000055c 	.word	0x2000055c
 80026cc:	200005d8 	.word	0x200005d8
 80026d0:	200005bc 	.word	0x200005bc
 80026d4:	200005d0 	.word	0x200005d0
 80026d8:	200005e4 	.word	0x200005e4
 80026dc:	200005e8 	.word	0x200005e8
 80026e0:	200005e5 	.word	0x200005e5
 80026e4:	20000368 	.word	0x20000368
 80026e8:	200005dc 	.word	0x200005dc
 80026ec:	20000448 	.word	0x20000448

080026f0 <HAL_UART_RxCpltCallback>:
  }

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

	drv_system_if.exe_cmd(&driving_system, cmd_data);
 80026f8:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <HAL_UART_RxCpltCallback+0x24>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4906      	ldr	r1, [pc, #24]	@ (8002718 <HAL_UART_RxCpltCallback+0x28>)
 80026fe:	4807      	ldr	r0, [pc, #28]	@ (800271c <HAL_UART_RxCpltCallback+0x2c>)
 8002700:	4798      	blx	r3
	HAL_UART_Receive_IT(&hlpuart1, cmd_data, CMD_CODE_LENGTH + CMD_PAYLOAD_LENGTH);
 8002702:	2208      	movs	r2, #8
 8002704:	4904      	ldr	r1, [pc, #16]	@ (8002718 <HAL_UART_RxCpltCallback+0x28>)
 8002706:	4806      	ldr	r0, [pc, #24]	@ (8002720 <HAL_UART_RxCpltCallback+0x30>)
 8002708:	f003 fe4a 	bl	80063a0 <HAL_UART_Receive_IT>

}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	200005d0 	.word	0x200005d0
 8002718:	200005dc 	.word	0x200005dc
 800271c:	200005bc 	.word	0x200005bc
 8002720:	20000448 	.word	0x20000448

08002724 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002724:	b5b0      	push	{r4, r5, r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]

    if (htim->Instance == (TIM_TypeDef *)lb_motor.motor_updater_tim->Instance) {
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b0e      	ldr	r3, [pc, #56]	@ (800276c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d113      	bne.n	8002762 <HAL_TIM_PeriodElapsedCallback+0x3e>
//    	update_motor_position(lb_motor.motor_state, lb_motor.encoder_info);
//    	update_measured_velocity(&lb_motor);
//    	motor_state_set_velocity(&lb_motor_state, velo);
//    	L298N_set_pwm_count(lb_motor.L298N_driver, pwm_output);

    	driving_system_drive(&driving_system, velo);
 800273a:	4b0d      	ldr	r3, [pc, #52]	@ (8002770 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	ee07 3a90 	vmov	s15, r3
 8002742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002746:	eeb0 0a67 	vmov.f32	s0, s15
 800274a:	480a      	ldr	r0, [pc, #40]	@ (8002774 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800274c:	f7ff f91c 	bl	8001988 <driving_system_drive>
    	tick += 1;
 8002750:	4b09      	ldr	r3, [pc, #36]	@ (8002778 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002756:	1c54      	adds	r4, r2, #1
 8002758:	f143 0500 	adc.w	r5, r3, #0
 800275c:	4b06      	ldr	r3, [pc, #24]	@ (8002778 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800275e:	e9c3 4500 	strd	r4, r5, [r3]
    }



//  /* USER CODE END Callback 1 */
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bdb0      	pop	{r4, r5, r7, pc}
 800276a:	bf00      	nop
 800276c:	2000055c 	.word	0x2000055c
 8002770:	200005e5 	.word	0x200005e5
 8002774:	200005bc 	.word	0x200005bc
 8002778:	200005e8 	.word	0x200005e8

0800277c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002780:	b672      	cpsid	i
}
 8002782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002784:	bf00      	nop
 8002786:	e7fd      	b.n	8002784 <Error_Handler+0x8>

08002788 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278e:	4b0f      	ldr	r3, [pc, #60]	@ (80027cc <HAL_MspInit+0x44>)
 8002790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002792:	4a0e      	ldr	r2, [pc, #56]	@ (80027cc <HAL_MspInit+0x44>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6613      	str	r3, [r2, #96]	@ 0x60
 800279a:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <HAL_MspInit+0x44>)
 800279c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	607b      	str	r3, [r7, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027a6:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <HAL_MspInit+0x44>)
 80027a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027aa:	4a08      	ldr	r2, [pc, #32]	@ (80027cc <HAL_MspInit+0x44>)
 80027ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80027b2:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <HAL_MspInit+0x44>)
 80027b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80027be:	f000 ffb9 	bl	8003734 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000

080027d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b0a0      	sub	sp, #128	@ 0x80
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027e8:	f107 0318 	add.w	r3, r7, #24
 80027ec:	2254      	movs	r2, #84	@ 0x54
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f006 ffe0 	bl	80097b6 <memset>
  if(huart->Instance==LPUART1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a41      	ldr	r2, [pc, #260]	@ (8002900 <HAL_UART_MspInit+0x130>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d13f      	bne.n	8002880 <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002800:	2320      	movs	r3, #32
 8002802:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002804:	2300      	movs	r3, #0
 8002806:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002808:	f107 0318 	add.w	r3, r7, #24
 800280c:	4618      	mov	r0, r3
 800280e:	f001 fd01 	bl	8004214 <HAL_RCCEx_PeriphCLKConfig>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002818:	f7ff ffb0 	bl	800277c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800281c:	4b39      	ldr	r3, [pc, #228]	@ (8002904 <HAL_UART_MspInit+0x134>)
 800281e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002820:	4a38      	ldr	r2, [pc, #224]	@ (8002904 <HAL_UART_MspInit+0x134>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002828:	4b36      	ldr	r3, [pc, #216]	@ (8002904 <HAL_UART_MspInit+0x134>)
 800282a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002834:	4b33      	ldr	r3, [pc, #204]	@ (8002904 <HAL_UART_MspInit+0x134>)
 8002836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002838:	4a32      	ldr	r2, [pc, #200]	@ (8002904 <HAL_UART_MspInit+0x134>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002840:	4b30      	ldr	r3, [pc, #192]	@ (8002904 <HAL_UART_MspInit+0x134>)
 8002842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800284c:	230c      	movs	r3, #12
 800284e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	2300      	movs	r3, #0
 800285a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800285c:	230c      	movs	r3, #12
 800285e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002860:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002864:	4619      	mov	r1, r3
 8002866:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800286a:	f000 fd25 	bl	80032b8 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800286e:	2200      	movs	r2, #0
 8002870:	2100      	movs	r1, #0
 8002872:	205b      	movs	r0, #91	@ 0x5b
 8002874:	f000 fc38 	bl	80030e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002878:	205b      	movs	r0, #91	@ 0x5b
 800287a:	f000 fc4f 	bl	800311c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800287e:	e03a      	b.n	80028f6 <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a20      	ldr	r2, [pc, #128]	@ (8002908 <HAL_UART_MspInit+0x138>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d135      	bne.n	80028f6 <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800288a:	2301      	movs	r3, #1
 800288c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002892:	f107 0318 	add.w	r3, r7, #24
 8002896:	4618      	mov	r0, r3
 8002898:	f001 fcbc 	bl	8004214 <HAL_RCCEx_PeriphCLKConfig>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80028a2:	f7ff ff6b 	bl	800277c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80028a6:	4b17      	ldr	r3, [pc, #92]	@ (8002904 <HAL_UART_MspInit+0x134>)
 80028a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028aa:	4a16      	ldr	r2, [pc, #88]	@ (8002904 <HAL_UART_MspInit+0x134>)
 80028ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80028b2:	4b14      	ldr	r3, [pc, #80]	@ (8002904 <HAL_UART_MspInit+0x134>)
 80028b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028be:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <HAL_UART_MspInit+0x134>)
 80028c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c2:	4a10      	ldr	r2, [pc, #64]	@ (8002904 <HAL_UART_MspInit+0x134>)
 80028c4:	f043 0304 	orr.w	r3, r3, #4
 80028c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002904 <HAL_UART_MspInit+0x134>)
 80028cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80028d6:	2330      	movs	r3, #48	@ 0x30
 80028d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028da:	2302      	movs	r3, #2
 80028dc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e2:	2300      	movs	r3, #0
 80028e4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028e6:	2307      	movs	r3, #7
 80028e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ea:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80028ee:	4619      	mov	r1, r3
 80028f0:	4806      	ldr	r0, [pc, #24]	@ (800290c <HAL_UART_MspInit+0x13c>)
 80028f2:	f000 fce1 	bl	80032b8 <HAL_GPIO_Init>
}
 80028f6:	bf00      	nop
 80028f8:	3780      	adds	r7, #128	@ 0x80
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40008000 	.word	0x40008000
 8002904:	40021000 	.word	0x40021000
 8002908:	40013800 	.word	0x40013800
 800290c:	48000800 	.word	0x48000800

08002910 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a16      	ldr	r2, [pc, #88]	@ (8002978 <HAL_TIM_Base_MspInit+0x68>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10c      	bne.n	800293c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002922:	4b16      	ldr	r3, [pc, #88]	@ (800297c <HAL_TIM_Base_MspInit+0x6c>)
 8002924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002926:	4a15      	ldr	r2, [pc, #84]	@ (800297c <HAL_TIM_Base_MspInit+0x6c>)
 8002928:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800292c:	6613      	str	r3, [r2, #96]	@ 0x60
 800292e:	4b13      	ldr	r3, [pc, #76]	@ (800297c <HAL_TIM_Base_MspInit+0x6c>)
 8002930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002932:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800293a:	e018      	b.n	800296e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0f      	ldr	r2, [pc, #60]	@ (8002980 <HAL_TIM_Base_MspInit+0x70>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d113      	bne.n	800296e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002946:	4b0d      	ldr	r3, [pc, #52]	@ (800297c <HAL_TIM_Base_MspInit+0x6c>)
 8002948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294a:	4a0c      	ldr	r2, [pc, #48]	@ (800297c <HAL_TIM_Base_MspInit+0x6c>)
 800294c:	f043 0320 	orr.w	r3, r3, #32
 8002950:	6593      	str	r3, [r2, #88]	@ 0x58
 8002952:	4b0a      	ldr	r3, [pc, #40]	@ (800297c <HAL_TIM_Base_MspInit+0x6c>)
 8002954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 800295e:	2200      	movs	r2, #0
 8002960:	2100      	movs	r1, #0
 8002962:	2037      	movs	r0, #55	@ 0x37
 8002964:	f000 fbc0 	bl	80030e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8002968:	2037      	movs	r0, #55	@ 0x37
 800296a:	f000 fbd7 	bl	800311c <HAL_NVIC_EnableIRQ>
}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40012c00 	.word	0x40012c00
 800297c:	40021000 	.word	0x40021000
 8002980:	40001400 	.word	0x40001400

08002984 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b090      	sub	sp, #64	@ 0x40
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a6c      	ldr	r2, [pc, #432]	@ (8002b54 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d129      	bne.n	80029fa <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029a6:	4b6c      	ldr	r3, [pc, #432]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80029a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029aa:	4a6b      	ldr	r2, [pc, #428]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80029ac:	f043 0302 	orr.w	r3, r3, #2
 80029b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80029b2:	4b69      	ldr	r3, [pc, #420]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80029b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029be:	4b66      	ldr	r3, [pc, #408]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80029c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c2:	4a65      	ldr	r2, [pc, #404]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029ca:	4b63      	ldr	r3, [pc, #396]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80029cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80029d6:	2350      	movs	r3, #80	@ 0x50
 80029d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e2:	2300      	movs	r3, #0
 80029e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029e6:	2302      	movs	r3, #2
 80029e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029ee:	4619      	mov	r1, r3
 80029f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029f4:	f000 fc60 	bl	80032b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80029f8:	e0a7      	b.n	8002b4a <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM4)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a57      	ldr	r2, [pc, #348]	@ (8002b5c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d12a      	bne.n	8002a5a <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a04:	4b54      	ldr	r3, [pc, #336]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a08:	4a53      	ldr	r2, [pc, #332]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002a0a:	f043 0304 	orr.w	r3, r3, #4
 8002a0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a10:	4b51      	ldr	r3, [pc, #324]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	623b      	str	r3, [r7, #32]
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1c:	4b4e      	ldr	r3, [pc, #312]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a20:	4a4d      	ldr	r2, [pc, #308]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a28:	4b4b      	ldr	r3, [pc, #300]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a34:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a42:	2300      	movs	r3, #0
 8002a44:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002a46:	230a      	movs	r3, #10
 8002a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a54:	f000 fc30 	bl	80032b8 <HAL_GPIO_Init>
}
 8002a58:	e077      	b.n	8002b4a <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM5)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a40      	ldr	r2, [pc, #256]	@ (8002b60 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d145      	bne.n	8002af0 <HAL_TIM_Encoder_MspInit+0x16c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a64:	4b3c      	ldr	r3, [pc, #240]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a68:	4a3b      	ldr	r2, [pc, #236]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002a6a:	f043 0308 	orr.w	r3, r3, #8
 8002a6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a70:	4b39      	ldr	r3, [pc, #228]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7c:	4b36      	ldr	r3, [pc, #216]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a80:	4a35      	ldr	r2, [pc, #212]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002a82:	f043 0302 	orr.w	r3, r3, #2
 8002a86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a88:	4b33      	ldr	r3, [pc, #204]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a94:	4b30      	ldr	r3, [pc, #192]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a98:	4a2f      	ldr	r2, [pc, #188]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002a9a:	f043 0304 	orr.w	r3, r3, #4
 8002a9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002aa0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002aac:	2304      	movs	r3, #4
 8002aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002abc:	2302      	movs	r3, #2
 8002abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4827      	ldr	r0, [pc, #156]	@ (8002b64 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8002ac8:	f000 fbf6 	bl	80032b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	2300      	movs	r3, #0
 8002adc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ae2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	481f      	ldr	r0, [pc, #124]	@ (8002b68 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8002aea:	f000 fbe5 	bl	80032b8 <HAL_GPIO_Init>
}
 8002aee:	e02c      	b.n	8002b4a <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM8)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b6c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d127      	bne.n	8002b4a <HAL_TIM_Encoder_MspInit+0x1c6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002afa:	4b17      	ldr	r3, [pc, #92]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002afe:	4a16      	ldr	r2, [pc, #88]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002b00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b04:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b06:	4b14      	ldr	r3, [pc, #80]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b12:	4b11      	ldr	r3, [pc, #68]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b16:	4a10      	ldr	r2, [pc, #64]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002b18:	f043 0304 	orr.w	r3, r3, #4
 8002b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b2a:	23c0      	movs	r3, #192	@ 0xc0
 8002b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b36:	2300      	movs	r3, #0
 8002b38:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b42:	4619      	mov	r1, r3
 8002b44:	4808      	ldr	r0, [pc, #32]	@ (8002b68 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8002b46:	f000 fbb7 	bl	80032b8 <HAL_GPIO_Init>
}
 8002b4a:	bf00      	nop
 8002b4c:	3740      	adds	r7, #64	@ 0x40
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40000400 	.word	0x40000400
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40000800 	.word	0x40000800
 8002b60:	40000c00 	.word	0x40000c00
 8002b64:	48000400 	.word	0x48000400
 8002b68:	48000800 	.word	0x48000800
 8002b6c:	40013400 	.word	0x40013400

08002b70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	f107 030c 	add.w	r3, r7, #12
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a11      	ldr	r2, [pc, #68]	@ (8002bd4 <HAL_TIM_MspPostInit+0x64>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d11b      	bne.n	8002bca <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b92:	4b11      	ldr	r3, [pc, #68]	@ (8002bd8 <HAL_TIM_MspPostInit+0x68>)
 8002b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b96:	4a10      	ldr	r2, [pc, #64]	@ (8002bd8 <HAL_TIM_MspPostInit+0x68>)
 8002b98:	f043 0304 	orr.w	r3, r3, #4
 8002b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd8 <HAL_TIM_MspPostInit+0x68>)
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002baa:	230f      	movs	r3, #15
 8002bac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bbe:	f107 030c 	add.w	r3, r7, #12
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4805      	ldr	r0, [pc, #20]	@ (8002bdc <HAL_TIM_MspPostInit+0x6c>)
 8002bc6:	f000 fb77 	bl	80032b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002bca:	bf00      	nop
 8002bcc:	3720      	adds	r7, #32
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40012c00 	.word	0x40012c00
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	48000800 	.word	0x48000800

08002be0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08c      	sub	sp, #48	@ 0x30
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca4 <HAL_InitTick+0xc4>)
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8002ca4 <HAL_InitTick+0xc4>)
 8002bf6:	f043 0310 	orr.w	r3, r3, #16
 8002bfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bfc:	4b29      	ldr	r3, [pc, #164]	@ (8002ca4 <HAL_InitTick+0xc4>)
 8002bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c08:	f107 020c 	add.w	r2, r7, #12
 8002c0c:	f107 0310 	add.w	r3, r7, #16
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f001 fa86 	bl	8004124 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c18:	f001 fa58 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 8002c1c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c20:	4a21      	ldr	r2, [pc, #132]	@ (8002ca8 <HAL_InitTick+0xc8>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	0c9b      	lsrs	r3, r3, #18
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cac <HAL_InitTick+0xcc>)
 8002c2e:	4a20      	ldr	r2, [pc, #128]	@ (8002cb0 <HAL_InitTick+0xd0>)
 8002c30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c32:	4b1e      	ldr	r3, [pc, #120]	@ (8002cac <HAL_InitTick+0xcc>)
 8002c34:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c38:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8002cac <HAL_InitTick+0xcc>)
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c40:	4b1a      	ldr	r3, [pc, #104]	@ (8002cac <HAL_InitTick+0xcc>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c46:	4b19      	ldr	r3, [pc, #100]	@ (8002cac <HAL_InitTick+0xcc>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002c4c:	4817      	ldr	r0, [pc, #92]	@ (8002cac <HAL_InitTick+0xcc>)
 8002c4e:	f001 fd2f 	bl	80046b0 <HAL_TIM_Base_Init>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002c58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d11b      	bne.n	8002c98 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002c60:	4812      	ldr	r0, [pc, #72]	@ (8002cac <HAL_InitTick+0xcc>)
 8002c62:	f001 fded 	bl	8004840 <HAL_TIM_Base_Start_IT>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002c6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d111      	bne.n	8002c98 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c74:	2036      	movs	r0, #54	@ 0x36
 8002c76:	f000 fa51 	bl	800311c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b0f      	cmp	r3, #15
 8002c7e:	d808      	bhi.n	8002c92 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002c80:	2200      	movs	r2, #0
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	2036      	movs	r0, #54	@ 0x36
 8002c86:	f000 fa2f 	bl	80030e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb4 <HAL_InitTick+0xd4>)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	e002      	b.n	8002c98 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002c98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3730      	adds	r7, #48	@ 0x30
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	431bde83 	.word	0x431bde83
 8002cac:	200005f0 	.word	0x200005f0
 8002cb0:	40001000 	.word	0x40001000
 8002cb4:	20000004 	.word	0x20000004

08002cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cbc:	bf00      	nop
 8002cbe:	e7fd      	b.n	8002cbc <NMI_Handler+0x4>

08002cc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cc4:	bf00      	nop
 8002cc6:	e7fd      	b.n	8002cc4 <HardFault_Handler+0x4>

08002cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ccc:	bf00      	nop
 8002cce:	e7fd      	b.n	8002ccc <MemManage_Handler+0x4>

08002cd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cd4:	bf00      	nop
 8002cd6:	e7fd      	b.n	8002cd4 <BusFault_Handler+0x4>

08002cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cdc:	bf00      	nop
 8002cde:	e7fd      	b.n	8002cdc <UsageFault_Handler+0x4>

08002ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002cf4:	4802      	ldr	r0, [pc, #8]	@ (8002d00 <TIM6_DAC_IRQHandler+0x10>)
 8002cf6:	f002 f8c3 	bl	8004e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	200005f0 	.word	0x200005f0

08002d04 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002d08:	4802      	ldr	r0, [pc, #8]	@ (8002d14 <TIM7_DAC_IRQHandler+0x10>)
 8002d0a:	f002 f8b9 	bl	8004e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	2000031c 	.word	0x2000031c

08002d18 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002d1c:	4802      	ldr	r0, [pc, #8]	@ (8002d28 <LPUART1_IRQHandler+0x10>)
 8002d1e:	f003 fb8b 	bl	8006438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000448 	.word	0x20000448

08002d2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
	return 1;
 8002d30:	2301      	movs	r3, #1
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <_kill>:

int _kill(int pid, int sig)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d46:	f006 fd97 	bl	8009878 <__errno>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2216      	movs	r2, #22
 8002d4e:	601a      	str	r2, [r3, #0]
	return -1;
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <_exit>:

void _exit (int status)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d64:	f04f 31ff 	mov.w	r1, #4294967295
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ffe7 	bl	8002d3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d6e:	bf00      	nop
 8002d70:	e7fd      	b.n	8002d6e <_exit+0x12>

08002d72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b086      	sub	sp, #24
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	e00a      	b.n	8002d9a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d84:	f3af 8000 	nop.w
 8002d88:	4601      	mov	r1, r0
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	60ba      	str	r2, [r7, #8]
 8002d90:	b2ca      	uxtb	r2, r1
 8002d92:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	3301      	adds	r3, #1
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	dbf0      	blt.n	8002d84 <_read+0x12>
	}

return len;
 8002da2:	687b      	ldr	r3, [r7, #4]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	e009      	b.n	8002dd2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	60ba      	str	r2, [r7, #8]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	dbf1      	blt.n	8002dbe <_write+0x12>
	}
	return len;
 8002dda:	687b      	ldr	r3, [r7, #4]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <_close>:

int _close(int file)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	return -1;
 8002dec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e0c:	605a      	str	r2, [r3, #4]
	return 0;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <_isatty>:

int _isatty(int file)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
	return 1;
 8002e24:	2301      	movs	r3, #1
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b085      	sub	sp, #20
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
	return 0;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e54:	4a14      	ldr	r2, [pc, #80]	@ (8002ea8 <_sbrk+0x5c>)
 8002e56:	4b15      	ldr	r3, [pc, #84]	@ (8002eac <_sbrk+0x60>)
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e60:	4b13      	ldr	r3, [pc, #76]	@ (8002eb0 <_sbrk+0x64>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e68:	4b11      	ldr	r3, [pc, #68]	@ (8002eb0 <_sbrk+0x64>)
 8002e6a:	4a12      	ldr	r2, [pc, #72]	@ (8002eb4 <_sbrk+0x68>)
 8002e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e6e:	4b10      	ldr	r3, [pc, #64]	@ (8002eb0 <_sbrk+0x64>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d207      	bcs.n	8002e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e7c:	f006 fcfc 	bl	8009878 <__errno>
 8002e80:	4603      	mov	r3, r0
 8002e82:	220c      	movs	r2, #12
 8002e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e86:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8a:	e009      	b.n	8002ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e8c:	4b08      	ldr	r3, [pc, #32]	@ (8002eb0 <_sbrk+0x64>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e92:	4b07      	ldr	r3, [pc, #28]	@ (8002eb0 <_sbrk+0x64>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4413      	add	r3, r2
 8002e9a:	4a05      	ldr	r2, [pc, #20]	@ (8002eb0 <_sbrk+0x64>)
 8002e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20020000 	.word	0x20020000
 8002eac:	00000400 	.word	0x00000400
 8002eb0:	2000063c 	.word	0x2000063c
 8002eb4:	20000820 	.word	0x20000820

08002eb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ebc:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <SystemInit+0x20>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec2:	4a05      	ldr	r2, [pc, #20]	@ (8002ed8 <SystemInit+0x20>)
 8002ec4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ec8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002edc:	480d      	ldr	r0, [pc, #52]	@ (8002f14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ede:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ee0:	f7ff ffea 	bl	8002eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ee4:	480c      	ldr	r0, [pc, #48]	@ (8002f18 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ee6:	490d      	ldr	r1, [pc, #52]	@ (8002f1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f20 <LoopForever+0xe>)
  movs r3, #0
 8002eea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002eec:	e002      	b.n	8002ef4 <LoopCopyDataInit>

08002eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ef2:	3304      	adds	r3, #4

08002ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ef8:	d3f9      	bcc.n	8002eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002efa:	4a0a      	ldr	r2, [pc, #40]	@ (8002f24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002efc:	4c0a      	ldr	r4, [pc, #40]	@ (8002f28 <LoopForever+0x16>)
  movs r3, #0
 8002efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f00:	e001      	b.n	8002f06 <LoopFillZerobss>

08002f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f04:	3204      	adds	r2, #4

08002f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f08:	d3fb      	bcc.n	8002f02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f0a:	f006 fcbb 	bl	8009884 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f0e:	f7ff fb41 	bl	8002594 <main>

08002f12 <LoopForever>:

LoopForever:
    b LoopForever
 8002f12:	e7fe      	b.n	8002f12 <LoopForever>
  ldr   r0, =_estack
 8002f14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f1c:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8002f20:	0800dd2c 	.word	0x0800dd2c
  ldr r2, =_sbss
 8002f24:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8002f28:	2000081c 	.word	0x2000081c

08002f2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f2c:	e7fe      	b.n	8002f2c <ADC1_2_IRQHandler>

08002f2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f38:	2003      	movs	r0, #3
 8002f3a:	f000 f8ca 	bl	80030d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f3e:	200f      	movs	r0, #15
 8002f40:	f7ff fe4e 	bl	8002be0 <HAL_InitTick>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	71fb      	strb	r3, [r7, #7]
 8002f4e:	e001      	b.n	8002f54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f50:	f7ff fc1a 	bl	8002788 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f54:	79fb      	ldrb	r3, [r7, #7]

}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return uwTick;
 8002f64:	4b03      	ldr	r3, [pc, #12]	@ (8002f74 <HAL_GetTick+0x14>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 }
 8002f68:	4618      	mov	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	20000640 	.word	0x20000640

08002f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f88:	4b0c      	ldr	r3, [pc, #48]	@ (8002fbc <__NVIC_SetPriorityGrouping+0x44>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f94:	4013      	ands	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002faa:	4a04      	ldr	r2, [pc, #16]	@ (8002fbc <__NVIC_SetPriorityGrouping+0x44>)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	60d3      	str	r3, [r2, #12]
}
 8002fb0:	bf00      	nop
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	e000ed00 	.word	0xe000ed00

08002fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc4:	4b04      	ldr	r3, [pc, #16]	@ (8002fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	0a1b      	lsrs	r3, r3, #8
 8002fca:	f003 0307 	and.w	r3, r3, #7
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	db0b      	blt.n	8003006 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	f003 021f 	and.w	r2, r3, #31
 8002ff4:	4907      	ldr	r1, [pc, #28]	@ (8003014 <__NVIC_EnableIRQ+0x38>)
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8003002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	e000e100 	.word	0xe000e100

08003018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	6039      	str	r1, [r7, #0]
 8003022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003028:	2b00      	cmp	r3, #0
 800302a:	db0a      	blt.n	8003042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	b2da      	uxtb	r2, r3
 8003030:	490c      	ldr	r1, [pc, #48]	@ (8003064 <__NVIC_SetPriority+0x4c>)
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	0112      	lsls	r2, r2, #4
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	440b      	add	r3, r1
 800303c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003040:	e00a      	b.n	8003058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4908      	ldr	r1, [pc, #32]	@ (8003068 <__NVIC_SetPriority+0x50>)
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	3b04      	subs	r3, #4
 8003050:	0112      	lsls	r2, r2, #4
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	440b      	add	r3, r1
 8003056:	761a      	strb	r2, [r3, #24]
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000e100 	.word	0xe000e100
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800306c:	b480      	push	{r7}
 800306e:	b089      	sub	sp, #36	@ 0x24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f1c3 0307 	rsb	r3, r3, #7
 8003086:	2b04      	cmp	r3, #4
 8003088:	bf28      	it	cs
 800308a:	2304      	movcs	r3, #4
 800308c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3304      	adds	r3, #4
 8003092:	2b06      	cmp	r3, #6
 8003094:	d902      	bls.n	800309c <NVIC_EncodePriority+0x30>
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3b03      	subs	r3, #3
 800309a:	e000      	b.n	800309e <NVIC_EncodePriority+0x32>
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a0:	f04f 32ff 	mov.w	r2, #4294967295
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43da      	mvns	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	401a      	ands	r2, r3
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b4:	f04f 31ff 	mov.w	r1, #4294967295
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	fa01 f303 	lsl.w	r3, r1, r3
 80030be:	43d9      	mvns	r1, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c4:	4313      	orrs	r3, r2
         );
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3724      	adds	r7, #36	@ 0x24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff ff4c 	bl	8002f78 <__NVIC_SetPriorityGrouping>
}
 80030e0:	bf00      	nop
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030f6:	f7ff ff63 	bl	8002fc0 <__NVIC_GetPriorityGrouping>
 80030fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	6978      	ldr	r0, [r7, #20]
 8003102:	f7ff ffb3 	bl	800306c <NVIC_EncodePriority>
 8003106:	4602      	mov	r2, r0
 8003108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff ff82 	bl	8003018 <__NVIC_SetPriority>
}
 8003114:	bf00      	nop
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff ff56 	bl	8002fdc <__NVIC_EnableIRQ>
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d005      	beq.n	800315c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2204      	movs	r2, #4
 8003154:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	73fb      	strb	r3, [r7, #15]
 800315a:	e037      	b.n	80031cc <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 020e 	bic.w	r2, r2, #14
 800316a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003176:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800317a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0201 	bic.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003190:	f003 021f 	and.w	r2, r3, #31
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003198:	2101      	movs	r1, #1
 800319a:	fa01 f202 	lsl.w	r2, r1, r2
 800319e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031a8:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00c      	beq.n	80031cc <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031c0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80031ca:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d00d      	beq.n	800321e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2204      	movs	r2, #4
 8003206:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
 800321c:	e047      	b.n	80032ae <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 020e 	bic.w	r2, r2, #14
 800322c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0201 	bic.w	r2, r2, #1
 800323c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003248:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800324c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003252:	f003 021f 	and.w	r2, r3, #31
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	2101      	movs	r1, #1
 800325c:	fa01 f202 	lsl.w	r2, r1, r2
 8003260:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800326a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00c      	beq.n	800328e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003282:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800328c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	4798      	blx	r3
    }
  }
  return status;
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032c6:	e15a      	b.n	800357e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	2101      	movs	r1, #1
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	fa01 f303 	lsl.w	r3, r1, r3
 80032d4:	4013      	ands	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 814c 	beq.w	8003578 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d005      	beq.n	80032f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d130      	bne.n	800335a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	2203      	movs	r2, #3
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4013      	ands	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800332e:	2201      	movs	r2, #1
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43db      	mvns	r3, r3
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4013      	ands	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	091b      	lsrs	r3, r3, #4
 8003344:	f003 0201 	and.w	r2, r3, #1
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	2b03      	cmp	r3, #3
 8003364:	d017      	beq.n	8003396 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	2203      	movs	r2, #3
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4013      	ands	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d123      	bne.n	80033ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	08da      	lsrs	r2, r3, #3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3208      	adds	r2, #8
 80033aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	220f      	movs	r2, #15
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4013      	ands	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	08da      	lsrs	r2, r3, #3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3208      	adds	r2, #8
 80033e4:	6939      	ldr	r1, [r7, #16]
 80033e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	2203      	movs	r2, #3
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4013      	ands	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f003 0203 	and.w	r2, r3, #3
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80a6 	beq.w	8003578 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342c:	4b5b      	ldr	r3, [pc, #364]	@ (800359c <HAL_GPIO_Init+0x2e4>)
 800342e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003430:	4a5a      	ldr	r2, [pc, #360]	@ (800359c <HAL_GPIO_Init+0x2e4>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	6613      	str	r3, [r2, #96]	@ 0x60
 8003438:	4b58      	ldr	r3, [pc, #352]	@ (800359c <HAL_GPIO_Init+0x2e4>)
 800343a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003444:	4a56      	ldr	r2, [pc, #344]	@ (80035a0 <HAL_GPIO_Init+0x2e8>)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	089b      	lsrs	r3, r3, #2
 800344a:	3302      	adds	r3, #2
 800344c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003450:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	220f      	movs	r2, #15
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4013      	ands	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800346e:	d01f      	beq.n	80034b0 <HAL_GPIO_Init+0x1f8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a4c      	ldr	r2, [pc, #304]	@ (80035a4 <HAL_GPIO_Init+0x2ec>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d019      	beq.n	80034ac <HAL_GPIO_Init+0x1f4>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a4b      	ldr	r2, [pc, #300]	@ (80035a8 <HAL_GPIO_Init+0x2f0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d013      	beq.n	80034a8 <HAL_GPIO_Init+0x1f0>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a4a      	ldr	r2, [pc, #296]	@ (80035ac <HAL_GPIO_Init+0x2f4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00d      	beq.n	80034a4 <HAL_GPIO_Init+0x1ec>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a49      	ldr	r2, [pc, #292]	@ (80035b0 <HAL_GPIO_Init+0x2f8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d007      	beq.n	80034a0 <HAL_GPIO_Init+0x1e8>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a48      	ldr	r2, [pc, #288]	@ (80035b4 <HAL_GPIO_Init+0x2fc>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d101      	bne.n	800349c <HAL_GPIO_Init+0x1e4>
 8003498:	2305      	movs	r3, #5
 800349a:	e00a      	b.n	80034b2 <HAL_GPIO_Init+0x1fa>
 800349c:	2306      	movs	r3, #6
 800349e:	e008      	b.n	80034b2 <HAL_GPIO_Init+0x1fa>
 80034a0:	2304      	movs	r3, #4
 80034a2:	e006      	b.n	80034b2 <HAL_GPIO_Init+0x1fa>
 80034a4:	2303      	movs	r3, #3
 80034a6:	e004      	b.n	80034b2 <HAL_GPIO_Init+0x1fa>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e002      	b.n	80034b2 <HAL_GPIO_Init+0x1fa>
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <HAL_GPIO_Init+0x1fa>
 80034b0:	2300      	movs	r3, #0
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	f002 0203 	and.w	r2, r2, #3
 80034b8:	0092      	lsls	r2, r2, #2
 80034ba:	4093      	lsls	r3, r2
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034c2:	4937      	ldr	r1, [pc, #220]	@ (80035a0 <HAL_GPIO_Init+0x2e8>)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	089b      	lsrs	r3, r3, #2
 80034c8:	3302      	adds	r3, #2
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034d0:	4b39      	ldr	r3, [pc, #228]	@ (80035b8 <HAL_GPIO_Init+0x300>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	43db      	mvns	r3, r3
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4013      	ands	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034f4:	4a30      	ldr	r2, [pc, #192]	@ (80035b8 <HAL_GPIO_Init+0x300>)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034fa:	4b2f      	ldr	r3, [pc, #188]	@ (80035b8 <HAL_GPIO_Init+0x300>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	43db      	mvns	r3, r3
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4013      	ands	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800351e:	4a26      	ldr	r2, [pc, #152]	@ (80035b8 <HAL_GPIO_Init+0x300>)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003524:	4b24      	ldr	r3, [pc, #144]	@ (80035b8 <HAL_GPIO_Init+0x300>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	43db      	mvns	r3, r3
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003548:	4a1b      	ldr	r2, [pc, #108]	@ (80035b8 <HAL_GPIO_Init+0x300>)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800354e:	4b1a      	ldr	r3, [pc, #104]	@ (80035b8 <HAL_GPIO_Init+0x300>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	43db      	mvns	r3, r3
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4013      	ands	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003572:	4a11      	ldr	r2, [pc, #68]	@ (80035b8 <HAL_GPIO_Init+0x300>)
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3301      	adds	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	f47f ae9d 	bne.w	80032c8 <HAL_GPIO_Init+0x10>
  }
}
 800358e:	bf00      	nop
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	40021000 	.word	0x40021000
 80035a0:	40010000 	.word	0x40010000
 80035a4:	48000400 	.word	0x48000400
 80035a8:	48000800 	.word	0x48000800
 80035ac:	48000c00 	.word	0x48000c00
 80035b0:	48001000 	.word	0x48001000
 80035b4:	48001400 	.word	0x48001400
 80035b8:	40010400 	.word	0x40010400

080035bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	807b      	strh	r3, [r7, #2]
 80035c8:	4613      	mov	r3, r2
 80035ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035cc:	787b      	ldrb	r3, [r7, #1]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035d2:	887a      	ldrh	r2, [r7, #2]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035d8:	e002      	b.n	80035e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035da:	887a      	ldrh	r2, [r7, #2]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d141      	bne.n	800367e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035fa:	4b4b      	ldr	r3, [pc, #300]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003606:	d131      	bne.n	800366c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003608:	4b47      	ldr	r3, [pc, #284]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800360a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800360e:	4a46      	ldr	r2, [pc, #280]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003614:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003618:	4b43      	ldr	r3, [pc, #268]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003620:	4a41      	ldr	r2, [pc, #260]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003622:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003626:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003628:	4b40      	ldr	r3, [pc, #256]	@ (800372c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2232      	movs	r2, #50	@ 0x32
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	4a3f      	ldr	r2, [pc, #252]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	0c9b      	lsrs	r3, r3, #18
 800363a:	3301      	adds	r3, #1
 800363c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800363e:	e002      	b.n	8003646 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3b01      	subs	r3, #1
 8003644:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003646:	4b38      	ldr	r3, [pc, #224]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800364e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003652:	d102      	bne.n	800365a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f2      	bne.n	8003640 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800365a:	4b33      	ldr	r3, [pc, #204]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003666:	d158      	bne.n	800371a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e057      	b.n	800371c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800366c:	4b2e      	ldr	r3, [pc, #184]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003672:	4a2d      	ldr	r2, [pc, #180]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003678:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800367c:	e04d      	b.n	800371a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003684:	d141      	bne.n	800370a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003686:	4b28      	ldr	r3, [pc, #160]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800368e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003692:	d131      	bne.n	80036f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003694:	4b24      	ldr	r3, [pc, #144]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800369a:	4a23      	ldr	r2, [pc, #140]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800369c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036a4:	4b20      	ldr	r3, [pc, #128]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036ac:	4a1e      	ldr	r2, [pc, #120]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036b4:	4b1d      	ldr	r3, [pc, #116]	@ (800372c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2232      	movs	r2, #50	@ 0x32
 80036ba:	fb02 f303 	mul.w	r3, r2, r3
 80036be:	4a1c      	ldr	r2, [pc, #112]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036c0:	fba2 2303 	umull	r2, r3, r2, r3
 80036c4:	0c9b      	lsrs	r3, r3, #18
 80036c6:	3301      	adds	r3, #1
 80036c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ca:	e002      	b.n	80036d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036d2:	4b15      	ldr	r3, [pc, #84]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036de:	d102      	bne.n	80036e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f2      	bne.n	80036cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036e6:	4b10      	ldr	r3, [pc, #64]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036f2:	d112      	bne.n	800371a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e011      	b.n	800371c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003704:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003708:	e007      	b.n	800371a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800370a:	4b07      	ldr	r3, [pc, #28]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003712:	4a05      	ldr	r2, [pc, #20]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003714:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003718:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	40007000 	.word	0x40007000
 800372c:	20000000 	.word	0x20000000
 8003730:	431bde83 	.word	0x431bde83

08003734 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003738:	4b05      	ldr	r3, [pc, #20]	@ (8003750 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	4a04      	ldr	r2, [pc, #16]	@ (8003750 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800373e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003742:	6093      	str	r3, [r2, #8]
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40007000 	.word	0x40007000

08003754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e2fe      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d075      	beq.n	800385e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003772:	4b97      	ldr	r3, [pc, #604]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800377c:	4b94      	ldr	r3, [pc, #592]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	2b0c      	cmp	r3, #12
 800378a:	d102      	bne.n	8003792 <HAL_RCC_OscConfig+0x3e>
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2b03      	cmp	r3, #3
 8003790:	d002      	beq.n	8003798 <HAL_RCC_OscConfig+0x44>
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	2b08      	cmp	r3, #8
 8003796:	d10b      	bne.n	80037b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003798:	4b8d      	ldr	r3, [pc, #564]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d05b      	beq.n	800385c <HAL_RCC_OscConfig+0x108>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d157      	bne.n	800385c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e2d9      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b8:	d106      	bne.n	80037c8 <HAL_RCC_OscConfig+0x74>
 80037ba:	4b85      	ldr	r3, [pc, #532]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a84      	ldr	r2, [pc, #528]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80037c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	e01d      	b.n	8003804 <HAL_RCC_OscConfig+0xb0>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037d0:	d10c      	bne.n	80037ec <HAL_RCC_OscConfig+0x98>
 80037d2:	4b7f      	ldr	r3, [pc, #508]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a7e      	ldr	r2, [pc, #504]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80037d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	4b7c      	ldr	r3, [pc, #496]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a7b      	ldr	r2, [pc, #492]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80037e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	e00b      	b.n	8003804 <HAL_RCC_OscConfig+0xb0>
 80037ec:	4b78      	ldr	r3, [pc, #480]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a77      	ldr	r2, [pc, #476]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80037f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	4b75      	ldr	r3, [pc, #468]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a74      	ldr	r2, [pc, #464]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80037fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d013      	beq.n	8003834 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7ff fba8 	bl	8002f60 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003814:	f7ff fba4 	bl	8002f60 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	@ 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e29e      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003826:	4b6a      	ldr	r3, [pc, #424]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCC_OscConfig+0xc0>
 8003832:	e014      	b.n	800385e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7ff fb94 	bl	8002f60 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800383c:	f7ff fb90 	bl	8002f60 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	@ 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e28a      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800384e:	4b60      	ldr	r3, [pc, #384]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0xe8>
 800385a:	e000      	b.n	800385e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800385c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d075      	beq.n	8003956 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800386a:	4b59      	ldr	r3, [pc, #356]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
 8003872:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003874:	4b56      	ldr	r3, [pc, #344]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2b0c      	cmp	r3, #12
 8003882:	d102      	bne.n	800388a <HAL_RCC_OscConfig+0x136>
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d002      	beq.n	8003890 <HAL_RCC_OscConfig+0x13c>
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	2b04      	cmp	r3, #4
 800388e:	d11f      	bne.n	80038d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003890:	4b4f      	ldr	r3, [pc, #316]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_RCC_OscConfig+0x154>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e25d      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a8:	4b49      	ldr	r3, [pc, #292]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	061b      	lsls	r3, r3, #24
 80038b6:	4946      	ldr	r1, [pc, #280]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038bc:	4b45      	ldr	r3, [pc, #276]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff f98d 	bl	8002be0 <HAL_InitTick>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d043      	beq.n	8003954 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e249      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d023      	beq.n	8003920 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d8:	4b3d      	ldr	r3, [pc, #244]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a3c      	ldr	r2, [pc, #240]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80038de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7ff fb3c 	bl	8002f60 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ec:	f7ff fb38 	bl	8002f60 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e232      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038fe:	4b34      	ldr	r3, [pc, #208]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390a:	4b31      	ldr	r3, [pc, #196]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	061b      	lsls	r3, r3, #24
 8003918:	492d      	ldr	r1, [pc, #180]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]
 800391e:	e01a      	b.n	8003956 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003920:	4b2b      	ldr	r3, [pc, #172]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a2a      	ldr	r2, [pc, #168]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003926:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800392a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7ff fb18 	bl	8002f60 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003934:	f7ff fb14 	bl	8002f60 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e20e      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003946:	4b22      	ldr	r3, [pc, #136]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x1e0>
 8003952:	e000      	b.n	8003956 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003954:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d041      	beq.n	80039e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d01c      	beq.n	80039a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800396a:	4b19      	ldr	r3, [pc, #100]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 800396c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003970:	4a17      	ldr	r2, [pc, #92]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397a:	f7ff faf1 	bl	8002f60 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003982:	f7ff faed 	bl	8002f60 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e1e7      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003994:	4b0e      	ldr	r3, [pc, #56]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0ef      	beq.n	8003982 <HAL_RCC_OscConfig+0x22e>
 80039a2:	e020      	b.n	80039e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a4:	4b0a      	ldr	r3, [pc, #40]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80039a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039aa:	4a09      	ldr	r2, [pc, #36]	@ (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80039ac:	f023 0301 	bic.w	r3, r3, #1
 80039b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b4:	f7ff fad4 	bl	8002f60 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039ba:	e00d      	b.n	80039d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039bc:	f7ff fad0 	bl	8002f60 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d906      	bls.n	80039d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e1ca      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
 80039ce:	bf00      	nop
 80039d0:	40021000 	.word	0x40021000
 80039d4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039d8:	4b8c      	ldr	r3, [pc, #560]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 80039da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1ea      	bne.n	80039bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80a6 	beq.w	8003b40 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f4:	2300      	movs	r3, #0
 80039f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039f8:	4b84      	ldr	r3, [pc, #528]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 80039fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_RCC_OscConfig+0x2b4>
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <HAL_RCC_OscConfig+0x2b6>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00d      	beq.n	8003a2a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a12:	4a7e      	ldr	r2, [pc, #504]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a18:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a1a:	4b7c      	ldr	r3, [pc, #496]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a26:	2301      	movs	r3, #1
 8003a28:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a2a:	4b79      	ldr	r3, [pc, #484]	@ (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d118      	bne.n	8003a68 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a36:	4b76      	ldr	r3, [pc, #472]	@ (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a75      	ldr	r2, [pc, #468]	@ (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a42:	f7ff fa8d 	bl	8002f60 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4a:	f7ff fa89 	bl	8002f60 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e183      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a5c:	4b6c      	ldr	r3, [pc, #432]	@ (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d108      	bne.n	8003a82 <HAL_RCC_OscConfig+0x32e>
 8003a70:	4b66      	ldr	r3, [pc, #408]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a76:	4a65      	ldr	r2, [pc, #404]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a80:	e024      	b.n	8003acc <HAL_RCC_OscConfig+0x378>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b05      	cmp	r3, #5
 8003a88:	d110      	bne.n	8003aac <HAL_RCC_OscConfig+0x358>
 8003a8a:	4b60      	ldr	r3, [pc, #384]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a90:	4a5e      	ldr	r2, [pc, #376]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003a92:	f043 0304 	orr.w	r3, r3, #4
 8003a96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a9a:	4b5c      	ldr	r3, [pc, #368]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa0:	4a5a      	ldr	r2, [pc, #360]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003aa2:	f043 0301 	orr.w	r3, r3, #1
 8003aa6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003aaa:	e00f      	b.n	8003acc <HAL_RCC_OscConfig+0x378>
 8003aac:	4b57      	ldr	r3, [pc, #348]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab2:	4a56      	ldr	r2, [pc, #344]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003abc:	4b53      	ldr	r3, [pc, #332]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac2:	4a52      	ldr	r2, [pc, #328]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003ac4:	f023 0304 	bic.w	r3, r3, #4
 8003ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d016      	beq.n	8003b02 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad4:	f7ff fa44 	bl	8002f60 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ada:	e00a      	b.n	8003af2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003adc:	f7ff fa40 	bl	8002f60 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e138      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af2:	4b46      	ldr	r3, [pc, #280]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0ed      	beq.n	8003adc <HAL_RCC_OscConfig+0x388>
 8003b00:	e015      	b.n	8003b2e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b02:	f7ff fa2d 	bl	8002f60 <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b08:	e00a      	b.n	8003b20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0a:	f7ff fa29 	bl	8002f60 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e121      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b20:	4b3a      	ldr	r3, [pc, #232]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1ed      	bne.n	8003b0a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b2e:	7ffb      	ldrb	r3, [r7, #31]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d105      	bne.n	8003b40 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b34:	4b35      	ldr	r3, [pc, #212]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b38:	4a34      	ldr	r2, [pc, #208]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003b3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b3e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d03c      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d01c      	beq.n	8003b8e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b54:	4b2d      	ldr	r3, [pc, #180]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b64:	f7ff f9fc 	bl	8002f60 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b6c:	f7ff f9f8 	bl	8002f60 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e0f2      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b7e:	4b23      	ldr	r3, [pc, #140]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003b80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0ef      	beq.n	8003b6c <HAL_RCC_OscConfig+0x418>
 8003b8c:	e01b      	b.n	8003bc6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003b90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b94:	4a1d      	ldr	r2, [pc, #116]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003b96:	f023 0301 	bic.w	r3, r3, #1
 8003b9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9e:	f7ff f9df 	bl	8002f60 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ba6:	f7ff f9db 	bl	8002f60 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e0d5      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bb8:	4b14      	ldr	r3, [pc, #80]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1ef      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 80c9 	beq.w	8003d62 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 030c 	and.w	r3, r3, #12
 8003bd8:	2b0c      	cmp	r3, #12
 8003bda:	f000 8083 	beq.w	8003ce4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d15e      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be6:	4b09      	ldr	r3, [pc, #36]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a08      	ldr	r2, [pc, #32]	@ (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003bec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf2:	f7ff f9b5 	bl	8002f60 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf8:	e00c      	b.n	8003c14 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfa:	f7ff f9b1 	bl	8002f60 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d905      	bls.n	8003c14 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e0ab      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c14:	4b55      	ldr	r3, [pc, #340]	@ (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1ec      	bne.n	8003bfa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c20:	4b52      	ldr	r3, [pc, #328]	@ (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	4b52      	ldr	r3, [pc, #328]	@ (8003d70 <HAL_RCC_OscConfig+0x61c>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6a11      	ldr	r1, [r2, #32]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c30:	3a01      	subs	r2, #1
 8003c32:	0112      	lsls	r2, r2, #4
 8003c34:	4311      	orrs	r1, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003c3a:	0212      	lsls	r2, r2, #8
 8003c3c:	4311      	orrs	r1, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c42:	0852      	lsrs	r2, r2, #1
 8003c44:	3a01      	subs	r2, #1
 8003c46:	0552      	lsls	r2, r2, #21
 8003c48:	4311      	orrs	r1, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c4e:	0852      	lsrs	r2, r2, #1
 8003c50:	3a01      	subs	r2, #1
 8003c52:	0652      	lsls	r2, r2, #25
 8003c54:	4311      	orrs	r1, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c5a:	06d2      	lsls	r2, r2, #27
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	4943      	ldr	r1, [pc, #268]	@ (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c64:	4b41      	ldr	r3, [pc, #260]	@ (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a40      	ldr	r2, [pc, #256]	@ (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003c6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c6e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c70:	4b3e      	ldr	r3, [pc, #248]	@ (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4a3d      	ldr	r2, [pc, #244]	@ (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7ff f970 	bl	8002f60 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c84:	f7ff f96c 	bl	8002f60 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e066      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c96:	4b35      	ldr	r3, [pc, #212]	@ (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0x530>
 8003ca2:	e05e      	b.n	8003d62 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca4:	4b31      	ldr	r3, [pc, #196]	@ (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a30      	ldr	r2, [pc, #192]	@ (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003caa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7ff f956 	bl	8002f60 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb8:	f7ff f952 	bl	8002f60 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e04c      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cca:	4b28      	ldr	r3, [pc, #160]	@ (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003cd6:	4b25      	ldr	r3, [pc, #148]	@ (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	4924      	ldr	r1, [pc, #144]	@ (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003cdc:	4b25      	ldr	r3, [pc, #148]	@ (8003d74 <HAL_RCC_OscConfig+0x620>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	60cb      	str	r3, [r1, #12]
 8003ce2:	e03e      	b.n	8003d62 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e039      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f003 0203 	and.w	r2, r3, #3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d12c      	bne.n	8003d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d123      	bne.n	8003d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d20:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d11b      	bne.n	8003d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d30:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d113      	bne.n	8003d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d40:	085b      	lsrs	r3, r3, #1
 8003d42:	3b01      	subs	r3, #1
 8003d44:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d109      	bne.n	8003d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d54:	085b      	lsrs	r3, r3, #1
 8003d56:	3b01      	subs	r3, #1
 8003d58:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d001      	beq.n	8003d62 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3720      	adds	r7, #32
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	019f800c 	.word	0x019f800c
 8003d74:	feeefffc 	.word	0xfeeefffc

08003d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e11e      	b.n	8003fce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d90:	4b91      	ldr	r3, [pc, #580]	@ (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 030f 	and.w	r3, r3, #15
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d910      	bls.n	8003dc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9e:	4b8e      	ldr	r3, [pc, #568]	@ (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 020f 	bic.w	r2, r3, #15
 8003da6:	498c      	ldr	r1, [pc, #560]	@ (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dae:	4b8a      	ldr	r3, [pc, #552]	@ (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e106      	b.n	8003fce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d073      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d129      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd4:	4b81      	ldr	r3, [pc, #516]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0f4      	b.n	8003fce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003de4:	f000 f9d0 	bl	8004188 <RCC_GetSysClockFreqFromPLLSource>
 8003de8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	4a7c      	ldr	r2, [pc, #496]	@ (8003fe0 <HAL_RCC_ClockConfig+0x268>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d93f      	bls.n	8003e72 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003df2:	4b7a      	ldr	r3, [pc, #488]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d033      	beq.n	8003e72 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d12f      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e12:	4b72      	ldr	r3, [pc, #456]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e1a:	4a70      	ldr	r2, [pc, #448]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e22:	2380      	movs	r3, #128	@ 0x80
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	e024      	b.n	8003e72 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d107      	bne.n	8003e40 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e30:	4b6a      	ldr	r3, [pc, #424]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d109      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0c6      	b.n	8003fce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e40:	4b66      	ldr	r3, [pc, #408]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e0be      	b.n	8003fce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e50:	f000 f8ce 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4a61      	ldr	r2, [pc, #388]	@ (8003fe0 <HAL_RCC_ClockConfig+0x268>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d909      	bls.n	8003e72 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e5e:	4b5f      	ldr	r3, [pc, #380]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e66:	4a5d      	ldr	r2, [pc, #372]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e6c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e6e:	2380      	movs	r3, #128	@ 0x80
 8003e70:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e72:	4b5a      	ldr	r3, [pc, #360]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f023 0203 	bic.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	4957      	ldr	r1, [pc, #348]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e84:	f7ff f86c 	bl	8002f60 <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e8c:	f7ff f868 	bl	8002f60 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e095      	b.n	8003fce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	4b4e      	ldr	r3, [pc, #312]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 020c 	and.w	r2, r3, #12
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d1eb      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d023      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ecc:	4b43      	ldr	r3, [pc, #268]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	4a42      	ldr	r2, [pc, #264]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003ed2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ed6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d007      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ee4:	4b3d      	ldr	r3, [pc, #244]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003eec:	4a3b      	ldr	r2, [pc, #236]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003eee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ef2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef4:	4b39      	ldr	r3, [pc, #228]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4936      	ldr	r1, [pc, #216]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2b80      	cmp	r3, #128	@ 0x80
 8003f0c:	d105      	bne.n	8003f1a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f0e:	4b33      	ldr	r3, [pc, #204]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	4a32      	ldr	r2, [pc, #200]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003f14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f18:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d21d      	bcs.n	8003f64 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f28:	4b2b      	ldr	r3, [pc, #172]	@ (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f023 020f 	bic.w	r2, r3, #15
 8003f30:	4929      	ldr	r1, [pc, #164]	@ (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f38:	f7ff f812 	bl	8002f60 <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f40:	f7ff f80e 	bl	8002f60 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e03b      	b.n	8003fce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f56:	4b20      	ldr	r3, [pc, #128]	@ (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d1ed      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f70:	4b1a      	ldr	r3, [pc, #104]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4917      	ldr	r1, [pc, #92]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f8e:	4b13      	ldr	r3, [pc, #76]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	490f      	ldr	r1, [pc, #60]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fa2:	f000 f825 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	490c      	ldr	r1, [pc, #48]	@ (8003fe4 <HAL_RCC_ClockConfig+0x26c>)
 8003fb4:	5ccb      	ldrb	r3, [r1, r3]
 8003fb6:	f003 031f 	and.w	r3, r3, #31
 8003fba:	fa22 f303 	lsr.w	r3, r2, r3
 8003fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe8 <HAL_RCC_ClockConfig+0x270>)
 8003fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003fec <HAL_RCC_ClockConfig+0x274>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fe fe0a 	bl	8002be0 <HAL_InitTick>
 8003fcc:	4603      	mov	r3, r0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40022000 	.word	0x40022000
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	04c4b400 	.word	0x04c4b400
 8003fe4:	0800d894 	.word	0x0800d894
 8003fe8:	20000000 	.word	0x20000000
 8003fec:	20000004 	.word	0x20000004

08003ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003ff6:	4b2c      	ldr	r3, [pc, #176]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d102      	bne.n	8004008 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004002:	4b2a      	ldr	r3, [pc, #168]	@ (80040ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	e047      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004008:	4b27      	ldr	r3, [pc, #156]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b08      	cmp	r3, #8
 8004012:	d102      	bne.n	800401a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004014:	4b26      	ldr	r3, [pc, #152]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	e03e      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800401a:	4b23      	ldr	r3, [pc, #140]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	2b0c      	cmp	r3, #12
 8004024:	d136      	bne.n	8004094 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004026:	4b20      	ldr	r3, [pc, #128]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004030:	4b1d      	ldr	r3, [pc, #116]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	3301      	adds	r3, #1
 800403c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b03      	cmp	r3, #3
 8004042:	d10c      	bne.n	800405e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004044:	4a1a      	ldr	r2, [pc, #104]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	4a16      	ldr	r2, [pc, #88]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800404e:	68d2      	ldr	r2, [r2, #12]
 8004050:	0a12      	lsrs	r2, r2, #8
 8004052:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004056:	fb02 f303 	mul.w	r3, r2, r3
 800405a:	617b      	str	r3, [r7, #20]
      break;
 800405c:	e00c      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800405e:	4a13      	ldr	r2, [pc, #76]	@ (80040ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	fbb2 f3f3 	udiv	r3, r2, r3
 8004066:	4a10      	ldr	r2, [pc, #64]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004068:	68d2      	ldr	r2, [r2, #12]
 800406a:	0a12      	lsrs	r2, r2, #8
 800406c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004070:	fb02 f303 	mul.w	r3, r2, r3
 8004074:	617b      	str	r3, [r7, #20]
      break;
 8004076:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004078:	4b0b      	ldr	r3, [pc, #44]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	0e5b      	lsrs	r3, r3, #25
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	3301      	adds	r3, #1
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	e001      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004098:	693b      	ldr	r3, [r7, #16]
}
 800409a:	4618      	mov	r0, r3
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000
 80040ac:	00f42400 	.word	0x00f42400
 80040b0:	016e3600 	.word	0x016e3600

080040b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040b8:	4b03      	ldr	r3, [pc, #12]	@ (80040c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80040ba:	681b      	ldr	r3, [r3, #0]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	20000000 	.word	0x20000000

080040cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040d0:	f7ff fff0 	bl	80040b4 <HAL_RCC_GetHCLKFreq>
 80040d4:	4602      	mov	r2, r0
 80040d6:	4b06      	ldr	r3, [pc, #24]	@ (80040f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	0a1b      	lsrs	r3, r3, #8
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	4904      	ldr	r1, [pc, #16]	@ (80040f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040e2:	5ccb      	ldrb	r3, [r1, r3]
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40021000 	.word	0x40021000
 80040f4:	0800d8a4 	.word	0x0800d8a4

080040f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040fc:	f7ff ffda 	bl	80040b4 <HAL_RCC_GetHCLKFreq>
 8004100:	4602      	mov	r2, r0
 8004102:	4b06      	ldr	r3, [pc, #24]	@ (800411c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	0adb      	lsrs	r3, r3, #11
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	4904      	ldr	r1, [pc, #16]	@ (8004120 <HAL_RCC_GetPCLK2Freq+0x28>)
 800410e:	5ccb      	ldrb	r3, [r1, r3]
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004118:	4618      	mov	r0, r3
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40021000 	.word	0x40021000
 8004120:	0800d8a4 	.word	0x0800d8a4

08004124 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	220f      	movs	r2, #15
 8004132:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004134:	4b12      	ldr	r3, [pc, #72]	@ (8004180 <HAL_RCC_GetClockConfig+0x5c>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 0203 	and.w	r2, r3, #3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004140:	4b0f      	ldr	r3, [pc, #60]	@ (8004180 <HAL_RCC_GetClockConfig+0x5c>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800414c:	4b0c      	ldr	r3, [pc, #48]	@ (8004180 <HAL_RCC_GetClockConfig+0x5c>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004158:	4b09      	ldr	r3, [pc, #36]	@ (8004180 <HAL_RCC_GetClockConfig+0x5c>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	08db      	lsrs	r3, r3, #3
 800415e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004166:	4b07      	ldr	r3, [pc, #28]	@ (8004184 <HAL_RCC_GetClockConfig+0x60>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 020f 	and.w	r2, r3, #15
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	601a      	str	r2, [r3, #0]
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40021000 	.word	0x40021000
 8004184:	40022000 	.word	0x40022000

08004188 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800418e:	4b1e      	ldr	r3, [pc, #120]	@ (8004208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004198:	4b1b      	ldr	r3, [pc, #108]	@ (8004208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	091b      	lsrs	r3, r3, #4
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	3301      	adds	r3, #1
 80041a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d10c      	bne.n	80041c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041ac:	4a17      	ldr	r2, [pc, #92]	@ (800420c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b4:	4a14      	ldr	r2, [pc, #80]	@ (8004208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041b6:	68d2      	ldr	r2, [r2, #12]
 80041b8:	0a12      	lsrs	r2, r2, #8
 80041ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80041be:	fb02 f303 	mul.w	r3, r2, r3
 80041c2:	617b      	str	r3, [r7, #20]
    break;
 80041c4:	e00c      	b.n	80041e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041c6:	4a12      	ldr	r2, [pc, #72]	@ (8004210 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ce:	4a0e      	ldr	r2, [pc, #56]	@ (8004208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041d0:	68d2      	ldr	r2, [r2, #12]
 80041d2:	0a12      	lsrs	r2, r2, #8
 80041d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80041d8:	fb02 f303 	mul.w	r3, r2, r3
 80041dc:	617b      	str	r3, [r7, #20]
    break;
 80041de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041e0:	4b09      	ldr	r3, [pc, #36]	@ (8004208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	0e5b      	lsrs	r3, r3, #25
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	3301      	adds	r3, #1
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80041fa:	687b      	ldr	r3, [r7, #4]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	40021000 	.word	0x40021000
 800420c:	016e3600 	.word	0x016e3600
 8004210:	00f42400 	.word	0x00f42400

08004214 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800421c:	2300      	movs	r3, #0
 800421e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004220:	2300      	movs	r3, #0
 8004222:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8098 	beq.w	8004362 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004232:	2300      	movs	r3, #0
 8004234:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004236:	4b43      	ldr	r3, [pc, #268]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800423a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10d      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004242:	4b40      	ldr	r3, [pc, #256]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004246:	4a3f      	ldr	r2, [pc, #252]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800424c:	6593      	str	r3, [r2, #88]	@ 0x58
 800424e:	4b3d      	ldr	r3, [pc, #244]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004256:	60bb      	str	r3, [r7, #8]
 8004258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800425a:	2301      	movs	r3, #1
 800425c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800425e:	4b3a      	ldr	r3, [pc, #232]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a39      	ldr	r2, [pc, #228]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004268:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800426a:	f7fe fe79 	bl	8002f60 <HAL_GetTick>
 800426e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004270:	e009      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004272:	f7fe fe75 	bl	8002f60 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d902      	bls.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	74fb      	strb	r3, [r7, #19]
        break;
 8004284:	e005      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004286:	4b30      	ldr	r3, [pc, #192]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0ef      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004292:	7cfb      	ldrb	r3, [r7, #19]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d159      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004298:	4b2a      	ldr	r3, [pc, #168]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800429a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800429e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d01e      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d019      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042b4:	4b23      	ldr	r3, [pc, #140]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042c0:	4b20      	ldr	r3, [pc, #128]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042e0:	4a18      	ldr	r2, [pc, #96]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d016      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f2:	f7fe fe35 	bl	8002f60 <HAL_GetTick>
 80042f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042f8:	e00b      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fa:	f7fe fe31 	bl	8002f60 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004308:	4293      	cmp	r3, r2
 800430a:	d902      	bls.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	74fb      	strb	r3, [r7, #19]
            break;
 8004310:	e006      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004312:	4b0c      	ldr	r3, [pc, #48]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0ec      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004320:	7cfb      	ldrb	r3, [r7, #19]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10b      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004326:	4b07      	ldr	r3, [pc, #28]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004334:	4903      	ldr	r1, [pc, #12]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800433c:	e008      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800433e:	7cfb      	ldrb	r3, [r7, #19]
 8004340:	74bb      	strb	r3, [r7, #18]
 8004342:	e005      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004344:	40021000 	.word	0x40021000
 8004348:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434c:	7cfb      	ldrb	r3, [r7, #19]
 800434e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004350:	7c7b      	ldrb	r3, [r7, #17]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d105      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004356:	4ba7      	ldr	r3, [pc, #668]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800435a:	4aa6      	ldr	r2, [pc, #664]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004360:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800436e:	4ba1      	ldr	r3, [pc, #644]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004374:	f023 0203 	bic.w	r2, r3, #3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	499d      	ldr	r1, [pc, #628]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004390:	4b98      	ldr	r3, [pc, #608]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004396:	f023 020c 	bic.w	r2, r3, #12
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	4995      	ldr	r1, [pc, #596]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043b2:	4b90      	ldr	r3, [pc, #576]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	498c      	ldr	r1, [pc, #560]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043d4:	4b87      	ldr	r3, [pc, #540]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	4984      	ldr	r1, [pc, #528]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043f6:	4b7f      	ldr	r3, [pc, #508]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	497b      	ldr	r1, [pc, #492]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004418:	4b76      	ldr	r3, [pc, #472]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	4973      	ldr	r1, [pc, #460]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800443a:	4b6e      	ldr	r3, [pc, #440]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004440:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	496a      	ldr	r1, [pc, #424]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800445c:	4b65      	ldr	r3, [pc, #404]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004462:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	4962      	ldr	r1, [pc, #392]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800447e:	4b5d      	ldr	r3, [pc, #372]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004484:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448c:	4959      	ldr	r1, [pc, #356]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044a0:	4b54      	ldr	r3, [pc, #336]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044a6:	f023 0203 	bic.w	r2, r3, #3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ae:	4951      	ldr	r1, [pc, #324]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044c2:	4b4c      	ldr	r3, [pc, #304]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d0:	4948      	ldr	r1, [pc, #288]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d015      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044e4:	4b43      	ldr	r3, [pc, #268]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f2:	4940      	ldr	r1, [pc, #256]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004502:	d105      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004504:	4b3b      	ldr	r3, [pc, #236]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	4a3a      	ldr	r2, [pc, #232]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800450a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800450e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004518:	2b00      	cmp	r3, #0
 800451a:	d015      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800451c:	4b35      	ldr	r3, [pc, #212]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004522:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800452a:	4932      	ldr	r1, [pc, #200]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004536:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800453a:	d105      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800453c:	4b2d      	ldr	r3, [pc, #180]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	4a2c      	ldr	r2, [pc, #176]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004542:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004546:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d015      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004554:	4b27      	ldr	r3, [pc, #156]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004562:	4924      	ldr	r1, [pc, #144]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004572:	d105      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004574:	4b1f      	ldr	r3, [pc, #124]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4a1e      	ldr	r2, [pc, #120]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800457a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800457e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d015      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800458c:	4b19      	ldr	r3, [pc, #100]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004592:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800459a:	4916      	ldr	r1, [pc, #88]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045aa:	d105      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045ac:	4b11      	ldr	r3, [pc, #68]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	4a10      	ldr	r2, [pc, #64]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d019      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045c4:	4b0b      	ldr	r3, [pc, #44]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d2:	4908      	ldr	r1, [pc, #32]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045e2:	d109      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045e4:	4b03      	ldr	r3, [pc, #12]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4a02      	ldr	r2, [pc, #8]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045ee:	60d3      	str	r3, [r2, #12]
 80045f0:	e002      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80045f2:	bf00      	nop
 80045f4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d015      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004604:	4b29      	ldr	r3, [pc, #164]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004612:	4926      	ldr	r1, [pc, #152]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004622:	d105      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004624:	4b21      	ldr	r3, [pc, #132]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4a20      	ldr	r2, [pc, #128]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800462a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800462e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d015      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800463c:	4b1b      	ldr	r3, [pc, #108]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800463e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004642:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800464a:	4918      	ldr	r1, [pc, #96]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800465a:	d105      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800465c:	4b13      	ldr	r3, [pc, #76]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	4a12      	ldr	r2, [pc, #72]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004666:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d015      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004674:	4b0d      	ldr	r3, [pc, #52]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004676:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800467a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004682:	490a      	ldr	r1, [pc, #40]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800468e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004692:	d105      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004694:	4b05      	ldr	r3, [pc, #20]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	4a04      	ldr	r2, [pc, #16]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800469a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800469e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80046a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40021000 	.word	0x40021000

080046b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e049      	b.n	8004756 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fe f91a 	bl	8002910 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3304      	adds	r3, #4
 80046ec:	4619      	mov	r1, r3
 80046ee:	4610      	mov	r0, r2
 80046f0:	f000 ff68 	bl	80055c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b01      	cmp	r3, #1
 8004772:	d001      	beq.n	8004778 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e04c      	b.n	8004812 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a26      	ldr	r2, [pc, #152]	@ (8004820 <HAL_TIM_Base_Start+0xc0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d022      	beq.n	80047d0 <HAL_TIM_Base_Start+0x70>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004792:	d01d      	beq.n	80047d0 <HAL_TIM_Base_Start+0x70>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a22      	ldr	r2, [pc, #136]	@ (8004824 <HAL_TIM_Base_Start+0xc4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d018      	beq.n	80047d0 <HAL_TIM_Base_Start+0x70>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a21      	ldr	r2, [pc, #132]	@ (8004828 <HAL_TIM_Base_Start+0xc8>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d013      	beq.n	80047d0 <HAL_TIM_Base_Start+0x70>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1f      	ldr	r2, [pc, #124]	@ (800482c <HAL_TIM_Base_Start+0xcc>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00e      	beq.n	80047d0 <HAL_TIM_Base_Start+0x70>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004830 <HAL_TIM_Base_Start+0xd0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d009      	beq.n	80047d0 <HAL_TIM_Base_Start+0x70>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004834 <HAL_TIM_Base_Start+0xd4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d004      	beq.n	80047d0 <HAL_TIM_Base_Start+0x70>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004838 <HAL_TIM_Base_Start+0xd8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d115      	bne.n	80047fc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	4b19      	ldr	r3, [pc, #100]	@ (800483c <HAL_TIM_Base_Start+0xdc>)
 80047d8:	4013      	ands	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b06      	cmp	r3, #6
 80047e0:	d015      	beq.n	800480e <HAL_TIM_Base_Start+0xae>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047e8:	d011      	beq.n	800480e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0201 	orr.w	r2, r2, #1
 80047f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fa:	e008      	b.n	800480e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0201 	orr.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	e000      	b.n	8004810 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800480e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40012c00 	.word	0x40012c00
 8004824:	40000400 	.word	0x40000400
 8004828:	40000800 	.word	0x40000800
 800482c:	40000c00 	.word	0x40000c00
 8004830:	40013400 	.word	0x40013400
 8004834:	40014000 	.word	0x40014000
 8004838:	40015000 	.word	0x40015000
 800483c:	00010007 	.word	0x00010007

08004840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b01      	cmp	r3, #1
 8004852:	d001      	beq.n	8004858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e054      	b.n	8004902 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a26      	ldr	r2, [pc, #152]	@ (8004910 <HAL_TIM_Base_Start_IT+0xd0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d022      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x80>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004882:	d01d      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x80>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a22      	ldr	r2, [pc, #136]	@ (8004914 <HAL_TIM_Base_Start_IT+0xd4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d018      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x80>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a21      	ldr	r2, [pc, #132]	@ (8004918 <HAL_TIM_Base_Start_IT+0xd8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d013      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x80>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a1f      	ldr	r2, [pc, #124]	@ (800491c <HAL_TIM_Base_Start_IT+0xdc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00e      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x80>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004920 <HAL_TIM_Base_Start_IT+0xe0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d009      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x80>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004924 <HAL_TIM_Base_Start_IT+0xe4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d004      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x80>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004928 <HAL_TIM_Base_Start_IT+0xe8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d115      	bne.n	80048ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	4b19      	ldr	r3, [pc, #100]	@ (800492c <HAL_TIM_Base_Start_IT+0xec>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b06      	cmp	r3, #6
 80048d0:	d015      	beq.n	80048fe <HAL_TIM_Base_Start_IT+0xbe>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048d8:	d011      	beq.n	80048fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0201 	orr.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ea:	e008      	b.n	80048fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0201 	orr.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	e000      	b.n	8004900 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40012c00 	.word	0x40012c00
 8004914:	40000400 	.word	0x40000400
 8004918:	40000800 	.word	0x40000800
 800491c:	40000c00 	.word	0x40000c00
 8004920:	40013400 	.word	0x40013400
 8004924:	40014000 	.word	0x40014000
 8004928:	40015000 	.word	0x40015000
 800492c:	00010007 	.word	0x00010007

08004930 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e049      	b.n	80049d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f841 	bl	80049de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3304      	adds	r3, #4
 800496c:	4619      	mov	r1, r3
 800496e:	4610      	mov	r0, r2
 8004970:	f000 fe28 	bl	80055c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d109      	bne.n	8004a18 <HAL_TIM_PWM_Start+0x24>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	bf14      	ite	ne
 8004a10:	2301      	movne	r3, #1
 8004a12:	2300      	moveq	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e03c      	b.n	8004a92 <HAL_TIM_PWM_Start+0x9e>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d109      	bne.n	8004a32 <HAL_TIM_PWM_Start+0x3e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	bf14      	ite	ne
 8004a2a:	2301      	movne	r3, #1
 8004a2c:	2300      	moveq	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	e02f      	b.n	8004a92 <HAL_TIM_PWM_Start+0x9e>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d109      	bne.n	8004a4c <HAL_TIM_PWM_Start+0x58>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	bf14      	ite	ne
 8004a44:	2301      	movne	r3, #1
 8004a46:	2300      	moveq	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	e022      	b.n	8004a92 <HAL_TIM_PWM_Start+0x9e>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b0c      	cmp	r3, #12
 8004a50:	d109      	bne.n	8004a66 <HAL_TIM_PWM_Start+0x72>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	bf14      	ite	ne
 8004a5e:	2301      	movne	r3, #1
 8004a60:	2300      	moveq	r3, #0
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	e015      	b.n	8004a92 <HAL_TIM_PWM_Start+0x9e>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d109      	bne.n	8004a80 <HAL_TIM_PWM_Start+0x8c>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	bf14      	ite	ne
 8004a78:	2301      	movne	r3, #1
 8004a7a:	2300      	moveq	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	e008      	b.n	8004a92 <HAL_TIM_PWM_Start+0x9e>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	bf14      	ite	ne
 8004a8c:	2301      	movne	r3, #1
 8004a8e:	2300      	moveq	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e0a6      	b.n	8004be8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d104      	bne.n	8004aaa <HAL_TIM_PWM_Start+0xb6>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004aa8:	e023      	b.n	8004af2 <HAL_TIM_PWM_Start+0xfe>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d104      	bne.n	8004aba <HAL_TIM_PWM_Start+0xc6>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ab8:	e01b      	b.n	8004af2 <HAL_TIM_PWM_Start+0xfe>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d104      	bne.n	8004aca <HAL_TIM_PWM_Start+0xd6>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ac8:	e013      	b.n	8004af2 <HAL_TIM_PWM_Start+0xfe>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b0c      	cmp	r3, #12
 8004ace:	d104      	bne.n	8004ada <HAL_TIM_PWM_Start+0xe6>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ad8:	e00b      	b.n	8004af2 <HAL_TIM_PWM_Start+0xfe>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d104      	bne.n	8004aea <HAL_TIM_PWM_Start+0xf6>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ae8:	e003      	b.n	8004af2 <HAL_TIM_PWM_Start+0xfe>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2202      	movs	r2, #2
 8004aee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2201      	movs	r2, #1
 8004af8:	6839      	ldr	r1, [r7, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f001 f9dc 	bl	8005eb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a3a      	ldr	r2, [pc, #232]	@ (8004bf0 <HAL_TIM_PWM_Start+0x1fc>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d018      	beq.n	8004b3c <HAL_TIM_PWM_Start+0x148>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a39      	ldr	r2, [pc, #228]	@ (8004bf4 <HAL_TIM_PWM_Start+0x200>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d013      	beq.n	8004b3c <HAL_TIM_PWM_Start+0x148>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a37      	ldr	r2, [pc, #220]	@ (8004bf8 <HAL_TIM_PWM_Start+0x204>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00e      	beq.n	8004b3c <HAL_TIM_PWM_Start+0x148>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a36      	ldr	r2, [pc, #216]	@ (8004bfc <HAL_TIM_PWM_Start+0x208>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d009      	beq.n	8004b3c <HAL_TIM_PWM_Start+0x148>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a34      	ldr	r2, [pc, #208]	@ (8004c00 <HAL_TIM_PWM_Start+0x20c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d004      	beq.n	8004b3c <HAL_TIM_PWM_Start+0x148>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a33      	ldr	r2, [pc, #204]	@ (8004c04 <HAL_TIM_PWM_Start+0x210>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d101      	bne.n	8004b40 <HAL_TIM_PWM_Start+0x14c>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <HAL_TIM_PWM_Start+0x14e>
 8004b40:	2300      	movs	r3, #0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d007      	beq.n	8004b56 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a25      	ldr	r2, [pc, #148]	@ (8004bf0 <HAL_TIM_PWM_Start+0x1fc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d022      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x1b2>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b68:	d01d      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x1b2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a26      	ldr	r2, [pc, #152]	@ (8004c08 <HAL_TIM_PWM_Start+0x214>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d018      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x1b2>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a24      	ldr	r2, [pc, #144]	@ (8004c0c <HAL_TIM_PWM_Start+0x218>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d013      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x1b2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a23      	ldr	r2, [pc, #140]	@ (8004c10 <HAL_TIM_PWM_Start+0x21c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00e      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x1b2>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a19      	ldr	r2, [pc, #100]	@ (8004bf4 <HAL_TIM_PWM_Start+0x200>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d009      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x1b2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a18      	ldr	r2, [pc, #96]	@ (8004bf8 <HAL_TIM_PWM_Start+0x204>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d004      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x1b2>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a18      	ldr	r2, [pc, #96]	@ (8004c04 <HAL_TIM_PWM_Start+0x210>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d115      	bne.n	8004bd2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	4b19      	ldr	r3, [pc, #100]	@ (8004c14 <HAL_TIM_PWM_Start+0x220>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b06      	cmp	r3, #6
 8004bb6:	d015      	beq.n	8004be4 <HAL_TIM_PWM_Start+0x1f0>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bbe:	d011      	beq.n	8004be4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd0:	e008      	b.n	8004be4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f042 0201 	orr.w	r2, r2, #1
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	e000      	b.n	8004be6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40012c00 	.word	0x40012c00
 8004bf4:	40013400 	.word	0x40013400
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	40014400 	.word	0x40014400
 8004c00:	40014800 	.word	0x40014800
 8004c04:	40015000 	.word	0x40015000
 8004c08:	40000400 	.word	0x40000400
 8004c0c:	40000800 	.word	0x40000800
 8004c10:	40000c00 	.word	0x40000c00
 8004c14:	00010007 	.word	0x00010007

08004c18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e097      	b.n	8004d5c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d106      	bne.n	8004c46 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7fd fe9f 	bl	8002984 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004c5c:	f023 0307 	bic.w	r3, r3, #7
 8004c60:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	f000 fca9 	bl	80055c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c9a:	f023 0303 	bic.w	r3, r3, #3
 8004c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	4313      	orrs	r3, r2
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004cb8:	f023 030c 	bic.w	r3, r3, #12
 8004cbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004cc4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	021b      	lsls	r3, r3, #8
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	011a      	lsls	r2, r3, #4
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	031b      	lsls	r3, r3, #12
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004cf6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004cfe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3718      	adds	r7, #24
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d8c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d110      	bne.n	8004db6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d102      	bne.n	8004da0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d9a:	7b7b      	ldrb	r3, [r7, #13]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d001      	beq.n	8004da4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e069      	b.n	8004e78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004db4:	e031      	b.n	8004e1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d110      	bne.n	8004dde <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dbc:	7bbb      	ldrb	r3, [r7, #14]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d102      	bne.n	8004dc8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dc2:	7b3b      	ldrb	r3, [r7, #12]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d001      	beq.n	8004dcc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e055      	b.n	8004e78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ddc:	e01d      	b.n	8004e1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d108      	bne.n	8004df6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004de4:	7bbb      	ldrb	r3, [r7, #14]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d105      	bne.n	8004df6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dea:	7b7b      	ldrb	r3, [r7, #13]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d102      	bne.n	8004df6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004df0:	7b3b      	ldrb	r3, [r7, #12]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d001      	beq.n	8004dfa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e03e      	b.n	8004e78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2202      	movs	r2, #2
 8004e06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2202      	movs	r2, #2
 8004e16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <HAL_TIM_Encoder_Start+0xc4>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d008      	beq.n	8004e38 <HAL_TIM_Encoder_Start+0xd4>
 8004e26:	e00f      	b.n	8004e48 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	2100      	movs	r1, #0
 8004e30:	4618      	mov	r0, r3
 8004e32:	f001 f841 	bl	8005eb8 <TIM_CCxChannelCmd>
      break;
 8004e36:	e016      	b.n	8004e66 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	2104      	movs	r1, #4
 8004e40:	4618      	mov	r0, r3
 8004e42:	f001 f839 	bl	8005eb8 <TIM_CCxChannelCmd>
      break;
 8004e46:	e00e      	b.n	8004e66 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	2100      	movs	r1, #0
 8004e50:	4618      	mov	r0, r3
 8004e52:	f001 f831 	bl	8005eb8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	2104      	movs	r1, #4
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f001 f82a 	bl	8005eb8 <TIM_CCxChannelCmd>
      break;
 8004e64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0201 	orr.w	r2, r2, #1
 8004e74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d020      	beq.n	8004ee4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d01b      	beq.n	8004ee4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0202 	mvn.w	r2, #2
 8004eb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fb5c 	bl	8005588 <HAL_TIM_IC_CaptureCallback>
 8004ed0:	e005      	b.n	8004ede <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fb4e 	bl	8005574 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fb5f 	bl	800559c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d020      	beq.n	8004f30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01b      	beq.n	8004f30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f06f 0204 	mvn.w	r2, #4
 8004f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2202      	movs	r2, #2
 8004f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fb36 	bl	8005588 <HAL_TIM_IC_CaptureCallback>
 8004f1c:	e005      	b.n	8004f2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fb28 	bl	8005574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fb39 	bl	800559c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d020      	beq.n	8004f7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01b      	beq.n	8004f7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f06f 0208 	mvn.w	r2, #8
 8004f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2204      	movs	r2, #4
 8004f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	f003 0303 	and.w	r3, r3, #3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fb10 	bl	8005588 <HAL_TIM_IC_CaptureCallback>
 8004f68:	e005      	b.n	8004f76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fb02 	bl	8005574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fb13 	bl	800559c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f003 0310 	and.w	r3, r3, #16
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d020      	beq.n	8004fc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f003 0310 	and.w	r3, r3, #16
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01b      	beq.n	8004fc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f06f 0210 	mvn.w	r2, #16
 8004f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2208      	movs	r2, #8
 8004f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 faea 	bl	8005588 <HAL_TIM_IC_CaptureCallback>
 8004fb4:	e005      	b.n	8004fc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fadc 	bl	8005574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 faed 	bl	800559c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00c      	beq.n	8004fec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d007      	beq.n	8004fec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0201 	mvn.w	r2, #1
 8004fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fd fb9c 	bl	8002724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d104      	bne.n	8005000 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00c      	beq.n	800501a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005006:	2b00      	cmp	r3, #0
 8005008:	d007      	beq.n	800501a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f001 f8a9 	bl	800616c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00c      	beq.n	800503e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800502a:	2b00      	cmp	r3, #0
 800502c:	d007      	beq.n	800503e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f001 f8a1 	bl	8006180 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00c      	beq.n	8005062 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d007      	beq.n	8005062 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800505a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 faa7 	bl	80055b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00c      	beq.n	8005086 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d007      	beq.n	8005086 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f06f 0220 	mvn.w	r2, #32
 800507e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f001 f869 	bl	8006158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00c      	beq.n	80050aa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d007      	beq.n	80050aa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80050a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f001 f875 	bl	8006194 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00c      	beq.n	80050ce <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80050c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f001 f86d 	bl	80061a8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00c      	beq.n	80050f2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d007      	beq.n	80050f2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80050ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f001 f865 	bl	80061bc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00c      	beq.n	8005116 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d007      	beq.n	8005116 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800510e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f001 f85d 	bl	80061d0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005116:	bf00      	nop
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005136:	2b01      	cmp	r3, #1
 8005138:	d101      	bne.n	800513e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800513a:	2302      	movs	r3, #2
 800513c:	e0ff      	b.n	800533e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b14      	cmp	r3, #20
 800514a:	f200 80f0 	bhi.w	800532e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800514e:	a201      	add	r2, pc, #4	@ (adr r2, 8005154 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005154:	080051a9 	.word	0x080051a9
 8005158:	0800532f 	.word	0x0800532f
 800515c:	0800532f 	.word	0x0800532f
 8005160:	0800532f 	.word	0x0800532f
 8005164:	080051e9 	.word	0x080051e9
 8005168:	0800532f 	.word	0x0800532f
 800516c:	0800532f 	.word	0x0800532f
 8005170:	0800532f 	.word	0x0800532f
 8005174:	0800522b 	.word	0x0800522b
 8005178:	0800532f 	.word	0x0800532f
 800517c:	0800532f 	.word	0x0800532f
 8005180:	0800532f 	.word	0x0800532f
 8005184:	0800526b 	.word	0x0800526b
 8005188:	0800532f 	.word	0x0800532f
 800518c:	0800532f 	.word	0x0800532f
 8005190:	0800532f 	.word	0x0800532f
 8005194:	080052ad 	.word	0x080052ad
 8005198:	0800532f 	.word	0x0800532f
 800519c:	0800532f 	.word	0x0800532f
 80051a0:	0800532f 	.word	0x0800532f
 80051a4:	080052ed 	.word	0x080052ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fabc 	bl	800572c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699a      	ldr	r2, [r3, #24]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0208 	orr.w	r2, r2, #8
 80051c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0204 	bic.w	r2, r2, #4
 80051d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6999      	ldr	r1, [r3, #24]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	691a      	ldr	r2, [r3, #16]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	619a      	str	r2, [r3, #24]
      break;
 80051e6:	e0a5      	b.n	8005334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fb36 	bl	8005860 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699a      	ldr	r2, [r3, #24]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6999      	ldr	r1, [r3, #24]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	021a      	lsls	r2, r3, #8
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	619a      	str	r2, [r3, #24]
      break;
 8005228:	e084      	b.n	8005334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68b9      	ldr	r1, [r7, #8]
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fba9 	bl	8005988 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69da      	ldr	r2, [r3, #28]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 0208 	orr.w	r2, r2, #8
 8005244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0204 	bic.w	r2, r2, #4
 8005254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69d9      	ldr	r1, [r3, #28]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	61da      	str	r2, [r3, #28]
      break;
 8005268:	e064      	b.n	8005334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	4618      	mov	r0, r3
 8005272:	f000 fc1b 	bl	8005aac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69da      	ldr	r2, [r3, #28]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69d9      	ldr	r1, [r3, #28]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	021a      	lsls	r2, r3, #8
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	61da      	str	r2, [r3, #28]
      break;
 80052aa:	e043      	b.n	8005334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fc8e 	bl	8005bd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0208 	orr.w	r2, r2, #8
 80052c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0204 	bic.w	r2, r2, #4
 80052d6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	691a      	ldr	r2, [r3, #16]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80052ea:	e023      	b.n	8005334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fcd8 	bl	8005ca8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005306:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005316:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	021a      	lsls	r2, r3, #8
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800532c:	e002      	b.n	8005334 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	75fb      	strb	r3, [r7, #23]
      break;
 8005332:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800533c:	7dfb      	ldrb	r3, [r7, #23]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop

08005348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_TIM_ConfigClockSource+0x1c>
 8005360:	2302      	movs	r3, #2
 8005362:	e0f6      	b.n	8005552 <HAL_TIM_ConfigClockSource+0x20a>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005382:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800538e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a6f      	ldr	r2, [pc, #444]	@ (800555c <HAL_TIM_ConfigClockSource+0x214>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	f000 80c1 	beq.w	8005526 <HAL_TIM_ConfigClockSource+0x1de>
 80053a4:	4a6d      	ldr	r2, [pc, #436]	@ (800555c <HAL_TIM_ConfigClockSource+0x214>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	f200 80c6 	bhi.w	8005538 <HAL_TIM_ConfigClockSource+0x1f0>
 80053ac:	4a6c      	ldr	r2, [pc, #432]	@ (8005560 <HAL_TIM_ConfigClockSource+0x218>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	f000 80b9 	beq.w	8005526 <HAL_TIM_ConfigClockSource+0x1de>
 80053b4:	4a6a      	ldr	r2, [pc, #424]	@ (8005560 <HAL_TIM_ConfigClockSource+0x218>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	f200 80be 	bhi.w	8005538 <HAL_TIM_ConfigClockSource+0x1f0>
 80053bc:	4a69      	ldr	r2, [pc, #420]	@ (8005564 <HAL_TIM_ConfigClockSource+0x21c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	f000 80b1 	beq.w	8005526 <HAL_TIM_ConfigClockSource+0x1de>
 80053c4:	4a67      	ldr	r2, [pc, #412]	@ (8005564 <HAL_TIM_ConfigClockSource+0x21c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	f200 80b6 	bhi.w	8005538 <HAL_TIM_ConfigClockSource+0x1f0>
 80053cc:	4a66      	ldr	r2, [pc, #408]	@ (8005568 <HAL_TIM_ConfigClockSource+0x220>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	f000 80a9 	beq.w	8005526 <HAL_TIM_ConfigClockSource+0x1de>
 80053d4:	4a64      	ldr	r2, [pc, #400]	@ (8005568 <HAL_TIM_ConfigClockSource+0x220>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	f200 80ae 	bhi.w	8005538 <HAL_TIM_ConfigClockSource+0x1f0>
 80053dc:	4a63      	ldr	r2, [pc, #396]	@ (800556c <HAL_TIM_ConfigClockSource+0x224>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	f000 80a1 	beq.w	8005526 <HAL_TIM_ConfigClockSource+0x1de>
 80053e4:	4a61      	ldr	r2, [pc, #388]	@ (800556c <HAL_TIM_ConfigClockSource+0x224>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	f200 80a6 	bhi.w	8005538 <HAL_TIM_ConfigClockSource+0x1f0>
 80053ec:	4a60      	ldr	r2, [pc, #384]	@ (8005570 <HAL_TIM_ConfigClockSource+0x228>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	f000 8099 	beq.w	8005526 <HAL_TIM_ConfigClockSource+0x1de>
 80053f4:	4a5e      	ldr	r2, [pc, #376]	@ (8005570 <HAL_TIM_ConfigClockSource+0x228>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	f200 809e 	bhi.w	8005538 <HAL_TIM_ConfigClockSource+0x1f0>
 80053fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005400:	f000 8091 	beq.w	8005526 <HAL_TIM_ConfigClockSource+0x1de>
 8005404:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005408:	f200 8096 	bhi.w	8005538 <HAL_TIM_ConfigClockSource+0x1f0>
 800540c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005410:	f000 8089 	beq.w	8005526 <HAL_TIM_ConfigClockSource+0x1de>
 8005414:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005418:	f200 808e 	bhi.w	8005538 <HAL_TIM_ConfigClockSource+0x1f0>
 800541c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005420:	d03e      	beq.n	80054a0 <HAL_TIM_ConfigClockSource+0x158>
 8005422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005426:	f200 8087 	bhi.w	8005538 <HAL_TIM_ConfigClockSource+0x1f0>
 800542a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800542e:	f000 8086 	beq.w	800553e <HAL_TIM_ConfigClockSource+0x1f6>
 8005432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005436:	d87f      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x1f0>
 8005438:	2b70      	cmp	r3, #112	@ 0x70
 800543a:	d01a      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x12a>
 800543c:	2b70      	cmp	r3, #112	@ 0x70
 800543e:	d87b      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x1f0>
 8005440:	2b60      	cmp	r3, #96	@ 0x60
 8005442:	d050      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0x19e>
 8005444:	2b60      	cmp	r3, #96	@ 0x60
 8005446:	d877      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x1f0>
 8005448:	2b50      	cmp	r3, #80	@ 0x50
 800544a:	d03c      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0x17e>
 800544c:	2b50      	cmp	r3, #80	@ 0x50
 800544e:	d873      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x1f0>
 8005450:	2b40      	cmp	r3, #64	@ 0x40
 8005452:	d058      	beq.n	8005506 <HAL_TIM_ConfigClockSource+0x1be>
 8005454:	2b40      	cmp	r3, #64	@ 0x40
 8005456:	d86f      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x1f0>
 8005458:	2b30      	cmp	r3, #48	@ 0x30
 800545a:	d064      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x1de>
 800545c:	2b30      	cmp	r3, #48	@ 0x30
 800545e:	d86b      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x1f0>
 8005460:	2b20      	cmp	r3, #32
 8005462:	d060      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x1de>
 8005464:	2b20      	cmp	r3, #32
 8005466:	d867      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x1f0>
 8005468:	2b00      	cmp	r3, #0
 800546a:	d05c      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x1de>
 800546c:	2b10      	cmp	r3, #16
 800546e:	d05a      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x1de>
 8005470:	e062      	b.n	8005538 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005482:	f000 fcf9 	bl	8005e78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005494:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	609a      	str	r2, [r3, #8]
      break;
 800549e:	e04f      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054b0:	f000 fce2 	bl	8005e78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054c2:	609a      	str	r2, [r3, #8]
      break;
 80054c4:	e03c      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054d2:	461a      	mov	r2, r3
 80054d4:	f000 fc54 	bl	8005d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2150      	movs	r1, #80	@ 0x50
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fcad 	bl	8005e3e <TIM_ITRx_SetConfig>
      break;
 80054e4:	e02c      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054f2:	461a      	mov	r2, r3
 80054f4:	f000 fc73 	bl	8005dde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2160      	movs	r1, #96	@ 0x60
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 fc9d 	bl	8005e3e <TIM_ITRx_SetConfig>
      break;
 8005504:	e01c      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005512:	461a      	mov	r2, r3
 8005514:	f000 fc34 	bl	8005d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2140      	movs	r1, #64	@ 0x40
 800551e:	4618      	mov	r0, r3
 8005520:	f000 fc8d 	bl	8005e3e <TIM_ITRx_SetConfig>
      break;
 8005524:	e00c      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4619      	mov	r1, r3
 8005530:	4610      	mov	r0, r2
 8005532:	f000 fc84 	bl	8005e3e <TIM_ITRx_SetConfig>
      break;
 8005536:	e003      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	73fb      	strb	r3, [r7, #15]
      break;
 800553c:	e000      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800553e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005550:	7bfb      	ldrb	r3, [r7, #15]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	00100070 	.word	0x00100070
 8005560:	00100060 	.word	0x00100060
 8005564:	00100050 	.word	0x00100050
 8005568:	00100040 	.word	0x00100040
 800556c:	00100030 	.word	0x00100030
 8005570:	00100020 	.word	0x00100020

08005574 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a4c      	ldr	r2, [pc, #304]	@ (8005708 <TIM_Base_SetConfig+0x144>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d017      	beq.n	800560c <TIM_Base_SetConfig+0x48>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e2:	d013      	beq.n	800560c <TIM_Base_SetConfig+0x48>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a49      	ldr	r2, [pc, #292]	@ (800570c <TIM_Base_SetConfig+0x148>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00f      	beq.n	800560c <TIM_Base_SetConfig+0x48>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a48      	ldr	r2, [pc, #288]	@ (8005710 <TIM_Base_SetConfig+0x14c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00b      	beq.n	800560c <TIM_Base_SetConfig+0x48>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a47      	ldr	r2, [pc, #284]	@ (8005714 <TIM_Base_SetConfig+0x150>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d007      	beq.n	800560c <TIM_Base_SetConfig+0x48>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a46      	ldr	r2, [pc, #280]	@ (8005718 <TIM_Base_SetConfig+0x154>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_Base_SetConfig+0x48>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a45      	ldr	r2, [pc, #276]	@ (800571c <TIM_Base_SetConfig+0x158>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d108      	bne.n	800561e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a39      	ldr	r2, [pc, #228]	@ (8005708 <TIM_Base_SetConfig+0x144>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d023      	beq.n	800566e <TIM_Base_SetConfig+0xaa>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800562c:	d01f      	beq.n	800566e <TIM_Base_SetConfig+0xaa>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a36      	ldr	r2, [pc, #216]	@ (800570c <TIM_Base_SetConfig+0x148>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d01b      	beq.n	800566e <TIM_Base_SetConfig+0xaa>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a35      	ldr	r2, [pc, #212]	@ (8005710 <TIM_Base_SetConfig+0x14c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d017      	beq.n	800566e <TIM_Base_SetConfig+0xaa>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a34      	ldr	r2, [pc, #208]	@ (8005714 <TIM_Base_SetConfig+0x150>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d013      	beq.n	800566e <TIM_Base_SetConfig+0xaa>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a33      	ldr	r2, [pc, #204]	@ (8005718 <TIM_Base_SetConfig+0x154>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00f      	beq.n	800566e <TIM_Base_SetConfig+0xaa>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a33      	ldr	r2, [pc, #204]	@ (8005720 <TIM_Base_SetConfig+0x15c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00b      	beq.n	800566e <TIM_Base_SetConfig+0xaa>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a32      	ldr	r2, [pc, #200]	@ (8005724 <TIM_Base_SetConfig+0x160>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d007      	beq.n	800566e <TIM_Base_SetConfig+0xaa>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a31      	ldr	r2, [pc, #196]	@ (8005728 <TIM_Base_SetConfig+0x164>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d003      	beq.n	800566e <TIM_Base_SetConfig+0xaa>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a2c      	ldr	r2, [pc, #176]	@ (800571c <TIM_Base_SetConfig+0x158>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d108      	bne.n	8005680 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a18      	ldr	r2, [pc, #96]	@ (8005708 <TIM_Base_SetConfig+0x144>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d013      	beq.n	80056d4 <TIM_Base_SetConfig+0x110>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005718 <TIM_Base_SetConfig+0x154>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d00f      	beq.n	80056d4 <TIM_Base_SetConfig+0x110>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005720 <TIM_Base_SetConfig+0x15c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00b      	beq.n	80056d4 <TIM_Base_SetConfig+0x110>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a19      	ldr	r2, [pc, #100]	@ (8005724 <TIM_Base_SetConfig+0x160>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d007      	beq.n	80056d4 <TIM_Base_SetConfig+0x110>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a18      	ldr	r2, [pc, #96]	@ (8005728 <TIM_Base_SetConfig+0x164>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d003      	beq.n	80056d4 <TIM_Base_SetConfig+0x110>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a13      	ldr	r2, [pc, #76]	@ (800571c <TIM_Base_SetConfig+0x158>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d103      	bne.n	80056dc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	691a      	ldr	r2, [r3, #16]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d105      	bne.n	80056fa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f023 0201 	bic.w	r2, r3, #1
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	611a      	str	r2, [r3, #16]
  }
}
 80056fa:	bf00      	nop
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40012c00 	.word	0x40012c00
 800570c:	40000400 	.word	0x40000400
 8005710:	40000800 	.word	0x40000800
 8005714:	40000c00 	.word	0x40000c00
 8005718:	40013400 	.word	0x40013400
 800571c:	40015000 	.word	0x40015000
 8005720:	40014000 	.word	0x40014000
 8005724:	40014400 	.word	0x40014400
 8005728:	40014800 	.word	0x40014800

0800572c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	f023 0201 	bic.w	r2, r3, #1
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800575a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800575e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 0303 	bic.w	r3, r3, #3
 8005766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f023 0302 	bic.w	r3, r3, #2
 8005778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a30      	ldr	r2, [pc, #192]	@ (8005848 <TIM_OC1_SetConfig+0x11c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d013      	beq.n	80057b4 <TIM_OC1_SetConfig+0x88>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a2f      	ldr	r2, [pc, #188]	@ (800584c <TIM_OC1_SetConfig+0x120>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00f      	beq.n	80057b4 <TIM_OC1_SetConfig+0x88>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a2e      	ldr	r2, [pc, #184]	@ (8005850 <TIM_OC1_SetConfig+0x124>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00b      	beq.n	80057b4 <TIM_OC1_SetConfig+0x88>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a2d      	ldr	r2, [pc, #180]	@ (8005854 <TIM_OC1_SetConfig+0x128>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d007      	beq.n	80057b4 <TIM_OC1_SetConfig+0x88>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005858 <TIM_OC1_SetConfig+0x12c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d003      	beq.n	80057b4 <TIM_OC1_SetConfig+0x88>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a2b      	ldr	r2, [pc, #172]	@ (800585c <TIM_OC1_SetConfig+0x130>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d10c      	bne.n	80057ce <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f023 0308 	bic.w	r3, r3, #8
 80057ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f023 0304 	bic.w	r3, r3, #4
 80057cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005848 <TIM_OC1_SetConfig+0x11c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d013      	beq.n	80057fe <TIM_OC1_SetConfig+0xd2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a1c      	ldr	r2, [pc, #112]	@ (800584c <TIM_OC1_SetConfig+0x120>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00f      	beq.n	80057fe <TIM_OC1_SetConfig+0xd2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005850 <TIM_OC1_SetConfig+0x124>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00b      	beq.n	80057fe <TIM_OC1_SetConfig+0xd2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a1a      	ldr	r2, [pc, #104]	@ (8005854 <TIM_OC1_SetConfig+0x128>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d007      	beq.n	80057fe <TIM_OC1_SetConfig+0xd2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a19      	ldr	r2, [pc, #100]	@ (8005858 <TIM_OC1_SetConfig+0x12c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d003      	beq.n	80057fe <TIM_OC1_SetConfig+0xd2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a18      	ldr	r2, [pc, #96]	@ (800585c <TIM_OC1_SetConfig+0x130>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d111      	bne.n	8005822 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800580c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	4313      	orrs	r3, r2
 8005816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4313      	orrs	r3, r2
 8005820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	621a      	str	r2, [r3, #32]
}
 800583c:	bf00      	nop
 800583e:	371c      	adds	r7, #28
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	40012c00 	.word	0x40012c00
 800584c:	40013400 	.word	0x40013400
 8005850:	40014000 	.word	0x40014000
 8005854:	40014400 	.word	0x40014400
 8005858:	40014800 	.word	0x40014800
 800585c:	40015000 	.word	0x40015000

08005860 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	f023 0210 	bic.w	r2, r3, #16
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800588e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800589a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	021b      	lsls	r3, r3, #8
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f023 0320 	bic.w	r3, r3, #32
 80058ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a2c      	ldr	r2, [pc, #176]	@ (8005970 <TIM_OC2_SetConfig+0x110>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d007      	beq.n	80058d4 <TIM_OC2_SetConfig+0x74>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a2b      	ldr	r2, [pc, #172]	@ (8005974 <TIM_OC2_SetConfig+0x114>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d003      	beq.n	80058d4 <TIM_OC2_SetConfig+0x74>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a2a      	ldr	r2, [pc, #168]	@ (8005978 <TIM_OC2_SetConfig+0x118>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d10d      	bne.n	80058f0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005970 <TIM_OC2_SetConfig+0x110>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d013      	beq.n	8005920 <TIM_OC2_SetConfig+0xc0>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005974 <TIM_OC2_SetConfig+0x114>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00f      	beq.n	8005920 <TIM_OC2_SetConfig+0xc0>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a1e      	ldr	r2, [pc, #120]	@ (800597c <TIM_OC2_SetConfig+0x11c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00b      	beq.n	8005920 <TIM_OC2_SetConfig+0xc0>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a1d      	ldr	r2, [pc, #116]	@ (8005980 <TIM_OC2_SetConfig+0x120>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d007      	beq.n	8005920 <TIM_OC2_SetConfig+0xc0>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a1c      	ldr	r2, [pc, #112]	@ (8005984 <TIM_OC2_SetConfig+0x124>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d003      	beq.n	8005920 <TIM_OC2_SetConfig+0xc0>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a17      	ldr	r2, [pc, #92]	@ (8005978 <TIM_OC2_SetConfig+0x118>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d113      	bne.n	8005948 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005926:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800592e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	4313      	orrs	r3, r2
 8005946:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	621a      	str	r2, [r3, #32]
}
 8005962:	bf00      	nop
 8005964:	371c      	adds	r7, #28
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	40012c00 	.word	0x40012c00
 8005974:	40013400 	.word	0x40013400
 8005978:	40015000 	.word	0x40015000
 800597c:	40014000 	.word	0x40014000
 8005980:	40014400 	.word	0x40014400
 8005984:	40014800 	.word	0x40014800

08005988 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0303 	bic.w	r3, r3, #3
 80059c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	021b      	lsls	r3, r3, #8
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	4313      	orrs	r3, r2
 80059e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a2b      	ldr	r2, [pc, #172]	@ (8005a94 <TIM_OC3_SetConfig+0x10c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d007      	beq.n	80059fa <TIM_OC3_SetConfig+0x72>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a2a      	ldr	r2, [pc, #168]	@ (8005a98 <TIM_OC3_SetConfig+0x110>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d003      	beq.n	80059fa <TIM_OC3_SetConfig+0x72>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a29      	ldr	r2, [pc, #164]	@ (8005a9c <TIM_OC3_SetConfig+0x114>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d10d      	bne.n	8005a16 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	021b      	lsls	r3, r3, #8
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a1e      	ldr	r2, [pc, #120]	@ (8005a94 <TIM_OC3_SetConfig+0x10c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d013      	beq.n	8005a46 <TIM_OC3_SetConfig+0xbe>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a1d      	ldr	r2, [pc, #116]	@ (8005a98 <TIM_OC3_SetConfig+0x110>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00f      	beq.n	8005a46 <TIM_OC3_SetConfig+0xbe>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a1d      	ldr	r2, [pc, #116]	@ (8005aa0 <TIM_OC3_SetConfig+0x118>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00b      	beq.n	8005a46 <TIM_OC3_SetConfig+0xbe>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a1c      	ldr	r2, [pc, #112]	@ (8005aa4 <TIM_OC3_SetConfig+0x11c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d007      	beq.n	8005a46 <TIM_OC3_SetConfig+0xbe>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a1b      	ldr	r2, [pc, #108]	@ (8005aa8 <TIM_OC3_SetConfig+0x120>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d003      	beq.n	8005a46 <TIM_OC3_SetConfig+0xbe>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a16      	ldr	r2, [pc, #88]	@ (8005a9c <TIM_OC3_SetConfig+0x114>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d113      	bne.n	8005a6e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	621a      	str	r2, [r3, #32]
}
 8005a88:	bf00      	nop
 8005a8a:	371c      	adds	r7, #28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	40012c00 	.word	0x40012c00
 8005a98:	40013400 	.word	0x40013400
 8005a9c:	40015000 	.word	0x40015000
 8005aa0:	40014000 	.word	0x40014000
 8005aa4:	40014400 	.word	0x40014400
 8005aa8:	40014800 	.word	0x40014800

08005aac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005afa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	031b      	lsls	r3, r3, #12
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a2c      	ldr	r2, [pc, #176]	@ (8005bbc <TIM_OC4_SetConfig+0x110>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d007      	beq.n	8005b20 <TIM_OC4_SetConfig+0x74>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a2b      	ldr	r2, [pc, #172]	@ (8005bc0 <TIM_OC4_SetConfig+0x114>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d003      	beq.n	8005b20 <TIM_OC4_SetConfig+0x74>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8005bc4 <TIM_OC4_SetConfig+0x118>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d10d      	bne.n	8005b3c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	031b      	lsls	r3, r3, #12
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8005bbc <TIM_OC4_SetConfig+0x110>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d013      	beq.n	8005b6c <TIM_OC4_SetConfig+0xc0>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a1e      	ldr	r2, [pc, #120]	@ (8005bc0 <TIM_OC4_SetConfig+0x114>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d00f      	beq.n	8005b6c <TIM_OC4_SetConfig+0xc0>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8005bc8 <TIM_OC4_SetConfig+0x11c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d00b      	beq.n	8005b6c <TIM_OC4_SetConfig+0xc0>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a1d      	ldr	r2, [pc, #116]	@ (8005bcc <TIM_OC4_SetConfig+0x120>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d007      	beq.n	8005b6c <TIM_OC4_SetConfig+0xc0>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8005bd0 <TIM_OC4_SetConfig+0x124>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d003      	beq.n	8005b6c <TIM_OC4_SetConfig+0xc0>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a17      	ldr	r2, [pc, #92]	@ (8005bc4 <TIM_OC4_SetConfig+0x118>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d113      	bne.n	8005b94 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b72:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b7a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	019b      	lsls	r3, r3, #6
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	019b      	lsls	r3, r3, #6
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	621a      	str	r2, [r3, #32]
}
 8005bae:	bf00      	nop
 8005bb0:	371c      	adds	r7, #28
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40012c00 	.word	0x40012c00
 8005bc0:	40013400 	.word	0x40013400
 8005bc4:	40015000 	.word	0x40015000
 8005bc8:	40014000 	.word	0x40014000
 8005bcc:	40014400 	.word	0x40014400
 8005bd0:	40014800 	.word	0x40014800

08005bd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005c18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	041b      	lsls	r3, r3, #16
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a19      	ldr	r2, [pc, #100]	@ (8005c90 <TIM_OC5_SetConfig+0xbc>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d013      	beq.n	8005c56 <TIM_OC5_SetConfig+0x82>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a18      	ldr	r2, [pc, #96]	@ (8005c94 <TIM_OC5_SetConfig+0xc0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d00f      	beq.n	8005c56 <TIM_OC5_SetConfig+0x82>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a17      	ldr	r2, [pc, #92]	@ (8005c98 <TIM_OC5_SetConfig+0xc4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d00b      	beq.n	8005c56 <TIM_OC5_SetConfig+0x82>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a16      	ldr	r2, [pc, #88]	@ (8005c9c <TIM_OC5_SetConfig+0xc8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d007      	beq.n	8005c56 <TIM_OC5_SetConfig+0x82>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a15      	ldr	r2, [pc, #84]	@ (8005ca0 <TIM_OC5_SetConfig+0xcc>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d003      	beq.n	8005c56 <TIM_OC5_SetConfig+0x82>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a14      	ldr	r2, [pc, #80]	@ (8005ca4 <TIM_OC5_SetConfig+0xd0>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d109      	bne.n	8005c6a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	621a      	str	r2, [r3, #32]
}
 8005c84:	bf00      	nop
 8005c86:	371c      	adds	r7, #28
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	40012c00 	.word	0x40012c00
 8005c94:	40013400 	.word	0x40013400
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40014400 	.word	0x40014400
 8005ca0:	40014800 	.word	0x40014800
 8005ca4:	40015000 	.word	0x40015000

08005ca8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	021b      	lsls	r3, r3, #8
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	051b      	lsls	r3, r3, #20
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8005d68 <TIM_OC6_SetConfig+0xc0>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d013      	beq.n	8005d2c <TIM_OC6_SetConfig+0x84>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a19      	ldr	r2, [pc, #100]	@ (8005d6c <TIM_OC6_SetConfig+0xc4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00f      	beq.n	8005d2c <TIM_OC6_SetConfig+0x84>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a18      	ldr	r2, [pc, #96]	@ (8005d70 <TIM_OC6_SetConfig+0xc8>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00b      	beq.n	8005d2c <TIM_OC6_SetConfig+0x84>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a17      	ldr	r2, [pc, #92]	@ (8005d74 <TIM_OC6_SetConfig+0xcc>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d007      	beq.n	8005d2c <TIM_OC6_SetConfig+0x84>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a16      	ldr	r2, [pc, #88]	@ (8005d78 <TIM_OC6_SetConfig+0xd0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d003      	beq.n	8005d2c <TIM_OC6_SetConfig+0x84>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a15      	ldr	r2, [pc, #84]	@ (8005d7c <TIM_OC6_SetConfig+0xd4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d109      	bne.n	8005d40 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	029b      	lsls	r3, r3, #10
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	621a      	str	r2, [r3, #32]
}
 8005d5a:	bf00      	nop
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40012c00 	.word	0x40012c00
 8005d6c:	40013400 	.word	0x40013400
 8005d70:	40014000 	.word	0x40014000
 8005d74:	40014400 	.word	0x40014400
 8005d78:	40014800 	.word	0x40014800
 8005d7c:	40015000 	.word	0x40015000

08005d80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	f023 0201 	bic.w	r2, r3, #1
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	011b      	lsls	r3, r3, #4
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f023 030a 	bic.w	r3, r3, #10
 8005dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	621a      	str	r2, [r3, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b087      	sub	sp, #28
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	60f8      	str	r0, [r7, #12]
 8005de6:	60b9      	str	r1, [r7, #8]
 8005de8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	f023 0210 	bic.w	r2, r3, #16
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	031b      	lsls	r3, r3, #12
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	621a      	str	r2, [r3, #32]
}
 8005e32:	bf00      	nop
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b085      	sub	sp, #20
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005e54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	f043 0307 	orr.w	r3, r3, #7
 8005e64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	609a      	str	r2, [r3, #8]
}
 8005e6c:	bf00      	nop
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	021a      	lsls	r2, r3, #8
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	609a      	str	r2, [r3, #8]
}
 8005eac:	bf00      	nop
 8005eae:	371c      	adds	r7, #28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f003 031f 	and.w	r3, r3, #31
 8005eca:	2201      	movs	r2, #1
 8005ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6a1a      	ldr	r2, [r3, #32]
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	43db      	mvns	r3, r3
 8005eda:	401a      	ands	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a1a      	ldr	r2, [r3, #32]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f003 031f 	and.w	r3, r3, #31
 8005eea:	6879      	ldr	r1, [r7, #4]
 8005eec:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef0:	431a      	orrs	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	621a      	str	r2, [r3, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	371c      	adds	r7, #28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
	...

08005f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e074      	b.n	8006006 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a34      	ldr	r2, [pc, #208]	@ (8006014 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d009      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a33      	ldr	r2, [pc, #204]	@ (8006018 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d004      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a31      	ldr	r2, [pc, #196]	@ (800601c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d108      	bne.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005f60:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a21      	ldr	r2, [pc, #132]	@ (8006014 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d022      	beq.n	8005fda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f9c:	d01d      	beq.n	8005fda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8006020 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d018      	beq.n	8005fda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1d      	ldr	r2, [pc, #116]	@ (8006024 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d013      	beq.n	8005fda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8006028 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00e      	beq.n	8005fda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a15      	ldr	r2, [pc, #84]	@ (8006018 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d009      	beq.n	8005fda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a18      	ldr	r2, [pc, #96]	@ (800602c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d004      	beq.n	8005fda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a11      	ldr	r2, [pc, #68]	@ (800601c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d10c      	bne.n	8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fe0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	40012c00 	.word	0x40012c00
 8006018:	40013400 	.word	0x40013400
 800601c:	40015000 	.word	0x40015000
 8006020:	40000400 	.word	0x40000400
 8006024:	40000800 	.word	0x40000800
 8006028:	40000c00 	.word	0x40000c00
 800602c:	40014000 	.word	0x40014000

08006030 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800603a:	2300      	movs	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006044:	2b01      	cmp	r3, #1
 8006046:	d101      	bne.n	800604c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006048:	2302      	movs	r3, #2
 800604a:	e078      	b.n	800613e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4313      	orrs	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	041b      	lsls	r3, r3, #16
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a1c      	ldr	r2, [pc, #112]	@ (800614c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d009      	beq.n	80060f2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006150 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d004      	beq.n	80060f2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a19      	ldr	r2, [pc, #100]	@ (8006154 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d11c      	bne.n	800612c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fc:	051b      	lsls	r3, r3, #20
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	4313      	orrs	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006128:	4313      	orrs	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	40012c00 	.word	0x40012c00
 8006150:	40013400 	.word	0x40013400
 8006154:	40015000 	.word	0x40015000

08006158 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e042      	b.n	800627c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d106      	bne.n	800620e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7fc fae1 	bl	80027d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2224      	movs	r2, #36	@ 0x24
 8006212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f022 0201 	bic.w	r2, r2, #1
 8006224:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 ff42 	bl	80070b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fc43 	bl	8006ac0 <UART_SetConfig>
 800623a:	4603      	mov	r3, r0
 800623c:	2b01      	cmp	r3, #1
 800623e:	d101      	bne.n	8006244 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e01b      	b.n	800627c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006252:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689a      	ldr	r2, [r3, #8]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006262:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0201 	orr.w	r2, r2, #1
 8006272:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 ffc1 	bl	80071fc <UART_CheckIdleState>
 800627a:	4603      	mov	r3, r0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08a      	sub	sp, #40	@ 0x28
 8006288:	af02      	add	r7, sp, #8
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	603b      	str	r3, [r7, #0]
 8006290:	4613      	mov	r3, r2
 8006292:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800629a:	2b20      	cmp	r3, #32
 800629c:	d17b      	bne.n	8006396 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <HAL_UART_Transmit+0x26>
 80062a4:	88fb      	ldrh	r3, [r7, #6]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e074      	b.n	8006398 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2221      	movs	r2, #33	@ 0x21
 80062ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062be:	f7fc fe4f 	bl	8002f60 <HAL_GetTick>
 80062c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	88fa      	ldrh	r2, [r7, #6]
 80062c8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	88fa      	ldrh	r2, [r7, #6]
 80062d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062dc:	d108      	bne.n	80062f0 <HAL_UART_Transmit+0x6c>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d104      	bne.n	80062f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	61bb      	str	r3, [r7, #24]
 80062ee:	e003      	b.n	80062f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062f4:	2300      	movs	r3, #0
 80062f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062f8:	e030      	b.n	800635c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2200      	movs	r2, #0
 8006302:	2180      	movs	r1, #128	@ 0x80
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f001 f823 	bl	8007350 <UART_WaitOnFlagUntilTimeout>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d005      	beq.n	800631c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2220      	movs	r2, #32
 8006314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e03d      	b.n	8006398 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10b      	bne.n	800633a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006330:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	3302      	adds	r3, #2
 8006336:	61bb      	str	r3, [r7, #24]
 8006338:	e007      	b.n	800634a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	781a      	ldrb	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	3301      	adds	r3, #1
 8006348:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006350:	b29b      	uxth	r3, r3
 8006352:	3b01      	subs	r3, #1
 8006354:	b29a      	uxth	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006362:	b29b      	uxth	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1c8      	bne.n	80062fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2200      	movs	r2, #0
 8006370:	2140      	movs	r1, #64	@ 0x40
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 ffec 	bl	8007350 <UART_WaitOnFlagUntilTimeout>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d005      	beq.n	800638a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2220      	movs	r2, #32
 8006382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e006      	b.n	8006398 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2220      	movs	r2, #32
 800638e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	e000      	b.n	8006398 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006396:	2302      	movs	r3, #2
  }
}
 8006398:	4618      	mov	r0, r3
 800639a:	3720      	adds	r7, #32
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08a      	sub	sp, #40	@ 0x28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	4613      	mov	r3, r2
 80063ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	d137      	bne.n	8006428 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <HAL_UART_Receive_IT+0x24>
 80063be:	88fb      	ldrh	r3, [r7, #6]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e030      	b.n	800642a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a18      	ldr	r2, [pc, #96]	@ (8006434 <HAL_UART_Receive_IT+0x94>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d01f      	beq.n	8006418 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d018      	beq.n	8006418 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	e853 3f00 	ldrex	r3, [r3]
 80063f2:	613b      	str	r3, [r7, #16]
   return(result);
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80063fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	461a      	mov	r2, r3
 8006402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006404:	623b      	str	r3, [r7, #32]
 8006406:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	69f9      	ldr	r1, [r7, #28]
 800640a:	6a3a      	ldr	r2, [r7, #32]
 800640c:	e841 2300 	strex	r3, r2, [r1]
 8006410:	61bb      	str	r3, [r7, #24]
   return(result);
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e6      	bne.n	80063e6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006418:	88fb      	ldrh	r3, [r7, #6]
 800641a:	461a      	mov	r2, r3
 800641c:	68b9      	ldr	r1, [r7, #8]
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f001 f804 	bl	800742c <UART_Start_Receive_IT>
 8006424:	4603      	mov	r3, r0
 8006426:	e000      	b.n	800642a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006428:	2302      	movs	r3, #2
  }
}
 800642a:	4618      	mov	r0, r3
 800642c:	3728      	adds	r7, #40	@ 0x28
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	40008000 	.word	0x40008000

08006438 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b0ba      	sub	sp, #232	@ 0xe8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800645e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006462:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006466:	4013      	ands	r3, r2
 8006468:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800646c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006470:	2b00      	cmp	r3, #0
 8006472:	d11b      	bne.n	80064ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006478:	f003 0320 	and.w	r3, r3, #32
 800647c:	2b00      	cmp	r3, #0
 800647e:	d015      	beq.n	80064ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006484:	f003 0320 	and.w	r3, r3, #32
 8006488:	2b00      	cmp	r3, #0
 800648a:	d105      	bne.n	8006498 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800648c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d009      	beq.n	80064ac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 82e3 	beq.w	8006a68 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	4798      	blx	r3
      }
      return;
 80064aa:	e2dd      	b.n	8006a68 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80064ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 8123 	beq.w	80066fc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80064b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80064ba:	4b8d      	ldr	r3, [pc, #564]	@ (80066f0 <HAL_UART_IRQHandler+0x2b8>)
 80064bc:	4013      	ands	r3, r2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d106      	bne.n	80064d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80064c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80064c6:	4b8b      	ldr	r3, [pc, #556]	@ (80066f4 <HAL_UART_IRQHandler+0x2bc>)
 80064c8:	4013      	ands	r3, r2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 8116 	beq.w	80066fc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d011      	beq.n	8006500 <HAL_UART_IRQHandler+0xc8>
 80064dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00b      	beq.n	8006500 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2201      	movs	r2, #1
 80064ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064f6:	f043 0201 	orr.w	r2, r3, #1
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d011      	beq.n	8006530 <HAL_UART_IRQHandler+0xf8>
 800650c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00b      	beq.n	8006530 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2202      	movs	r2, #2
 800651e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006526:	f043 0204 	orr.w	r2, r3, #4
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b00      	cmp	r3, #0
 800653a:	d011      	beq.n	8006560 <HAL_UART_IRQHandler+0x128>
 800653c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00b      	beq.n	8006560 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2204      	movs	r2, #4
 800654e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006556:	f043 0202 	orr.w	r2, r3, #2
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b00      	cmp	r3, #0
 800656a:	d017      	beq.n	800659c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800656c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006570:	f003 0320 	and.w	r3, r3, #32
 8006574:	2b00      	cmp	r3, #0
 8006576:	d105      	bne.n	8006584 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006578:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800657c:	4b5c      	ldr	r3, [pc, #368]	@ (80066f0 <HAL_UART_IRQHandler+0x2b8>)
 800657e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00b      	beq.n	800659c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2208      	movs	r2, #8
 800658a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006592:	f043 0208 	orr.w	r2, r3, #8
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800659c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d012      	beq.n	80065ce <HAL_UART_IRQHandler+0x196>
 80065a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00c      	beq.n	80065ce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c4:	f043 0220 	orr.w	r2, r3, #32
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8249 	beq.w	8006a6c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065de:	f003 0320 	and.w	r3, r3, #32
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d013      	beq.n	800660e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d105      	bne.n	80065fe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d007      	beq.n	800660e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006614:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006622:	2b40      	cmp	r3, #64	@ 0x40
 8006624:	d005      	beq.n	8006632 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800662a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800662e:	2b00      	cmp	r3, #0
 8006630:	d054      	beq.n	80066dc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f001 f81c 	bl	8007670 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006642:	2b40      	cmp	r3, #64	@ 0x40
 8006644:	d146      	bne.n	80066d4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3308      	adds	r3, #8
 800664c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800665c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006664:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3308      	adds	r3, #8
 800666e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006672:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006676:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800667e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800668a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1d9      	bne.n	8006646 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006698:	2b00      	cmp	r3, #0
 800669a:	d017      	beq.n	80066cc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066a2:	4a15      	ldr	r2, [pc, #84]	@ (80066f8 <HAL_UART_IRQHandler+0x2c0>)
 80066a4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fc fd9c 	bl	80031ea <HAL_DMA_Abort_IT>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d019      	beq.n	80066ec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80066c6:	4610      	mov	r0, r2
 80066c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ca:	e00f      	b.n	80066ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f9e1 	bl	8006a94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d2:	e00b      	b.n	80066ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f9dd 	bl	8006a94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066da:	e007      	b.n	80066ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 f9d9 	bl	8006a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80066ea:	e1bf      	b.n	8006a6c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ec:	bf00      	nop
    return;
 80066ee:	e1bd      	b.n	8006a6c <HAL_UART_IRQHandler+0x634>
 80066f0:	10000001 	.word	0x10000001
 80066f4:	04000120 	.word	0x04000120
 80066f8:	0800773d 	.word	0x0800773d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006700:	2b01      	cmp	r3, #1
 8006702:	f040 8153 	bne.w	80069ac <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800670a:	f003 0310 	and.w	r3, r3, #16
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 814c 	beq.w	80069ac <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006718:	f003 0310 	and.w	r3, r3, #16
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 8145 	beq.w	80069ac <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2210      	movs	r2, #16
 8006728:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006734:	2b40      	cmp	r3, #64	@ 0x40
 8006736:	f040 80bb 	bne.w	80068b0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006748:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 818f 	beq.w	8006a70 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006758:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800675c:	429a      	cmp	r2, r3
 800675e:	f080 8187 	bcs.w	8006a70 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006768:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0320 	and.w	r3, r3, #32
 800677a:	2b00      	cmp	r3, #0
 800677c:	f040 8087 	bne.w	800688e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006788:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800678c:	e853 3f00 	ldrex	r3, [r3]
 8006790:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006794:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800679c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	461a      	mov	r2, r3
 80067a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80067b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80067ba:	e841 2300 	strex	r3, r2, [r1]
 80067be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80067c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1da      	bne.n	8006780 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3308      	adds	r3, #8
 80067d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067d4:	e853 3f00 	ldrex	r3, [r3]
 80067d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80067da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80067dc:	f023 0301 	bic.w	r3, r3, #1
 80067e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3308      	adds	r3, #8
 80067ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80067ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80067f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80067f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80067fa:	e841 2300 	strex	r3, r2, [r1]
 80067fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006800:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1e1      	bne.n	80067ca <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3308      	adds	r3, #8
 800680c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006810:	e853 3f00 	ldrex	r3, [r3]
 8006814:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006818:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800681c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3308      	adds	r3, #8
 8006826:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800682a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800682c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006830:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006838:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e3      	bne.n	8006806 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2220      	movs	r2, #32
 8006842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800685a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800685c:	f023 0310 	bic.w	r3, r3, #16
 8006860:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	461a      	mov	r2, r3
 800686a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800686e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006870:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006874:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800687c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e4      	bne.n	800684c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006888:	4618      	mov	r0, r3
 800688a:	f7fc fc55 	bl	8003138 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2202      	movs	r2, #2
 8006892:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	4619      	mov	r1, r3
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f8fd 	bl	8006aa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068ae:	e0df      	b.n	8006a70 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80068bc:	b29b      	uxth	r3, r3
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 80d1 	beq.w	8006a74 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80068d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 80cc 	beq.w	8006a74 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	461a      	mov	r2, r3
 80068fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80068fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006900:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006904:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800690c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1e4      	bne.n	80068dc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3308      	adds	r3, #8
 8006918:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691c:	e853 3f00 	ldrex	r3, [r3]
 8006920:	623b      	str	r3, [r7, #32]
   return(result);
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006928:	f023 0301 	bic.w	r3, r3, #1
 800692c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3308      	adds	r3, #8
 8006936:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800693a:	633a      	str	r2, [r7, #48]	@ 0x30
 800693c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006942:	e841 2300 	strex	r3, r2, [r1]
 8006946:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1e1      	bne.n	8006912 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2220      	movs	r2, #32
 8006952:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	e853 3f00 	ldrex	r3, [r3]
 800696e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0310 	bic.w	r3, r3, #16
 8006976:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006984:	61fb      	str	r3, [r7, #28]
 8006986:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	69b9      	ldr	r1, [r7, #24]
 800698a:	69fa      	ldr	r2, [r7, #28]
 800698c:	e841 2300 	strex	r3, r2, [r1]
 8006990:	617b      	str	r3, [r7, #20]
   return(result);
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e4      	bne.n	8006962 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2202      	movs	r2, #2
 800699c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800699e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f87f 	bl	8006aa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069aa:	e063      	b.n	8006a74 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00e      	beq.n	80069d6 <HAL_UART_IRQHandler+0x59e>
 80069b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d008      	beq.n	80069d6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80069cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f001 fc12 	bl	80081f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069d4:	e051      	b.n	8006a7a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80069d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d014      	beq.n	8006a0c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80069e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d105      	bne.n	80069fa <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80069ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d008      	beq.n	8006a0c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d03a      	beq.n	8006a78 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	4798      	blx	r3
    }
    return;
 8006a0a:	e035      	b.n	8006a78 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d009      	beq.n	8006a2c <HAL_UART_IRQHandler+0x5f4>
 8006a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fe9f 	bl	8007768 <UART_EndTransmit_IT>
    return;
 8006a2a:	e026      	b.n	8006a7a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d009      	beq.n	8006a4c <HAL_UART_IRQHandler+0x614>
 8006a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a3c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f001 fbeb 	bl	8008220 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a4a:	e016      	b.n	8006a7a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d010      	beq.n	8006a7a <HAL_UART_IRQHandler+0x642>
 8006a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	da0c      	bge.n	8006a7a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 fbd3 	bl	800820c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a66:	e008      	b.n	8006a7a <HAL_UART_IRQHandler+0x642>
      return;
 8006a68:	bf00      	nop
 8006a6a:	e006      	b.n	8006a7a <HAL_UART_IRQHandler+0x642>
    return;
 8006a6c:	bf00      	nop
 8006a6e:	e004      	b.n	8006a7a <HAL_UART_IRQHandler+0x642>
      return;
 8006a70:	bf00      	nop
 8006a72:	e002      	b.n	8006a7a <HAL_UART_IRQHandler+0x642>
      return;
 8006a74:	bf00      	nop
 8006a76:	e000      	b.n	8006a7a <HAL_UART_IRQHandler+0x642>
    return;
 8006a78:	bf00      	nop
  }
}
 8006a7a:	37e8      	adds	r7, #232	@ 0xe8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ac4:	b08c      	sub	sp, #48	@ 0x30
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	4baa      	ldr	r3, [pc, #680]	@ (8006d98 <UART_SetConfig+0x2d8>)
 8006af0:	4013      	ands	r3, r2
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	6812      	ldr	r2, [r2, #0]
 8006af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006af8:	430b      	orrs	r3, r1
 8006afa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a9f      	ldr	r2, [pc, #636]	@ (8006d9c <UART_SetConfig+0x2dc>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d004      	beq.n	8006b2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006b36:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	6812      	ldr	r2, [r2, #0]
 8006b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b40:	430b      	orrs	r3, r1
 8006b42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b4a:	f023 010f 	bic.w	r1, r3, #15
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a90      	ldr	r2, [pc, #576]	@ (8006da0 <UART_SetConfig+0x2e0>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d125      	bne.n	8006bb0 <UART_SetConfig+0xf0>
 8006b64:	4b8f      	ldr	r3, [pc, #572]	@ (8006da4 <UART_SetConfig+0x2e4>)
 8006b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b6a:	f003 0303 	and.w	r3, r3, #3
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d81a      	bhi.n	8006ba8 <UART_SetConfig+0xe8>
 8006b72:	a201      	add	r2, pc, #4	@ (adr r2, 8006b78 <UART_SetConfig+0xb8>)
 8006b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b78:	08006b89 	.word	0x08006b89
 8006b7c:	08006b99 	.word	0x08006b99
 8006b80:	08006b91 	.word	0x08006b91
 8006b84:	08006ba1 	.word	0x08006ba1
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b8e:	e116      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006b90:	2302      	movs	r3, #2
 8006b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b96:	e112      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006b98:	2304      	movs	r3, #4
 8006b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b9e:	e10e      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006ba0:	2308      	movs	r3, #8
 8006ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ba6:	e10a      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006ba8:	2310      	movs	r3, #16
 8006baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bae:	e106      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a7c      	ldr	r2, [pc, #496]	@ (8006da8 <UART_SetConfig+0x2e8>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d138      	bne.n	8006c2c <UART_SetConfig+0x16c>
 8006bba:	4b7a      	ldr	r3, [pc, #488]	@ (8006da4 <UART_SetConfig+0x2e4>)
 8006bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc0:	f003 030c 	and.w	r3, r3, #12
 8006bc4:	2b0c      	cmp	r3, #12
 8006bc6:	d82d      	bhi.n	8006c24 <UART_SetConfig+0x164>
 8006bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd0 <UART_SetConfig+0x110>)
 8006bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bce:	bf00      	nop
 8006bd0:	08006c05 	.word	0x08006c05
 8006bd4:	08006c25 	.word	0x08006c25
 8006bd8:	08006c25 	.word	0x08006c25
 8006bdc:	08006c25 	.word	0x08006c25
 8006be0:	08006c15 	.word	0x08006c15
 8006be4:	08006c25 	.word	0x08006c25
 8006be8:	08006c25 	.word	0x08006c25
 8006bec:	08006c25 	.word	0x08006c25
 8006bf0:	08006c0d 	.word	0x08006c0d
 8006bf4:	08006c25 	.word	0x08006c25
 8006bf8:	08006c25 	.word	0x08006c25
 8006bfc:	08006c25 	.word	0x08006c25
 8006c00:	08006c1d 	.word	0x08006c1d
 8006c04:	2300      	movs	r3, #0
 8006c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c0a:	e0d8      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c12:	e0d4      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006c14:	2304      	movs	r3, #4
 8006c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c1a:	e0d0      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006c1c:	2308      	movs	r3, #8
 8006c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c22:	e0cc      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006c24:	2310      	movs	r3, #16
 8006c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c2a:	e0c8      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a5e      	ldr	r2, [pc, #376]	@ (8006dac <UART_SetConfig+0x2ec>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d125      	bne.n	8006c82 <UART_SetConfig+0x1c2>
 8006c36:	4b5b      	ldr	r3, [pc, #364]	@ (8006da4 <UART_SetConfig+0x2e4>)
 8006c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c3c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006c40:	2b30      	cmp	r3, #48	@ 0x30
 8006c42:	d016      	beq.n	8006c72 <UART_SetConfig+0x1b2>
 8006c44:	2b30      	cmp	r3, #48	@ 0x30
 8006c46:	d818      	bhi.n	8006c7a <UART_SetConfig+0x1ba>
 8006c48:	2b20      	cmp	r3, #32
 8006c4a:	d00a      	beq.n	8006c62 <UART_SetConfig+0x1a2>
 8006c4c:	2b20      	cmp	r3, #32
 8006c4e:	d814      	bhi.n	8006c7a <UART_SetConfig+0x1ba>
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <UART_SetConfig+0x19a>
 8006c54:	2b10      	cmp	r3, #16
 8006c56:	d008      	beq.n	8006c6a <UART_SetConfig+0x1aa>
 8006c58:	e00f      	b.n	8006c7a <UART_SetConfig+0x1ba>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c60:	e0ad      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006c62:	2302      	movs	r3, #2
 8006c64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c68:	e0a9      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006c6a:	2304      	movs	r3, #4
 8006c6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c70:	e0a5      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006c72:	2308      	movs	r3, #8
 8006c74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c78:	e0a1      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006c7a:	2310      	movs	r3, #16
 8006c7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c80:	e09d      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a4a      	ldr	r2, [pc, #296]	@ (8006db0 <UART_SetConfig+0x2f0>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d125      	bne.n	8006cd8 <UART_SetConfig+0x218>
 8006c8c:	4b45      	ldr	r3, [pc, #276]	@ (8006da4 <UART_SetConfig+0x2e4>)
 8006c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c92:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006c96:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c98:	d016      	beq.n	8006cc8 <UART_SetConfig+0x208>
 8006c9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c9c:	d818      	bhi.n	8006cd0 <UART_SetConfig+0x210>
 8006c9e:	2b80      	cmp	r3, #128	@ 0x80
 8006ca0:	d00a      	beq.n	8006cb8 <UART_SetConfig+0x1f8>
 8006ca2:	2b80      	cmp	r3, #128	@ 0x80
 8006ca4:	d814      	bhi.n	8006cd0 <UART_SetConfig+0x210>
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <UART_SetConfig+0x1f0>
 8006caa:	2b40      	cmp	r3, #64	@ 0x40
 8006cac:	d008      	beq.n	8006cc0 <UART_SetConfig+0x200>
 8006cae:	e00f      	b.n	8006cd0 <UART_SetConfig+0x210>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cb6:	e082      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cbe:	e07e      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006cc0:	2304      	movs	r3, #4
 8006cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cc6:	e07a      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006cc8:	2308      	movs	r3, #8
 8006cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cce:	e076      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006cd0:	2310      	movs	r3, #16
 8006cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cd6:	e072      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a35      	ldr	r2, [pc, #212]	@ (8006db4 <UART_SetConfig+0x2f4>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d12a      	bne.n	8006d38 <UART_SetConfig+0x278>
 8006ce2:	4b30      	ldr	r3, [pc, #192]	@ (8006da4 <UART_SetConfig+0x2e4>)
 8006ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ce8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cf0:	d01a      	beq.n	8006d28 <UART_SetConfig+0x268>
 8006cf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cf6:	d81b      	bhi.n	8006d30 <UART_SetConfig+0x270>
 8006cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cfc:	d00c      	beq.n	8006d18 <UART_SetConfig+0x258>
 8006cfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d02:	d815      	bhi.n	8006d30 <UART_SetConfig+0x270>
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <UART_SetConfig+0x250>
 8006d08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d0c:	d008      	beq.n	8006d20 <UART_SetConfig+0x260>
 8006d0e:	e00f      	b.n	8006d30 <UART_SetConfig+0x270>
 8006d10:	2300      	movs	r3, #0
 8006d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d16:	e052      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d1e:	e04e      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006d20:	2304      	movs	r3, #4
 8006d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d26:	e04a      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006d28:	2308      	movs	r3, #8
 8006d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d2e:	e046      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006d30:	2310      	movs	r3, #16
 8006d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d36:	e042      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a17      	ldr	r2, [pc, #92]	@ (8006d9c <UART_SetConfig+0x2dc>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d13a      	bne.n	8006db8 <UART_SetConfig+0x2f8>
 8006d42:	4b18      	ldr	r3, [pc, #96]	@ (8006da4 <UART_SetConfig+0x2e4>)
 8006d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d48:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006d4c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d50:	d01a      	beq.n	8006d88 <UART_SetConfig+0x2c8>
 8006d52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d56:	d81b      	bhi.n	8006d90 <UART_SetConfig+0x2d0>
 8006d58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d5c:	d00c      	beq.n	8006d78 <UART_SetConfig+0x2b8>
 8006d5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d62:	d815      	bhi.n	8006d90 <UART_SetConfig+0x2d0>
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <UART_SetConfig+0x2b0>
 8006d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d6c:	d008      	beq.n	8006d80 <UART_SetConfig+0x2c0>
 8006d6e:	e00f      	b.n	8006d90 <UART_SetConfig+0x2d0>
 8006d70:	2300      	movs	r3, #0
 8006d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d76:	e022      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d7e:	e01e      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006d80:	2304      	movs	r3, #4
 8006d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d86:	e01a      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006d88:	2308      	movs	r3, #8
 8006d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d8e:	e016      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006d90:	2310      	movs	r3, #16
 8006d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d96:	e012      	b.n	8006dbe <UART_SetConfig+0x2fe>
 8006d98:	cfff69f3 	.word	0xcfff69f3
 8006d9c:	40008000 	.word	0x40008000
 8006da0:	40013800 	.word	0x40013800
 8006da4:	40021000 	.word	0x40021000
 8006da8:	40004400 	.word	0x40004400
 8006dac:	40004800 	.word	0x40004800
 8006db0:	40004c00 	.word	0x40004c00
 8006db4:	40005000 	.word	0x40005000
 8006db8:	2310      	movs	r3, #16
 8006dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4aae      	ldr	r2, [pc, #696]	@ (800707c <UART_SetConfig+0x5bc>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	f040 8097 	bne.w	8006ef8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006dca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006dce:	2b08      	cmp	r3, #8
 8006dd0:	d823      	bhi.n	8006e1a <UART_SetConfig+0x35a>
 8006dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd8 <UART_SetConfig+0x318>)
 8006dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd8:	08006dfd 	.word	0x08006dfd
 8006ddc:	08006e1b 	.word	0x08006e1b
 8006de0:	08006e05 	.word	0x08006e05
 8006de4:	08006e1b 	.word	0x08006e1b
 8006de8:	08006e0b 	.word	0x08006e0b
 8006dec:	08006e1b 	.word	0x08006e1b
 8006df0:	08006e1b 	.word	0x08006e1b
 8006df4:	08006e1b 	.word	0x08006e1b
 8006df8:	08006e13 	.word	0x08006e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dfc:	f7fd f966 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 8006e00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e02:	e010      	b.n	8006e26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e04:	4b9e      	ldr	r3, [pc, #632]	@ (8007080 <UART_SetConfig+0x5c0>)
 8006e06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e08:	e00d      	b.n	8006e26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e0a:	f7fd f8f1 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 8006e0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e10:	e009      	b.n	8006e26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e18:	e005      	b.n	8006e26 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 8130 	beq.w	800708e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e32:	4a94      	ldr	r2, [pc, #592]	@ (8007084 <UART_SetConfig+0x5c4>)
 8006e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e38:	461a      	mov	r2, r3
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e40:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	4613      	mov	r3, r2
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	4413      	add	r3, r2
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d305      	bcc.n	8006e5e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d903      	bls.n	8006e66 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e64:	e113      	b.n	800708e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e68:	2200      	movs	r2, #0
 8006e6a:	60bb      	str	r3, [r7, #8]
 8006e6c:	60fa      	str	r2, [r7, #12]
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e72:	4a84      	ldr	r2, [pc, #528]	@ (8007084 <UART_SetConfig+0x5c4>)
 8006e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	603b      	str	r3, [r7, #0]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e88:	f7f9 ff26 	bl	8000cd8 <__aeabi_uldivmod>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	460b      	mov	r3, r1
 8006e90:	4610      	mov	r0, r2
 8006e92:	4619      	mov	r1, r3
 8006e94:	f04f 0200 	mov.w	r2, #0
 8006e98:	f04f 0300 	mov.w	r3, #0
 8006e9c:	020b      	lsls	r3, r1, #8
 8006e9e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ea2:	0202      	lsls	r2, r0, #8
 8006ea4:	6979      	ldr	r1, [r7, #20]
 8006ea6:	6849      	ldr	r1, [r1, #4]
 8006ea8:	0849      	lsrs	r1, r1, #1
 8006eaa:	2000      	movs	r0, #0
 8006eac:	460c      	mov	r4, r1
 8006eae:	4605      	mov	r5, r0
 8006eb0:	eb12 0804 	adds.w	r8, r2, r4
 8006eb4:	eb43 0905 	adc.w	r9, r3, r5
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	469a      	mov	sl, r3
 8006ec0:	4693      	mov	fp, r2
 8006ec2:	4652      	mov	r2, sl
 8006ec4:	465b      	mov	r3, fp
 8006ec6:	4640      	mov	r0, r8
 8006ec8:	4649      	mov	r1, r9
 8006eca:	f7f9 ff05 	bl	8000cd8 <__aeabi_uldivmod>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006edc:	d308      	bcc.n	8006ef0 <UART_SetConfig+0x430>
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ee4:	d204      	bcs.n	8006ef0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6a3a      	ldr	r2, [r7, #32]
 8006eec:	60da      	str	r2, [r3, #12]
 8006eee:	e0ce      	b.n	800708e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ef6:	e0ca      	b.n	800708e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	69db      	ldr	r3, [r3, #28]
 8006efc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f00:	d166      	bne.n	8006fd0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006f02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f06:	2b08      	cmp	r3, #8
 8006f08:	d827      	bhi.n	8006f5a <UART_SetConfig+0x49a>
 8006f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f10 <UART_SetConfig+0x450>)
 8006f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f10:	08006f35 	.word	0x08006f35
 8006f14:	08006f3d 	.word	0x08006f3d
 8006f18:	08006f45 	.word	0x08006f45
 8006f1c:	08006f5b 	.word	0x08006f5b
 8006f20:	08006f4b 	.word	0x08006f4b
 8006f24:	08006f5b 	.word	0x08006f5b
 8006f28:	08006f5b 	.word	0x08006f5b
 8006f2c:	08006f5b 	.word	0x08006f5b
 8006f30:	08006f53 	.word	0x08006f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f34:	f7fd f8ca 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 8006f38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f3a:	e014      	b.n	8006f66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f3c:	f7fd f8dc 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 8006f40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f42:	e010      	b.n	8006f66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f44:	4b4e      	ldr	r3, [pc, #312]	@ (8007080 <UART_SetConfig+0x5c0>)
 8006f46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f48:	e00d      	b.n	8006f66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f4a:	f7fd f851 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 8006f4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f50:	e009      	b.n	8006f66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f58:	e005      	b.n	8006f66 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 8090 	beq.w	800708e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f72:	4a44      	ldr	r2, [pc, #272]	@ (8007084 <UART_SetConfig+0x5c4>)
 8006f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f80:	005a      	lsls	r2, r3, #1
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	085b      	lsrs	r3, r3, #1
 8006f88:	441a      	add	r2, r3
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	2b0f      	cmp	r3, #15
 8006f98:	d916      	bls.n	8006fc8 <UART_SetConfig+0x508>
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fa0:	d212      	bcs.n	8006fc8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	f023 030f 	bic.w	r3, r3, #15
 8006faa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	085b      	lsrs	r3, r3, #1
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	f003 0307 	and.w	r3, r3, #7
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	8bfb      	ldrh	r3, [r7, #30]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	8bfa      	ldrh	r2, [r7, #30]
 8006fc4:	60da      	str	r2, [r3, #12]
 8006fc6:	e062      	b.n	800708e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006fce:	e05e      	b.n	800708e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fd0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006fd4:	2b08      	cmp	r3, #8
 8006fd6:	d828      	bhi.n	800702a <UART_SetConfig+0x56a>
 8006fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8006fe0 <UART_SetConfig+0x520>)
 8006fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fde:	bf00      	nop
 8006fe0:	08007005 	.word	0x08007005
 8006fe4:	0800700d 	.word	0x0800700d
 8006fe8:	08007015 	.word	0x08007015
 8006fec:	0800702b 	.word	0x0800702b
 8006ff0:	0800701b 	.word	0x0800701b
 8006ff4:	0800702b 	.word	0x0800702b
 8006ff8:	0800702b 	.word	0x0800702b
 8006ffc:	0800702b 	.word	0x0800702b
 8007000:	08007023 	.word	0x08007023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007004:	f7fd f862 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 8007008:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800700a:	e014      	b.n	8007036 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800700c:	f7fd f874 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 8007010:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007012:	e010      	b.n	8007036 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007014:	4b1a      	ldr	r3, [pc, #104]	@ (8007080 <UART_SetConfig+0x5c0>)
 8007016:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007018:	e00d      	b.n	8007036 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800701a:	f7fc ffe9 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 800701e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007020:	e009      	b.n	8007036 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007026:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007028:	e005      	b.n	8007036 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800702a:	2300      	movs	r3, #0
 800702c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007034:	bf00      	nop
    }

    if (pclk != 0U)
 8007036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007038:	2b00      	cmp	r3, #0
 800703a:	d028      	beq.n	800708e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007040:	4a10      	ldr	r2, [pc, #64]	@ (8007084 <UART_SetConfig+0x5c4>)
 8007042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007046:	461a      	mov	r2, r3
 8007048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704a:	fbb3 f2f2 	udiv	r2, r3, r2
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	085b      	lsrs	r3, r3, #1
 8007054:	441a      	add	r2, r3
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	fbb2 f3f3 	udiv	r3, r2, r3
 800705e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	2b0f      	cmp	r3, #15
 8007064:	d910      	bls.n	8007088 <UART_SetConfig+0x5c8>
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800706c:	d20c      	bcs.n	8007088 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	b29a      	uxth	r2, r3
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60da      	str	r2, [r3, #12]
 8007078:	e009      	b.n	800708e <UART_SetConfig+0x5ce>
 800707a:	bf00      	nop
 800707c:	40008000 	.word	0x40008000
 8007080:	00f42400 	.word	0x00f42400
 8007084:	0800d8ac 	.word	0x0800d8ac
      }
      else
      {
        ret = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2201      	movs	r2, #1
 8007092:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2201      	movs	r2, #1
 800709a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2200      	movs	r2, #0
 80070a2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	2200      	movs	r2, #0
 80070a8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80070aa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3730      	adds	r7, #48	@ 0x30
 80070b2:	46bd      	mov	sp, r7
 80070b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080070b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c4:	f003 0308 	and.w	r3, r3, #8
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00a      	beq.n	80070e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00a      	beq.n	8007104 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007108:	f003 0302 	and.w	r3, r3, #2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00a      	beq.n	8007126 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712a:	f003 0304 	and.w	r3, r3, #4
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00a      	beq.n	8007148 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	430a      	orrs	r2, r1
 8007146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800714c:	f003 0310 	and.w	r3, r3, #16
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00a      	beq.n	800716a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716e:	f003 0320 	and.w	r3, r3, #32
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007194:	2b00      	cmp	r3, #0
 8007196:	d01a      	beq.n	80071ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071b6:	d10a      	bne.n	80071ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00a      	beq.n	80071f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	605a      	str	r2, [r3, #4]
  }
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b098      	sub	sp, #96	@ 0x60
 8007200:	af02      	add	r7, sp, #8
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800720c:	f7fb fea8 	bl	8002f60 <HAL_GetTick>
 8007210:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0308 	and.w	r3, r3, #8
 800721c:	2b08      	cmp	r3, #8
 800721e:	d12f      	bne.n	8007280 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007220:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007228:	2200      	movs	r2, #0
 800722a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f88e 	bl	8007350 <UART_WaitOnFlagUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d022      	beq.n	8007280 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007242:	e853 3f00 	ldrex	r3, [r3]
 8007246:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800724a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800724e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	461a      	mov	r2, r3
 8007256:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007258:	647b      	str	r3, [r7, #68]	@ 0x44
 800725a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800725e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007260:	e841 2300 	strex	r3, r2, [r1]
 8007264:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e6      	bne.n	800723a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2220      	movs	r2, #32
 8007270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e063      	b.n	8007348 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0304 	and.w	r3, r3, #4
 800728a:	2b04      	cmp	r3, #4
 800728c:	d149      	bne.n	8007322 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800728e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007296:	2200      	movs	r2, #0
 8007298:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f857 	bl	8007350 <UART_WaitOnFlagUntilTimeout>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d03c      	beq.n	8007322 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	623b      	str	r3, [r7, #32]
   return(result);
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80072c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e6      	bne.n	80072a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3308      	adds	r3, #8
 80072e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	e853 3f00 	ldrex	r3, [r3]
 80072e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f023 0301 	bic.w	r3, r3, #1
 80072f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3308      	adds	r3, #8
 80072f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072fa:	61fa      	str	r2, [r7, #28]
 80072fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fe:	69b9      	ldr	r1, [r7, #24]
 8007300:	69fa      	ldr	r2, [r7, #28]
 8007302:	e841 2300 	strex	r3, r2, [r1]
 8007306:	617b      	str	r3, [r7, #20]
   return(result);
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1e5      	bne.n	80072da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2220      	movs	r2, #32
 8007312:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e012      	b.n	8007348 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2220      	movs	r2, #32
 8007326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2220      	movs	r2, #32
 800732e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3758      	adds	r7, #88	@ 0x58
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	603b      	str	r3, [r7, #0]
 800735c:	4613      	mov	r3, r2
 800735e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007360:	e04f      	b.n	8007402 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007368:	d04b      	beq.n	8007402 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800736a:	f7fb fdf9 	bl	8002f60 <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	69ba      	ldr	r2, [r7, #24]
 8007376:	429a      	cmp	r2, r3
 8007378:	d302      	bcc.n	8007380 <UART_WaitOnFlagUntilTimeout+0x30>
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e04e      	b.n	8007422 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0304 	and.w	r3, r3, #4
 800738e:	2b00      	cmp	r3, #0
 8007390:	d037      	beq.n	8007402 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2b80      	cmp	r3, #128	@ 0x80
 8007396:	d034      	beq.n	8007402 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2b40      	cmp	r3, #64	@ 0x40
 800739c:	d031      	beq.n	8007402 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	f003 0308 	and.w	r3, r3, #8
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d110      	bne.n	80073ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2208      	movs	r2, #8
 80073b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 f95b 	bl	8007670 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2208      	movs	r2, #8
 80073be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e029      	b.n	8007422 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073dc:	d111      	bne.n	8007402 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80073e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 f941 	bl	8007670 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2220      	movs	r2, #32
 80073f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e00f      	b.n	8007422 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69da      	ldr	r2, [r3, #28]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	4013      	ands	r3, r2
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	429a      	cmp	r2, r3
 8007410:	bf0c      	ite	eq
 8007412:	2301      	moveq	r3, #1
 8007414:	2300      	movne	r3, #0
 8007416:	b2db      	uxtb	r3, r3
 8007418:	461a      	mov	r2, r3
 800741a:	79fb      	ldrb	r3, [r7, #7]
 800741c:	429a      	cmp	r2, r3
 800741e:	d0a0      	beq.n	8007362 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
	...

0800742c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800742c:	b480      	push	{r7}
 800742e:	b0a3      	sub	sp, #140	@ 0x8c
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	4613      	mov	r3, r2
 8007438:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	88fa      	ldrh	r2, [r7, #6]
 8007444:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	88fa      	ldrh	r2, [r7, #6]
 800744c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800745e:	d10e      	bne.n	800747e <UART_Start_Receive_IT+0x52>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d105      	bne.n	8007474 <UART_Start_Receive_IT+0x48>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800746e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007472:	e02d      	b.n	80074d0 <UART_Start_Receive_IT+0xa4>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	22ff      	movs	r2, #255	@ 0xff
 8007478:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800747c:	e028      	b.n	80074d0 <UART_Start_Receive_IT+0xa4>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10d      	bne.n	80074a2 <UART_Start_Receive_IT+0x76>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d104      	bne.n	8007498 <UART_Start_Receive_IT+0x6c>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	22ff      	movs	r2, #255	@ 0xff
 8007492:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007496:	e01b      	b.n	80074d0 <UART_Start_Receive_IT+0xa4>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	227f      	movs	r2, #127	@ 0x7f
 800749c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074a0:	e016      	b.n	80074d0 <UART_Start_Receive_IT+0xa4>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074aa:	d10d      	bne.n	80074c8 <UART_Start_Receive_IT+0x9c>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d104      	bne.n	80074be <UART_Start_Receive_IT+0x92>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	227f      	movs	r2, #127	@ 0x7f
 80074b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074bc:	e008      	b.n	80074d0 <UART_Start_Receive_IT+0xa4>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	223f      	movs	r2, #63	@ 0x3f
 80074c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074c6:	e003      	b.n	80074d0 <UART_Start_Receive_IT+0xa4>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2222      	movs	r2, #34	@ 0x22
 80074dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3308      	adds	r3, #8
 80074e6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074ea:	e853 3f00 	ldrex	r3, [r3]
 80074ee:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80074f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80074f2:	f043 0301 	orr.w	r3, r3, #1
 80074f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	3308      	adds	r3, #8
 8007500:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007504:	673a      	str	r2, [r7, #112]	@ 0x70
 8007506:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800750a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800750c:	e841 2300 	strex	r3, r2, [r1]
 8007510:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007512:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e3      	bne.n	80074e0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800751c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007520:	d14f      	bne.n	80075c2 <UART_Start_Receive_IT+0x196>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007528:	88fa      	ldrh	r2, [r7, #6]
 800752a:	429a      	cmp	r2, r3
 800752c:	d349      	bcc.n	80075c2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007536:	d107      	bne.n	8007548 <UART_Start_Receive_IT+0x11c>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d103      	bne.n	8007548 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	4a47      	ldr	r2, [pc, #284]	@ (8007660 <UART_Start_Receive_IT+0x234>)
 8007544:	675a      	str	r2, [r3, #116]	@ 0x74
 8007546:	e002      	b.n	800754e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	4a46      	ldr	r2, [pc, #280]	@ (8007664 <UART_Start_Receive_IT+0x238>)
 800754c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d01a      	beq.n	800758c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800755e:	e853 3f00 	ldrex	r3, [r3]
 8007562:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800756a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007578:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800757a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800757e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e4      	bne.n	8007556 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3308      	adds	r3, #8
 8007592:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800759c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800759e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3308      	adds	r3, #8
 80075aa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80075ac:	64ba      	str	r2, [r7, #72]	@ 0x48
 80075ae:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80075b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075b4:	e841 2300 	strex	r3, r2, [r1]
 80075b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80075ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e5      	bne.n	800758c <UART_Start_Receive_IT+0x160>
 80075c0:	e046      	b.n	8007650 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075ca:	d107      	bne.n	80075dc <UART_Start_Receive_IT+0x1b0>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d103      	bne.n	80075dc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	4a24      	ldr	r2, [pc, #144]	@ (8007668 <UART_Start_Receive_IT+0x23c>)
 80075d8:	675a      	str	r2, [r3, #116]	@ 0x74
 80075da:	e002      	b.n	80075e2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4a23      	ldr	r2, [pc, #140]	@ (800766c <UART_Start_Receive_IT+0x240>)
 80075e0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d019      	beq.n	800761e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fa:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80075fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	461a      	mov	r2, r3
 8007606:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007608:	637b      	str	r3, [r7, #52]	@ 0x34
 800760a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800760e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e6      	bne.n	80075ea <UART_Start_Receive_IT+0x1be>
 800761c:	e018      	b.n	8007650 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	e853 3f00 	ldrex	r3, [r3]
 800762a:	613b      	str	r3, [r7, #16]
   return(result);
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	f043 0320 	orr.w	r3, r3, #32
 8007632:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800763c:	623b      	str	r3, [r7, #32]
 800763e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	69f9      	ldr	r1, [r7, #28]
 8007642:	6a3a      	ldr	r2, [r7, #32]
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	61bb      	str	r3, [r7, #24]
   return(result);
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e6      	bne.n	800761e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	378c      	adds	r7, #140	@ 0x8c
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	08007e91 	.word	0x08007e91
 8007664:	08007b31 	.word	0x08007b31
 8007668:	08007979 	.word	0x08007979
 800766c:	080077c1 	.word	0x080077c1

08007670 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007670:	b480      	push	{r7}
 8007672:	b095      	sub	sp, #84	@ 0x54
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007680:	e853 3f00 	ldrex	r3, [r3]
 8007684:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007688:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800768c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	461a      	mov	r2, r3
 8007694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007696:	643b      	str	r3, [r7, #64]	@ 0x40
 8007698:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800769c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800769e:	e841 2300 	strex	r3, r2, [r1]
 80076a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1e6      	bne.n	8007678 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	3308      	adds	r3, #8
 80076b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	e853 3f00 	ldrex	r3, [r3]
 80076b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076c0:	f023 0301 	bic.w	r3, r3, #1
 80076c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3308      	adds	r3, #8
 80076cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1e3      	bne.n	80076aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d118      	bne.n	800771c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	e853 3f00 	ldrex	r3, [r3]
 80076f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	f023 0310 	bic.w	r3, r3, #16
 80076fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	461a      	mov	r2, r3
 8007706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007708:	61bb      	str	r3, [r7, #24]
 800770a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770c:	6979      	ldr	r1, [r7, #20]
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	e841 2300 	strex	r3, r2, [r1]
 8007714:	613b      	str	r3, [r7, #16]
   return(result);
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1e6      	bne.n	80076ea <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2220      	movs	r2, #32
 8007720:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007730:	bf00      	nop
 8007732:	3754      	adds	r7, #84	@ 0x54
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007748:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f7ff f99a 	bl	8006a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007760:	bf00      	nop
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b088      	sub	sp, #32
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	60bb      	str	r3, [r7, #8]
   return(result);
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007784:	61fb      	str	r3, [r7, #28]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	61bb      	str	r3, [r7, #24]
 8007790:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	6979      	ldr	r1, [r7, #20]
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	613b      	str	r3, [r7, #16]
   return(result);
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e6      	bne.n	8007770 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2220      	movs	r2, #32
 80077a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7ff f965 	bl	8006a80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077b6:	bf00      	nop
 80077b8:	3720      	adds	r7, #32
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
	...

080077c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b09c      	sub	sp, #112	@ 0x70
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80077ce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077d8:	2b22      	cmp	r3, #34	@ 0x22
 80077da:	f040 80be 	bne.w	800795a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80077e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80077ec:	b2d9      	uxtb	r1, r3
 80077ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80077f2:	b2da      	uxtb	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077f8:	400a      	ands	r2, r1
 80077fa:	b2d2      	uxtb	r2, r2
 80077fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800780e:	b29b      	uxth	r3, r3
 8007810:	3b01      	subs	r3, #1
 8007812:	b29a      	uxth	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007820:	b29b      	uxth	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	f040 80a1 	bne.w	800796a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007838:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800783c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	461a      	mov	r2, r3
 8007844:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007846:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007848:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800784c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800784e:	e841 2300 	strex	r3, r2, [r1]
 8007852:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007854:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1e6      	bne.n	8007828 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3308      	adds	r3, #8
 8007860:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007864:	e853 3f00 	ldrex	r3, [r3]
 8007868:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800786a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800786c:	f023 0301 	bic.w	r3, r3, #1
 8007870:	667b      	str	r3, [r7, #100]	@ 0x64
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3308      	adds	r3, #8
 8007878:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800787a:	647a      	str	r2, [r7, #68]	@ 0x44
 800787c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007880:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007882:	e841 2300 	strex	r3, r2, [r1]
 8007886:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1e5      	bne.n	800785a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2220      	movs	r2, #32
 8007892:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a33      	ldr	r2, [pc, #204]	@ (8007974 <UART_RxISR_8BIT+0x1b4>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d01f      	beq.n	80078ec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d018      	beq.n	80078ec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c2:	e853 3f00 	ldrex	r3, [r3]
 80078c6:	623b      	str	r3, [r7, #32]
   return(result);
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80078ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	461a      	mov	r2, r3
 80078d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80078da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078e0:	e841 2300 	strex	r3, r2, [r1]
 80078e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1e6      	bne.n	80078ba <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d12e      	bne.n	8007952 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	e853 3f00 	ldrex	r3, [r3]
 8007906:	60fb      	str	r3, [r7, #12]
   return(result);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f023 0310 	bic.w	r3, r3, #16
 800790e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	461a      	mov	r2, r3
 8007916:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007918:	61fb      	str	r3, [r7, #28]
 800791a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791c:	69b9      	ldr	r1, [r7, #24]
 800791e:	69fa      	ldr	r2, [r7, #28]
 8007920:	e841 2300 	strex	r3, r2, [r1]
 8007924:	617b      	str	r3, [r7, #20]
   return(result);
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1e6      	bne.n	80078fa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	f003 0310 	and.w	r3, r3, #16
 8007936:	2b10      	cmp	r3, #16
 8007938:	d103      	bne.n	8007942 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2210      	movs	r2, #16
 8007940:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7ff f8ac 	bl	8006aa8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007950:	e00b      	b.n	800796a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f7fa fecc 	bl	80026f0 <HAL_UART_RxCpltCallback>
}
 8007958:	e007      	b.n	800796a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	699a      	ldr	r2, [r3, #24]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f042 0208 	orr.w	r2, r2, #8
 8007968:	619a      	str	r2, [r3, #24]
}
 800796a:	bf00      	nop
 800796c:	3770      	adds	r7, #112	@ 0x70
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	40008000 	.word	0x40008000

08007978 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b09c      	sub	sp, #112	@ 0x70
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007986:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007990:	2b22      	cmp	r3, #34	@ 0x22
 8007992:	f040 80be 	bne.w	8007b12 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800799c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80079a6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80079aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80079ae:	4013      	ands	r3, r2
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079ba:	1c9a      	adds	r2, r3, #2
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	3b01      	subs	r3, #1
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f040 80a1 	bne.w	8007b22 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079e8:	e853 3f00 	ldrex	r3, [r3]
 80079ec:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80079ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a00:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a02:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007a04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007a06:	e841 2300 	strex	r3, r2, [r1]
 8007a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007a0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1e6      	bne.n	80079e0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3308      	adds	r3, #8
 8007a18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a1c:	e853 3f00 	ldrex	r3, [r3]
 8007a20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a24:	f023 0301 	bic.w	r3, r3, #1
 8007a28:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3308      	adds	r3, #8
 8007a30:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007a32:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a3a:	e841 2300 	strex	r3, r2, [r1]
 8007a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1e5      	bne.n	8007a12 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2220      	movs	r2, #32
 8007a4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a33      	ldr	r2, [pc, #204]	@ (8007b2c <UART_RxISR_16BIT+0x1b4>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d01f      	beq.n	8007aa4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d018      	beq.n	8007aa4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	e853 3f00 	ldrex	r3, [r3]
 8007a7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a92:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a98:	e841 2300 	strex	r3, r2, [r1]
 8007a9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1e6      	bne.n	8007a72 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d12e      	bne.n	8007b0a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	e853 3f00 	ldrex	r3, [r3]
 8007abe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	f023 0310 	bic.w	r3, r3, #16
 8007ac6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	461a      	mov	r2, r3
 8007ace:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ad0:	61bb      	str	r3, [r7, #24]
 8007ad2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad4:	6979      	ldr	r1, [r7, #20]
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	e841 2300 	strex	r3, r2, [r1]
 8007adc:	613b      	str	r3, [r7, #16]
   return(result);
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1e6      	bne.n	8007ab2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	f003 0310 	and.w	r3, r3, #16
 8007aee:	2b10      	cmp	r3, #16
 8007af0:	d103      	bne.n	8007afa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2210      	movs	r2, #16
 8007af8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b00:	4619      	mov	r1, r3
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f7fe ffd0 	bl	8006aa8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b08:	e00b      	b.n	8007b22 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7fa fdf0 	bl	80026f0 <HAL_UART_RxCpltCallback>
}
 8007b10:	e007      	b.n	8007b22 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	699a      	ldr	r2, [r3, #24]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f042 0208 	orr.w	r2, r2, #8
 8007b20:	619a      	str	r2, [r3, #24]
}
 8007b22:	bf00      	nop
 8007b24:	3770      	adds	r7, #112	@ 0x70
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	40008000 	.word	0x40008000

08007b30 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b0ac      	sub	sp, #176	@ 0xb0
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007b3e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b66:	2b22      	cmp	r3, #34	@ 0x22
 8007b68:	f040 8182 	bne.w	8007e70 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007b72:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b76:	e125      	b.n	8007dc4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b82:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007b86:	b2d9      	uxtb	r1, r3
 8007b88:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b92:	400a      	ands	r2, r1
 8007b94:	b2d2      	uxtb	r2, r2
 8007b96:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b9c:	1c5a      	adds	r2, r3, #1
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	3b01      	subs	r3, #1
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	69db      	ldr	r3, [r3, #28]
 8007bba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bc2:	f003 0307 	and.w	r3, r3, #7
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d053      	beq.n	8007c72 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007bca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d011      	beq.n	8007bfa <UART_RxISR_8BIT_FIFOEN+0xca>
 8007bd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00b      	beq.n	8007bfa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2201      	movs	r2, #1
 8007be8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bf0:	f043 0201 	orr.w	r2, r3, #1
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bfe:	f003 0302 	and.w	r3, r3, #2
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d011      	beq.n	8007c2a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007c06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00b      	beq.n	8007c2a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2202      	movs	r2, #2
 8007c18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c20:	f043 0204 	orr.w	r2, r3, #4
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c2e:	f003 0304 	and.w	r3, r3, #4
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d011      	beq.n	8007c5a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00b      	beq.n	8007c5a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2204      	movs	r2, #4
 8007c48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c50:	f043 0202 	orr.w	r2, r3, #2
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d006      	beq.n	8007c72 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7fe ff15 	bl	8006a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f040 80a2 	bne.w	8007dc4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c88:	e853 3f00 	ldrex	r3, [r3]
 8007c8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007c8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ca2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ca4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007ca8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007caa:	e841 2300 	strex	r3, r2, [r1]
 8007cae:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007cb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1e4      	bne.n	8007c80 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3308      	adds	r3, #8
 8007cbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007cc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007cc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ccc:	f023 0301 	bic.w	r3, r3, #1
 8007cd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3308      	adds	r3, #8
 8007cda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007cde:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007ce0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007ce4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007ce6:	e841 2300 	strex	r3, r2, [r1]
 8007cea:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007cec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1e1      	bne.n	8007cb6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2220      	movs	r2, #32
 8007cf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a5f      	ldr	r2, [pc, #380]	@ (8007e88 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d021      	beq.n	8007d54 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d01a      	beq.n	8007d54 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d26:	e853 3f00 	ldrex	r3, [r3]
 8007d2a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007d40:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d42:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d44:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007d46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d48:	e841 2300 	strex	r3, r2, [r1]
 8007d4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007d4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e4      	bne.n	8007d1e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d130      	bne.n	8007dbe <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d6a:	e853 3f00 	ldrex	r3, [r3]
 8007d6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d72:	f023 0310 	bic.w	r3, r3, #16
 8007d76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d84:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d86:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d8c:	e841 2300 	strex	r3, r2, [r1]
 8007d90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1e4      	bne.n	8007d62 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	f003 0310 	and.w	r3, r3, #16
 8007da2:	2b10      	cmp	r3, #16
 8007da4:	d103      	bne.n	8007dae <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2210      	movs	r2, #16
 8007dac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007db4:	4619      	mov	r1, r3
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f7fe fe76 	bl	8006aa8 <HAL_UARTEx_RxEventCallback>
 8007dbc:	e002      	b.n	8007dc4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7fa fc96 	bl	80026f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007dc4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d006      	beq.n	8007dda <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dd0:	f003 0320 	and.w	r3, r3, #32
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f47f aecf 	bne.w	8007b78 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007de0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007de4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d049      	beq.n	8007e80 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007df2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d242      	bcs.n	8007e80 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3308      	adds	r3, #8
 8007e00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	e853 3f00 	ldrex	r3, [r3]
 8007e08:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3308      	adds	r3, #8
 8007e1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007e1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1e3      	bne.n	8007dfa <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a15      	ldr	r2, [pc, #84]	@ (8007e8c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007e36:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	e853 3f00 	ldrex	r3, [r3]
 8007e44:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	f043 0320 	orr.w	r3, r3, #32
 8007e4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	461a      	mov	r2, r3
 8007e56:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007e5a:	61bb      	str	r3, [r7, #24]
 8007e5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	6979      	ldr	r1, [r7, #20]
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	613b      	str	r3, [r7, #16]
   return(result);
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e4      	bne.n	8007e38 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e6e:	e007      	b.n	8007e80 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	699a      	ldr	r2, [r3, #24]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f042 0208 	orr.w	r2, r2, #8
 8007e7e:	619a      	str	r2, [r3, #24]
}
 8007e80:	bf00      	nop
 8007e82:	37b0      	adds	r7, #176	@ 0xb0
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	40008000 	.word	0x40008000
 8007e8c:	080077c1 	.word	0x080077c1

08007e90 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b0ae      	sub	sp, #184	@ 0xb8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007e9e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	69db      	ldr	r3, [r3, #28]
 8007ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ec6:	2b22      	cmp	r3, #34	@ 0x22
 8007ec8:	f040 8186 	bne.w	80081d8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007ed2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ed6:	e129      	b.n	800812c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ede:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007eea:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007eee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007efa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f00:	1c9a      	adds	r2, r3, #2
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007f22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d053      	beq.n	8007fd6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d011      	beq.n	8007f5e <UART_RxISR_16BIT_FIFOEN+0xce>
 8007f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00b      	beq.n	8007f5e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f54:	f043 0201 	orr.w	r2, r3, #1
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f62:	f003 0302 	and.w	r3, r3, #2
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d011      	beq.n	8007f8e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007f6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00b      	beq.n	8007f8e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f84:	f043 0204 	orr.w	r2, r3, #4
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f92:	f003 0304 	and.w	r3, r3, #4
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d011      	beq.n	8007fbe <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007f9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007f9e:	f003 0301 	and.w	r3, r3, #1
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00b      	beq.n	8007fbe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2204      	movs	r2, #4
 8007fac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fb4:	f043 0202 	orr.w	r2, r3, #2
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d006      	beq.n	8007fd6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7fe fd63 	bl	8006a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f040 80a4 	bne.w	800812c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007fec:	e853 3f00 	ldrex	r3, [r3]
 8007ff0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007ff2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ff8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	461a      	mov	r2, r3
 8008002:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008006:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800800a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800800e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008012:	e841 2300 	strex	r3, r2, [r1]
 8008016:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008018:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1e2      	bne.n	8007fe4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	3308      	adds	r3, #8
 8008024:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008026:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008028:	e853 3f00 	ldrex	r3, [r3]
 800802c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800802e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008030:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008034:	f023 0301 	bic.w	r3, r3, #1
 8008038:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3308      	adds	r3, #8
 8008042:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008046:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008048:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800804c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800804e:	e841 2300 	strex	r3, r2, [r1]
 8008052:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008054:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1e1      	bne.n	800801e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2220      	movs	r2, #32
 800805e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a5f      	ldr	r2, [pc, #380]	@ (80081f0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d021      	beq.n	80080bc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d01a      	beq.n	80080bc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008094:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008096:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800809a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	461a      	mov	r2, r3
 80080a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080aa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80080ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80080b0:	e841 2300 	strex	r3, r2, [r1]
 80080b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80080b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1e4      	bne.n	8008086 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d130      	bne.n	8008126 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d2:	e853 3f00 	ldrex	r3, [r3]
 80080d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080da:	f023 0310 	bic.w	r3, r3, #16
 80080de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80080ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80080ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080f4:	e841 2300 	strex	r3, r2, [r1]
 80080f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1e4      	bne.n	80080ca <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	f003 0310 	and.w	r3, r3, #16
 800810a:	2b10      	cmp	r3, #16
 800810c:	d103      	bne.n	8008116 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2210      	movs	r2, #16
 8008114:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7fe fcc2 	bl	8006aa8 <HAL_UARTEx_RxEventCallback>
 8008124:	e002      	b.n	800812c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7fa fae2 	bl	80026f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800812c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008130:	2b00      	cmp	r3, #0
 8008132:	d006      	beq.n	8008142 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008134:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008138:	f003 0320 	and.w	r3, r3, #32
 800813c:	2b00      	cmp	r3, #0
 800813e:	f47f aecb 	bne.w	8007ed8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008148:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800814c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008150:	2b00      	cmp	r3, #0
 8008152:	d049      	beq.n	80081e8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800815a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800815e:	429a      	cmp	r2, r3
 8008160:	d242      	bcs.n	80081e8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3308      	adds	r3, #8
 8008168:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816c:	e853 3f00 	ldrex	r3, [r3]
 8008170:	623b      	str	r3, [r7, #32]
   return(result);
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008178:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3308      	adds	r3, #8
 8008182:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008186:	633a      	str	r2, [r7, #48]	@ 0x30
 8008188:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800818c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800818e:	e841 2300 	strex	r3, r2, [r1]
 8008192:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1e3      	bne.n	8008162 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a15      	ldr	r2, [pc, #84]	@ (80081f4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800819e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	e853 3f00 	ldrex	r3, [r3]
 80081ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f043 0320 	orr.w	r3, r3, #32
 80081b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	461a      	mov	r2, r3
 80081be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80081c2:	61fb      	str	r3, [r7, #28]
 80081c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	69b9      	ldr	r1, [r7, #24]
 80081c8:	69fa      	ldr	r2, [r7, #28]
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	617b      	str	r3, [r7, #20]
   return(result);
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e4      	bne.n	80081a0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081d6:	e007      	b.n	80081e8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699a      	ldr	r2, [r3, #24]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f042 0208 	orr.w	r2, r2, #8
 80081e6:	619a      	str	r2, [r3, #24]
}
 80081e8:	bf00      	nop
 80081ea:	37b8      	adds	r7, #184	@ 0xb8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	40008000 	.word	0x40008000
 80081f4:	08007979 	.word	0x08007979

080081f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008242:	2b01      	cmp	r3, #1
 8008244:	d101      	bne.n	800824a <HAL_UARTEx_DisableFifoMode+0x16>
 8008246:	2302      	movs	r3, #2
 8008248:	e027      	b.n	800829a <HAL_UARTEx_DisableFifoMode+0x66>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2224      	movs	r2, #36	@ 0x24
 8008256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f022 0201 	bic.w	r2, r2, #1
 8008270:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008278:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2220      	movs	r2, #32
 800828c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d101      	bne.n	80082be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80082ba:	2302      	movs	r3, #2
 80082bc:	e02d      	b.n	800831a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2224      	movs	r2, #36	@ 0x24
 80082ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f022 0201 	bic.w	r2, r2, #1
 80082e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	430a      	orrs	r2, r1
 80082f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f850 	bl	80083a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2220      	movs	r2, #32
 800830c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b084      	sub	sp, #16
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008332:	2b01      	cmp	r3, #1
 8008334:	d101      	bne.n	800833a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008336:	2302      	movs	r3, #2
 8008338:	e02d      	b.n	8008396 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2224      	movs	r2, #36	@ 0x24
 8008346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f022 0201 	bic.w	r2, r2, #1
 8008360:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f812 	bl	80083a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2220      	movs	r2, #32
 8008388:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
	...

080083a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d108      	bne.n	80083c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80083c0:	e031      	b.n	8008426 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80083c2:	2308      	movs	r3, #8
 80083c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80083c6:	2308      	movs	r3, #8
 80083c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	0e5b      	lsrs	r3, r3, #25
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	f003 0307 	and.w	r3, r3, #7
 80083d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	0f5b      	lsrs	r3, r3, #29
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	f003 0307 	and.w	r3, r3, #7
 80083e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083ea:	7bbb      	ldrb	r3, [r7, #14]
 80083ec:	7b3a      	ldrb	r2, [r7, #12]
 80083ee:	4911      	ldr	r1, [pc, #68]	@ (8008434 <UARTEx_SetNbDataToProcess+0x94>)
 80083f0:	5c8a      	ldrb	r2, [r1, r2]
 80083f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80083f6:	7b3a      	ldrb	r2, [r7, #12]
 80083f8:	490f      	ldr	r1, [pc, #60]	@ (8008438 <UARTEx_SetNbDataToProcess+0x98>)
 80083fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008400:	b29a      	uxth	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008408:	7bfb      	ldrb	r3, [r7, #15]
 800840a:	7b7a      	ldrb	r2, [r7, #13]
 800840c:	4909      	ldr	r1, [pc, #36]	@ (8008434 <UARTEx_SetNbDataToProcess+0x94>)
 800840e:	5c8a      	ldrb	r2, [r1, r2]
 8008410:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008414:	7b7a      	ldrb	r2, [r7, #13]
 8008416:	4908      	ldr	r1, [pc, #32]	@ (8008438 <UARTEx_SetNbDataToProcess+0x98>)
 8008418:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800841a:	fb93 f3f2 	sdiv	r3, r3, r2
 800841e:	b29a      	uxth	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008426:	bf00      	nop
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	0800d8c4 	.word	0x0800d8c4
 8008438:	0800d8cc 	.word	0x0800d8cc

0800843c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08a      	sub	sp, #40	@ 0x28
 8008440:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8008442:	2300      	movs	r3, #0
 8008444:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008446:	4b7e      	ldr	r3, [pc, #504]	@ (8008640 <xTaskIncrementTick+0x204>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	f040 80ed 	bne.w	800862a <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008450:	4b7c      	ldr	r3, [pc, #496]	@ (8008644 <xTaskIncrementTick+0x208>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	3301      	adds	r3, #1
 8008456:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8008458:	4a7a      	ldr	r2, [pc, #488]	@ (8008644 <xTaskIncrementTick+0x208>)
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800845e:	6a3b      	ldr	r3, [r7, #32]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d121      	bne.n	80084a8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8008464:	4b78      	ldr	r3, [pc, #480]	@ (8008648 <xTaskIncrementTick+0x20c>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00b      	beq.n	8008486 <xTaskIncrementTick+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8008480:	bf00      	nop
 8008482:	bf00      	nop
 8008484:	e7fd      	b.n	8008482 <xTaskIncrementTick+0x46>
 8008486:	4b70      	ldr	r3, [pc, #448]	@ (8008648 <xTaskIncrementTick+0x20c>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	61fb      	str	r3, [r7, #28]
 800848c:	4b6f      	ldr	r3, [pc, #444]	@ (800864c <xTaskIncrementTick+0x210>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a6d      	ldr	r2, [pc, #436]	@ (8008648 <xTaskIncrementTick+0x20c>)
 8008492:	6013      	str	r3, [r2, #0]
 8008494:	4a6d      	ldr	r2, [pc, #436]	@ (800864c <xTaskIncrementTick+0x210>)
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	6013      	str	r3, [r2, #0]
 800849a:	4b6d      	ldr	r3, [pc, #436]	@ (8008650 <xTaskIncrementTick+0x214>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	3301      	adds	r3, #1
 80084a0:	4a6b      	ldr	r2, [pc, #428]	@ (8008650 <xTaskIncrementTick+0x214>)
 80084a2:	6013      	str	r3, [r2, #0]
 80084a4:	f000 f93e 	bl	8008724 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80084a8:	4b6a      	ldr	r3, [pc, #424]	@ (8008654 <xTaskIncrementTick+0x218>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	6a3a      	ldr	r2, [r7, #32]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	f0c0 80a6 	bcc.w	8008600 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084b4:	4b64      	ldr	r3, [pc, #400]	@ (8008648 <xTaskIncrementTick+0x20c>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d104      	bne.n	80084c8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084be:	4b65      	ldr	r3, [pc, #404]	@ (8008654 <xTaskIncrementTick+0x218>)
 80084c0:	f04f 32ff 	mov.w	r2, #4294967295
 80084c4:	601a      	str	r2, [r3, #0]
                    break;
 80084c6:	e09b      	b.n	8008600 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084c8:	4b5f      	ldr	r3, [pc, #380]	@ (8008648 <xTaskIncrementTick+0x20c>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80084d8:	6a3a      	ldr	r2, [r7, #32]
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d203      	bcs.n	80084e8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80084e0:	4a5c      	ldr	r2, [pc, #368]	@ (8008654 <xTaskIncrementTick+0x218>)
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80084e6:	e08b      	b.n	8008600 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	613b      	str	r3, [r7, #16]
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	69ba      	ldr	r2, [r7, #24]
 80084f4:	68d2      	ldr	r2, [r2, #12]
 80084f6:	609a      	str	r2, [r3, #8]
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	6892      	ldr	r2, [r2, #8]
 8008500:	605a      	str	r2, [r3, #4]
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	3304      	adds	r3, #4
 800850a:	429a      	cmp	r2, r3
 800850c:	d103      	bne.n	8008516 <xTaskIncrementTick+0xda>
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	68da      	ldr	r2, [r3, #12]
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	605a      	str	r2, [r3, #4]
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	2200      	movs	r2, #0
 800851a:	615a      	str	r2, [r3, #20]
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	1e5a      	subs	r2, r3, #1
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852a:	2b00      	cmp	r3, #0
 800852c:	d01e      	beq.n	800856c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008532:	60fb      	str	r3, [r7, #12]
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	69db      	ldr	r3, [r3, #28]
 8008538:	69ba      	ldr	r2, [r7, #24]
 800853a:	6a12      	ldr	r2, [r2, #32]
 800853c:	609a      	str	r2, [r3, #8]
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	69d2      	ldr	r2, [r2, #28]
 8008546:	605a      	str	r2, [r3, #4]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	3318      	adds	r3, #24
 8008550:	429a      	cmp	r2, r3
 8008552:	d103      	bne.n	800855c <xTaskIncrementTick+0x120>
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	6a1a      	ldr	r2, [r3, #32]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	605a      	str	r2, [r3, #4]
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	2200      	movs	r2, #0
 8008560:	629a      	str	r2, [r3, #40]	@ 0x28
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	1e5a      	subs	r2, r3, #1
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008570:	2201      	movs	r2, #1
 8008572:	409a      	lsls	r2, r3
 8008574:	4b38      	ldr	r3, [pc, #224]	@ (8008658 <xTaskIncrementTick+0x21c>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4313      	orrs	r3, r2
 800857a:	4a37      	ldr	r2, [pc, #220]	@ (8008658 <xTaskIncrementTick+0x21c>)
 800857c:	6013      	str	r3, [r2, #0]
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008582:	4936      	ldr	r1, [pc, #216]	@ (800865c <xTaskIncrementTick+0x220>)
 8008584:	4613      	mov	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	440b      	add	r3, r1
 800858e:	3304      	adds	r3, #4
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	60bb      	str	r3, [r7, #8]
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	609a      	str	r2, [r3, #8]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	689a      	ldr	r2, [r3, #8]
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	60da      	str	r2, [r3, #12]
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	69ba      	ldr	r2, [r7, #24]
 80085a8:	3204      	adds	r2, #4
 80085aa:	605a      	str	r2, [r3, #4]
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	1d1a      	adds	r2, r3, #4
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	609a      	str	r2, [r3, #8]
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085b8:	4613      	mov	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4a26      	ldr	r2, [pc, #152]	@ (800865c <xTaskIncrementTick+0x220>)
 80085c2:	441a      	add	r2, r3
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	615a      	str	r2, [r3, #20]
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085cc:	4923      	ldr	r1, [pc, #140]	@ (800865c <xTaskIncrementTick+0x220>)
 80085ce:	4613      	mov	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	440b      	add	r3, r1
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	1c59      	adds	r1, r3, #1
 80085dc:	481f      	ldr	r0, [pc, #124]	@ (800865c <xTaskIncrementTick+0x220>)
 80085de:	4613      	mov	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4403      	add	r3, r0
 80085e8:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008660 <xTaskIncrementTick+0x224>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f4:	429a      	cmp	r2, r3
 80085f6:	f67f af5d 	bls.w	80084b4 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 80085fa:	2301      	movs	r3, #1
 80085fc:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085fe:	e759      	b.n	80084b4 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008600:	4b17      	ldr	r3, [pc, #92]	@ (8008660 <xTaskIncrementTick+0x224>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008606:	4915      	ldr	r1, [pc, #84]	@ (800865c <xTaskIncrementTick+0x220>)
 8008608:	4613      	mov	r3, r2
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	4413      	add	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	440b      	add	r3, r1
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d901      	bls.n	800861c <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8008618:	2301      	movs	r3, #1
 800861a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800861c:	4b11      	ldr	r3, [pc, #68]	@ (8008664 <xTaskIncrementTick+0x228>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d007      	beq.n	8008634 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8008624:	2301      	movs	r3, #1
 8008626:	627b      	str	r3, [r7, #36]	@ 0x24
 8008628:	e004      	b.n	8008634 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800862a:	4b0f      	ldr	r3, [pc, #60]	@ (8008668 <xTaskIncrementTick+0x22c>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3301      	adds	r3, #1
 8008630:	4a0d      	ldr	r2, [pc, #52]	@ (8008668 <xTaskIncrementTick+0x22c>)
 8008632:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8008634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008636:	4618      	mov	r0, r3
 8008638:	3728      	adds	r7, #40	@ 0x28
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	200006cc 	.word	0x200006cc
 8008644:	200006b4 	.word	0x200006b4
 8008648:	200006ac 	.word	0x200006ac
 800864c:	200006b0 	.word	0x200006b0
 8008650:	200006c4 	.word	0x200006c4
 8008654:	200006c8 	.word	0x200006c8
 8008658:	200006b8 	.word	0x200006b8
 800865c:	20000648 	.word	0x20000648
 8008660:	20000644 	.word	0x20000644
 8008664:	200006c0 	.word	0x200006c0
 8008668:	200006bc 	.word	0x200006bc

0800866c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800866c:	b480      	push	{r7}
 800866e:	b087      	sub	sp, #28
 8008670:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008672:	4b27      	ldr	r3, [pc, #156]	@ (8008710 <vTaskSwitchContext+0xa4>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800867a:	4b26      	ldr	r3, [pc, #152]	@ (8008714 <vTaskSwitchContext+0xa8>)
 800867c:	2201      	movs	r2, #1
 800867e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8008680:	e040      	b.n	8008704 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8008682:	4b24      	ldr	r3, [pc, #144]	@ (8008714 <vTaskSwitchContext+0xa8>)
 8008684:	2200      	movs	r2, #0
 8008686:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008688:	4b23      	ldr	r3, [pc, #140]	@ (8008718 <vTaskSwitchContext+0xac>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	fab3 f383 	clz	r3, r3
 8008694:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8008696:	7afb      	ldrb	r3, [r7, #11]
 8008698:	f1c3 031f 	rsb	r3, r3, #31
 800869c:	617b      	str	r3, [r7, #20]
 800869e:	491f      	ldr	r1, [pc, #124]	@ (800871c <vTaskSwitchContext+0xb0>)
 80086a0:	697a      	ldr	r2, [r7, #20]
 80086a2:	4613      	mov	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	4413      	add	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	440b      	add	r3, r1
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10b      	bne.n	80086ca <vTaskSwitchContext+0x5e>
        __asm volatile
 80086b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b6:	f383 8811 	msr	BASEPRI, r3
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	607b      	str	r3, [r7, #4]
    }
 80086c4:	bf00      	nop
 80086c6:	bf00      	nop
 80086c8:	e7fd      	b.n	80086c6 <vTaskSwitchContext+0x5a>
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	4613      	mov	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4413      	add	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	4a11      	ldr	r2, [pc, #68]	@ (800871c <vTaskSwitchContext+0xb0>)
 80086d6:	4413      	add	r3, r2
 80086d8:	613b      	str	r3, [r7, #16]
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	605a      	str	r2, [r3, #4]
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	3308      	adds	r3, #8
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d104      	bne.n	80086fa <vTaskSwitchContext+0x8e>
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	605a      	str	r2, [r3, #4]
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	4a07      	ldr	r2, [pc, #28]	@ (8008720 <vTaskSwitchContext+0xb4>)
 8008702:	6013      	str	r3, [r2, #0]
}
 8008704:	bf00      	nop
 8008706:	371c      	adds	r7, #28
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr
 8008710:	200006cc 	.word	0x200006cc
 8008714:	200006c0 	.word	0x200006c0
 8008718:	200006b8 	.word	0x200006b8
 800871c:	20000648 	.word	0x20000648
 8008720:	20000644 	.word	0x20000644

08008724 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008724:	b480      	push	{r7}
 8008726:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008728:	4b0a      	ldr	r3, [pc, #40]	@ (8008754 <prvResetNextTaskUnblockTime+0x30>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d104      	bne.n	800873c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8008732:	4b09      	ldr	r3, [pc, #36]	@ (8008758 <prvResetNextTaskUnblockTime+0x34>)
 8008734:	f04f 32ff 	mov.w	r2, #4294967295
 8008738:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800873a:	e005      	b.n	8008748 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800873c:	4b05      	ldr	r3, [pc, #20]	@ (8008754 <prvResetNextTaskUnblockTime+0x30>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a04      	ldr	r2, [pc, #16]	@ (8008758 <prvResetNextTaskUnblockTime+0x34>)
 8008746:	6013      	str	r3, [r2, #0]
}
 8008748:	bf00      	nop
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	200006ac 	.word	0x200006ac
 8008758:	200006c8 	.word	0x200006c8
 800875c:	00000000 	.word	0x00000000

08008760 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008760:	4b07      	ldr	r3, [pc, #28]	@ (8008780 <pxCurrentTCBConst2>)
 8008762:	6819      	ldr	r1, [r3, #0]
 8008764:	6808      	ldr	r0, [r1, #0]
 8008766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876a:	f380 8809 	msr	PSP, r0
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f04f 0000 	mov.w	r0, #0
 8008776:	f380 8811 	msr	BASEPRI, r0
 800877a:	4770      	bx	lr
 800877c:	f3af 8000 	nop.w

08008780 <pxCurrentTCBConst2>:
 8008780:	20000644 	.word	0x20000644
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008784:	bf00      	nop
 8008786:	bf00      	nop
	...

08008790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008790:	f3ef 8009 	mrs	r0, PSP
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	4b15      	ldr	r3, [pc, #84]	@ (80087f0 <pxCurrentTCBConst>)
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	f01e 0f10 	tst.w	lr, #16
 80087a0:	bf08      	it	eq
 80087a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087aa:	6010      	str	r0, [r2, #0]
 80087ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80087b4:	f380 8811 	msr	BASEPRI, r0
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f7ff ff54 	bl	800866c <vTaskSwitchContext>
 80087c4:	f04f 0000 	mov.w	r0, #0
 80087c8:	f380 8811 	msr	BASEPRI, r0
 80087cc:	bc09      	pop	{r0, r3}
 80087ce:	6819      	ldr	r1, [r3, #0]
 80087d0:	6808      	ldr	r0, [r1, #0]
 80087d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d6:	f01e 0f10 	tst.w	lr, #16
 80087da:	bf08      	it	eq
 80087dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087e0:	f380 8809 	msr	PSP, r0
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	f3af 8000 	nop.w

080087f0 <pxCurrentTCBConst>:
 80087f0:	20000644 	.word	0x20000644
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop

080087f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
        __asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	607b      	str	r3, [r7, #4]
    }
 8008810:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008812:	f7ff fe13 	bl	800843c <xTaskIncrementTick>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d003      	beq.n	8008824 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800881c:	4b06      	ldr	r3, [pc, #24]	@ (8008838 <SysTick_Handler+0x40>)
 800881e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	2300      	movs	r3, #0
 8008826:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800882e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8008830:	bf00      	nop
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	e000ed04 	.word	0xe000ed04

0800883c <__cvt>:
 800883c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008840:	ec57 6b10 	vmov	r6, r7, d0
 8008844:	2f00      	cmp	r7, #0
 8008846:	460c      	mov	r4, r1
 8008848:	4619      	mov	r1, r3
 800884a:	463b      	mov	r3, r7
 800884c:	bfbb      	ittet	lt
 800884e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008852:	461f      	movlt	r7, r3
 8008854:	2300      	movge	r3, #0
 8008856:	232d      	movlt	r3, #45	@ 0x2d
 8008858:	700b      	strb	r3, [r1, #0]
 800885a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800885c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008860:	4691      	mov	r9, r2
 8008862:	f023 0820 	bic.w	r8, r3, #32
 8008866:	bfbc      	itt	lt
 8008868:	4632      	movlt	r2, r6
 800886a:	4616      	movlt	r6, r2
 800886c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008870:	d005      	beq.n	800887e <__cvt+0x42>
 8008872:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008876:	d100      	bne.n	800887a <__cvt+0x3e>
 8008878:	3401      	adds	r4, #1
 800887a:	2102      	movs	r1, #2
 800887c:	e000      	b.n	8008880 <__cvt+0x44>
 800887e:	2103      	movs	r1, #3
 8008880:	ab03      	add	r3, sp, #12
 8008882:	9301      	str	r3, [sp, #4]
 8008884:	ab02      	add	r3, sp, #8
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	ec47 6b10 	vmov	d0, r6, r7
 800888c:	4653      	mov	r3, sl
 800888e:	4622      	mov	r2, r4
 8008890:	f001 f8be 	bl	8009a10 <_dtoa_r>
 8008894:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008898:	4605      	mov	r5, r0
 800889a:	d119      	bne.n	80088d0 <__cvt+0x94>
 800889c:	f019 0f01 	tst.w	r9, #1
 80088a0:	d00e      	beq.n	80088c0 <__cvt+0x84>
 80088a2:	eb00 0904 	add.w	r9, r0, r4
 80088a6:	2200      	movs	r2, #0
 80088a8:	2300      	movs	r3, #0
 80088aa:	4630      	mov	r0, r6
 80088ac:	4639      	mov	r1, r7
 80088ae:	f7f8 f933 	bl	8000b18 <__aeabi_dcmpeq>
 80088b2:	b108      	cbz	r0, 80088b8 <__cvt+0x7c>
 80088b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80088b8:	2230      	movs	r2, #48	@ 0x30
 80088ba:	9b03      	ldr	r3, [sp, #12]
 80088bc:	454b      	cmp	r3, r9
 80088be:	d31e      	bcc.n	80088fe <__cvt+0xc2>
 80088c0:	9b03      	ldr	r3, [sp, #12]
 80088c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088c4:	1b5b      	subs	r3, r3, r5
 80088c6:	4628      	mov	r0, r5
 80088c8:	6013      	str	r3, [r2, #0]
 80088ca:	b004      	add	sp, #16
 80088cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80088d4:	eb00 0904 	add.w	r9, r0, r4
 80088d8:	d1e5      	bne.n	80088a6 <__cvt+0x6a>
 80088da:	7803      	ldrb	r3, [r0, #0]
 80088dc:	2b30      	cmp	r3, #48	@ 0x30
 80088de:	d10a      	bne.n	80088f6 <__cvt+0xba>
 80088e0:	2200      	movs	r2, #0
 80088e2:	2300      	movs	r3, #0
 80088e4:	4630      	mov	r0, r6
 80088e6:	4639      	mov	r1, r7
 80088e8:	f7f8 f916 	bl	8000b18 <__aeabi_dcmpeq>
 80088ec:	b918      	cbnz	r0, 80088f6 <__cvt+0xba>
 80088ee:	f1c4 0401 	rsb	r4, r4, #1
 80088f2:	f8ca 4000 	str.w	r4, [sl]
 80088f6:	f8da 3000 	ldr.w	r3, [sl]
 80088fa:	4499      	add	r9, r3
 80088fc:	e7d3      	b.n	80088a6 <__cvt+0x6a>
 80088fe:	1c59      	adds	r1, r3, #1
 8008900:	9103      	str	r1, [sp, #12]
 8008902:	701a      	strb	r2, [r3, #0]
 8008904:	e7d9      	b.n	80088ba <__cvt+0x7e>

08008906 <__exponent>:
 8008906:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008908:	2900      	cmp	r1, #0
 800890a:	bfba      	itte	lt
 800890c:	4249      	neglt	r1, r1
 800890e:	232d      	movlt	r3, #45	@ 0x2d
 8008910:	232b      	movge	r3, #43	@ 0x2b
 8008912:	2909      	cmp	r1, #9
 8008914:	7002      	strb	r2, [r0, #0]
 8008916:	7043      	strb	r3, [r0, #1]
 8008918:	dd29      	ble.n	800896e <__exponent+0x68>
 800891a:	f10d 0307 	add.w	r3, sp, #7
 800891e:	461d      	mov	r5, r3
 8008920:	270a      	movs	r7, #10
 8008922:	461a      	mov	r2, r3
 8008924:	fbb1 f6f7 	udiv	r6, r1, r7
 8008928:	fb07 1416 	mls	r4, r7, r6, r1
 800892c:	3430      	adds	r4, #48	@ 0x30
 800892e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008932:	460c      	mov	r4, r1
 8008934:	2c63      	cmp	r4, #99	@ 0x63
 8008936:	f103 33ff 	add.w	r3, r3, #4294967295
 800893a:	4631      	mov	r1, r6
 800893c:	dcf1      	bgt.n	8008922 <__exponent+0x1c>
 800893e:	3130      	adds	r1, #48	@ 0x30
 8008940:	1e94      	subs	r4, r2, #2
 8008942:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008946:	1c41      	adds	r1, r0, #1
 8008948:	4623      	mov	r3, r4
 800894a:	42ab      	cmp	r3, r5
 800894c:	d30a      	bcc.n	8008964 <__exponent+0x5e>
 800894e:	f10d 0309 	add.w	r3, sp, #9
 8008952:	1a9b      	subs	r3, r3, r2
 8008954:	42ac      	cmp	r4, r5
 8008956:	bf88      	it	hi
 8008958:	2300      	movhi	r3, #0
 800895a:	3302      	adds	r3, #2
 800895c:	4403      	add	r3, r0
 800895e:	1a18      	subs	r0, r3, r0
 8008960:	b003      	add	sp, #12
 8008962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008964:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008968:	f801 6f01 	strb.w	r6, [r1, #1]!
 800896c:	e7ed      	b.n	800894a <__exponent+0x44>
 800896e:	2330      	movs	r3, #48	@ 0x30
 8008970:	3130      	adds	r1, #48	@ 0x30
 8008972:	7083      	strb	r3, [r0, #2]
 8008974:	70c1      	strb	r1, [r0, #3]
 8008976:	1d03      	adds	r3, r0, #4
 8008978:	e7f1      	b.n	800895e <__exponent+0x58>
	...

0800897c <_printf_float>:
 800897c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008980:	b08d      	sub	sp, #52	@ 0x34
 8008982:	460c      	mov	r4, r1
 8008984:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008988:	4616      	mov	r6, r2
 800898a:	461f      	mov	r7, r3
 800898c:	4605      	mov	r5, r0
 800898e:	f000 ff29 	bl	80097e4 <_localeconv_r>
 8008992:	6803      	ldr	r3, [r0, #0]
 8008994:	9304      	str	r3, [sp, #16]
 8008996:	4618      	mov	r0, r3
 8008998:	f7f7 fc92 	bl	80002c0 <strlen>
 800899c:	2300      	movs	r3, #0
 800899e:	930a      	str	r3, [sp, #40]	@ 0x28
 80089a0:	f8d8 3000 	ldr.w	r3, [r8]
 80089a4:	9005      	str	r0, [sp, #20]
 80089a6:	3307      	adds	r3, #7
 80089a8:	f023 0307 	bic.w	r3, r3, #7
 80089ac:	f103 0208 	add.w	r2, r3, #8
 80089b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80089b4:	f8d4 b000 	ldr.w	fp, [r4]
 80089b8:	f8c8 2000 	str.w	r2, [r8]
 80089bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80089c4:	9307      	str	r3, [sp, #28]
 80089c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80089ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80089ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089d2:	4b9c      	ldr	r3, [pc, #624]	@ (8008c44 <_printf_float+0x2c8>)
 80089d4:	f04f 32ff 	mov.w	r2, #4294967295
 80089d8:	f7f8 f8d0 	bl	8000b7c <__aeabi_dcmpun>
 80089dc:	bb70      	cbnz	r0, 8008a3c <_printf_float+0xc0>
 80089de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089e2:	4b98      	ldr	r3, [pc, #608]	@ (8008c44 <_printf_float+0x2c8>)
 80089e4:	f04f 32ff 	mov.w	r2, #4294967295
 80089e8:	f7f8 f8aa 	bl	8000b40 <__aeabi_dcmple>
 80089ec:	bb30      	cbnz	r0, 8008a3c <_printf_float+0xc0>
 80089ee:	2200      	movs	r2, #0
 80089f0:	2300      	movs	r3, #0
 80089f2:	4640      	mov	r0, r8
 80089f4:	4649      	mov	r1, r9
 80089f6:	f7f8 f899 	bl	8000b2c <__aeabi_dcmplt>
 80089fa:	b110      	cbz	r0, 8008a02 <_printf_float+0x86>
 80089fc:	232d      	movs	r3, #45	@ 0x2d
 80089fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a02:	4a91      	ldr	r2, [pc, #580]	@ (8008c48 <_printf_float+0x2cc>)
 8008a04:	4b91      	ldr	r3, [pc, #580]	@ (8008c4c <_printf_float+0x2d0>)
 8008a06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008a0a:	bf94      	ite	ls
 8008a0c:	4690      	movls	r8, r2
 8008a0e:	4698      	movhi	r8, r3
 8008a10:	2303      	movs	r3, #3
 8008a12:	6123      	str	r3, [r4, #16]
 8008a14:	f02b 0304 	bic.w	r3, fp, #4
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	f04f 0900 	mov.w	r9, #0
 8008a1e:	9700      	str	r7, [sp, #0]
 8008a20:	4633      	mov	r3, r6
 8008a22:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008a24:	4621      	mov	r1, r4
 8008a26:	4628      	mov	r0, r5
 8008a28:	f000 f9d2 	bl	8008dd0 <_printf_common>
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	f040 808d 	bne.w	8008b4c <_printf_float+0x1d0>
 8008a32:	f04f 30ff 	mov.w	r0, #4294967295
 8008a36:	b00d      	add	sp, #52	@ 0x34
 8008a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a3c:	4642      	mov	r2, r8
 8008a3e:	464b      	mov	r3, r9
 8008a40:	4640      	mov	r0, r8
 8008a42:	4649      	mov	r1, r9
 8008a44:	f7f8 f89a 	bl	8000b7c <__aeabi_dcmpun>
 8008a48:	b140      	cbz	r0, 8008a5c <_printf_float+0xe0>
 8008a4a:	464b      	mov	r3, r9
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	bfbc      	itt	lt
 8008a50:	232d      	movlt	r3, #45	@ 0x2d
 8008a52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008a56:	4a7e      	ldr	r2, [pc, #504]	@ (8008c50 <_printf_float+0x2d4>)
 8008a58:	4b7e      	ldr	r3, [pc, #504]	@ (8008c54 <_printf_float+0x2d8>)
 8008a5a:	e7d4      	b.n	8008a06 <_printf_float+0x8a>
 8008a5c:	6863      	ldr	r3, [r4, #4]
 8008a5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008a62:	9206      	str	r2, [sp, #24]
 8008a64:	1c5a      	adds	r2, r3, #1
 8008a66:	d13b      	bne.n	8008ae0 <_printf_float+0x164>
 8008a68:	2306      	movs	r3, #6
 8008a6a:	6063      	str	r3, [r4, #4]
 8008a6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008a70:	2300      	movs	r3, #0
 8008a72:	6022      	str	r2, [r4, #0]
 8008a74:	9303      	str	r3, [sp, #12]
 8008a76:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a78:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008a7c:	ab09      	add	r3, sp, #36	@ 0x24
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	6861      	ldr	r1, [r4, #4]
 8008a82:	ec49 8b10 	vmov	d0, r8, r9
 8008a86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f7ff fed6 	bl	800883c <__cvt>
 8008a90:	9b06      	ldr	r3, [sp, #24]
 8008a92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a94:	2b47      	cmp	r3, #71	@ 0x47
 8008a96:	4680      	mov	r8, r0
 8008a98:	d129      	bne.n	8008aee <_printf_float+0x172>
 8008a9a:	1cc8      	adds	r0, r1, #3
 8008a9c:	db02      	blt.n	8008aa4 <_printf_float+0x128>
 8008a9e:	6863      	ldr	r3, [r4, #4]
 8008aa0:	4299      	cmp	r1, r3
 8008aa2:	dd41      	ble.n	8008b28 <_printf_float+0x1ac>
 8008aa4:	f1aa 0a02 	sub.w	sl, sl, #2
 8008aa8:	fa5f fa8a 	uxtb.w	sl, sl
 8008aac:	3901      	subs	r1, #1
 8008aae:	4652      	mov	r2, sl
 8008ab0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008ab4:	9109      	str	r1, [sp, #36]	@ 0x24
 8008ab6:	f7ff ff26 	bl	8008906 <__exponent>
 8008aba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008abc:	1813      	adds	r3, r2, r0
 8008abe:	2a01      	cmp	r2, #1
 8008ac0:	4681      	mov	r9, r0
 8008ac2:	6123      	str	r3, [r4, #16]
 8008ac4:	dc02      	bgt.n	8008acc <_printf_float+0x150>
 8008ac6:	6822      	ldr	r2, [r4, #0]
 8008ac8:	07d2      	lsls	r2, r2, #31
 8008aca:	d501      	bpl.n	8008ad0 <_printf_float+0x154>
 8008acc:	3301      	adds	r3, #1
 8008ace:	6123      	str	r3, [r4, #16]
 8008ad0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d0a2      	beq.n	8008a1e <_printf_float+0xa2>
 8008ad8:	232d      	movs	r3, #45	@ 0x2d
 8008ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ade:	e79e      	b.n	8008a1e <_printf_float+0xa2>
 8008ae0:	9a06      	ldr	r2, [sp, #24]
 8008ae2:	2a47      	cmp	r2, #71	@ 0x47
 8008ae4:	d1c2      	bne.n	8008a6c <_printf_float+0xf0>
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1c0      	bne.n	8008a6c <_printf_float+0xf0>
 8008aea:	2301      	movs	r3, #1
 8008aec:	e7bd      	b.n	8008a6a <_printf_float+0xee>
 8008aee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008af2:	d9db      	bls.n	8008aac <_printf_float+0x130>
 8008af4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008af8:	d118      	bne.n	8008b2c <_printf_float+0x1b0>
 8008afa:	2900      	cmp	r1, #0
 8008afc:	6863      	ldr	r3, [r4, #4]
 8008afe:	dd0b      	ble.n	8008b18 <_printf_float+0x19c>
 8008b00:	6121      	str	r1, [r4, #16]
 8008b02:	b913      	cbnz	r3, 8008b0a <_printf_float+0x18e>
 8008b04:	6822      	ldr	r2, [r4, #0]
 8008b06:	07d0      	lsls	r0, r2, #31
 8008b08:	d502      	bpl.n	8008b10 <_printf_float+0x194>
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	440b      	add	r3, r1
 8008b0e:	6123      	str	r3, [r4, #16]
 8008b10:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008b12:	f04f 0900 	mov.w	r9, #0
 8008b16:	e7db      	b.n	8008ad0 <_printf_float+0x154>
 8008b18:	b913      	cbnz	r3, 8008b20 <_printf_float+0x1a4>
 8008b1a:	6822      	ldr	r2, [r4, #0]
 8008b1c:	07d2      	lsls	r2, r2, #31
 8008b1e:	d501      	bpl.n	8008b24 <_printf_float+0x1a8>
 8008b20:	3302      	adds	r3, #2
 8008b22:	e7f4      	b.n	8008b0e <_printf_float+0x192>
 8008b24:	2301      	movs	r3, #1
 8008b26:	e7f2      	b.n	8008b0e <_printf_float+0x192>
 8008b28:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b2e:	4299      	cmp	r1, r3
 8008b30:	db05      	blt.n	8008b3e <_printf_float+0x1c2>
 8008b32:	6823      	ldr	r3, [r4, #0]
 8008b34:	6121      	str	r1, [r4, #16]
 8008b36:	07d8      	lsls	r0, r3, #31
 8008b38:	d5ea      	bpl.n	8008b10 <_printf_float+0x194>
 8008b3a:	1c4b      	adds	r3, r1, #1
 8008b3c:	e7e7      	b.n	8008b0e <_printf_float+0x192>
 8008b3e:	2900      	cmp	r1, #0
 8008b40:	bfd4      	ite	le
 8008b42:	f1c1 0202 	rsble	r2, r1, #2
 8008b46:	2201      	movgt	r2, #1
 8008b48:	4413      	add	r3, r2
 8008b4a:	e7e0      	b.n	8008b0e <_printf_float+0x192>
 8008b4c:	6823      	ldr	r3, [r4, #0]
 8008b4e:	055a      	lsls	r2, r3, #21
 8008b50:	d407      	bmi.n	8008b62 <_printf_float+0x1e6>
 8008b52:	6923      	ldr	r3, [r4, #16]
 8008b54:	4642      	mov	r2, r8
 8008b56:	4631      	mov	r1, r6
 8008b58:	4628      	mov	r0, r5
 8008b5a:	47b8      	blx	r7
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	d12b      	bne.n	8008bb8 <_printf_float+0x23c>
 8008b60:	e767      	b.n	8008a32 <_printf_float+0xb6>
 8008b62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008b66:	f240 80dd 	bls.w	8008d24 <_printf_float+0x3a8>
 8008b6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b6e:	2200      	movs	r2, #0
 8008b70:	2300      	movs	r3, #0
 8008b72:	f7f7 ffd1 	bl	8000b18 <__aeabi_dcmpeq>
 8008b76:	2800      	cmp	r0, #0
 8008b78:	d033      	beq.n	8008be2 <_printf_float+0x266>
 8008b7a:	4a37      	ldr	r2, [pc, #220]	@ (8008c58 <_printf_float+0x2dc>)
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	4631      	mov	r1, r6
 8008b80:	4628      	mov	r0, r5
 8008b82:	47b8      	blx	r7
 8008b84:	3001      	adds	r0, #1
 8008b86:	f43f af54 	beq.w	8008a32 <_printf_float+0xb6>
 8008b8a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008b8e:	4543      	cmp	r3, r8
 8008b90:	db02      	blt.n	8008b98 <_printf_float+0x21c>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	07d8      	lsls	r0, r3, #31
 8008b96:	d50f      	bpl.n	8008bb8 <_printf_float+0x23c>
 8008b98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	47b8      	blx	r7
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	f43f af45 	beq.w	8008a32 <_printf_float+0xb6>
 8008ba8:	f04f 0900 	mov.w	r9, #0
 8008bac:	f108 38ff 	add.w	r8, r8, #4294967295
 8008bb0:	f104 0a1a 	add.w	sl, r4, #26
 8008bb4:	45c8      	cmp	r8, r9
 8008bb6:	dc09      	bgt.n	8008bcc <_printf_float+0x250>
 8008bb8:	6823      	ldr	r3, [r4, #0]
 8008bba:	079b      	lsls	r3, r3, #30
 8008bbc:	f100 8103 	bmi.w	8008dc6 <_printf_float+0x44a>
 8008bc0:	68e0      	ldr	r0, [r4, #12]
 8008bc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bc4:	4298      	cmp	r0, r3
 8008bc6:	bfb8      	it	lt
 8008bc8:	4618      	movlt	r0, r3
 8008bca:	e734      	b.n	8008a36 <_printf_float+0xba>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	4652      	mov	r2, sl
 8008bd0:	4631      	mov	r1, r6
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	47b8      	blx	r7
 8008bd6:	3001      	adds	r0, #1
 8008bd8:	f43f af2b 	beq.w	8008a32 <_printf_float+0xb6>
 8008bdc:	f109 0901 	add.w	r9, r9, #1
 8008be0:	e7e8      	b.n	8008bb4 <_printf_float+0x238>
 8008be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	dc39      	bgt.n	8008c5c <_printf_float+0x2e0>
 8008be8:	4a1b      	ldr	r2, [pc, #108]	@ (8008c58 <_printf_float+0x2dc>)
 8008bea:	2301      	movs	r3, #1
 8008bec:	4631      	mov	r1, r6
 8008bee:	4628      	mov	r0, r5
 8008bf0:	47b8      	blx	r7
 8008bf2:	3001      	adds	r0, #1
 8008bf4:	f43f af1d 	beq.w	8008a32 <_printf_float+0xb6>
 8008bf8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008bfc:	ea59 0303 	orrs.w	r3, r9, r3
 8008c00:	d102      	bne.n	8008c08 <_printf_float+0x28c>
 8008c02:	6823      	ldr	r3, [r4, #0]
 8008c04:	07d9      	lsls	r1, r3, #31
 8008c06:	d5d7      	bpl.n	8008bb8 <_printf_float+0x23c>
 8008c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c0c:	4631      	mov	r1, r6
 8008c0e:	4628      	mov	r0, r5
 8008c10:	47b8      	blx	r7
 8008c12:	3001      	adds	r0, #1
 8008c14:	f43f af0d 	beq.w	8008a32 <_printf_float+0xb6>
 8008c18:	f04f 0a00 	mov.w	sl, #0
 8008c1c:	f104 0b1a 	add.w	fp, r4, #26
 8008c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c22:	425b      	negs	r3, r3
 8008c24:	4553      	cmp	r3, sl
 8008c26:	dc01      	bgt.n	8008c2c <_printf_float+0x2b0>
 8008c28:	464b      	mov	r3, r9
 8008c2a:	e793      	b.n	8008b54 <_printf_float+0x1d8>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	465a      	mov	r2, fp
 8008c30:	4631      	mov	r1, r6
 8008c32:	4628      	mov	r0, r5
 8008c34:	47b8      	blx	r7
 8008c36:	3001      	adds	r0, #1
 8008c38:	f43f aefb 	beq.w	8008a32 <_printf_float+0xb6>
 8008c3c:	f10a 0a01 	add.w	sl, sl, #1
 8008c40:	e7ee      	b.n	8008c20 <_printf_float+0x2a4>
 8008c42:	bf00      	nop
 8008c44:	7fefffff 	.word	0x7fefffff
 8008c48:	0800d8d4 	.word	0x0800d8d4
 8008c4c:	0800d8d8 	.word	0x0800d8d8
 8008c50:	0800d8dc 	.word	0x0800d8dc
 8008c54:	0800d8e0 	.word	0x0800d8e0
 8008c58:	0800dc70 	.word	0x0800dc70
 8008c5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c62:	4553      	cmp	r3, sl
 8008c64:	bfa8      	it	ge
 8008c66:	4653      	movge	r3, sl
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	4699      	mov	r9, r3
 8008c6c:	dc36      	bgt.n	8008cdc <_printf_float+0x360>
 8008c6e:	f04f 0b00 	mov.w	fp, #0
 8008c72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c76:	f104 021a 	add.w	r2, r4, #26
 8008c7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c7c:	9306      	str	r3, [sp, #24]
 8008c7e:	eba3 0309 	sub.w	r3, r3, r9
 8008c82:	455b      	cmp	r3, fp
 8008c84:	dc31      	bgt.n	8008cea <_printf_float+0x36e>
 8008c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c88:	459a      	cmp	sl, r3
 8008c8a:	dc3a      	bgt.n	8008d02 <_printf_float+0x386>
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	07da      	lsls	r2, r3, #31
 8008c90:	d437      	bmi.n	8008d02 <_printf_float+0x386>
 8008c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c94:	ebaa 0903 	sub.w	r9, sl, r3
 8008c98:	9b06      	ldr	r3, [sp, #24]
 8008c9a:	ebaa 0303 	sub.w	r3, sl, r3
 8008c9e:	4599      	cmp	r9, r3
 8008ca0:	bfa8      	it	ge
 8008ca2:	4699      	movge	r9, r3
 8008ca4:	f1b9 0f00 	cmp.w	r9, #0
 8008ca8:	dc33      	bgt.n	8008d12 <_printf_float+0x396>
 8008caa:	f04f 0800 	mov.w	r8, #0
 8008cae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cb2:	f104 0b1a 	add.w	fp, r4, #26
 8008cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cb8:	ebaa 0303 	sub.w	r3, sl, r3
 8008cbc:	eba3 0309 	sub.w	r3, r3, r9
 8008cc0:	4543      	cmp	r3, r8
 8008cc2:	f77f af79 	ble.w	8008bb8 <_printf_float+0x23c>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	465a      	mov	r2, fp
 8008cca:	4631      	mov	r1, r6
 8008ccc:	4628      	mov	r0, r5
 8008cce:	47b8      	blx	r7
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	f43f aeae 	beq.w	8008a32 <_printf_float+0xb6>
 8008cd6:	f108 0801 	add.w	r8, r8, #1
 8008cda:	e7ec      	b.n	8008cb6 <_printf_float+0x33a>
 8008cdc:	4642      	mov	r2, r8
 8008cde:	4631      	mov	r1, r6
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	47b8      	blx	r7
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	d1c2      	bne.n	8008c6e <_printf_float+0x2f2>
 8008ce8:	e6a3      	b.n	8008a32 <_printf_float+0xb6>
 8008cea:	2301      	movs	r3, #1
 8008cec:	4631      	mov	r1, r6
 8008cee:	4628      	mov	r0, r5
 8008cf0:	9206      	str	r2, [sp, #24]
 8008cf2:	47b8      	blx	r7
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	f43f ae9c 	beq.w	8008a32 <_printf_float+0xb6>
 8008cfa:	9a06      	ldr	r2, [sp, #24]
 8008cfc:	f10b 0b01 	add.w	fp, fp, #1
 8008d00:	e7bb      	b.n	8008c7a <_printf_float+0x2fe>
 8008d02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d06:	4631      	mov	r1, r6
 8008d08:	4628      	mov	r0, r5
 8008d0a:	47b8      	blx	r7
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	d1c0      	bne.n	8008c92 <_printf_float+0x316>
 8008d10:	e68f      	b.n	8008a32 <_printf_float+0xb6>
 8008d12:	9a06      	ldr	r2, [sp, #24]
 8008d14:	464b      	mov	r3, r9
 8008d16:	4442      	add	r2, r8
 8008d18:	4631      	mov	r1, r6
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	47b8      	blx	r7
 8008d1e:	3001      	adds	r0, #1
 8008d20:	d1c3      	bne.n	8008caa <_printf_float+0x32e>
 8008d22:	e686      	b.n	8008a32 <_printf_float+0xb6>
 8008d24:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008d28:	f1ba 0f01 	cmp.w	sl, #1
 8008d2c:	dc01      	bgt.n	8008d32 <_printf_float+0x3b6>
 8008d2e:	07db      	lsls	r3, r3, #31
 8008d30:	d536      	bpl.n	8008da0 <_printf_float+0x424>
 8008d32:	2301      	movs	r3, #1
 8008d34:	4642      	mov	r2, r8
 8008d36:	4631      	mov	r1, r6
 8008d38:	4628      	mov	r0, r5
 8008d3a:	47b8      	blx	r7
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	f43f ae78 	beq.w	8008a32 <_printf_float+0xb6>
 8008d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d46:	4631      	mov	r1, r6
 8008d48:	4628      	mov	r0, r5
 8008d4a:	47b8      	blx	r7
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	f43f ae70 	beq.w	8008a32 <_printf_float+0xb6>
 8008d52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008d56:	2200      	movs	r2, #0
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d5e:	f7f7 fedb 	bl	8000b18 <__aeabi_dcmpeq>
 8008d62:	b9c0      	cbnz	r0, 8008d96 <_printf_float+0x41a>
 8008d64:	4653      	mov	r3, sl
 8008d66:	f108 0201 	add.w	r2, r8, #1
 8008d6a:	4631      	mov	r1, r6
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	47b8      	blx	r7
 8008d70:	3001      	adds	r0, #1
 8008d72:	d10c      	bne.n	8008d8e <_printf_float+0x412>
 8008d74:	e65d      	b.n	8008a32 <_printf_float+0xb6>
 8008d76:	2301      	movs	r3, #1
 8008d78:	465a      	mov	r2, fp
 8008d7a:	4631      	mov	r1, r6
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	47b8      	blx	r7
 8008d80:	3001      	adds	r0, #1
 8008d82:	f43f ae56 	beq.w	8008a32 <_printf_float+0xb6>
 8008d86:	f108 0801 	add.w	r8, r8, #1
 8008d8a:	45d0      	cmp	r8, sl
 8008d8c:	dbf3      	blt.n	8008d76 <_printf_float+0x3fa>
 8008d8e:	464b      	mov	r3, r9
 8008d90:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008d94:	e6df      	b.n	8008b56 <_printf_float+0x1da>
 8008d96:	f04f 0800 	mov.w	r8, #0
 8008d9a:	f104 0b1a 	add.w	fp, r4, #26
 8008d9e:	e7f4      	b.n	8008d8a <_printf_float+0x40e>
 8008da0:	2301      	movs	r3, #1
 8008da2:	4642      	mov	r2, r8
 8008da4:	e7e1      	b.n	8008d6a <_printf_float+0x3ee>
 8008da6:	2301      	movs	r3, #1
 8008da8:	464a      	mov	r2, r9
 8008daa:	4631      	mov	r1, r6
 8008dac:	4628      	mov	r0, r5
 8008dae:	47b8      	blx	r7
 8008db0:	3001      	adds	r0, #1
 8008db2:	f43f ae3e 	beq.w	8008a32 <_printf_float+0xb6>
 8008db6:	f108 0801 	add.w	r8, r8, #1
 8008dba:	68e3      	ldr	r3, [r4, #12]
 8008dbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008dbe:	1a5b      	subs	r3, r3, r1
 8008dc0:	4543      	cmp	r3, r8
 8008dc2:	dcf0      	bgt.n	8008da6 <_printf_float+0x42a>
 8008dc4:	e6fc      	b.n	8008bc0 <_printf_float+0x244>
 8008dc6:	f04f 0800 	mov.w	r8, #0
 8008dca:	f104 0919 	add.w	r9, r4, #25
 8008dce:	e7f4      	b.n	8008dba <_printf_float+0x43e>

08008dd0 <_printf_common>:
 8008dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd4:	4616      	mov	r6, r2
 8008dd6:	4698      	mov	r8, r3
 8008dd8:	688a      	ldr	r2, [r1, #8]
 8008dda:	690b      	ldr	r3, [r1, #16]
 8008ddc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008de0:	4293      	cmp	r3, r2
 8008de2:	bfb8      	it	lt
 8008de4:	4613      	movlt	r3, r2
 8008de6:	6033      	str	r3, [r6, #0]
 8008de8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008dec:	4607      	mov	r7, r0
 8008dee:	460c      	mov	r4, r1
 8008df0:	b10a      	cbz	r2, 8008df6 <_printf_common+0x26>
 8008df2:	3301      	adds	r3, #1
 8008df4:	6033      	str	r3, [r6, #0]
 8008df6:	6823      	ldr	r3, [r4, #0]
 8008df8:	0699      	lsls	r1, r3, #26
 8008dfa:	bf42      	ittt	mi
 8008dfc:	6833      	ldrmi	r3, [r6, #0]
 8008dfe:	3302      	addmi	r3, #2
 8008e00:	6033      	strmi	r3, [r6, #0]
 8008e02:	6825      	ldr	r5, [r4, #0]
 8008e04:	f015 0506 	ands.w	r5, r5, #6
 8008e08:	d106      	bne.n	8008e18 <_printf_common+0x48>
 8008e0a:	f104 0a19 	add.w	sl, r4, #25
 8008e0e:	68e3      	ldr	r3, [r4, #12]
 8008e10:	6832      	ldr	r2, [r6, #0]
 8008e12:	1a9b      	subs	r3, r3, r2
 8008e14:	42ab      	cmp	r3, r5
 8008e16:	dc26      	bgt.n	8008e66 <_printf_common+0x96>
 8008e18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e1c:	6822      	ldr	r2, [r4, #0]
 8008e1e:	3b00      	subs	r3, #0
 8008e20:	bf18      	it	ne
 8008e22:	2301      	movne	r3, #1
 8008e24:	0692      	lsls	r2, r2, #26
 8008e26:	d42b      	bmi.n	8008e80 <_printf_common+0xb0>
 8008e28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e2c:	4641      	mov	r1, r8
 8008e2e:	4638      	mov	r0, r7
 8008e30:	47c8      	blx	r9
 8008e32:	3001      	adds	r0, #1
 8008e34:	d01e      	beq.n	8008e74 <_printf_common+0xa4>
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	6922      	ldr	r2, [r4, #16]
 8008e3a:	f003 0306 	and.w	r3, r3, #6
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	bf02      	ittt	eq
 8008e42:	68e5      	ldreq	r5, [r4, #12]
 8008e44:	6833      	ldreq	r3, [r6, #0]
 8008e46:	1aed      	subeq	r5, r5, r3
 8008e48:	68a3      	ldr	r3, [r4, #8]
 8008e4a:	bf0c      	ite	eq
 8008e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e50:	2500      	movne	r5, #0
 8008e52:	4293      	cmp	r3, r2
 8008e54:	bfc4      	itt	gt
 8008e56:	1a9b      	subgt	r3, r3, r2
 8008e58:	18ed      	addgt	r5, r5, r3
 8008e5a:	2600      	movs	r6, #0
 8008e5c:	341a      	adds	r4, #26
 8008e5e:	42b5      	cmp	r5, r6
 8008e60:	d11a      	bne.n	8008e98 <_printf_common+0xc8>
 8008e62:	2000      	movs	r0, #0
 8008e64:	e008      	b.n	8008e78 <_printf_common+0xa8>
 8008e66:	2301      	movs	r3, #1
 8008e68:	4652      	mov	r2, sl
 8008e6a:	4641      	mov	r1, r8
 8008e6c:	4638      	mov	r0, r7
 8008e6e:	47c8      	blx	r9
 8008e70:	3001      	adds	r0, #1
 8008e72:	d103      	bne.n	8008e7c <_printf_common+0xac>
 8008e74:	f04f 30ff 	mov.w	r0, #4294967295
 8008e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e7c:	3501      	adds	r5, #1
 8008e7e:	e7c6      	b.n	8008e0e <_printf_common+0x3e>
 8008e80:	18e1      	adds	r1, r4, r3
 8008e82:	1c5a      	adds	r2, r3, #1
 8008e84:	2030      	movs	r0, #48	@ 0x30
 8008e86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e8a:	4422      	add	r2, r4
 8008e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e94:	3302      	adds	r3, #2
 8008e96:	e7c7      	b.n	8008e28 <_printf_common+0x58>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	4622      	mov	r2, r4
 8008e9c:	4641      	mov	r1, r8
 8008e9e:	4638      	mov	r0, r7
 8008ea0:	47c8      	blx	r9
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	d0e6      	beq.n	8008e74 <_printf_common+0xa4>
 8008ea6:	3601      	adds	r6, #1
 8008ea8:	e7d9      	b.n	8008e5e <_printf_common+0x8e>
	...

08008eac <_printf_i>:
 8008eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb0:	7e0f      	ldrb	r7, [r1, #24]
 8008eb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008eb4:	2f78      	cmp	r7, #120	@ 0x78
 8008eb6:	4691      	mov	r9, r2
 8008eb8:	4680      	mov	r8, r0
 8008eba:	460c      	mov	r4, r1
 8008ebc:	469a      	mov	sl, r3
 8008ebe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ec2:	d807      	bhi.n	8008ed4 <_printf_i+0x28>
 8008ec4:	2f62      	cmp	r7, #98	@ 0x62
 8008ec6:	d80a      	bhi.n	8008ede <_printf_i+0x32>
 8008ec8:	2f00      	cmp	r7, #0
 8008eca:	f000 80d2 	beq.w	8009072 <_printf_i+0x1c6>
 8008ece:	2f58      	cmp	r7, #88	@ 0x58
 8008ed0:	f000 80b9 	beq.w	8009046 <_printf_i+0x19a>
 8008ed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ed8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008edc:	e03a      	b.n	8008f54 <_printf_i+0xa8>
 8008ede:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ee2:	2b15      	cmp	r3, #21
 8008ee4:	d8f6      	bhi.n	8008ed4 <_printf_i+0x28>
 8008ee6:	a101      	add	r1, pc, #4	@ (adr r1, 8008eec <_printf_i+0x40>)
 8008ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008eec:	08008f45 	.word	0x08008f45
 8008ef0:	08008f59 	.word	0x08008f59
 8008ef4:	08008ed5 	.word	0x08008ed5
 8008ef8:	08008ed5 	.word	0x08008ed5
 8008efc:	08008ed5 	.word	0x08008ed5
 8008f00:	08008ed5 	.word	0x08008ed5
 8008f04:	08008f59 	.word	0x08008f59
 8008f08:	08008ed5 	.word	0x08008ed5
 8008f0c:	08008ed5 	.word	0x08008ed5
 8008f10:	08008ed5 	.word	0x08008ed5
 8008f14:	08008ed5 	.word	0x08008ed5
 8008f18:	08009059 	.word	0x08009059
 8008f1c:	08008f83 	.word	0x08008f83
 8008f20:	08009013 	.word	0x08009013
 8008f24:	08008ed5 	.word	0x08008ed5
 8008f28:	08008ed5 	.word	0x08008ed5
 8008f2c:	0800907b 	.word	0x0800907b
 8008f30:	08008ed5 	.word	0x08008ed5
 8008f34:	08008f83 	.word	0x08008f83
 8008f38:	08008ed5 	.word	0x08008ed5
 8008f3c:	08008ed5 	.word	0x08008ed5
 8008f40:	0800901b 	.word	0x0800901b
 8008f44:	6833      	ldr	r3, [r6, #0]
 8008f46:	1d1a      	adds	r2, r3, #4
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6032      	str	r2, [r6, #0]
 8008f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f54:	2301      	movs	r3, #1
 8008f56:	e09d      	b.n	8009094 <_printf_i+0x1e8>
 8008f58:	6833      	ldr	r3, [r6, #0]
 8008f5a:	6820      	ldr	r0, [r4, #0]
 8008f5c:	1d19      	adds	r1, r3, #4
 8008f5e:	6031      	str	r1, [r6, #0]
 8008f60:	0606      	lsls	r6, r0, #24
 8008f62:	d501      	bpl.n	8008f68 <_printf_i+0xbc>
 8008f64:	681d      	ldr	r5, [r3, #0]
 8008f66:	e003      	b.n	8008f70 <_printf_i+0xc4>
 8008f68:	0645      	lsls	r5, r0, #25
 8008f6a:	d5fb      	bpl.n	8008f64 <_printf_i+0xb8>
 8008f6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f70:	2d00      	cmp	r5, #0
 8008f72:	da03      	bge.n	8008f7c <_printf_i+0xd0>
 8008f74:	232d      	movs	r3, #45	@ 0x2d
 8008f76:	426d      	negs	r5, r5
 8008f78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f7c:	4859      	ldr	r0, [pc, #356]	@ (80090e4 <_printf_i+0x238>)
 8008f7e:	230a      	movs	r3, #10
 8008f80:	e011      	b.n	8008fa6 <_printf_i+0xfa>
 8008f82:	6821      	ldr	r1, [r4, #0]
 8008f84:	6833      	ldr	r3, [r6, #0]
 8008f86:	0608      	lsls	r0, r1, #24
 8008f88:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f8c:	d402      	bmi.n	8008f94 <_printf_i+0xe8>
 8008f8e:	0649      	lsls	r1, r1, #25
 8008f90:	bf48      	it	mi
 8008f92:	b2ad      	uxthmi	r5, r5
 8008f94:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f96:	4853      	ldr	r0, [pc, #332]	@ (80090e4 <_printf_i+0x238>)
 8008f98:	6033      	str	r3, [r6, #0]
 8008f9a:	bf14      	ite	ne
 8008f9c:	230a      	movne	r3, #10
 8008f9e:	2308      	moveq	r3, #8
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008fa6:	6866      	ldr	r6, [r4, #4]
 8008fa8:	60a6      	str	r6, [r4, #8]
 8008faa:	2e00      	cmp	r6, #0
 8008fac:	bfa2      	ittt	ge
 8008fae:	6821      	ldrge	r1, [r4, #0]
 8008fb0:	f021 0104 	bicge.w	r1, r1, #4
 8008fb4:	6021      	strge	r1, [r4, #0]
 8008fb6:	b90d      	cbnz	r5, 8008fbc <_printf_i+0x110>
 8008fb8:	2e00      	cmp	r6, #0
 8008fba:	d04b      	beq.n	8009054 <_printf_i+0x1a8>
 8008fbc:	4616      	mov	r6, r2
 8008fbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fc2:	fb03 5711 	mls	r7, r3, r1, r5
 8008fc6:	5dc7      	ldrb	r7, [r0, r7]
 8008fc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fcc:	462f      	mov	r7, r5
 8008fce:	42bb      	cmp	r3, r7
 8008fd0:	460d      	mov	r5, r1
 8008fd2:	d9f4      	bls.n	8008fbe <_printf_i+0x112>
 8008fd4:	2b08      	cmp	r3, #8
 8008fd6:	d10b      	bne.n	8008ff0 <_printf_i+0x144>
 8008fd8:	6823      	ldr	r3, [r4, #0]
 8008fda:	07df      	lsls	r7, r3, #31
 8008fdc:	d508      	bpl.n	8008ff0 <_printf_i+0x144>
 8008fde:	6923      	ldr	r3, [r4, #16]
 8008fe0:	6861      	ldr	r1, [r4, #4]
 8008fe2:	4299      	cmp	r1, r3
 8008fe4:	bfde      	ittt	le
 8008fe6:	2330      	movle	r3, #48	@ 0x30
 8008fe8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008fec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ff0:	1b92      	subs	r2, r2, r6
 8008ff2:	6122      	str	r2, [r4, #16]
 8008ff4:	f8cd a000 	str.w	sl, [sp]
 8008ff8:	464b      	mov	r3, r9
 8008ffa:	aa03      	add	r2, sp, #12
 8008ffc:	4621      	mov	r1, r4
 8008ffe:	4640      	mov	r0, r8
 8009000:	f7ff fee6 	bl	8008dd0 <_printf_common>
 8009004:	3001      	adds	r0, #1
 8009006:	d14a      	bne.n	800909e <_printf_i+0x1f2>
 8009008:	f04f 30ff 	mov.w	r0, #4294967295
 800900c:	b004      	add	sp, #16
 800900e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009012:	6823      	ldr	r3, [r4, #0]
 8009014:	f043 0320 	orr.w	r3, r3, #32
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	4833      	ldr	r0, [pc, #204]	@ (80090e8 <_printf_i+0x23c>)
 800901c:	2778      	movs	r7, #120	@ 0x78
 800901e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	6831      	ldr	r1, [r6, #0]
 8009026:	061f      	lsls	r7, r3, #24
 8009028:	f851 5b04 	ldr.w	r5, [r1], #4
 800902c:	d402      	bmi.n	8009034 <_printf_i+0x188>
 800902e:	065f      	lsls	r7, r3, #25
 8009030:	bf48      	it	mi
 8009032:	b2ad      	uxthmi	r5, r5
 8009034:	6031      	str	r1, [r6, #0]
 8009036:	07d9      	lsls	r1, r3, #31
 8009038:	bf44      	itt	mi
 800903a:	f043 0320 	orrmi.w	r3, r3, #32
 800903e:	6023      	strmi	r3, [r4, #0]
 8009040:	b11d      	cbz	r5, 800904a <_printf_i+0x19e>
 8009042:	2310      	movs	r3, #16
 8009044:	e7ac      	b.n	8008fa0 <_printf_i+0xf4>
 8009046:	4827      	ldr	r0, [pc, #156]	@ (80090e4 <_printf_i+0x238>)
 8009048:	e7e9      	b.n	800901e <_printf_i+0x172>
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	f023 0320 	bic.w	r3, r3, #32
 8009050:	6023      	str	r3, [r4, #0]
 8009052:	e7f6      	b.n	8009042 <_printf_i+0x196>
 8009054:	4616      	mov	r6, r2
 8009056:	e7bd      	b.n	8008fd4 <_printf_i+0x128>
 8009058:	6833      	ldr	r3, [r6, #0]
 800905a:	6825      	ldr	r5, [r4, #0]
 800905c:	6961      	ldr	r1, [r4, #20]
 800905e:	1d18      	adds	r0, r3, #4
 8009060:	6030      	str	r0, [r6, #0]
 8009062:	062e      	lsls	r6, r5, #24
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	d501      	bpl.n	800906c <_printf_i+0x1c0>
 8009068:	6019      	str	r1, [r3, #0]
 800906a:	e002      	b.n	8009072 <_printf_i+0x1c6>
 800906c:	0668      	lsls	r0, r5, #25
 800906e:	d5fb      	bpl.n	8009068 <_printf_i+0x1bc>
 8009070:	8019      	strh	r1, [r3, #0]
 8009072:	2300      	movs	r3, #0
 8009074:	6123      	str	r3, [r4, #16]
 8009076:	4616      	mov	r6, r2
 8009078:	e7bc      	b.n	8008ff4 <_printf_i+0x148>
 800907a:	6833      	ldr	r3, [r6, #0]
 800907c:	1d1a      	adds	r2, r3, #4
 800907e:	6032      	str	r2, [r6, #0]
 8009080:	681e      	ldr	r6, [r3, #0]
 8009082:	6862      	ldr	r2, [r4, #4]
 8009084:	2100      	movs	r1, #0
 8009086:	4630      	mov	r0, r6
 8009088:	f7f7 f8ca 	bl	8000220 <memchr>
 800908c:	b108      	cbz	r0, 8009092 <_printf_i+0x1e6>
 800908e:	1b80      	subs	r0, r0, r6
 8009090:	6060      	str	r0, [r4, #4]
 8009092:	6863      	ldr	r3, [r4, #4]
 8009094:	6123      	str	r3, [r4, #16]
 8009096:	2300      	movs	r3, #0
 8009098:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800909c:	e7aa      	b.n	8008ff4 <_printf_i+0x148>
 800909e:	6923      	ldr	r3, [r4, #16]
 80090a0:	4632      	mov	r2, r6
 80090a2:	4649      	mov	r1, r9
 80090a4:	4640      	mov	r0, r8
 80090a6:	47d0      	blx	sl
 80090a8:	3001      	adds	r0, #1
 80090aa:	d0ad      	beq.n	8009008 <_printf_i+0x15c>
 80090ac:	6823      	ldr	r3, [r4, #0]
 80090ae:	079b      	lsls	r3, r3, #30
 80090b0:	d413      	bmi.n	80090da <_printf_i+0x22e>
 80090b2:	68e0      	ldr	r0, [r4, #12]
 80090b4:	9b03      	ldr	r3, [sp, #12]
 80090b6:	4298      	cmp	r0, r3
 80090b8:	bfb8      	it	lt
 80090ba:	4618      	movlt	r0, r3
 80090bc:	e7a6      	b.n	800900c <_printf_i+0x160>
 80090be:	2301      	movs	r3, #1
 80090c0:	4632      	mov	r2, r6
 80090c2:	4649      	mov	r1, r9
 80090c4:	4640      	mov	r0, r8
 80090c6:	47d0      	blx	sl
 80090c8:	3001      	adds	r0, #1
 80090ca:	d09d      	beq.n	8009008 <_printf_i+0x15c>
 80090cc:	3501      	adds	r5, #1
 80090ce:	68e3      	ldr	r3, [r4, #12]
 80090d0:	9903      	ldr	r1, [sp, #12]
 80090d2:	1a5b      	subs	r3, r3, r1
 80090d4:	42ab      	cmp	r3, r5
 80090d6:	dcf2      	bgt.n	80090be <_printf_i+0x212>
 80090d8:	e7eb      	b.n	80090b2 <_printf_i+0x206>
 80090da:	2500      	movs	r5, #0
 80090dc:	f104 0619 	add.w	r6, r4, #25
 80090e0:	e7f5      	b.n	80090ce <_printf_i+0x222>
 80090e2:	bf00      	nop
 80090e4:	0800d8e4 	.word	0x0800d8e4
 80090e8:	0800d8f5 	.word	0x0800d8f5

080090ec <_scanf_float>:
 80090ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f0:	b087      	sub	sp, #28
 80090f2:	4617      	mov	r7, r2
 80090f4:	9303      	str	r3, [sp, #12]
 80090f6:	688b      	ldr	r3, [r1, #8]
 80090f8:	1e5a      	subs	r2, r3, #1
 80090fa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80090fe:	bf81      	itttt	hi
 8009100:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009104:	eb03 0b05 	addhi.w	fp, r3, r5
 8009108:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800910c:	608b      	strhi	r3, [r1, #8]
 800910e:	680b      	ldr	r3, [r1, #0]
 8009110:	460a      	mov	r2, r1
 8009112:	f04f 0500 	mov.w	r5, #0
 8009116:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800911a:	f842 3b1c 	str.w	r3, [r2], #28
 800911e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009122:	4680      	mov	r8, r0
 8009124:	460c      	mov	r4, r1
 8009126:	bf98      	it	ls
 8009128:	f04f 0b00 	movls.w	fp, #0
 800912c:	9201      	str	r2, [sp, #4]
 800912e:	4616      	mov	r6, r2
 8009130:	46aa      	mov	sl, r5
 8009132:	46a9      	mov	r9, r5
 8009134:	9502      	str	r5, [sp, #8]
 8009136:	68a2      	ldr	r2, [r4, #8]
 8009138:	b152      	cbz	r2, 8009150 <_scanf_float+0x64>
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	2b4e      	cmp	r3, #78	@ 0x4e
 8009140:	d864      	bhi.n	800920c <_scanf_float+0x120>
 8009142:	2b40      	cmp	r3, #64	@ 0x40
 8009144:	d83c      	bhi.n	80091c0 <_scanf_float+0xd4>
 8009146:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800914a:	b2c8      	uxtb	r0, r1
 800914c:	280e      	cmp	r0, #14
 800914e:	d93a      	bls.n	80091c6 <_scanf_float+0xda>
 8009150:	f1b9 0f00 	cmp.w	r9, #0
 8009154:	d003      	beq.n	800915e <_scanf_float+0x72>
 8009156:	6823      	ldr	r3, [r4, #0]
 8009158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800915c:	6023      	str	r3, [r4, #0]
 800915e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009162:	f1ba 0f01 	cmp.w	sl, #1
 8009166:	f200 8117 	bhi.w	8009398 <_scanf_float+0x2ac>
 800916a:	9b01      	ldr	r3, [sp, #4]
 800916c:	429e      	cmp	r6, r3
 800916e:	f200 8108 	bhi.w	8009382 <_scanf_float+0x296>
 8009172:	2001      	movs	r0, #1
 8009174:	b007      	add	sp, #28
 8009176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800917a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800917e:	2a0d      	cmp	r2, #13
 8009180:	d8e6      	bhi.n	8009150 <_scanf_float+0x64>
 8009182:	a101      	add	r1, pc, #4	@ (adr r1, 8009188 <_scanf_float+0x9c>)
 8009184:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009188:	080092cf 	.word	0x080092cf
 800918c:	08009151 	.word	0x08009151
 8009190:	08009151 	.word	0x08009151
 8009194:	08009151 	.word	0x08009151
 8009198:	0800932f 	.word	0x0800932f
 800919c:	08009307 	.word	0x08009307
 80091a0:	08009151 	.word	0x08009151
 80091a4:	08009151 	.word	0x08009151
 80091a8:	080092dd 	.word	0x080092dd
 80091ac:	08009151 	.word	0x08009151
 80091b0:	08009151 	.word	0x08009151
 80091b4:	08009151 	.word	0x08009151
 80091b8:	08009151 	.word	0x08009151
 80091bc:	08009295 	.word	0x08009295
 80091c0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80091c4:	e7db      	b.n	800917e <_scanf_float+0x92>
 80091c6:	290e      	cmp	r1, #14
 80091c8:	d8c2      	bhi.n	8009150 <_scanf_float+0x64>
 80091ca:	a001      	add	r0, pc, #4	@ (adr r0, 80091d0 <_scanf_float+0xe4>)
 80091cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80091d0:	08009285 	.word	0x08009285
 80091d4:	08009151 	.word	0x08009151
 80091d8:	08009285 	.word	0x08009285
 80091dc:	0800931b 	.word	0x0800931b
 80091e0:	08009151 	.word	0x08009151
 80091e4:	0800922d 	.word	0x0800922d
 80091e8:	0800926b 	.word	0x0800926b
 80091ec:	0800926b 	.word	0x0800926b
 80091f0:	0800926b 	.word	0x0800926b
 80091f4:	0800926b 	.word	0x0800926b
 80091f8:	0800926b 	.word	0x0800926b
 80091fc:	0800926b 	.word	0x0800926b
 8009200:	0800926b 	.word	0x0800926b
 8009204:	0800926b 	.word	0x0800926b
 8009208:	0800926b 	.word	0x0800926b
 800920c:	2b6e      	cmp	r3, #110	@ 0x6e
 800920e:	d809      	bhi.n	8009224 <_scanf_float+0x138>
 8009210:	2b60      	cmp	r3, #96	@ 0x60
 8009212:	d8b2      	bhi.n	800917a <_scanf_float+0x8e>
 8009214:	2b54      	cmp	r3, #84	@ 0x54
 8009216:	d07b      	beq.n	8009310 <_scanf_float+0x224>
 8009218:	2b59      	cmp	r3, #89	@ 0x59
 800921a:	d199      	bne.n	8009150 <_scanf_float+0x64>
 800921c:	2d07      	cmp	r5, #7
 800921e:	d197      	bne.n	8009150 <_scanf_float+0x64>
 8009220:	2508      	movs	r5, #8
 8009222:	e02c      	b.n	800927e <_scanf_float+0x192>
 8009224:	2b74      	cmp	r3, #116	@ 0x74
 8009226:	d073      	beq.n	8009310 <_scanf_float+0x224>
 8009228:	2b79      	cmp	r3, #121	@ 0x79
 800922a:	e7f6      	b.n	800921a <_scanf_float+0x12e>
 800922c:	6821      	ldr	r1, [r4, #0]
 800922e:	05c8      	lsls	r0, r1, #23
 8009230:	d51b      	bpl.n	800926a <_scanf_float+0x17e>
 8009232:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009236:	6021      	str	r1, [r4, #0]
 8009238:	f109 0901 	add.w	r9, r9, #1
 800923c:	f1bb 0f00 	cmp.w	fp, #0
 8009240:	d003      	beq.n	800924a <_scanf_float+0x15e>
 8009242:	3201      	adds	r2, #1
 8009244:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009248:	60a2      	str	r2, [r4, #8]
 800924a:	68a3      	ldr	r3, [r4, #8]
 800924c:	3b01      	subs	r3, #1
 800924e:	60a3      	str	r3, [r4, #8]
 8009250:	6923      	ldr	r3, [r4, #16]
 8009252:	3301      	adds	r3, #1
 8009254:	6123      	str	r3, [r4, #16]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	3b01      	subs	r3, #1
 800925a:	2b00      	cmp	r3, #0
 800925c:	607b      	str	r3, [r7, #4]
 800925e:	f340 8087 	ble.w	8009370 <_scanf_float+0x284>
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	3301      	adds	r3, #1
 8009266:	603b      	str	r3, [r7, #0]
 8009268:	e765      	b.n	8009136 <_scanf_float+0x4a>
 800926a:	eb1a 0105 	adds.w	r1, sl, r5
 800926e:	f47f af6f 	bne.w	8009150 <_scanf_float+0x64>
 8009272:	6822      	ldr	r2, [r4, #0]
 8009274:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009278:	6022      	str	r2, [r4, #0]
 800927a:	460d      	mov	r5, r1
 800927c:	468a      	mov	sl, r1
 800927e:	f806 3b01 	strb.w	r3, [r6], #1
 8009282:	e7e2      	b.n	800924a <_scanf_float+0x15e>
 8009284:	6822      	ldr	r2, [r4, #0]
 8009286:	0610      	lsls	r0, r2, #24
 8009288:	f57f af62 	bpl.w	8009150 <_scanf_float+0x64>
 800928c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009290:	6022      	str	r2, [r4, #0]
 8009292:	e7f4      	b.n	800927e <_scanf_float+0x192>
 8009294:	f1ba 0f00 	cmp.w	sl, #0
 8009298:	d10e      	bne.n	80092b8 <_scanf_float+0x1cc>
 800929a:	f1b9 0f00 	cmp.w	r9, #0
 800929e:	d10e      	bne.n	80092be <_scanf_float+0x1d2>
 80092a0:	6822      	ldr	r2, [r4, #0]
 80092a2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80092a6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80092aa:	d108      	bne.n	80092be <_scanf_float+0x1d2>
 80092ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80092b0:	6022      	str	r2, [r4, #0]
 80092b2:	f04f 0a01 	mov.w	sl, #1
 80092b6:	e7e2      	b.n	800927e <_scanf_float+0x192>
 80092b8:	f1ba 0f02 	cmp.w	sl, #2
 80092bc:	d055      	beq.n	800936a <_scanf_float+0x27e>
 80092be:	2d01      	cmp	r5, #1
 80092c0:	d002      	beq.n	80092c8 <_scanf_float+0x1dc>
 80092c2:	2d04      	cmp	r5, #4
 80092c4:	f47f af44 	bne.w	8009150 <_scanf_float+0x64>
 80092c8:	3501      	adds	r5, #1
 80092ca:	b2ed      	uxtb	r5, r5
 80092cc:	e7d7      	b.n	800927e <_scanf_float+0x192>
 80092ce:	f1ba 0f01 	cmp.w	sl, #1
 80092d2:	f47f af3d 	bne.w	8009150 <_scanf_float+0x64>
 80092d6:	f04f 0a02 	mov.w	sl, #2
 80092da:	e7d0      	b.n	800927e <_scanf_float+0x192>
 80092dc:	b97d      	cbnz	r5, 80092fe <_scanf_float+0x212>
 80092de:	f1b9 0f00 	cmp.w	r9, #0
 80092e2:	f47f af38 	bne.w	8009156 <_scanf_float+0x6a>
 80092e6:	6822      	ldr	r2, [r4, #0]
 80092e8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80092ec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80092f0:	f040 8108 	bne.w	8009504 <_scanf_float+0x418>
 80092f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80092f8:	6022      	str	r2, [r4, #0]
 80092fa:	2501      	movs	r5, #1
 80092fc:	e7bf      	b.n	800927e <_scanf_float+0x192>
 80092fe:	2d03      	cmp	r5, #3
 8009300:	d0e2      	beq.n	80092c8 <_scanf_float+0x1dc>
 8009302:	2d05      	cmp	r5, #5
 8009304:	e7de      	b.n	80092c4 <_scanf_float+0x1d8>
 8009306:	2d02      	cmp	r5, #2
 8009308:	f47f af22 	bne.w	8009150 <_scanf_float+0x64>
 800930c:	2503      	movs	r5, #3
 800930e:	e7b6      	b.n	800927e <_scanf_float+0x192>
 8009310:	2d06      	cmp	r5, #6
 8009312:	f47f af1d 	bne.w	8009150 <_scanf_float+0x64>
 8009316:	2507      	movs	r5, #7
 8009318:	e7b1      	b.n	800927e <_scanf_float+0x192>
 800931a:	6822      	ldr	r2, [r4, #0]
 800931c:	0591      	lsls	r1, r2, #22
 800931e:	f57f af17 	bpl.w	8009150 <_scanf_float+0x64>
 8009322:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009326:	6022      	str	r2, [r4, #0]
 8009328:	f8cd 9008 	str.w	r9, [sp, #8]
 800932c:	e7a7      	b.n	800927e <_scanf_float+0x192>
 800932e:	6822      	ldr	r2, [r4, #0]
 8009330:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009334:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009338:	d006      	beq.n	8009348 <_scanf_float+0x25c>
 800933a:	0550      	lsls	r0, r2, #21
 800933c:	f57f af08 	bpl.w	8009150 <_scanf_float+0x64>
 8009340:	f1b9 0f00 	cmp.w	r9, #0
 8009344:	f000 80de 	beq.w	8009504 <_scanf_float+0x418>
 8009348:	0591      	lsls	r1, r2, #22
 800934a:	bf58      	it	pl
 800934c:	9902      	ldrpl	r1, [sp, #8]
 800934e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009352:	bf58      	it	pl
 8009354:	eba9 0101 	subpl.w	r1, r9, r1
 8009358:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800935c:	bf58      	it	pl
 800935e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009362:	6022      	str	r2, [r4, #0]
 8009364:	f04f 0900 	mov.w	r9, #0
 8009368:	e789      	b.n	800927e <_scanf_float+0x192>
 800936a:	f04f 0a03 	mov.w	sl, #3
 800936e:	e786      	b.n	800927e <_scanf_float+0x192>
 8009370:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009374:	4639      	mov	r1, r7
 8009376:	4640      	mov	r0, r8
 8009378:	4798      	blx	r3
 800937a:	2800      	cmp	r0, #0
 800937c:	f43f aedb 	beq.w	8009136 <_scanf_float+0x4a>
 8009380:	e6e6      	b.n	8009150 <_scanf_float+0x64>
 8009382:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009386:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800938a:	463a      	mov	r2, r7
 800938c:	4640      	mov	r0, r8
 800938e:	4798      	blx	r3
 8009390:	6923      	ldr	r3, [r4, #16]
 8009392:	3b01      	subs	r3, #1
 8009394:	6123      	str	r3, [r4, #16]
 8009396:	e6e8      	b.n	800916a <_scanf_float+0x7e>
 8009398:	1e6b      	subs	r3, r5, #1
 800939a:	2b06      	cmp	r3, #6
 800939c:	d824      	bhi.n	80093e8 <_scanf_float+0x2fc>
 800939e:	2d02      	cmp	r5, #2
 80093a0:	d836      	bhi.n	8009410 <_scanf_float+0x324>
 80093a2:	9b01      	ldr	r3, [sp, #4]
 80093a4:	429e      	cmp	r6, r3
 80093a6:	f67f aee4 	bls.w	8009172 <_scanf_float+0x86>
 80093aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093b2:	463a      	mov	r2, r7
 80093b4:	4640      	mov	r0, r8
 80093b6:	4798      	blx	r3
 80093b8:	6923      	ldr	r3, [r4, #16]
 80093ba:	3b01      	subs	r3, #1
 80093bc:	6123      	str	r3, [r4, #16]
 80093be:	e7f0      	b.n	80093a2 <_scanf_float+0x2b6>
 80093c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093c4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80093c8:	463a      	mov	r2, r7
 80093ca:	4640      	mov	r0, r8
 80093cc:	4798      	blx	r3
 80093ce:	6923      	ldr	r3, [r4, #16]
 80093d0:	3b01      	subs	r3, #1
 80093d2:	6123      	str	r3, [r4, #16]
 80093d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093d8:	fa5f fa8a 	uxtb.w	sl, sl
 80093dc:	f1ba 0f02 	cmp.w	sl, #2
 80093e0:	d1ee      	bne.n	80093c0 <_scanf_float+0x2d4>
 80093e2:	3d03      	subs	r5, #3
 80093e4:	b2ed      	uxtb	r5, r5
 80093e6:	1b76      	subs	r6, r6, r5
 80093e8:	6823      	ldr	r3, [r4, #0]
 80093ea:	05da      	lsls	r2, r3, #23
 80093ec:	d530      	bpl.n	8009450 <_scanf_float+0x364>
 80093ee:	055b      	lsls	r3, r3, #21
 80093f0:	d511      	bpl.n	8009416 <_scanf_float+0x32a>
 80093f2:	9b01      	ldr	r3, [sp, #4]
 80093f4:	429e      	cmp	r6, r3
 80093f6:	f67f aebc 	bls.w	8009172 <_scanf_float+0x86>
 80093fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009402:	463a      	mov	r2, r7
 8009404:	4640      	mov	r0, r8
 8009406:	4798      	blx	r3
 8009408:	6923      	ldr	r3, [r4, #16]
 800940a:	3b01      	subs	r3, #1
 800940c:	6123      	str	r3, [r4, #16]
 800940e:	e7f0      	b.n	80093f2 <_scanf_float+0x306>
 8009410:	46aa      	mov	sl, r5
 8009412:	46b3      	mov	fp, r6
 8009414:	e7de      	b.n	80093d4 <_scanf_float+0x2e8>
 8009416:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800941a:	6923      	ldr	r3, [r4, #16]
 800941c:	2965      	cmp	r1, #101	@ 0x65
 800941e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009422:	f106 35ff 	add.w	r5, r6, #4294967295
 8009426:	6123      	str	r3, [r4, #16]
 8009428:	d00c      	beq.n	8009444 <_scanf_float+0x358>
 800942a:	2945      	cmp	r1, #69	@ 0x45
 800942c:	d00a      	beq.n	8009444 <_scanf_float+0x358>
 800942e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009432:	463a      	mov	r2, r7
 8009434:	4640      	mov	r0, r8
 8009436:	4798      	blx	r3
 8009438:	6923      	ldr	r3, [r4, #16]
 800943a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800943e:	3b01      	subs	r3, #1
 8009440:	1eb5      	subs	r5, r6, #2
 8009442:	6123      	str	r3, [r4, #16]
 8009444:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009448:	463a      	mov	r2, r7
 800944a:	4640      	mov	r0, r8
 800944c:	4798      	blx	r3
 800944e:	462e      	mov	r6, r5
 8009450:	6822      	ldr	r2, [r4, #0]
 8009452:	f012 0210 	ands.w	r2, r2, #16
 8009456:	d001      	beq.n	800945c <_scanf_float+0x370>
 8009458:	2000      	movs	r0, #0
 800945a:	e68b      	b.n	8009174 <_scanf_float+0x88>
 800945c:	7032      	strb	r2, [r6, #0]
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009464:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009468:	d11c      	bne.n	80094a4 <_scanf_float+0x3b8>
 800946a:	9b02      	ldr	r3, [sp, #8]
 800946c:	454b      	cmp	r3, r9
 800946e:	eba3 0209 	sub.w	r2, r3, r9
 8009472:	d123      	bne.n	80094bc <_scanf_float+0x3d0>
 8009474:	9901      	ldr	r1, [sp, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	4640      	mov	r0, r8
 800947a:	f002 fc41 	bl	800bd00 <_strtod_r>
 800947e:	9b03      	ldr	r3, [sp, #12]
 8009480:	6821      	ldr	r1, [r4, #0]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f011 0f02 	tst.w	r1, #2
 8009488:	ec57 6b10 	vmov	r6, r7, d0
 800948c:	f103 0204 	add.w	r2, r3, #4
 8009490:	d01f      	beq.n	80094d2 <_scanf_float+0x3e6>
 8009492:	9903      	ldr	r1, [sp, #12]
 8009494:	600a      	str	r2, [r1, #0]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	e9c3 6700 	strd	r6, r7, [r3]
 800949c:	68e3      	ldr	r3, [r4, #12]
 800949e:	3301      	adds	r3, #1
 80094a0:	60e3      	str	r3, [r4, #12]
 80094a2:	e7d9      	b.n	8009458 <_scanf_float+0x36c>
 80094a4:	9b04      	ldr	r3, [sp, #16]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d0e4      	beq.n	8009474 <_scanf_float+0x388>
 80094aa:	9905      	ldr	r1, [sp, #20]
 80094ac:	230a      	movs	r3, #10
 80094ae:	3101      	adds	r1, #1
 80094b0:	4640      	mov	r0, r8
 80094b2:	f002 fca5 	bl	800be00 <_strtol_r>
 80094b6:	9b04      	ldr	r3, [sp, #16]
 80094b8:	9e05      	ldr	r6, [sp, #20]
 80094ba:	1ac2      	subs	r2, r0, r3
 80094bc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80094c0:	429e      	cmp	r6, r3
 80094c2:	bf28      	it	cs
 80094c4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80094c8:	4910      	ldr	r1, [pc, #64]	@ (800950c <_scanf_float+0x420>)
 80094ca:	4630      	mov	r0, r6
 80094cc:	f000 f8e4 	bl	8009698 <siprintf>
 80094d0:	e7d0      	b.n	8009474 <_scanf_float+0x388>
 80094d2:	f011 0f04 	tst.w	r1, #4
 80094d6:	9903      	ldr	r1, [sp, #12]
 80094d8:	600a      	str	r2, [r1, #0]
 80094da:	d1dc      	bne.n	8009496 <_scanf_float+0x3aa>
 80094dc:	681d      	ldr	r5, [r3, #0]
 80094de:	4632      	mov	r2, r6
 80094e0:	463b      	mov	r3, r7
 80094e2:	4630      	mov	r0, r6
 80094e4:	4639      	mov	r1, r7
 80094e6:	f7f7 fb49 	bl	8000b7c <__aeabi_dcmpun>
 80094ea:	b128      	cbz	r0, 80094f8 <_scanf_float+0x40c>
 80094ec:	4808      	ldr	r0, [pc, #32]	@ (8009510 <_scanf_float+0x424>)
 80094ee:	f000 f9ff 	bl	80098f0 <nanf>
 80094f2:	ed85 0a00 	vstr	s0, [r5]
 80094f6:	e7d1      	b.n	800949c <_scanf_float+0x3b0>
 80094f8:	4630      	mov	r0, r6
 80094fa:	4639      	mov	r1, r7
 80094fc:	f7f7 fb9c 	bl	8000c38 <__aeabi_d2f>
 8009500:	6028      	str	r0, [r5, #0]
 8009502:	e7cb      	b.n	800949c <_scanf_float+0x3b0>
 8009504:	f04f 0900 	mov.w	r9, #0
 8009508:	e629      	b.n	800915e <_scanf_float+0x72>
 800950a:	bf00      	nop
 800950c:	0800d906 	.word	0x0800d906
 8009510:	0800dcb8 	.word	0x0800dcb8

08009514 <std>:
 8009514:	2300      	movs	r3, #0
 8009516:	b510      	push	{r4, lr}
 8009518:	4604      	mov	r4, r0
 800951a:	e9c0 3300 	strd	r3, r3, [r0]
 800951e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009522:	6083      	str	r3, [r0, #8]
 8009524:	8181      	strh	r1, [r0, #12]
 8009526:	6643      	str	r3, [r0, #100]	@ 0x64
 8009528:	81c2      	strh	r2, [r0, #14]
 800952a:	6183      	str	r3, [r0, #24]
 800952c:	4619      	mov	r1, r3
 800952e:	2208      	movs	r2, #8
 8009530:	305c      	adds	r0, #92	@ 0x5c
 8009532:	f000 f940 	bl	80097b6 <memset>
 8009536:	4b0d      	ldr	r3, [pc, #52]	@ (800956c <std+0x58>)
 8009538:	6263      	str	r3, [r4, #36]	@ 0x24
 800953a:	4b0d      	ldr	r3, [pc, #52]	@ (8009570 <std+0x5c>)
 800953c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800953e:	4b0d      	ldr	r3, [pc, #52]	@ (8009574 <std+0x60>)
 8009540:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009542:	4b0d      	ldr	r3, [pc, #52]	@ (8009578 <std+0x64>)
 8009544:	6323      	str	r3, [r4, #48]	@ 0x30
 8009546:	4b0d      	ldr	r3, [pc, #52]	@ (800957c <std+0x68>)
 8009548:	6224      	str	r4, [r4, #32]
 800954a:	429c      	cmp	r4, r3
 800954c:	d006      	beq.n	800955c <std+0x48>
 800954e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009552:	4294      	cmp	r4, r2
 8009554:	d002      	beq.n	800955c <std+0x48>
 8009556:	33d0      	adds	r3, #208	@ 0xd0
 8009558:	429c      	cmp	r4, r3
 800955a:	d105      	bne.n	8009568 <std+0x54>
 800955c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009564:	f000 b9b2 	b.w	80098cc <__retarget_lock_init_recursive>
 8009568:	bd10      	pop	{r4, pc}
 800956a:	bf00      	nop
 800956c:	0800972d 	.word	0x0800972d
 8009570:	08009753 	.word	0x08009753
 8009574:	0800978b 	.word	0x0800978b
 8009578:	080097af 	.word	0x080097af
 800957c:	200006d0 	.word	0x200006d0

08009580 <stdio_exit_handler>:
 8009580:	4a02      	ldr	r2, [pc, #8]	@ (800958c <stdio_exit_handler+0xc>)
 8009582:	4903      	ldr	r1, [pc, #12]	@ (8009590 <stdio_exit_handler+0x10>)
 8009584:	4803      	ldr	r0, [pc, #12]	@ (8009594 <stdio_exit_handler+0x14>)
 8009586:	f000 b869 	b.w	800965c <_fwalk_sglue>
 800958a:	bf00      	nop
 800958c:	20000008 	.word	0x20000008
 8009590:	0800c7f1 	.word	0x0800c7f1
 8009594:	20000018 	.word	0x20000018

08009598 <cleanup_stdio>:
 8009598:	6841      	ldr	r1, [r0, #4]
 800959a:	4b0c      	ldr	r3, [pc, #48]	@ (80095cc <cleanup_stdio+0x34>)
 800959c:	4299      	cmp	r1, r3
 800959e:	b510      	push	{r4, lr}
 80095a0:	4604      	mov	r4, r0
 80095a2:	d001      	beq.n	80095a8 <cleanup_stdio+0x10>
 80095a4:	f003 f924 	bl	800c7f0 <_fflush_r>
 80095a8:	68a1      	ldr	r1, [r4, #8]
 80095aa:	4b09      	ldr	r3, [pc, #36]	@ (80095d0 <cleanup_stdio+0x38>)
 80095ac:	4299      	cmp	r1, r3
 80095ae:	d002      	beq.n	80095b6 <cleanup_stdio+0x1e>
 80095b0:	4620      	mov	r0, r4
 80095b2:	f003 f91d 	bl	800c7f0 <_fflush_r>
 80095b6:	68e1      	ldr	r1, [r4, #12]
 80095b8:	4b06      	ldr	r3, [pc, #24]	@ (80095d4 <cleanup_stdio+0x3c>)
 80095ba:	4299      	cmp	r1, r3
 80095bc:	d004      	beq.n	80095c8 <cleanup_stdio+0x30>
 80095be:	4620      	mov	r0, r4
 80095c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095c4:	f003 b914 	b.w	800c7f0 <_fflush_r>
 80095c8:	bd10      	pop	{r4, pc}
 80095ca:	bf00      	nop
 80095cc:	200006d0 	.word	0x200006d0
 80095d0:	20000738 	.word	0x20000738
 80095d4:	200007a0 	.word	0x200007a0

080095d8 <global_stdio_init.part.0>:
 80095d8:	b510      	push	{r4, lr}
 80095da:	4b0b      	ldr	r3, [pc, #44]	@ (8009608 <global_stdio_init.part.0+0x30>)
 80095dc:	4c0b      	ldr	r4, [pc, #44]	@ (800960c <global_stdio_init.part.0+0x34>)
 80095de:	4a0c      	ldr	r2, [pc, #48]	@ (8009610 <global_stdio_init.part.0+0x38>)
 80095e0:	601a      	str	r2, [r3, #0]
 80095e2:	4620      	mov	r0, r4
 80095e4:	2200      	movs	r2, #0
 80095e6:	2104      	movs	r1, #4
 80095e8:	f7ff ff94 	bl	8009514 <std>
 80095ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80095f0:	2201      	movs	r2, #1
 80095f2:	2109      	movs	r1, #9
 80095f4:	f7ff ff8e 	bl	8009514 <std>
 80095f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80095fc:	2202      	movs	r2, #2
 80095fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009602:	2112      	movs	r1, #18
 8009604:	f7ff bf86 	b.w	8009514 <std>
 8009608:	20000808 	.word	0x20000808
 800960c:	200006d0 	.word	0x200006d0
 8009610:	08009581 	.word	0x08009581

08009614 <__sfp_lock_acquire>:
 8009614:	4801      	ldr	r0, [pc, #4]	@ (800961c <__sfp_lock_acquire+0x8>)
 8009616:	f000 b95a 	b.w	80098ce <__retarget_lock_acquire_recursive>
 800961a:	bf00      	nop
 800961c:	20000811 	.word	0x20000811

08009620 <__sfp_lock_release>:
 8009620:	4801      	ldr	r0, [pc, #4]	@ (8009628 <__sfp_lock_release+0x8>)
 8009622:	f000 b955 	b.w	80098d0 <__retarget_lock_release_recursive>
 8009626:	bf00      	nop
 8009628:	20000811 	.word	0x20000811

0800962c <__sinit>:
 800962c:	b510      	push	{r4, lr}
 800962e:	4604      	mov	r4, r0
 8009630:	f7ff fff0 	bl	8009614 <__sfp_lock_acquire>
 8009634:	6a23      	ldr	r3, [r4, #32]
 8009636:	b11b      	cbz	r3, 8009640 <__sinit+0x14>
 8009638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800963c:	f7ff bff0 	b.w	8009620 <__sfp_lock_release>
 8009640:	4b04      	ldr	r3, [pc, #16]	@ (8009654 <__sinit+0x28>)
 8009642:	6223      	str	r3, [r4, #32]
 8009644:	4b04      	ldr	r3, [pc, #16]	@ (8009658 <__sinit+0x2c>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1f5      	bne.n	8009638 <__sinit+0xc>
 800964c:	f7ff ffc4 	bl	80095d8 <global_stdio_init.part.0>
 8009650:	e7f2      	b.n	8009638 <__sinit+0xc>
 8009652:	bf00      	nop
 8009654:	08009599 	.word	0x08009599
 8009658:	20000808 	.word	0x20000808

0800965c <_fwalk_sglue>:
 800965c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009660:	4607      	mov	r7, r0
 8009662:	4688      	mov	r8, r1
 8009664:	4614      	mov	r4, r2
 8009666:	2600      	movs	r6, #0
 8009668:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800966c:	f1b9 0901 	subs.w	r9, r9, #1
 8009670:	d505      	bpl.n	800967e <_fwalk_sglue+0x22>
 8009672:	6824      	ldr	r4, [r4, #0]
 8009674:	2c00      	cmp	r4, #0
 8009676:	d1f7      	bne.n	8009668 <_fwalk_sglue+0xc>
 8009678:	4630      	mov	r0, r6
 800967a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800967e:	89ab      	ldrh	r3, [r5, #12]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d907      	bls.n	8009694 <_fwalk_sglue+0x38>
 8009684:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009688:	3301      	adds	r3, #1
 800968a:	d003      	beq.n	8009694 <_fwalk_sglue+0x38>
 800968c:	4629      	mov	r1, r5
 800968e:	4638      	mov	r0, r7
 8009690:	47c0      	blx	r8
 8009692:	4306      	orrs	r6, r0
 8009694:	3568      	adds	r5, #104	@ 0x68
 8009696:	e7e9      	b.n	800966c <_fwalk_sglue+0x10>

08009698 <siprintf>:
 8009698:	b40e      	push	{r1, r2, r3}
 800969a:	b500      	push	{lr}
 800969c:	b09c      	sub	sp, #112	@ 0x70
 800969e:	ab1d      	add	r3, sp, #116	@ 0x74
 80096a0:	9002      	str	r0, [sp, #8]
 80096a2:	9006      	str	r0, [sp, #24]
 80096a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80096a8:	4809      	ldr	r0, [pc, #36]	@ (80096d0 <siprintf+0x38>)
 80096aa:	9107      	str	r1, [sp, #28]
 80096ac:	9104      	str	r1, [sp, #16]
 80096ae:	4909      	ldr	r1, [pc, #36]	@ (80096d4 <siprintf+0x3c>)
 80096b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80096b4:	9105      	str	r1, [sp, #20]
 80096b6:	6800      	ldr	r0, [r0, #0]
 80096b8:	9301      	str	r3, [sp, #4]
 80096ba:	a902      	add	r1, sp, #8
 80096bc:	f002 fbfe 	bl	800bebc <_svfiprintf_r>
 80096c0:	9b02      	ldr	r3, [sp, #8]
 80096c2:	2200      	movs	r2, #0
 80096c4:	701a      	strb	r2, [r3, #0]
 80096c6:	b01c      	add	sp, #112	@ 0x70
 80096c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80096cc:	b003      	add	sp, #12
 80096ce:	4770      	bx	lr
 80096d0:	20000014 	.word	0x20000014
 80096d4:	ffff0208 	.word	0xffff0208

080096d8 <siscanf>:
 80096d8:	b40e      	push	{r1, r2, r3}
 80096da:	b530      	push	{r4, r5, lr}
 80096dc:	b09c      	sub	sp, #112	@ 0x70
 80096de:	ac1f      	add	r4, sp, #124	@ 0x7c
 80096e0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80096e4:	f854 5b04 	ldr.w	r5, [r4], #4
 80096e8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80096ec:	9002      	str	r0, [sp, #8]
 80096ee:	9006      	str	r0, [sp, #24]
 80096f0:	f7f6 fde6 	bl	80002c0 <strlen>
 80096f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009724 <siscanf+0x4c>)
 80096f6:	9003      	str	r0, [sp, #12]
 80096f8:	9007      	str	r0, [sp, #28]
 80096fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096fc:	480a      	ldr	r0, [pc, #40]	@ (8009728 <siscanf+0x50>)
 80096fe:	9401      	str	r4, [sp, #4]
 8009700:	2300      	movs	r3, #0
 8009702:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009704:	9314      	str	r3, [sp, #80]	@ 0x50
 8009706:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800970a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800970e:	462a      	mov	r2, r5
 8009710:	4623      	mov	r3, r4
 8009712:	a902      	add	r1, sp, #8
 8009714:	6800      	ldr	r0, [r0, #0]
 8009716:	f002 fd25 	bl	800c164 <__ssvfiscanf_r>
 800971a:	b01c      	add	sp, #112	@ 0x70
 800971c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009720:	b003      	add	sp, #12
 8009722:	4770      	bx	lr
 8009724:	0800974f 	.word	0x0800974f
 8009728:	20000014 	.word	0x20000014

0800972c <__sread>:
 800972c:	b510      	push	{r4, lr}
 800972e:	460c      	mov	r4, r1
 8009730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009734:	f000 f87c 	bl	8009830 <_read_r>
 8009738:	2800      	cmp	r0, #0
 800973a:	bfab      	itete	ge
 800973c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800973e:	89a3      	ldrhlt	r3, [r4, #12]
 8009740:	181b      	addge	r3, r3, r0
 8009742:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009746:	bfac      	ite	ge
 8009748:	6563      	strge	r3, [r4, #84]	@ 0x54
 800974a:	81a3      	strhlt	r3, [r4, #12]
 800974c:	bd10      	pop	{r4, pc}

0800974e <__seofread>:
 800974e:	2000      	movs	r0, #0
 8009750:	4770      	bx	lr

08009752 <__swrite>:
 8009752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009756:	461f      	mov	r7, r3
 8009758:	898b      	ldrh	r3, [r1, #12]
 800975a:	05db      	lsls	r3, r3, #23
 800975c:	4605      	mov	r5, r0
 800975e:	460c      	mov	r4, r1
 8009760:	4616      	mov	r6, r2
 8009762:	d505      	bpl.n	8009770 <__swrite+0x1e>
 8009764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009768:	2302      	movs	r3, #2
 800976a:	2200      	movs	r2, #0
 800976c:	f000 f84e 	bl	800980c <_lseek_r>
 8009770:	89a3      	ldrh	r3, [r4, #12]
 8009772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009776:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800977a:	81a3      	strh	r3, [r4, #12]
 800977c:	4632      	mov	r2, r6
 800977e:	463b      	mov	r3, r7
 8009780:	4628      	mov	r0, r5
 8009782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009786:	f000 b865 	b.w	8009854 <_write_r>

0800978a <__sseek>:
 800978a:	b510      	push	{r4, lr}
 800978c:	460c      	mov	r4, r1
 800978e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009792:	f000 f83b 	bl	800980c <_lseek_r>
 8009796:	1c43      	adds	r3, r0, #1
 8009798:	89a3      	ldrh	r3, [r4, #12]
 800979a:	bf15      	itete	ne
 800979c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800979e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80097a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80097a6:	81a3      	strheq	r3, [r4, #12]
 80097a8:	bf18      	it	ne
 80097aa:	81a3      	strhne	r3, [r4, #12]
 80097ac:	bd10      	pop	{r4, pc}

080097ae <__sclose>:
 80097ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097b2:	f000 b81b 	b.w	80097ec <_close_r>

080097b6 <memset>:
 80097b6:	4402      	add	r2, r0
 80097b8:	4603      	mov	r3, r0
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d100      	bne.n	80097c0 <memset+0xa>
 80097be:	4770      	bx	lr
 80097c0:	f803 1b01 	strb.w	r1, [r3], #1
 80097c4:	e7f9      	b.n	80097ba <memset+0x4>

080097c6 <strcat>:
 80097c6:	b510      	push	{r4, lr}
 80097c8:	4602      	mov	r2, r0
 80097ca:	7814      	ldrb	r4, [r2, #0]
 80097cc:	4613      	mov	r3, r2
 80097ce:	3201      	adds	r2, #1
 80097d0:	2c00      	cmp	r4, #0
 80097d2:	d1fa      	bne.n	80097ca <strcat+0x4>
 80097d4:	3b01      	subs	r3, #1
 80097d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097de:	2a00      	cmp	r2, #0
 80097e0:	d1f9      	bne.n	80097d6 <strcat+0x10>
 80097e2:	bd10      	pop	{r4, pc}

080097e4 <_localeconv_r>:
 80097e4:	4800      	ldr	r0, [pc, #0]	@ (80097e8 <_localeconv_r+0x4>)
 80097e6:	4770      	bx	lr
 80097e8:	20000154 	.word	0x20000154

080097ec <_close_r>:
 80097ec:	b538      	push	{r3, r4, r5, lr}
 80097ee:	4d06      	ldr	r5, [pc, #24]	@ (8009808 <_close_r+0x1c>)
 80097f0:	2300      	movs	r3, #0
 80097f2:	4604      	mov	r4, r0
 80097f4:	4608      	mov	r0, r1
 80097f6:	602b      	str	r3, [r5, #0]
 80097f8:	f7f9 faf4 	bl	8002de4 <_close>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	d102      	bne.n	8009806 <_close_r+0x1a>
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	b103      	cbz	r3, 8009806 <_close_r+0x1a>
 8009804:	6023      	str	r3, [r4, #0]
 8009806:	bd38      	pop	{r3, r4, r5, pc}
 8009808:	2000080c 	.word	0x2000080c

0800980c <_lseek_r>:
 800980c:	b538      	push	{r3, r4, r5, lr}
 800980e:	4d07      	ldr	r5, [pc, #28]	@ (800982c <_lseek_r+0x20>)
 8009810:	4604      	mov	r4, r0
 8009812:	4608      	mov	r0, r1
 8009814:	4611      	mov	r1, r2
 8009816:	2200      	movs	r2, #0
 8009818:	602a      	str	r2, [r5, #0]
 800981a:	461a      	mov	r2, r3
 800981c:	f7f9 fb09 	bl	8002e32 <_lseek>
 8009820:	1c43      	adds	r3, r0, #1
 8009822:	d102      	bne.n	800982a <_lseek_r+0x1e>
 8009824:	682b      	ldr	r3, [r5, #0]
 8009826:	b103      	cbz	r3, 800982a <_lseek_r+0x1e>
 8009828:	6023      	str	r3, [r4, #0]
 800982a:	bd38      	pop	{r3, r4, r5, pc}
 800982c:	2000080c 	.word	0x2000080c

08009830 <_read_r>:
 8009830:	b538      	push	{r3, r4, r5, lr}
 8009832:	4d07      	ldr	r5, [pc, #28]	@ (8009850 <_read_r+0x20>)
 8009834:	4604      	mov	r4, r0
 8009836:	4608      	mov	r0, r1
 8009838:	4611      	mov	r1, r2
 800983a:	2200      	movs	r2, #0
 800983c:	602a      	str	r2, [r5, #0]
 800983e:	461a      	mov	r2, r3
 8009840:	f7f9 fa97 	bl	8002d72 <_read>
 8009844:	1c43      	adds	r3, r0, #1
 8009846:	d102      	bne.n	800984e <_read_r+0x1e>
 8009848:	682b      	ldr	r3, [r5, #0]
 800984a:	b103      	cbz	r3, 800984e <_read_r+0x1e>
 800984c:	6023      	str	r3, [r4, #0]
 800984e:	bd38      	pop	{r3, r4, r5, pc}
 8009850:	2000080c 	.word	0x2000080c

08009854 <_write_r>:
 8009854:	b538      	push	{r3, r4, r5, lr}
 8009856:	4d07      	ldr	r5, [pc, #28]	@ (8009874 <_write_r+0x20>)
 8009858:	4604      	mov	r4, r0
 800985a:	4608      	mov	r0, r1
 800985c:	4611      	mov	r1, r2
 800985e:	2200      	movs	r2, #0
 8009860:	602a      	str	r2, [r5, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	f7f9 faa2 	bl	8002dac <_write>
 8009868:	1c43      	adds	r3, r0, #1
 800986a:	d102      	bne.n	8009872 <_write_r+0x1e>
 800986c:	682b      	ldr	r3, [r5, #0]
 800986e:	b103      	cbz	r3, 8009872 <_write_r+0x1e>
 8009870:	6023      	str	r3, [r4, #0]
 8009872:	bd38      	pop	{r3, r4, r5, pc}
 8009874:	2000080c 	.word	0x2000080c

08009878 <__errno>:
 8009878:	4b01      	ldr	r3, [pc, #4]	@ (8009880 <__errno+0x8>)
 800987a:	6818      	ldr	r0, [r3, #0]
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	20000014 	.word	0x20000014

08009884 <__libc_init_array>:
 8009884:	b570      	push	{r4, r5, r6, lr}
 8009886:	4d0d      	ldr	r5, [pc, #52]	@ (80098bc <__libc_init_array+0x38>)
 8009888:	4c0d      	ldr	r4, [pc, #52]	@ (80098c0 <__libc_init_array+0x3c>)
 800988a:	1b64      	subs	r4, r4, r5
 800988c:	10a4      	asrs	r4, r4, #2
 800988e:	2600      	movs	r6, #0
 8009890:	42a6      	cmp	r6, r4
 8009892:	d109      	bne.n	80098a8 <__libc_init_array+0x24>
 8009894:	4d0b      	ldr	r5, [pc, #44]	@ (80098c4 <__libc_init_array+0x40>)
 8009896:	4c0c      	ldr	r4, [pc, #48]	@ (80098c8 <__libc_init_array+0x44>)
 8009898:	f003 ff72 	bl	800d780 <_init>
 800989c:	1b64      	subs	r4, r4, r5
 800989e:	10a4      	asrs	r4, r4, #2
 80098a0:	2600      	movs	r6, #0
 80098a2:	42a6      	cmp	r6, r4
 80098a4:	d105      	bne.n	80098b2 <__libc_init_array+0x2e>
 80098a6:	bd70      	pop	{r4, r5, r6, pc}
 80098a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80098ac:	4798      	blx	r3
 80098ae:	3601      	adds	r6, #1
 80098b0:	e7ee      	b.n	8009890 <__libc_init_array+0xc>
 80098b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80098b6:	4798      	blx	r3
 80098b8:	3601      	adds	r6, #1
 80098ba:	e7f2      	b.n	80098a2 <__libc_init_array+0x1e>
 80098bc:	0800dd24 	.word	0x0800dd24
 80098c0:	0800dd24 	.word	0x0800dd24
 80098c4:	0800dd24 	.word	0x0800dd24
 80098c8:	0800dd28 	.word	0x0800dd28

080098cc <__retarget_lock_init_recursive>:
 80098cc:	4770      	bx	lr

080098ce <__retarget_lock_acquire_recursive>:
 80098ce:	4770      	bx	lr

080098d0 <__retarget_lock_release_recursive>:
 80098d0:	4770      	bx	lr

080098d2 <memcpy>:
 80098d2:	440a      	add	r2, r1
 80098d4:	4291      	cmp	r1, r2
 80098d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80098da:	d100      	bne.n	80098de <memcpy+0xc>
 80098dc:	4770      	bx	lr
 80098de:	b510      	push	{r4, lr}
 80098e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098e8:	4291      	cmp	r1, r2
 80098ea:	d1f9      	bne.n	80098e0 <memcpy+0xe>
 80098ec:	bd10      	pop	{r4, pc}
	...

080098f0 <nanf>:
 80098f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80098f8 <nanf+0x8>
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	7fc00000 	.word	0x7fc00000

080098fc <quorem>:
 80098fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009900:	6903      	ldr	r3, [r0, #16]
 8009902:	690c      	ldr	r4, [r1, #16]
 8009904:	42a3      	cmp	r3, r4
 8009906:	4607      	mov	r7, r0
 8009908:	db7e      	blt.n	8009a08 <quorem+0x10c>
 800990a:	3c01      	subs	r4, #1
 800990c:	f101 0814 	add.w	r8, r1, #20
 8009910:	00a3      	lsls	r3, r4, #2
 8009912:	f100 0514 	add.w	r5, r0, #20
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800991c:	9301      	str	r3, [sp, #4]
 800991e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009922:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009926:	3301      	adds	r3, #1
 8009928:	429a      	cmp	r2, r3
 800992a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800992e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009932:	d32e      	bcc.n	8009992 <quorem+0x96>
 8009934:	f04f 0a00 	mov.w	sl, #0
 8009938:	46c4      	mov	ip, r8
 800993a:	46ae      	mov	lr, r5
 800993c:	46d3      	mov	fp, sl
 800993e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009942:	b298      	uxth	r0, r3
 8009944:	fb06 a000 	mla	r0, r6, r0, sl
 8009948:	0c02      	lsrs	r2, r0, #16
 800994a:	0c1b      	lsrs	r3, r3, #16
 800994c:	fb06 2303 	mla	r3, r6, r3, r2
 8009950:	f8de 2000 	ldr.w	r2, [lr]
 8009954:	b280      	uxth	r0, r0
 8009956:	b292      	uxth	r2, r2
 8009958:	1a12      	subs	r2, r2, r0
 800995a:	445a      	add	r2, fp
 800995c:	f8de 0000 	ldr.w	r0, [lr]
 8009960:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009964:	b29b      	uxth	r3, r3
 8009966:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800996a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800996e:	b292      	uxth	r2, r2
 8009970:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009974:	45e1      	cmp	r9, ip
 8009976:	f84e 2b04 	str.w	r2, [lr], #4
 800997a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800997e:	d2de      	bcs.n	800993e <quorem+0x42>
 8009980:	9b00      	ldr	r3, [sp, #0]
 8009982:	58eb      	ldr	r3, [r5, r3]
 8009984:	b92b      	cbnz	r3, 8009992 <quorem+0x96>
 8009986:	9b01      	ldr	r3, [sp, #4]
 8009988:	3b04      	subs	r3, #4
 800998a:	429d      	cmp	r5, r3
 800998c:	461a      	mov	r2, r3
 800998e:	d32f      	bcc.n	80099f0 <quorem+0xf4>
 8009990:	613c      	str	r4, [r7, #16]
 8009992:	4638      	mov	r0, r7
 8009994:	f001 f9c4 	bl	800ad20 <__mcmp>
 8009998:	2800      	cmp	r0, #0
 800999a:	db25      	blt.n	80099e8 <quorem+0xec>
 800999c:	4629      	mov	r1, r5
 800999e:	2000      	movs	r0, #0
 80099a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80099a4:	f8d1 c000 	ldr.w	ip, [r1]
 80099a8:	fa1f fe82 	uxth.w	lr, r2
 80099ac:	fa1f f38c 	uxth.w	r3, ip
 80099b0:	eba3 030e 	sub.w	r3, r3, lr
 80099b4:	4403      	add	r3, r0
 80099b6:	0c12      	lsrs	r2, r2, #16
 80099b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80099bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099c6:	45c1      	cmp	r9, r8
 80099c8:	f841 3b04 	str.w	r3, [r1], #4
 80099cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80099d0:	d2e6      	bcs.n	80099a0 <quorem+0xa4>
 80099d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099da:	b922      	cbnz	r2, 80099e6 <quorem+0xea>
 80099dc:	3b04      	subs	r3, #4
 80099de:	429d      	cmp	r5, r3
 80099e0:	461a      	mov	r2, r3
 80099e2:	d30b      	bcc.n	80099fc <quorem+0x100>
 80099e4:	613c      	str	r4, [r7, #16]
 80099e6:	3601      	adds	r6, #1
 80099e8:	4630      	mov	r0, r6
 80099ea:	b003      	add	sp, #12
 80099ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f0:	6812      	ldr	r2, [r2, #0]
 80099f2:	3b04      	subs	r3, #4
 80099f4:	2a00      	cmp	r2, #0
 80099f6:	d1cb      	bne.n	8009990 <quorem+0x94>
 80099f8:	3c01      	subs	r4, #1
 80099fa:	e7c6      	b.n	800998a <quorem+0x8e>
 80099fc:	6812      	ldr	r2, [r2, #0]
 80099fe:	3b04      	subs	r3, #4
 8009a00:	2a00      	cmp	r2, #0
 8009a02:	d1ef      	bne.n	80099e4 <quorem+0xe8>
 8009a04:	3c01      	subs	r4, #1
 8009a06:	e7ea      	b.n	80099de <quorem+0xe2>
 8009a08:	2000      	movs	r0, #0
 8009a0a:	e7ee      	b.n	80099ea <quorem+0xee>
 8009a0c:	0000      	movs	r0, r0
	...

08009a10 <_dtoa_r>:
 8009a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a14:	69c7      	ldr	r7, [r0, #28]
 8009a16:	b099      	sub	sp, #100	@ 0x64
 8009a18:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009a1c:	ec55 4b10 	vmov	r4, r5, d0
 8009a20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009a22:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a24:	4683      	mov	fp, r0
 8009a26:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a2a:	b97f      	cbnz	r7, 8009a4c <_dtoa_r+0x3c>
 8009a2c:	2010      	movs	r0, #16
 8009a2e:	f000 fdfd 	bl	800a62c <malloc>
 8009a32:	4602      	mov	r2, r0
 8009a34:	f8cb 001c 	str.w	r0, [fp, #28]
 8009a38:	b920      	cbnz	r0, 8009a44 <_dtoa_r+0x34>
 8009a3a:	4ba7      	ldr	r3, [pc, #668]	@ (8009cd8 <_dtoa_r+0x2c8>)
 8009a3c:	21ef      	movs	r1, #239	@ 0xef
 8009a3e:	48a7      	ldr	r0, [pc, #668]	@ (8009cdc <_dtoa_r+0x2cc>)
 8009a40:	f002 ffb6 	bl	800c9b0 <__assert_func>
 8009a44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009a48:	6007      	str	r7, [r0, #0]
 8009a4a:	60c7      	str	r7, [r0, #12]
 8009a4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a50:	6819      	ldr	r1, [r3, #0]
 8009a52:	b159      	cbz	r1, 8009a6c <_dtoa_r+0x5c>
 8009a54:	685a      	ldr	r2, [r3, #4]
 8009a56:	604a      	str	r2, [r1, #4]
 8009a58:	2301      	movs	r3, #1
 8009a5a:	4093      	lsls	r3, r2
 8009a5c:	608b      	str	r3, [r1, #8]
 8009a5e:	4658      	mov	r0, fp
 8009a60:	f000 feda 	bl	800a818 <_Bfree>
 8009a64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	601a      	str	r2, [r3, #0]
 8009a6c:	1e2b      	subs	r3, r5, #0
 8009a6e:	bfb9      	ittee	lt
 8009a70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009a74:	9303      	strlt	r3, [sp, #12]
 8009a76:	2300      	movge	r3, #0
 8009a78:	6033      	strge	r3, [r6, #0]
 8009a7a:	9f03      	ldr	r7, [sp, #12]
 8009a7c:	4b98      	ldr	r3, [pc, #608]	@ (8009ce0 <_dtoa_r+0x2d0>)
 8009a7e:	bfbc      	itt	lt
 8009a80:	2201      	movlt	r2, #1
 8009a82:	6032      	strlt	r2, [r6, #0]
 8009a84:	43bb      	bics	r3, r7
 8009a86:	d112      	bne.n	8009aae <_dtoa_r+0x9e>
 8009a88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a8e:	6013      	str	r3, [r2, #0]
 8009a90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a94:	4323      	orrs	r3, r4
 8009a96:	f000 854d 	beq.w	800a534 <_dtoa_r+0xb24>
 8009a9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009cf4 <_dtoa_r+0x2e4>
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f000 854f 	beq.w	800a544 <_dtoa_r+0xb34>
 8009aa6:	f10a 0303 	add.w	r3, sl, #3
 8009aaa:	f000 bd49 	b.w	800a540 <_dtoa_r+0xb30>
 8009aae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	ec51 0b17 	vmov	r0, r1, d7
 8009ab8:	2300      	movs	r3, #0
 8009aba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009abe:	f7f7 f82b 	bl	8000b18 <__aeabi_dcmpeq>
 8009ac2:	4680      	mov	r8, r0
 8009ac4:	b158      	cbz	r0, 8009ade <_dtoa_r+0xce>
 8009ac6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009ac8:	2301      	movs	r3, #1
 8009aca:	6013      	str	r3, [r2, #0]
 8009acc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ace:	b113      	cbz	r3, 8009ad6 <_dtoa_r+0xc6>
 8009ad0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009ad2:	4b84      	ldr	r3, [pc, #528]	@ (8009ce4 <_dtoa_r+0x2d4>)
 8009ad4:	6013      	str	r3, [r2, #0]
 8009ad6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009cf8 <_dtoa_r+0x2e8>
 8009ada:	f000 bd33 	b.w	800a544 <_dtoa_r+0xb34>
 8009ade:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009ae2:	aa16      	add	r2, sp, #88	@ 0x58
 8009ae4:	a917      	add	r1, sp, #92	@ 0x5c
 8009ae6:	4658      	mov	r0, fp
 8009ae8:	f001 fa3a 	bl	800af60 <__d2b>
 8009aec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009af0:	4681      	mov	r9, r0
 8009af2:	2e00      	cmp	r6, #0
 8009af4:	d077      	beq.n	8009be6 <_dtoa_r+0x1d6>
 8009af6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009af8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009b08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009b0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009b10:	4619      	mov	r1, r3
 8009b12:	2200      	movs	r2, #0
 8009b14:	4b74      	ldr	r3, [pc, #464]	@ (8009ce8 <_dtoa_r+0x2d8>)
 8009b16:	f7f6 fbdf 	bl	80002d8 <__aeabi_dsub>
 8009b1a:	a369      	add	r3, pc, #420	@ (adr r3, 8009cc0 <_dtoa_r+0x2b0>)
 8009b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b20:	f7f6 fd92 	bl	8000648 <__aeabi_dmul>
 8009b24:	a368      	add	r3, pc, #416	@ (adr r3, 8009cc8 <_dtoa_r+0x2b8>)
 8009b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2a:	f7f6 fbd7 	bl	80002dc <__adddf3>
 8009b2e:	4604      	mov	r4, r0
 8009b30:	4630      	mov	r0, r6
 8009b32:	460d      	mov	r5, r1
 8009b34:	f7f6 fd1e 	bl	8000574 <__aeabi_i2d>
 8009b38:	a365      	add	r3, pc, #404	@ (adr r3, 8009cd0 <_dtoa_r+0x2c0>)
 8009b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3e:	f7f6 fd83 	bl	8000648 <__aeabi_dmul>
 8009b42:	4602      	mov	r2, r0
 8009b44:	460b      	mov	r3, r1
 8009b46:	4620      	mov	r0, r4
 8009b48:	4629      	mov	r1, r5
 8009b4a:	f7f6 fbc7 	bl	80002dc <__adddf3>
 8009b4e:	4604      	mov	r4, r0
 8009b50:	460d      	mov	r5, r1
 8009b52:	f7f7 f829 	bl	8000ba8 <__aeabi_d2iz>
 8009b56:	2200      	movs	r2, #0
 8009b58:	4607      	mov	r7, r0
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	4629      	mov	r1, r5
 8009b60:	f7f6 ffe4 	bl	8000b2c <__aeabi_dcmplt>
 8009b64:	b140      	cbz	r0, 8009b78 <_dtoa_r+0x168>
 8009b66:	4638      	mov	r0, r7
 8009b68:	f7f6 fd04 	bl	8000574 <__aeabi_i2d>
 8009b6c:	4622      	mov	r2, r4
 8009b6e:	462b      	mov	r3, r5
 8009b70:	f7f6 ffd2 	bl	8000b18 <__aeabi_dcmpeq>
 8009b74:	b900      	cbnz	r0, 8009b78 <_dtoa_r+0x168>
 8009b76:	3f01      	subs	r7, #1
 8009b78:	2f16      	cmp	r7, #22
 8009b7a:	d851      	bhi.n	8009c20 <_dtoa_r+0x210>
 8009b7c:	4b5b      	ldr	r3, [pc, #364]	@ (8009cec <_dtoa_r+0x2dc>)
 8009b7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b8a:	f7f6 ffcf 	bl	8000b2c <__aeabi_dcmplt>
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	d048      	beq.n	8009c24 <_dtoa_r+0x214>
 8009b92:	3f01      	subs	r7, #1
 8009b94:	2300      	movs	r3, #0
 8009b96:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009b9a:	1b9b      	subs	r3, r3, r6
 8009b9c:	1e5a      	subs	r2, r3, #1
 8009b9e:	bf44      	itt	mi
 8009ba0:	f1c3 0801 	rsbmi	r8, r3, #1
 8009ba4:	2300      	movmi	r3, #0
 8009ba6:	9208      	str	r2, [sp, #32]
 8009ba8:	bf54      	ite	pl
 8009baa:	f04f 0800 	movpl.w	r8, #0
 8009bae:	9308      	strmi	r3, [sp, #32]
 8009bb0:	2f00      	cmp	r7, #0
 8009bb2:	db39      	blt.n	8009c28 <_dtoa_r+0x218>
 8009bb4:	9b08      	ldr	r3, [sp, #32]
 8009bb6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009bb8:	443b      	add	r3, r7
 8009bba:	9308      	str	r3, [sp, #32]
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bc2:	2b09      	cmp	r3, #9
 8009bc4:	d864      	bhi.n	8009c90 <_dtoa_r+0x280>
 8009bc6:	2b05      	cmp	r3, #5
 8009bc8:	bfc4      	itt	gt
 8009bca:	3b04      	subgt	r3, #4
 8009bcc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bd0:	f1a3 0302 	sub.w	r3, r3, #2
 8009bd4:	bfcc      	ite	gt
 8009bd6:	2400      	movgt	r4, #0
 8009bd8:	2401      	movle	r4, #1
 8009bda:	2b03      	cmp	r3, #3
 8009bdc:	d863      	bhi.n	8009ca6 <_dtoa_r+0x296>
 8009bde:	e8df f003 	tbb	[pc, r3]
 8009be2:	372a      	.short	0x372a
 8009be4:	5535      	.short	0x5535
 8009be6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009bea:	441e      	add	r6, r3
 8009bec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009bf0:	2b20      	cmp	r3, #32
 8009bf2:	bfc1      	itttt	gt
 8009bf4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009bf8:	409f      	lslgt	r7, r3
 8009bfa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009bfe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009c02:	bfd6      	itet	le
 8009c04:	f1c3 0320 	rsble	r3, r3, #32
 8009c08:	ea47 0003 	orrgt.w	r0, r7, r3
 8009c0c:	fa04 f003 	lslle.w	r0, r4, r3
 8009c10:	f7f6 fca0 	bl	8000554 <__aeabi_ui2d>
 8009c14:	2201      	movs	r2, #1
 8009c16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009c1a:	3e01      	subs	r6, #1
 8009c1c:	9214      	str	r2, [sp, #80]	@ 0x50
 8009c1e:	e777      	b.n	8009b10 <_dtoa_r+0x100>
 8009c20:	2301      	movs	r3, #1
 8009c22:	e7b8      	b.n	8009b96 <_dtoa_r+0x186>
 8009c24:	9012      	str	r0, [sp, #72]	@ 0x48
 8009c26:	e7b7      	b.n	8009b98 <_dtoa_r+0x188>
 8009c28:	427b      	negs	r3, r7
 8009c2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	eba8 0807 	sub.w	r8, r8, r7
 8009c32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009c34:	e7c4      	b.n	8009bc0 <_dtoa_r+0x1b0>
 8009c36:	2300      	movs	r3, #0
 8009c38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	dc35      	bgt.n	8009cac <_dtoa_r+0x29c>
 8009c40:	2301      	movs	r3, #1
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	9307      	str	r3, [sp, #28]
 8009c46:	461a      	mov	r2, r3
 8009c48:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c4a:	e00b      	b.n	8009c64 <_dtoa_r+0x254>
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e7f3      	b.n	8009c38 <_dtoa_r+0x228>
 8009c50:	2300      	movs	r3, #0
 8009c52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c56:	18fb      	adds	r3, r7, r3
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	9307      	str	r3, [sp, #28]
 8009c60:	bfb8      	it	lt
 8009c62:	2301      	movlt	r3, #1
 8009c64:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009c68:	2100      	movs	r1, #0
 8009c6a:	2204      	movs	r2, #4
 8009c6c:	f102 0514 	add.w	r5, r2, #20
 8009c70:	429d      	cmp	r5, r3
 8009c72:	d91f      	bls.n	8009cb4 <_dtoa_r+0x2a4>
 8009c74:	6041      	str	r1, [r0, #4]
 8009c76:	4658      	mov	r0, fp
 8009c78:	f000 fd8e 	bl	800a798 <_Balloc>
 8009c7c:	4682      	mov	sl, r0
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	d13c      	bne.n	8009cfc <_dtoa_r+0x2ec>
 8009c82:	4b1b      	ldr	r3, [pc, #108]	@ (8009cf0 <_dtoa_r+0x2e0>)
 8009c84:	4602      	mov	r2, r0
 8009c86:	f240 11af 	movw	r1, #431	@ 0x1af
 8009c8a:	e6d8      	b.n	8009a3e <_dtoa_r+0x2e>
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e7e0      	b.n	8009c52 <_dtoa_r+0x242>
 8009c90:	2401      	movs	r4, #1
 8009c92:	2300      	movs	r3, #0
 8009c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c96:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009c98:	f04f 33ff 	mov.w	r3, #4294967295
 8009c9c:	9300      	str	r3, [sp, #0]
 8009c9e:	9307      	str	r3, [sp, #28]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	2312      	movs	r3, #18
 8009ca4:	e7d0      	b.n	8009c48 <_dtoa_r+0x238>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009caa:	e7f5      	b.n	8009c98 <_dtoa_r+0x288>
 8009cac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	9307      	str	r3, [sp, #28]
 8009cb2:	e7d7      	b.n	8009c64 <_dtoa_r+0x254>
 8009cb4:	3101      	adds	r1, #1
 8009cb6:	0052      	lsls	r2, r2, #1
 8009cb8:	e7d8      	b.n	8009c6c <_dtoa_r+0x25c>
 8009cba:	bf00      	nop
 8009cbc:	f3af 8000 	nop.w
 8009cc0:	636f4361 	.word	0x636f4361
 8009cc4:	3fd287a7 	.word	0x3fd287a7
 8009cc8:	8b60c8b3 	.word	0x8b60c8b3
 8009ccc:	3fc68a28 	.word	0x3fc68a28
 8009cd0:	509f79fb 	.word	0x509f79fb
 8009cd4:	3fd34413 	.word	0x3fd34413
 8009cd8:	0800d918 	.word	0x0800d918
 8009cdc:	0800d92f 	.word	0x0800d92f
 8009ce0:	7ff00000 	.word	0x7ff00000
 8009ce4:	0800dc71 	.word	0x0800dc71
 8009ce8:	3ff80000 	.word	0x3ff80000
 8009cec:	0800da28 	.word	0x0800da28
 8009cf0:	0800d987 	.word	0x0800d987
 8009cf4:	0800d914 	.word	0x0800d914
 8009cf8:	0800dc70 	.word	0x0800dc70
 8009cfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d00:	6018      	str	r0, [r3, #0]
 8009d02:	9b07      	ldr	r3, [sp, #28]
 8009d04:	2b0e      	cmp	r3, #14
 8009d06:	f200 80a4 	bhi.w	8009e52 <_dtoa_r+0x442>
 8009d0a:	2c00      	cmp	r4, #0
 8009d0c:	f000 80a1 	beq.w	8009e52 <_dtoa_r+0x442>
 8009d10:	2f00      	cmp	r7, #0
 8009d12:	dd33      	ble.n	8009d7c <_dtoa_r+0x36c>
 8009d14:	4bad      	ldr	r3, [pc, #692]	@ (8009fcc <_dtoa_r+0x5bc>)
 8009d16:	f007 020f 	and.w	r2, r7, #15
 8009d1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d1e:	ed93 7b00 	vldr	d7, [r3]
 8009d22:	05f8      	lsls	r0, r7, #23
 8009d24:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009d28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009d2c:	d516      	bpl.n	8009d5c <_dtoa_r+0x34c>
 8009d2e:	4ba8      	ldr	r3, [pc, #672]	@ (8009fd0 <_dtoa_r+0x5c0>)
 8009d30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d38:	f7f6 fdb0 	bl	800089c <__aeabi_ddiv>
 8009d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d40:	f004 040f 	and.w	r4, r4, #15
 8009d44:	2603      	movs	r6, #3
 8009d46:	4da2      	ldr	r5, [pc, #648]	@ (8009fd0 <_dtoa_r+0x5c0>)
 8009d48:	b954      	cbnz	r4, 8009d60 <_dtoa_r+0x350>
 8009d4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d52:	f7f6 fda3 	bl	800089c <__aeabi_ddiv>
 8009d56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d5a:	e028      	b.n	8009dae <_dtoa_r+0x39e>
 8009d5c:	2602      	movs	r6, #2
 8009d5e:	e7f2      	b.n	8009d46 <_dtoa_r+0x336>
 8009d60:	07e1      	lsls	r1, r4, #31
 8009d62:	d508      	bpl.n	8009d76 <_dtoa_r+0x366>
 8009d64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d6c:	f7f6 fc6c 	bl	8000648 <__aeabi_dmul>
 8009d70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d74:	3601      	adds	r6, #1
 8009d76:	1064      	asrs	r4, r4, #1
 8009d78:	3508      	adds	r5, #8
 8009d7a:	e7e5      	b.n	8009d48 <_dtoa_r+0x338>
 8009d7c:	f000 80d2 	beq.w	8009f24 <_dtoa_r+0x514>
 8009d80:	427c      	negs	r4, r7
 8009d82:	4b92      	ldr	r3, [pc, #584]	@ (8009fcc <_dtoa_r+0x5bc>)
 8009d84:	4d92      	ldr	r5, [pc, #584]	@ (8009fd0 <_dtoa_r+0x5c0>)
 8009d86:	f004 020f 	and.w	r2, r4, #15
 8009d8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d96:	f7f6 fc57 	bl	8000648 <__aeabi_dmul>
 8009d9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d9e:	1124      	asrs	r4, r4, #4
 8009da0:	2300      	movs	r3, #0
 8009da2:	2602      	movs	r6, #2
 8009da4:	2c00      	cmp	r4, #0
 8009da6:	f040 80b2 	bne.w	8009f0e <_dtoa_r+0x4fe>
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1d3      	bne.n	8009d56 <_dtoa_r+0x346>
 8009dae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009db0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f000 80b7 	beq.w	8009f28 <_dtoa_r+0x518>
 8009dba:	4b86      	ldr	r3, [pc, #536]	@ (8009fd4 <_dtoa_r+0x5c4>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	f7f6 feb3 	bl	8000b2c <__aeabi_dcmplt>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	f000 80ae 	beq.w	8009f28 <_dtoa_r+0x518>
 8009dcc:	9b07      	ldr	r3, [sp, #28]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f000 80aa 	beq.w	8009f28 <_dtoa_r+0x518>
 8009dd4:	9b00      	ldr	r3, [sp, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	dd37      	ble.n	8009e4a <_dtoa_r+0x43a>
 8009dda:	1e7b      	subs	r3, r7, #1
 8009ddc:	9304      	str	r3, [sp, #16]
 8009dde:	4620      	mov	r0, r4
 8009de0:	4b7d      	ldr	r3, [pc, #500]	@ (8009fd8 <_dtoa_r+0x5c8>)
 8009de2:	2200      	movs	r2, #0
 8009de4:	4629      	mov	r1, r5
 8009de6:	f7f6 fc2f 	bl	8000648 <__aeabi_dmul>
 8009dea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dee:	9c00      	ldr	r4, [sp, #0]
 8009df0:	3601      	adds	r6, #1
 8009df2:	4630      	mov	r0, r6
 8009df4:	f7f6 fbbe 	bl	8000574 <__aeabi_i2d>
 8009df8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dfc:	f7f6 fc24 	bl	8000648 <__aeabi_dmul>
 8009e00:	4b76      	ldr	r3, [pc, #472]	@ (8009fdc <_dtoa_r+0x5cc>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	f7f6 fa6a 	bl	80002dc <__adddf3>
 8009e08:	4605      	mov	r5, r0
 8009e0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009e0e:	2c00      	cmp	r4, #0
 8009e10:	f040 808d 	bne.w	8009f2e <_dtoa_r+0x51e>
 8009e14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e18:	4b71      	ldr	r3, [pc, #452]	@ (8009fe0 <_dtoa_r+0x5d0>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f7f6 fa5c 	bl	80002d8 <__aeabi_dsub>
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e28:	462a      	mov	r2, r5
 8009e2a:	4633      	mov	r3, r6
 8009e2c:	f7f6 fe9c 	bl	8000b68 <__aeabi_dcmpgt>
 8009e30:	2800      	cmp	r0, #0
 8009e32:	f040 828b 	bne.w	800a34c <_dtoa_r+0x93c>
 8009e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e3a:	462a      	mov	r2, r5
 8009e3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009e40:	f7f6 fe74 	bl	8000b2c <__aeabi_dcmplt>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	f040 8128 	bne.w	800a09a <_dtoa_r+0x68a>
 8009e4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009e4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009e52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f2c0 815a 	blt.w	800a10e <_dtoa_r+0x6fe>
 8009e5a:	2f0e      	cmp	r7, #14
 8009e5c:	f300 8157 	bgt.w	800a10e <_dtoa_r+0x6fe>
 8009e60:	4b5a      	ldr	r3, [pc, #360]	@ (8009fcc <_dtoa_r+0x5bc>)
 8009e62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e66:	ed93 7b00 	vldr	d7, [r3]
 8009e6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	ed8d 7b00 	vstr	d7, [sp]
 8009e72:	da03      	bge.n	8009e7c <_dtoa_r+0x46c>
 8009e74:	9b07      	ldr	r3, [sp, #28]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f340 8101 	ble.w	800a07e <_dtoa_r+0x66e>
 8009e7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009e80:	4656      	mov	r6, sl
 8009e82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e86:	4620      	mov	r0, r4
 8009e88:	4629      	mov	r1, r5
 8009e8a:	f7f6 fd07 	bl	800089c <__aeabi_ddiv>
 8009e8e:	f7f6 fe8b 	bl	8000ba8 <__aeabi_d2iz>
 8009e92:	4680      	mov	r8, r0
 8009e94:	f7f6 fb6e 	bl	8000574 <__aeabi_i2d>
 8009e98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e9c:	f7f6 fbd4 	bl	8000648 <__aeabi_dmul>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	4629      	mov	r1, r5
 8009ea8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009eac:	f7f6 fa14 	bl	80002d8 <__aeabi_dsub>
 8009eb0:	f806 4b01 	strb.w	r4, [r6], #1
 8009eb4:	9d07      	ldr	r5, [sp, #28]
 8009eb6:	eba6 040a 	sub.w	r4, r6, sl
 8009eba:	42a5      	cmp	r5, r4
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	f040 8117 	bne.w	800a0f2 <_dtoa_r+0x6e2>
 8009ec4:	f7f6 fa0a 	bl	80002dc <__adddf3>
 8009ec8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ecc:	4604      	mov	r4, r0
 8009ece:	460d      	mov	r5, r1
 8009ed0:	f7f6 fe4a 	bl	8000b68 <__aeabi_dcmpgt>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	f040 80f9 	bne.w	800a0cc <_dtoa_r+0x6bc>
 8009eda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ede:	4620      	mov	r0, r4
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	f7f6 fe19 	bl	8000b18 <__aeabi_dcmpeq>
 8009ee6:	b118      	cbz	r0, 8009ef0 <_dtoa_r+0x4e0>
 8009ee8:	f018 0f01 	tst.w	r8, #1
 8009eec:	f040 80ee 	bne.w	800a0cc <_dtoa_r+0x6bc>
 8009ef0:	4649      	mov	r1, r9
 8009ef2:	4658      	mov	r0, fp
 8009ef4:	f000 fc90 	bl	800a818 <_Bfree>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	7033      	strb	r3, [r6, #0]
 8009efc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009efe:	3701      	adds	r7, #1
 8009f00:	601f      	str	r7, [r3, #0]
 8009f02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 831d 	beq.w	800a544 <_dtoa_r+0xb34>
 8009f0a:	601e      	str	r6, [r3, #0]
 8009f0c:	e31a      	b.n	800a544 <_dtoa_r+0xb34>
 8009f0e:	07e2      	lsls	r2, r4, #31
 8009f10:	d505      	bpl.n	8009f1e <_dtoa_r+0x50e>
 8009f12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f16:	f7f6 fb97 	bl	8000648 <__aeabi_dmul>
 8009f1a:	3601      	adds	r6, #1
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	1064      	asrs	r4, r4, #1
 8009f20:	3508      	adds	r5, #8
 8009f22:	e73f      	b.n	8009da4 <_dtoa_r+0x394>
 8009f24:	2602      	movs	r6, #2
 8009f26:	e742      	b.n	8009dae <_dtoa_r+0x39e>
 8009f28:	9c07      	ldr	r4, [sp, #28]
 8009f2a:	9704      	str	r7, [sp, #16]
 8009f2c:	e761      	b.n	8009df2 <_dtoa_r+0x3e2>
 8009f2e:	4b27      	ldr	r3, [pc, #156]	@ (8009fcc <_dtoa_r+0x5bc>)
 8009f30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f3a:	4454      	add	r4, sl
 8009f3c:	2900      	cmp	r1, #0
 8009f3e:	d053      	beq.n	8009fe8 <_dtoa_r+0x5d8>
 8009f40:	4928      	ldr	r1, [pc, #160]	@ (8009fe4 <_dtoa_r+0x5d4>)
 8009f42:	2000      	movs	r0, #0
 8009f44:	f7f6 fcaa 	bl	800089c <__aeabi_ddiv>
 8009f48:	4633      	mov	r3, r6
 8009f4a:	462a      	mov	r2, r5
 8009f4c:	f7f6 f9c4 	bl	80002d8 <__aeabi_dsub>
 8009f50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f54:	4656      	mov	r6, sl
 8009f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f5a:	f7f6 fe25 	bl	8000ba8 <__aeabi_d2iz>
 8009f5e:	4605      	mov	r5, r0
 8009f60:	f7f6 fb08 	bl	8000574 <__aeabi_i2d>
 8009f64:	4602      	mov	r2, r0
 8009f66:	460b      	mov	r3, r1
 8009f68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f6c:	f7f6 f9b4 	bl	80002d8 <__aeabi_dsub>
 8009f70:	3530      	adds	r5, #48	@ 0x30
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f7a:	f806 5b01 	strb.w	r5, [r6], #1
 8009f7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f82:	f7f6 fdd3 	bl	8000b2c <__aeabi_dcmplt>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d171      	bne.n	800a06e <_dtoa_r+0x65e>
 8009f8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f8e:	4911      	ldr	r1, [pc, #68]	@ (8009fd4 <_dtoa_r+0x5c4>)
 8009f90:	2000      	movs	r0, #0
 8009f92:	f7f6 f9a1 	bl	80002d8 <__aeabi_dsub>
 8009f96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f9a:	f7f6 fdc7 	bl	8000b2c <__aeabi_dcmplt>
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	f040 8095 	bne.w	800a0ce <_dtoa_r+0x6be>
 8009fa4:	42a6      	cmp	r6, r4
 8009fa6:	f43f af50 	beq.w	8009e4a <_dtoa_r+0x43a>
 8009faa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009fae:	4b0a      	ldr	r3, [pc, #40]	@ (8009fd8 <_dtoa_r+0x5c8>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f7f6 fb49 	bl	8000648 <__aeabi_dmul>
 8009fb6:	4b08      	ldr	r3, [pc, #32]	@ (8009fd8 <_dtoa_r+0x5c8>)
 8009fb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fc2:	f7f6 fb41 	bl	8000648 <__aeabi_dmul>
 8009fc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fca:	e7c4      	b.n	8009f56 <_dtoa_r+0x546>
 8009fcc:	0800da28 	.word	0x0800da28
 8009fd0:	0800da00 	.word	0x0800da00
 8009fd4:	3ff00000 	.word	0x3ff00000
 8009fd8:	40240000 	.word	0x40240000
 8009fdc:	401c0000 	.word	0x401c0000
 8009fe0:	40140000 	.word	0x40140000
 8009fe4:	3fe00000 	.word	0x3fe00000
 8009fe8:	4631      	mov	r1, r6
 8009fea:	4628      	mov	r0, r5
 8009fec:	f7f6 fb2c 	bl	8000648 <__aeabi_dmul>
 8009ff0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ff4:	9415      	str	r4, [sp, #84]	@ 0x54
 8009ff6:	4656      	mov	r6, sl
 8009ff8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ffc:	f7f6 fdd4 	bl	8000ba8 <__aeabi_d2iz>
 800a000:	4605      	mov	r5, r0
 800a002:	f7f6 fab7 	bl	8000574 <__aeabi_i2d>
 800a006:	4602      	mov	r2, r0
 800a008:	460b      	mov	r3, r1
 800a00a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a00e:	f7f6 f963 	bl	80002d8 <__aeabi_dsub>
 800a012:	3530      	adds	r5, #48	@ 0x30
 800a014:	f806 5b01 	strb.w	r5, [r6], #1
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	42a6      	cmp	r6, r4
 800a01e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a022:	f04f 0200 	mov.w	r2, #0
 800a026:	d124      	bne.n	800a072 <_dtoa_r+0x662>
 800a028:	4bac      	ldr	r3, [pc, #688]	@ (800a2dc <_dtoa_r+0x8cc>)
 800a02a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a02e:	f7f6 f955 	bl	80002dc <__adddf3>
 800a032:	4602      	mov	r2, r0
 800a034:	460b      	mov	r3, r1
 800a036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a03a:	f7f6 fd95 	bl	8000b68 <__aeabi_dcmpgt>
 800a03e:	2800      	cmp	r0, #0
 800a040:	d145      	bne.n	800a0ce <_dtoa_r+0x6be>
 800a042:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a046:	49a5      	ldr	r1, [pc, #660]	@ (800a2dc <_dtoa_r+0x8cc>)
 800a048:	2000      	movs	r0, #0
 800a04a:	f7f6 f945 	bl	80002d8 <__aeabi_dsub>
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a056:	f7f6 fd69 	bl	8000b2c <__aeabi_dcmplt>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	f43f aef5 	beq.w	8009e4a <_dtoa_r+0x43a>
 800a060:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a062:	1e73      	subs	r3, r6, #1
 800a064:	9315      	str	r3, [sp, #84]	@ 0x54
 800a066:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a06a:	2b30      	cmp	r3, #48	@ 0x30
 800a06c:	d0f8      	beq.n	800a060 <_dtoa_r+0x650>
 800a06e:	9f04      	ldr	r7, [sp, #16]
 800a070:	e73e      	b.n	8009ef0 <_dtoa_r+0x4e0>
 800a072:	4b9b      	ldr	r3, [pc, #620]	@ (800a2e0 <_dtoa_r+0x8d0>)
 800a074:	f7f6 fae8 	bl	8000648 <__aeabi_dmul>
 800a078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a07c:	e7bc      	b.n	8009ff8 <_dtoa_r+0x5e8>
 800a07e:	d10c      	bne.n	800a09a <_dtoa_r+0x68a>
 800a080:	4b98      	ldr	r3, [pc, #608]	@ (800a2e4 <_dtoa_r+0x8d4>)
 800a082:	2200      	movs	r2, #0
 800a084:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a088:	f7f6 fade 	bl	8000648 <__aeabi_dmul>
 800a08c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a090:	f7f6 fd60 	bl	8000b54 <__aeabi_dcmpge>
 800a094:	2800      	cmp	r0, #0
 800a096:	f000 8157 	beq.w	800a348 <_dtoa_r+0x938>
 800a09a:	2400      	movs	r4, #0
 800a09c:	4625      	mov	r5, r4
 800a09e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0a0:	43db      	mvns	r3, r3
 800a0a2:	9304      	str	r3, [sp, #16]
 800a0a4:	4656      	mov	r6, sl
 800a0a6:	2700      	movs	r7, #0
 800a0a8:	4621      	mov	r1, r4
 800a0aa:	4658      	mov	r0, fp
 800a0ac:	f000 fbb4 	bl	800a818 <_Bfree>
 800a0b0:	2d00      	cmp	r5, #0
 800a0b2:	d0dc      	beq.n	800a06e <_dtoa_r+0x65e>
 800a0b4:	b12f      	cbz	r7, 800a0c2 <_dtoa_r+0x6b2>
 800a0b6:	42af      	cmp	r7, r5
 800a0b8:	d003      	beq.n	800a0c2 <_dtoa_r+0x6b2>
 800a0ba:	4639      	mov	r1, r7
 800a0bc:	4658      	mov	r0, fp
 800a0be:	f000 fbab 	bl	800a818 <_Bfree>
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	4658      	mov	r0, fp
 800a0c6:	f000 fba7 	bl	800a818 <_Bfree>
 800a0ca:	e7d0      	b.n	800a06e <_dtoa_r+0x65e>
 800a0cc:	9704      	str	r7, [sp, #16]
 800a0ce:	4633      	mov	r3, r6
 800a0d0:	461e      	mov	r6, r3
 800a0d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0d6:	2a39      	cmp	r2, #57	@ 0x39
 800a0d8:	d107      	bne.n	800a0ea <_dtoa_r+0x6da>
 800a0da:	459a      	cmp	sl, r3
 800a0dc:	d1f8      	bne.n	800a0d0 <_dtoa_r+0x6c0>
 800a0de:	9a04      	ldr	r2, [sp, #16]
 800a0e0:	3201      	adds	r2, #1
 800a0e2:	9204      	str	r2, [sp, #16]
 800a0e4:	2230      	movs	r2, #48	@ 0x30
 800a0e6:	f88a 2000 	strb.w	r2, [sl]
 800a0ea:	781a      	ldrb	r2, [r3, #0]
 800a0ec:	3201      	adds	r2, #1
 800a0ee:	701a      	strb	r2, [r3, #0]
 800a0f0:	e7bd      	b.n	800a06e <_dtoa_r+0x65e>
 800a0f2:	4b7b      	ldr	r3, [pc, #492]	@ (800a2e0 <_dtoa_r+0x8d0>)
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f7f6 faa7 	bl	8000648 <__aeabi_dmul>
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	4604      	mov	r4, r0
 800a100:	460d      	mov	r5, r1
 800a102:	f7f6 fd09 	bl	8000b18 <__aeabi_dcmpeq>
 800a106:	2800      	cmp	r0, #0
 800a108:	f43f aebb 	beq.w	8009e82 <_dtoa_r+0x472>
 800a10c:	e6f0      	b.n	8009ef0 <_dtoa_r+0x4e0>
 800a10e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a110:	2a00      	cmp	r2, #0
 800a112:	f000 80db 	beq.w	800a2cc <_dtoa_r+0x8bc>
 800a116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a118:	2a01      	cmp	r2, #1
 800a11a:	f300 80bf 	bgt.w	800a29c <_dtoa_r+0x88c>
 800a11e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a120:	2a00      	cmp	r2, #0
 800a122:	f000 80b7 	beq.w	800a294 <_dtoa_r+0x884>
 800a126:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a12a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a12c:	4646      	mov	r6, r8
 800a12e:	9a08      	ldr	r2, [sp, #32]
 800a130:	2101      	movs	r1, #1
 800a132:	441a      	add	r2, r3
 800a134:	4658      	mov	r0, fp
 800a136:	4498      	add	r8, r3
 800a138:	9208      	str	r2, [sp, #32]
 800a13a:	f000 fc6b 	bl	800aa14 <__i2b>
 800a13e:	4605      	mov	r5, r0
 800a140:	b15e      	cbz	r6, 800a15a <_dtoa_r+0x74a>
 800a142:	9b08      	ldr	r3, [sp, #32]
 800a144:	2b00      	cmp	r3, #0
 800a146:	dd08      	ble.n	800a15a <_dtoa_r+0x74a>
 800a148:	42b3      	cmp	r3, r6
 800a14a:	9a08      	ldr	r2, [sp, #32]
 800a14c:	bfa8      	it	ge
 800a14e:	4633      	movge	r3, r6
 800a150:	eba8 0803 	sub.w	r8, r8, r3
 800a154:	1af6      	subs	r6, r6, r3
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	9308      	str	r3, [sp, #32]
 800a15a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a15c:	b1f3      	cbz	r3, 800a19c <_dtoa_r+0x78c>
 800a15e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a160:	2b00      	cmp	r3, #0
 800a162:	f000 80b7 	beq.w	800a2d4 <_dtoa_r+0x8c4>
 800a166:	b18c      	cbz	r4, 800a18c <_dtoa_r+0x77c>
 800a168:	4629      	mov	r1, r5
 800a16a:	4622      	mov	r2, r4
 800a16c:	4658      	mov	r0, fp
 800a16e:	f000 fd11 	bl	800ab94 <__pow5mult>
 800a172:	464a      	mov	r2, r9
 800a174:	4601      	mov	r1, r0
 800a176:	4605      	mov	r5, r0
 800a178:	4658      	mov	r0, fp
 800a17a:	f000 fc61 	bl	800aa40 <__multiply>
 800a17e:	4649      	mov	r1, r9
 800a180:	9004      	str	r0, [sp, #16]
 800a182:	4658      	mov	r0, fp
 800a184:	f000 fb48 	bl	800a818 <_Bfree>
 800a188:	9b04      	ldr	r3, [sp, #16]
 800a18a:	4699      	mov	r9, r3
 800a18c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a18e:	1b1a      	subs	r2, r3, r4
 800a190:	d004      	beq.n	800a19c <_dtoa_r+0x78c>
 800a192:	4649      	mov	r1, r9
 800a194:	4658      	mov	r0, fp
 800a196:	f000 fcfd 	bl	800ab94 <__pow5mult>
 800a19a:	4681      	mov	r9, r0
 800a19c:	2101      	movs	r1, #1
 800a19e:	4658      	mov	r0, fp
 800a1a0:	f000 fc38 	bl	800aa14 <__i2b>
 800a1a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f000 81cf 	beq.w	800a54c <_dtoa_r+0xb3c>
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	4601      	mov	r1, r0
 800a1b2:	4658      	mov	r0, fp
 800a1b4:	f000 fcee 	bl	800ab94 <__pow5mult>
 800a1b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	4604      	mov	r4, r0
 800a1be:	f300 8095 	bgt.w	800a2ec <_dtoa_r+0x8dc>
 800a1c2:	9b02      	ldr	r3, [sp, #8]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f040 8087 	bne.w	800a2d8 <_dtoa_r+0x8c8>
 800a1ca:	9b03      	ldr	r3, [sp, #12]
 800a1cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f040 8089 	bne.w	800a2e8 <_dtoa_r+0x8d8>
 800a1d6:	9b03      	ldr	r3, [sp, #12]
 800a1d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a1dc:	0d1b      	lsrs	r3, r3, #20
 800a1de:	051b      	lsls	r3, r3, #20
 800a1e0:	b12b      	cbz	r3, 800a1ee <_dtoa_r+0x7de>
 800a1e2:	9b08      	ldr	r3, [sp, #32]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	9308      	str	r3, [sp, #32]
 800a1e8:	f108 0801 	add.w	r8, r8, #1
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f000 81b0 	beq.w	800a558 <_dtoa_r+0xb48>
 800a1f8:	6923      	ldr	r3, [r4, #16]
 800a1fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a1fe:	6918      	ldr	r0, [r3, #16]
 800a200:	f000 fbbc 	bl	800a97c <__hi0bits>
 800a204:	f1c0 0020 	rsb	r0, r0, #32
 800a208:	9b08      	ldr	r3, [sp, #32]
 800a20a:	4418      	add	r0, r3
 800a20c:	f010 001f 	ands.w	r0, r0, #31
 800a210:	d077      	beq.n	800a302 <_dtoa_r+0x8f2>
 800a212:	f1c0 0320 	rsb	r3, r0, #32
 800a216:	2b04      	cmp	r3, #4
 800a218:	dd6b      	ble.n	800a2f2 <_dtoa_r+0x8e2>
 800a21a:	9b08      	ldr	r3, [sp, #32]
 800a21c:	f1c0 001c 	rsb	r0, r0, #28
 800a220:	4403      	add	r3, r0
 800a222:	4480      	add	r8, r0
 800a224:	4406      	add	r6, r0
 800a226:	9308      	str	r3, [sp, #32]
 800a228:	f1b8 0f00 	cmp.w	r8, #0
 800a22c:	dd05      	ble.n	800a23a <_dtoa_r+0x82a>
 800a22e:	4649      	mov	r1, r9
 800a230:	4642      	mov	r2, r8
 800a232:	4658      	mov	r0, fp
 800a234:	f000 fd08 	bl	800ac48 <__lshift>
 800a238:	4681      	mov	r9, r0
 800a23a:	9b08      	ldr	r3, [sp, #32]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	dd05      	ble.n	800a24c <_dtoa_r+0x83c>
 800a240:	4621      	mov	r1, r4
 800a242:	461a      	mov	r2, r3
 800a244:	4658      	mov	r0, fp
 800a246:	f000 fcff 	bl	800ac48 <__lshift>
 800a24a:	4604      	mov	r4, r0
 800a24c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d059      	beq.n	800a306 <_dtoa_r+0x8f6>
 800a252:	4621      	mov	r1, r4
 800a254:	4648      	mov	r0, r9
 800a256:	f000 fd63 	bl	800ad20 <__mcmp>
 800a25a:	2800      	cmp	r0, #0
 800a25c:	da53      	bge.n	800a306 <_dtoa_r+0x8f6>
 800a25e:	1e7b      	subs	r3, r7, #1
 800a260:	9304      	str	r3, [sp, #16]
 800a262:	4649      	mov	r1, r9
 800a264:	2300      	movs	r3, #0
 800a266:	220a      	movs	r2, #10
 800a268:	4658      	mov	r0, fp
 800a26a:	f000 faf7 	bl	800a85c <__multadd>
 800a26e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a270:	4681      	mov	r9, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	f000 8172 	beq.w	800a55c <_dtoa_r+0xb4c>
 800a278:	2300      	movs	r3, #0
 800a27a:	4629      	mov	r1, r5
 800a27c:	220a      	movs	r2, #10
 800a27e:	4658      	mov	r0, fp
 800a280:	f000 faec 	bl	800a85c <__multadd>
 800a284:	9b00      	ldr	r3, [sp, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	4605      	mov	r5, r0
 800a28a:	dc67      	bgt.n	800a35c <_dtoa_r+0x94c>
 800a28c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a28e:	2b02      	cmp	r3, #2
 800a290:	dc41      	bgt.n	800a316 <_dtoa_r+0x906>
 800a292:	e063      	b.n	800a35c <_dtoa_r+0x94c>
 800a294:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a296:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a29a:	e746      	b.n	800a12a <_dtoa_r+0x71a>
 800a29c:	9b07      	ldr	r3, [sp, #28]
 800a29e:	1e5c      	subs	r4, r3, #1
 800a2a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2a2:	42a3      	cmp	r3, r4
 800a2a4:	bfbf      	itttt	lt
 800a2a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a2a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a2aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a2ac:	1ae3      	sublt	r3, r4, r3
 800a2ae:	bfb4      	ite	lt
 800a2b0:	18d2      	addlt	r2, r2, r3
 800a2b2:	1b1c      	subge	r4, r3, r4
 800a2b4:	9b07      	ldr	r3, [sp, #28]
 800a2b6:	bfbc      	itt	lt
 800a2b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a2ba:	2400      	movlt	r4, #0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	bfb5      	itete	lt
 800a2c0:	eba8 0603 	sublt.w	r6, r8, r3
 800a2c4:	9b07      	ldrge	r3, [sp, #28]
 800a2c6:	2300      	movlt	r3, #0
 800a2c8:	4646      	movge	r6, r8
 800a2ca:	e730      	b.n	800a12e <_dtoa_r+0x71e>
 800a2cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a2ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a2d0:	4646      	mov	r6, r8
 800a2d2:	e735      	b.n	800a140 <_dtoa_r+0x730>
 800a2d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a2d6:	e75c      	b.n	800a192 <_dtoa_r+0x782>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	e788      	b.n	800a1ee <_dtoa_r+0x7de>
 800a2dc:	3fe00000 	.word	0x3fe00000
 800a2e0:	40240000 	.word	0x40240000
 800a2e4:	40140000 	.word	0x40140000
 800a2e8:	9b02      	ldr	r3, [sp, #8]
 800a2ea:	e780      	b.n	800a1ee <_dtoa_r+0x7de>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2f0:	e782      	b.n	800a1f8 <_dtoa_r+0x7e8>
 800a2f2:	d099      	beq.n	800a228 <_dtoa_r+0x818>
 800a2f4:	9a08      	ldr	r2, [sp, #32]
 800a2f6:	331c      	adds	r3, #28
 800a2f8:	441a      	add	r2, r3
 800a2fa:	4498      	add	r8, r3
 800a2fc:	441e      	add	r6, r3
 800a2fe:	9208      	str	r2, [sp, #32]
 800a300:	e792      	b.n	800a228 <_dtoa_r+0x818>
 800a302:	4603      	mov	r3, r0
 800a304:	e7f6      	b.n	800a2f4 <_dtoa_r+0x8e4>
 800a306:	9b07      	ldr	r3, [sp, #28]
 800a308:	9704      	str	r7, [sp, #16]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	dc20      	bgt.n	800a350 <_dtoa_r+0x940>
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a312:	2b02      	cmp	r3, #2
 800a314:	dd1e      	ble.n	800a354 <_dtoa_r+0x944>
 800a316:	9b00      	ldr	r3, [sp, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f47f aec0 	bne.w	800a09e <_dtoa_r+0x68e>
 800a31e:	4621      	mov	r1, r4
 800a320:	2205      	movs	r2, #5
 800a322:	4658      	mov	r0, fp
 800a324:	f000 fa9a 	bl	800a85c <__multadd>
 800a328:	4601      	mov	r1, r0
 800a32a:	4604      	mov	r4, r0
 800a32c:	4648      	mov	r0, r9
 800a32e:	f000 fcf7 	bl	800ad20 <__mcmp>
 800a332:	2800      	cmp	r0, #0
 800a334:	f77f aeb3 	ble.w	800a09e <_dtoa_r+0x68e>
 800a338:	4656      	mov	r6, sl
 800a33a:	2331      	movs	r3, #49	@ 0x31
 800a33c:	f806 3b01 	strb.w	r3, [r6], #1
 800a340:	9b04      	ldr	r3, [sp, #16]
 800a342:	3301      	adds	r3, #1
 800a344:	9304      	str	r3, [sp, #16]
 800a346:	e6ae      	b.n	800a0a6 <_dtoa_r+0x696>
 800a348:	9c07      	ldr	r4, [sp, #28]
 800a34a:	9704      	str	r7, [sp, #16]
 800a34c:	4625      	mov	r5, r4
 800a34e:	e7f3      	b.n	800a338 <_dtoa_r+0x928>
 800a350:	9b07      	ldr	r3, [sp, #28]
 800a352:	9300      	str	r3, [sp, #0]
 800a354:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a356:	2b00      	cmp	r3, #0
 800a358:	f000 8104 	beq.w	800a564 <_dtoa_r+0xb54>
 800a35c:	2e00      	cmp	r6, #0
 800a35e:	dd05      	ble.n	800a36c <_dtoa_r+0x95c>
 800a360:	4629      	mov	r1, r5
 800a362:	4632      	mov	r2, r6
 800a364:	4658      	mov	r0, fp
 800a366:	f000 fc6f 	bl	800ac48 <__lshift>
 800a36a:	4605      	mov	r5, r0
 800a36c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d05a      	beq.n	800a428 <_dtoa_r+0xa18>
 800a372:	6869      	ldr	r1, [r5, #4]
 800a374:	4658      	mov	r0, fp
 800a376:	f000 fa0f 	bl	800a798 <_Balloc>
 800a37a:	4606      	mov	r6, r0
 800a37c:	b928      	cbnz	r0, 800a38a <_dtoa_r+0x97a>
 800a37e:	4b84      	ldr	r3, [pc, #528]	@ (800a590 <_dtoa_r+0xb80>)
 800a380:	4602      	mov	r2, r0
 800a382:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a386:	f7ff bb5a 	b.w	8009a3e <_dtoa_r+0x2e>
 800a38a:	692a      	ldr	r2, [r5, #16]
 800a38c:	3202      	adds	r2, #2
 800a38e:	0092      	lsls	r2, r2, #2
 800a390:	f105 010c 	add.w	r1, r5, #12
 800a394:	300c      	adds	r0, #12
 800a396:	f7ff fa9c 	bl	80098d2 <memcpy>
 800a39a:	2201      	movs	r2, #1
 800a39c:	4631      	mov	r1, r6
 800a39e:	4658      	mov	r0, fp
 800a3a0:	f000 fc52 	bl	800ac48 <__lshift>
 800a3a4:	f10a 0301 	add.w	r3, sl, #1
 800a3a8:	9307      	str	r3, [sp, #28]
 800a3aa:	9b00      	ldr	r3, [sp, #0]
 800a3ac:	4453      	add	r3, sl
 800a3ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3b0:	9b02      	ldr	r3, [sp, #8]
 800a3b2:	f003 0301 	and.w	r3, r3, #1
 800a3b6:	462f      	mov	r7, r5
 800a3b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3ba:	4605      	mov	r5, r0
 800a3bc:	9b07      	ldr	r3, [sp, #28]
 800a3be:	4621      	mov	r1, r4
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	4648      	mov	r0, r9
 800a3c4:	9300      	str	r3, [sp, #0]
 800a3c6:	f7ff fa99 	bl	80098fc <quorem>
 800a3ca:	4639      	mov	r1, r7
 800a3cc:	9002      	str	r0, [sp, #8]
 800a3ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a3d2:	4648      	mov	r0, r9
 800a3d4:	f000 fca4 	bl	800ad20 <__mcmp>
 800a3d8:	462a      	mov	r2, r5
 800a3da:	9008      	str	r0, [sp, #32]
 800a3dc:	4621      	mov	r1, r4
 800a3de:	4658      	mov	r0, fp
 800a3e0:	f000 fcba 	bl	800ad58 <__mdiff>
 800a3e4:	68c2      	ldr	r2, [r0, #12]
 800a3e6:	4606      	mov	r6, r0
 800a3e8:	bb02      	cbnz	r2, 800a42c <_dtoa_r+0xa1c>
 800a3ea:	4601      	mov	r1, r0
 800a3ec:	4648      	mov	r0, r9
 800a3ee:	f000 fc97 	bl	800ad20 <__mcmp>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	4631      	mov	r1, r6
 800a3f6:	4658      	mov	r0, fp
 800a3f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3fa:	f000 fa0d 	bl	800a818 <_Bfree>
 800a3fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a400:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a402:	9e07      	ldr	r6, [sp, #28]
 800a404:	ea43 0102 	orr.w	r1, r3, r2
 800a408:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a40a:	4319      	orrs	r1, r3
 800a40c:	d110      	bne.n	800a430 <_dtoa_r+0xa20>
 800a40e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a412:	d029      	beq.n	800a468 <_dtoa_r+0xa58>
 800a414:	9b08      	ldr	r3, [sp, #32]
 800a416:	2b00      	cmp	r3, #0
 800a418:	dd02      	ble.n	800a420 <_dtoa_r+0xa10>
 800a41a:	9b02      	ldr	r3, [sp, #8]
 800a41c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a420:	9b00      	ldr	r3, [sp, #0]
 800a422:	f883 8000 	strb.w	r8, [r3]
 800a426:	e63f      	b.n	800a0a8 <_dtoa_r+0x698>
 800a428:	4628      	mov	r0, r5
 800a42a:	e7bb      	b.n	800a3a4 <_dtoa_r+0x994>
 800a42c:	2201      	movs	r2, #1
 800a42e:	e7e1      	b.n	800a3f4 <_dtoa_r+0x9e4>
 800a430:	9b08      	ldr	r3, [sp, #32]
 800a432:	2b00      	cmp	r3, #0
 800a434:	db04      	blt.n	800a440 <_dtoa_r+0xa30>
 800a436:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a438:	430b      	orrs	r3, r1
 800a43a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a43c:	430b      	orrs	r3, r1
 800a43e:	d120      	bne.n	800a482 <_dtoa_r+0xa72>
 800a440:	2a00      	cmp	r2, #0
 800a442:	dded      	ble.n	800a420 <_dtoa_r+0xa10>
 800a444:	4649      	mov	r1, r9
 800a446:	2201      	movs	r2, #1
 800a448:	4658      	mov	r0, fp
 800a44a:	f000 fbfd 	bl	800ac48 <__lshift>
 800a44e:	4621      	mov	r1, r4
 800a450:	4681      	mov	r9, r0
 800a452:	f000 fc65 	bl	800ad20 <__mcmp>
 800a456:	2800      	cmp	r0, #0
 800a458:	dc03      	bgt.n	800a462 <_dtoa_r+0xa52>
 800a45a:	d1e1      	bne.n	800a420 <_dtoa_r+0xa10>
 800a45c:	f018 0f01 	tst.w	r8, #1
 800a460:	d0de      	beq.n	800a420 <_dtoa_r+0xa10>
 800a462:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a466:	d1d8      	bne.n	800a41a <_dtoa_r+0xa0a>
 800a468:	9a00      	ldr	r2, [sp, #0]
 800a46a:	2339      	movs	r3, #57	@ 0x39
 800a46c:	7013      	strb	r3, [r2, #0]
 800a46e:	4633      	mov	r3, r6
 800a470:	461e      	mov	r6, r3
 800a472:	3b01      	subs	r3, #1
 800a474:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a478:	2a39      	cmp	r2, #57	@ 0x39
 800a47a:	d052      	beq.n	800a522 <_dtoa_r+0xb12>
 800a47c:	3201      	adds	r2, #1
 800a47e:	701a      	strb	r2, [r3, #0]
 800a480:	e612      	b.n	800a0a8 <_dtoa_r+0x698>
 800a482:	2a00      	cmp	r2, #0
 800a484:	dd07      	ble.n	800a496 <_dtoa_r+0xa86>
 800a486:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a48a:	d0ed      	beq.n	800a468 <_dtoa_r+0xa58>
 800a48c:	9a00      	ldr	r2, [sp, #0]
 800a48e:	f108 0301 	add.w	r3, r8, #1
 800a492:	7013      	strb	r3, [r2, #0]
 800a494:	e608      	b.n	800a0a8 <_dtoa_r+0x698>
 800a496:	9b07      	ldr	r3, [sp, #28]
 800a498:	9a07      	ldr	r2, [sp, #28]
 800a49a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a49e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d028      	beq.n	800a4f6 <_dtoa_r+0xae6>
 800a4a4:	4649      	mov	r1, r9
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	220a      	movs	r2, #10
 800a4aa:	4658      	mov	r0, fp
 800a4ac:	f000 f9d6 	bl	800a85c <__multadd>
 800a4b0:	42af      	cmp	r7, r5
 800a4b2:	4681      	mov	r9, r0
 800a4b4:	f04f 0300 	mov.w	r3, #0
 800a4b8:	f04f 020a 	mov.w	r2, #10
 800a4bc:	4639      	mov	r1, r7
 800a4be:	4658      	mov	r0, fp
 800a4c0:	d107      	bne.n	800a4d2 <_dtoa_r+0xac2>
 800a4c2:	f000 f9cb 	bl	800a85c <__multadd>
 800a4c6:	4607      	mov	r7, r0
 800a4c8:	4605      	mov	r5, r0
 800a4ca:	9b07      	ldr	r3, [sp, #28]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	9307      	str	r3, [sp, #28]
 800a4d0:	e774      	b.n	800a3bc <_dtoa_r+0x9ac>
 800a4d2:	f000 f9c3 	bl	800a85c <__multadd>
 800a4d6:	4629      	mov	r1, r5
 800a4d8:	4607      	mov	r7, r0
 800a4da:	2300      	movs	r3, #0
 800a4dc:	220a      	movs	r2, #10
 800a4de:	4658      	mov	r0, fp
 800a4e0:	f000 f9bc 	bl	800a85c <__multadd>
 800a4e4:	4605      	mov	r5, r0
 800a4e6:	e7f0      	b.n	800a4ca <_dtoa_r+0xaba>
 800a4e8:	9b00      	ldr	r3, [sp, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	bfcc      	ite	gt
 800a4ee:	461e      	movgt	r6, r3
 800a4f0:	2601      	movle	r6, #1
 800a4f2:	4456      	add	r6, sl
 800a4f4:	2700      	movs	r7, #0
 800a4f6:	4649      	mov	r1, r9
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	4658      	mov	r0, fp
 800a4fc:	f000 fba4 	bl	800ac48 <__lshift>
 800a500:	4621      	mov	r1, r4
 800a502:	4681      	mov	r9, r0
 800a504:	f000 fc0c 	bl	800ad20 <__mcmp>
 800a508:	2800      	cmp	r0, #0
 800a50a:	dcb0      	bgt.n	800a46e <_dtoa_r+0xa5e>
 800a50c:	d102      	bne.n	800a514 <_dtoa_r+0xb04>
 800a50e:	f018 0f01 	tst.w	r8, #1
 800a512:	d1ac      	bne.n	800a46e <_dtoa_r+0xa5e>
 800a514:	4633      	mov	r3, r6
 800a516:	461e      	mov	r6, r3
 800a518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a51c:	2a30      	cmp	r2, #48	@ 0x30
 800a51e:	d0fa      	beq.n	800a516 <_dtoa_r+0xb06>
 800a520:	e5c2      	b.n	800a0a8 <_dtoa_r+0x698>
 800a522:	459a      	cmp	sl, r3
 800a524:	d1a4      	bne.n	800a470 <_dtoa_r+0xa60>
 800a526:	9b04      	ldr	r3, [sp, #16]
 800a528:	3301      	adds	r3, #1
 800a52a:	9304      	str	r3, [sp, #16]
 800a52c:	2331      	movs	r3, #49	@ 0x31
 800a52e:	f88a 3000 	strb.w	r3, [sl]
 800a532:	e5b9      	b.n	800a0a8 <_dtoa_r+0x698>
 800a534:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a536:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a594 <_dtoa_r+0xb84>
 800a53a:	b11b      	cbz	r3, 800a544 <_dtoa_r+0xb34>
 800a53c:	f10a 0308 	add.w	r3, sl, #8
 800a540:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a542:	6013      	str	r3, [r2, #0]
 800a544:	4650      	mov	r0, sl
 800a546:	b019      	add	sp, #100	@ 0x64
 800a548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a54c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a54e:	2b01      	cmp	r3, #1
 800a550:	f77f ae37 	ble.w	800a1c2 <_dtoa_r+0x7b2>
 800a554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a556:	930a      	str	r3, [sp, #40]	@ 0x28
 800a558:	2001      	movs	r0, #1
 800a55a:	e655      	b.n	800a208 <_dtoa_r+0x7f8>
 800a55c:	9b00      	ldr	r3, [sp, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f77f aed6 	ble.w	800a310 <_dtoa_r+0x900>
 800a564:	4656      	mov	r6, sl
 800a566:	4621      	mov	r1, r4
 800a568:	4648      	mov	r0, r9
 800a56a:	f7ff f9c7 	bl	80098fc <quorem>
 800a56e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a572:	f806 8b01 	strb.w	r8, [r6], #1
 800a576:	9b00      	ldr	r3, [sp, #0]
 800a578:	eba6 020a 	sub.w	r2, r6, sl
 800a57c:	4293      	cmp	r3, r2
 800a57e:	ddb3      	ble.n	800a4e8 <_dtoa_r+0xad8>
 800a580:	4649      	mov	r1, r9
 800a582:	2300      	movs	r3, #0
 800a584:	220a      	movs	r2, #10
 800a586:	4658      	mov	r0, fp
 800a588:	f000 f968 	bl	800a85c <__multadd>
 800a58c:	4681      	mov	r9, r0
 800a58e:	e7ea      	b.n	800a566 <_dtoa_r+0xb56>
 800a590:	0800d987 	.word	0x0800d987
 800a594:	0800d90b 	.word	0x0800d90b

0800a598 <_free_r>:
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	4605      	mov	r5, r0
 800a59c:	2900      	cmp	r1, #0
 800a59e:	d041      	beq.n	800a624 <_free_r+0x8c>
 800a5a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5a4:	1f0c      	subs	r4, r1, #4
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	bfb8      	it	lt
 800a5aa:	18e4      	addlt	r4, r4, r3
 800a5ac:	f000 f8e8 	bl	800a780 <__malloc_lock>
 800a5b0:	4a1d      	ldr	r2, [pc, #116]	@ (800a628 <_free_r+0x90>)
 800a5b2:	6813      	ldr	r3, [r2, #0]
 800a5b4:	b933      	cbnz	r3, 800a5c4 <_free_r+0x2c>
 800a5b6:	6063      	str	r3, [r4, #4]
 800a5b8:	6014      	str	r4, [r2, #0]
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5c0:	f000 b8e4 	b.w	800a78c <__malloc_unlock>
 800a5c4:	42a3      	cmp	r3, r4
 800a5c6:	d908      	bls.n	800a5da <_free_r+0x42>
 800a5c8:	6820      	ldr	r0, [r4, #0]
 800a5ca:	1821      	adds	r1, r4, r0
 800a5cc:	428b      	cmp	r3, r1
 800a5ce:	bf01      	itttt	eq
 800a5d0:	6819      	ldreq	r1, [r3, #0]
 800a5d2:	685b      	ldreq	r3, [r3, #4]
 800a5d4:	1809      	addeq	r1, r1, r0
 800a5d6:	6021      	streq	r1, [r4, #0]
 800a5d8:	e7ed      	b.n	800a5b6 <_free_r+0x1e>
 800a5da:	461a      	mov	r2, r3
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	b10b      	cbz	r3, 800a5e4 <_free_r+0x4c>
 800a5e0:	42a3      	cmp	r3, r4
 800a5e2:	d9fa      	bls.n	800a5da <_free_r+0x42>
 800a5e4:	6811      	ldr	r1, [r2, #0]
 800a5e6:	1850      	adds	r0, r2, r1
 800a5e8:	42a0      	cmp	r0, r4
 800a5ea:	d10b      	bne.n	800a604 <_free_r+0x6c>
 800a5ec:	6820      	ldr	r0, [r4, #0]
 800a5ee:	4401      	add	r1, r0
 800a5f0:	1850      	adds	r0, r2, r1
 800a5f2:	4283      	cmp	r3, r0
 800a5f4:	6011      	str	r1, [r2, #0]
 800a5f6:	d1e0      	bne.n	800a5ba <_free_r+0x22>
 800a5f8:	6818      	ldr	r0, [r3, #0]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	6053      	str	r3, [r2, #4]
 800a5fe:	4408      	add	r0, r1
 800a600:	6010      	str	r0, [r2, #0]
 800a602:	e7da      	b.n	800a5ba <_free_r+0x22>
 800a604:	d902      	bls.n	800a60c <_free_r+0x74>
 800a606:	230c      	movs	r3, #12
 800a608:	602b      	str	r3, [r5, #0]
 800a60a:	e7d6      	b.n	800a5ba <_free_r+0x22>
 800a60c:	6820      	ldr	r0, [r4, #0]
 800a60e:	1821      	adds	r1, r4, r0
 800a610:	428b      	cmp	r3, r1
 800a612:	bf04      	itt	eq
 800a614:	6819      	ldreq	r1, [r3, #0]
 800a616:	685b      	ldreq	r3, [r3, #4]
 800a618:	6063      	str	r3, [r4, #4]
 800a61a:	bf04      	itt	eq
 800a61c:	1809      	addeq	r1, r1, r0
 800a61e:	6021      	streq	r1, [r4, #0]
 800a620:	6054      	str	r4, [r2, #4]
 800a622:	e7ca      	b.n	800a5ba <_free_r+0x22>
 800a624:	bd38      	pop	{r3, r4, r5, pc}
 800a626:	bf00      	nop
 800a628:	20000818 	.word	0x20000818

0800a62c <malloc>:
 800a62c:	4b02      	ldr	r3, [pc, #8]	@ (800a638 <malloc+0xc>)
 800a62e:	4601      	mov	r1, r0
 800a630:	6818      	ldr	r0, [r3, #0]
 800a632:	f000 b825 	b.w	800a680 <_malloc_r>
 800a636:	bf00      	nop
 800a638:	20000014 	.word	0x20000014

0800a63c <sbrk_aligned>:
 800a63c:	b570      	push	{r4, r5, r6, lr}
 800a63e:	4e0f      	ldr	r6, [pc, #60]	@ (800a67c <sbrk_aligned+0x40>)
 800a640:	460c      	mov	r4, r1
 800a642:	6831      	ldr	r1, [r6, #0]
 800a644:	4605      	mov	r5, r0
 800a646:	b911      	cbnz	r1, 800a64e <sbrk_aligned+0x12>
 800a648:	f002 f99a 	bl	800c980 <_sbrk_r>
 800a64c:	6030      	str	r0, [r6, #0]
 800a64e:	4621      	mov	r1, r4
 800a650:	4628      	mov	r0, r5
 800a652:	f002 f995 	bl	800c980 <_sbrk_r>
 800a656:	1c43      	adds	r3, r0, #1
 800a658:	d103      	bne.n	800a662 <sbrk_aligned+0x26>
 800a65a:	f04f 34ff 	mov.w	r4, #4294967295
 800a65e:	4620      	mov	r0, r4
 800a660:	bd70      	pop	{r4, r5, r6, pc}
 800a662:	1cc4      	adds	r4, r0, #3
 800a664:	f024 0403 	bic.w	r4, r4, #3
 800a668:	42a0      	cmp	r0, r4
 800a66a:	d0f8      	beq.n	800a65e <sbrk_aligned+0x22>
 800a66c:	1a21      	subs	r1, r4, r0
 800a66e:	4628      	mov	r0, r5
 800a670:	f002 f986 	bl	800c980 <_sbrk_r>
 800a674:	3001      	adds	r0, #1
 800a676:	d1f2      	bne.n	800a65e <sbrk_aligned+0x22>
 800a678:	e7ef      	b.n	800a65a <sbrk_aligned+0x1e>
 800a67a:	bf00      	nop
 800a67c:	20000814 	.word	0x20000814

0800a680 <_malloc_r>:
 800a680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a684:	1ccd      	adds	r5, r1, #3
 800a686:	f025 0503 	bic.w	r5, r5, #3
 800a68a:	3508      	adds	r5, #8
 800a68c:	2d0c      	cmp	r5, #12
 800a68e:	bf38      	it	cc
 800a690:	250c      	movcc	r5, #12
 800a692:	2d00      	cmp	r5, #0
 800a694:	4606      	mov	r6, r0
 800a696:	db01      	blt.n	800a69c <_malloc_r+0x1c>
 800a698:	42a9      	cmp	r1, r5
 800a69a:	d904      	bls.n	800a6a6 <_malloc_r+0x26>
 800a69c:	230c      	movs	r3, #12
 800a69e:	6033      	str	r3, [r6, #0]
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a77c <_malloc_r+0xfc>
 800a6aa:	f000 f869 	bl	800a780 <__malloc_lock>
 800a6ae:	f8d8 3000 	ldr.w	r3, [r8]
 800a6b2:	461c      	mov	r4, r3
 800a6b4:	bb44      	cbnz	r4, 800a708 <_malloc_r+0x88>
 800a6b6:	4629      	mov	r1, r5
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	f7ff ffbf 	bl	800a63c <sbrk_aligned>
 800a6be:	1c43      	adds	r3, r0, #1
 800a6c0:	4604      	mov	r4, r0
 800a6c2:	d158      	bne.n	800a776 <_malloc_r+0xf6>
 800a6c4:	f8d8 4000 	ldr.w	r4, [r8]
 800a6c8:	4627      	mov	r7, r4
 800a6ca:	2f00      	cmp	r7, #0
 800a6cc:	d143      	bne.n	800a756 <_malloc_r+0xd6>
 800a6ce:	2c00      	cmp	r4, #0
 800a6d0:	d04b      	beq.n	800a76a <_malloc_r+0xea>
 800a6d2:	6823      	ldr	r3, [r4, #0]
 800a6d4:	4639      	mov	r1, r7
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	eb04 0903 	add.w	r9, r4, r3
 800a6dc:	f002 f950 	bl	800c980 <_sbrk_r>
 800a6e0:	4581      	cmp	r9, r0
 800a6e2:	d142      	bne.n	800a76a <_malloc_r+0xea>
 800a6e4:	6821      	ldr	r1, [r4, #0]
 800a6e6:	1a6d      	subs	r5, r5, r1
 800a6e8:	4629      	mov	r1, r5
 800a6ea:	4630      	mov	r0, r6
 800a6ec:	f7ff ffa6 	bl	800a63c <sbrk_aligned>
 800a6f0:	3001      	adds	r0, #1
 800a6f2:	d03a      	beq.n	800a76a <_malloc_r+0xea>
 800a6f4:	6823      	ldr	r3, [r4, #0]
 800a6f6:	442b      	add	r3, r5
 800a6f8:	6023      	str	r3, [r4, #0]
 800a6fa:	f8d8 3000 	ldr.w	r3, [r8]
 800a6fe:	685a      	ldr	r2, [r3, #4]
 800a700:	bb62      	cbnz	r2, 800a75c <_malloc_r+0xdc>
 800a702:	f8c8 7000 	str.w	r7, [r8]
 800a706:	e00f      	b.n	800a728 <_malloc_r+0xa8>
 800a708:	6822      	ldr	r2, [r4, #0]
 800a70a:	1b52      	subs	r2, r2, r5
 800a70c:	d420      	bmi.n	800a750 <_malloc_r+0xd0>
 800a70e:	2a0b      	cmp	r2, #11
 800a710:	d917      	bls.n	800a742 <_malloc_r+0xc2>
 800a712:	1961      	adds	r1, r4, r5
 800a714:	42a3      	cmp	r3, r4
 800a716:	6025      	str	r5, [r4, #0]
 800a718:	bf18      	it	ne
 800a71a:	6059      	strne	r1, [r3, #4]
 800a71c:	6863      	ldr	r3, [r4, #4]
 800a71e:	bf08      	it	eq
 800a720:	f8c8 1000 	streq.w	r1, [r8]
 800a724:	5162      	str	r2, [r4, r5]
 800a726:	604b      	str	r3, [r1, #4]
 800a728:	4630      	mov	r0, r6
 800a72a:	f000 f82f 	bl	800a78c <__malloc_unlock>
 800a72e:	f104 000b 	add.w	r0, r4, #11
 800a732:	1d23      	adds	r3, r4, #4
 800a734:	f020 0007 	bic.w	r0, r0, #7
 800a738:	1ac2      	subs	r2, r0, r3
 800a73a:	bf1c      	itt	ne
 800a73c:	1a1b      	subne	r3, r3, r0
 800a73e:	50a3      	strne	r3, [r4, r2]
 800a740:	e7af      	b.n	800a6a2 <_malloc_r+0x22>
 800a742:	6862      	ldr	r2, [r4, #4]
 800a744:	42a3      	cmp	r3, r4
 800a746:	bf0c      	ite	eq
 800a748:	f8c8 2000 	streq.w	r2, [r8]
 800a74c:	605a      	strne	r2, [r3, #4]
 800a74e:	e7eb      	b.n	800a728 <_malloc_r+0xa8>
 800a750:	4623      	mov	r3, r4
 800a752:	6864      	ldr	r4, [r4, #4]
 800a754:	e7ae      	b.n	800a6b4 <_malloc_r+0x34>
 800a756:	463c      	mov	r4, r7
 800a758:	687f      	ldr	r7, [r7, #4]
 800a75a:	e7b6      	b.n	800a6ca <_malloc_r+0x4a>
 800a75c:	461a      	mov	r2, r3
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	42a3      	cmp	r3, r4
 800a762:	d1fb      	bne.n	800a75c <_malloc_r+0xdc>
 800a764:	2300      	movs	r3, #0
 800a766:	6053      	str	r3, [r2, #4]
 800a768:	e7de      	b.n	800a728 <_malloc_r+0xa8>
 800a76a:	230c      	movs	r3, #12
 800a76c:	6033      	str	r3, [r6, #0]
 800a76e:	4630      	mov	r0, r6
 800a770:	f000 f80c 	bl	800a78c <__malloc_unlock>
 800a774:	e794      	b.n	800a6a0 <_malloc_r+0x20>
 800a776:	6005      	str	r5, [r0, #0]
 800a778:	e7d6      	b.n	800a728 <_malloc_r+0xa8>
 800a77a:	bf00      	nop
 800a77c:	20000818 	.word	0x20000818

0800a780 <__malloc_lock>:
 800a780:	4801      	ldr	r0, [pc, #4]	@ (800a788 <__malloc_lock+0x8>)
 800a782:	f7ff b8a4 	b.w	80098ce <__retarget_lock_acquire_recursive>
 800a786:	bf00      	nop
 800a788:	20000810 	.word	0x20000810

0800a78c <__malloc_unlock>:
 800a78c:	4801      	ldr	r0, [pc, #4]	@ (800a794 <__malloc_unlock+0x8>)
 800a78e:	f7ff b89f 	b.w	80098d0 <__retarget_lock_release_recursive>
 800a792:	bf00      	nop
 800a794:	20000810 	.word	0x20000810

0800a798 <_Balloc>:
 800a798:	b570      	push	{r4, r5, r6, lr}
 800a79a:	69c6      	ldr	r6, [r0, #28]
 800a79c:	4604      	mov	r4, r0
 800a79e:	460d      	mov	r5, r1
 800a7a0:	b976      	cbnz	r6, 800a7c0 <_Balloc+0x28>
 800a7a2:	2010      	movs	r0, #16
 800a7a4:	f7ff ff42 	bl	800a62c <malloc>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	61e0      	str	r0, [r4, #28]
 800a7ac:	b920      	cbnz	r0, 800a7b8 <_Balloc+0x20>
 800a7ae:	4b18      	ldr	r3, [pc, #96]	@ (800a810 <_Balloc+0x78>)
 800a7b0:	4818      	ldr	r0, [pc, #96]	@ (800a814 <_Balloc+0x7c>)
 800a7b2:	216b      	movs	r1, #107	@ 0x6b
 800a7b4:	f002 f8fc 	bl	800c9b0 <__assert_func>
 800a7b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7bc:	6006      	str	r6, [r0, #0]
 800a7be:	60c6      	str	r6, [r0, #12]
 800a7c0:	69e6      	ldr	r6, [r4, #28]
 800a7c2:	68f3      	ldr	r3, [r6, #12]
 800a7c4:	b183      	cbz	r3, 800a7e8 <_Balloc+0x50>
 800a7c6:	69e3      	ldr	r3, [r4, #28]
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7ce:	b9b8      	cbnz	r0, 800a800 <_Balloc+0x68>
 800a7d0:	2101      	movs	r1, #1
 800a7d2:	fa01 f605 	lsl.w	r6, r1, r5
 800a7d6:	1d72      	adds	r2, r6, #5
 800a7d8:	0092      	lsls	r2, r2, #2
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f002 f906 	bl	800c9ec <_calloc_r>
 800a7e0:	b160      	cbz	r0, 800a7fc <_Balloc+0x64>
 800a7e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7e6:	e00e      	b.n	800a806 <_Balloc+0x6e>
 800a7e8:	2221      	movs	r2, #33	@ 0x21
 800a7ea:	2104      	movs	r1, #4
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f002 f8fd 	bl	800c9ec <_calloc_r>
 800a7f2:	69e3      	ldr	r3, [r4, #28]
 800a7f4:	60f0      	str	r0, [r6, #12]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1e4      	bne.n	800a7c6 <_Balloc+0x2e>
 800a7fc:	2000      	movs	r0, #0
 800a7fe:	bd70      	pop	{r4, r5, r6, pc}
 800a800:	6802      	ldr	r2, [r0, #0]
 800a802:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a806:	2300      	movs	r3, #0
 800a808:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a80c:	e7f7      	b.n	800a7fe <_Balloc+0x66>
 800a80e:	bf00      	nop
 800a810:	0800d918 	.word	0x0800d918
 800a814:	0800d998 	.word	0x0800d998

0800a818 <_Bfree>:
 800a818:	b570      	push	{r4, r5, r6, lr}
 800a81a:	69c6      	ldr	r6, [r0, #28]
 800a81c:	4605      	mov	r5, r0
 800a81e:	460c      	mov	r4, r1
 800a820:	b976      	cbnz	r6, 800a840 <_Bfree+0x28>
 800a822:	2010      	movs	r0, #16
 800a824:	f7ff ff02 	bl	800a62c <malloc>
 800a828:	4602      	mov	r2, r0
 800a82a:	61e8      	str	r0, [r5, #28]
 800a82c:	b920      	cbnz	r0, 800a838 <_Bfree+0x20>
 800a82e:	4b09      	ldr	r3, [pc, #36]	@ (800a854 <_Bfree+0x3c>)
 800a830:	4809      	ldr	r0, [pc, #36]	@ (800a858 <_Bfree+0x40>)
 800a832:	218f      	movs	r1, #143	@ 0x8f
 800a834:	f002 f8bc 	bl	800c9b0 <__assert_func>
 800a838:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a83c:	6006      	str	r6, [r0, #0]
 800a83e:	60c6      	str	r6, [r0, #12]
 800a840:	b13c      	cbz	r4, 800a852 <_Bfree+0x3a>
 800a842:	69eb      	ldr	r3, [r5, #28]
 800a844:	6862      	ldr	r2, [r4, #4]
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a84c:	6021      	str	r1, [r4, #0]
 800a84e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a852:	bd70      	pop	{r4, r5, r6, pc}
 800a854:	0800d918 	.word	0x0800d918
 800a858:	0800d998 	.word	0x0800d998

0800a85c <__multadd>:
 800a85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a860:	690d      	ldr	r5, [r1, #16]
 800a862:	4607      	mov	r7, r0
 800a864:	460c      	mov	r4, r1
 800a866:	461e      	mov	r6, r3
 800a868:	f101 0c14 	add.w	ip, r1, #20
 800a86c:	2000      	movs	r0, #0
 800a86e:	f8dc 3000 	ldr.w	r3, [ip]
 800a872:	b299      	uxth	r1, r3
 800a874:	fb02 6101 	mla	r1, r2, r1, r6
 800a878:	0c1e      	lsrs	r6, r3, #16
 800a87a:	0c0b      	lsrs	r3, r1, #16
 800a87c:	fb02 3306 	mla	r3, r2, r6, r3
 800a880:	b289      	uxth	r1, r1
 800a882:	3001      	adds	r0, #1
 800a884:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a888:	4285      	cmp	r5, r0
 800a88a:	f84c 1b04 	str.w	r1, [ip], #4
 800a88e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a892:	dcec      	bgt.n	800a86e <__multadd+0x12>
 800a894:	b30e      	cbz	r6, 800a8da <__multadd+0x7e>
 800a896:	68a3      	ldr	r3, [r4, #8]
 800a898:	42ab      	cmp	r3, r5
 800a89a:	dc19      	bgt.n	800a8d0 <__multadd+0x74>
 800a89c:	6861      	ldr	r1, [r4, #4]
 800a89e:	4638      	mov	r0, r7
 800a8a0:	3101      	adds	r1, #1
 800a8a2:	f7ff ff79 	bl	800a798 <_Balloc>
 800a8a6:	4680      	mov	r8, r0
 800a8a8:	b928      	cbnz	r0, 800a8b6 <__multadd+0x5a>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e0 <__multadd+0x84>)
 800a8ae:	480d      	ldr	r0, [pc, #52]	@ (800a8e4 <__multadd+0x88>)
 800a8b0:	21ba      	movs	r1, #186	@ 0xba
 800a8b2:	f002 f87d 	bl	800c9b0 <__assert_func>
 800a8b6:	6922      	ldr	r2, [r4, #16]
 800a8b8:	3202      	adds	r2, #2
 800a8ba:	f104 010c 	add.w	r1, r4, #12
 800a8be:	0092      	lsls	r2, r2, #2
 800a8c0:	300c      	adds	r0, #12
 800a8c2:	f7ff f806 	bl	80098d2 <memcpy>
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	4638      	mov	r0, r7
 800a8ca:	f7ff ffa5 	bl	800a818 <_Bfree>
 800a8ce:	4644      	mov	r4, r8
 800a8d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8d4:	3501      	adds	r5, #1
 800a8d6:	615e      	str	r6, [r3, #20]
 800a8d8:	6125      	str	r5, [r4, #16]
 800a8da:	4620      	mov	r0, r4
 800a8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8e0:	0800d987 	.word	0x0800d987
 800a8e4:	0800d998 	.word	0x0800d998

0800a8e8 <__s2b>:
 800a8e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8ec:	460c      	mov	r4, r1
 800a8ee:	4615      	mov	r5, r2
 800a8f0:	461f      	mov	r7, r3
 800a8f2:	2209      	movs	r2, #9
 800a8f4:	3308      	adds	r3, #8
 800a8f6:	4606      	mov	r6, r0
 800a8f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	2201      	movs	r2, #1
 800a900:	429a      	cmp	r2, r3
 800a902:	db09      	blt.n	800a918 <__s2b+0x30>
 800a904:	4630      	mov	r0, r6
 800a906:	f7ff ff47 	bl	800a798 <_Balloc>
 800a90a:	b940      	cbnz	r0, 800a91e <__s2b+0x36>
 800a90c:	4602      	mov	r2, r0
 800a90e:	4b19      	ldr	r3, [pc, #100]	@ (800a974 <__s2b+0x8c>)
 800a910:	4819      	ldr	r0, [pc, #100]	@ (800a978 <__s2b+0x90>)
 800a912:	21d3      	movs	r1, #211	@ 0xd3
 800a914:	f002 f84c 	bl	800c9b0 <__assert_func>
 800a918:	0052      	lsls	r2, r2, #1
 800a91a:	3101      	adds	r1, #1
 800a91c:	e7f0      	b.n	800a900 <__s2b+0x18>
 800a91e:	9b08      	ldr	r3, [sp, #32]
 800a920:	6143      	str	r3, [r0, #20]
 800a922:	2d09      	cmp	r5, #9
 800a924:	f04f 0301 	mov.w	r3, #1
 800a928:	6103      	str	r3, [r0, #16]
 800a92a:	dd16      	ble.n	800a95a <__s2b+0x72>
 800a92c:	f104 0909 	add.w	r9, r4, #9
 800a930:	46c8      	mov	r8, r9
 800a932:	442c      	add	r4, r5
 800a934:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a938:	4601      	mov	r1, r0
 800a93a:	3b30      	subs	r3, #48	@ 0x30
 800a93c:	220a      	movs	r2, #10
 800a93e:	4630      	mov	r0, r6
 800a940:	f7ff ff8c 	bl	800a85c <__multadd>
 800a944:	45a0      	cmp	r8, r4
 800a946:	d1f5      	bne.n	800a934 <__s2b+0x4c>
 800a948:	f1a5 0408 	sub.w	r4, r5, #8
 800a94c:	444c      	add	r4, r9
 800a94e:	1b2d      	subs	r5, r5, r4
 800a950:	1963      	adds	r3, r4, r5
 800a952:	42bb      	cmp	r3, r7
 800a954:	db04      	blt.n	800a960 <__s2b+0x78>
 800a956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a95a:	340a      	adds	r4, #10
 800a95c:	2509      	movs	r5, #9
 800a95e:	e7f6      	b.n	800a94e <__s2b+0x66>
 800a960:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a964:	4601      	mov	r1, r0
 800a966:	3b30      	subs	r3, #48	@ 0x30
 800a968:	220a      	movs	r2, #10
 800a96a:	4630      	mov	r0, r6
 800a96c:	f7ff ff76 	bl	800a85c <__multadd>
 800a970:	e7ee      	b.n	800a950 <__s2b+0x68>
 800a972:	bf00      	nop
 800a974:	0800d987 	.word	0x0800d987
 800a978:	0800d998 	.word	0x0800d998

0800a97c <__hi0bits>:
 800a97c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a980:	4603      	mov	r3, r0
 800a982:	bf36      	itet	cc
 800a984:	0403      	lslcc	r3, r0, #16
 800a986:	2000      	movcs	r0, #0
 800a988:	2010      	movcc	r0, #16
 800a98a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a98e:	bf3c      	itt	cc
 800a990:	021b      	lslcc	r3, r3, #8
 800a992:	3008      	addcc	r0, #8
 800a994:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a998:	bf3c      	itt	cc
 800a99a:	011b      	lslcc	r3, r3, #4
 800a99c:	3004      	addcc	r0, #4
 800a99e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9a2:	bf3c      	itt	cc
 800a9a4:	009b      	lslcc	r3, r3, #2
 800a9a6:	3002      	addcc	r0, #2
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	db05      	blt.n	800a9b8 <__hi0bits+0x3c>
 800a9ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a9b0:	f100 0001 	add.w	r0, r0, #1
 800a9b4:	bf08      	it	eq
 800a9b6:	2020      	moveq	r0, #32
 800a9b8:	4770      	bx	lr

0800a9ba <__lo0bits>:
 800a9ba:	6803      	ldr	r3, [r0, #0]
 800a9bc:	4602      	mov	r2, r0
 800a9be:	f013 0007 	ands.w	r0, r3, #7
 800a9c2:	d00b      	beq.n	800a9dc <__lo0bits+0x22>
 800a9c4:	07d9      	lsls	r1, r3, #31
 800a9c6:	d421      	bmi.n	800aa0c <__lo0bits+0x52>
 800a9c8:	0798      	lsls	r0, r3, #30
 800a9ca:	bf49      	itett	mi
 800a9cc:	085b      	lsrmi	r3, r3, #1
 800a9ce:	089b      	lsrpl	r3, r3, #2
 800a9d0:	2001      	movmi	r0, #1
 800a9d2:	6013      	strmi	r3, [r2, #0]
 800a9d4:	bf5c      	itt	pl
 800a9d6:	6013      	strpl	r3, [r2, #0]
 800a9d8:	2002      	movpl	r0, #2
 800a9da:	4770      	bx	lr
 800a9dc:	b299      	uxth	r1, r3
 800a9de:	b909      	cbnz	r1, 800a9e4 <__lo0bits+0x2a>
 800a9e0:	0c1b      	lsrs	r3, r3, #16
 800a9e2:	2010      	movs	r0, #16
 800a9e4:	b2d9      	uxtb	r1, r3
 800a9e6:	b909      	cbnz	r1, 800a9ec <__lo0bits+0x32>
 800a9e8:	3008      	adds	r0, #8
 800a9ea:	0a1b      	lsrs	r3, r3, #8
 800a9ec:	0719      	lsls	r1, r3, #28
 800a9ee:	bf04      	itt	eq
 800a9f0:	091b      	lsreq	r3, r3, #4
 800a9f2:	3004      	addeq	r0, #4
 800a9f4:	0799      	lsls	r1, r3, #30
 800a9f6:	bf04      	itt	eq
 800a9f8:	089b      	lsreq	r3, r3, #2
 800a9fa:	3002      	addeq	r0, #2
 800a9fc:	07d9      	lsls	r1, r3, #31
 800a9fe:	d403      	bmi.n	800aa08 <__lo0bits+0x4e>
 800aa00:	085b      	lsrs	r3, r3, #1
 800aa02:	f100 0001 	add.w	r0, r0, #1
 800aa06:	d003      	beq.n	800aa10 <__lo0bits+0x56>
 800aa08:	6013      	str	r3, [r2, #0]
 800aa0a:	4770      	bx	lr
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	4770      	bx	lr
 800aa10:	2020      	movs	r0, #32
 800aa12:	4770      	bx	lr

0800aa14 <__i2b>:
 800aa14:	b510      	push	{r4, lr}
 800aa16:	460c      	mov	r4, r1
 800aa18:	2101      	movs	r1, #1
 800aa1a:	f7ff febd 	bl	800a798 <_Balloc>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	b928      	cbnz	r0, 800aa2e <__i2b+0x1a>
 800aa22:	4b05      	ldr	r3, [pc, #20]	@ (800aa38 <__i2b+0x24>)
 800aa24:	4805      	ldr	r0, [pc, #20]	@ (800aa3c <__i2b+0x28>)
 800aa26:	f240 1145 	movw	r1, #325	@ 0x145
 800aa2a:	f001 ffc1 	bl	800c9b0 <__assert_func>
 800aa2e:	2301      	movs	r3, #1
 800aa30:	6144      	str	r4, [r0, #20]
 800aa32:	6103      	str	r3, [r0, #16]
 800aa34:	bd10      	pop	{r4, pc}
 800aa36:	bf00      	nop
 800aa38:	0800d987 	.word	0x0800d987
 800aa3c:	0800d998 	.word	0x0800d998

0800aa40 <__multiply>:
 800aa40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa44:	4614      	mov	r4, r2
 800aa46:	690a      	ldr	r2, [r1, #16]
 800aa48:	6923      	ldr	r3, [r4, #16]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	bfa8      	it	ge
 800aa4e:	4623      	movge	r3, r4
 800aa50:	460f      	mov	r7, r1
 800aa52:	bfa4      	itt	ge
 800aa54:	460c      	movge	r4, r1
 800aa56:	461f      	movge	r7, r3
 800aa58:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800aa5c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800aa60:	68a3      	ldr	r3, [r4, #8]
 800aa62:	6861      	ldr	r1, [r4, #4]
 800aa64:	eb0a 0609 	add.w	r6, sl, r9
 800aa68:	42b3      	cmp	r3, r6
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	bfb8      	it	lt
 800aa6e:	3101      	addlt	r1, #1
 800aa70:	f7ff fe92 	bl	800a798 <_Balloc>
 800aa74:	b930      	cbnz	r0, 800aa84 <__multiply+0x44>
 800aa76:	4602      	mov	r2, r0
 800aa78:	4b44      	ldr	r3, [pc, #272]	@ (800ab8c <__multiply+0x14c>)
 800aa7a:	4845      	ldr	r0, [pc, #276]	@ (800ab90 <__multiply+0x150>)
 800aa7c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aa80:	f001 ff96 	bl	800c9b0 <__assert_func>
 800aa84:	f100 0514 	add.w	r5, r0, #20
 800aa88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa8c:	462b      	mov	r3, r5
 800aa8e:	2200      	movs	r2, #0
 800aa90:	4543      	cmp	r3, r8
 800aa92:	d321      	bcc.n	800aad8 <__multiply+0x98>
 800aa94:	f107 0114 	add.w	r1, r7, #20
 800aa98:	f104 0214 	add.w	r2, r4, #20
 800aa9c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800aaa0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800aaa4:	9302      	str	r3, [sp, #8]
 800aaa6:	1b13      	subs	r3, r2, r4
 800aaa8:	3b15      	subs	r3, #21
 800aaaa:	f023 0303 	bic.w	r3, r3, #3
 800aaae:	3304      	adds	r3, #4
 800aab0:	f104 0715 	add.w	r7, r4, #21
 800aab4:	42ba      	cmp	r2, r7
 800aab6:	bf38      	it	cc
 800aab8:	2304      	movcc	r3, #4
 800aaba:	9301      	str	r3, [sp, #4]
 800aabc:	9b02      	ldr	r3, [sp, #8]
 800aabe:	9103      	str	r1, [sp, #12]
 800aac0:	428b      	cmp	r3, r1
 800aac2:	d80c      	bhi.n	800aade <__multiply+0x9e>
 800aac4:	2e00      	cmp	r6, #0
 800aac6:	dd03      	ble.n	800aad0 <__multiply+0x90>
 800aac8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d05b      	beq.n	800ab88 <__multiply+0x148>
 800aad0:	6106      	str	r6, [r0, #16]
 800aad2:	b005      	add	sp, #20
 800aad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aad8:	f843 2b04 	str.w	r2, [r3], #4
 800aadc:	e7d8      	b.n	800aa90 <__multiply+0x50>
 800aade:	f8b1 a000 	ldrh.w	sl, [r1]
 800aae2:	f1ba 0f00 	cmp.w	sl, #0
 800aae6:	d024      	beq.n	800ab32 <__multiply+0xf2>
 800aae8:	f104 0e14 	add.w	lr, r4, #20
 800aaec:	46a9      	mov	r9, r5
 800aaee:	f04f 0c00 	mov.w	ip, #0
 800aaf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aaf6:	f8d9 3000 	ldr.w	r3, [r9]
 800aafa:	fa1f fb87 	uxth.w	fp, r7
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	fb0a 330b 	mla	r3, sl, fp, r3
 800ab04:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ab08:	f8d9 7000 	ldr.w	r7, [r9]
 800ab0c:	4463      	add	r3, ip
 800ab0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ab12:	fb0a c70b 	mla	r7, sl, fp, ip
 800ab16:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ab20:	4572      	cmp	r2, lr
 800ab22:	f849 3b04 	str.w	r3, [r9], #4
 800ab26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ab2a:	d8e2      	bhi.n	800aaf2 <__multiply+0xb2>
 800ab2c:	9b01      	ldr	r3, [sp, #4]
 800ab2e:	f845 c003 	str.w	ip, [r5, r3]
 800ab32:	9b03      	ldr	r3, [sp, #12]
 800ab34:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ab38:	3104      	adds	r1, #4
 800ab3a:	f1b9 0f00 	cmp.w	r9, #0
 800ab3e:	d021      	beq.n	800ab84 <__multiply+0x144>
 800ab40:	682b      	ldr	r3, [r5, #0]
 800ab42:	f104 0c14 	add.w	ip, r4, #20
 800ab46:	46ae      	mov	lr, r5
 800ab48:	f04f 0a00 	mov.w	sl, #0
 800ab4c:	f8bc b000 	ldrh.w	fp, [ip]
 800ab50:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ab54:	fb09 770b 	mla	r7, r9, fp, r7
 800ab58:	4457      	add	r7, sl
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ab60:	f84e 3b04 	str.w	r3, [lr], #4
 800ab64:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ab68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ab6c:	f8be 3000 	ldrh.w	r3, [lr]
 800ab70:	fb09 330a 	mla	r3, r9, sl, r3
 800ab74:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ab78:	4562      	cmp	r2, ip
 800ab7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ab7e:	d8e5      	bhi.n	800ab4c <__multiply+0x10c>
 800ab80:	9f01      	ldr	r7, [sp, #4]
 800ab82:	51eb      	str	r3, [r5, r7]
 800ab84:	3504      	adds	r5, #4
 800ab86:	e799      	b.n	800aabc <__multiply+0x7c>
 800ab88:	3e01      	subs	r6, #1
 800ab8a:	e79b      	b.n	800aac4 <__multiply+0x84>
 800ab8c:	0800d987 	.word	0x0800d987
 800ab90:	0800d998 	.word	0x0800d998

0800ab94 <__pow5mult>:
 800ab94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab98:	4615      	mov	r5, r2
 800ab9a:	f012 0203 	ands.w	r2, r2, #3
 800ab9e:	4607      	mov	r7, r0
 800aba0:	460e      	mov	r6, r1
 800aba2:	d007      	beq.n	800abb4 <__pow5mult+0x20>
 800aba4:	4c25      	ldr	r4, [pc, #148]	@ (800ac3c <__pow5mult+0xa8>)
 800aba6:	3a01      	subs	r2, #1
 800aba8:	2300      	movs	r3, #0
 800abaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800abae:	f7ff fe55 	bl	800a85c <__multadd>
 800abb2:	4606      	mov	r6, r0
 800abb4:	10ad      	asrs	r5, r5, #2
 800abb6:	d03d      	beq.n	800ac34 <__pow5mult+0xa0>
 800abb8:	69fc      	ldr	r4, [r7, #28]
 800abba:	b97c      	cbnz	r4, 800abdc <__pow5mult+0x48>
 800abbc:	2010      	movs	r0, #16
 800abbe:	f7ff fd35 	bl	800a62c <malloc>
 800abc2:	4602      	mov	r2, r0
 800abc4:	61f8      	str	r0, [r7, #28]
 800abc6:	b928      	cbnz	r0, 800abd4 <__pow5mult+0x40>
 800abc8:	4b1d      	ldr	r3, [pc, #116]	@ (800ac40 <__pow5mult+0xac>)
 800abca:	481e      	ldr	r0, [pc, #120]	@ (800ac44 <__pow5mult+0xb0>)
 800abcc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800abd0:	f001 feee 	bl	800c9b0 <__assert_func>
 800abd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800abd8:	6004      	str	r4, [r0, #0]
 800abda:	60c4      	str	r4, [r0, #12]
 800abdc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800abe0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800abe4:	b94c      	cbnz	r4, 800abfa <__pow5mult+0x66>
 800abe6:	f240 2171 	movw	r1, #625	@ 0x271
 800abea:	4638      	mov	r0, r7
 800abec:	f7ff ff12 	bl	800aa14 <__i2b>
 800abf0:	2300      	movs	r3, #0
 800abf2:	f8c8 0008 	str.w	r0, [r8, #8]
 800abf6:	4604      	mov	r4, r0
 800abf8:	6003      	str	r3, [r0, #0]
 800abfa:	f04f 0900 	mov.w	r9, #0
 800abfe:	07eb      	lsls	r3, r5, #31
 800ac00:	d50a      	bpl.n	800ac18 <__pow5mult+0x84>
 800ac02:	4631      	mov	r1, r6
 800ac04:	4622      	mov	r2, r4
 800ac06:	4638      	mov	r0, r7
 800ac08:	f7ff ff1a 	bl	800aa40 <__multiply>
 800ac0c:	4631      	mov	r1, r6
 800ac0e:	4680      	mov	r8, r0
 800ac10:	4638      	mov	r0, r7
 800ac12:	f7ff fe01 	bl	800a818 <_Bfree>
 800ac16:	4646      	mov	r6, r8
 800ac18:	106d      	asrs	r5, r5, #1
 800ac1a:	d00b      	beq.n	800ac34 <__pow5mult+0xa0>
 800ac1c:	6820      	ldr	r0, [r4, #0]
 800ac1e:	b938      	cbnz	r0, 800ac30 <__pow5mult+0x9c>
 800ac20:	4622      	mov	r2, r4
 800ac22:	4621      	mov	r1, r4
 800ac24:	4638      	mov	r0, r7
 800ac26:	f7ff ff0b 	bl	800aa40 <__multiply>
 800ac2a:	6020      	str	r0, [r4, #0]
 800ac2c:	f8c0 9000 	str.w	r9, [r0]
 800ac30:	4604      	mov	r4, r0
 800ac32:	e7e4      	b.n	800abfe <__pow5mult+0x6a>
 800ac34:	4630      	mov	r0, r6
 800ac36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac3a:	bf00      	nop
 800ac3c:	0800d9f4 	.word	0x0800d9f4
 800ac40:	0800d918 	.word	0x0800d918
 800ac44:	0800d998 	.word	0x0800d998

0800ac48 <__lshift>:
 800ac48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac4c:	460c      	mov	r4, r1
 800ac4e:	6849      	ldr	r1, [r1, #4]
 800ac50:	6923      	ldr	r3, [r4, #16]
 800ac52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac56:	68a3      	ldr	r3, [r4, #8]
 800ac58:	4607      	mov	r7, r0
 800ac5a:	4691      	mov	r9, r2
 800ac5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac60:	f108 0601 	add.w	r6, r8, #1
 800ac64:	42b3      	cmp	r3, r6
 800ac66:	db0b      	blt.n	800ac80 <__lshift+0x38>
 800ac68:	4638      	mov	r0, r7
 800ac6a:	f7ff fd95 	bl	800a798 <_Balloc>
 800ac6e:	4605      	mov	r5, r0
 800ac70:	b948      	cbnz	r0, 800ac86 <__lshift+0x3e>
 800ac72:	4602      	mov	r2, r0
 800ac74:	4b28      	ldr	r3, [pc, #160]	@ (800ad18 <__lshift+0xd0>)
 800ac76:	4829      	ldr	r0, [pc, #164]	@ (800ad1c <__lshift+0xd4>)
 800ac78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ac7c:	f001 fe98 	bl	800c9b0 <__assert_func>
 800ac80:	3101      	adds	r1, #1
 800ac82:	005b      	lsls	r3, r3, #1
 800ac84:	e7ee      	b.n	800ac64 <__lshift+0x1c>
 800ac86:	2300      	movs	r3, #0
 800ac88:	f100 0114 	add.w	r1, r0, #20
 800ac8c:	f100 0210 	add.w	r2, r0, #16
 800ac90:	4618      	mov	r0, r3
 800ac92:	4553      	cmp	r3, sl
 800ac94:	db33      	blt.n	800acfe <__lshift+0xb6>
 800ac96:	6920      	ldr	r0, [r4, #16]
 800ac98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac9c:	f104 0314 	add.w	r3, r4, #20
 800aca0:	f019 091f 	ands.w	r9, r9, #31
 800aca4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aca8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800acac:	d02b      	beq.n	800ad06 <__lshift+0xbe>
 800acae:	f1c9 0e20 	rsb	lr, r9, #32
 800acb2:	468a      	mov	sl, r1
 800acb4:	2200      	movs	r2, #0
 800acb6:	6818      	ldr	r0, [r3, #0]
 800acb8:	fa00 f009 	lsl.w	r0, r0, r9
 800acbc:	4310      	orrs	r0, r2
 800acbe:	f84a 0b04 	str.w	r0, [sl], #4
 800acc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800acc6:	459c      	cmp	ip, r3
 800acc8:	fa22 f20e 	lsr.w	r2, r2, lr
 800accc:	d8f3      	bhi.n	800acb6 <__lshift+0x6e>
 800acce:	ebac 0304 	sub.w	r3, ip, r4
 800acd2:	3b15      	subs	r3, #21
 800acd4:	f023 0303 	bic.w	r3, r3, #3
 800acd8:	3304      	adds	r3, #4
 800acda:	f104 0015 	add.w	r0, r4, #21
 800acde:	4584      	cmp	ip, r0
 800ace0:	bf38      	it	cc
 800ace2:	2304      	movcc	r3, #4
 800ace4:	50ca      	str	r2, [r1, r3]
 800ace6:	b10a      	cbz	r2, 800acec <__lshift+0xa4>
 800ace8:	f108 0602 	add.w	r6, r8, #2
 800acec:	3e01      	subs	r6, #1
 800acee:	4638      	mov	r0, r7
 800acf0:	612e      	str	r6, [r5, #16]
 800acf2:	4621      	mov	r1, r4
 800acf4:	f7ff fd90 	bl	800a818 <_Bfree>
 800acf8:	4628      	mov	r0, r5
 800acfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acfe:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad02:	3301      	adds	r3, #1
 800ad04:	e7c5      	b.n	800ac92 <__lshift+0x4a>
 800ad06:	3904      	subs	r1, #4
 800ad08:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad0c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad10:	459c      	cmp	ip, r3
 800ad12:	d8f9      	bhi.n	800ad08 <__lshift+0xc0>
 800ad14:	e7ea      	b.n	800acec <__lshift+0xa4>
 800ad16:	bf00      	nop
 800ad18:	0800d987 	.word	0x0800d987
 800ad1c:	0800d998 	.word	0x0800d998

0800ad20 <__mcmp>:
 800ad20:	690a      	ldr	r2, [r1, #16]
 800ad22:	4603      	mov	r3, r0
 800ad24:	6900      	ldr	r0, [r0, #16]
 800ad26:	1a80      	subs	r0, r0, r2
 800ad28:	b530      	push	{r4, r5, lr}
 800ad2a:	d10e      	bne.n	800ad4a <__mcmp+0x2a>
 800ad2c:	3314      	adds	r3, #20
 800ad2e:	3114      	adds	r1, #20
 800ad30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ad34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ad38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ad3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ad40:	4295      	cmp	r5, r2
 800ad42:	d003      	beq.n	800ad4c <__mcmp+0x2c>
 800ad44:	d205      	bcs.n	800ad52 <__mcmp+0x32>
 800ad46:	f04f 30ff 	mov.w	r0, #4294967295
 800ad4a:	bd30      	pop	{r4, r5, pc}
 800ad4c:	42a3      	cmp	r3, r4
 800ad4e:	d3f3      	bcc.n	800ad38 <__mcmp+0x18>
 800ad50:	e7fb      	b.n	800ad4a <__mcmp+0x2a>
 800ad52:	2001      	movs	r0, #1
 800ad54:	e7f9      	b.n	800ad4a <__mcmp+0x2a>
	...

0800ad58 <__mdiff>:
 800ad58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	4689      	mov	r9, r1
 800ad5e:	4606      	mov	r6, r0
 800ad60:	4611      	mov	r1, r2
 800ad62:	4648      	mov	r0, r9
 800ad64:	4614      	mov	r4, r2
 800ad66:	f7ff ffdb 	bl	800ad20 <__mcmp>
 800ad6a:	1e05      	subs	r5, r0, #0
 800ad6c:	d112      	bne.n	800ad94 <__mdiff+0x3c>
 800ad6e:	4629      	mov	r1, r5
 800ad70:	4630      	mov	r0, r6
 800ad72:	f7ff fd11 	bl	800a798 <_Balloc>
 800ad76:	4602      	mov	r2, r0
 800ad78:	b928      	cbnz	r0, 800ad86 <__mdiff+0x2e>
 800ad7a:	4b3f      	ldr	r3, [pc, #252]	@ (800ae78 <__mdiff+0x120>)
 800ad7c:	f240 2137 	movw	r1, #567	@ 0x237
 800ad80:	483e      	ldr	r0, [pc, #248]	@ (800ae7c <__mdiff+0x124>)
 800ad82:	f001 fe15 	bl	800c9b0 <__assert_func>
 800ad86:	2301      	movs	r3, #1
 800ad88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad8c:	4610      	mov	r0, r2
 800ad8e:	b003      	add	sp, #12
 800ad90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad94:	bfbc      	itt	lt
 800ad96:	464b      	movlt	r3, r9
 800ad98:	46a1      	movlt	r9, r4
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ada0:	bfba      	itte	lt
 800ada2:	461c      	movlt	r4, r3
 800ada4:	2501      	movlt	r5, #1
 800ada6:	2500      	movge	r5, #0
 800ada8:	f7ff fcf6 	bl	800a798 <_Balloc>
 800adac:	4602      	mov	r2, r0
 800adae:	b918      	cbnz	r0, 800adb8 <__mdiff+0x60>
 800adb0:	4b31      	ldr	r3, [pc, #196]	@ (800ae78 <__mdiff+0x120>)
 800adb2:	f240 2145 	movw	r1, #581	@ 0x245
 800adb6:	e7e3      	b.n	800ad80 <__mdiff+0x28>
 800adb8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800adbc:	6926      	ldr	r6, [r4, #16]
 800adbe:	60c5      	str	r5, [r0, #12]
 800adc0:	f109 0310 	add.w	r3, r9, #16
 800adc4:	f109 0514 	add.w	r5, r9, #20
 800adc8:	f104 0e14 	add.w	lr, r4, #20
 800adcc:	f100 0b14 	add.w	fp, r0, #20
 800add0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800add4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800add8:	9301      	str	r3, [sp, #4]
 800adda:	46d9      	mov	r9, fp
 800addc:	f04f 0c00 	mov.w	ip, #0
 800ade0:	9b01      	ldr	r3, [sp, #4]
 800ade2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ade6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800adea:	9301      	str	r3, [sp, #4]
 800adec:	fa1f f38a 	uxth.w	r3, sl
 800adf0:	4619      	mov	r1, r3
 800adf2:	b283      	uxth	r3, r0
 800adf4:	1acb      	subs	r3, r1, r3
 800adf6:	0c00      	lsrs	r0, r0, #16
 800adf8:	4463      	add	r3, ip
 800adfa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800adfe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ae08:	4576      	cmp	r6, lr
 800ae0a:	f849 3b04 	str.w	r3, [r9], #4
 800ae0e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ae12:	d8e5      	bhi.n	800ade0 <__mdiff+0x88>
 800ae14:	1b33      	subs	r3, r6, r4
 800ae16:	3b15      	subs	r3, #21
 800ae18:	f023 0303 	bic.w	r3, r3, #3
 800ae1c:	3415      	adds	r4, #21
 800ae1e:	3304      	adds	r3, #4
 800ae20:	42a6      	cmp	r6, r4
 800ae22:	bf38      	it	cc
 800ae24:	2304      	movcc	r3, #4
 800ae26:	441d      	add	r5, r3
 800ae28:	445b      	add	r3, fp
 800ae2a:	461e      	mov	r6, r3
 800ae2c:	462c      	mov	r4, r5
 800ae2e:	4544      	cmp	r4, r8
 800ae30:	d30e      	bcc.n	800ae50 <__mdiff+0xf8>
 800ae32:	f108 0103 	add.w	r1, r8, #3
 800ae36:	1b49      	subs	r1, r1, r5
 800ae38:	f021 0103 	bic.w	r1, r1, #3
 800ae3c:	3d03      	subs	r5, #3
 800ae3e:	45a8      	cmp	r8, r5
 800ae40:	bf38      	it	cc
 800ae42:	2100      	movcc	r1, #0
 800ae44:	440b      	add	r3, r1
 800ae46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae4a:	b191      	cbz	r1, 800ae72 <__mdiff+0x11a>
 800ae4c:	6117      	str	r7, [r2, #16]
 800ae4e:	e79d      	b.n	800ad8c <__mdiff+0x34>
 800ae50:	f854 1b04 	ldr.w	r1, [r4], #4
 800ae54:	46e6      	mov	lr, ip
 800ae56:	0c08      	lsrs	r0, r1, #16
 800ae58:	fa1c fc81 	uxtah	ip, ip, r1
 800ae5c:	4471      	add	r1, lr
 800ae5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ae62:	b289      	uxth	r1, r1
 800ae64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ae68:	f846 1b04 	str.w	r1, [r6], #4
 800ae6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ae70:	e7dd      	b.n	800ae2e <__mdiff+0xd6>
 800ae72:	3f01      	subs	r7, #1
 800ae74:	e7e7      	b.n	800ae46 <__mdiff+0xee>
 800ae76:	bf00      	nop
 800ae78:	0800d987 	.word	0x0800d987
 800ae7c:	0800d998 	.word	0x0800d998

0800ae80 <__ulp>:
 800ae80:	b082      	sub	sp, #8
 800ae82:	ed8d 0b00 	vstr	d0, [sp]
 800ae86:	9a01      	ldr	r2, [sp, #4]
 800ae88:	4b0f      	ldr	r3, [pc, #60]	@ (800aec8 <__ulp+0x48>)
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	dc08      	bgt.n	800aea6 <__ulp+0x26>
 800ae94:	425b      	negs	r3, r3
 800ae96:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ae9a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ae9e:	da04      	bge.n	800aeaa <__ulp+0x2a>
 800aea0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800aea4:	4113      	asrs	r3, r2
 800aea6:	2200      	movs	r2, #0
 800aea8:	e008      	b.n	800aebc <__ulp+0x3c>
 800aeaa:	f1a2 0314 	sub.w	r3, r2, #20
 800aeae:	2b1e      	cmp	r3, #30
 800aeb0:	bfda      	itte	le
 800aeb2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800aeb6:	40da      	lsrle	r2, r3
 800aeb8:	2201      	movgt	r2, #1
 800aeba:	2300      	movs	r3, #0
 800aebc:	4619      	mov	r1, r3
 800aebe:	4610      	mov	r0, r2
 800aec0:	ec41 0b10 	vmov	d0, r0, r1
 800aec4:	b002      	add	sp, #8
 800aec6:	4770      	bx	lr
 800aec8:	7ff00000 	.word	0x7ff00000

0800aecc <__b2d>:
 800aecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aed0:	6906      	ldr	r6, [r0, #16]
 800aed2:	f100 0814 	add.w	r8, r0, #20
 800aed6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800aeda:	1f37      	subs	r7, r6, #4
 800aedc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aee0:	4610      	mov	r0, r2
 800aee2:	f7ff fd4b 	bl	800a97c <__hi0bits>
 800aee6:	f1c0 0320 	rsb	r3, r0, #32
 800aeea:	280a      	cmp	r0, #10
 800aeec:	600b      	str	r3, [r1, #0]
 800aeee:	491b      	ldr	r1, [pc, #108]	@ (800af5c <__b2d+0x90>)
 800aef0:	dc15      	bgt.n	800af1e <__b2d+0x52>
 800aef2:	f1c0 0c0b 	rsb	ip, r0, #11
 800aef6:	fa22 f30c 	lsr.w	r3, r2, ip
 800aefa:	45b8      	cmp	r8, r7
 800aefc:	ea43 0501 	orr.w	r5, r3, r1
 800af00:	bf34      	ite	cc
 800af02:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800af06:	2300      	movcs	r3, #0
 800af08:	3015      	adds	r0, #21
 800af0a:	fa02 f000 	lsl.w	r0, r2, r0
 800af0e:	fa23 f30c 	lsr.w	r3, r3, ip
 800af12:	4303      	orrs	r3, r0
 800af14:	461c      	mov	r4, r3
 800af16:	ec45 4b10 	vmov	d0, r4, r5
 800af1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af1e:	45b8      	cmp	r8, r7
 800af20:	bf3a      	itte	cc
 800af22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800af26:	f1a6 0708 	subcc.w	r7, r6, #8
 800af2a:	2300      	movcs	r3, #0
 800af2c:	380b      	subs	r0, #11
 800af2e:	d012      	beq.n	800af56 <__b2d+0x8a>
 800af30:	f1c0 0120 	rsb	r1, r0, #32
 800af34:	fa23 f401 	lsr.w	r4, r3, r1
 800af38:	4082      	lsls	r2, r0
 800af3a:	4322      	orrs	r2, r4
 800af3c:	4547      	cmp	r7, r8
 800af3e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800af42:	bf8c      	ite	hi
 800af44:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800af48:	2200      	movls	r2, #0
 800af4a:	4083      	lsls	r3, r0
 800af4c:	40ca      	lsrs	r2, r1
 800af4e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800af52:	4313      	orrs	r3, r2
 800af54:	e7de      	b.n	800af14 <__b2d+0x48>
 800af56:	ea42 0501 	orr.w	r5, r2, r1
 800af5a:	e7db      	b.n	800af14 <__b2d+0x48>
 800af5c:	3ff00000 	.word	0x3ff00000

0800af60 <__d2b>:
 800af60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af64:	460f      	mov	r7, r1
 800af66:	2101      	movs	r1, #1
 800af68:	ec59 8b10 	vmov	r8, r9, d0
 800af6c:	4616      	mov	r6, r2
 800af6e:	f7ff fc13 	bl	800a798 <_Balloc>
 800af72:	4604      	mov	r4, r0
 800af74:	b930      	cbnz	r0, 800af84 <__d2b+0x24>
 800af76:	4602      	mov	r2, r0
 800af78:	4b23      	ldr	r3, [pc, #140]	@ (800b008 <__d2b+0xa8>)
 800af7a:	4824      	ldr	r0, [pc, #144]	@ (800b00c <__d2b+0xac>)
 800af7c:	f240 310f 	movw	r1, #783	@ 0x30f
 800af80:	f001 fd16 	bl	800c9b0 <__assert_func>
 800af84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800af88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af8c:	b10d      	cbz	r5, 800af92 <__d2b+0x32>
 800af8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af92:	9301      	str	r3, [sp, #4]
 800af94:	f1b8 0300 	subs.w	r3, r8, #0
 800af98:	d023      	beq.n	800afe2 <__d2b+0x82>
 800af9a:	4668      	mov	r0, sp
 800af9c:	9300      	str	r3, [sp, #0]
 800af9e:	f7ff fd0c 	bl	800a9ba <__lo0bits>
 800afa2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800afa6:	b1d0      	cbz	r0, 800afde <__d2b+0x7e>
 800afa8:	f1c0 0320 	rsb	r3, r0, #32
 800afac:	fa02 f303 	lsl.w	r3, r2, r3
 800afb0:	430b      	orrs	r3, r1
 800afb2:	40c2      	lsrs	r2, r0
 800afb4:	6163      	str	r3, [r4, #20]
 800afb6:	9201      	str	r2, [sp, #4]
 800afb8:	9b01      	ldr	r3, [sp, #4]
 800afba:	61a3      	str	r3, [r4, #24]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	bf0c      	ite	eq
 800afc0:	2201      	moveq	r2, #1
 800afc2:	2202      	movne	r2, #2
 800afc4:	6122      	str	r2, [r4, #16]
 800afc6:	b1a5      	cbz	r5, 800aff2 <__d2b+0x92>
 800afc8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800afcc:	4405      	add	r5, r0
 800afce:	603d      	str	r5, [r7, #0]
 800afd0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800afd4:	6030      	str	r0, [r6, #0]
 800afd6:	4620      	mov	r0, r4
 800afd8:	b003      	add	sp, #12
 800afda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afde:	6161      	str	r1, [r4, #20]
 800afe0:	e7ea      	b.n	800afb8 <__d2b+0x58>
 800afe2:	a801      	add	r0, sp, #4
 800afe4:	f7ff fce9 	bl	800a9ba <__lo0bits>
 800afe8:	9b01      	ldr	r3, [sp, #4]
 800afea:	6163      	str	r3, [r4, #20]
 800afec:	3020      	adds	r0, #32
 800afee:	2201      	movs	r2, #1
 800aff0:	e7e8      	b.n	800afc4 <__d2b+0x64>
 800aff2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aff6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800affa:	6038      	str	r0, [r7, #0]
 800affc:	6918      	ldr	r0, [r3, #16]
 800affe:	f7ff fcbd 	bl	800a97c <__hi0bits>
 800b002:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b006:	e7e5      	b.n	800afd4 <__d2b+0x74>
 800b008:	0800d987 	.word	0x0800d987
 800b00c:	0800d998 	.word	0x0800d998

0800b010 <__ratio>:
 800b010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b014:	b085      	sub	sp, #20
 800b016:	e9cd 1000 	strd	r1, r0, [sp]
 800b01a:	a902      	add	r1, sp, #8
 800b01c:	f7ff ff56 	bl	800aecc <__b2d>
 800b020:	9800      	ldr	r0, [sp, #0]
 800b022:	a903      	add	r1, sp, #12
 800b024:	ec55 4b10 	vmov	r4, r5, d0
 800b028:	f7ff ff50 	bl	800aecc <__b2d>
 800b02c:	9b01      	ldr	r3, [sp, #4]
 800b02e:	6919      	ldr	r1, [r3, #16]
 800b030:	9b00      	ldr	r3, [sp, #0]
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	1ac9      	subs	r1, r1, r3
 800b036:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b03a:	1a9b      	subs	r3, r3, r2
 800b03c:	ec5b ab10 	vmov	sl, fp, d0
 800b040:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b044:	2b00      	cmp	r3, #0
 800b046:	bfce      	itee	gt
 800b048:	462a      	movgt	r2, r5
 800b04a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b04e:	465a      	movle	r2, fp
 800b050:	462f      	mov	r7, r5
 800b052:	46d9      	mov	r9, fp
 800b054:	bfcc      	ite	gt
 800b056:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b05a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b05e:	464b      	mov	r3, r9
 800b060:	4652      	mov	r2, sl
 800b062:	4620      	mov	r0, r4
 800b064:	4639      	mov	r1, r7
 800b066:	f7f5 fc19 	bl	800089c <__aeabi_ddiv>
 800b06a:	ec41 0b10 	vmov	d0, r0, r1
 800b06e:	b005      	add	sp, #20
 800b070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b074 <__copybits>:
 800b074:	3901      	subs	r1, #1
 800b076:	b570      	push	{r4, r5, r6, lr}
 800b078:	1149      	asrs	r1, r1, #5
 800b07a:	6914      	ldr	r4, [r2, #16]
 800b07c:	3101      	adds	r1, #1
 800b07e:	f102 0314 	add.w	r3, r2, #20
 800b082:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b086:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b08a:	1f05      	subs	r5, r0, #4
 800b08c:	42a3      	cmp	r3, r4
 800b08e:	d30c      	bcc.n	800b0aa <__copybits+0x36>
 800b090:	1aa3      	subs	r3, r4, r2
 800b092:	3b11      	subs	r3, #17
 800b094:	f023 0303 	bic.w	r3, r3, #3
 800b098:	3211      	adds	r2, #17
 800b09a:	42a2      	cmp	r2, r4
 800b09c:	bf88      	it	hi
 800b09e:	2300      	movhi	r3, #0
 800b0a0:	4418      	add	r0, r3
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	4288      	cmp	r0, r1
 800b0a6:	d305      	bcc.n	800b0b4 <__copybits+0x40>
 800b0a8:	bd70      	pop	{r4, r5, r6, pc}
 800b0aa:	f853 6b04 	ldr.w	r6, [r3], #4
 800b0ae:	f845 6f04 	str.w	r6, [r5, #4]!
 800b0b2:	e7eb      	b.n	800b08c <__copybits+0x18>
 800b0b4:	f840 3b04 	str.w	r3, [r0], #4
 800b0b8:	e7f4      	b.n	800b0a4 <__copybits+0x30>

0800b0ba <__any_on>:
 800b0ba:	f100 0214 	add.w	r2, r0, #20
 800b0be:	6900      	ldr	r0, [r0, #16]
 800b0c0:	114b      	asrs	r3, r1, #5
 800b0c2:	4298      	cmp	r0, r3
 800b0c4:	b510      	push	{r4, lr}
 800b0c6:	db11      	blt.n	800b0ec <__any_on+0x32>
 800b0c8:	dd0a      	ble.n	800b0e0 <__any_on+0x26>
 800b0ca:	f011 011f 	ands.w	r1, r1, #31
 800b0ce:	d007      	beq.n	800b0e0 <__any_on+0x26>
 800b0d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b0d4:	fa24 f001 	lsr.w	r0, r4, r1
 800b0d8:	fa00 f101 	lsl.w	r1, r0, r1
 800b0dc:	428c      	cmp	r4, r1
 800b0de:	d10b      	bne.n	800b0f8 <__any_on+0x3e>
 800b0e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d803      	bhi.n	800b0f0 <__any_on+0x36>
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	bd10      	pop	{r4, pc}
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	e7f7      	b.n	800b0e0 <__any_on+0x26>
 800b0f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b0f4:	2900      	cmp	r1, #0
 800b0f6:	d0f5      	beq.n	800b0e4 <__any_on+0x2a>
 800b0f8:	2001      	movs	r0, #1
 800b0fa:	e7f6      	b.n	800b0ea <__any_on+0x30>

0800b0fc <sulp>:
 800b0fc:	b570      	push	{r4, r5, r6, lr}
 800b0fe:	4604      	mov	r4, r0
 800b100:	460d      	mov	r5, r1
 800b102:	ec45 4b10 	vmov	d0, r4, r5
 800b106:	4616      	mov	r6, r2
 800b108:	f7ff feba 	bl	800ae80 <__ulp>
 800b10c:	ec51 0b10 	vmov	r0, r1, d0
 800b110:	b17e      	cbz	r6, 800b132 <sulp+0x36>
 800b112:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b116:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	dd09      	ble.n	800b132 <sulp+0x36>
 800b11e:	051b      	lsls	r3, r3, #20
 800b120:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b124:	2400      	movs	r4, #0
 800b126:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b12a:	4622      	mov	r2, r4
 800b12c:	462b      	mov	r3, r5
 800b12e:	f7f5 fa8b 	bl	8000648 <__aeabi_dmul>
 800b132:	ec41 0b10 	vmov	d0, r0, r1
 800b136:	bd70      	pop	{r4, r5, r6, pc}

0800b138 <_strtod_l>:
 800b138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b13c:	b09f      	sub	sp, #124	@ 0x7c
 800b13e:	460c      	mov	r4, r1
 800b140:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b142:	2200      	movs	r2, #0
 800b144:	921a      	str	r2, [sp, #104]	@ 0x68
 800b146:	9005      	str	r0, [sp, #20]
 800b148:	f04f 0a00 	mov.w	sl, #0
 800b14c:	f04f 0b00 	mov.w	fp, #0
 800b150:	460a      	mov	r2, r1
 800b152:	9219      	str	r2, [sp, #100]	@ 0x64
 800b154:	7811      	ldrb	r1, [r2, #0]
 800b156:	292b      	cmp	r1, #43	@ 0x2b
 800b158:	d04a      	beq.n	800b1f0 <_strtod_l+0xb8>
 800b15a:	d838      	bhi.n	800b1ce <_strtod_l+0x96>
 800b15c:	290d      	cmp	r1, #13
 800b15e:	d832      	bhi.n	800b1c6 <_strtod_l+0x8e>
 800b160:	2908      	cmp	r1, #8
 800b162:	d832      	bhi.n	800b1ca <_strtod_l+0x92>
 800b164:	2900      	cmp	r1, #0
 800b166:	d03b      	beq.n	800b1e0 <_strtod_l+0xa8>
 800b168:	2200      	movs	r2, #0
 800b16a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b16c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b16e:	782a      	ldrb	r2, [r5, #0]
 800b170:	2a30      	cmp	r2, #48	@ 0x30
 800b172:	f040 80b3 	bne.w	800b2dc <_strtod_l+0x1a4>
 800b176:	786a      	ldrb	r2, [r5, #1]
 800b178:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b17c:	2a58      	cmp	r2, #88	@ 0x58
 800b17e:	d16e      	bne.n	800b25e <_strtod_l+0x126>
 800b180:	9302      	str	r3, [sp, #8]
 800b182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b184:	9301      	str	r3, [sp, #4]
 800b186:	ab1a      	add	r3, sp, #104	@ 0x68
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	4a8e      	ldr	r2, [pc, #568]	@ (800b3c4 <_strtod_l+0x28c>)
 800b18c:	9805      	ldr	r0, [sp, #20]
 800b18e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b190:	a919      	add	r1, sp, #100	@ 0x64
 800b192:	f001 fca7 	bl	800cae4 <__gethex>
 800b196:	f010 060f 	ands.w	r6, r0, #15
 800b19a:	4604      	mov	r4, r0
 800b19c:	d005      	beq.n	800b1aa <_strtod_l+0x72>
 800b19e:	2e06      	cmp	r6, #6
 800b1a0:	d128      	bne.n	800b1f4 <_strtod_l+0xbc>
 800b1a2:	3501      	adds	r5, #1
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	9519      	str	r5, [sp, #100]	@ 0x64
 800b1a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f040 858e 	bne.w	800bcce <_strtod_l+0xb96>
 800b1b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1b4:	b1cb      	cbz	r3, 800b1ea <_strtod_l+0xb2>
 800b1b6:	4652      	mov	r2, sl
 800b1b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b1bc:	ec43 2b10 	vmov	d0, r2, r3
 800b1c0:	b01f      	add	sp, #124	@ 0x7c
 800b1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c6:	2920      	cmp	r1, #32
 800b1c8:	d1ce      	bne.n	800b168 <_strtod_l+0x30>
 800b1ca:	3201      	adds	r2, #1
 800b1cc:	e7c1      	b.n	800b152 <_strtod_l+0x1a>
 800b1ce:	292d      	cmp	r1, #45	@ 0x2d
 800b1d0:	d1ca      	bne.n	800b168 <_strtod_l+0x30>
 800b1d2:	2101      	movs	r1, #1
 800b1d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b1d6:	1c51      	adds	r1, r2, #1
 800b1d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800b1da:	7852      	ldrb	r2, [r2, #1]
 800b1dc:	2a00      	cmp	r2, #0
 800b1de:	d1c5      	bne.n	800b16c <_strtod_l+0x34>
 800b1e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b1e2:	9419      	str	r4, [sp, #100]	@ 0x64
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f040 8570 	bne.w	800bcca <_strtod_l+0xb92>
 800b1ea:	4652      	mov	r2, sl
 800b1ec:	465b      	mov	r3, fp
 800b1ee:	e7e5      	b.n	800b1bc <_strtod_l+0x84>
 800b1f0:	2100      	movs	r1, #0
 800b1f2:	e7ef      	b.n	800b1d4 <_strtod_l+0x9c>
 800b1f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b1f6:	b13a      	cbz	r2, 800b208 <_strtod_l+0xd0>
 800b1f8:	2135      	movs	r1, #53	@ 0x35
 800b1fa:	a81c      	add	r0, sp, #112	@ 0x70
 800b1fc:	f7ff ff3a 	bl	800b074 <__copybits>
 800b200:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b202:	9805      	ldr	r0, [sp, #20]
 800b204:	f7ff fb08 	bl	800a818 <_Bfree>
 800b208:	3e01      	subs	r6, #1
 800b20a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b20c:	2e04      	cmp	r6, #4
 800b20e:	d806      	bhi.n	800b21e <_strtod_l+0xe6>
 800b210:	e8df f006 	tbb	[pc, r6]
 800b214:	201d0314 	.word	0x201d0314
 800b218:	14          	.byte	0x14
 800b219:	00          	.byte	0x00
 800b21a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b21e:	05e1      	lsls	r1, r4, #23
 800b220:	bf48      	it	mi
 800b222:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b226:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b22a:	0d1b      	lsrs	r3, r3, #20
 800b22c:	051b      	lsls	r3, r3, #20
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1bb      	bne.n	800b1aa <_strtod_l+0x72>
 800b232:	f7fe fb21 	bl	8009878 <__errno>
 800b236:	2322      	movs	r3, #34	@ 0x22
 800b238:	6003      	str	r3, [r0, #0]
 800b23a:	e7b6      	b.n	800b1aa <_strtod_l+0x72>
 800b23c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b240:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b244:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b248:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b24c:	e7e7      	b.n	800b21e <_strtod_l+0xe6>
 800b24e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b3cc <_strtod_l+0x294>
 800b252:	e7e4      	b.n	800b21e <_strtod_l+0xe6>
 800b254:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b258:	f04f 3aff 	mov.w	sl, #4294967295
 800b25c:	e7df      	b.n	800b21e <_strtod_l+0xe6>
 800b25e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b260:	1c5a      	adds	r2, r3, #1
 800b262:	9219      	str	r2, [sp, #100]	@ 0x64
 800b264:	785b      	ldrb	r3, [r3, #1]
 800b266:	2b30      	cmp	r3, #48	@ 0x30
 800b268:	d0f9      	beq.n	800b25e <_strtod_l+0x126>
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d09d      	beq.n	800b1aa <_strtod_l+0x72>
 800b26e:	2301      	movs	r3, #1
 800b270:	9309      	str	r3, [sp, #36]	@ 0x24
 800b272:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b274:	930c      	str	r3, [sp, #48]	@ 0x30
 800b276:	2300      	movs	r3, #0
 800b278:	9308      	str	r3, [sp, #32]
 800b27a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b27c:	461f      	mov	r7, r3
 800b27e:	220a      	movs	r2, #10
 800b280:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b282:	7805      	ldrb	r5, [r0, #0]
 800b284:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b288:	b2d9      	uxtb	r1, r3
 800b28a:	2909      	cmp	r1, #9
 800b28c:	d928      	bls.n	800b2e0 <_strtod_l+0x1a8>
 800b28e:	494e      	ldr	r1, [pc, #312]	@ (800b3c8 <_strtod_l+0x290>)
 800b290:	2201      	movs	r2, #1
 800b292:	f001 fb62 	bl	800c95a <strncmp>
 800b296:	2800      	cmp	r0, #0
 800b298:	d032      	beq.n	800b300 <_strtod_l+0x1c8>
 800b29a:	2000      	movs	r0, #0
 800b29c:	462a      	mov	r2, r5
 800b29e:	4681      	mov	r9, r0
 800b2a0:	463d      	mov	r5, r7
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2a65      	cmp	r2, #101	@ 0x65
 800b2a6:	d001      	beq.n	800b2ac <_strtod_l+0x174>
 800b2a8:	2a45      	cmp	r2, #69	@ 0x45
 800b2aa:	d114      	bne.n	800b2d6 <_strtod_l+0x19e>
 800b2ac:	b91d      	cbnz	r5, 800b2b6 <_strtod_l+0x17e>
 800b2ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2b0:	4302      	orrs	r2, r0
 800b2b2:	d095      	beq.n	800b1e0 <_strtod_l+0xa8>
 800b2b4:	2500      	movs	r5, #0
 800b2b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b2b8:	1c62      	adds	r2, r4, #1
 800b2ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800b2bc:	7862      	ldrb	r2, [r4, #1]
 800b2be:	2a2b      	cmp	r2, #43	@ 0x2b
 800b2c0:	d077      	beq.n	800b3b2 <_strtod_l+0x27a>
 800b2c2:	2a2d      	cmp	r2, #45	@ 0x2d
 800b2c4:	d07b      	beq.n	800b3be <_strtod_l+0x286>
 800b2c6:	f04f 0c00 	mov.w	ip, #0
 800b2ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b2ce:	2909      	cmp	r1, #9
 800b2d0:	f240 8082 	bls.w	800b3d8 <_strtod_l+0x2a0>
 800b2d4:	9419      	str	r4, [sp, #100]	@ 0x64
 800b2d6:	f04f 0800 	mov.w	r8, #0
 800b2da:	e0a2      	b.n	800b422 <_strtod_l+0x2ea>
 800b2dc:	2300      	movs	r3, #0
 800b2de:	e7c7      	b.n	800b270 <_strtod_l+0x138>
 800b2e0:	2f08      	cmp	r7, #8
 800b2e2:	bfd5      	itete	le
 800b2e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b2e6:	9908      	ldrgt	r1, [sp, #32]
 800b2e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800b2ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b2f0:	f100 0001 	add.w	r0, r0, #1
 800b2f4:	bfd4      	ite	le
 800b2f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b2f8:	9308      	strgt	r3, [sp, #32]
 800b2fa:	3701      	adds	r7, #1
 800b2fc:	9019      	str	r0, [sp, #100]	@ 0x64
 800b2fe:	e7bf      	b.n	800b280 <_strtod_l+0x148>
 800b300:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b302:	1c5a      	adds	r2, r3, #1
 800b304:	9219      	str	r2, [sp, #100]	@ 0x64
 800b306:	785a      	ldrb	r2, [r3, #1]
 800b308:	b37f      	cbz	r7, 800b36a <_strtod_l+0x232>
 800b30a:	4681      	mov	r9, r0
 800b30c:	463d      	mov	r5, r7
 800b30e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b312:	2b09      	cmp	r3, #9
 800b314:	d912      	bls.n	800b33c <_strtod_l+0x204>
 800b316:	2301      	movs	r3, #1
 800b318:	e7c4      	b.n	800b2a4 <_strtod_l+0x16c>
 800b31a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b31c:	1c5a      	adds	r2, r3, #1
 800b31e:	9219      	str	r2, [sp, #100]	@ 0x64
 800b320:	785a      	ldrb	r2, [r3, #1]
 800b322:	3001      	adds	r0, #1
 800b324:	2a30      	cmp	r2, #48	@ 0x30
 800b326:	d0f8      	beq.n	800b31a <_strtod_l+0x1e2>
 800b328:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b32c:	2b08      	cmp	r3, #8
 800b32e:	f200 84d3 	bhi.w	800bcd8 <_strtod_l+0xba0>
 800b332:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b334:	930c      	str	r3, [sp, #48]	@ 0x30
 800b336:	4681      	mov	r9, r0
 800b338:	2000      	movs	r0, #0
 800b33a:	4605      	mov	r5, r0
 800b33c:	3a30      	subs	r2, #48	@ 0x30
 800b33e:	f100 0301 	add.w	r3, r0, #1
 800b342:	d02a      	beq.n	800b39a <_strtod_l+0x262>
 800b344:	4499      	add	r9, r3
 800b346:	eb00 0c05 	add.w	ip, r0, r5
 800b34a:	462b      	mov	r3, r5
 800b34c:	210a      	movs	r1, #10
 800b34e:	4563      	cmp	r3, ip
 800b350:	d10d      	bne.n	800b36e <_strtod_l+0x236>
 800b352:	1c69      	adds	r1, r5, #1
 800b354:	4401      	add	r1, r0
 800b356:	4428      	add	r0, r5
 800b358:	2808      	cmp	r0, #8
 800b35a:	dc16      	bgt.n	800b38a <_strtod_l+0x252>
 800b35c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b35e:	230a      	movs	r3, #10
 800b360:	fb03 2300 	mla	r3, r3, r0, r2
 800b364:	930a      	str	r3, [sp, #40]	@ 0x28
 800b366:	2300      	movs	r3, #0
 800b368:	e018      	b.n	800b39c <_strtod_l+0x264>
 800b36a:	4638      	mov	r0, r7
 800b36c:	e7da      	b.n	800b324 <_strtod_l+0x1ec>
 800b36e:	2b08      	cmp	r3, #8
 800b370:	f103 0301 	add.w	r3, r3, #1
 800b374:	dc03      	bgt.n	800b37e <_strtod_l+0x246>
 800b376:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b378:	434e      	muls	r6, r1
 800b37a:	960a      	str	r6, [sp, #40]	@ 0x28
 800b37c:	e7e7      	b.n	800b34e <_strtod_l+0x216>
 800b37e:	2b10      	cmp	r3, #16
 800b380:	bfde      	ittt	le
 800b382:	9e08      	ldrle	r6, [sp, #32]
 800b384:	434e      	mulle	r6, r1
 800b386:	9608      	strle	r6, [sp, #32]
 800b388:	e7e1      	b.n	800b34e <_strtod_l+0x216>
 800b38a:	280f      	cmp	r0, #15
 800b38c:	dceb      	bgt.n	800b366 <_strtod_l+0x22e>
 800b38e:	9808      	ldr	r0, [sp, #32]
 800b390:	230a      	movs	r3, #10
 800b392:	fb03 2300 	mla	r3, r3, r0, r2
 800b396:	9308      	str	r3, [sp, #32]
 800b398:	e7e5      	b.n	800b366 <_strtod_l+0x22e>
 800b39a:	4629      	mov	r1, r5
 800b39c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b39e:	1c50      	adds	r0, r2, #1
 800b3a0:	9019      	str	r0, [sp, #100]	@ 0x64
 800b3a2:	7852      	ldrb	r2, [r2, #1]
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	460d      	mov	r5, r1
 800b3a8:	e7b1      	b.n	800b30e <_strtod_l+0x1d6>
 800b3aa:	f04f 0900 	mov.w	r9, #0
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	e77d      	b.n	800b2ae <_strtod_l+0x176>
 800b3b2:	f04f 0c00 	mov.w	ip, #0
 800b3b6:	1ca2      	adds	r2, r4, #2
 800b3b8:	9219      	str	r2, [sp, #100]	@ 0x64
 800b3ba:	78a2      	ldrb	r2, [r4, #2]
 800b3bc:	e785      	b.n	800b2ca <_strtod_l+0x192>
 800b3be:	f04f 0c01 	mov.w	ip, #1
 800b3c2:	e7f8      	b.n	800b3b6 <_strtod_l+0x27e>
 800b3c4:	0800db08 	.word	0x0800db08
 800b3c8:	0800daf0 	.word	0x0800daf0
 800b3cc:	7ff00000 	.word	0x7ff00000
 800b3d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b3d2:	1c51      	adds	r1, r2, #1
 800b3d4:	9119      	str	r1, [sp, #100]	@ 0x64
 800b3d6:	7852      	ldrb	r2, [r2, #1]
 800b3d8:	2a30      	cmp	r2, #48	@ 0x30
 800b3da:	d0f9      	beq.n	800b3d0 <_strtod_l+0x298>
 800b3dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b3e0:	2908      	cmp	r1, #8
 800b3e2:	f63f af78 	bhi.w	800b2d6 <_strtod_l+0x19e>
 800b3e6:	3a30      	subs	r2, #48	@ 0x30
 800b3e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b3ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b3ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b3ee:	f04f 080a 	mov.w	r8, #10
 800b3f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b3f4:	1c56      	adds	r6, r2, #1
 800b3f6:	9619      	str	r6, [sp, #100]	@ 0x64
 800b3f8:	7852      	ldrb	r2, [r2, #1]
 800b3fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b3fe:	f1be 0f09 	cmp.w	lr, #9
 800b402:	d939      	bls.n	800b478 <_strtod_l+0x340>
 800b404:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b406:	1a76      	subs	r6, r6, r1
 800b408:	2e08      	cmp	r6, #8
 800b40a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b40e:	dc03      	bgt.n	800b418 <_strtod_l+0x2e0>
 800b410:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b412:	4588      	cmp	r8, r1
 800b414:	bfa8      	it	ge
 800b416:	4688      	movge	r8, r1
 800b418:	f1bc 0f00 	cmp.w	ip, #0
 800b41c:	d001      	beq.n	800b422 <_strtod_l+0x2ea>
 800b41e:	f1c8 0800 	rsb	r8, r8, #0
 800b422:	2d00      	cmp	r5, #0
 800b424:	d14e      	bne.n	800b4c4 <_strtod_l+0x38c>
 800b426:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b428:	4308      	orrs	r0, r1
 800b42a:	f47f aebe 	bne.w	800b1aa <_strtod_l+0x72>
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f47f aed6 	bne.w	800b1e0 <_strtod_l+0xa8>
 800b434:	2a69      	cmp	r2, #105	@ 0x69
 800b436:	d028      	beq.n	800b48a <_strtod_l+0x352>
 800b438:	dc25      	bgt.n	800b486 <_strtod_l+0x34e>
 800b43a:	2a49      	cmp	r2, #73	@ 0x49
 800b43c:	d025      	beq.n	800b48a <_strtod_l+0x352>
 800b43e:	2a4e      	cmp	r2, #78	@ 0x4e
 800b440:	f47f aece 	bne.w	800b1e0 <_strtod_l+0xa8>
 800b444:	499b      	ldr	r1, [pc, #620]	@ (800b6b4 <_strtod_l+0x57c>)
 800b446:	a819      	add	r0, sp, #100	@ 0x64
 800b448:	f001 fd6e 	bl	800cf28 <__match>
 800b44c:	2800      	cmp	r0, #0
 800b44e:	f43f aec7 	beq.w	800b1e0 <_strtod_l+0xa8>
 800b452:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	2b28      	cmp	r3, #40	@ 0x28
 800b458:	d12e      	bne.n	800b4b8 <_strtod_l+0x380>
 800b45a:	4997      	ldr	r1, [pc, #604]	@ (800b6b8 <_strtod_l+0x580>)
 800b45c:	aa1c      	add	r2, sp, #112	@ 0x70
 800b45e:	a819      	add	r0, sp, #100	@ 0x64
 800b460:	f001 fd76 	bl	800cf50 <__hexnan>
 800b464:	2805      	cmp	r0, #5
 800b466:	d127      	bne.n	800b4b8 <_strtod_l+0x380>
 800b468:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b46a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b46e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b472:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b476:	e698      	b.n	800b1aa <_strtod_l+0x72>
 800b478:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b47a:	fb08 2101 	mla	r1, r8, r1, r2
 800b47e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b482:	920e      	str	r2, [sp, #56]	@ 0x38
 800b484:	e7b5      	b.n	800b3f2 <_strtod_l+0x2ba>
 800b486:	2a6e      	cmp	r2, #110	@ 0x6e
 800b488:	e7da      	b.n	800b440 <_strtod_l+0x308>
 800b48a:	498c      	ldr	r1, [pc, #560]	@ (800b6bc <_strtod_l+0x584>)
 800b48c:	a819      	add	r0, sp, #100	@ 0x64
 800b48e:	f001 fd4b 	bl	800cf28 <__match>
 800b492:	2800      	cmp	r0, #0
 800b494:	f43f aea4 	beq.w	800b1e0 <_strtod_l+0xa8>
 800b498:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b49a:	4989      	ldr	r1, [pc, #548]	@ (800b6c0 <_strtod_l+0x588>)
 800b49c:	3b01      	subs	r3, #1
 800b49e:	a819      	add	r0, sp, #100	@ 0x64
 800b4a0:	9319      	str	r3, [sp, #100]	@ 0x64
 800b4a2:	f001 fd41 	bl	800cf28 <__match>
 800b4a6:	b910      	cbnz	r0, 800b4ae <_strtod_l+0x376>
 800b4a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	9319      	str	r3, [sp, #100]	@ 0x64
 800b4ae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b6d0 <_strtod_l+0x598>
 800b4b2:	f04f 0a00 	mov.w	sl, #0
 800b4b6:	e678      	b.n	800b1aa <_strtod_l+0x72>
 800b4b8:	4882      	ldr	r0, [pc, #520]	@ (800b6c4 <_strtod_l+0x58c>)
 800b4ba:	f001 fa71 	bl	800c9a0 <nan>
 800b4be:	ec5b ab10 	vmov	sl, fp, d0
 800b4c2:	e672      	b.n	800b1aa <_strtod_l+0x72>
 800b4c4:	eba8 0309 	sub.w	r3, r8, r9
 800b4c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b4ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4cc:	2f00      	cmp	r7, #0
 800b4ce:	bf08      	it	eq
 800b4d0:	462f      	moveq	r7, r5
 800b4d2:	2d10      	cmp	r5, #16
 800b4d4:	462c      	mov	r4, r5
 800b4d6:	bfa8      	it	ge
 800b4d8:	2410      	movge	r4, #16
 800b4da:	f7f5 f83b 	bl	8000554 <__aeabi_ui2d>
 800b4de:	2d09      	cmp	r5, #9
 800b4e0:	4682      	mov	sl, r0
 800b4e2:	468b      	mov	fp, r1
 800b4e4:	dc13      	bgt.n	800b50e <_strtod_l+0x3d6>
 800b4e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f43f ae5e 	beq.w	800b1aa <_strtod_l+0x72>
 800b4ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4f0:	dd78      	ble.n	800b5e4 <_strtod_l+0x4ac>
 800b4f2:	2b16      	cmp	r3, #22
 800b4f4:	dc5f      	bgt.n	800b5b6 <_strtod_l+0x47e>
 800b4f6:	4974      	ldr	r1, [pc, #464]	@ (800b6c8 <_strtod_l+0x590>)
 800b4f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b4fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b500:	4652      	mov	r2, sl
 800b502:	465b      	mov	r3, fp
 800b504:	f7f5 f8a0 	bl	8000648 <__aeabi_dmul>
 800b508:	4682      	mov	sl, r0
 800b50a:	468b      	mov	fp, r1
 800b50c:	e64d      	b.n	800b1aa <_strtod_l+0x72>
 800b50e:	4b6e      	ldr	r3, [pc, #440]	@ (800b6c8 <_strtod_l+0x590>)
 800b510:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b514:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b518:	f7f5 f896 	bl	8000648 <__aeabi_dmul>
 800b51c:	4682      	mov	sl, r0
 800b51e:	9808      	ldr	r0, [sp, #32]
 800b520:	468b      	mov	fp, r1
 800b522:	f7f5 f817 	bl	8000554 <__aeabi_ui2d>
 800b526:	4602      	mov	r2, r0
 800b528:	460b      	mov	r3, r1
 800b52a:	4650      	mov	r0, sl
 800b52c:	4659      	mov	r1, fp
 800b52e:	f7f4 fed5 	bl	80002dc <__adddf3>
 800b532:	2d0f      	cmp	r5, #15
 800b534:	4682      	mov	sl, r0
 800b536:	468b      	mov	fp, r1
 800b538:	ddd5      	ble.n	800b4e6 <_strtod_l+0x3ae>
 800b53a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b53c:	1b2c      	subs	r4, r5, r4
 800b53e:	441c      	add	r4, r3
 800b540:	2c00      	cmp	r4, #0
 800b542:	f340 8096 	ble.w	800b672 <_strtod_l+0x53a>
 800b546:	f014 030f 	ands.w	r3, r4, #15
 800b54a:	d00a      	beq.n	800b562 <_strtod_l+0x42a>
 800b54c:	495e      	ldr	r1, [pc, #376]	@ (800b6c8 <_strtod_l+0x590>)
 800b54e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b552:	4652      	mov	r2, sl
 800b554:	465b      	mov	r3, fp
 800b556:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b55a:	f7f5 f875 	bl	8000648 <__aeabi_dmul>
 800b55e:	4682      	mov	sl, r0
 800b560:	468b      	mov	fp, r1
 800b562:	f034 040f 	bics.w	r4, r4, #15
 800b566:	d073      	beq.n	800b650 <_strtod_l+0x518>
 800b568:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b56c:	dd48      	ble.n	800b600 <_strtod_l+0x4c8>
 800b56e:	2400      	movs	r4, #0
 800b570:	46a0      	mov	r8, r4
 800b572:	940a      	str	r4, [sp, #40]	@ 0x28
 800b574:	46a1      	mov	r9, r4
 800b576:	9a05      	ldr	r2, [sp, #20]
 800b578:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b6d0 <_strtod_l+0x598>
 800b57c:	2322      	movs	r3, #34	@ 0x22
 800b57e:	6013      	str	r3, [r2, #0]
 800b580:	f04f 0a00 	mov.w	sl, #0
 800b584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b586:	2b00      	cmp	r3, #0
 800b588:	f43f ae0f 	beq.w	800b1aa <_strtod_l+0x72>
 800b58c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b58e:	9805      	ldr	r0, [sp, #20]
 800b590:	f7ff f942 	bl	800a818 <_Bfree>
 800b594:	9805      	ldr	r0, [sp, #20]
 800b596:	4649      	mov	r1, r9
 800b598:	f7ff f93e 	bl	800a818 <_Bfree>
 800b59c:	9805      	ldr	r0, [sp, #20]
 800b59e:	4641      	mov	r1, r8
 800b5a0:	f7ff f93a 	bl	800a818 <_Bfree>
 800b5a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b5a6:	9805      	ldr	r0, [sp, #20]
 800b5a8:	f7ff f936 	bl	800a818 <_Bfree>
 800b5ac:	9805      	ldr	r0, [sp, #20]
 800b5ae:	4621      	mov	r1, r4
 800b5b0:	f7ff f932 	bl	800a818 <_Bfree>
 800b5b4:	e5f9      	b.n	800b1aa <_strtod_l+0x72>
 800b5b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	dbbc      	blt.n	800b53a <_strtod_l+0x402>
 800b5c0:	4c41      	ldr	r4, [pc, #260]	@ (800b6c8 <_strtod_l+0x590>)
 800b5c2:	f1c5 050f 	rsb	r5, r5, #15
 800b5c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b5ca:	4652      	mov	r2, sl
 800b5cc:	465b      	mov	r3, fp
 800b5ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5d2:	f7f5 f839 	bl	8000648 <__aeabi_dmul>
 800b5d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5d8:	1b5d      	subs	r5, r3, r5
 800b5da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b5de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b5e2:	e78f      	b.n	800b504 <_strtod_l+0x3cc>
 800b5e4:	3316      	adds	r3, #22
 800b5e6:	dba8      	blt.n	800b53a <_strtod_l+0x402>
 800b5e8:	4b37      	ldr	r3, [pc, #220]	@ (800b6c8 <_strtod_l+0x590>)
 800b5ea:	eba9 0808 	sub.w	r8, r9, r8
 800b5ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b5f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b5f6:	4650      	mov	r0, sl
 800b5f8:	4659      	mov	r1, fp
 800b5fa:	f7f5 f94f 	bl	800089c <__aeabi_ddiv>
 800b5fe:	e783      	b.n	800b508 <_strtod_l+0x3d0>
 800b600:	4b32      	ldr	r3, [pc, #200]	@ (800b6cc <_strtod_l+0x594>)
 800b602:	9308      	str	r3, [sp, #32]
 800b604:	2300      	movs	r3, #0
 800b606:	1124      	asrs	r4, r4, #4
 800b608:	4650      	mov	r0, sl
 800b60a:	4659      	mov	r1, fp
 800b60c:	461e      	mov	r6, r3
 800b60e:	2c01      	cmp	r4, #1
 800b610:	dc21      	bgt.n	800b656 <_strtod_l+0x51e>
 800b612:	b10b      	cbz	r3, 800b618 <_strtod_l+0x4e0>
 800b614:	4682      	mov	sl, r0
 800b616:	468b      	mov	fp, r1
 800b618:	492c      	ldr	r1, [pc, #176]	@ (800b6cc <_strtod_l+0x594>)
 800b61a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b61e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b622:	4652      	mov	r2, sl
 800b624:	465b      	mov	r3, fp
 800b626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b62a:	f7f5 f80d 	bl	8000648 <__aeabi_dmul>
 800b62e:	4b28      	ldr	r3, [pc, #160]	@ (800b6d0 <_strtod_l+0x598>)
 800b630:	460a      	mov	r2, r1
 800b632:	400b      	ands	r3, r1
 800b634:	4927      	ldr	r1, [pc, #156]	@ (800b6d4 <_strtod_l+0x59c>)
 800b636:	428b      	cmp	r3, r1
 800b638:	4682      	mov	sl, r0
 800b63a:	d898      	bhi.n	800b56e <_strtod_l+0x436>
 800b63c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b640:	428b      	cmp	r3, r1
 800b642:	bf86      	itte	hi
 800b644:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b6d8 <_strtod_l+0x5a0>
 800b648:	f04f 3aff 	movhi.w	sl, #4294967295
 800b64c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b650:	2300      	movs	r3, #0
 800b652:	9308      	str	r3, [sp, #32]
 800b654:	e07a      	b.n	800b74c <_strtod_l+0x614>
 800b656:	07e2      	lsls	r2, r4, #31
 800b658:	d505      	bpl.n	800b666 <_strtod_l+0x52e>
 800b65a:	9b08      	ldr	r3, [sp, #32]
 800b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b660:	f7f4 fff2 	bl	8000648 <__aeabi_dmul>
 800b664:	2301      	movs	r3, #1
 800b666:	9a08      	ldr	r2, [sp, #32]
 800b668:	3208      	adds	r2, #8
 800b66a:	3601      	adds	r6, #1
 800b66c:	1064      	asrs	r4, r4, #1
 800b66e:	9208      	str	r2, [sp, #32]
 800b670:	e7cd      	b.n	800b60e <_strtod_l+0x4d6>
 800b672:	d0ed      	beq.n	800b650 <_strtod_l+0x518>
 800b674:	4264      	negs	r4, r4
 800b676:	f014 020f 	ands.w	r2, r4, #15
 800b67a:	d00a      	beq.n	800b692 <_strtod_l+0x55a>
 800b67c:	4b12      	ldr	r3, [pc, #72]	@ (800b6c8 <_strtod_l+0x590>)
 800b67e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b682:	4650      	mov	r0, sl
 800b684:	4659      	mov	r1, fp
 800b686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68a:	f7f5 f907 	bl	800089c <__aeabi_ddiv>
 800b68e:	4682      	mov	sl, r0
 800b690:	468b      	mov	fp, r1
 800b692:	1124      	asrs	r4, r4, #4
 800b694:	d0dc      	beq.n	800b650 <_strtod_l+0x518>
 800b696:	2c1f      	cmp	r4, #31
 800b698:	dd20      	ble.n	800b6dc <_strtod_l+0x5a4>
 800b69a:	2400      	movs	r4, #0
 800b69c:	46a0      	mov	r8, r4
 800b69e:	940a      	str	r4, [sp, #40]	@ 0x28
 800b6a0:	46a1      	mov	r9, r4
 800b6a2:	9a05      	ldr	r2, [sp, #20]
 800b6a4:	2322      	movs	r3, #34	@ 0x22
 800b6a6:	f04f 0a00 	mov.w	sl, #0
 800b6aa:	f04f 0b00 	mov.w	fp, #0
 800b6ae:	6013      	str	r3, [r2, #0]
 800b6b0:	e768      	b.n	800b584 <_strtod_l+0x44c>
 800b6b2:	bf00      	nop
 800b6b4:	0800d8e1 	.word	0x0800d8e1
 800b6b8:	0800daf4 	.word	0x0800daf4
 800b6bc:	0800d8d9 	.word	0x0800d8d9
 800b6c0:	0800d90e 	.word	0x0800d90e
 800b6c4:	0800dcb8 	.word	0x0800dcb8
 800b6c8:	0800da28 	.word	0x0800da28
 800b6cc:	0800da00 	.word	0x0800da00
 800b6d0:	7ff00000 	.word	0x7ff00000
 800b6d4:	7ca00000 	.word	0x7ca00000
 800b6d8:	7fefffff 	.word	0x7fefffff
 800b6dc:	f014 0310 	ands.w	r3, r4, #16
 800b6e0:	bf18      	it	ne
 800b6e2:	236a      	movne	r3, #106	@ 0x6a
 800b6e4:	4ea9      	ldr	r6, [pc, #676]	@ (800b98c <_strtod_l+0x854>)
 800b6e6:	9308      	str	r3, [sp, #32]
 800b6e8:	4650      	mov	r0, sl
 800b6ea:	4659      	mov	r1, fp
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	07e2      	lsls	r2, r4, #31
 800b6f0:	d504      	bpl.n	800b6fc <_strtod_l+0x5c4>
 800b6f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b6f6:	f7f4 ffa7 	bl	8000648 <__aeabi_dmul>
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	1064      	asrs	r4, r4, #1
 800b6fe:	f106 0608 	add.w	r6, r6, #8
 800b702:	d1f4      	bne.n	800b6ee <_strtod_l+0x5b6>
 800b704:	b10b      	cbz	r3, 800b70a <_strtod_l+0x5d2>
 800b706:	4682      	mov	sl, r0
 800b708:	468b      	mov	fp, r1
 800b70a:	9b08      	ldr	r3, [sp, #32]
 800b70c:	b1b3      	cbz	r3, 800b73c <_strtod_l+0x604>
 800b70e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b712:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b716:	2b00      	cmp	r3, #0
 800b718:	4659      	mov	r1, fp
 800b71a:	dd0f      	ble.n	800b73c <_strtod_l+0x604>
 800b71c:	2b1f      	cmp	r3, #31
 800b71e:	dd55      	ble.n	800b7cc <_strtod_l+0x694>
 800b720:	2b34      	cmp	r3, #52	@ 0x34
 800b722:	bfde      	ittt	le
 800b724:	f04f 33ff 	movle.w	r3, #4294967295
 800b728:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b72c:	4093      	lslle	r3, r2
 800b72e:	f04f 0a00 	mov.w	sl, #0
 800b732:	bfcc      	ite	gt
 800b734:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b738:	ea03 0b01 	andle.w	fp, r3, r1
 800b73c:	2200      	movs	r2, #0
 800b73e:	2300      	movs	r3, #0
 800b740:	4650      	mov	r0, sl
 800b742:	4659      	mov	r1, fp
 800b744:	f7f5 f9e8 	bl	8000b18 <__aeabi_dcmpeq>
 800b748:	2800      	cmp	r0, #0
 800b74a:	d1a6      	bne.n	800b69a <_strtod_l+0x562>
 800b74c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b74e:	9300      	str	r3, [sp, #0]
 800b750:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b752:	9805      	ldr	r0, [sp, #20]
 800b754:	462b      	mov	r3, r5
 800b756:	463a      	mov	r2, r7
 800b758:	f7ff f8c6 	bl	800a8e8 <__s2b>
 800b75c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b75e:	2800      	cmp	r0, #0
 800b760:	f43f af05 	beq.w	800b56e <_strtod_l+0x436>
 800b764:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b766:	2a00      	cmp	r2, #0
 800b768:	eba9 0308 	sub.w	r3, r9, r8
 800b76c:	bfa8      	it	ge
 800b76e:	2300      	movge	r3, #0
 800b770:	9312      	str	r3, [sp, #72]	@ 0x48
 800b772:	2400      	movs	r4, #0
 800b774:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b778:	9316      	str	r3, [sp, #88]	@ 0x58
 800b77a:	46a0      	mov	r8, r4
 800b77c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b77e:	9805      	ldr	r0, [sp, #20]
 800b780:	6859      	ldr	r1, [r3, #4]
 800b782:	f7ff f809 	bl	800a798 <_Balloc>
 800b786:	4681      	mov	r9, r0
 800b788:	2800      	cmp	r0, #0
 800b78a:	f43f aef4 	beq.w	800b576 <_strtod_l+0x43e>
 800b78e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b790:	691a      	ldr	r2, [r3, #16]
 800b792:	3202      	adds	r2, #2
 800b794:	f103 010c 	add.w	r1, r3, #12
 800b798:	0092      	lsls	r2, r2, #2
 800b79a:	300c      	adds	r0, #12
 800b79c:	f7fe f899 	bl	80098d2 <memcpy>
 800b7a0:	ec4b ab10 	vmov	d0, sl, fp
 800b7a4:	9805      	ldr	r0, [sp, #20]
 800b7a6:	aa1c      	add	r2, sp, #112	@ 0x70
 800b7a8:	a91b      	add	r1, sp, #108	@ 0x6c
 800b7aa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b7ae:	f7ff fbd7 	bl	800af60 <__d2b>
 800b7b2:	901a      	str	r0, [sp, #104]	@ 0x68
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	f43f aede 	beq.w	800b576 <_strtod_l+0x43e>
 800b7ba:	9805      	ldr	r0, [sp, #20]
 800b7bc:	2101      	movs	r1, #1
 800b7be:	f7ff f929 	bl	800aa14 <__i2b>
 800b7c2:	4680      	mov	r8, r0
 800b7c4:	b948      	cbnz	r0, 800b7da <_strtod_l+0x6a2>
 800b7c6:	f04f 0800 	mov.w	r8, #0
 800b7ca:	e6d4      	b.n	800b576 <_strtod_l+0x43e>
 800b7cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b7d4:	ea03 0a0a 	and.w	sl, r3, sl
 800b7d8:	e7b0      	b.n	800b73c <_strtod_l+0x604>
 800b7da:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b7dc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b7de:	2d00      	cmp	r5, #0
 800b7e0:	bfab      	itete	ge
 800b7e2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b7e4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b7e6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b7e8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b7ea:	bfac      	ite	ge
 800b7ec:	18ef      	addge	r7, r5, r3
 800b7ee:	1b5e      	sublt	r6, r3, r5
 800b7f0:	9b08      	ldr	r3, [sp, #32]
 800b7f2:	1aed      	subs	r5, r5, r3
 800b7f4:	4415      	add	r5, r2
 800b7f6:	4b66      	ldr	r3, [pc, #408]	@ (800b990 <_strtod_l+0x858>)
 800b7f8:	3d01      	subs	r5, #1
 800b7fa:	429d      	cmp	r5, r3
 800b7fc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b800:	da50      	bge.n	800b8a4 <_strtod_l+0x76c>
 800b802:	1b5b      	subs	r3, r3, r5
 800b804:	2b1f      	cmp	r3, #31
 800b806:	eba2 0203 	sub.w	r2, r2, r3
 800b80a:	f04f 0101 	mov.w	r1, #1
 800b80e:	dc3d      	bgt.n	800b88c <_strtod_l+0x754>
 800b810:	fa01 f303 	lsl.w	r3, r1, r3
 800b814:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b816:	2300      	movs	r3, #0
 800b818:	9310      	str	r3, [sp, #64]	@ 0x40
 800b81a:	18bd      	adds	r5, r7, r2
 800b81c:	9b08      	ldr	r3, [sp, #32]
 800b81e:	42af      	cmp	r7, r5
 800b820:	4416      	add	r6, r2
 800b822:	441e      	add	r6, r3
 800b824:	463b      	mov	r3, r7
 800b826:	bfa8      	it	ge
 800b828:	462b      	movge	r3, r5
 800b82a:	42b3      	cmp	r3, r6
 800b82c:	bfa8      	it	ge
 800b82e:	4633      	movge	r3, r6
 800b830:	2b00      	cmp	r3, #0
 800b832:	bfc2      	ittt	gt
 800b834:	1aed      	subgt	r5, r5, r3
 800b836:	1af6      	subgt	r6, r6, r3
 800b838:	1aff      	subgt	r7, r7, r3
 800b83a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	dd16      	ble.n	800b86e <_strtod_l+0x736>
 800b840:	4641      	mov	r1, r8
 800b842:	9805      	ldr	r0, [sp, #20]
 800b844:	461a      	mov	r2, r3
 800b846:	f7ff f9a5 	bl	800ab94 <__pow5mult>
 800b84a:	4680      	mov	r8, r0
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d0ba      	beq.n	800b7c6 <_strtod_l+0x68e>
 800b850:	4601      	mov	r1, r0
 800b852:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b854:	9805      	ldr	r0, [sp, #20]
 800b856:	f7ff f8f3 	bl	800aa40 <__multiply>
 800b85a:	900e      	str	r0, [sp, #56]	@ 0x38
 800b85c:	2800      	cmp	r0, #0
 800b85e:	f43f ae8a 	beq.w	800b576 <_strtod_l+0x43e>
 800b862:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b864:	9805      	ldr	r0, [sp, #20]
 800b866:	f7fe ffd7 	bl	800a818 <_Bfree>
 800b86a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b86c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b86e:	2d00      	cmp	r5, #0
 800b870:	dc1d      	bgt.n	800b8ae <_strtod_l+0x776>
 800b872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b874:	2b00      	cmp	r3, #0
 800b876:	dd23      	ble.n	800b8c0 <_strtod_l+0x788>
 800b878:	4649      	mov	r1, r9
 800b87a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b87c:	9805      	ldr	r0, [sp, #20]
 800b87e:	f7ff f989 	bl	800ab94 <__pow5mult>
 800b882:	4681      	mov	r9, r0
 800b884:	b9e0      	cbnz	r0, 800b8c0 <_strtod_l+0x788>
 800b886:	f04f 0900 	mov.w	r9, #0
 800b88a:	e674      	b.n	800b576 <_strtod_l+0x43e>
 800b88c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b890:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b894:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b898:	35e2      	adds	r5, #226	@ 0xe2
 800b89a:	fa01 f305 	lsl.w	r3, r1, r5
 800b89e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b8a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b8a2:	e7ba      	b.n	800b81a <_strtod_l+0x6e2>
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b8ac:	e7b5      	b.n	800b81a <_strtod_l+0x6e2>
 800b8ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b8b0:	9805      	ldr	r0, [sp, #20]
 800b8b2:	462a      	mov	r2, r5
 800b8b4:	f7ff f9c8 	bl	800ac48 <__lshift>
 800b8b8:	901a      	str	r0, [sp, #104]	@ 0x68
 800b8ba:	2800      	cmp	r0, #0
 800b8bc:	d1d9      	bne.n	800b872 <_strtod_l+0x73a>
 800b8be:	e65a      	b.n	800b576 <_strtod_l+0x43e>
 800b8c0:	2e00      	cmp	r6, #0
 800b8c2:	dd07      	ble.n	800b8d4 <_strtod_l+0x79c>
 800b8c4:	4649      	mov	r1, r9
 800b8c6:	9805      	ldr	r0, [sp, #20]
 800b8c8:	4632      	mov	r2, r6
 800b8ca:	f7ff f9bd 	bl	800ac48 <__lshift>
 800b8ce:	4681      	mov	r9, r0
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d0d8      	beq.n	800b886 <_strtod_l+0x74e>
 800b8d4:	2f00      	cmp	r7, #0
 800b8d6:	dd08      	ble.n	800b8ea <_strtod_l+0x7b2>
 800b8d8:	4641      	mov	r1, r8
 800b8da:	9805      	ldr	r0, [sp, #20]
 800b8dc:	463a      	mov	r2, r7
 800b8de:	f7ff f9b3 	bl	800ac48 <__lshift>
 800b8e2:	4680      	mov	r8, r0
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	f43f ae46 	beq.w	800b576 <_strtod_l+0x43e>
 800b8ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b8ec:	9805      	ldr	r0, [sp, #20]
 800b8ee:	464a      	mov	r2, r9
 800b8f0:	f7ff fa32 	bl	800ad58 <__mdiff>
 800b8f4:	4604      	mov	r4, r0
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	f43f ae3d 	beq.w	800b576 <_strtod_l+0x43e>
 800b8fc:	68c3      	ldr	r3, [r0, #12]
 800b8fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b900:	2300      	movs	r3, #0
 800b902:	60c3      	str	r3, [r0, #12]
 800b904:	4641      	mov	r1, r8
 800b906:	f7ff fa0b 	bl	800ad20 <__mcmp>
 800b90a:	2800      	cmp	r0, #0
 800b90c:	da46      	bge.n	800b99c <_strtod_l+0x864>
 800b90e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b910:	ea53 030a 	orrs.w	r3, r3, sl
 800b914:	d16c      	bne.n	800b9f0 <_strtod_l+0x8b8>
 800b916:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d168      	bne.n	800b9f0 <_strtod_l+0x8b8>
 800b91e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b922:	0d1b      	lsrs	r3, r3, #20
 800b924:	051b      	lsls	r3, r3, #20
 800b926:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b92a:	d961      	bls.n	800b9f0 <_strtod_l+0x8b8>
 800b92c:	6963      	ldr	r3, [r4, #20]
 800b92e:	b913      	cbnz	r3, 800b936 <_strtod_l+0x7fe>
 800b930:	6923      	ldr	r3, [r4, #16]
 800b932:	2b01      	cmp	r3, #1
 800b934:	dd5c      	ble.n	800b9f0 <_strtod_l+0x8b8>
 800b936:	4621      	mov	r1, r4
 800b938:	2201      	movs	r2, #1
 800b93a:	9805      	ldr	r0, [sp, #20]
 800b93c:	f7ff f984 	bl	800ac48 <__lshift>
 800b940:	4641      	mov	r1, r8
 800b942:	4604      	mov	r4, r0
 800b944:	f7ff f9ec 	bl	800ad20 <__mcmp>
 800b948:	2800      	cmp	r0, #0
 800b94a:	dd51      	ble.n	800b9f0 <_strtod_l+0x8b8>
 800b94c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b950:	9a08      	ldr	r2, [sp, #32]
 800b952:	0d1b      	lsrs	r3, r3, #20
 800b954:	051b      	lsls	r3, r3, #20
 800b956:	2a00      	cmp	r2, #0
 800b958:	d06b      	beq.n	800ba32 <_strtod_l+0x8fa>
 800b95a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b95e:	d868      	bhi.n	800ba32 <_strtod_l+0x8fa>
 800b960:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b964:	f67f ae9d 	bls.w	800b6a2 <_strtod_l+0x56a>
 800b968:	4b0a      	ldr	r3, [pc, #40]	@ (800b994 <_strtod_l+0x85c>)
 800b96a:	4650      	mov	r0, sl
 800b96c:	4659      	mov	r1, fp
 800b96e:	2200      	movs	r2, #0
 800b970:	f7f4 fe6a 	bl	8000648 <__aeabi_dmul>
 800b974:	4b08      	ldr	r3, [pc, #32]	@ (800b998 <_strtod_l+0x860>)
 800b976:	400b      	ands	r3, r1
 800b978:	4682      	mov	sl, r0
 800b97a:	468b      	mov	fp, r1
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	f47f ae05 	bne.w	800b58c <_strtod_l+0x454>
 800b982:	9a05      	ldr	r2, [sp, #20]
 800b984:	2322      	movs	r3, #34	@ 0x22
 800b986:	6013      	str	r3, [r2, #0]
 800b988:	e600      	b.n	800b58c <_strtod_l+0x454>
 800b98a:	bf00      	nop
 800b98c:	0800db20 	.word	0x0800db20
 800b990:	fffffc02 	.word	0xfffffc02
 800b994:	39500000 	.word	0x39500000
 800b998:	7ff00000 	.word	0x7ff00000
 800b99c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b9a0:	d165      	bne.n	800ba6e <_strtod_l+0x936>
 800b9a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b9a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9a8:	b35a      	cbz	r2, 800ba02 <_strtod_l+0x8ca>
 800b9aa:	4a9f      	ldr	r2, [pc, #636]	@ (800bc28 <_strtod_l+0xaf0>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d12b      	bne.n	800ba08 <_strtod_l+0x8d0>
 800b9b0:	9b08      	ldr	r3, [sp, #32]
 800b9b2:	4651      	mov	r1, sl
 800b9b4:	b303      	cbz	r3, 800b9f8 <_strtod_l+0x8c0>
 800b9b6:	4b9d      	ldr	r3, [pc, #628]	@ (800bc2c <_strtod_l+0xaf4>)
 800b9b8:	465a      	mov	r2, fp
 800b9ba:	4013      	ands	r3, r2
 800b9bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c4:	d81b      	bhi.n	800b9fe <_strtod_l+0x8c6>
 800b9c6:	0d1b      	lsrs	r3, r3, #20
 800b9c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b9cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b9d0:	4299      	cmp	r1, r3
 800b9d2:	d119      	bne.n	800ba08 <_strtod_l+0x8d0>
 800b9d4:	4b96      	ldr	r3, [pc, #600]	@ (800bc30 <_strtod_l+0xaf8>)
 800b9d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d102      	bne.n	800b9e2 <_strtod_l+0x8aa>
 800b9dc:	3101      	adds	r1, #1
 800b9de:	f43f adca 	beq.w	800b576 <_strtod_l+0x43e>
 800b9e2:	4b92      	ldr	r3, [pc, #584]	@ (800bc2c <_strtod_l+0xaf4>)
 800b9e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9e6:	401a      	ands	r2, r3
 800b9e8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b9ec:	f04f 0a00 	mov.w	sl, #0
 800b9f0:	9b08      	ldr	r3, [sp, #32]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1b8      	bne.n	800b968 <_strtod_l+0x830>
 800b9f6:	e5c9      	b.n	800b58c <_strtod_l+0x454>
 800b9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9fc:	e7e8      	b.n	800b9d0 <_strtod_l+0x898>
 800b9fe:	4613      	mov	r3, r2
 800ba00:	e7e6      	b.n	800b9d0 <_strtod_l+0x898>
 800ba02:	ea53 030a 	orrs.w	r3, r3, sl
 800ba06:	d0a1      	beq.n	800b94c <_strtod_l+0x814>
 800ba08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ba0a:	b1db      	cbz	r3, 800ba44 <_strtod_l+0x90c>
 800ba0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba0e:	4213      	tst	r3, r2
 800ba10:	d0ee      	beq.n	800b9f0 <_strtod_l+0x8b8>
 800ba12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba14:	9a08      	ldr	r2, [sp, #32]
 800ba16:	4650      	mov	r0, sl
 800ba18:	4659      	mov	r1, fp
 800ba1a:	b1bb      	cbz	r3, 800ba4c <_strtod_l+0x914>
 800ba1c:	f7ff fb6e 	bl	800b0fc <sulp>
 800ba20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba24:	ec53 2b10 	vmov	r2, r3, d0
 800ba28:	f7f4 fc58 	bl	80002dc <__adddf3>
 800ba2c:	4682      	mov	sl, r0
 800ba2e:	468b      	mov	fp, r1
 800ba30:	e7de      	b.n	800b9f0 <_strtod_l+0x8b8>
 800ba32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ba36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ba3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ba3e:	f04f 3aff 	mov.w	sl, #4294967295
 800ba42:	e7d5      	b.n	800b9f0 <_strtod_l+0x8b8>
 800ba44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ba46:	ea13 0f0a 	tst.w	r3, sl
 800ba4a:	e7e1      	b.n	800ba10 <_strtod_l+0x8d8>
 800ba4c:	f7ff fb56 	bl	800b0fc <sulp>
 800ba50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba54:	ec53 2b10 	vmov	r2, r3, d0
 800ba58:	f7f4 fc3e 	bl	80002d8 <__aeabi_dsub>
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	2300      	movs	r3, #0
 800ba60:	4682      	mov	sl, r0
 800ba62:	468b      	mov	fp, r1
 800ba64:	f7f5 f858 	bl	8000b18 <__aeabi_dcmpeq>
 800ba68:	2800      	cmp	r0, #0
 800ba6a:	d0c1      	beq.n	800b9f0 <_strtod_l+0x8b8>
 800ba6c:	e619      	b.n	800b6a2 <_strtod_l+0x56a>
 800ba6e:	4641      	mov	r1, r8
 800ba70:	4620      	mov	r0, r4
 800ba72:	f7ff facd 	bl	800b010 <__ratio>
 800ba76:	ec57 6b10 	vmov	r6, r7, d0
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ba80:	4630      	mov	r0, r6
 800ba82:	4639      	mov	r1, r7
 800ba84:	f7f5 f85c 	bl	8000b40 <__aeabi_dcmple>
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	d06f      	beq.n	800bb6c <_strtod_l+0xa34>
 800ba8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d17a      	bne.n	800bb88 <_strtod_l+0xa50>
 800ba92:	f1ba 0f00 	cmp.w	sl, #0
 800ba96:	d158      	bne.n	800bb4a <_strtod_l+0xa12>
 800ba98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d15a      	bne.n	800bb58 <_strtod_l+0xa20>
 800baa2:	4b64      	ldr	r3, [pc, #400]	@ (800bc34 <_strtod_l+0xafc>)
 800baa4:	2200      	movs	r2, #0
 800baa6:	4630      	mov	r0, r6
 800baa8:	4639      	mov	r1, r7
 800baaa:	f7f5 f83f 	bl	8000b2c <__aeabi_dcmplt>
 800baae:	2800      	cmp	r0, #0
 800bab0:	d159      	bne.n	800bb66 <_strtod_l+0xa2e>
 800bab2:	4630      	mov	r0, r6
 800bab4:	4639      	mov	r1, r7
 800bab6:	4b60      	ldr	r3, [pc, #384]	@ (800bc38 <_strtod_l+0xb00>)
 800bab8:	2200      	movs	r2, #0
 800baba:	f7f4 fdc5 	bl	8000648 <__aeabi_dmul>
 800babe:	4606      	mov	r6, r0
 800bac0:	460f      	mov	r7, r1
 800bac2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bac6:	9606      	str	r6, [sp, #24]
 800bac8:	9307      	str	r3, [sp, #28]
 800baca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bace:	4d57      	ldr	r5, [pc, #348]	@ (800bc2c <_strtod_l+0xaf4>)
 800bad0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bad6:	401d      	ands	r5, r3
 800bad8:	4b58      	ldr	r3, [pc, #352]	@ (800bc3c <_strtod_l+0xb04>)
 800bada:	429d      	cmp	r5, r3
 800badc:	f040 80b2 	bne.w	800bc44 <_strtod_l+0xb0c>
 800bae0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bae2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bae6:	ec4b ab10 	vmov	d0, sl, fp
 800baea:	f7ff f9c9 	bl	800ae80 <__ulp>
 800baee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800baf2:	ec51 0b10 	vmov	r0, r1, d0
 800baf6:	f7f4 fda7 	bl	8000648 <__aeabi_dmul>
 800bafa:	4652      	mov	r2, sl
 800bafc:	465b      	mov	r3, fp
 800bafe:	f7f4 fbed 	bl	80002dc <__adddf3>
 800bb02:	460b      	mov	r3, r1
 800bb04:	4949      	ldr	r1, [pc, #292]	@ (800bc2c <_strtod_l+0xaf4>)
 800bb06:	4a4e      	ldr	r2, [pc, #312]	@ (800bc40 <_strtod_l+0xb08>)
 800bb08:	4019      	ands	r1, r3
 800bb0a:	4291      	cmp	r1, r2
 800bb0c:	4682      	mov	sl, r0
 800bb0e:	d942      	bls.n	800bb96 <_strtod_l+0xa5e>
 800bb10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bb12:	4b47      	ldr	r3, [pc, #284]	@ (800bc30 <_strtod_l+0xaf8>)
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d103      	bne.n	800bb20 <_strtod_l+0x9e8>
 800bb18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	f43f ad2b 	beq.w	800b576 <_strtod_l+0x43e>
 800bb20:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bc30 <_strtod_l+0xaf8>
 800bb24:	f04f 3aff 	mov.w	sl, #4294967295
 800bb28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb2a:	9805      	ldr	r0, [sp, #20]
 800bb2c:	f7fe fe74 	bl	800a818 <_Bfree>
 800bb30:	9805      	ldr	r0, [sp, #20]
 800bb32:	4649      	mov	r1, r9
 800bb34:	f7fe fe70 	bl	800a818 <_Bfree>
 800bb38:	9805      	ldr	r0, [sp, #20]
 800bb3a:	4641      	mov	r1, r8
 800bb3c:	f7fe fe6c 	bl	800a818 <_Bfree>
 800bb40:	9805      	ldr	r0, [sp, #20]
 800bb42:	4621      	mov	r1, r4
 800bb44:	f7fe fe68 	bl	800a818 <_Bfree>
 800bb48:	e618      	b.n	800b77c <_strtod_l+0x644>
 800bb4a:	f1ba 0f01 	cmp.w	sl, #1
 800bb4e:	d103      	bne.n	800bb58 <_strtod_l+0xa20>
 800bb50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f43f ada5 	beq.w	800b6a2 <_strtod_l+0x56a>
 800bb58:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bc08 <_strtod_l+0xad0>
 800bb5c:	4f35      	ldr	r7, [pc, #212]	@ (800bc34 <_strtod_l+0xafc>)
 800bb5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb62:	2600      	movs	r6, #0
 800bb64:	e7b1      	b.n	800baca <_strtod_l+0x992>
 800bb66:	4f34      	ldr	r7, [pc, #208]	@ (800bc38 <_strtod_l+0xb00>)
 800bb68:	2600      	movs	r6, #0
 800bb6a:	e7aa      	b.n	800bac2 <_strtod_l+0x98a>
 800bb6c:	4b32      	ldr	r3, [pc, #200]	@ (800bc38 <_strtod_l+0xb00>)
 800bb6e:	4630      	mov	r0, r6
 800bb70:	4639      	mov	r1, r7
 800bb72:	2200      	movs	r2, #0
 800bb74:	f7f4 fd68 	bl	8000648 <__aeabi_dmul>
 800bb78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb7a:	4606      	mov	r6, r0
 800bb7c:	460f      	mov	r7, r1
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d09f      	beq.n	800bac2 <_strtod_l+0x98a>
 800bb82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bb86:	e7a0      	b.n	800baca <_strtod_l+0x992>
 800bb88:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bc10 <_strtod_l+0xad8>
 800bb8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb90:	ec57 6b17 	vmov	r6, r7, d7
 800bb94:	e799      	b.n	800baca <_strtod_l+0x992>
 800bb96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bb9a:	9b08      	ldr	r3, [sp, #32]
 800bb9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d1c1      	bne.n	800bb28 <_strtod_l+0x9f0>
 800bba4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bba8:	0d1b      	lsrs	r3, r3, #20
 800bbaa:	051b      	lsls	r3, r3, #20
 800bbac:	429d      	cmp	r5, r3
 800bbae:	d1bb      	bne.n	800bb28 <_strtod_l+0x9f0>
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	4639      	mov	r1, r7
 800bbb4:	f7f5 f8a8 	bl	8000d08 <__aeabi_d2lz>
 800bbb8:	f7f4 fd18 	bl	80005ec <__aeabi_l2d>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	4630      	mov	r0, r6
 800bbc2:	4639      	mov	r1, r7
 800bbc4:	f7f4 fb88 	bl	80002d8 <__aeabi_dsub>
 800bbc8:	460b      	mov	r3, r1
 800bbca:	4602      	mov	r2, r0
 800bbcc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bbd0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bbd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbd6:	ea46 060a 	orr.w	r6, r6, sl
 800bbda:	431e      	orrs	r6, r3
 800bbdc:	d06f      	beq.n	800bcbe <_strtod_l+0xb86>
 800bbde:	a30e      	add	r3, pc, #56	@ (adr r3, 800bc18 <_strtod_l+0xae0>)
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	f7f4 ffa2 	bl	8000b2c <__aeabi_dcmplt>
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	f47f accf 	bne.w	800b58c <_strtod_l+0x454>
 800bbee:	a30c      	add	r3, pc, #48	@ (adr r3, 800bc20 <_strtod_l+0xae8>)
 800bbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbf8:	f7f4 ffb6 	bl	8000b68 <__aeabi_dcmpgt>
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	d093      	beq.n	800bb28 <_strtod_l+0x9f0>
 800bc00:	e4c4      	b.n	800b58c <_strtod_l+0x454>
 800bc02:	bf00      	nop
 800bc04:	f3af 8000 	nop.w
 800bc08:	00000000 	.word	0x00000000
 800bc0c:	bff00000 	.word	0xbff00000
 800bc10:	00000000 	.word	0x00000000
 800bc14:	3ff00000 	.word	0x3ff00000
 800bc18:	94a03595 	.word	0x94a03595
 800bc1c:	3fdfffff 	.word	0x3fdfffff
 800bc20:	35afe535 	.word	0x35afe535
 800bc24:	3fe00000 	.word	0x3fe00000
 800bc28:	000fffff 	.word	0x000fffff
 800bc2c:	7ff00000 	.word	0x7ff00000
 800bc30:	7fefffff 	.word	0x7fefffff
 800bc34:	3ff00000 	.word	0x3ff00000
 800bc38:	3fe00000 	.word	0x3fe00000
 800bc3c:	7fe00000 	.word	0x7fe00000
 800bc40:	7c9fffff 	.word	0x7c9fffff
 800bc44:	9b08      	ldr	r3, [sp, #32]
 800bc46:	b323      	cbz	r3, 800bc92 <_strtod_l+0xb5a>
 800bc48:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bc4c:	d821      	bhi.n	800bc92 <_strtod_l+0xb5a>
 800bc4e:	a328      	add	r3, pc, #160	@ (adr r3, 800bcf0 <_strtod_l+0xbb8>)
 800bc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc54:	4630      	mov	r0, r6
 800bc56:	4639      	mov	r1, r7
 800bc58:	f7f4 ff72 	bl	8000b40 <__aeabi_dcmple>
 800bc5c:	b1a0      	cbz	r0, 800bc88 <_strtod_l+0xb50>
 800bc5e:	4639      	mov	r1, r7
 800bc60:	4630      	mov	r0, r6
 800bc62:	f7f4 ffc9 	bl	8000bf8 <__aeabi_d2uiz>
 800bc66:	2801      	cmp	r0, #1
 800bc68:	bf38      	it	cc
 800bc6a:	2001      	movcc	r0, #1
 800bc6c:	f7f4 fc72 	bl	8000554 <__aeabi_ui2d>
 800bc70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc72:	4606      	mov	r6, r0
 800bc74:	460f      	mov	r7, r1
 800bc76:	b9fb      	cbnz	r3, 800bcb8 <_strtod_l+0xb80>
 800bc78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bc7c:	9014      	str	r0, [sp, #80]	@ 0x50
 800bc7e:	9315      	str	r3, [sp, #84]	@ 0x54
 800bc80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bc84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bc88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bc8a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bc8e:	1b5b      	subs	r3, r3, r5
 800bc90:	9311      	str	r3, [sp, #68]	@ 0x44
 800bc92:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bc96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bc9a:	f7ff f8f1 	bl	800ae80 <__ulp>
 800bc9e:	4650      	mov	r0, sl
 800bca0:	ec53 2b10 	vmov	r2, r3, d0
 800bca4:	4659      	mov	r1, fp
 800bca6:	f7f4 fccf 	bl	8000648 <__aeabi_dmul>
 800bcaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bcae:	f7f4 fb15 	bl	80002dc <__adddf3>
 800bcb2:	4682      	mov	sl, r0
 800bcb4:	468b      	mov	fp, r1
 800bcb6:	e770      	b.n	800bb9a <_strtod_l+0xa62>
 800bcb8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bcbc:	e7e0      	b.n	800bc80 <_strtod_l+0xb48>
 800bcbe:	a30e      	add	r3, pc, #56	@ (adr r3, 800bcf8 <_strtod_l+0xbc0>)
 800bcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc4:	f7f4 ff32 	bl	8000b2c <__aeabi_dcmplt>
 800bcc8:	e798      	b.n	800bbfc <_strtod_l+0xac4>
 800bcca:	2300      	movs	r3, #0
 800bccc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bcd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bcd2:	6013      	str	r3, [r2, #0]
 800bcd4:	f7ff ba6d 	b.w	800b1b2 <_strtod_l+0x7a>
 800bcd8:	2a65      	cmp	r2, #101	@ 0x65
 800bcda:	f43f ab66 	beq.w	800b3aa <_strtod_l+0x272>
 800bcde:	2a45      	cmp	r2, #69	@ 0x45
 800bce0:	f43f ab63 	beq.w	800b3aa <_strtod_l+0x272>
 800bce4:	2301      	movs	r3, #1
 800bce6:	f7ff bb9e 	b.w	800b426 <_strtod_l+0x2ee>
 800bcea:	bf00      	nop
 800bcec:	f3af 8000 	nop.w
 800bcf0:	ffc00000 	.word	0xffc00000
 800bcf4:	41dfffff 	.word	0x41dfffff
 800bcf8:	94a03595 	.word	0x94a03595
 800bcfc:	3fcfffff 	.word	0x3fcfffff

0800bd00 <_strtod_r>:
 800bd00:	4b01      	ldr	r3, [pc, #4]	@ (800bd08 <_strtod_r+0x8>)
 800bd02:	f7ff ba19 	b.w	800b138 <_strtod_l>
 800bd06:	bf00      	nop
 800bd08:	20000064 	.word	0x20000064

0800bd0c <_strtol_l.constprop.0>:
 800bd0c:	2b24      	cmp	r3, #36	@ 0x24
 800bd0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd12:	4686      	mov	lr, r0
 800bd14:	4690      	mov	r8, r2
 800bd16:	d801      	bhi.n	800bd1c <_strtol_l.constprop.0+0x10>
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d106      	bne.n	800bd2a <_strtol_l.constprop.0+0x1e>
 800bd1c:	f7fd fdac 	bl	8009878 <__errno>
 800bd20:	2316      	movs	r3, #22
 800bd22:	6003      	str	r3, [r0, #0]
 800bd24:	2000      	movs	r0, #0
 800bd26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd2a:	4834      	ldr	r0, [pc, #208]	@ (800bdfc <_strtol_l.constprop.0+0xf0>)
 800bd2c:	460d      	mov	r5, r1
 800bd2e:	462a      	mov	r2, r5
 800bd30:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd34:	5d06      	ldrb	r6, [r0, r4]
 800bd36:	f016 0608 	ands.w	r6, r6, #8
 800bd3a:	d1f8      	bne.n	800bd2e <_strtol_l.constprop.0+0x22>
 800bd3c:	2c2d      	cmp	r4, #45	@ 0x2d
 800bd3e:	d12d      	bne.n	800bd9c <_strtol_l.constprop.0+0x90>
 800bd40:	782c      	ldrb	r4, [r5, #0]
 800bd42:	2601      	movs	r6, #1
 800bd44:	1c95      	adds	r5, r2, #2
 800bd46:	f033 0210 	bics.w	r2, r3, #16
 800bd4a:	d109      	bne.n	800bd60 <_strtol_l.constprop.0+0x54>
 800bd4c:	2c30      	cmp	r4, #48	@ 0x30
 800bd4e:	d12a      	bne.n	800bda6 <_strtol_l.constprop.0+0x9a>
 800bd50:	782a      	ldrb	r2, [r5, #0]
 800bd52:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bd56:	2a58      	cmp	r2, #88	@ 0x58
 800bd58:	d125      	bne.n	800bda6 <_strtol_l.constprop.0+0x9a>
 800bd5a:	786c      	ldrb	r4, [r5, #1]
 800bd5c:	2310      	movs	r3, #16
 800bd5e:	3502      	adds	r5, #2
 800bd60:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bd64:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bd68:	2200      	movs	r2, #0
 800bd6a:	fbbc f9f3 	udiv	r9, ip, r3
 800bd6e:	4610      	mov	r0, r2
 800bd70:	fb03 ca19 	mls	sl, r3, r9, ip
 800bd74:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bd78:	2f09      	cmp	r7, #9
 800bd7a:	d81b      	bhi.n	800bdb4 <_strtol_l.constprop.0+0xa8>
 800bd7c:	463c      	mov	r4, r7
 800bd7e:	42a3      	cmp	r3, r4
 800bd80:	dd27      	ble.n	800bdd2 <_strtol_l.constprop.0+0xc6>
 800bd82:	1c57      	adds	r7, r2, #1
 800bd84:	d007      	beq.n	800bd96 <_strtol_l.constprop.0+0x8a>
 800bd86:	4581      	cmp	r9, r0
 800bd88:	d320      	bcc.n	800bdcc <_strtol_l.constprop.0+0xc0>
 800bd8a:	d101      	bne.n	800bd90 <_strtol_l.constprop.0+0x84>
 800bd8c:	45a2      	cmp	sl, r4
 800bd8e:	db1d      	blt.n	800bdcc <_strtol_l.constprop.0+0xc0>
 800bd90:	fb00 4003 	mla	r0, r0, r3, r4
 800bd94:	2201      	movs	r2, #1
 800bd96:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd9a:	e7eb      	b.n	800bd74 <_strtol_l.constprop.0+0x68>
 800bd9c:	2c2b      	cmp	r4, #43	@ 0x2b
 800bd9e:	bf04      	itt	eq
 800bda0:	782c      	ldrbeq	r4, [r5, #0]
 800bda2:	1c95      	addeq	r5, r2, #2
 800bda4:	e7cf      	b.n	800bd46 <_strtol_l.constprop.0+0x3a>
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d1da      	bne.n	800bd60 <_strtol_l.constprop.0+0x54>
 800bdaa:	2c30      	cmp	r4, #48	@ 0x30
 800bdac:	bf0c      	ite	eq
 800bdae:	2308      	moveq	r3, #8
 800bdb0:	230a      	movne	r3, #10
 800bdb2:	e7d5      	b.n	800bd60 <_strtol_l.constprop.0+0x54>
 800bdb4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bdb8:	2f19      	cmp	r7, #25
 800bdba:	d801      	bhi.n	800bdc0 <_strtol_l.constprop.0+0xb4>
 800bdbc:	3c37      	subs	r4, #55	@ 0x37
 800bdbe:	e7de      	b.n	800bd7e <_strtol_l.constprop.0+0x72>
 800bdc0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bdc4:	2f19      	cmp	r7, #25
 800bdc6:	d804      	bhi.n	800bdd2 <_strtol_l.constprop.0+0xc6>
 800bdc8:	3c57      	subs	r4, #87	@ 0x57
 800bdca:	e7d8      	b.n	800bd7e <_strtol_l.constprop.0+0x72>
 800bdcc:	f04f 32ff 	mov.w	r2, #4294967295
 800bdd0:	e7e1      	b.n	800bd96 <_strtol_l.constprop.0+0x8a>
 800bdd2:	1c53      	adds	r3, r2, #1
 800bdd4:	d108      	bne.n	800bde8 <_strtol_l.constprop.0+0xdc>
 800bdd6:	2322      	movs	r3, #34	@ 0x22
 800bdd8:	f8ce 3000 	str.w	r3, [lr]
 800bddc:	4660      	mov	r0, ip
 800bdde:	f1b8 0f00 	cmp.w	r8, #0
 800bde2:	d0a0      	beq.n	800bd26 <_strtol_l.constprop.0+0x1a>
 800bde4:	1e69      	subs	r1, r5, #1
 800bde6:	e006      	b.n	800bdf6 <_strtol_l.constprop.0+0xea>
 800bde8:	b106      	cbz	r6, 800bdec <_strtol_l.constprop.0+0xe0>
 800bdea:	4240      	negs	r0, r0
 800bdec:	f1b8 0f00 	cmp.w	r8, #0
 800bdf0:	d099      	beq.n	800bd26 <_strtol_l.constprop.0+0x1a>
 800bdf2:	2a00      	cmp	r2, #0
 800bdf4:	d1f6      	bne.n	800bde4 <_strtol_l.constprop.0+0xd8>
 800bdf6:	f8c8 1000 	str.w	r1, [r8]
 800bdfa:	e794      	b.n	800bd26 <_strtol_l.constprop.0+0x1a>
 800bdfc:	0800db49 	.word	0x0800db49

0800be00 <_strtol_r>:
 800be00:	f7ff bf84 	b.w	800bd0c <_strtol_l.constprop.0>

0800be04 <__ssputs_r>:
 800be04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be08:	688e      	ldr	r6, [r1, #8]
 800be0a:	461f      	mov	r7, r3
 800be0c:	42be      	cmp	r6, r7
 800be0e:	680b      	ldr	r3, [r1, #0]
 800be10:	4682      	mov	sl, r0
 800be12:	460c      	mov	r4, r1
 800be14:	4690      	mov	r8, r2
 800be16:	d82d      	bhi.n	800be74 <__ssputs_r+0x70>
 800be18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800be20:	d026      	beq.n	800be70 <__ssputs_r+0x6c>
 800be22:	6965      	ldr	r5, [r4, #20]
 800be24:	6909      	ldr	r1, [r1, #16]
 800be26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be2a:	eba3 0901 	sub.w	r9, r3, r1
 800be2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be32:	1c7b      	adds	r3, r7, #1
 800be34:	444b      	add	r3, r9
 800be36:	106d      	asrs	r5, r5, #1
 800be38:	429d      	cmp	r5, r3
 800be3a:	bf38      	it	cc
 800be3c:	461d      	movcc	r5, r3
 800be3e:	0553      	lsls	r3, r2, #21
 800be40:	d527      	bpl.n	800be92 <__ssputs_r+0x8e>
 800be42:	4629      	mov	r1, r5
 800be44:	f7fe fc1c 	bl	800a680 <_malloc_r>
 800be48:	4606      	mov	r6, r0
 800be4a:	b360      	cbz	r0, 800bea6 <__ssputs_r+0xa2>
 800be4c:	6921      	ldr	r1, [r4, #16]
 800be4e:	464a      	mov	r2, r9
 800be50:	f7fd fd3f 	bl	80098d2 <memcpy>
 800be54:	89a3      	ldrh	r3, [r4, #12]
 800be56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800be5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be5e:	81a3      	strh	r3, [r4, #12]
 800be60:	6126      	str	r6, [r4, #16]
 800be62:	6165      	str	r5, [r4, #20]
 800be64:	444e      	add	r6, r9
 800be66:	eba5 0509 	sub.w	r5, r5, r9
 800be6a:	6026      	str	r6, [r4, #0]
 800be6c:	60a5      	str	r5, [r4, #8]
 800be6e:	463e      	mov	r6, r7
 800be70:	42be      	cmp	r6, r7
 800be72:	d900      	bls.n	800be76 <__ssputs_r+0x72>
 800be74:	463e      	mov	r6, r7
 800be76:	6820      	ldr	r0, [r4, #0]
 800be78:	4632      	mov	r2, r6
 800be7a:	4641      	mov	r1, r8
 800be7c:	f000 fd53 	bl	800c926 <memmove>
 800be80:	68a3      	ldr	r3, [r4, #8]
 800be82:	1b9b      	subs	r3, r3, r6
 800be84:	60a3      	str	r3, [r4, #8]
 800be86:	6823      	ldr	r3, [r4, #0]
 800be88:	4433      	add	r3, r6
 800be8a:	6023      	str	r3, [r4, #0]
 800be8c:	2000      	movs	r0, #0
 800be8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be92:	462a      	mov	r2, r5
 800be94:	f001 f909 	bl	800d0aa <_realloc_r>
 800be98:	4606      	mov	r6, r0
 800be9a:	2800      	cmp	r0, #0
 800be9c:	d1e0      	bne.n	800be60 <__ssputs_r+0x5c>
 800be9e:	6921      	ldr	r1, [r4, #16]
 800bea0:	4650      	mov	r0, sl
 800bea2:	f7fe fb79 	bl	800a598 <_free_r>
 800bea6:	230c      	movs	r3, #12
 800bea8:	f8ca 3000 	str.w	r3, [sl]
 800beac:	89a3      	ldrh	r3, [r4, #12]
 800beae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beb2:	81a3      	strh	r3, [r4, #12]
 800beb4:	f04f 30ff 	mov.w	r0, #4294967295
 800beb8:	e7e9      	b.n	800be8e <__ssputs_r+0x8a>
	...

0800bebc <_svfiprintf_r>:
 800bebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec0:	4698      	mov	r8, r3
 800bec2:	898b      	ldrh	r3, [r1, #12]
 800bec4:	061b      	lsls	r3, r3, #24
 800bec6:	b09d      	sub	sp, #116	@ 0x74
 800bec8:	4607      	mov	r7, r0
 800beca:	460d      	mov	r5, r1
 800becc:	4614      	mov	r4, r2
 800bece:	d510      	bpl.n	800bef2 <_svfiprintf_r+0x36>
 800bed0:	690b      	ldr	r3, [r1, #16]
 800bed2:	b973      	cbnz	r3, 800bef2 <_svfiprintf_r+0x36>
 800bed4:	2140      	movs	r1, #64	@ 0x40
 800bed6:	f7fe fbd3 	bl	800a680 <_malloc_r>
 800beda:	6028      	str	r0, [r5, #0]
 800bedc:	6128      	str	r0, [r5, #16]
 800bede:	b930      	cbnz	r0, 800beee <_svfiprintf_r+0x32>
 800bee0:	230c      	movs	r3, #12
 800bee2:	603b      	str	r3, [r7, #0]
 800bee4:	f04f 30ff 	mov.w	r0, #4294967295
 800bee8:	b01d      	add	sp, #116	@ 0x74
 800beea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beee:	2340      	movs	r3, #64	@ 0x40
 800bef0:	616b      	str	r3, [r5, #20]
 800bef2:	2300      	movs	r3, #0
 800bef4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bef6:	2320      	movs	r3, #32
 800bef8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800befc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf00:	2330      	movs	r3, #48	@ 0x30
 800bf02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c0a0 <_svfiprintf_r+0x1e4>
 800bf06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf0a:	f04f 0901 	mov.w	r9, #1
 800bf0e:	4623      	mov	r3, r4
 800bf10:	469a      	mov	sl, r3
 800bf12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf16:	b10a      	cbz	r2, 800bf1c <_svfiprintf_r+0x60>
 800bf18:	2a25      	cmp	r2, #37	@ 0x25
 800bf1a:	d1f9      	bne.n	800bf10 <_svfiprintf_r+0x54>
 800bf1c:	ebba 0b04 	subs.w	fp, sl, r4
 800bf20:	d00b      	beq.n	800bf3a <_svfiprintf_r+0x7e>
 800bf22:	465b      	mov	r3, fp
 800bf24:	4622      	mov	r2, r4
 800bf26:	4629      	mov	r1, r5
 800bf28:	4638      	mov	r0, r7
 800bf2a:	f7ff ff6b 	bl	800be04 <__ssputs_r>
 800bf2e:	3001      	adds	r0, #1
 800bf30:	f000 80a7 	beq.w	800c082 <_svfiprintf_r+0x1c6>
 800bf34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf36:	445a      	add	r2, fp
 800bf38:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf3a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	f000 809f 	beq.w	800c082 <_svfiprintf_r+0x1c6>
 800bf44:	2300      	movs	r3, #0
 800bf46:	f04f 32ff 	mov.w	r2, #4294967295
 800bf4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf4e:	f10a 0a01 	add.w	sl, sl, #1
 800bf52:	9304      	str	r3, [sp, #16]
 800bf54:	9307      	str	r3, [sp, #28]
 800bf56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf5c:	4654      	mov	r4, sl
 800bf5e:	2205      	movs	r2, #5
 800bf60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf64:	484e      	ldr	r0, [pc, #312]	@ (800c0a0 <_svfiprintf_r+0x1e4>)
 800bf66:	f7f4 f95b 	bl	8000220 <memchr>
 800bf6a:	9a04      	ldr	r2, [sp, #16]
 800bf6c:	b9d8      	cbnz	r0, 800bfa6 <_svfiprintf_r+0xea>
 800bf6e:	06d0      	lsls	r0, r2, #27
 800bf70:	bf44      	itt	mi
 800bf72:	2320      	movmi	r3, #32
 800bf74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf78:	0711      	lsls	r1, r2, #28
 800bf7a:	bf44      	itt	mi
 800bf7c:	232b      	movmi	r3, #43	@ 0x2b
 800bf7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf82:	f89a 3000 	ldrb.w	r3, [sl]
 800bf86:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf88:	d015      	beq.n	800bfb6 <_svfiprintf_r+0xfa>
 800bf8a:	9a07      	ldr	r2, [sp, #28]
 800bf8c:	4654      	mov	r4, sl
 800bf8e:	2000      	movs	r0, #0
 800bf90:	f04f 0c0a 	mov.w	ip, #10
 800bf94:	4621      	mov	r1, r4
 800bf96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf9a:	3b30      	subs	r3, #48	@ 0x30
 800bf9c:	2b09      	cmp	r3, #9
 800bf9e:	d94b      	bls.n	800c038 <_svfiprintf_r+0x17c>
 800bfa0:	b1b0      	cbz	r0, 800bfd0 <_svfiprintf_r+0x114>
 800bfa2:	9207      	str	r2, [sp, #28]
 800bfa4:	e014      	b.n	800bfd0 <_svfiprintf_r+0x114>
 800bfa6:	eba0 0308 	sub.w	r3, r0, r8
 800bfaa:	fa09 f303 	lsl.w	r3, r9, r3
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	9304      	str	r3, [sp, #16]
 800bfb2:	46a2      	mov	sl, r4
 800bfb4:	e7d2      	b.n	800bf5c <_svfiprintf_r+0xa0>
 800bfb6:	9b03      	ldr	r3, [sp, #12]
 800bfb8:	1d19      	adds	r1, r3, #4
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	9103      	str	r1, [sp, #12]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	bfbb      	ittet	lt
 800bfc2:	425b      	neglt	r3, r3
 800bfc4:	f042 0202 	orrlt.w	r2, r2, #2
 800bfc8:	9307      	strge	r3, [sp, #28]
 800bfca:	9307      	strlt	r3, [sp, #28]
 800bfcc:	bfb8      	it	lt
 800bfce:	9204      	strlt	r2, [sp, #16]
 800bfd0:	7823      	ldrb	r3, [r4, #0]
 800bfd2:	2b2e      	cmp	r3, #46	@ 0x2e
 800bfd4:	d10a      	bne.n	800bfec <_svfiprintf_r+0x130>
 800bfd6:	7863      	ldrb	r3, [r4, #1]
 800bfd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfda:	d132      	bne.n	800c042 <_svfiprintf_r+0x186>
 800bfdc:	9b03      	ldr	r3, [sp, #12]
 800bfde:	1d1a      	adds	r2, r3, #4
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	9203      	str	r2, [sp, #12]
 800bfe4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bfe8:	3402      	adds	r4, #2
 800bfea:	9305      	str	r3, [sp, #20]
 800bfec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c0b0 <_svfiprintf_r+0x1f4>
 800bff0:	7821      	ldrb	r1, [r4, #0]
 800bff2:	2203      	movs	r2, #3
 800bff4:	4650      	mov	r0, sl
 800bff6:	f7f4 f913 	bl	8000220 <memchr>
 800bffa:	b138      	cbz	r0, 800c00c <_svfiprintf_r+0x150>
 800bffc:	9b04      	ldr	r3, [sp, #16]
 800bffe:	eba0 000a 	sub.w	r0, r0, sl
 800c002:	2240      	movs	r2, #64	@ 0x40
 800c004:	4082      	lsls	r2, r0
 800c006:	4313      	orrs	r3, r2
 800c008:	3401      	adds	r4, #1
 800c00a:	9304      	str	r3, [sp, #16]
 800c00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c010:	4824      	ldr	r0, [pc, #144]	@ (800c0a4 <_svfiprintf_r+0x1e8>)
 800c012:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c016:	2206      	movs	r2, #6
 800c018:	f7f4 f902 	bl	8000220 <memchr>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d036      	beq.n	800c08e <_svfiprintf_r+0x1d2>
 800c020:	4b21      	ldr	r3, [pc, #132]	@ (800c0a8 <_svfiprintf_r+0x1ec>)
 800c022:	bb1b      	cbnz	r3, 800c06c <_svfiprintf_r+0x1b0>
 800c024:	9b03      	ldr	r3, [sp, #12]
 800c026:	3307      	adds	r3, #7
 800c028:	f023 0307 	bic.w	r3, r3, #7
 800c02c:	3308      	adds	r3, #8
 800c02e:	9303      	str	r3, [sp, #12]
 800c030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c032:	4433      	add	r3, r6
 800c034:	9309      	str	r3, [sp, #36]	@ 0x24
 800c036:	e76a      	b.n	800bf0e <_svfiprintf_r+0x52>
 800c038:	fb0c 3202 	mla	r2, ip, r2, r3
 800c03c:	460c      	mov	r4, r1
 800c03e:	2001      	movs	r0, #1
 800c040:	e7a8      	b.n	800bf94 <_svfiprintf_r+0xd8>
 800c042:	2300      	movs	r3, #0
 800c044:	3401      	adds	r4, #1
 800c046:	9305      	str	r3, [sp, #20]
 800c048:	4619      	mov	r1, r3
 800c04a:	f04f 0c0a 	mov.w	ip, #10
 800c04e:	4620      	mov	r0, r4
 800c050:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c054:	3a30      	subs	r2, #48	@ 0x30
 800c056:	2a09      	cmp	r2, #9
 800c058:	d903      	bls.n	800c062 <_svfiprintf_r+0x1a6>
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d0c6      	beq.n	800bfec <_svfiprintf_r+0x130>
 800c05e:	9105      	str	r1, [sp, #20]
 800c060:	e7c4      	b.n	800bfec <_svfiprintf_r+0x130>
 800c062:	fb0c 2101 	mla	r1, ip, r1, r2
 800c066:	4604      	mov	r4, r0
 800c068:	2301      	movs	r3, #1
 800c06a:	e7f0      	b.n	800c04e <_svfiprintf_r+0x192>
 800c06c:	ab03      	add	r3, sp, #12
 800c06e:	9300      	str	r3, [sp, #0]
 800c070:	462a      	mov	r2, r5
 800c072:	4b0e      	ldr	r3, [pc, #56]	@ (800c0ac <_svfiprintf_r+0x1f0>)
 800c074:	a904      	add	r1, sp, #16
 800c076:	4638      	mov	r0, r7
 800c078:	f7fc fc80 	bl	800897c <_printf_float>
 800c07c:	1c42      	adds	r2, r0, #1
 800c07e:	4606      	mov	r6, r0
 800c080:	d1d6      	bne.n	800c030 <_svfiprintf_r+0x174>
 800c082:	89ab      	ldrh	r3, [r5, #12]
 800c084:	065b      	lsls	r3, r3, #25
 800c086:	f53f af2d 	bmi.w	800bee4 <_svfiprintf_r+0x28>
 800c08a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c08c:	e72c      	b.n	800bee8 <_svfiprintf_r+0x2c>
 800c08e:	ab03      	add	r3, sp, #12
 800c090:	9300      	str	r3, [sp, #0]
 800c092:	462a      	mov	r2, r5
 800c094:	4b05      	ldr	r3, [pc, #20]	@ (800c0ac <_svfiprintf_r+0x1f0>)
 800c096:	a904      	add	r1, sp, #16
 800c098:	4638      	mov	r0, r7
 800c09a:	f7fc ff07 	bl	8008eac <_printf_i>
 800c09e:	e7ed      	b.n	800c07c <_svfiprintf_r+0x1c0>
 800c0a0:	0800dc49 	.word	0x0800dc49
 800c0a4:	0800dc53 	.word	0x0800dc53
 800c0a8:	0800897d 	.word	0x0800897d
 800c0ac:	0800be05 	.word	0x0800be05
 800c0b0:	0800dc4f 	.word	0x0800dc4f

0800c0b4 <_sungetc_r>:
 800c0b4:	b538      	push	{r3, r4, r5, lr}
 800c0b6:	1c4b      	adds	r3, r1, #1
 800c0b8:	4614      	mov	r4, r2
 800c0ba:	d103      	bne.n	800c0c4 <_sungetc_r+0x10>
 800c0bc:	f04f 35ff 	mov.w	r5, #4294967295
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	bd38      	pop	{r3, r4, r5, pc}
 800c0c4:	8993      	ldrh	r3, [r2, #12]
 800c0c6:	f023 0320 	bic.w	r3, r3, #32
 800c0ca:	8193      	strh	r3, [r2, #12]
 800c0cc:	6853      	ldr	r3, [r2, #4]
 800c0ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c0d0:	b2cd      	uxtb	r5, r1
 800c0d2:	b18a      	cbz	r2, 800c0f8 <_sungetc_r+0x44>
 800c0d4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	dd08      	ble.n	800c0ec <_sungetc_r+0x38>
 800c0da:	6823      	ldr	r3, [r4, #0]
 800c0dc:	1e5a      	subs	r2, r3, #1
 800c0de:	6022      	str	r2, [r4, #0]
 800c0e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c0e4:	6863      	ldr	r3, [r4, #4]
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	6063      	str	r3, [r4, #4]
 800c0ea:	e7e9      	b.n	800c0c0 <_sungetc_r+0xc>
 800c0ec:	4621      	mov	r1, r4
 800c0ee:	f000 fbe0 	bl	800c8b2 <__submore>
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d0f1      	beq.n	800c0da <_sungetc_r+0x26>
 800c0f6:	e7e1      	b.n	800c0bc <_sungetc_r+0x8>
 800c0f8:	6921      	ldr	r1, [r4, #16]
 800c0fa:	6822      	ldr	r2, [r4, #0]
 800c0fc:	b141      	cbz	r1, 800c110 <_sungetc_r+0x5c>
 800c0fe:	4291      	cmp	r1, r2
 800c100:	d206      	bcs.n	800c110 <_sungetc_r+0x5c>
 800c102:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800c106:	42a9      	cmp	r1, r5
 800c108:	d102      	bne.n	800c110 <_sungetc_r+0x5c>
 800c10a:	3a01      	subs	r2, #1
 800c10c:	6022      	str	r2, [r4, #0]
 800c10e:	e7ea      	b.n	800c0e6 <_sungetc_r+0x32>
 800c110:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800c114:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c118:	6363      	str	r3, [r4, #52]	@ 0x34
 800c11a:	2303      	movs	r3, #3
 800c11c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c11e:	4623      	mov	r3, r4
 800c120:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c124:	6023      	str	r3, [r4, #0]
 800c126:	2301      	movs	r3, #1
 800c128:	e7de      	b.n	800c0e8 <_sungetc_r+0x34>

0800c12a <__ssrefill_r>:
 800c12a:	b510      	push	{r4, lr}
 800c12c:	460c      	mov	r4, r1
 800c12e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c130:	b169      	cbz	r1, 800c14e <__ssrefill_r+0x24>
 800c132:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c136:	4299      	cmp	r1, r3
 800c138:	d001      	beq.n	800c13e <__ssrefill_r+0x14>
 800c13a:	f7fe fa2d 	bl	800a598 <_free_r>
 800c13e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c140:	6063      	str	r3, [r4, #4]
 800c142:	2000      	movs	r0, #0
 800c144:	6360      	str	r0, [r4, #52]	@ 0x34
 800c146:	b113      	cbz	r3, 800c14e <__ssrefill_r+0x24>
 800c148:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c14a:	6023      	str	r3, [r4, #0]
 800c14c:	bd10      	pop	{r4, pc}
 800c14e:	6923      	ldr	r3, [r4, #16]
 800c150:	6023      	str	r3, [r4, #0]
 800c152:	2300      	movs	r3, #0
 800c154:	6063      	str	r3, [r4, #4]
 800c156:	89a3      	ldrh	r3, [r4, #12]
 800c158:	f043 0320 	orr.w	r3, r3, #32
 800c15c:	81a3      	strh	r3, [r4, #12]
 800c15e:	f04f 30ff 	mov.w	r0, #4294967295
 800c162:	e7f3      	b.n	800c14c <__ssrefill_r+0x22>

0800c164 <__ssvfiscanf_r>:
 800c164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c168:	460c      	mov	r4, r1
 800c16a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800c16e:	2100      	movs	r1, #0
 800c170:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800c174:	49a5      	ldr	r1, [pc, #660]	@ (800c40c <__ssvfiscanf_r+0x2a8>)
 800c176:	91a0      	str	r1, [sp, #640]	@ 0x280
 800c178:	f10d 0804 	add.w	r8, sp, #4
 800c17c:	49a4      	ldr	r1, [pc, #656]	@ (800c410 <__ssvfiscanf_r+0x2ac>)
 800c17e:	4fa5      	ldr	r7, [pc, #660]	@ (800c414 <__ssvfiscanf_r+0x2b0>)
 800c180:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800c184:	4606      	mov	r6, r0
 800c186:	91a1      	str	r1, [sp, #644]	@ 0x284
 800c188:	9300      	str	r3, [sp, #0]
 800c18a:	7813      	ldrb	r3, [r2, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f000 8158 	beq.w	800c442 <__ssvfiscanf_r+0x2de>
 800c192:	5cf9      	ldrb	r1, [r7, r3]
 800c194:	f011 0108 	ands.w	r1, r1, #8
 800c198:	f102 0501 	add.w	r5, r2, #1
 800c19c:	d019      	beq.n	800c1d2 <__ssvfiscanf_r+0x6e>
 800c19e:	6863      	ldr	r3, [r4, #4]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	dd0f      	ble.n	800c1c4 <__ssvfiscanf_r+0x60>
 800c1a4:	6823      	ldr	r3, [r4, #0]
 800c1a6:	781a      	ldrb	r2, [r3, #0]
 800c1a8:	5cba      	ldrb	r2, [r7, r2]
 800c1aa:	0712      	lsls	r2, r2, #28
 800c1ac:	d401      	bmi.n	800c1b2 <__ssvfiscanf_r+0x4e>
 800c1ae:	462a      	mov	r2, r5
 800c1b0:	e7eb      	b.n	800c18a <__ssvfiscanf_r+0x26>
 800c1b2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c1b4:	3201      	adds	r2, #1
 800c1b6:	9245      	str	r2, [sp, #276]	@ 0x114
 800c1b8:	6862      	ldr	r2, [r4, #4]
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	3a01      	subs	r2, #1
 800c1be:	6062      	str	r2, [r4, #4]
 800c1c0:	6023      	str	r3, [r4, #0]
 800c1c2:	e7ec      	b.n	800c19e <__ssvfiscanf_r+0x3a>
 800c1c4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c1c6:	4621      	mov	r1, r4
 800c1c8:	4630      	mov	r0, r6
 800c1ca:	4798      	blx	r3
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d0e9      	beq.n	800c1a4 <__ssvfiscanf_r+0x40>
 800c1d0:	e7ed      	b.n	800c1ae <__ssvfiscanf_r+0x4a>
 800c1d2:	2b25      	cmp	r3, #37	@ 0x25
 800c1d4:	d012      	beq.n	800c1fc <__ssvfiscanf_r+0x98>
 800c1d6:	4699      	mov	r9, r3
 800c1d8:	6863      	ldr	r3, [r4, #4]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	f340 8093 	ble.w	800c306 <__ssvfiscanf_r+0x1a2>
 800c1e0:	6822      	ldr	r2, [r4, #0]
 800c1e2:	7813      	ldrb	r3, [r2, #0]
 800c1e4:	454b      	cmp	r3, r9
 800c1e6:	f040 812c 	bne.w	800c442 <__ssvfiscanf_r+0x2de>
 800c1ea:	6863      	ldr	r3, [r4, #4]
 800c1ec:	3b01      	subs	r3, #1
 800c1ee:	6063      	str	r3, [r4, #4]
 800c1f0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800c1f2:	3201      	adds	r2, #1
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	6022      	str	r2, [r4, #0]
 800c1f8:	9345      	str	r3, [sp, #276]	@ 0x114
 800c1fa:	e7d8      	b.n	800c1ae <__ssvfiscanf_r+0x4a>
 800c1fc:	9141      	str	r1, [sp, #260]	@ 0x104
 800c1fe:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c200:	7853      	ldrb	r3, [r2, #1]
 800c202:	2b2a      	cmp	r3, #42	@ 0x2a
 800c204:	bf02      	ittt	eq
 800c206:	2310      	moveq	r3, #16
 800c208:	1c95      	addeq	r5, r2, #2
 800c20a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800c20c:	220a      	movs	r2, #10
 800c20e:	46a9      	mov	r9, r5
 800c210:	f819 1b01 	ldrb.w	r1, [r9], #1
 800c214:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800c218:	2b09      	cmp	r3, #9
 800c21a:	d91e      	bls.n	800c25a <__ssvfiscanf_r+0xf6>
 800c21c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800c418 <__ssvfiscanf_r+0x2b4>
 800c220:	2203      	movs	r2, #3
 800c222:	4650      	mov	r0, sl
 800c224:	f7f3 fffc 	bl	8000220 <memchr>
 800c228:	b138      	cbz	r0, 800c23a <__ssvfiscanf_r+0xd6>
 800c22a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c22c:	eba0 000a 	sub.w	r0, r0, sl
 800c230:	2301      	movs	r3, #1
 800c232:	4083      	lsls	r3, r0
 800c234:	4313      	orrs	r3, r2
 800c236:	9341      	str	r3, [sp, #260]	@ 0x104
 800c238:	464d      	mov	r5, r9
 800c23a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c23e:	2b78      	cmp	r3, #120	@ 0x78
 800c240:	d806      	bhi.n	800c250 <__ssvfiscanf_r+0xec>
 800c242:	2b57      	cmp	r3, #87	@ 0x57
 800c244:	d810      	bhi.n	800c268 <__ssvfiscanf_r+0x104>
 800c246:	2b25      	cmp	r3, #37	@ 0x25
 800c248:	d0c5      	beq.n	800c1d6 <__ssvfiscanf_r+0x72>
 800c24a:	d857      	bhi.n	800c2fc <__ssvfiscanf_r+0x198>
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d065      	beq.n	800c31c <__ssvfiscanf_r+0x1b8>
 800c250:	2303      	movs	r3, #3
 800c252:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c254:	230a      	movs	r3, #10
 800c256:	9342      	str	r3, [sp, #264]	@ 0x108
 800c258:	e078      	b.n	800c34c <__ssvfiscanf_r+0x1e8>
 800c25a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800c25c:	fb02 1103 	mla	r1, r2, r3, r1
 800c260:	3930      	subs	r1, #48	@ 0x30
 800c262:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c264:	464d      	mov	r5, r9
 800c266:	e7d2      	b.n	800c20e <__ssvfiscanf_r+0xaa>
 800c268:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800c26c:	2a20      	cmp	r2, #32
 800c26e:	d8ef      	bhi.n	800c250 <__ssvfiscanf_r+0xec>
 800c270:	a101      	add	r1, pc, #4	@ (adr r1, 800c278 <__ssvfiscanf_r+0x114>)
 800c272:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c276:	bf00      	nop
 800c278:	0800c32b 	.word	0x0800c32b
 800c27c:	0800c251 	.word	0x0800c251
 800c280:	0800c251 	.word	0x0800c251
 800c284:	0800c385 	.word	0x0800c385
 800c288:	0800c251 	.word	0x0800c251
 800c28c:	0800c251 	.word	0x0800c251
 800c290:	0800c251 	.word	0x0800c251
 800c294:	0800c251 	.word	0x0800c251
 800c298:	0800c251 	.word	0x0800c251
 800c29c:	0800c251 	.word	0x0800c251
 800c2a0:	0800c251 	.word	0x0800c251
 800c2a4:	0800c39b 	.word	0x0800c39b
 800c2a8:	0800c381 	.word	0x0800c381
 800c2ac:	0800c303 	.word	0x0800c303
 800c2b0:	0800c303 	.word	0x0800c303
 800c2b4:	0800c303 	.word	0x0800c303
 800c2b8:	0800c251 	.word	0x0800c251
 800c2bc:	0800c33d 	.word	0x0800c33d
 800c2c0:	0800c251 	.word	0x0800c251
 800c2c4:	0800c251 	.word	0x0800c251
 800c2c8:	0800c251 	.word	0x0800c251
 800c2cc:	0800c251 	.word	0x0800c251
 800c2d0:	0800c3ab 	.word	0x0800c3ab
 800c2d4:	0800c345 	.word	0x0800c345
 800c2d8:	0800c323 	.word	0x0800c323
 800c2dc:	0800c251 	.word	0x0800c251
 800c2e0:	0800c251 	.word	0x0800c251
 800c2e4:	0800c3a7 	.word	0x0800c3a7
 800c2e8:	0800c251 	.word	0x0800c251
 800c2ec:	0800c381 	.word	0x0800c381
 800c2f0:	0800c251 	.word	0x0800c251
 800c2f4:	0800c251 	.word	0x0800c251
 800c2f8:	0800c32b 	.word	0x0800c32b
 800c2fc:	3b45      	subs	r3, #69	@ 0x45
 800c2fe:	2b02      	cmp	r3, #2
 800c300:	d8a6      	bhi.n	800c250 <__ssvfiscanf_r+0xec>
 800c302:	2305      	movs	r3, #5
 800c304:	e021      	b.n	800c34a <__ssvfiscanf_r+0x1e6>
 800c306:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c308:	4621      	mov	r1, r4
 800c30a:	4630      	mov	r0, r6
 800c30c:	4798      	blx	r3
 800c30e:	2800      	cmp	r0, #0
 800c310:	f43f af66 	beq.w	800c1e0 <__ssvfiscanf_r+0x7c>
 800c314:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c316:	2800      	cmp	r0, #0
 800c318:	f040 808b 	bne.w	800c432 <__ssvfiscanf_r+0x2ce>
 800c31c:	f04f 30ff 	mov.w	r0, #4294967295
 800c320:	e08b      	b.n	800c43a <__ssvfiscanf_r+0x2d6>
 800c322:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c324:	f042 0220 	orr.w	r2, r2, #32
 800c328:	9241      	str	r2, [sp, #260]	@ 0x104
 800c32a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c32c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c330:	9241      	str	r2, [sp, #260]	@ 0x104
 800c332:	2210      	movs	r2, #16
 800c334:	2b6e      	cmp	r3, #110	@ 0x6e
 800c336:	9242      	str	r2, [sp, #264]	@ 0x108
 800c338:	d902      	bls.n	800c340 <__ssvfiscanf_r+0x1dc>
 800c33a:	e005      	b.n	800c348 <__ssvfiscanf_r+0x1e4>
 800c33c:	2300      	movs	r3, #0
 800c33e:	9342      	str	r3, [sp, #264]	@ 0x108
 800c340:	2303      	movs	r3, #3
 800c342:	e002      	b.n	800c34a <__ssvfiscanf_r+0x1e6>
 800c344:	2308      	movs	r3, #8
 800c346:	9342      	str	r3, [sp, #264]	@ 0x108
 800c348:	2304      	movs	r3, #4
 800c34a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c34c:	6863      	ldr	r3, [r4, #4]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	dd39      	ble.n	800c3c6 <__ssvfiscanf_r+0x262>
 800c352:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c354:	0659      	lsls	r1, r3, #25
 800c356:	d404      	bmi.n	800c362 <__ssvfiscanf_r+0x1fe>
 800c358:	6823      	ldr	r3, [r4, #0]
 800c35a:	781a      	ldrb	r2, [r3, #0]
 800c35c:	5cba      	ldrb	r2, [r7, r2]
 800c35e:	0712      	lsls	r2, r2, #28
 800c360:	d438      	bmi.n	800c3d4 <__ssvfiscanf_r+0x270>
 800c362:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c364:	2b02      	cmp	r3, #2
 800c366:	dc47      	bgt.n	800c3f8 <__ssvfiscanf_r+0x294>
 800c368:	466b      	mov	r3, sp
 800c36a:	4622      	mov	r2, r4
 800c36c:	a941      	add	r1, sp, #260	@ 0x104
 800c36e:	4630      	mov	r0, r6
 800c370:	f000 f86c 	bl	800c44c <_scanf_chars>
 800c374:	2801      	cmp	r0, #1
 800c376:	d064      	beq.n	800c442 <__ssvfiscanf_r+0x2de>
 800c378:	2802      	cmp	r0, #2
 800c37a:	f47f af18 	bne.w	800c1ae <__ssvfiscanf_r+0x4a>
 800c37e:	e7c9      	b.n	800c314 <__ssvfiscanf_r+0x1b0>
 800c380:	220a      	movs	r2, #10
 800c382:	e7d7      	b.n	800c334 <__ssvfiscanf_r+0x1d0>
 800c384:	4629      	mov	r1, r5
 800c386:	4640      	mov	r0, r8
 800c388:	f000 fa5a 	bl	800c840 <__sccl>
 800c38c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c38e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c392:	9341      	str	r3, [sp, #260]	@ 0x104
 800c394:	4605      	mov	r5, r0
 800c396:	2301      	movs	r3, #1
 800c398:	e7d7      	b.n	800c34a <__ssvfiscanf_r+0x1e6>
 800c39a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c39c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3a0:	9341      	str	r3, [sp, #260]	@ 0x104
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	e7d1      	b.n	800c34a <__ssvfiscanf_r+0x1e6>
 800c3a6:	2302      	movs	r3, #2
 800c3a8:	e7cf      	b.n	800c34a <__ssvfiscanf_r+0x1e6>
 800c3aa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c3ac:	06c3      	lsls	r3, r0, #27
 800c3ae:	f53f aefe 	bmi.w	800c1ae <__ssvfiscanf_r+0x4a>
 800c3b2:	9b00      	ldr	r3, [sp, #0]
 800c3b4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c3b6:	1d19      	adds	r1, r3, #4
 800c3b8:	9100      	str	r1, [sp, #0]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	07c0      	lsls	r0, r0, #31
 800c3be:	bf4c      	ite	mi
 800c3c0:	801a      	strhmi	r2, [r3, #0]
 800c3c2:	601a      	strpl	r2, [r3, #0]
 800c3c4:	e6f3      	b.n	800c1ae <__ssvfiscanf_r+0x4a>
 800c3c6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c3c8:	4621      	mov	r1, r4
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	4798      	blx	r3
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	d0bf      	beq.n	800c352 <__ssvfiscanf_r+0x1ee>
 800c3d2:	e79f      	b.n	800c314 <__ssvfiscanf_r+0x1b0>
 800c3d4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c3d6:	3201      	adds	r2, #1
 800c3d8:	9245      	str	r2, [sp, #276]	@ 0x114
 800c3da:	6862      	ldr	r2, [r4, #4]
 800c3dc:	3a01      	subs	r2, #1
 800c3de:	2a00      	cmp	r2, #0
 800c3e0:	6062      	str	r2, [r4, #4]
 800c3e2:	dd02      	ble.n	800c3ea <__ssvfiscanf_r+0x286>
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	6023      	str	r3, [r4, #0]
 800c3e8:	e7b6      	b.n	800c358 <__ssvfiscanf_r+0x1f4>
 800c3ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c3ec:	4621      	mov	r1, r4
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	4798      	blx	r3
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	d0b0      	beq.n	800c358 <__ssvfiscanf_r+0x1f4>
 800c3f6:	e78d      	b.n	800c314 <__ssvfiscanf_r+0x1b0>
 800c3f8:	2b04      	cmp	r3, #4
 800c3fa:	dc0f      	bgt.n	800c41c <__ssvfiscanf_r+0x2b8>
 800c3fc:	466b      	mov	r3, sp
 800c3fe:	4622      	mov	r2, r4
 800c400:	a941      	add	r1, sp, #260	@ 0x104
 800c402:	4630      	mov	r0, r6
 800c404:	f000 f87c 	bl	800c500 <_scanf_i>
 800c408:	e7b4      	b.n	800c374 <__ssvfiscanf_r+0x210>
 800c40a:	bf00      	nop
 800c40c:	0800c0b5 	.word	0x0800c0b5
 800c410:	0800c12b 	.word	0x0800c12b
 800c414:	0800db49 	.word	0x0800db49
 800c418:	0800dc4f 	.word	0x0800dc4f
 800c41c:	4b0a      	ldr	r3, [pc, #40]	@ (800c448 <__ssvfiscanf_r+0x2e4>)
 800c41e:	2b00      	cmp	r3, #0
 800c420:	f43f aec5 	beq.w	800c1ae <__ssvfiscanf_r+0x4a>
 800c424:	466b      	mov	r3, sp
 800c426:	4622      	mov	r2, r4
 800c428:	a941      	add	r1, sp, #260	@ 0x104
 800c42a:	4630      	mov	r0, r6
 800c42c:	f7fc fe5e 	bl	80090ec <_scanf_float>
 800c430:	e7a0      	b.n	800c374 <__ssvfiscanf_r+0x210>
 800c432:	89a3      	ldrh	r3, [r4, #12]
 800c434:	065b      	lsls	r3, r3, #25
 800c436:	f53f af71 	bmi.w	800c31c <__ssvfiscanf_r+0x1b8>
 800c43a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800c43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c442:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c444:	e7f9      	b.n	800c43a <__ssvfiscanf_r+0x2d6>
 800c446:	bf00      	nop
 800c448:	080090ed 	.word	0x080090ed

0800c44c <_scanf_chars>:
 800c44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c450:	4615      	mov	r5, r2
 800c452:	688a      	ldr	r2, [r1, #8]
 800c454:	4680      	mov	r8, r0
 800c456:	460c      	mov	r4, r1
 800c458:	b932      	cbnz	r2, 800c468 <_scanf_chars+0x1c>
 800c45a:	698a      	ldr	r2, [r1, #24]
 800c45c:	2a00      	cmp	r2, #0
 800c45e:	bf14      	ite	ne
 800c460:	f04f 32ff 	movne.w	r2, #4294967295
 800c464:	2201      	moveq	r2, #1
 800c466:	608a      	str	r2, [r1, #8]
 800c468:	6822      	ldr	r2, [r4, #0]
 800c46a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800c4fc <_scanf_chars+0xb0>
 800c46e:	06d1      	lsls	r1, r2, #27
 800c470:	bf5f      	itttt	pl
 800c472:	681a      	ldrpl	r2, [r3, #0]
 800c474:	1d11      	addpl	r1, r2, #4
 800c476:	6019      	strpl	r1, [r3, #0]
 800c478:	6816      	ldrpl	r6, [r2, #0]
 800c47a:	2700      	movs	r7, #0
 800c47c:	69a0      	ldr	r0, [r4, #24]
 800c47e:	b188      	cbz	r0, 800c4a4 <_scanf_chars+0x58>
 800c480:	2801      	cmp	r0, #1
 800c482:	d107      	bne.n	800c494 <_scanf_chars+0x48>
 800c484:	682b      	ldr	r3, [r5, #0]
 800c486:	781a      	ldrb	r2, [r3, #0]
 800c488:	6963      	ldr	r3, [r4, #20]
 800c48a:	5c9b      	ldrb	r3, [r3, r2]
 800c48c:	b953      	cbnz	r3, 800c4a4 <_scanf_chars+0x58>
 800c48e:	2f00      	cmp	r7, #0
 800c490:	d031      	beq.n	800c4f6 <_scanf_chars+0xaa>
 800c492:	e022      	b.n	800c4da <_scanf_chars+0x8e>
 800c494:	2802      	cmp	r0, #2
 800c496:	d120      	bne.n	800c4da <_scanf_chars+0x8e>
 800c498:	682b      	ldr	r3, [r5, #0]
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c4a0:	071b      	lsls	r3, r3, #28
 800c4a2:	d41a      	bmi.n	800c4da <_scanf_chars+0x8e>
 800c4a4:	6823      	ldr	r3, [r4, #0]
 800c4a6:	06da      	lsls	r2, r3, #27
 800c4a8:	bf5e      	ittt	pl
 800c4aa:	682b      	ldrpl	r3, [r5, #0]
 800c4ac:	781b      	ldrbpl	r3, [r3, #0]
 800c4ae:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c4b2:	682a      	ldr	r2, [r5, #0]
 800c4b4:	686b      	ldr	r3, [r5, #4]
 800c4b6:	3201      	adds	r2, #1
 800c4b8:	602a      	str	r2, [r5, #0]
 800c4ba:	68a2      	ldr	r2, [r4, #8]
 800c4bc:	3b01      	subs	r3, #1
 800c4be:	3a01      	subs	r2, #1
 800c4c0:	606b      	str	r3, [r5, #4]
 800c4c2:	3701      	adds	r7, #1
 800c4c4:	60a2      	str	r2, [r4, #8]
 800c4c6:	b142      	cbz	r2, 800c4da <_scanf_chars+0x8e>
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	dcd7      	bgt.n	800c47c <_scanf_chars+0x30>
 800c4cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	4640      	mov	r0, r8
 800c4d4:	4798      	blx	r3
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	d0d0      	beq.n	800c47c <_scanf_chars+0x30>
 800c4da:	6823      	ldr	r3, [r4, #0]
 800c4dc:	f013 0310 	ands.w	r3, r3, #16
 800c4e0:	d105      	bne.n	800c4ee <_scanf_chars+0xa2>
 800c4e2:	68e2      	ldr	r2, [r4, #12]
 800c4e4:	3201      	adds	r2, #1
 800c4e6:	60e2      	str	r2, [r4, #12]
 800c4e8:	69a2      	ldr	r2, [r4, #24]
 800c4ea:	b102      	cbz	r2, 800c4ee <_scanf_chars+0xa2>
 800c4ec:	7033      	strb	r3, [r6, #0]
 800c4ee:	6923      	ldr	r3, [r4, #16]
 800c4f0:	443b      	add	r3, r7
 800c4f2:	6123      	str	r3, [r4, #16]
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4fa:	bf00      	nop
 800c4fc:	0800db49 	.word	0x0800db49

0800c500 <_scanf_i>:
 800c500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c504:	4698      	mov	r8, r3
 800c506:	4b74      	ldr	r3, [pc, #464]	@ (800c6d8 <_scanf_i+0x1d8>)
 800c508:	460c      	mov	r4, r1
 800c50a:	4682      	mov	sl, r0
 800c50c:	4616      	mov	r6, r2
 800c50e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c512:	b087      	sub	sp, #28
 800c514:	ab03      	add	r3, sp, #12
 800c516:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c51a:	4b70      	ldr	r3, [pc, #448]	@ (800c6dc <_scanf_i+0x1dc>)
 800c51c:	69a1      	ldr	r1, [r4, #24]
 800c51e:	4a70      	ldr	r2, [pc, #448]	@ (800c6e0 <_scanf_i+0x1e0>)
 800c520:	2903      	cmp	r1, #3
 800c522:	bf08      	it	eq
 800c524:	461a      	moveq	r2, r3
 800c526:	68a3      	ldr	r3, [r4, #8]
 800c528:	9201      	str	r2, [sp, #4]
 800c52a:	1e5a      	subs	r2, r3, #1
 800c52c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c530:	bf88      	it	hi
 800c532:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c536:	4627      	mov	r7, r4
 800c538:	bf82      	ittt	hi
 800c53a:	eb03 0905 	addhi.w	r9, r3, r5
 800c53e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c542:	60a3      	strhi	r3, [r4, #8]
 800c544:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c548:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800c54c:	bf98      	it	ls
 800c54e:	f04f 0900 	movls.w	r9, #0
 800c552:	6023      	str	r3, [r4, #0]
 800c554:	463d      	mov	r5, r7
 800c556:	f04f 0b00 	mov.w	fp, #0
 800c55a:	6831      	ldr	r1, [r6, #0]
 800c55c:	ab03      	add	r3, sp, #12
 800c55e:	7809      	ldrb	r1, [r1, #0]
 800c560:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c564:	2202      	movs	r2, #2
 800c566:	f7f3 fe5b 	bl	8000220 <memchr>
 800c56a:	b328      	cbz	r0, 800c5b8 <_scanf_i+0xb8>
 800c56c:	f1bb 0f01 	cmp.w	fp, #1
 800c570:	d159      	bne.n	800c626 <_scanf_i+0x126>
 800c572:	6862      	ldr	r2, [r4, #4]
 800c574:	b92a      	cbnz	r2, 800c582 <_scanf_i+0x82>
 800c576:	6822      	ldr	r2, [r4, #0]
 800c578:	2108      	movs	r1, #8
 800c57a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c57e:	6061      	str	r1, [r4, #4]
 800c580:	6022      	str	r2, [r4, #0]
 800c582:	6822      	ldr	r2, [r4, #0]
 800c584:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800c588:	6022      	str	r2, [r4, #0]
 800c58a:	68a2      	ldr	r2, [r4, #8]
 800c58c:	1e51      	subs	r1, r2, #1
 800c58e:	60a1      	str	r1, [r4, #8]
 800c590:	b192      	cbz	r2, 800c5b8 <_scanf_i+0xb8>
 800c592:	6832      	ldr	r2, [r6, #0]
 800c594:	1c51      	adds	r1, r2, #1
 800c596:	6031      	str	r1, [r6, #0]
 800c598:	7812      	ldrb	r2, [r2, #0]
 800c59a:	f805 2b01 	strb.w	r2, [r5], #1
 800c59e:	6872      	ldr	r2, [r6, #4]
 800c5a0:	3a01      	subs	r2, #1
 800c5a2:	2a00      	cmp	r2, #0
 800c5a4:	6072      	str	r2, [r6, #4]
 800c5a6:	dc07      	bgt.n	800c5b8 <_scanf_i+0xb8>
 800c5a8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c5ac:	4631      	mov	r1, r6
 800c5ae:	4650      	mov	r0, sl
 800c5b0:	4790      	blx	r2
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	f040 8085 	bne.w	800c6c2 <_scanf_i+0x1c2>
 800c5b8:	f10b 0b01 	add.w	fp, fp, #1
 800c5bc:	f1bb 0f03 	cmp.w	fp, #3
 800c5c0:	d1cb      	bne.n	800c55a <_scanf_i+0x5a>
 800c5c2:	6863      	ldr	r3, [r4, #4]
 800c5c4:	b90b      	cbnz	r3, 800c5ca <_scanf_i+0xca>
 800c5c6:	230a      	movs	r3, #10
 800c5c8:	6063      	str	r3, [r4, #4]
 800c5ca:	6863      	ldr	r3, [r4, #4]
 800c5cc:	4945      	ldr	r1, [pc, #276]	@ (800c6e4 <_scanf_i+0x1e4>)
 800c5ce:	6960      	ldr	r0, [r4, #20]
 800c5d0:	1ac9      	subs	r1, r1, r3
 800c5d2:	f000 f935 	bl	800c840 <__sccl>
 800c5d6:	f04f 0b00 	mov.w	fp, #0
 800c5da:	68a3      	ldr	r3, [r4, #8]
 800c5dc:	6822      	ldr	r2, [r4, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d03d      	beq.n	800c65e <_scanf_i+0x15e>
 800c5e2:	6831      	ldr	r1, [r6, #0]
 800c5e4:	6960      	ldr	r0, [r4, #20]
 800c5e6:	f891 c000 	ldrb.w	ip, [r1]
 800c5ea:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	d035      	beq.n	800c65e <_scanf_i+0x15e>
 800c5f2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c5f6:	d124      	bne.n	800c642 <_scanf_i+0x142>
 800c5f8:	0510      	lsls	r0, r2, #20
 800c5fa:	d522      	bpl.n	800c642 <_scanf_i+0x142>
 800c5fc:	f10b 0b01 	add.w	fp, fp, #1
 800c600:	f1b9 0f00 	cmp.w	r9, #0
 800c604:	d003      	beq.n	800c60e <_scanf_i+0x10e>
 800c606:	3301      	adds	r3, #1
 800c608:	f109 39ff 	add.w	r9, r9, #4294967295
 800c60c:	60a3      	str	r3, [r4, #8]
 800c60e:	6873      	ldr	r3, [r6, #4]
 800c610:	3b01      	subs	r3, #1
 800c612:	2b00      	cmp	r3, #0
 800c614:	6073      	str	r3, [r6, #4]
 800c616:	dd1b      	ble.n	800c650 <_scanf_i+0x150>
 800c618:	6833      	ldr	r3, [r6, #0]
 800c61a:	3301      	adds	r3, #1
 800c61c:	6033      	str	r3, [r6, #0]
 800c61e:	68a3      	ldr	r3, [r4, #8]
 800c620:	3b01      	subs	r3, #1
 800c622:	60a3      	str	r3, [r4, #8]
 800c624:	e7d9      	b.n	800c5da <_scanf_i+0xda>
 800c626:	f1bb 0f02 	cmp.w	fp, #2
 800c62a:	d1ae      	bne.n	800c58a <_scanf_i+0x8a>
 800c62c:	6822      	ldr	r2, [r4, #0]
 800c62e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800c632:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c636:	d1bf      	bne.n	800c5b8 <_scanf_i+0xb8>
 800c638:	2110      	movs	r1, #16
 800c63a:	6061      	str	r1, [r4, #4]
 800c63c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c640:	e7a2      	b.n	800c588 <_scanf_i+0x88>
 800c642:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800c646:	6022      	str	r2, [r4, #0]
 800c648:	780b      	ldrb	r3, [r1, #0]
 800c64a:	f805 3b01 	strb.w	r3, [r5], #1
 800c64e:	e7de      	b.n	800c60e <_scanf_i+0x10e>
 800c650:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c654:	4631      	mov	r1, r6
 800c656:	4650      	mov	r0, sl
 800c658:	4798      	blx	r3
 800c65a:	2800      	cmp	r0, #0
 800c65c:	d0df      	beq.n	800c61e <_scanf_i+0x11e>
 800c65e:	6823      	ldr	r3, [r4, #0]
 800c660:	05d9      	lsls	r1, r3, #23
 800c662:	d50d      	bpl.n	800c680 <_scanf_i+0x180>
 800c664:	42bd      	cmp	r5, r7
 800c666:	d909      	bls.n	800c67c <_scanf_i+0x17c>
 800c668:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c66c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c670:	4632      	mov	r2, r6
 800c672:	4650      	mov	r0, sl
 800c674:	4798      	blx	r3
 800c676:	f105 39ff 	add.w	r9, r5, #4294967295
 800c67a:	464d      	mov	r5, r9
 800c67c:	42bd      	cmp	r5, r7
 800c67e:	d028      	beq.n	800c6d2 <_scanf_i+0x1d2>
 800c680:	6822      	ldr	r2, [r4, #0]
 800c682:	f012 0210 	ands.w	r2, r2, #16
 800c686:	d113      	bne.n	800c6b0 <_scanf_i+0x1b0>
 800c688:	702a      	strb	r2, [r5, #0]
 800c68a:	6863      	ldr	r3, [r4, #4]
 800c68c:	9e01      	ldr	r6, [sp, #4]
 800c68e:	4639      	mov	r1, r7
 800c690:	4650      	mov	r0, sl
 800c692:	47b0      	blx	r6
 800c694:	f8d8 3000 	ldr.w	r3, [r8]
 800c698:	6821      	ldr	r1, [r4, #0]
 800c69a:	1d1a      	adds	r2, r3, #4
 800c69c:	f8c8 2000 	str.w	r2, [r8]
 800c6a0:	f011 0f20 	tst.w	r1, #32
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	d00f      	beq.n	800c6c8 <_scanf_i+0x1c8>
 800c6a8:	6018      	str	r0, [r3, #0]
 800c6aa:	68e3      	ldr	r3, [r4, #12]
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	60e3      	str	r3, [r4, #12]
 800c6b0:	6923      	ldr	r3, [r4, #16]
 800c6b2:	1bed      	subs	r5, r5, r7
 800c6b4:	445d      	add	r5, fp
 800c6b6:	442b      	add	r3, r5
 800c6b8:	6123      	str	r3, [r4, #16]
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	b007      	add	sp, #28
 800c6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c2:	f04f 0b00 	mov.w	fp, #0
 800c6c6:	e7ca      	b.n	800c65e <_scanf_i+0x15e>
 800c6c8:	07ca      	lsls	r2, r1, #31
 800c6ca:	bf4c      	ite	mi
 800c6cc:	8018      	strhmi	r0, [r3, #0]
 800c6ce:	6018      	strpl	r0, [r3, #0]
 800c6d0:	e7eb      	b.n	800c6aa <_scanf_i+0x1aa>
 800c6d2:	2001      	movs	r0, #1
 800c6d4:	e7f2      	b.n	800c6bc <_scanf_i+0x1bc>
 800c6d6:	bf00      	nop
 800c6d8:	0800d888 	.word	0x0800d888
 800c6dc:	0800be01 	.word	0x0800be01
 800c6e0:	0800d1e5 	.word	0x0800d1e5
 800c6e4:	0800dc6a 	.word	0x0800dc6a

0800c6e8 <__sflush_r>:
 800c6e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f0:	0716      	lsls	r6, r2, #28
 800c6f2:	4605      	mov	r5, r0
 800c6f4:	460c      	mov	r4, r1
 800c6f6:	d454      	bmi.n	800c7a2 <__sflush_r+0xba>
 800c6f8:	684b      	ldr	r3, [r1, #4]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	dc02      	bgt.n	800c704 <__sflush_r+0x1c>
 800c6fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c700:	2b00      	cmp	r3, #0
 800c702:	dd48      	ble.n	800c796 <__sflush_r+0xae>
 800c704:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c706:	2e00      	cmp	r6, #0
 800c708:	d045      	beq.n	800c796 <__sflush_r+0xae>
 800c70a:	2300      	movs	r3, #0
 800c70c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c710:	682f      	ldr	r7, [r5, #0]
 800c712:	6a21      	ldr	r1, [r4, #32]
 800c714:	602b      	str	r3, [r5, #0]
 800c716:	d030      	beq.n	800c77a <__sflush_r+0x92>
 800c718:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c71a:	89a3      	ldrh	r3, [r4, #12]
 800c71c:	0759      	lsls	r1, r3, #29
 800c71e:	d505      	bpl.n	800c72c <__sflush_r+0x44>
 800c720:	6863      	ldr	r3, [r4, #4]
 800c722:	1ad2      	subs	r2, r2, r3
 800c724:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c726:	b10b      	cbz	r3, 800c72c <__sflush_r+0x44>
 800c728:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c72a:	1ad2      	subs	r2, r2, r3
 800c72c:	2300      	movs	r3, #0
 800c72e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c730:	6a21      	ldr	r1, [r4, #32]
 800c732:	4628      	mov	r0, r5
 800c734:	47b0      	blx	r6
 800c736:	1c43      	adds	r3, r0, #1
 800c738:	89a3      	ldrh	r3, [r4, #12]
 800c73a:	d106      	bne.n	800c74a <__sflush_r+0x62>
 800c73c:	6829      	ldr	r1, [r5, #0]
 800c73e:	291d      	cmp	r1, #29
 800c740:	d82b      	bhi.n	800c79a <__sflush_r+0xb2>
 800c742:	4a2a      	ldr	r2, [pc, #168]	@ (800c7ec <__sflush_r+0x104>)
 800c744:	410a      	asrs	r2, r1
 800c746:	07d6      	lsls	r6, r2, #31
 800c748:	d427      	bmi.n	800c79a <__sflush_r+0xb2>
 800c74a:	2200      	movs	r2, #0
 800c74c:	6062      	str	r2, [r4, #4]
 800c74e:	04d9      	lsls	r1, r3, #19
 800c750:	6922      	ldr	r2, [r4, #16]
 800c752:	6022      	str	r2, [r4, #0]
 800c754:	d504      	bpl.n	800c760 <__sflush_r+0x78>
 800c756:	1c42      	adds	r2, r0, #1
 800c758:	d101      	bne.n	800c75e <__sflush_r+0x76>
 800c75a:	682b      	ldr	r3, [r5, #0]
 800c75c:	b903      	cbnz	r3, 800c760 <__sflush_r+0x78>
 800c75e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c760:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c762:	602f      	str	r7, [r5, #0]
 800c764:	b1b9      	cbz	r1, 800c796 <__sflush_r+0xae>
 800c766:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c76a:	4299      	cmp	r1, r3
 800c76c:	d002      	beq.n	800c774 <__sflush_r+0x8c>
 800c76e:	4628      	mov	r0, r5
 800c770:	f7fd ff12 	bl	800a598 <_free_r>
 800c774:	2300      	movs	r3, #0
 800c776:	6363      	str	r3, [r4, #52]	@ 0x34
 800c778:	e00d      	b.n	800c796 <__sflush_r+0xae>
 800c77a:	2301      	movs	r3, #1
 800c77c:	4628      	mov	r0, r5
 800c77e:	47b0      	blx	r6
 800c780:	4602      	mov	r2, r0
 800c782:	1c50      	adds	r0, r2, #1
 800c784:	d1c9      	bne.n	800c71a <__sflush_r+0x32>
 800c786:	682b      	ldr	r3, [r5, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d0c6      	beq.n	800c71a <__sflush_r+0x32>
 800c78c:	2b1d      	cmp	r3, #29
 800c78e:	d001      	beq.n	800c794 <__sflush_r+0xac>
 800c790:	2b16      	cmp	r3, #22
 800c792:	d11e      	bne.n	800c7d2 <__sflush_r+0xea>
 800c794:	602f      	str	r7, [r5, #0]
 800c796:	2000      	movs	r0, #0
 800c798:	e022      	b.n	800c7e0 <__sflush_r+0xf8>
 800c79a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c79e:	b21b      	sxth	r3, r3
 800c7a0:	e01b      	b.n	800c7da <__sflush_r+0xf2>
 800c7a2:	690f      	ldr	r7, [r1, #16]
 800c7a4:	2f00      	cmp	r7, #0
 800c7a6:	d0f6      	beq.n	800c796 <__sflush_r+0xae>
 800c7a8:	0793      	lsls	r3, r2, #30
 800c7aa:	680e      	ldr	r6, [r1, #0]
 800c7ac:	bf08      	it	eq
 800c7ae:	694b      	ldreq	r3, [r1, #20]
 800c7b0:	600f      	str	r7, [r1, #0]
 800c7b2:	bf18      	it	ne
 800c7b4:	2300      	movne	r3, #0
 800c7b6:	eba6 0807 	sub.w	r8, r6, r7
 800c7ba:	608b      	str	r3, [r1, #8]
 800c7bc:	f1b8 0f00 	cmp.w	r8, #0
 800c7c0:	dde9      	ble.n	800c796 <__sflush_r+0xae>
 800c7c2:	6a21      	ldr	r1, [r4, #32]
 800c7c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c7c6:	4643      	mov	r3, r8
 800c7c8:	463a      	mov	r2, r7
 800c7ca:	4628      	mov	r0, r5
 800c7cc:	47b0      	blx	r6
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	dc08      	bgt.n	800c7e4 <__sflush_r+0xfc>
 800c7d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7da:	81a3      	strh	r3, [r4, #12]
 800c7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7e4:	4407      	add	r7, r0
 800c7e6:	eba8 0800 	sub.w	r8, r8, r0
 800c7ea:	e7e7      	b.n	800c7bc <__sflush_r+0xd4>
 800c7ec:	dfbffffe 	.word	0xdfbffffe

0800c7f0 <_fflush_r>:
 800c7f0:	b538      	push	{r3, r4, r5, lr}
 800c7f2:	690b      	ldr	r3, [r1, #16]
 800c7f4:	4605      	mov	r5, r0
 800c7f6:	460c      	mov	r4, r1
 800c7f8:	b913      	cbnz	r3, 800c800 <_fflush_r+0x10>
 800c7fa:	2500      	movs	r5, #0
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	bd38      	pop	{r3, r4, r5, pc}
 800c800:	b118      	cbz	r0, 800c80a <_fflush_r+0x1a>
 800c802:	6a03      	ldr	r3, [r0, #32]
 800c804:	b90b      	cbnz	r3, 800c80a <_fflush_r+0x1a>
 800c806:	f7fc ff11 	bl	800962c <__sinit>
 800c80a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d0f3      	beq.n	800c7fa <_fflush_r+0xa>
 800c812:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c814:	07d0      	lsls	r0, r2, #31
 800c816:	d404      	bmi.n	800c822 <_fflush_r+0x32>
 800c818:	0599      	lsls	r1, r3, #22
 800c81a:	d402      	bmi.n	800c822 <_fflush_r+0x32>
 800c81c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c81e:	f7fd f856 	bl	80098ce <__retarget_lock_acquire_recursive>
 800c822:	4628      	mov	r0, r5
 800c824:	4621      	mov	r1, r4
 800c826:	f7ff ff5f 	bl	800c6e8 <__sflush_r>
 800c82a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c82c:	07da      	lsls	r2, r3, #31
 800c82e:	4605      	mov	r5, r0
 800c830:	d4e4      	bmi.n	800c7fc <_fflush_r+0xc>
 800c832:	89a3      	ldrh	r3, [r4, #12]
 800c834:	059b      	lsls	r3, r3, #22
 800c836:	d4e1      	bmi.n	800c7fc <_fflush_r+0xc>
 800c838:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c83a:	f7fd f849 	bl	80098d0 <__retarget_lock_release_recursive>
 800c83e:	e7dd      	b.n	800c7fc <_fflush_r+0xc>

0800c840 <__sccl>:
 800c840:	b570      	push	{r4, r5, r6, lr}
 800c842:	780b      	ldrb	r3, [r1, #0]
 800c844:	4604      	mov	r4, r0
 800c846:	2b5e      	cmp	r3, #94	@ 0x5e
 800c848:	bf0b      	itete	eq
 800c84a:	784b      	ldrbeq	r3, [r1, #1]
 800c84c:	1c4a      	addne	r2, r1, #1
 800c84e:	1c8a      	addeq	r2, r1, #2
 800c850:	2100      	movne	r1, #0
 800c852:	bf08      	it	eq
 800c854:	2101      	moveq	r1, #1
 800c856:	3801      	subs	r0, #1
 800c858:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c85c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c860:	42a8      	cmp	r0, r5
 800c862:	d1fb      	bne.n	800c85c <__sccl+0x1c>
 800c864:	b90b      	cbnz	r3, 800c86a <__sccl+0x2a>
 800c866:	1e50      	subs	r0, r2, #1
 800c868:	bd70      	pop	{r4, r5, r6, pc}
 800c86a:	f081 0101 	eor.w	r1, r1, #1
 800c86e:	54e1      	strb	r1, [r4, r3]
 800c870:	4610      	mov	r0, r2
 800c872:	4602      	mov	r2, r0
 800c874:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c878:	2d2d      	cmp	r5, #45	@ 0x2d
 800c87a:	d005      	beq.n	800c888 <__sccl+0x48>
 800c87c:	2d5d      	cmp	r5, #93	@ 0x5d
 800c87e:	d016      	beq.n	800c8ae <__sccl+0x6e>
 800c880:	2d00      	cmp	r5, #0
 800c882:	d0f1      	beq.n	800c868 <__sccl+0x28>
 800c884:	462b      	mov	r3, r5
 800c886:	e7f2      	b.n	800c86e <__sccl+0x2e>
 800c888:	7846      	ldrb	r6, [r0, #1]
 800c88a:	2e5d      	cmp	r6, #93	@ 0x5d
 800c88c:	d0fa      	beq.n	800c884 <__sccl+0x44>
 800c88e:	42b3      	cmp	r3, r6
 800c890:	dcf8      	bgt.n	800c884 <__sccl+0x44>
 800c892:	3002      	adds	r0, #2
 800c894:	461a      	mov	r2, r3
 800c896:	3201      	adds	r2, #1
 800c898:	4296      	cmp	r6, r2
 800c89a:	54a1      	strb	r1, [r4, r2]
 800c89c:	dcfb      	bgt.n	800c896 <__sccl+0x56>
 800c89e:	1af2      	subs	r2, r6, r3
 800c8a0:	3a01      	subs	r2, #1
 800c8a2:	1c5d      	adds	r5, r3, #1
 800c8a4:	42b3      	cmp	r3, r6
 800c8a6:	bfa8      	it	ge
 800c8a8:	2200      	movge	r2, #0
 800c8aa:	18ab      	adds	r3, r5, r2
 800c8ac:	e7e1      	b.n	800c872 <__sccl+0x32>
 800c8ae:	4610      	mov	r0, r2
 800c8b0:	e7da      	b.n	800c868 <__sccl+0x28>

0800c8b2 <__submore>:
 800c8b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b6:	460c      	mov	r4, r1
 800c8b8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c8ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8be:	4299      	cmp	r1, r3
 800c8c0:	d11d      	bne.n	800c8fe <__submore+0x4c>
 800c8c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c8c6:	f7fd fedb 	bl	800a680 <_malloc_r>
 800c8ca:	b918      	cbnz	r0, 800c8d4 <__submore+0x22>
 800c8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c8d8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c8da:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c8de:	6360      	str	r0, [r4, #52]	@ 0x34
 800c8e0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800c8e4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c8e8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800c8ec:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c8f0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800c8f4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c8f8:	6020      	str	r0, [r4, #0]
 800c8fa:	2000      	movs	r0, #0
 800c8fc:	e7e8      	b.n	800c8d0 <__submore+0x1e>
 800c8fe:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c900:	0077      	lsls	r7, r6, #1
 800c902:	463a      	mov	r2, r7
 800c904:	f000 fbd1 	bl	800d0aa <_realloc_r>
 800c908:	4605      	mov	r5, r0
 800c90a:	2800      	cmp	r0, #0
 800c90c:	d0de      	beq.n	800c8cc <__submore+0x1a>
 800c90e:	eb00 0806 	add.w	r8, r0, r6
 800c912:	4601      	mov	r1, r0
 800c914:	4632      	mov	r2, r6
 800c916:	4640      	mov	r0, r8
 800c918:	f7fc ffdb 	bl	80098d2 <memcpy>
 800c91c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c920:	f8c4 8000 	str.w	r8, [r4]
 800c924:	e7e9      	b.n	800c8fa <__submore+0x48>

0800c926 <memmove>:
 800c926:	4288      	cmp	r0, r1
 800c928:	b510      	push	{r4, lr}
 800c92a:	eb01 0402 	add.w	r4, r1, r2
 800c92e:	d902      	bls.n	800c936 <memmove+0x10>
 800c930:	4284      	cmp	r4, r0
 800c932:	4623      	mov	r3, r4
 800c934:	d807      	bhi.n	800c946 <memmove+0x20>
 800c936:	1e43      	subs	r3, r0, #1
 800c938:	42a1      	cmp	r1, r4
 800c93a:	d008      	beq.n	800c94e <memmove+0x28>
 800c93c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c940:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c944:	e7f8      	b.n	800c938 <memmove+0x12>
 800c946:	4402      	add	r2, r0
 800c948:	4601      	mov	r1, r0
 800c94a:	428a      	cmp	r2, r1
 800c94c:	d100      	bne.n	800c950 <memmove+0x2a>
 800c94e:	bd10      	pop	{r4, pc}
 800c950:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c954:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c958:	e7f7      	b.n	800c94a <memmove+0x24>

0800c95a <strncmp>:
 800c95a:	b510      	push	{r4, lr}
 800c95c:	b16a      	cbz	r2, 800c97a <strncmp+0x20>
 800c95e:	3901      	subs	r1, #1
 800c960:	1884      	adds	r4, r0, r2
 800c962:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c966:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d103      	bne.n	800c976 <strncmp+0x1c>
 800c96e:	42a0      	cmp	r0, r4
 800c970:	d001      	beq.n	800c976 <strncmp+0x1c>
 800c972:	2a00      	cmp	r2, #0
 800c974:	d1f5      	bne.n	800c962 <strncmp+0x8>
 800c976:	1ad0      	subs	r0, r2, r3
 800c978:	bd10      	pop	{r4, pc}
 800c97a:	4610      	mov	r0, r2
 800c97c:	e7fc      	b.n	800c978 <strncmp+0x1e>
	...

0800c980 <_sbrk_r>:
 800c980:	b538      	push	{r3, r4, r5, lr}
 800c982:	4d06      	ldr	r5, [pc, #24]	@ (800c99c <_sbrk_r+0x1c>)
 800c984:	2300      	movs	r3, #0
 800c986:	4604      	mov	r4, r0
 800c988:	4608      	mov	r0, r1
 800c98a:	602b      	str	r3, [r5, #0]
 800c98c:	f7f6 fa5e 	bl	8002e4c <_sbrk>
 800c990:	1c43      	adds	r3, r0, #1
 800c992:	d102      	bne.n	800c99a <_sbrk_r+0x1a>
 800c994:	682b      	ldr	r3, [r5, #0]
 800c996:	b103      	cbz	r3, 800c99a <_sbrk_r+0x1a>
 800c998:	6023      	str	r3, [r4, #0]
 800c99a:	bd38      	pop	{r3, r4, r5, pc}
 800c99c:	2000080c 	.word	0x2000080c

0800c9a0 <nan>:
 800c9a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c9a8 <nan+0x8>
 800c9a4:	4770      	bx	lr
 800c9a6:	bf00      	nop
 800c9a8:	00000000 	.word	0x00000000
 800c9ac:	7ff80000 	.word	0x7ff80000

0800c9b0 <__assert_func>:
 800c9b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9b2:	4614      	mov	r4, r2
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	4b09      	ldr	r3, [pc, #36]	@ (800c9dc <__assert_func+0x2c>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4605      	mov	r5, r0
 800c9bc:	68d8      	ldr	r0, [r3, #12]
 800c9be:	b954      	cbnz	r4, 800c9d6 <__assert_func+0x26>
 800c9c0:	4b07      	ldr	r3, [pc, #28]	@ (800c9e0 <__assert_func+0x30>)
 800c9c2:	461c      	mov	r4, r3
 800c9c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c9c8:	9100      	str	r1, [sp, #0]
 800c9ca:	462b      	mov	r3, r5
 800c9cc:	4905      	ldr	r1, [pc, #20]	@ (800c9e4 <__assert_func+0x34>)
 800c9ce:	f000 fc19 	bl	800d204 <fiprintf>
 800c9d2:	f000 fc29 	bl	800d228 <abort>
 800c9d6:	4b04      	ldr	r3, [pc, #16]	@ (800c9e8 <__assert_func+0x38>)
 800c9d8:	e7f4      	b.n	800c9c4 <__assert_func+0x14>
 800c9da:	bf00      	nop
 800c9dc:	20000014 	.word	0x20000014
 800c9e0:	0800dcb8 	.word	0x0800dcb8
 800c9e4:	0800dc8a 	.word	0x0800dc8a
 800c9e8:	0800dc7d 	.word	0x0800dc7d

0800c9ec <_calloc_r>:
 800c9ec:	b570      	push	{r4, r5, r6, lr}
 800c9ee:	fba1 5402 	umull	r5, r4, r1, r2
 800c9f2:	b93c      	cbnz	r4, 800ca04 <_calloc_r+0x18>
 800c9f4:	4629      	mov	r1, r5
 800c9f6:	f7fd fe43 	bl	800a680 <_malloc_r>
 800c9fa:	4606      	mov	r6, r0
 800c9fc:	b928      	cbnz	r0, 800ca0a <_calloc_r+0x1e>
 800c9fe:	2600      	movs	r6, #0
 800ca00:	4630      	mov	r0, r6
 800ca02:	bd70      	pop	{r4, r5, r6, pc}
 800ca04:	220c      	movs	r2, #12
 800ca06:	6002      	str	r2, [r0, #0]
 800ca08:	e7f9      	b.n	800c9fe <_calloc_r+0x12>
 800ca0a:	462a      	mov	r2, r5
 800ca0c:	4621      	mov	r1, r4
 800ca0e:	f7fc fed2 	bl	80097b6 <memset>
 800ca12:	e7f5      	b.n	800ca00 <_calloc_r+0x14>

0800ca14 <rshift>:
 800ca14:	6903      	ldr	r3, [r0, #16]
 800ca16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ca1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ca22:	f100 0414 	add.w	r4, r0, #20
 800ca26:	dd45      	ble.n	800cab4 <rshift+0xa0>
 800ca28:	f011 011f 	ands.w	r1, r1, #31
 800ca2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ca30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ca34:	d10c      	bne.n	800ca50 <rshift+0x3c>
 800ca36:	f100 0710 	add.w	r7, r0, #16
 800ca3a:	4629      	mov	r1, r5
 800ca3c:	42b1      	cmp	r1, r6
 800ca3e:	d334      	bcc.n	800caaa <rshift+0x96>
 800ca40:	1a9b      	subs	r3, r3, r2
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	1eea      	subs	r2, r5, #3
 800ca46:	4296      	cmp	r6, r2
 800ca48:	bf38      	it	cc
 800ca4a:	2300      	movcc	r3, #0
 800ca4c:	4423      	add	r3, r4
 800ca4e:	e015      	b.n	800ca7c <rshift+0x68>
 800ca50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ca54:	f1c1 0820 	rsb	r8, r1, #32
 800ca58:	40cf      	lsrs	r7, r1
 800ca5a:	f105 0e04 	add.w	lr, r5, #4
 800ca5e:	46a1      	mov	r9, r4
 800ca60:	4576      	cmp	r6, lr
 800ca62:	46f4      	mov	ip, lr
 800ca64:	d815      	bhi.n	800ca92 <rshift+0x7e>
 800ca66:	1a9a      	subs	r2, r3, r2
 800ca68:	0092      	lsls	r2, r2, #2
 800ca6a:	3a04      	subs	r2, #4
 800ca6c:	3501      	adds	r5, #1
 800ca6e:	42ae      	cmp	r6, r5
 800ca70:	bf38      	it	cc
 800ca72:	2200      	movcc	r2, #0
 800ca74:	18a3      	adds	r3, r4, r2
 800ca76:	50a7      	str	r7, [r4, r2]
 800ca78:	b107      	cbz	r7, 800ca7c <rshift+0x68>
 800ca7a:	3304      	adds	r3, #4
 800ca7c:	1b1a      	subs	r2, r3, r4
 800ca7e:	42a3      	cmp	r3, r4
 800ca80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ca84:	bf08      	it	eq
 800ca86:	2300      	moveq	r3, #0
 800ca88:	6102      	str	r2, [r0, #16]
 800ca8a:	bf08      	it	eq
 800ca8c:	6143      	streq	r3, [r0, #20]
 800ca8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca92:	f8dc c000 	ldr.w	ip, [ip]
 800ca96:	fa0c fc08 	lsl.w	ip, ip, r8
 800ca9a:	ea4c 0707 	orr.w	r7, ip, r7
 800ca9e:	f849 7b04 	str.w	r7, [r9], #4
 800caa2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800caa6:	40cf      	lsrs	r7, r1
 800caa8:	e7da      	b.n	800ca60 <rshift+0x4c>
 800caaa:	f851 cb04 	ldr.w	ip, [r1], #4
 800caae:	f847 cf04 	str.w	ip, [r7, #4]!
 800cab2:	e7c3      	b.n	800ca3c <rshift+0x28>
 800cab4:	4623      	mov	r3, r4
 800cab6:	e7e1      	b.n	800ca7c <rshift+0x68>

0800cab8 <__hexdig_fun>:
 800cab8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cabc:	2b09      	cmp	r3, #9
 800cabe:	d802      	bhi.n	800cac6 <__hexdig_fun+0xe>
 800cac0:	3820      	subs	r0, #32
 800cac2:	b2c0      	uxtb	r0, r0
 800cac4:	4770      	bx	lr
 800cac6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800caca:	2b05      	cmp	r3, #5
 800cacc:	d801      	bhi.n	800cad2 <__hexdig_fun+0x1a>
 800cace:	3847      	subs	r0, #71	@ 0x47
 800cad0:	e7f7      	b.n	800cac2 <__hexdig_fun+0xa>
 800cad2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cad6:	2b05      	cmp	r3, #5
 800cad8:	d801      	bhi.n	800cade <__hexdig_fun+0x26>
 800cada:	3827      	subs	r0, #39	@ 0x27
 800cadc:	e7f1      	b.n	800cac2 <__hexdig_fun+0xa>
 800cade:	2000      	movs	r0, #0
 800cae0:	4770      	bx	lr
	...

0800cae4 <__gethex>:
 800cae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae8:	b085      	sub	sp, #20
 800caea:	468a      	mov	sl, r1
 800caec:	9302      	str	r3, [sp, #8]
 800caee:	680b      	ldr	r3, [r1, #0]
 800caf0:	9001      	str	r0, [sp, #4]
 800caf2:	4690      	mov	r8, r2
 800caf4:	1c9c      	adds	r4, r3, #2
 800caf6:	46a1      	mov	r9, r4
 800caf8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cafc:	2830      	cmp	r0, #48	@ 0x30
 800cafe:	d0fa      	beq.n	800caf6 <__gethex+0x12>
 800cb00:	eba9 0303 	sub.w	r3, r9, r3
 800cb04:	f1a3 0b02 	sub.w	fp, r3, #2
 800cb08:	f7ff ffd6 	bl	800cab8 <__hexdig_fun>
 800cb0c:	4605      	mov	r5, r0
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	d168      	bne.n	800cbe4 <__gethex+0x100>
 800cb12:	49a0      	ldr	r1, [pc, #640]	@ (800cd94 <__gethex+0x2b0>)
 800cb14:	2201      	movs	r2, #1
 800cb16:	4648      	mov	r0, r9
 800cb18:	f7ff ff1f 	bl	800c95a <strncmp>
 800cb1c:	4607      	mov	r7, r0
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	d167      	bne.n	800cbf2 <__gethex+0x10e>
 800cb22:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cb26:	4626      	mov	r6, r4
 800cb28:	f7ff ffc6 	bl	800cab8 <__hexdig_fun>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d062      	beq.n	800cbf6 <__gethex+0x112>
 800cb30:	4623      	mov	r3, r4
 800cb32:	7818      	ldrb	r0, [r3, #0]
 800cb34:	2830      	cmp	r0, #48	@ 0x30
 800cb36:	4699      	mov	r9, r3
 800cb38:	f103 0301 	add.w	r3, r3, #1
 800cb3c:	d0f9      	beq.n	800cb32 <__gethex+0x4e>
 800cb3e:	f7ff ffbb 	bl	800cab8 <__hexdig_fun>
 800cb42:	fab0 f580 	clz	r5, r0
 800cb46:	096d      	lsrs	r5, r5, #5
 800cb48:	f04f 0b01 	mov.w	fp, #1
 800cb4c:	464a      	mov	r2, r9
 800cb4e:	4616      	mov	r6, r2
 800cb50:	3201      	adds	r2, #1
 800cb52:	7830      	ldrb	r0, [r6, #0]
 800cb54:	f7ff ffb0 	bl	800cab8 <__hexdig_fun>
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	d1f8      	bne.n	800cb4e <__gethex+0x6a>
 800cb5c:	498d      	ldr	r1, [pc, #564]	@ (800cd94 <__gethex+0x2b0>)
 800cb5e:	2201      	movs	r2, #1
 800cb60:	4630      	mov	r0, r6
 800cb62:	f7ff fefa 	bl	800c95a <strncmp>
 800cb66:	2800      	cmp	r0, #0
 800cb68:	d13f      	bne.n	800cbea <__gethex+0x106>
 800cb6a:	b944      	cbnz	r4, 800cb7e <__gethex+0x9a>
 800cb6c:	1c74      	adds	r4, r6, #1
 800cb6e:	4622      	mov	r2, r4
 800cb70:	4616      	mov	r6, r2
 800cb72:	3201      	adds	r2, #1
 800cb74:	7830      	ldrb	r0, [r6, #0]
 800cb76:	f7ff ff9f 	bl	800cab8 <__hexdig_fun>
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	d1f8      	bne.n	800cb70 <__gethex+0x8c>
 800cb7e:	1ba4      	subs	r4, r4, r6
 800cb80:	00a7      	lsls	r7, r4, #2
 800cb82:	7833      	ldrb	r3, [r6, #0]
 800cb84:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cb88:	2b50      	cmp	r3, #80	@ 0x50
 800cb8a:	d13e      	bne.n	800cc0a <__gethex+0x126>
 800cb8c:	7873      	ldrb	r3, [r6, #1]
 800cb8e:	2b2b      	cmp	r3, #43	@ 0x2b
 800cb90:	d033      	beq.n	800cbfa <__gethex+0x116>
 800cb92:	2b2d      	cmp	r3, #45	@ 0x2d
 800cb94:	d034      	beq.n	800cc00 <__gethex+0x11c>
 800cb96:	1c71      	adds	r1, r6, #1
 800cb98:	2400      	movs	r4, #0
 800cb9a:	7808      	ldrb	r0, [r1, #0]
 800cb9c:	f7ff ff8c 	bl	800cab8 <__hexdig_fun>
 800cba0:	1e43      	subs	r3, r0, #1
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	2b18      	cmp	r3, #24
 800cba6:	d830      	bhi.n	800cc0a <__gethex+0x126>
 800cba8:	f1a0 0210 	sub.w	r2, r0, #16
 800cbac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cbb0:	f7ff ff82 	bl	800cab8 <__hexdig_fun>
 800cbb4:	f100 3cff 	add.w	ip, r0, #4294967295
 800cbb8:	fa5f fc8c 	uxtb.w	ip, ip
 800cbbc:	f1bc 0f18 	cmp.w	ip, #24
 800cbc0:	f04f 030a 	mov.w	r3, #10
 800cbc4:	d91e      	bls.n	800cc04 <__gethex+0x120>
 800cbc6:	b104      	cbz	r4, 800cbca <__gethex+0xe6>
 800cbc8:	4252      	negs	r2, r2
 800cbca:	4417      	add	r7, r2
 800cbcc:	f8ca 1000 	str.w	r1, [sl]
 800cbd0:	b1ed      	cbz	r5, 800cc0e <__gethex+0x12a>
 800cbd2:	f1bb 0f00 	cmp.w	fp, #0
 800cbd6:	bf0c      	ite	eq
 800cbd8:	2506      	moveq	r5, #6
 800cbda:	2500      	movne	r5, #0
 800cbdc:	4628      	mov	r0, r5
 800cbde:	b005      	add	sp, #20
 800cbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbe4:	2500      	movs	r5, #0
 800cbe6:	462c      	mov	r4, r5
 800cbe8:	e7b0      	b.n	800cb4c <__gethex+0x68>
 800cbea:	2c00      	cmp	r4, #0
 800cbec:	d1c7      	bne.n	800cb7e <__gethex+0x9a>
 800cbee:	4627      	mov	r7, r4
 800cbf0:	e7c7      	b.n	800cb82 <__gethex+0x9e>
 800cbf2:	464e      	mov	r6, r9
 800cbf4:	462f      	mov	r7, r5
 800cbf6:	2501      	movs	r5, #1
 800cbf8:	e7c3      	b.n	800cb82 <__gethex+0x9e>
 800cbfa:	2400      	movs	r4, #0
 800cbfc:	1cb1      	adds	r1, r6, #2
 800cbfe:	e7cc      	b.n	800cb9a <__gethex+0xb6>
 800cc00:	2401      	movs	r4, #1
 800cc02:	e7fb      	b.n	800cbfc <__gethex+0x118>
 800cc04:	fb03 0002 	mla	r0, r3, r2, r0
 800cc08:	e7ce      	b.n	800cba8 <__gethex+0xc4>
 800cc0a:	4631      	mov	r1, r6
 800cc0c:	e7de      	b.n	800cbcc <__gethex+0xe8>
 800cc0e:	eba6 0309 	sub.w	r3, r6, r9
 800cc12:	3b01      	subs	r3, #1
 800cc14:	4629      	mov	r1, r5
 800cc16:	2b07      	cmp	r3, #7
 800cc18:	dc0a      	bgt.n	800cc30 <__gethex+0x14c>
 800cc1a:	9801      	ldr	r0, [sp, #4]
 800cc1c:	f7fd fdbc 	bl	800a798 <_Balloc>
 800cc20:	4604      	mov	r4, r0
 800cc22:	b940      	cbnz	r0, 800cc36 <__gethex+0x152>
 800cc24:	4b5c      	ldr	r3, [pc, #368]	@ (800cd98 <__gethex+0x2b4>)
 800cc26:	4602      	mov	r2, r0
 800cc28:	21e4      	movs	r1, #228	@ 0xe4
 800cc2a:	485c      	ldr	r0, [pc, #368]	@ (800cd9c <__gethex+0x2b8>)
 800cc2c:	f7ff fec0 	bl	800c9b0 <__assert_func>
 800cc30:	3101      	adds	r1, #1
 800cc32:	105b      	asrs	r3, r3, #1
 800cc34:	e7ef      	b.n	800cc16 <__gethex+0x132>
 800cc36:	f100 0a14 	add.w	sl, r0, #20
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	4655      	mov	r5, sl
 800cc3e:	469b      	mov	fp, r3
 800cc40:	45b1      	cmp	r9, r6
 800cc42:	d337      	bcc.n	800ccb4 <__gethex+0x1d0>
 800cc44:	f845 bb04 	str.w	fp, [r5], #4
 800cc48:	eba5 050a 	sub.w	r5, r5, sl
 800cc4c:	10ad      	asrs	r5, r5, #2
 800cc4e:	6125      	str	r5, [r4, #16]
 800cc50:	4658      	mov	r0, fp
 800cc52:	f7fd fe93 	bl	800a97c <__hi0bits>
 800cc56:	016d      	lsls	r5, r5, #5
 800cc58:	f8d8 6000 	ldr.w	r6, [r8]
 800cc5c:	1a2d      	subs	r5, r5, r0
 800cc5e:	42b5      	cmp	r5, r6
 800cc60:	dd54      	ble.n	800cd0c <__gethex+0x228>
 800cc62:	1bad      	subs	r5, r5, r6
 800cc64:	4629      	mov	r1, r5
 800cc66:	4620      	mov	r0, r4
 800cc68:	f7fe fa27 	bl	800b0ba <__any_on>
 800cc6c:	4681      	mov	r9, r0
 800cc6e:	b178      	cbz	r0, 800cc90 <__gethex+0x1ac>
 800cc70:	1e6b      	subs	r3, r5, #1
 800cc72:	1159      	asrs	r1, r3, #5
 800cc74:	f003 021f 	and.w	r2, r3, #31
 800cc78:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cc7c:	f04f 0901 	mov.w	r9, #1
 800cc80:	fa09 f202 	lsl.w	r2, r9, r2
 800cc84:	420a      	tst	r2, r1
 800cc86:	d003      	beq.n	800cc90 <__gethex+0x1ac>
 800cc88:	454b      	cmp	r3, r9
 800cc8a:	dc36      	bgt.n	800ccfa <__gethex+0x216>
 800cc8c:	f04f 0902 	mov.w	r9, #2
 800cc90:	4629      	mov	r1, r5
 800cc92:	4620      	mov	r0, r4
 800cc94:	f7ff febe 	bl	800ca14 <rshift>
 800cc98:	442f      	add	r7, r5
 800cc9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cc9e:	42bb      	cmp	r3, r7
 800cca0:	da42      	bge.n	800cd28 <__gethex+0x244>
 800cca2:	9801      	ldr	r0, [sp, #4]
 800cca4:	4621      	mov	r1, r4
 800cca6:	f7fd fdb7 	bl	800a818 <_Bfree>
 800ccaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ccac:	2300      	movs	r3, #0
 800ccae:	6013      	str	r3, [r2, #0]
 800ccb0:	25a3      	movs	r5, #163	@ 0xa3
 800ccb2:	e793      	b.n	800cbdc <__gethex+0xf8>
 800ccb4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ccb8:	2a2e      	cmp	r2, #46	@ 0x2e
 800ccba:	d012      	beq.n	800cce2 <__gethex+0x1fe>
 800ccbc:	2b20      	cmp	r3, #32
 800ccbe:	d104      	bne.n	800ccca <__gethex+0x1e6>
 800ccc0:	f845 bb04 	str.w	fp, [r5], #4
 800ccc4:	f04f 0b00 	mov.w	fp, #0
 800ccc8:	465b      	mov	r3, fp
 800ccca:	7830      	ldrb	r0, [r6, #0]
 800cccc:	9303      	str	r3, [sp, #12]
 800ccce:	f7ff fef3 	bl	800cab8 <__hexdig_fun>
 800ccd2:	9b03      	ldr	r3, [sp, #12]
 800ccd4:	f000 000f 	and.w	r0, r0, #15
 800ccd8:	4098      	lsls	r0, r3
 800ccda:	ea4b 0b00 	orr.w	fp, fp, r0
 800ccde:	3304      	adds	r3, #4
 800cce0:	e7ae      	b.n	800cc40 <__gethex+0x15c>
 800cce2:	45b1      	cmp	r9, r6
 800cce4:	d8ea      	bhi.n	800ccbc <__gethex+0x1d8>
 800cce6:	492b      	ldr	r1, [pc, #172]	@ (800cd94 <__gethex+0x2b0>)
 800cce8:	9303      	str	r3, [sp, #12]
 800ccea:	2201      	movs	r2, #1
 800ccec:	4630      	mov	r0, r6
 800ccee:	f7ff fe34 	bl	800c95a <strncmp>
 800ccf2:	9b03      	ldr	r3, [sp, #12]
 800ccf4:	2800      	cmp	r0, #0
 800ccf6:	d1e1      	bne.n	800ccbc <__gethex+0x1d8>
 800ccf8:	e7a2      	b.n	800cc40 <__gethex+0x15c>
 800ccfa:	1ea9      	subs	r1, r5, #2
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	f7fe f9dc 	bl	800b0ba <__any_on>
 800cd02:	2800      	cmp	r0, #0
 800cd04:	d0c2      	beq.n	800cc8c <__gethex+0x1a8>
 800cd06:	f04f 0903 	mov.w	r9, #3
 800cd0a:	e7c1      	b.n	800cc90 <__gethex+0x1ac>
 800cd0c:	da09      	bge.n	800cd22 <__gethex+0x23e>
 800cd0e:	1b75      	subs	r5, r6, r5
 800cd10:	4621      	mov	r1, r4
 800cd12:	9801      	ldr	r0, [sp, #4]
 800cd14:	462a      	mov	r2, r5
 800cd16:	f7fd ff97 	bl	800ac48 <__lshift>
 800cd1a:	1b7f      	subs	r7, r7, r5
 800cd1c:	4604      	mov	r4, r0
 800cd1e:	f100 0a14 	add.w	sl, r0, #20
 800cd22:	f04f 0900 	mov.w	r9, #0
 800cd26:	e7b8      	b.n	800cc9a <__gethex+0x1b6>
 800cd28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cd2c:	42bd      	cmp	r5, r7
 800cd2e:	dd6f      	ble.n	800ce10 <__gethex+0x32c>
 800cd30:	1bed      	subs	r5, r5, r7
 800cd32:	42ae      	cmp	r6, r5
 800cd34:	dc34      	bgt.n	800cda0 <__gethex+0x2bc>
 800cd36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd3a:	2b02      	cmp	r3, #2
 800cd3c:	d022      	beq.n	800cd84 <__gethex+0x2a0>
 800cd3e:	2b03      	cmp	r3, #3
 800cd40:	d024      	beq.n	800cd8c <__gethex+0x2a8>
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d115      	bne.n	800cd72 <__gethex+0x28e>
 800cd46:	42ae      	cmp	r6, r5
 800cd48:	d113      	bne.n	800cd72 <__gethex+0x28e>
 800cd4a:	2e01      	cmp	r6, #1
 800cd4c:	d10b      	bne.n	800cd66 <__gethex+0x282>
 800cd4e:	9a02      	ldr	r2, [sp, #8]
 800cd50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cd54:	6013      	str	r3, [r2, #0]
 800cd56:	2301      	movs	r3, #1
 800cd58:	6123      	str	r3, [r4, #16]
 800cd5a:	f8ca 3000 	str.w	r3, [sl]
 800cd5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd60:	2562      	movs	r5, #98	@ 0x62
 800cd62:	601c      	str	r4, [r3, #0]
 800cd64:	e73a      	b.n	800cbdc <__gethex+0xf8>
 800cd66:	1e71      	subs	r1, r6, #1
 800cd68:	4620      	mov	r0, r4
 800cd6a:	f7fe f9a6 	bl	800b0ba <__any_on>
 800cd6e:	2800      	cmp	r0, #0
 800cd70:	d1ed      	bne.n	800cd4e <__gethex+0x26a>
 800cd72:	9801      	ldr	r0, [sp, #4]
 800cd74:	4621      	mov	r1, r4
 800cd76:	f7fd fd4f 	bl	800a818 <_Bfree>
 800cd7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	6013      	str	r3, [r2, #0]
 800cd80:	2550      	movs	r5, #80	@ 0x50
 800cd82:	e72b      	b.n	800cbdc <__gethex+0xf8>
 800cd84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d1f3      	bne.n	800cd72 <__gethex+0x28e>
 800cd8a:	e7e0      	b.n	800cd4e <__gethex+0x26a>
 800cd8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d1dd      	bne.n	800cd4e <__gethex+0x26a>
 800cd92:	e7ee      	b.n	800cd72 <__gethex+0x28e>
 800cd94:	0800daf0 	.word	0x0800daf0
 800cd98:	0800d987 	.word	0x0800d987
 800cd9c:	0800dcb9 	.word	0x0800dcb9
 800cda0:	1e6f      	subs	r7, r5, #1
 800cda2:	f1b9 0f00 	cmp.w	r9, #0
 800cda6:	d130      	bne.n	800ce0a <__gethex+0x326>
 800cda8:	b127      	cbz	r7, 800cdb4 <__gethex+0x2d0>
 800cdaa:	4639      	mov	r1, r7
 800cdac:	4620      	mov	r0, r4
 800cdae:	f7fe f984 	bl	800b0ba <__any_on>
 800cdb2:	4681      	mov	r9, r0
 800cdb4:	117a      	asrs	r2, r7, #5
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cdbc:	f007 071f 	and.w	r7, r7, #31
 800cdc0:	40bb      	lsls	r3, r7
 800cdc2:	4213      	tst	r3, r2
 800cdc4:	4629      	mov	r1, r5
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	bf18      	it	ne
 800cdca:	f049 0902 	orrne.w	r9, r9, #2
 800cdce:	f7ff fe21 	bl	800ca14 <rshift>
 800cdd2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cdd6:	1b76      	subs	r6, r6, r5
 800cdd8:	2502      	movs	r5, #2
 800cdda:	f1b9 0f00 	cmp.w	r9, #0
 800cdde:	d047      	beq.n	800ce70 <__gethex+0x38c>
 800cde0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cde4:	2b02      	cmp	r3, #2
 800cde6:	d015      	beq.n	800ce14 <__gethex+0x330>
 800cde8:	2b03      	cmp	r3, #3
 800cdea:	d017      	beq.n	800ce1c <__gethex+0x338>
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d109      	bne.n	800ce04 <__gethex+0x320>
 800cdf0:	f019 0f02 	tst.w	r9, #2
 800cdf4:	d006      	beq.n	800ce04 <__gethex+0x320>
 800cdf6:	f8da 3000 	ldr.w	r3, [sl]
 800cdfa:	ea49 0903 	orr.w	r9, r9, r3
 800cdfe:	f019 0f01 	tst.w	r9, #1
 800ce02:	d10e      	bne.n	800ce22 <__gethex+0x33e>
 800ce04:	f045 0510 	orr.w	r5, r5, #16
 800ce08:	e032      	b.n	800ce70 <__gethex+0x38c>
 800ce0a:	f04f 0901 	mov.w	r9, #1
 800ce0e:	e7d1      	b.n	800cdb4 <__gethex+0x2d0>
 800ce10:	2501      	movs	r5, #1
 800ce12:	e7e2      	b.n	800cdda <__gethex+0x2f6>
 800ce14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce16:	f1c3 0301 	rsb	r3, r3, #1
 800ce1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ce1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d0f0      	beq.n	800ce04 <__gethex+0x320>
 800ce22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ce26:	f104 0314 	add.w	r3, r4, #20
 800ce2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ce2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ce32:	f04f 0c00 	mov.w	ip, #0
 800ce36:	4618      	mov	r0, r3
 800ce38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ce40:	d01b      	beq.n	800ce7a <__gethex+0x396>
 800ce42:	3201      	adds	r2, #1
 800ce44:	6002      	str	r2, [r0, #0]
 800ce46:	2d02      	cmp	r5, #2
 800ce48:	f104 0314 	add.w	r3, r4, #20
 800ce4c:	d13c      	bne.n	800cec8 <__gethex+0x3e4>
 800ce4e:	f8d8 2000 	ldr.w	r2, [r8]
 800ce52:	3a01      	subs	r2, #1
 800ce54:	42b2      	cmp	r2, r6
 800ce56:	d109      	bne.n	800ce6c <__gethex+0x388>
 800ce58:	1171      	asrs	r1, r6, #5
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce60:	f006 061f 	and.w	r6, r6, #31
 800ce64:	fa02 f606 	lsl.w	r6, r2, r6
 800ce68:	421e      	tst	r6, r3
 800ce6a:	d13a      	bne.n	800cee2 <__gethex+0x3fe>
 800ce6c:	f045 0520 	orr.w	r5, r5, #32
 800ce70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce72:	601c      	str	r4, [r3, #0]
 800ce74:	9b02      	ldr	r3, [sp, #8]
 800ce76:	601f      	str	r7, [r3, #0]
 800ce78:	e6b0      	b.n	800cbdc <__gethex+0xf8>
 800ce7a:	4299      	cmp	r1, r3
 800ce7c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ce80:	d8d9      	bhi.n	800ce36 <__gethex+0x352>
 800ce82:	68a3      	ldr	r3, [r4, #8]
 800ce84:	459b      	cmp	fp, r3
 800ce86:	db17      	blt.n	800ceb8 <__gethex+0x3d4>
 800ce88:	6861      	ldr	r1, [r4, #4]
 800ce8a:	9801      	ldr	r0, [sp, #4]
 800ce8c:	3101      	adds	r1, #1
 800ce8e:	f7fd fc83 	bl	800a798 <_Balloc>
 800ce92:	4681      	mov	r9, r0
 800ce94:	b918      	cbnz	r0, 800ce9e <__gethex+0x3ba>
 800ce96:	4b1a      	ldr	r3, [pc, #104]	@ (800cf00 <__gethex+0x41c>)
 800ce98:	4602      	mov	r2, r0
 800ce9a:	2184      	movs	r1, #132	@ 0x84
 800ce9c:	e6c5      	b.n	800cc2a <__gethex+0x146>
 800ce9e:	6922      	ldr	r2, [r4, #16]
 800cea0:	3202      	adds	r2, #2
 800cea2:	f104 010c 	add.w	r1, r4, #12
 800cea6:	0092      	lsls	r2, r2, #2
 800cea8:	300c      	adds	r0, #12
 800ceaa:	f7fc fd12 	bl	80098d2 <memcpy>
 800ceae:	4621      	mov	r1, r4
 800ceb0:	9801      	ldr	r0, [sp, #4]
 800ceb2:	f7fd fcb1 	bl	800a818 <_Bfree>
 800ceb6:	464c      	mov	r4, r9
 800ceb8:	6923      	ldr	r3, [r4, #16]
 800ceba:	1c5a      	adds	r2, r3, #1
 800cebc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cec0:	6122      	str	r2, [r4, #16]
 800cec2:	2201      	movs	r2, #1
 800cec4:	615a      	str	r2, [r3, #20]
 800cec6:	e7be      	b.n	800ce46 <__gethex+0x362>
 800cec8:	6922      	ldr	r2, [r4, #16]
 800ceca:	455a      	cmp	r2, fp
 800cecc:	dd0b      	ble.n	800cee6 <__gethex+0x402>
 800cece:	2101      	movs	r1, #1
 800ced0:	4620      	mov	r0, r4
 800ced2:	f7ff fd9f 	bl	800ca14 <rshift>
 800ced6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ceda:	3701      	adds	r7, #1
 800cedc:	42bb      	cmp	r3, r7
 800cede:	f6ff aee0 	blt.w	800cca2 <__gethex+0x1be>
 800cee2:	2501      	movs	r5, #1
 800cee4:	e7c2      	b.n	800ce6c <__gethex+0x388>
 800cee6:	f016 061f 	ands.w	r6, r6, #31
 800ceea:	d0fa      	beq.n	800cee2 <__gethex+0x3fe>
 800ceec:	4453      	add	r3, sl
 800ceee:	f1c6 0620 	rsb	r6, r6, #32
 800cef2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cef6:	f7fd fd41 	bl	800a97c <__hi0bits>
 800cefa:	42b0      	cmp	r0, r6
 800cefc:	dbe7      	blt.n	800cece <__gethex+0x3ea>
 800cefe:	e7f0      	b.n	800cee2 <__gethex+0x3fe>
 800cf00:	0800d987 	.word	0x0800d987

0800cf04 <L_shift>:
 800cf04:	f1c2 0208 	rsb	r2, r2, #8
 800cf08:	0092      	lsls	r2, r2, #2
 800cf0a:	b570      	push	{r4, r5, r6, lr}
 800cf0c:	f1c2 0620 	rsb	r6, r2, #32
 800cf10:	6843      	ldr	r3, [r0, #4]
 800cf12:	6804      	ldr	r4, [r0, #0]
 800cf14:	fa03 f506 	lsl.w	r5, r3, r6
 800cf18:	432c      	orrs	r4, r5
 800cf1a:	40d3      	lsrs	r3, r2
 800cf1c:	6004      	str	r4, [r0, #0]
 800cf1e:	f840 3f04 	str.w	r3, [r0, #4]!
 800cf22:	4288      	cmp	r0, r1
 800cf24:	d3f4      	bcc.n	800cf10 <L_shift+0xc>
 800cf26:	bd70      	pop	{r4, r5, r6, pc}

0800cf28 <__match>:
 800cf28:	b530      	push	{r4, r5, lr}
 800cf2a:	6803      	ldr	r3, [r0, #0]
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf32:	b914      	cbnz	r4, 800cf3a <__match+0x12>
 800cf34:	6003      	str	r3, [r0, #0]
 800cf36:	2001      	movs	r0, #1
 800cf38:	bd30      	pop	{r4, r5, pc}
 800cf3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cf42:	2d19      	cmp	r5, #25
 800cf44:	bf98      	it	ls
 800cf46:	3220      	addls	r2, #32
 800cf48:	42a2      	cmp	r2, r4
 800cf4a:	d0f0      	beq.n	800cf2e <__match+0x6>
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	e7f3      	b.n	800cf38 <__match+0x10>

0800cf50 <__hexnan>:
 800cf50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf54:	680b      	ldr	r3, [r1, #0]
 800cf56:	6801      	ldr	r1, [r0, #0]
 800cf58:	115e      	asrs	r6, r3, #5
 800cf5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cf5e:	f013 031f 	ands.w	r3, r3, #31
 800cf62:	b087      	sub	sp, #28
 800cf64:	bf18      	it	ne
 800cf66:	3604      	addne	r6, #4
 800cf68:	2500      	movs	r5, #0
 800cf6a:	1f37      	subs	r7, r6, #4
 800cf6c:	4682      	mov	sl, r0
 800cf6e:	4690      	mov	r8, r2
 800cf70:	9301      	str	r3, [sp, #4]
 800cf72:	f846 5c04 	str.w	r5, [r6, #-4]
 800cf76:	46b9      	mov	r9, r7
 800cf78:	463c      	mov	r4, r7
 800cf7a:	9502      	str	r5, [sp, #8]
 800cf7c:	46ab      	mov	fp, r5
 800cf7e:	784a      	ldrb	r2, [r1, #1]
 800cf80:	1c4b      	adds	r3, r1, #1
 800cf82:	9303      	str	r3, [sp, #12]
 800cf84:	b342      	cbz	r2, 800cfd8 <__hexnan+0x88>
 800cf86:	4610      	mov	r0, r2
 800cf88:	9105      	str	r1, [sp, #20]
 800cf8a:	9204      	str	r2, [sp, #16]
 800cf8c:	f7ff fd94 	bl	800cab8 <__hexdig_fun>
 800cf90:	2800      	cmp	r0, #0
 800cf92:	d151      	bne.n	800d038 <__hexnan+0xe8>
 800cf94:	9a04      	ldr	r2, [sp, #16]
 800cf96:	9905      	ldr	r1, [sp, #20]
 800cf98:	2a20      	cmp	r2, #32
 800cf9a:	d818      	bhi.n	800cfce <__hexnan+0x7e>
 800cf9c:	9b02      	ldr	r3, [sp, #8]
 800cf9e:	459b      	cmp	fp, r3
 800cfa0:	dd13      	ble.n	800cfca <__hexnan+0x7a>
 800cfa2:	454c      	cmp	r4, r9
 800cfa4:	d206      	bcs.n	800cfb4 <__hexnan+0x64>
 800cfa6:	2d07      	cmp	r5, #7
 800cfa8:	dc04      	bgt.n	800cfb4 <__hexnan+0x64>
 800cfaa:	462a      	mov	r2, r5
 800cfac:	4649      	mov	r1, r9
 800cfae:	4620      	mov	r0, r4
 800cfb0:	f7ff ffa8 	bl	800cf04 <L_shift>
 800cfb4:	4544      	cmp	r4, r8
 800cfb6:	d952      	bls.n	800d05e <__hexnan+0x10e>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	f1a4 0904 	sub.w	r9, r4, #4
 800cfbe:	f844 3c04 	str.w	r3, [r4, #-4]
 800cfc2:	f8cd b008 	str.w	fp, [sp, #8]
 800cfc6:	464c      	mov	r4, r9
 800cfc8:	461d      	mov	r5, r3
 800cfca:	9903      	ldr	r1, [sp, #12]
 800cfcc:	e7d7      	b.n	800cf7e <__hexnan+0x2e>
 800cfce:	2a29      	cmp	r2, #41	@ 0x29
 800cfd0:	d157      	bne.n	800d082 <__hexnan+0x132>
 800cfd2:	3102      	adds	r1, #2
 800cfd4:	f8ca 1000 	str.w	r1, [sl]
 800cfd8:	f1bb 0f00 	cmp.w	fp, #0
 800cfdc:	d051      	beq.n	800d082 <__hexnan+0x132>
 800cfde:	454c      	cmp	r4, r9
 800cfe0:	d206      	bcs.n	800cff0 <__hexnan+0xa0>
 800cfe2:	2d07      	cmp	r5, #7
 800cfe4:	dc04      	bgt.n	800cff0 <__hexnan+0xa0>
 800cfe6:	462a      	mov	r2, r5
 800cfe8:	4649      	mov	r1, r9
 800cfea:	4620      	mov	r0, r4
 800cfec:	f7ff ff8a 	bl	800cf04 <L_shift>
 800cff0:	4544      	cmp	r4, r8
 800cff2:	d936      	bls.n	800d062 <__hexnan+0x112>
 800cff4:	f1a8 0204 	sub.w	r2, r8, #4
 800cff8:	4623      	mov	r3, r4
 800cffa:	f853 1b04 	ldr.w	r1, [r3], #4
 800cffe:	f842 1f04 	str.w	r1, [r2, #4]!
 800d002:	429f      	cmp	r7, r3
 800d004:	d2f9      	bcs.n	800cffa <__hexnan+0xaa>
 800d006:	1b3b      	subs	r3, r7, r4
 800d008:	f023 0303 	bic.w	r3, r3, #3
 800d00c:	3304      	adds	r3, #4
 800d00e:	3401      	adds	r4, #1
 800d010:	3e03      	subs	r6, #3
 800d012:	42b4      	cmp	r4, r6
 800d014:	bf88      	it	hi
 800d016:	2304      	movhi	r3, #4
 800d018:	4443      	add	r3, r8
 800d01a:	2200      	movs	r2, #0
 800d01c:	f843 2b04 	str.w	r2, [r3], #4
 800d020:	429f      	cmp	r7, r3
 800d022:	d2fb      	bcs.n	800d01c <__hexnan+0xcc>
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	b91b      	cbnz	r3, 800d030 <__hexnan+0xe0>
 800d028:	4547      	cmp	r7, r8
 800d02a:	d128      	bne.n	800d07e <__hexnan+0x12e>
 800d02c:	2301      	movs	r3, #1
 800d02e:	603b      	str	r3, [r7, #0]
 800d030:	2005      	movs	r0, #5
 800d032:	b007      	add	sp, #28
 800d034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d038:	3501      	adds	r5, #1
 800d03a:	2d08      	cmp	r5, #8
 800d03c:	f10b 0b01 	add.w	fp, fp, #1
 800d040:	dd06      	ble.n	800d050 <__hexnan+0x100>
 800d042:	4544      	cmp	r4, r8
 800d044:	d9c1      	bls.n	800cfca <__hexnan+0x7a>
 800d046:	2300      	movs	r3, #0
 800d048:	f844 3c04 	str.w	r3, [r4, #-4]
 800d04c:	2501      	movs	r5, #1
 800d04e:	3c04      	subs	r4, #4
 800d050:	6822      	ldr	r2, [r4, #0]
 800d052:	f000 000f 	and.w	r0, r0, #15
 800d056:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d05a:	6020      	str	r0, [r4, #0]
 800d05c:	e7b5      	b.n	800cfca <__hexnan+0x7a>
 800d05e:	2508      	movs	r5, #8
 800d060:	e7b3      	b.n	800cfca <__hexnan+0x7a>
 800d062:	9b01      	ldr	r3, [sp, #4]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d0dd      	beq.n	800d024 <__hexnan+0xd4>
 800d068:	f1c3 0320 	rsb	r3, r3, #32
 800d06c:	f04f 32ff 	mov.w	r2, #4294967295
 800d070:	40da      	lsrs	r2, r3
 800d072:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d076:	4013      	ands	r3, r2
 800d078:	f846 3c04 	str.w	r3, [r6, #-4]
 800d07c:	e7d2      	b.n	800d024 <__hexnan+0xd4>
 800d07e:	3f04      	subs	r7, #4
 800d080:	e7d0      	b.n	800d024 <__hexnan+0xd4>
 800d082:	2004      	movs	r0, #4
 800d084:	e7d5      	b.n	800d032 <__hexnan+0xe2>

0800d086 <__ascii_mbtowc>:
 800d086:	b082      	sub	sp, #8
 800d088:	b901      	cbnz	r1, 800d08c <__ascii_mbtowc+0x6>
 800d08a:	a901      	add	r1, sp, #4
 800d08c:	b142      	cbz	r2, 800d0a0 <__ascii_mbtowc+0x1a>
 800d08e:	b14b      	cbz	r3, 800d0a4 <__ascii_mbtowc+0x1e>
 800d090:	7813      	ldrb	r3, [r2, #0]
 800d092:	600b      	str	r3, [r1, #0]
 800d094:	7812      	ldrb	r2, [r2, #0]
 800d096:	1e10      	subs	r0, r2, #0
 800d098:	bf18      	it	ne
 800d09a:	2001      	movne	r0, #1
 800d09c:	b002      	add	sp, #8
 800d09e:	4770      	bx	lr
 800d0a0:	4610      	mov	r0, r2
 800d0a2:	e7fb      	b.n	800d09c <__ascii_mbtowc+0x16>
 800d0a4:	f06f 0001 	mvn.w	r0, #1
 800d0a8:	e7f8      	b.n	800d09c <__ascii_mbtowc+0x16>

0800d0aa <_realloc_r>:
 800d0aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ae:	4680      	mov	r8, r0
 800d0b0:	4615      	mov	r5, r2
 800d0b2:	460c      	mov	r4, r1
 800d0b4:	b921      	cbnz	r1, 800d0c0 <_realloc_r+0x16>
 800d0b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ba:	4611      	mov	r1, r2
 800d0bc:	f7fd bae0 	b.w	800a680 <_malloc_r>
 800d0c0:	b92a      	cbnz	r2, 800d0ce <_realloc_r+0x24>
 800d0c2:	f7fd fa69 	bl	800a598 <_free_r>
 800d0c6:	2400      	movs	r4, #0
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0ce:	f000 f8b2 	bl	800d236 <_malloc_usable_size_r>
 800d0d2:	4285      	cmp	r5, r0
 800d0d4:	4606      	mov	r6, r0
 800d0d6:	d802      	bhi.n	800d0de <_realloc_r+0x34>
 800d0d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d0dc:	d8f4      	bhi.n	800d0c8 <_realloc_r+0x1e>
 800d0de:	4629      	mov	r1, r5
 800d0e0:	4640      	mov	r0, r8
 800d0e2:	f7fd facd 	bl	800a680 <_malloc_r>
 800d0e6:	4607      	mov	r7, r0
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	d0ec      	beq.n	800d0c6 <_realloc_r+0x1c>
 800d0ec:	42b5      	cmp	r5, r6
 800d0ee:	462a      	mov	r2, r5
 800d0f0:	4621      	mov	r1, r4
 800d0f2:	bf28      	it	cs
 800d0f4:	4632      	movcs	r2, r6
 800d0f6:	f7fc fbec 	bl	80098d2 <memcpy>
 800d0fa:	4621      	mov	r1, r4
 800d0fc:	4640      	mov	r0, r8
 800d0fe:	f7fd fa4b 	bl	800a598 <_free_r>
 800d102:	463c      	mov	r4, r7
 800d104:	e7e0      	b.n	800d0c8 <_realloc_r+0x1e>
	...

0800d108 <_strtoul_l.constprop.0>:
 800d108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d10c:	4e34      	ldr	r6, [pc, #208]	@ (800d1e0 <_strtoul_l.constprop.0+0xd8>)
 800d10e:	4686      	mov	lr, r0
 800d110:	460d      	mov	r5, r1
 800d112:	4628      	mov	r0, r5
 800d114:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d118:	5d37      	ldrb	r7, [r6, r4]
 800d11a:	f017 0708 	ands.w	r7, r7, #8
 800d11e:	d1f8      	bne.n	800d112 <_strtoul_l.constprop.0+0xa>
 800d120:	2c2d      	cmp	r4, #45	@ 0x2d
 800d122:	d12f      	bne.n	800d184 <_strtoul_l.constprop.0+0x7c>
 800d124:	782c      	ldrb	r4, [r5, #0]
 800d126:	2701      	movs	r7, #1
 800d128:	1c85      	adds	r5, r0, #2
 800d12a:	f033 0010 	bics.w	r0, r3, #16
 800d12e:	d109      	bne.n	800d144 <_strtoul_l.constprop.0+0x3c>
 800d130:	2c30      	cmp	r4, #48	@ 0x30
 800d132:	d12c      	bne.n	800d18e <_strtoul_l.constprop.0+0x86>
 800d134:	7828      	ldrb	r0, [r5, #0]
 800d136:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d13a:	2858      	cmp	r0, #88	@ 0x58
 800d13c:	d127      	bne.n	800d18e <_strtoul_l.constprop.0+0x86>
 800d13e:	786c      	ldrb	r4, [r5, #1]
 800d140:	2310      	movs	r3, #16
 800d142:	3502      	adds	r5, #2
 800d144:	f04f 38ff 	mov.w	r8, #4294967295
 800d148:	2600      	movs	r6, #0
 800d14a:	fbb8 f8f3 	udiv	r8, r8, r3
 800d14e:	fb03 f908 	mul.w	r9, r3, r8
 800d152:	ea6f 0909 	mvn.w	r9, r9
 800d156:	4630      	mov	r0, r6
 800d158:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d15c:	f1bc 0f09 	cmp.w	ip, #9
 800d160:	d81c      	bhi.n	800d19c <_strtoul_l.constprop.0+0x94>
 800d162:	4664      	mov	r4, ip
 800d164:	42a3      	cmp	r3, r4
 800d166:	dd2a      	ble.n	800d1be <_strtoul_l.constprop.0+0xb6>
 800d168:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d16c:	d007      	beq.n	800d17e <_strtoul_l.constprop.0+0x76>
 800d16e:	4580      	cmp	r8, r0
 800d170:	d322      	bcc.n	800d1b8 <_strtoul_l.constprop.0+0xb0>
 800d172:	d101      	bne.n	800d178 <_strtoul_l.constprop.0+0x70>
 800d174:	45a1      	cmp	r9, r4
 800d176:	db1f      	blt.n	800d1b8 <_strtoul_l.constprop.0+0xb0>
 800d178:	fb00 4003 	mla	r0, r0, r3, r4
 800d17c:	2601      	movs	r6, #1
 800d17e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d182:	e7e9      	b.n	800d158 <_strtoul_l.constprop.0+0x50>
 800d184:	2c2b      	cmp	r4, #43	@ 0x2b
 800d186:	bf04      	itt	eq
 800d188:	782c      	ldrbeq	r4, [r5, #0]
 800d18a:	1c85      	addeq	r5, r0, #2
 800d18c:	e7cd      	b.n	800d12a <_strtoul_l.constprop.0+0x22>
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d1d8      	bne.n	800d144 <_strtoul_l.constprop.0+0x3c>
 800d192:	2c30      	cmp	r4, #48	@ 0x30
 800d194:	bf0c      	ite	eq
 800d196:	2308      	moveq	r3, #8
 800d198:	230a      	movne	r3, #10
 800d19a:	e7d3      	b.n	800d144 <_strtoul_l.constprop.0+0x3c>
 800d19c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d1a0:	f1bc 0f19 	cmp.w	ip, #25
 800d1a4:	d801      	bhi.n	800d1aa <_strtoul_l.constprop.0+0xa2>
 800d1a6:	3c37      	subs	r4, #55	@ 0x37
 800d1a8:	e7dc      	b.n	800d164 <_strtoul_l.constprop.0+0x5c>
 800d1aa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d1ae:	f1bc 0f19 	cmp.w	ip, #25
 800d1b2:	d804      	bhi.n	800d1be <_strtoul_l.constprop.0+0xb6>
 800d1b4:	3c57      	subs	r4, #87	@ 0x57
 800d1b6:	e7d5      	b.n	800d164 <_strtoul_l.constprop.0+0x5c>
 800d1b8:	f04f 36ff 	mov.w	r6, #4294967295
 800d1bc:	e7df      	b.n	800d17e <_strtoul_l.constprop.0+0x76>
 800d1be:	1c73      	adds	r3, r6, #1
 800d1c0:	d106      	bne.n	800d1d0 <_strtoul_l.constprop.0+0xc8>
 800d1c2:	2322      	movs	r3, #34	@ 0x22
 800d1c4:	f8ce 3000 	str.w	r3, [lr]
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	b932      	cbnz	r2, 800d1da <_strtoul_l.constprop.0+0xd2>
 800d1cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1d0:	b107      	cbz	r7, 800d1d4 <_strtoul_l.constprop.0+0xcc>
 800d1d2:	4240      	negs	r0, r0
 800d1d4:	2a00      	cmp	r2, #0
 800d1d6:	d0f9      	beq.n	800d1cc <_strtoul_l.constprop.0+0xc4>
 800d1d8:	b106      	cbz	r6, 800d1dc <_strtoul_l.constprop.0+0xd4>
 800d1da:	1e69      	subs	r1, r5, #1
 800d1dc:	6011      	str	r1, [r2, #0]
 800d1de:	e7f5      	b.n	800d1cc <_strtoul_l.constprop.0+0xc4>
 800d1e0:	0800db49 	.word	0x0800db49

0800d1e4 <_strtoul_r>:
 800d1e4:	f7ff bf90 	b.w	800d108 <_strtoul_l.constprop.0>

0800d1e8 <__ascii_wctomb>:
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	4608      	mov	r0, r1
 800d1ec:	b141      	cbz	r1, 800d200 <__ascii_wctomb+0x18>
 800d1ee:	2aff      	cmp	r2, #255	@ 0xff
 800d1f0:	d904      	bls.n	800d1fc <__ascii_wctomb+0x14>
 800d1f2:	228a      	movs	r2, #138	@ 0x8a
 800d1f4:	601a      	str	r2, [r3, #0]
 800d1f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d1fa:	4770      	bx	lr
 800d1fc:	700a      	strb	r2, [r1, #0]
 800d1fe:	2001      	movs	r0, #1
 800d200:	4770      	bx	lr
	...

0800d204 <fiprintf>:
 800d204:	b40e      	push	{r1, r2, r3}
 800d206:	b503      	push	{r0, r1, lr}
 800d208:	4601      	mov	r1, r0
 800d20a:	ab03      	add	r3, sp, #12
 800d20c:	4805      	ldr	r0, [pc, #20]	@ (800d224 <fiprintf+0x20>)
 800d20e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d212:	6800      	ldr	r0, [r0, #0]
 800d214:	9301      	str	r3, [sp, #4]
 800d216:	f000 f83f 	bl	800d298 <_vfiprintf_r>
 800d21a:	b002      	add	sp, #8
 800d21c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d220:	b003      	add	sp, #12
 800d222:	4770      	bx	lr
 800d224:	20000014 	.word	0x20000014

0800d228 <abort>:
 800d228:	b508      	push	{r3, lr}
 800d22a:	2006      	movs	r0, #6
 800d22c:	f000 fa08 	bl	800d640 <raise>
 800d230:	2001      	movs	r0, #1
 800d232:	f7f5 fd93 	bl	8002d5c <_exit>

0800d236 <_malloc_usable_size_r>:
 800d236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d23a:	1f18      	subs	r0, r3, #4
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	bfbc      	itt	lt
 800d240:	580b      	ldrlt	r3, [r1, r0]
 800d242:	18c0      	addlt	r0, r0, r3
 800d244:	4770      	bx	lr

0800d246 <__sfputc_r>:
 800d246:	6893      	ldr	r3, [r2, #8]
 800d248:	3b01      	subs	r3, #1
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	b410      	push	{r4}
 800d24e:	6093      	str	r3, [r2, #8]
 800d250:	da08      	bge.n	800d264 <__sfputc_r+0x1e>
 800d252:	6994      	ldr	r4, [r2, #24]
 800d254:	42a3      	cmp	r3, r4
 800d256:	db01      	blt.n	800d25c <__sfputc_r+0x16>
 800d258:	290a      	cmp	r1, #10
 800d25a:	d103      	bne.n	800d264 <__sfputc_r+0x1e>
 800d25c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d260:	f000 b932 	b.w	800d4c8 <__swbuf_r>
 800d264:	6813      	ldr	r3, [r2, #0]
 800d266:	1c58      	adds	r0, r3, #1
 800d268:	6010      	str	r0, [r2, #0]
 800d26a:	7019      	strb	r1, [r3, #0]
 800d26c:	4608      	mov	r0, r1
 800d26e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d272:	4770      	bx	lr

0800d274 <__sfputs_r>:
 800d274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d276:	4606      	mov	r6, r0
 800d278:	460f      	mov	r7, r1
 800d27a:	4614      	mov	r4, r2
 800d27c:	18d5      	adds	r5, r2, r3
 800d27e:	42ac      	cmp	r4, r5
 800d280:	d101      	bne.n	800d286 <__sfputs_r+0x12>
 800d282:	2000      	movs	r0, #0
 800d284:	e007      	b.n	800d296 <__sfputs_r+0x22>
 800d286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d28a:	463a      	mov	r2, r7
 800d28c:	4630      	mov	r0, r6
 800d28e:	f7ff ffda 	bl	800d246 <__sfputc_r>
 800d292:	1c43      	adds	r3, r0, #1
 800d294:	d1f3      	bne.n	800d27e <__sfputs_r+0xa>
 800d296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d298 <_vfiprintf_r>:
 800d298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d29c:	460d      	mov	r5, r1
 800d29e:	b09d      	sub	sp, #116	@ 0x74
 800d2a0:	4614      	mov	r4, r2
 800d2a2:	4698      	mov	r8, r3
 800d2a4:	4606      	mov	r6, r0
 800d2a6:	b118      	cbz	r0, 800d2b0 <_vfiprintf_r+0x18>
 800d2a8:	6a03      	ldr	r3, [r0, #32]
 800d2aa:	b90b      	cbnz	r3, 800d2b0 <_vfiprintf_r+0x18>
 800d2ac:	f7fc f9be 	bl	800962c <__sinit>
 800d2b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2b2:	07d9      	lsls	r1, r3, #31
 800d2b4:	d405      	bmi.n	800d2c2 <_vfiprintf_r+0x2a>
 800d2b6:	89ab      	ldrh	r3, [r5, #12]
 800d2b8:	059a      	lsls	r2, r3, #22
 800d2ba:	d402      	bmi.n	800d2c2 <_vfiprintf_r+0x2a>
 800d2bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2be:	f7fc fb06 	bl	80098ce <__retarget_lock_acquire_recursive>
 800d2c2:	89ab      	ldrh	r3, [r5, #12]
 800d2c4:	071b      	lsls	r3, r3, #28
 800d2c6:	d501      	bpl.n	800d2cc <_vfiprintf_r+0x34>
 800d2c8:	692b      	ldr	r3, [r5, #16]
 800d2ca:	b99b      	cbnz	r3, 800d2f4 <_vfiprintf_r+0x5c>
 800d2cc:	4629      	mov	r1, r5
 800d2ce:	4630      	mov	r0, r6
 800d2d0:	f000 f938 	bl	800d544 <__swsetup_r>
 800d2d4:	b170      	cbz	r0, 800d2f4 <_vfiprintf_r+0x5c>
 800d2d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2d8:	07dc      	lsls	r4, r3, #31
 800d2da:	d504      	bpl.n	800d2e6 <_vfiprintf_r+0x4e>
 800d2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e0:	b01d      	add	sp, #116	@ 0x74
 800d2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e6:	89ab      	ldrh	r3, [r5, #12]
 800d2e8:	0598      	lsls	r0, r3, #22
 800d2ea:	d4f7      	bmi.n	800d2dc <_vfiprintf_r+0x44>
 800d2ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2ee:	f7fc faef 	bl	80098d0 <__retarget_lock_release_recursive>
 800d2f2:	e7f3      	b.n	800d2dc <_vfiprintf_r+0x44>
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2f8:	2320      	movs	r3, #32
 800d2fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800d302:	2330      	movs	r3, #48	@ 0x30
 800d304:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d4b4 <_vfiprintf_r+0x21c>
 800d308:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d30c:	f04f 0901 	mov.w	r9, #1
 800d310:	4623      	mov	r3, r4
 800d312:	469a      	mov	sl, r3
 800d314:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d318:	b10a      	cbz	r2, 800d31e <_vfiprintf_r+0x86>
 800d31a:	2a25      	cmp	r2, #37	@ 0x25
 800d31c:	d1f9      	bne.n	800d312 <_vfiprintf_r+0x7a>
 800d31e:	ebba 0b04 	subs.w	fp, sl, r4
 800d322:	d00b      	beq.n	800d33c <_vfiprintf_r+0xa4>
 800d324:	465b      	mov	r3, fp
 800d326:	4622      	mov	r2, r4
 800d328:	4629      	mov	r1, r5
 800d32a:	4630      	mov	r0, r6
 800d32c:	f7ff ffa2 	bl	800d274 <__sfputs_r>
 800d330:	3001      	adds	r0, #1
 800d332:	f000 80a7 	beq.w	800d484 <_vfiprintf_r+0x1ec>
 800d336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d338:	445a      	add	r2, fp
 800d33a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d33c:	f89a 3000 	ldrb.w	r3, [sl]
 800d340:	2b00      	cmp	r3, #0
 800d342:	f000 809f 	beq.w	800d484 <_vfiprintf_r+0x1ec>
 800d346:	2300      	movs	r3, #0
 800d348:	f04f 32ff 	mov.w	r2, #4294967295
 800d34c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d350:	f10a 0a01 	add.w	sl, sl, #1
 800d354:	9304      	str	r3, [sp, #16]
 800d356:	9307      	str	r3, [sp, #28]
 800d358:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d35c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d35e:	4654      	mov	r4, sl
 800d360:	2205      	movs	r2, #5
 800d362:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d366:	4853      	ldr	r0, [pc, #332]	@ (800d4b4 <_vfiprintf_r+0x21c>)
 800d368:	f7f2 ff5a 	bl	8000220 <memchr>
 800d36c:	9a04      	ldr	r2, [sp, #16]
 800d36e:	b9d8      	cbnz	r0, 800d3a8 <_vfiprintf_r+0x110>
 800d370:	06d1      	lsls	r1, r2, #27
 800d372:	bf44      	itt	mi
 800d374:	2320      	movmi	r3, #32
 800d376:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d37a:	0713      	lsls	r3, r2, #28
 800d37c:	bf44      	itt	mi
 800d37e:	232b      	movmi	r3, #43	@ 0x2b
 800d380:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d384:	f89a 3000 	ldrb.w	r3, [sl]
 800d388:	2b2a      	cmp	r3, #42	@ 0x2a
 800d38a:	d015      	beq.n	800d3b8 <_vfiprintf_r+0x120>
 800d38c:	9a07      	ldr	r2, [sp, #28]
 800d38e:	4654      	mov	r4, sl
 800d390:	2000      	movs	r0, #0
 800d392:	f04f 0c0a 	mov.w	ip, #10
 800d396:	4621      	mov	r1, r4
 800d398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d39c:	3b30      	subs	r3, #48	@ 0x30
 800d39e:	2b09      	cmp	r3, #9
 800d3a0:	d94b      	bls.n	800d43a <_vfiprintf_r+0x1a2>
 800d3a2:	b1b0      	cbz	r0, 800d3d2 <_vfiprintf_r+0x13a>
 800d3a4:	9207      	str	r2, [sp, #28]
 800d3a6:	e014      	b.n	800d3d2 <_vfiprintf_r+0x13a>
 800d3a8:	eba0 0308 	sub.w	r3, r0, r8
 800d3ac:	fa09 f303 	lsl.w	r3, r9, r3
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	9304      	str	r3, [sp, #16]
 800d3b4:	46a2      	mov	sl, r4
 800d3b6:	e7d2      	b.n	800d35e <_vfiprintf_r+0xc6>
 800d3b8:	9b03      	ldr	r3, [sp, #12]
 800d3ba:	1d19      	adds	r1, r3, #4
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	9103      	str	r1, [sp, #12]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	bfbb      	ittet	lt
 800d3c4:	425b      	neglt	r3, r3
 800d3c6:	f042 0202 	orrlt.w	r2, r2, #2
 800d3ca:	9307      	strge	r3, [sp, #28]
 800d3cc:	9307      	strlt	r3, [sp, #28]
 800d3ce:	bfb8      	it	lt
 800d3d0:	9204      	strlt	r2, [sp, #16]
 800d3d2:	7823      	ldrb	r3, [r4, #0]
 800d3d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d3d6:	d10a      	bne.n	800d3ee <_vfiprintf_r+0x156>
 800d3d8:	7863      	ldrb	r3, [r4, #1]
 800d3da:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3dc:	d132      	bne.n	800d444 <_vfiprintf_r+0x1ac>
 800d3de:	9b03      	ldr	r3, [sp, #12]
 800d3e0:	1d1a      	adds	r2, r3, #4
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	9203      	str	r2, [sp, #12]
 800d3e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d3ea:	3402      	adds	r4, #2
 800d3ec:	9305      	str	r3, [sp, #20]
 800d3ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d4c4 <_vfiprintf_r+0x22c>
 800d3f2:	7821      	ldrb	r1, [r4, #0]
 800d3f4:	2203      	movs	r2, #3
 800d3f6:	4650      	mov	r0, sl
 800d3f8:	f7f2 ff12 	bl	8000220 <memchr>
 800d3fc:	b138      	cbz	r0, 800d40e <_vfiprintf_r+0x176>
 800d3fe:	9b04      	ldr	r3, [sp, #16]
 800d400:	eba0 000a 	sub.w	r0, r0, sl
 800d404:	2240      	movs	r2, #64	@ 0x40
 800d406:	4082      	lsls	r2, r0
 800d408:	4313      	orrs	r3, r2
 800d40a:	3401      	adds	r4, #1
 800d40c:	9304      	str	r3, [sp, #16]
 800d40e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d412:	4829      	ldr	r0, [pc, #164]	@ (800d4b8 <_vfiprintf_r+0x220>)
 800d414:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d418:	2206      	movs	r2, #6
 800d41a:	f7f2 ff01 	bl	8000220 <memchr>
 800d41e:	2800      	cmp	r0, #0
 800d420:	d03f      	beq.n	800d4a2 <_vfiprintf_r+0x20a>
 800d422:	4b26      	ldr	r3, [pc, #152]	@ (800d4bc <_vfiprintf_r+0x224>)
 800d424:	bb1b      	cbnz	r3, 800d46e <_vfiprintf_r+0x1d6>
 800d426:	9b03      	ldr	r3, [sp, #12]
 800d428:	3307      	adds	r3, #7
 800d42a:	f023 0307 	bic.w	r3, r3, #7
 800d42e:	3308      	adds	r3, #8
 800d430:	9303      	str	r3, [sp, #12]
 800d432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d434:	443b      	add	r3, r7
 800d436:	9309      	str	r3, [sp, #36]	@ 0x24
 800d438:	e76a      	b.n	800d310 <_vfiprintf_r+0x78>
 800d43a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d43e:	460c      	mov	r4, r1
 800d440:	2001      	movs	r0, #1
 800d442:	e7a8      	b.n	800d396 <_vfiprintf_r+0xfe>
 800d444:	2300      	movs	r3, #0
 800d446:	3401      	adds	r4, #1
 800d448:	9305      	str	r3, [sp, #20]
 800d44a:	4619      	mov	r1, r3
 800d44c:	f04f 0c0a 	mov.w	ip, #10
 800d450:	4620      	mov	r0, r4
 800d452:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d456:	3a30      	subs	r2, #48	@ 0x30
 800d458:	2a09      	cmp	r2, #9
 800d45a:	d903      	bls.n	800d464 <_vfiprintf_r+0x1cc>
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d0c6      	beq.n	800d3ee <_vfiprintf_r+0x156>
 800d460:	9105      	str	r1, [sp, #20]
 800d462:	e7c4      	b.n	800d3ee <_vfiprintf_r+0x156>
 800d464:	fb0c 2101 	mla	r1, ip, r1, r2
 800d468:	4604      	mov	r4, r0
 800d46a:	2301      	movs	r3, #1
 800d46c:	e7f0      	b.n	800d450 <_vfiprintf_r+0x1b8>
 800d46e:	ab03      	add	r3, sp, #12
 800d470:	9300      	str	r3, [sp, #0]
 800d472:	462a      	mov	r2, r5
 800d474:	4b12      	ldr	r3, [pc, #72]	@ (800d4c0 <_vfiprintf_r+0x228>)
 800d476:	a904      	add	r1, sp, #16
 800d478:	4630      	mov	r0, r6
 800d47a:	f7fb fa7f 	bl	800897c <_printf_float>
 800d47e:	4607      	mov	r7, r0
 800d480:	1c78      	adds	r0, r7, #1
 800d482:	d1d6      	bne.n	800d432 <_vfiprintf_r+0x19a>
 800d484:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d486:	07d9      	lsls	r1, r3, #31
 800d488:	d405      	bmi.n	800d496 <_vfiprintf_r+0x1fe>
 800d48a:	89ab      	ldrh	r3, [r5, #12]
 800d48c:	059a      	lsls	r2, r3, #22
 800d48e:	d402      	bmi.n	800d496 <_vfiprintf_r+0x1fe>
 800d490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d492:	f7fc fa1d 	bl	80098d0 <__retarget_lock_release_recursive>
 800d496:	89ab      	ldrh	r3, [r5, #12]
 800d498:	065b      	lsls	r3, r3, #25
 800d49a:	f53f af1f 	bmi.w	800d2dc <_vfiprintf_r+0x44>
 800d49e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4a0:	e71e      	b.n	800d2e0 <_vfiprintf_r+0x48>
 800d4a2:	ab03      	add	r3, sp, #12
 800d4a4:	9300      	str	r3, [sp, #0]
 800d4a6:	462a      	mov	r2, r5
 800d4a8:	4b05      	ldr	r3, [pc, #20]	@ (800d4c0 <_vfiprintf_r+0x228>)
 800d4aa:	a904      	add	r1, sp, #16
 800d4ac:	4630      	mov	r0, r6
 800d4ae:	f7fb fcfd 	bl	8008eac <_printf_i>
 800d4b2:	e7e4      	b.n	800d47e <_vfiprintf_r+0x1e6>
 800d4b4:	0800dc49 	.word	0x0800dc49
 800d4b8:	0800dc53 	.word	0x0800dc53
 800d4bc:	0800897d 	.word	0x0800897d
 800d4c0:	0800d275 	.word	0x0800d275
 800d4c4:	0800dc4f 	.word	0x0800dc4f

0800d4c8 <__swbuf_r>:
 800d4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ca:	460e      	mov	r6, r1
 800d4cc:	4614      	mov	r4, r2
 800d4ce:	4605      	mov	r5, r0
 800d4d0:	b118      	cbz	r0, 800d4da <__swbuf_r+0x12>
 800d4d2:	6a03      	ldr	r3, [r0, #32]
 800d4d4:	b90b      	cbnz	r3, 800d4da <__swbuf_r+0x12>
 800d4d6:	f7fc f8a9 	bl	800962c <__sinit>
 800d4da:	69a3      	ldr	r3, [r4, #24]
 800d4dc:	60a3      	str	r3, [r4, #8]
 800d4de:	89a3      	ldrh	r3, [r4, #12]
 800d4e0:	071a      	lsls	r2, r3, #28
 800d4e2:	d501      	bpl.n	800d4e8 <__swbuf_r+0x20>
 800d4e4:	6923      	ldr	r3, [r4, #16]
 800d4e6:	b943      	cbnz	r3, 800d4fa <__swbuf_r+0x32>
 800d4e8:	4621      	mov	r1, r4
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	f000 f82a 	bl	800d544 <__swsetup_r>
 800d4f0:	b118      	cbz	r0, 800d4fa <__swbuf_r+0x32>
 800d4f2:	f04f 37ff 	mov.w	r7, #4294967295
 800d4f6:	4638      	mov	r0, r7
 800d4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4fa:	6823      	ldr	r3, [r4, #0]
 800d4fc:	6922      	ldr	r2, [r4, #16]
 800d4fe:	1a98      	subs	r0, r3, r2
 800d500:	6963      	ldr	r3, [r4, #20]
 800d502:	b2f6      	uxtb	r6, r6
 800d504:	4283      	cmp	r3, r0
 800d506:	4637      	mov	r7, r6
 800d508:	dc05      	bgt.n	800d516 <__swbuf_r+0x4e>
 800d50a:	4621      	mov	r1, r4
 800d50c:	4628      	mov	r0, r5
 800d50e:	f7ff f96f 	bl	800c7f0 <_fflush_r>
 800d512:	2800      	cmp	r0, #0
 800d514:	d1ed      	bne.n	800d4f2 <__swbuf_r+0x2a>
 800d516:	68a3      	ldr	r3, [r4, #8]
 800d518:	3b01      	subs	r3, #1
 800d51a:	60a3      	str	r3, [r4, #8]
 800d51c:	6823      	ldr	r3, [r4, #0]
 800d51e:	1c5a      	adds	r2, r3, #1
 800d520:	6022      	str	r2, [r4, #0]
 800d522:	701e      	strb	r6, [r3, #0]
 800d524:	6962      	ldr	r2, [r4, #20]
 800d526:	1c43      	adds	r3, r0, #1
 800d528:	429a      	cmp	r2, r3
 800d52a:	d004      	beq.n	800d536 <__swbuf_r+0x6e>
 800d52c:	89a3      	ldrh	r3, [r4, #12]
 800d52e:	07db      	lsls	r3, r3, #31
 800d530:	d5e1      	bpl.n	800d4f6 <__swbuf_r+0x2e>
 800d532:	2e0a      	cmp	r6, #10
 800d534:	d1df      	bne.n	800d4f6 <__swbuf_r+0x2e>
 800d536:	4621      	mov	r1, r4
 800d538:	4628      	mov	r0, r5
 800d53a:	f7ff f959 	bl	800c7f0 <_fflush_r>
 800d53e:	2800      	cmp	r0, #0
 800d540:	d0d9      	beq.n	800d4f6 <__swbuf_r+0x2e>
 800d542:	e7d6      	b.n	800d4f2 <__swbuf_r+0x2a>

0800d544 <__swsetup_r>:
 800d544:	b538      	push	{r3, r4, r5, lr}
 800d546:	4b29      	ldr	r3, [pc, #164]	@ (800d5ec <__swsetup_r+0xa8>)
 800d548:	4605      	mov	r5, r0
 800d54a:	6818      	ldr	r0, [r3, #0]
 800d54c:	460c      	mov	r4, r1
 800d54e:	b118      	cbz	r0, 800d558 <__swsetup_r+0x14>
 800d550:	6a03      	ldr	r3, [r0, #32]
 800d552:	b90b      	cbnz	r3, 800d558 <__swsetup_r+0x14>
 800d554:	f7fc f86a 	bl	800962c <__sinit>
 800d558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d55c:	0719      	lsls	r1, r3, #28
 800d55e:	d422      	bmi.n	800d5a6 <__swsetup_r+0x62>
 800d560:	06da      	lsls	r2, r3, #27
 800d562:	d407      	bmi.n	800d574 <__swsetup_r+0x30>
 800d564:	2209      	movs	r2, #9
 800d566:	602a      	str	r2, [r5, #0]
 800d568:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d56c:	81a3      	strh	r3, [r4, #12]
 800d56e:	f04f 30ff 	mov.w	r0, #4294967295
 800d572:	e033      	b.n	800d5dc <__swsetup_r+0x98>
 800d574:	0758      	lsls	r0, r3, #29
 800d576:	d512      	bpl.n	800d59e <__swsetup_r+0x5a>
 800d578:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d57a:	b141      	cbz	r1, 800d58e <__swsetup_r+0x4a>
 800d57c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d580:	4299      	cmp	r1, r3
 800d582:	d002      	beq.n	800d58a <__swsetup_r+0x46>
 800d584:	4628      	mov	r0, r5
 800d586:	f7fd f807 	bl	800a598 <_free_r>
 800d58a:	2300      	movs	r3, #0
 800d58c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d58e:	89a3      	ldrh	r3, [r4, #12]
 800d590:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d594:	81a3      	strh	r3, [r4, #12]
 800d596:	2300      	movs	r3, #0
 800d598:	6063      	str	r3, [r4, #4]
 800d59a:	6923      	ldr	r3, [r4, #16]
 800d59c:	6023      	str	r3, [r4, #0]
 800d59e:	89a3      	ldrh	r3, [r4, #12]
 800d5a0:	f043 0308 	orr.w	r3, r3, #8
 800d5a4:	81a3      	strh	r3, [r4, #12]
 800d5a6:	6923      	ldr	r3, [r4, #16]
 800d5a8:	b94b      	cbnz	r3, 800d5be <__swsetup_r+0x7a>
 800d5aa:	89a3      	ldrh	r3, [r4, #12]
 800d5ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d5b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5b4:	d003      	beq.n	800d5be <__swsetup_r+0x7a>
 800d5b6:	4621      	mov	r1, r4
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	f000 f883 	bl	800d6c4 <__smakebuf_r>
 800d5be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5c2:	f013 0201 	ands.w	r2, r3, #1
 800d5c6:	d00a      	beq.n	800d5de <__swsetup_r+0x9a>
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	60a2      	str	r2, [r4, #8]
 800d5cc:	6962      	ldr	r2, [r4, #20]
 800d5ce:	4252      	negs	r2, r2
 800d5d0:	61a2      	str	r2, [r4, #24]
 800d5d2:	6922      	ldr	r2, [r4, #16]
 800d5d4:	b942      	cbnz	r2, 800d5e8 <__swsetup_r+0xa4>
 800d5d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d5da:	d1c5      	bne.n	800d568 <__swsetup_r+0x24>
 800d5dc:	bd38      	pop	{r3, r4, r5, pc}
 800d5de:	0799      	lsls	r1, r3, #30
 800d5e0:	bf58      	it	pl
 800d5e2:	6962      	ldrpl	r2, [r4, #20]
 800d5e4:	60a2      	str	r2, [r4, #8]
 800d5e6:	e7f4      	b.n	800d5d2 <__swsetup_r+0x8e>
 800d5e8:	2000      	movs	r0, #0
 800d5ea:	e7f7      	b.n	800d5dc <__swsetup_r+0x98>
 800d5ec:	20000014 	.word	0x20000014

0800d5f0 <_raise_r>:
 800d5f0:	291f      	cmp	r1, #31
 800d5f2:	b538      	push	{r3, r4, r5, lr}
 800d5f4:	4605      	mov	r5, r0
 800d5f6:	460c      	mov	r4, r1
 800d5f8:	d904      	bls.n	800d604 <_raise_r+0x14>
 800d5fa:	2316      	movs	r3, #22
 800d5fc:	6003      	str	r3, [r0, #0]
 800d5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d602:	bd38      	pop	{r3, r4, r5, pc}
 800d604:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d606:	b112      	cbz	r2, 800d60e <_raise_r+0x1e>
 800d608:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d60c:	b94b      	cbnz	r3, 800d622 <_raise_r+0x32>
 800d60e:	4628      	mov	r0, r5
 800d610:	f000 f830 	bl	800d674 <_getpid_r>
 800d614:	4622      	mov	r2, r4
 800d616:	4601      	mov	r1, r0
 800d618:	4628      	mov	r0, r5
 800d61a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d61e:	f000 b817 	b.w	800d650 <_kill_r>
 800d622:	2b01      	cmp	r3, #1
 800d624:	d00a      	beq.n	800d63c <_raise_r+0x4c>
 800d626:	1c59      	adds	r1, r3, #1
 800d628:	d103      	bne.n	800d632 <_raise_r+0x42>
 800d62a:	2316      	movs	r3, #22
 800d62c:	6003      	str	r3, [r0, #0]
 800d62e:	2001      	movs	r0, #1
 800d630:	e7e7      	b.n	800d602 <_raise_r+0x12>
 800d632:	2100      	movs	r1, #0
 800d634:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d638:	4620      	mov	r0, r4
 800d63a:	4798      	blx	r3
 800d63c:	2000      	movs	r0, #0
 800d63e:	e7e0      	b.n	800d602 <_raise_r+0x12>

0800d640 <raise>:
 800d640:	4b02      	ldr	r3, [pc, #8]	@ (800d64c <raise+0xc>)
 800d642:	4601      	mov	r1, r0
 800d644:	6818      	ldr	r0, [r3, #0]
 800d646:	f7ff bfd3 	b.w	800d5f0 <_raise_r>
 800d64a:	bf00      	nop
 800d64c:	20000014 	.word	0x20000014

0800d650 <_kill_r>:
 800d650:	b538      	push	{r3, r4, r5, lr}
 800d652:	4d07      	ldr	r5, [pc, #28]	@ (800d670 <_kill_r+0x20>)
 800d654:	2300      	movs	r3, #0
 800d656:	4604      	mov	r4, r0
 800d658:	4608      	mov	r0, r1
 800d65a:	4611      	mov	r1, r2
 800d65c:	602b      	str	r3, [r5, #0]
 800d65e:	f7f5 fb6d 	bl	8002d3c <_kill>
 800d662:	1c43      	adds	r3, r0, #1
 800d664:	d102      	bne.n	800d66c <_kill_r+0x1c>
 800d666:	682b      	ldr	r3, [r5, #0]
 800d668:	b103      	cbz	r3, 800d66c <_kill_r+0x1c>
 800d66a:	6023      	str	r3, [r4, #0]
 800d66c:	bd38      	pop	{r3, r4, r5, pc}
 800d66e:	bf00      	nop
 800d670:	2000080c 	.word	0x2000080c

0800d674 <_getpid_r>:
 800d674:	f7f5 bb5a 	b.w	8002d2c <_getpid>

0800d678 <__swhatbuf_r>:
 800d678:	b570      	push	{r4, r5, r6, lr}
 800d67a:	460c      	mov	r4, r1
 800d67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d680:	2900      	cmp	r1, #0
 800d682:	b096      	sub	sp, #88	@ 0x58
 800d684:	4615      	mov	r5, r2
 800d686:	461e      	mov	r6, r3
 800d688:	da0d      	bge.n	800d6a6 <__swhatbuf_r+0x2e>
 800d68a:	89a3      	ldrh	r3, [r4, #12]
 800d68c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d690:	f04f 0100 	mov.w	r1, #0
 800d694:	bf14      	ite	ne
 800d696:	2340      	movne	r3, #64	@ 0x40
 800d698:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d69c:	2000      	movs	r0, #0
 800d69e:	6031      	str	r1, [r6, #0]
 800d6a0:	602b      	str	r3, [r5, #0]
 800d6a2:	b016      	add	sp, #88	@ 0x58
 800d6a4:	bd70      	pop	{r4, r5, r6, pc}
 800d6a6:	466a      	mov	r2, sp
 800d6a8:	f000 f848 	bl	800d73c <_fstat_r>
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	dbec      	blt.n	800d68a <__swhatbuf_r+0x12>
 800d6b0:	9901      	ldr	r1, [sp, #4]
 800d6b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d6b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d6ba:	4259      	negs	r1, r3
 800d6bc:	4159      	adcs	r1, r3
 800d6be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6c2:	e7eb      	b.n	800d69c <__swhatbuf_r+0x24>

0800d6c4 <__smakebuf_r>:
 800d6c4:	898b      	ldrh	r3, [r1, #12]
 800d6c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6c8:	079d      	lsls	r5, r3, #30
 800d6ca:	4606      	mov	r6, r0
 800d6cc:	460c      	mov	r4, r1
 800d6ce:	d507      	bpl.n	800d6e0 <__smakebuf_r+0x1c>
 800d6d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d6d4:	6023      	str	r3, [r4, #0]
 800d6d6:	6123      	str	r3, [r4, #16]
 800d6d8:	2301      	movs	r3, #1
 800d6da:	6163      	str	r3, [r4, #20]
 800d6dc:	b003      	add	sp, #12
 800d6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6e0:	ab01      	add	r3, sp, #4
 800d6e2:	466a      	mov	r2, sp
 800d6e4:	f7ff ffc8 	bl	800d678 <__swhatbuf_r>
 800d6e8:	9f00      	ldr	r7, [sp, #0]
 800d6ea:	4605      	mov	r5, r0
 800d6ec:	4639      	mov	r1, r7
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	f7fc ffc6 	bl	800a680 <_malloc_r>
 800d6f4:	b948      	cbnz	r0, 800d70a <__smakebuf_r+0x46>
 800d6f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6fa:	059a      	lsls	r2, r3, #22
 800d6fc:	d4ee      	bmi.n	800d6dc <__smakebuf_r+0x18>
 800d6fe:	f023 0303 	bic.w	r3, r3, #3
 800d702:	f043 0302 	orr.w	r3, r3, #2
 800d706:	81a3      	strh	r3, [r4, #12]
 800d708:	e7e2      	b.n	800d6d0 <__smakebuf_r+0xc>
 800d70a:	89a3      	ldrh	r3, [r4, #12]
 800d70c:	6020      	str	r0, [r4, #0]
 800d70e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d712:	81a3      	strh	r3, [r4, #12]
 800d714:	9b01      	ldr	r3, [sp, #4]
 800d716:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d71a:	b15b      	cbz	r3, 800d734 <__smakebuf_r+0x70>
 800d71c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d720:	4630      	mov	r0, r6
 800d722:	f000 f81d 	bl	800d760 <_isatty_r>
 800d726:	b128      	cbz	r0, 800d734 <__smakebuf_r+0x70>
 800d728:	89a3      	ldrh	r3, [r4, #12]
 800d72a:	f023 0303 	bic.w	r3, r3, #3
 800d72e:	f043 0301 	orr.w	r3, r3, #1
 800d732:	81a3      	strh	r3, [r4, #12]
 800d734:	89a3      	ldrh	r3, [r4, #12]
 800d736:	431d      	orrs	r5, r3
 800d738:	81a5      	strh	r5, [r4, #12]
 800d73a:	e7cf      	b.n	800d6dc <__smakebuf_r+0x18>

0800d73c <_fstat_r>:
 800d73c:	b538      	push	{r3, r4, r5, lr}
 800d73e:	4d07      	ldr	r5, [pc, #28]	@ (800d75c <_fstat_r+0x20>)
 800d740:	2300      	movs	r3, #0
 800d742:	4604      	mov	r4, r0
 800d744:	4608      	mov	r0, r1
 800d746:	4611      	mov	r1, r2
 800d748:	602b      	str	r3, [r5, #0]
 800d74a:	f7f5 fb57 	bl	8002dfc <_fstat>
 800d74e:	1c43      	adds	r3, r0, #1
 800d750:	d102      	bne.n	800d758 <_fstat_r+0x1c>
 800d752:	682b      	ldr	r3, [r5, #0]
 800d754:	b103      	cbz	r3, 800d758 <_fstat_r+0x1c>
 800d756:	6023      	str	r3, [r4, #0]
 800d758:	bd38      	pop	{r3, r4, r5, pc}
 800d75a:	bf00      	nop
 800d75c:	2000080c 	.word	0x2000080c

0800d760 <_isatty_r>:
 800d760:	b538      	push	{r3, r4, r5, lr}
 800d762:	4d06      	ldr	r5, [pc, #24]	@ (800d77c <_isatty_r+0x1c>)
 800d764:	2300      	movs	r3, #0
 800d766:	4604      	mov	r4, r0
 800d768:	4608      	mov	r0, r1
 800d76a:	602b      	str	r3, [r5, #0]
 800d76c:	f7f5 fb56 	bl	8002e1c <_isatty>
 800d770:	1c43      	adds	r3, r0, #1
 800d772:	d102      	bne.n	800d77a <_isatty_r+0x1a>
 800d774:	682b      	ldr	r3, [r5, #0]
 800d776:	b103      	cbz	r3, 800d77a <_isatty_r+0x1a>
 800d778:	6023      	str	r3, [r4, #0]
 800d77a:	bd38      	pop	{r3, r4, r5, pc}
 800d77c:	2000080c 	.word	0x2000080c

0800d780 <_init>:
 800d780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d782:	bf00      	nop
 800d784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d786:	bc08      	pop	{r3}
 800d788:	469e      	mov	lr, r3
 800d78a:	4770      	bx	lr

0800d78c <_fini>:
 800d78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d78e:	bf00      	nop
 800d790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d792:	bc08      	pop	{r3}
 800d794:	469e      	mov	lr, r3
 800d796:	4770      	bx	lr
