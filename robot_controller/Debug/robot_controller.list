
robot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ceb4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800d098  0800d098  0000e098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d570  0800d570  0000f1d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d570  0800d570  0000e570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d578  0800d578  0000f1d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d578  0800d578  0000e578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d57c  0800d57c  0000e57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800d580  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  200001d0  0800d750  0000f1d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000088c  0800d750  0000f88c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e062  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044e2  00000000  00000000  0002d262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  00031748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000113e  00000000  00000000  00032db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a7c  00000000  00000000  00033eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef8b  00000000  00000000  0005d96a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001062ad  00000000  00000000  0007c8f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00182ba2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000701c  00000000  00000000  00182be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00189c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d0 	.word	0x200001d0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d07c 	.word	0x0800d07c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d4 	.word	0x200001d4
 800021c:	0800d07c 	.word	0x0800d07c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	@ 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	2238      	movs	r2, #56	@ 0x38
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f008 fc33 	bl	80098ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001056:	2000      	movs	r0, #0
 8001058:	f002 fbde 	bl	8003818 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800105c:	2302      	movs	r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001060:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001066:	2340      	movs	r3, #64	@ 0x40
 8001068:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106a:	2302      	movs	r3, #2
 800106c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800106e:	2302      	movs	r3, #2
 8001070:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001072:	2304      	movs	r3, #4
 8001074:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001076:	2355      	movs	r3, #85	@ 0x55
 8001078:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800107a:	2302      	movs	r3, #2
 800107c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800107e:	2302      	movs	r3, #2
 8001080:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001082:	2302      	movs	r3, #2
 8001084:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	4618      	mov	r0, r3
 800108c:	f002 fc78 	bl	8003980 <HAL_RCC_OscConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001096:	f001 fc87 	bl	80029a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109a:	230f      	movs	r3, #15
 800109c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109e:	2303      	movs	r3, #3
 80010a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2104      	movs	r1, #4
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 ff76 	bl	8003fa4 <HAL_RCC_ClockConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010be:	f001 fc73 	bl	80029a8 <Error_Handler>
  }
}
 80010c2:	bf00      	nop
 80010c4:	3750      	adds	r7, #80	@ 0x50
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <MX_GPIO_Init>:

#include "gpio_configuration.h"


void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b30      	ldr	r3, [pc, #192]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a2f      	ldr	r2, [pc, #188]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b2d      	ldr	r3, [pc, #180]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010fa:	4b2a      	ldr	r3, [pc, #168]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a29      	ldr	r2, [pc, #164]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001100:	f043 0320 	orr.w	r3, r3, #32
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b27      	ldr	r3, [pc, #156]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0320 	and.w	r3, r3, #32
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b24      	ldr	r3, [pc, #144]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a23      	ldr	r2, [pc, #140]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b21      	ldr	r3, [pc, #132]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b1e      	ldr	r3, [pc, #120]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a1d      	ldr	r2, [pc, #116]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9|LD2_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f240 3123 	movw	r1, #803	@ 0x323
 8001148:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800114c:	f002 fb4c 	bl	80037e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001150:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001156:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800115a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	4810      	ldr	r0, [pc, #64]	@ (80011a8 <MX_GPIO_Init+0xdc>)
 8001168:	f002 f9bc 	bl	80034e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA9 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9|LD2_Pin;
 800116c:	f240 3323 	movw	r3, #803	@ 0x323
 8001170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001188:	f002 f9ac 	bl	80034e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2028      	movs	r0, #40	@ 0x28
 8001192:	f002 f8bf 	bl	8003314 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001196:	2028      	movs	r0, #40	@ 0x28
 8001198:	f002 f8d6 	bl	8003348 <HAL_NVIC_EnableIRQ>

}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	@ 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021000 	.word	0x40021000
 80011a8:	48000800 	.word	0x48000800

080011ac <MX_TIM1_Init>:




void MX_TIM1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b09c      	sub	sp, #112	@ 0x70
 80011b0:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
 80011dc:	615a      	str	r2, [r3, #20]
 80011de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2234      	movs	r2, #52	@ 0x34
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f008 fb61 	bl	80098ae <memset>

  htim1.Instance = TIM1;
 80011ec:	4b57      	ldr	r3, [pc, #348]	@ (800134c <MX_TIM1_Init+0x1a0>)
 80011ee:	4a58      	ldr	r2, [pc, #352]	@ (8001350 <MX_TIM1_Init+0x1a4>)
 80011f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170000-1;
 80011f2:	4b56      	ldr	r3, [pc, #344]	@ (800134c <MX_TIM1_Init+0x1a0>)
 80011f4:	4a57      	ldr	r2, [pc, #348]	@ (8001354 <MX_TIM1_Init+0x1a8>)
 80011f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f8:	4b54      	ldr	r3, [pc, #336]	@ (800134c <MX_TIM1_Init+0x1a0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80011fe:	4b53      	ldr	r3, [pc, #332]	@ (800134c <MX_TIM1_Init+0x1a0>)
 8001200:	2263      	movs	r2, #99	@ 0x63
 8001202:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001204:	4b51      	ldr	r3, [pc, #324]	@ (800134c <MX_TIM1_Init+0x1a0>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800120a:	4b50      	ldr	r3, [pc, #320]	@ (800134c <MX_TIM1_Init+0x1a0>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001210:	4b4e      	ldr	r3, [pc, #312]	@ (800134c <MX_TIM1_Init+0x1a0>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001216:	484d      	ldr	r0, [pc, #308]	@ (800134c <MX_TIM1_Init+0x1a0>)
 8001218:	f003 fb60 	bl	80048dc <HAL_TIM_Base_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001222:	f001 fbc1 	bl	80029a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001226:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800122a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800122c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001230:	4619      	mov	r1, r3
 8001232:	4846      	ldr	r0, [pc, #280]	@ (800134c <MX_TIM1_Init+0x1a0>)
 8001234:	f004 f92e 	bl	8005494 <HAL_TIM_ConfigClockSource>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800123e:	f001 fbb3 	bl	80029a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001242:	4842      	ldr	r0, [pc, #264]	@ (800134c <MX_TIM1_Init+0x1a0>)
 8001244:	f003 fc1a 	bl	8004a7c <HAL_TIM_PWM_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800124e:	f001 fbab 	bl	80029a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800125e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001262:	4619      	mov	r1, r3
 8001264:	4839      	ldr	r0, [pc, #228]	@ (800134c <MX_TIM1_Init+0x1a0>)
 8001266:	f004 fef3 	bl	8006050 <HAL_TIMEx_MasterConfigSynchronization>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001270:	f001 fb9a 	bl	80029a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001274:	2360      	movs	r3, #96	@ 0x60
 8001276:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127c:	2300      	movs	r3, #0
 800127e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001280:	2300      	movs	r3, #0
 8001282:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001290:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001294:	2200      	movs	r2, #0
 8001296:	4619      	mov	r1, r3
 8001298:	482c      	ldr	r0, [pc, #176]	@ (800134c <MX_TIM1_Init+0x1a0>)
 800129a:	f003 ffe7 	bl	800526c <HAL_TIM_PWM_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80012a4:	f001 fb80 	bl	80029a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012ac:	2204      	movs	r2, #4
 80012ae:	4619      	mov	r1, r3
 80012b0:	4826      	ldr	r0, [pc, #152]	@ (800134c <MX_TIM1_Init+0x1a0>)
 80012b2:	f003 ffdb 	bl	800526c <HAL_TIM_PWM_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80012bc:	f001 fb74 	bl	80029a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012c4:	2208      	movs	r2, #8
 80012c6:	4619      	mov	r1, r3
 80012c8:	4820      	ldr	r0, [pc, #128]	@ (800134c <MX_TIM1_Init+0x1a0>)
 80012ca:	f003 ffcf 	bl	800526c <HAL_TIM_PWM_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80012d4:	f001 fb68 	bl	80029a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012dc:	220c      	movs	r2, #12
 80012de:	4619      	mov	r1, r3
 80012e0:	481a      	ldr	r0, [pc, #104]	@ (800134c <MX_TIM1_Init+0x1a0>)
 80012e2:	f003 ffc3 	bl	800526c <HAL_TIM_PWM_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80012ec:	f001 fb5c 	bl	80029a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001304:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001308:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800130e:	2300      	movs	r3, #0
 8001310:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001316:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800131a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001320:	2300      	movs	r3, #0
 8001322:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4619      	mov	r1, r3
 800132c:	4807      	ldr	r0, [pc, #28]	@ (800134c <MX_TIM1_Init+0x1a0>)
 800132e:	f004 ff25 	bl	800617c <HAL_TIMEx_ConfigBreakDeadTime>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8001338:	f001 fb36 	bl	80029a8 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 800133c:	4803      	ldr	r0, [pc, #12]	@ (800134c <MX_TIM1_Init+0x1a0>)
 800133e:	f001 fd2d 	bl	8002d9c <HAL_TIM_MspPostInit>

}
 8001342:	bf00      	nop
 8001344:	3770      	adds	r7, #112	@ 0x70
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200001ec 	.word	0x200001ec
 8001350:	40012c00 	.word	0x40012c00
 8001354:	0002980f 	.word	0x0002980f

08001358 <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08c      	sub	sp, #48	@ 0x30
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	2224      	movs	r2, #36	@ 0x24
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f008 faa1 	bl	80098ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136c:	463b      	mov	r3, r7
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001376:	4b21      	ldr	r3, [pc, #132]	@ (80013fc <MX_TIM3_Init+0xa4>)
 8001378:	4a21      	ldr	r2, [pc, #132]	@ (8001400 <MX_TIM3_Init+0xa8>)
 800137a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800137c:	4b1f      	ldr	r3, [pc, #124]	@ (80013fc <MX_TIM3_Init+0xa4>)
 800137e:	2200      	movs	r2, #0
 8001380:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b1e      	ldr	r3, [pc, #120]	@ (80013fc <MX_TIM3_Init+0xa4>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001388:	4b1c      	ldr	r3, [pc, #112]	@ (80013fc <MX_TIM3_Init+0xa4>)
 800138a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800138e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001390:	4b1a      	ldr	r3, [pc, #104]	@ (80013fc <MX_TIM3_Init+0xa4>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001396:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <MX_TIM3_Init+0xa4>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800139c:	2303      	movs	r3, #3
 800139e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013a4:	2301      	movs	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013b4:	2301      	movs	r3, #1
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	480d      	ldr	r0, [pc, #52]	@ (80013fc <MX_TIM3_Init+0xa4>)
 80013c8:	f003 fccc 	bl	8004d64 <HAL_TIM_Encoder_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80013d2:	f001 fae9 	bl	80029a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013de:	463b      	mov	r3, r7
 80013e0:	4619      	mov	r1, r3
 80013e2:	4806      	ldr	r0, [pc, #24]	@ (80013fc <MX_TIM3_Init+0xa4>)
 80013e4:	f004 fe34 	bl	8006050 <HAL_TIMEx_MasterConfigSynchronization>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80013ee:	f001 fadb 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	3730      	adds	r7, #48	@ 0x30
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000238 	.word	0x20000238
 8001400:	40000400 	.word	0x40000400

08001404 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	@ 0x30
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	2224      	movs	r2, #36	@ 0x24
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f008 fa4b 	bl	80098ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001418:	463b      	mov	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001422:	4b21      	ldr	r3, [pc, #132]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 8001424:	4a21      	ldr	r2, [pc, #132]	@ (80014ac <MX_TIM4_Init+0xa8>)
 8001426:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001428:	4b1f      	ldr	r3, [pc, #124]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 800142a:	2200      	movs	r2, #0
 800142c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142e:	4b1e      	ldr	r3, [pc, #120]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001434:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 8001436:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800143a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143c:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001442:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 8001444:	2280      	movs	r2, #128	@ 0x80
 8001446:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001448:	2303      	movs	r3, #3
 800144a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800144c:	2300      	movs	r3, #0
 800144e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001450:	2301      	movs	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001458:	230a      	movs	r3, #10
 800145a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001460:	2301      	movs	r3, #1
 8001462:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	4619      	mov	r1, r3
 8001472:	480d      	ldr	r0, [pc, #52]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 8001474:	f003 fc76 	bl	8004d64 <HAL_TIM_Encoder_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800147e:	f001 fa93 	bl	80029a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800148a:	463b      	mov	r3, r7
 800148c:	4619      	mov	r1, r3
 800148e:	4806      	ldr	r0, [pc, #24]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 8001490:	f004 fdde 	bl	8006050 <HAL_TIMEx_MasterConfigSynchronization>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800149a:	f001 fa85 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	3730      	adds	r7, #48	@ 0x30
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000284 	.word	0x20000284
 80014ac:	40000800 	.word	0x40000800

080014b0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	@ 0x30
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	2224      	movs	r2, #36	@ 0x24
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f008 f9f5 	bl	80098ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c4:	463b      	mov	r3, r7
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014ce:	4b21      	ldr	r3, [pc, #132]	@ (8001554 <MX_TIM5_Init+0xa4>)
 80014d0:	4a21      	ldr	r2, [pc, #132]	@ (8001558 <MX_TIM5_Init+0xa8>)
 80014d2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <MX_TIM5_Init+0xa4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014da:	4b1e      	ldr	r3, [pc, #120]	@ (8001554 <MX_TIM5_Init+0xa4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80014e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <MX_TIM5_Init+0xa4>)
 80014e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014e6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <MX_TIM5_Init+0xa4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ee:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <MX_TIM5_Init+0xa4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014f4:	2303      	movs	r3, #3
 80014f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014fc:	2301      	movs	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800150c:	2301      	movs	r3, #1
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	4619      	mov	r1, r3
 800151e:	480d      	ldr	r0, [pc, #52]	@ (8001554 <MX_TIM5_Init+0xa4>)
 8001520:	f003 fc20 	bl	8004d64 <HAL_TIM_Encoder_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800152a:	f001 fa3d 	bl	80029a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001536:	463b      	mov	r3, r7
 8001538:	4619      	mov	r1, r3
 800153a:	4806      	ldr	r0, [pc, #24]	@ (8001554 <MX_TIM5_Init+0xa4>)
 800153c:	f004 fd88 	bl	8006050 <HAL_TIMEx_MasterConfigSynchronization>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001546:	f001 fa2f 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	3730      	adds	r7, #48	@ 0x30
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200002d0 	.word	0x200002d0
 8001558:	40000c00 	.word	0x40000c00

0800155c <MX_TIM7_Init>:

void MX_TIM7_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800156c:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <MX_TIM7_Init+0x64>)
 800156e:	4a15      	ldr	r2, [pc, #84]	@ (80015c4 <MX_TIM7_Init+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170-1;
 8001572:	4b13      	ldr	r3, [pc, #76]	@ (80015c0 <MX_TIM7_Init+0x64>)
 8001574:	22a9      	movs	r2, #169	@ 0xa9
 8001576:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <MX_TIM7_Init+0x64>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50000;
 800157e:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <MX_TIM7_Init+0x64>)
 8001580:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001584:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001586:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <MX_TIM7_Init+0x64>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <MX_TIM7_Init+0x64>)
 800158e:	f003 f9a5 	bl	80048dc <HAL_TIM_Base_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001598:	f001 fa06 	bl	80029a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <MX_TIM7_Init+0x64>)
 80015aa:	f004 fd51 	bl	8006050 <HAL_TIMEx_MasterConfigSynchronization>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80015b4:	f001 f9f8 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	2000031c 	.word	0x2000031c
 80015c4:	40001400 	.word	0x40001400

080015c8 <MX_TIM8_Init>:

void MX_TIM8_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08c      	sub	sp, #48	@ 0x30
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	2224      	movs	r2, #36	@ 0x24
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f008 f969 	bl	80098ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015dc:	463b      	mov	r3, r7
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015e6:	4b23      	ldr	r3, [pc, #140]	@ (8001674 <MX_TIM8_Init+0xac>)
 80015e8:	4a23      	ldr	r2, [pc, #140]	@ (8001678 <MX_TIM8_Init+0xb0>)
 80015ea:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015ec:	4b21      	ldr	r3, [pc, #132]	@ (8001674 <MX_TIM8_Init+0xac>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f2:	4b20      	ldr	r3, [pc, #128]	@ (8001674 <MX_TIM8_Init+0xac>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80015f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001674 <MX_TIM8_Init+0xac>)
 80015fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015fe:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001600:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <MX_TIM8_Init+0xac>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001606:	4b1b      	ldr	r3, [pc, #108]	@ (8001674 <MX_TIM8_Init+0xac>)
 8001608:	2200      	movs	r2, #0
 800160a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160c:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <MX_TIM8_Init+0xac>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001612:	2303      	movs	r3, #3
 8001614:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800161a:	2301      	movs	r3, #1
 800161c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800162a:	2301      	movs	r3, #1
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800162e:	2300      	movs	r3, #0
 8001630:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	4619      	mov	r1, r3
 800163c:	480d      	ldr	r0, [pc, #52]	@ (8001674 <MX_TIM8_Init+0xac>)
 800163e:	f003 fb91 	bl	8004d64 <HAL_TIM_Encoder_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001648:	f001 f9ae 	bl	80029a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001658:	463b      	mov	r3, r7
 800165a:	4619      	mov	r1, r3
 800165c:	4805      	ldr	r0, [pc, #20]	@ (8001674 <MX_TIM8_Init+0xac>)
 800165e:	f004 fcf7 	bl	8006050 <HAL_TIMEx_MasterConfigSynchronization>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001668:	f001 f99e 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	3730      	adds	r7, #48	@ 0x30
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000368 	.word	0x20000368
 8001678:	40013400 	.word	0x40013400

0800167c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001680:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 8001682:	4a22      	ldr	r2, [pc, #136]	@ (800170c <MX_LPUART1_UART_Init+0x90>)
 8001684:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001686:	4b20      	ldr	r3, [pc, #128]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 8001688:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800168c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168e:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001694:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800169a:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80016a0:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016a2:	220c      	movs	r2, #12
 80016a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a6:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ac:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b8:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016be:	4812      	ldr	r0, [pc, #72]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016c0:	f004 fe36 	bl	8006330 <HAL_UART_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80016ca:	f001 f96d 	bl	80029a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ce:	2100      	movs	r1, #0
 80016d0:	480d      	ldr	r0, [pc, #52]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016d2:	f006 fe8e 	bl	80083f2 <HAL_UARTEx_SetTxFifoThreshold>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80016dc:	f001 f964 	bl	80029a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4809      	ldr	r0, [pc, #36]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016e4:	f006 fec3 	bl	800846e <HAL_UARTEx_SetRxFifoThreshold>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80016ee:	f001 f95b 	bl	80029a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016f4:	f006 fe44 	bl	8008380 <HAL_UARTEx_DisableFifoMode>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80016fe:	f001 f953 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000448 	.word	0x20000448
 800170c:	40008000 	.word	0x40008000

08001710 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001714:	4b22      	ldr	r3, [pc, #136]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 8001716:	4a23      	ldr	r2, [pc, #140]	@ (80017a4 <MX_USART1_UART_Init+0x94>)
 8001718:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800171a:	4b21      	ldr	r3, [pc, #132]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800171c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001720:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b1f      	ldr	r3, [pc, #124]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b1d      	ldr	r3, [pc, #116]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800172e:	4b1c      	ldr	r3, [pc, #112]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b17      	ldr	r3, [pc, #92]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001746:	4b16      	ldr	r3, [pc, #88]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800174c:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001752:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001758:	4811      	ldr	r0, [pc, #68]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800175a:	f004 fde9 	bl	8006330 <HAL_UART_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001764:	f001 f920 	bl	80029a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001768:	2100      	movs	r1, #0
 800176a:	480d      	ldr	r0, [pc, #52]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800176c:	f006 fe41 	bl	80083f2 <HAL_UARTEx_SetTxFifoThreshold>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001776:	f001 f917 	bl	80029a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800177a:	2100      	movs	r1, #0
 800177c:	4808      	ldr	r0, [pc, #32]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800177e:	f006 fe76 	bl	800846e <HAL_UARTEx_SetRxFifoThreshold>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001788:	f001 f90e 	bl	80029a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800178c:	4804      	ldr	r0, [pc, #16]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800178e:	f006 fdf7 	bl	8008380 <HAL_UARTEx_DisableFifoMode>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001798:	f001 f906 	bl	80029a8 <Error_Handler>
  }

}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	200003b4 	.word	0x200003b4
 80017a4:	40013800 	.word	0x40013800

080017a8 <L298N_init>:
				TIM_HandleTypeDef* pwm_timer_,
				GPIO_TypeDef* GPIOx_1_,
				uint16_t GPIO_Pin_1_,
				GPIO_TypeDef* GPIOx_2_,
				uint16_t GPIO_Pin_2_)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	603b      	str	r3, [r7, #0]
	L298N_driver->PWM_count = 0;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	721a      	strb	r2, [r3, #8]
	L298N_driver->pwm_timer = pwm_timer_;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	605a      	str	r2, [r3, #4]
	L298N_driver->pwm_channel=pwm_channel_;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	601a      	str	r2, [r3, #0]
	L298N_driver->GPIOx_1 =GPIOx_1_;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	60da      	str	r2, [r3, #12]
	L298N_driver->GPIO_Pin_1 = GPIO_Pin_1_;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8b3a      	ldrh	r2, [r7, #24]
 80017d2:	821a      	strh	r2, [r3, #16]
	L298N_driver->GPIOx_2 = GPIOx_2_;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	615a      	str	r2, [r3, #20]
	L298N_driver->GPIO_Pin_2 = GPIO_Pin_2_;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8c3a      	ldrh	r2, [r7, #32]
 80017de:	831a      	strh	r2, [r3, #24]

}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <L298N_set_pwm_count>:

void L298N_set_pwm_count(L298N_driver* L298_driver, uint8_t new_pwm_count){
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]

	L298_driver->PWM_count = new_pwm_count;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	78fa      	ldrb	r2, [r7, #3]
 80017fc:	721a      	strb	r2, [r3, #8]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <L298N_update_pwm>:

void L298N_update_pwm(L298N_driver* L298_driver)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d106      	bne.n	8001828 <L298N_update_pwm+0x1e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	7a1a      	ldrb	r2, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001826:	e036      	b.n	8001896 <L298N_update_pwm+0x8c>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b04      	cmp	r3, #4
 800182e:	d107      	bne.n	8001840 <L298N_update_pwm+0x36>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7a19      	ldrb	r1, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	460b      	mov	r3, r1
 800183c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800183e:	e02a      	b.n	8001896 <L298N_update_pwm+0x8c>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b08      	cmp	r3, #8
 8001846:	d107      	bne.n	8001858 <L298N_update_pwm+0x4e>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	7a19      	ldrb	r1, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	460b      	mov	r3, r1
 8001854:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001856:	e01e      	b.n	8001896 <L298N_update_pwm+0x8c>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b0c      	cmp	r3, #12
 800185e:	d107      	bne.n	8001870 <L298N_update_pwm+0x66>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	7a19      	ldrb	r1, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	460b      	mov	r3, r1
 800186c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800186e:	e012      	b.n	8001896 <L298N_update_pwm+0x8c>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b10      	cmp	r3, #16
 8001876:	d107      	bne.n	8001888 <L298N_update_pwm+0x7e>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	7a19      	ldrb	r1, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	460b      	mov	r3, r1
 8001884:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001886:	e006      	b.n	8001896 <L298N_update_pwm+0x8c>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7a19      	ldrb	r1, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	460b      	mov	r3, r1
 8001894:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <L298N_set_input_configuration>:


void L298N_set_input_configuration(L298N_driver* L298_driver, EL298N_MODE l298n_mode)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	460b      	mov	r3, r1
 80018ac:	70fb      	strb	r3, [r7, #3]

	if(l298n_mode == L298N_MODE_BACKWARD)
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d110      	bne.n	80018d6 <L298N_set_input_configuration+0x34>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_SET);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68d8      	ldr	r0, [r3, #12]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	8a1b      	ldrh	r3, [r3, #16]
 80018bc:	2201      	movs	r2, #1
 80018be:	4619      	mov	r1, r3
 80018c0:	f001 ff92 	bl	80037e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6958      	ldr	r0, [r3, #20]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	8b1b      	ldrh	r3, [r3, #24]
 80018cc:	2200      	movs	r2, #0
 80018ce:	4619      	mov	r1, r3
 80018d0:	f001 ff8a 	bl	80037e8 <HAL_GPIO_WritePin>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
	}

}
 80018d4:	e026      	b.n	8001924 <L298N_set_input_configuration+0x82>
	}else if(l298n_mode == L298N_MODE_FORWARD)
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d110      	bne.n	80018fe <L298N_set_input_configuration+0x5c>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68d8      	ldr	r0, [r3, #12]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	8a1b      	ldrh	r3, [r3, #16]
 80018e4:	2200      	movs	r2, #0
 80018e6:	4619      	mov	r1, r3
 80018e8:	f001 ff7e 	bl	80037e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_SET);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6958      	ldr	r0, [r3, #20]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	8b1b      	ldrh	r3, [r3, #24]
 80018f4:	2201      	movs	r2, #1
 80018f6:	4619      	mov	r1, r3
 80018f8:	f001 ff76 	bl	80037e8 <HAL_GPIO_WritePin>
}
 80018fc:	e012      	b.n	8001924 <L298N_set_input_configuration+0x82>
	else if(l298n_mode == L298N_MODE_STOP)
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10f      	bne.n	8001924 <L298N_set_input_configuration+0x82>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68d8      	ldr	r0, [r3, #12]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	8a1b      	ldrh	r3, [r3, #16]
 800190c:	2200      	movs	r2, #0
 800190e:	4619      	mov	r1, r3
 8001910:	f001 ff6a 	bl	80037e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6958      	ldr	r0, [r3, #20]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	8b1b      	ldrh	r3, [r3, #24]
 800191c:	2200      	movs	r2, #0
 800191e:	4619      	mov	r1, r3
 8001920:	f001 ff62 	bl	80037e8 <HAL_GPIO_WritePin>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <init_driving_system>:

static void add_states_payload_to_state_msg(MotorState* motor_state, uint8_t* offset, uint8_t* state_msg);


void init_driving_system(DrivingSystem* driving_system, MotorStruct* lb_motor, MotorStruct* lf_motor, MotorStruct* rb_motor, MotorStruct* rf_motor)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	603b      	str	r3, [r7, #0]

	driving_system->left_motors_lst[0] = lb_motor;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	601a      	str	r2, [r3, #0]
	driving_system->left_motors_lst[1] = lf_motor;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	605a      	str	r2, [r3, #4]
	driving_system->right_motors_lst[0] = rb_motor;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	609a      	str	r2, [r3, #8]
	driving_system->right_motors_lst[1] = rf_motor;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	60da      	str	r2, [r3, #12]
	driving_system->velo_ctrl_flag = 1;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2201      	movs	r2, #1
 8001956:	741a      	strb	r2, [r3, #16]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <default_init_driving_system_if>:

void default_init_driving_system_if(DrivingSystemIface* drv_system_if){
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

	drv_system_if->exe_cmd = execute_cmd;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a05      	ldr	r2, [pc, #20]	@ (8001984 <default_init_driving_system_if+0x20>)
 8001970:	601a      	str	r2, [r3, #0]
	drv_system_if->send_state = send_state;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a04      	ldr	r2, [pc, #16]	@ (8001988 <default_init_driving_system_if+0x24>)
 8001976:	605a      	str	r2, [r3, #4]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	08001a51 	.word	0x08001a51
 8001988:	08001cc1 	.word	0x08001cc1

0800198c <driving_system_drive>:

// TODO DELETE VELO
void driving_system_drive(DrivingSystem* driving_system){
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]


	// TODO change to NO_OF_SIDE_MOTORS WHEN APPEARS
//	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i){
	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i){
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e051      	b.n	8001a3e <driving_system_drive+0xb2>

    	update_motor_position(driving_system->left_motors_lst[i]->motor_state, driving_system->left_motors_lst[i]->encoder_info);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	4619      	mov	r1, r3
 80019b0:	f000 fab1 	bl	8001f16 <update_motor_position>
    	update_motor_position(driving_system->right_motors_lst[i]->motor_state, driving_system->right_motors_lst[i]->encoder_info);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	3202      	adds	r2, #2
 80019ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	3202      	adds	r2, #2
 80019c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	4619      	mov	r1, r3
 80019ce:	f000 faa2 	bl	8001f16 <update_motor_position>

    	update_measured_velocity(driving_system->left_motors_lst[i]);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fb19 	bl	8002012 <update_measured_velocity>
    	update_measured_velocity(driving_system->right_motors_lst[i]);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	3202      	adds	r2, #2
 80019e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 fb11 	bl	8002012 <update_measured_velocity>

		if(driving_system->velo_ctrl_flag){
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7c1b      	ldrb	r3, [r3, #16]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00e      	beq.n	8001a16 <driving_system_drive+0x8a>
			regulate_velocity(driving_system->left_motors_lst[i]);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fa5f 	bl	8001ec4 <regulate_velocity>
			regulate_velocity(driving_system->right_motors_lst[i]);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	3202      	adds	r2, #2
 8001a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fa57 	bl	8001ec4 <regulate_velocity>
		}

		L298N_update_pwm(driving_system->left_motors_lst[i]->L298N_driver);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fef2 	bl	800180a <L298N_update_pwm>
		L298N_update_pwm(driving_system->right_motors_lst[i]->L298N_driver);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	3202      	adds	r2, #2
 8001a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fee9 	bl	800180a <L298N_update_pwm>
	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i){
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	ddaa      	ble.n	800199a <driving_system_drive+0xe>


	}


}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <execute_cmd>:


int execute_cmd(DrivingSystem* driving_system, uint8_t* cmd){
 8001a50:	b5b0      	push	{r4, r5, r7, lr}
 8001a52:	b092      	sub	sp, #72	@ 0x48
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]

	uint8_t cmd_id = 0x00;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t cmd_code[] = {0x00};
 8001a60:	2300      	movs	r3, #0
 8001a62:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	uint8_t payload[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001a66:	4a43      	ldr	r2, [pc, #268]	@ (8001b74 <execute_cmd+0x124>)
 8001a68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a70:	6018      	str	r0, [r3, #0]
 8001a72:	3304      	adds	r3, #4
 8001a74:	8019      	strh	r1, [r3, #0]

	parse_msg_cmd_id(cmd, &cmd_id);
 8001a76:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	6838      	ldr	r0, [r7, #0]
 8001a7e:	f000 fd26 	bl	80024ce <parse_msg_cmd_id>
	if(cmd_id != MSG_CMD_REQUEST){
 8001a82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d001      	beq.n	8001a8e <execute_cmd+0x3e>
		return 1;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e06e      	b.n	8001b6c <execute_cmd+0x11c>
	}

    parse_cmd_code(cmd, cmd_code);
 8001a8e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a92:	4619      	mov	r1, r3
 8001a94:	6838      	ldr	r0, [r7, #0]
 8001a96:	f000 fd29 	bl	80024ec <parse_cmd_code>
    if (parse_payload(cmd, payload)) {
 8001a9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6838      	ldr	r0, [r7, #0]
 8001aa2:	f000 fd33 	bl	800250c <parse_payload>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <execute_cmd+0x60>
        return 1;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e05d      	b.n	8001b6c <execute_cmd+0x11c>
    }


	if(cmd_code[CMD_CODE_ID_POS] == CMD_ID_STATE_REQ)
 8001ab0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d103      	bne.n	8001ac0 <execute_cmd+0x70>
	{
		send_state(driving_system);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f901 	bl	8001cc0 <send_state>
 8001abe:	e054      	b.n	8001b6a <execute_cmd+0x11a>

	}else if(cmd_code[CMD_CODE_ID_POS] == CMD_ID_CTRL_VELO_REQ)
 8001ac0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d12b      	bne.n	8001b20 <execute_cmd+0xd0>
	{
		int whole_number = payload[1];
 8001ac8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001acc:	643b      	str	r3, [r7, #64]	@ 0x40
		float fractional_part =  payload[2] /100.0;
 8001ace:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fd4e 	bl	8000574 <__aeabi_i2d>
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	4b26      	ldr	r3, [pc, #152]	@ (8001b78 <execute_cmd+0x128>)
 8001ade:	f7fe fedd 	bl	800089c <__aeabi_ddiv>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f7ff f8a5 	bl	8000c38 <__aeabi_d2f>
 8001aee:	4603      	mov	r3, r0
 8001af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		float vel = fractional_part + whole_number;
 8001af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afc:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b04:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		drive_velo_dir(driving_system, payload[PAYLOAD_DV_MODE_POS], vel);
 8001b08:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b0c:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 8001b10:	4619      	mov	r1, r3
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 fb8a 	bl	800222c <drive_velo_dir>
		driving_system->velo_ctrl_flag = 1;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	741a      	strb	r2, [r3, #16]
 8001b1e:	e024      	b.n	8001b6a <execute_cmd+0x11a>


	}else if(cmd_code[CMD_CODE_ID_POS] == CMD_ID_PWM_DRIVING_REQ){
 8001b20:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d10f      	bne.n	8001b48 <execute_cmd+0xf8>

	    uint8_t pwm = payload[1];
 8001b28:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001b2c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		drive_pwm_dir(driving_system, payload[PAYLOAD_DV_MODE_POS], pwm);
 8001b30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b34:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8001b38:	4619      	mov	r1, r3
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 fbb8 	bl	80022b0 <drive_pwm_dir>
		driving_system->velo_ctrl_flag = 0;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	741a      	strb	r2, [r3, #16]
 8001b46:	e010      	b.n	8001b6a <execute_cmd+0x11a>
	}
	else{
		char msg[] = "Undefined First Cmd Literall";
 8001b48:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <execute_cmd+0x12c>)
 8001b4a:	f107 040c 	add.w	r4, r7, #12
 8001b4e:	461d      	mov	r5, r3
 8001b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b58:	c407      	stmia	r4!, {r0, r1, r2}
 8001b5a:	7023      	strb	r3, [r4, #0]
		send_drv_err(msg);
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 f80d 	bl	8001b80 <send_drv_err>
		return 1;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <execute_cmd+0x11c>
	}
	return 0;
 8001b6a:	2300      	movs	r3, #0

}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3748      	adds	r7, #72	@ 0x48
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bdb0      	pop	{r4, r5, r7, pc}
 8001b74:	0800d098 	.word	0x0800d098
 8001b78:	40590000 	.word	0x40590000
 8001b7c:	0800d0a0 	.word	0x0800d0a0

08001b80 <send_drv_err>:



void send_drv_err(char* msg){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b09c      	sub	sp, #112	@ 0x70
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

	char err_buffer[100];
	memset(err_buffer, '\0', sizeof(err_buffer));
 8001b88:	f107 030c 	add.w	r3, r7, #12
 8001b8c:	2264      	movs	r2, #100	@ 0x64
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f007 fe8c 	bl	80098ae <memset>
	strcat(err_buffer, DRIVING_ERR);
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fb90 	bl	80002c0 <strlen>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	4413      	add	r3, r2
 8001baa:	4917      	ldr	r1, [pc, #92]	@ (8001c08 <send_drv_err+0x88>)
 8001bac:	461a      	mov	r2, r3
 8001bae:	460b      	mov	r3, r1
 8001bb0:	cb03      	ldmia	r3!, {r0, r1}
 8001bb2:	6010      	str	r0, [r2, #0]
 8001bb4:	6051      	str	r1, [r2, #4]
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	7213      	strb	r3, [r2, #8]
	strcat(err_buffer, msg);
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f007 fe7c 	bl	80098be <strcat>
	strcat(err_buffer, "\n\r");
 8001bc6:	f107 030c 	add.w	r3, r7, #12
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fb78 	bl	80002c0 <strlen>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a0c      	ldr	r2, [pc, #48]	@ (8001c0c <send_drv_err+0x8c>)
 8001bdc:	8811      	ldrh	r1, [r2, #0]
 8001bde:	7892      	ldrb	r2, [r2, #2]
 8001be0:	8019      	strh	r1, [r3, #0]
 8001be2:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&hlpuart1,(uint8_t*) err_buffer, strlen(err_buffer), STATE_SENDING_TIMEOUT);
 8001be4:	f107 030c 	add.w	r3, r7, #12
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fb69 	bl	80002c0 <strlen>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	f107 010c 	add.w	r1, r7, #12
 8001bf6:	230a      	movs	r3, #10
 8001bf8:	4805      	ldr	r0, [pc, #20]	@ (8001c10 <send_drv_err+0x90>)
 8001bfa:	f004 fbe9 	bl	80063d0 <HAL_UART_Transmit>

}
 8001bfe:	bf00      	nop
 8001c00:	3770      	adds	r7, #112	@ 0x70
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	0800d0c0 	.word	0x0800d0c0
 8001c0c:	0800d0cc 	.word	0x0800d0cc
 8001c10:	20000448 	.word	0x20000448

08001c14 <add_states_payload_to_state_msg>:


static void add_states_payload_to_state_msg(MotorState* motor_state, uint8_t* offset, uint8_t* state_msg){
 8001c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c18:	b089      	sub	sp, #36	@ 0x24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	466b      	mov	r3, sp
 8001c24:	461e      	mov	r6, r3

	uint8_t payload_length = 6;
 8001c26:	2306      	movs	r3, #6
 8001c28:	76fb      	strb	r3, [r7, #27]
	uint8_t state_payload[payload_length];
 8001c2a:	7ef9      	ldrb	r1, [r7, #27]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	b2cb      	uxtb	r3, r1
 8001c34:	2200      	movs	r2, #0
 8001c36:	4698      	mov	r8, r3
 8001c38:	4691      	mov	r9, r2
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c4e:	b2cb      	uxtb	r3, r1
 8001c50:	2200      	movs	r2, #0
 8001c52:	461c      	mov	r4, r3
 8001c54:	4615      	mov	r5, r2
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	00eb      	lsls	r3, r5, #3
 8001c60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c64:	00e2      	lsls	r2, r4, #3
 8001c66:	460b      	mov	r3, r1
 8001c68:	3307      	adds	r3, #7
 8001c6a:	08db      	lsrs	r3, r3, #3
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	ebad 0d03 	sub.w	sp, sp, r3
 8001c72:	466b      	mov	r3, sp
 8001c74:	3300      	adds	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
	bytes_motor_state(motor_state, state_payload);
 8001c78:	6939      	ldr	r1, [r7, #16]
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 f8cd 	bl	8001e1a <bytes_motor_state>

	for (int i = 0; i < payload_length; i++){
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	e012      	b.n	8001cac <add_states_payload_to_state_msg+0x98>
		state_msg[*offset] = state_payload[i];
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4413      	add	r3, r2
 8001c90:	6939      	ldr	r1, [r7, #16]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	440a      	add	r2, r1
 8001c96:	7812      	ldrb	r2, [r2, #0]
 8001c98:	701a      	strb	r2, [r3, #0]
		*offset += 1;
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < payload_length; i++){
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	7efb      	ldrb	r3, [r7, #27]
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dbe8      	blt.n	8001c86 <add_states_payload_to_state_msg+0x72>
 8001cb4:	46b5      	mov	sp, r6
	}

}
 8001cb6:	bf00      	nop
 8001cb8:	3724      	adds	r7, #36	@ 0x24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001cc0 <send_state>:


}


void send_state(DrivingSystem* driving_system){
 8001cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cc4:	b088      	sub	sp, #32
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	466b      	mov	r3, sp
 8001ccc:	469a      	mov	sl, r3

	uint8_t state_msg_length = 26;
 8001cce:	231a      	movs	r3, #26
 8001cd0:	76fb      	strb	r3, [r7, #27]
	uint8_t state_msg[state_msg_length];
 8001cd2:	7efe      	ldrb	r6, [r7, #27]
 8001cd4:	4633      	mov	r3, r6
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	b2f3      	uxtb	r3, r6
 8001cdc:	2200      	movs	r2, #0
 8001cde:	4698      	mov	r8, r3
 8001ce0:	4691      	mov	r9, r2
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cf6:	b2f3      	uxtb	r3, r6
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	461c      	mov	r4, r3
 8001cfc:	4615      	mov	r5, r2
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	00eb      	lsls	r3, r5, #3
 8001d08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d0c:	00e2      	lsls	r2, r4, #3
 8001d0e:	4633      	mov	r3, r6
 8001d10:	3307      	adds	r3, #7
 8001d12:	08db      	lsrs	r3, r3, #3
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	ebad 0d03 	sub.w	sp, sp, r3
 8001d1a:	466b      	mov	r3, sp
 8001d1c:	3300      	adds	r3, #0
 8001d1e:	613b      	str	r3, [r7, #16]
	state_msg[0] = MSG_STATE;
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	2203      	movs	r2, #3
 8001d24:	701a      	strb	r2, [r3, #0]
	uint8_t offset = 1;
 8001d26:	2301      	movs	r3, #1
 8001d28:	73fb      	strb	r3, [r7, #15]


	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i){
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	e019      	b.n	8001d64 <send_state+0xa4>

		add_states_payload_to_state_msg(driving_system->left_motors_lst[i]->motor_state, &offset, state_msg);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f107 010f 	add.w	r1, r7, #15
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff67 	bl	8001c14 <add_states_payload_to_state_msg>
		add_states_payload_to_state_msg(driving_system->right_motors_lst[i]->motor_state, &offset, state_msg);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	3202      	adds	r2, #2
 8001d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f107 010f 	add.w	r1, r7, #15
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff5b 	bl	8001c14 <add_states_payload_to_state_msg>
	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i){
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3301      	adds	r3, #1
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	dde2      	ble.n	8001d30 <send_state+0x70>
	}
	state_msg[state_msg_length-1] = MSG_END_CHAR;
 8001d6a:	7efb      	ldrb	r3, [r7, #27]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	21fe      	movs	r1, #254	@ 0xfe
 8001d72:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit(&hlpuart1,(uint8_t*) state_msg, sizeof(state_msg)/sizeof(state_msg[0]),STATE_SENDING_TIMEOUT);
 8001d74:	4632      	mov	r2, r6
 8001d76:	230a      	movs	r3, #10
 8001d78:	6939      	ldr	r1, [r7, #16]
 8001d7a:	4804      	ldr	r0, [pc, #16]	@ (8001d8c <send_state+0xcc>)
 8001d7c:	f004 fb28 	bl	80063d0 <HAL_UART_Transmit>
 8001d80:	46d5      	mov	sp, sl

}
 8001d82:	bf00      	nop
 8001d84:	3720      	adds	r7, #32
 8001d86:	46bd      	mov	sp, r7
 8001d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d8c:	20000448 	.word	0x20000448

08001d90 <init_encoder_info>:
 */

#include "encoder_driver.h"

void init_encoder_info(EncoderInfo* encoder_info, TIM_HandleTypeDef* encoder_timer_)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
	encoder_info->encoder_timer=encoder_timer_;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	601a      	str	r2, [r3, #0]

}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <update_encoder_info>:

void update_encoder_info(EncoderInfo* encoder_info)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

	encoder_info->last_counter_value = encoder_info->counter_value;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	889a      	ldrh	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	80da      	strh	r2, [r3, #6]
	encoder_info->counter_value = __HAL_TIM_GET_COUNTER(encoder_info->encoder_timer);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	809a      	strh	r2, [r3, #4]

}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <init_motor>:
		MotorState *motor_state_,
		TIM_HandleTypeDef *updater_tim_,
		EncoderInfo *enc_inf_param_,
		PIDController *pid_controller_,
		L298N_driver *L298N_)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	603b      	str	r3, [r7, #0]
	motor_struct->motor_state = motor_state_;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	601a      	str	r2, [r3, #0]
	motor_struct->motor_updater_tim = updater_tim_;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	60da      	str	r2, [r3, #12]
	motor_struct->updater_timer_periods = CountPeriodS(updater_tim_);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 fc07 	bl	8002604 <CountPeriodS>
 8001df6:	eef0 7a40 	vmov.f32	s15, s0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	edc3 7a04 	vstr	s15, [r3, #16]
	motor_struct->encoder_info = enc_inf_param_;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	609a      	str	r2, [r3, #8]
	motor_struct->L298N_driver = L298N_;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	69fa      	ldr	r2, [r7, #28]
 8001e0a:	615a      	str	r2, [r3, #20]
	motor_struct->pid_controller = pid_controller_;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	605a      	str	r2, [r3, #4]

}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <bytes_motor_state>:
void str_motor_state(MotorState* motor_state, char* state_buffer){

	sprintf(state_buffer, "%d,%.2f,%.2f\n\r", motor_state->motor_id, motor_state->set_velocity, motor_state->measured_velocity);
}

void bytes_motor_state(MotorState* motor_state, uint8_t* state_payload){
 8001e1a:	b480      	push	{r7}
 8001e1c:	b087      	sub	sp, #28
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]

	state_payload[0] = motor_state->motor_id;
 8001e24:	68f9      	ldr	r1, [r7, #12]
 8001e26:	7c08      	ldrb	r0, [r1, #16]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	7008      	strb	r0, [r1, #0]
	state_payload[1]=  (uint8_t)motor_state->measured_velocity;
 8001e2c:	68f9      	ldr	r1, [r7, #12]
 8001e2e:	edd1 7a00 	vldr	s15, [r1]
 8001e32:	68b9      	ldr	r1, [r7, #8]
 8001e34:	3101      	adds	r1, #1
 8001e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e3a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001e3e:	7938      	ldrb	r0, [r7, #4]
 8001e40:	b2c0      	uxtb	r0, r0
 8001e42:	7008      	strb	r0, [r1, #0]
	uint64_t position_uint = (int32_t)motor_state->position;
 8001e44:	68f9      	ldr	r1, [r7, #12]
 8001e46:	edd1 7a02 	vldr	s15, [r1, #8]
 8001e4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e4e:	ee17 0a90 	vmov	r0, s15
 8001e52:	17c1      	asrs	r1, r0, #31
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	e9c7 2304 	strd	r2, r3, [r7, #16]

	state_payload[2] = (position_uint >> 24) & (0xFF);
 8001e5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	0e02      	lsrs	r2, r0, #24
 8001e6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e6e:	0e0b      	lsrs	r3, r1, #24
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	3102      	adds	r1, #2
 8001e74:	b2d3      	uxtb	r3, r2
 8001e76:	700b      	strb	r3, [r1, #0]
	state_payload[3] = (position_uint >> 16) & (0xFF);
 8001e78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	0c02      	lsrs	r2, r0, #16
 8001e86:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001e8a:	0c0b      	lsrs	r3, r1, #16
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	3103      	adds	r1, #3
 8001e90:	b2d3      	uxtb	r3, r2
 8001e92:	700b      	strb	r3, [r1, #0]
	state_payload[4] = (position_uint >> 8) & (0xFF);
 8001e94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	0a02      	lsrs	r2, r0, #8
 8001ea2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001ea6:	0a0b      	lsrs	r3, r1, #8
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	3104      	adds	r1, #4
 8001eac:	b2d3      	uxtb	r3, r2
 8001eae:	700b      	strb	r3, [r1, #0]
	state_payload[5] = (position_uint >> 0) & (0xFF);
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	3305      	adds	r3, #5
 8001eb4:	7c3a      	ldrb	r2, [r7, #16]
 8001eb6:	701a      	strb	r2, [r3, #0]



}
 8001eb8:	bf00      	nop
 8001eba:	371c      	adds	r7, #28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <regulate_velocity>:


void regulate_velocity(MotorStruct *motor_struct)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

	MotorState* current_motor_state = motor_struct->motor_state;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]
	uint16_t pwm_value = pid_calculate(	motor_struct->pid_controller,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	ed93 7a00 	vldr	s14, [r3]
 8001ee2:	eef0 0a47 	vmov.f32	s1, s14
 8001ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eea:	4610      	mov	r0, r2
 8001eec:	f000 f8e6 	bl	80020bc <pid_calculate>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	817b      	strh	r3, [r7, #10]
										current_motor_state->set_velocity,
										current_motor_state->measured_velocity);
	uint8_t saturated_pwm_value = saturate_pwm(pwm_value);
 8001ef4:	897b      	ldrh	r3, [r7, #10]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fad2 	bl	80024a0 <saturate_pwm>
 8001efc:	4603      	mov	r3, r0
 8001efe:	727b      	strb	r3, [r7, #9]
	L298N_set_pwm_count(motor_struct->L298N_driver, saturated_pwm_value);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	7a7a      	ldrb	r2, [r7, #9]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fc6f 	bl	80017ec <L298N_set_pwm_count>

}
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <update_motor_position>:



void update_motor_position(MotorState* motor_state, EncoderInfo* encoder_info)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]

	motor_state->last_position = motor_state->position;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	60da      	str	r2, [r3, #12]
	update_encoder_info(encoder_info);
 8001f28:	6838      	ldr	r0, [r7, #0]
 8001f2a:	f7ff ff3f 	bl	8001dac <update_encoder_info>
	int16_t encoder_diff = encoder_info->counter_value - encoder_info->last_counter_value;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	889a      	ldrh	r2, [r3, #4]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	88db      	ldrh	r3, [r3, #6]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	82bb      	strh	r3, [r7, #20]
	int16_t position_change = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	82fb      	strh	r3, [r7, #22]
	//encoder increase
	if (encoder_diff > 0){
 8001f40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	dd1f      	ble.n	8001f88 <update_motor_position+0x72>

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	2b10      	cmp	r3, #16
 8001f56:	d114      	bne.n	8001f82 <update_motor_position+0x6c>

			uint16_t postreload_count = abs(encoder_info->counter_value - __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	889b      	ldrh	r3, [r3, #4]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bfb8      	it	lt
 8001f6c:	425b      	neglt	r3, r3
 8001f6e:	81fb      	strh	r3, [r7, #14]
			position_change = -(encoder_info->last_counter_value + postreload_count); //- because its decreasing
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	88da      	ldrh	r2, [r3, #6]
 8001f74:	89fb      	ldrh	r3, [r7, #14]
 8001f76:	4413      	add	r3, r2
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	425b      	negs	r3, r3
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	82fb      	strh	r3, [r7, #22]
 8001f80:	e023      	b.n	8001fca <update_motor_position+0xb4>

		}else{
			position_change = encoder_diff;
 8001f82:	8abb      	ldrh	r3, [r7, #20]
 8001f84:	82fb      	strh	r3, [r7, #22]
 8001f86:	e020      	b.n	8001fca <update_motor_position+0xb4>
		}
	}else if(encoder_diff < 0) //encoder decrease
 8001f88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	da1c      	bge.n	8001fca <update_motor_position+0xb4>
	{
		if (!__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b10      	cmp	r3, #16
 8001f9e:	d012      	beq.n	8001fc6 <update_motor_position+0xb0>

			int16_t postreload_count = encoder_info->counter_value;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	889b      	ldrh	r3, [r3, #4]
 8001fa4:	827b      	strh	r3, [r7, #18]
			int16_t prereload_count = __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer) - encoder_info->last_counter_value;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	88db      	ldrh	r3, [r3, #6]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	823b      	strh	r3, [r7, #16]
			position_change = postreload_count + prereload_count;
 8001fba:	8a7a      	ldrh	r2, [r7, #18]
 8001fbc:	8a3b      	ldrh	r3, [r7, #16]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	82fb      	strh	r3, [r7, #22]
 8001fc4:	e001      	b.n	8001fca <update_motor_position+0xb4>

		}else{
			position_change = encoder_diff;
 8001fc6:	8abb      	ldrh	r3, [r7, #20]
 8001fc8:	82fb      	strh	r3, [r7, #22]
		}
	}

	float position_change_rad = convert_to_radians(position_change);
 8001fca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fa32 	bl	8002438 <convert_to_radians>
 8001fd4:	ed87 0a02 	vstr	s0, [r7, #8]
	motor_state->position = motor_state->last_position - position_change_rad;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	ed93 7a03 	vldr	s14, [r3, #12]
 8001fde:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fe2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8001fec:	bf00      	nop
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <motor_state_set_velocity>:

void motor_state_set_velocity(MotorState *motor_state, float velocity)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	ed87 0a00 	vstr	s0, [r7]
	motor_state->set_velocity = velocity;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	605a      	str	r2, [r3, #4]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <update_measured_velocity>:

void update_measured_velocity(MotorStruct* motor_struct)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b084      	sub	sp, #16
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
	MotorState *curr_motor_state = motor_struct->motor_state;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	60fb      	str	r3, [r7, #12]
	float rotary_displacement_ = rotary_displacement(curr_motor_state);
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 f810 	bl	8002046 <rotary_displacement>
 8002026:	ed87 0a02 	vstr	s0, [r7, #8]
	curr_motor_state->measured_velocity = (float)rotary_displacement_ / motor_struct->updater_timer_periods;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002030:	edd7 6a02 	vldr	s13, [r7, #8]
 8002034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	edc3 7a00 	vstr	s15, [r3]

}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <rotary_displacement>:

float rotary_displacement(MotorState *motor_state){
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]

	// physically displacement shouldn't be negative value, but this mean it has different direction
	// which will be pointed by position value
	return fabs(motor_state->position - motor_state->last_position);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	ed93 7a02 	vldr	s14, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	edd3 7a03 	vldr	s15, [r3, #12]
 800205a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800205e:	eef0 7ae7 	vabs.f32	s15, s15
}
 8002062:	eeb0 0a67 	vmov.f32	s0, s15
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <pid_init>:
#include "pid_controller.h"
#include "motor_features.h"

void pid_init(PIDController *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 8002070:	b480      	push	{r7}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6178      	str	r0, [r7, #20]
 8002078:	ed87 0a04 	vstr	s0, [r7, #16]
 800207c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002080:	ed87 1a02 	vstr	s2, [r7, #8]
 8002084:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	615a      	str	r2, [r3, #20]
}
 80020ae:	bf00      	nop
 80020b0:	371c      	adds	r7, #28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <pid_calculate>:
float d_term;
float pid_output;


uint8_t pid_calculate(PIDController *pid_data, float setpoint, float process_variable)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80020c8:	edc7 0a01 	vstr	s1, [r7, #4]

	error = setpoint - process_variable;
 80020cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80020d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80020d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d8:	4b4f      	ldr	r3, [pc, #316]	@ (8002218 <pid_calculate+0x15c>)
 80020da:	edc3 7a00 	vstr	s15, [r3]
	pid_data->total_error += error;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80020e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002218 <pid_calculate+0x15c>)
 80020e6:	edd3 7a00 	vldr	s15, [r3]
 80020ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	edc3 7a01 	vstr	s15, [r3, #4]

	p_term = (float)(pid_data->Kp * error);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80020fa:	4b47      	ldr	r3, [pc, #284]	@ (8002218 <pid_calculate+0x15c>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002104:	4b45      	ldr	r3, [pc, #276]	@ (800221c <pid_calculate+0x160>)
 8002106:	edc3 7a00 	vstr	s15, [r3]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	edd3 7a01 	vldr	s15, [r3, #4]
 8002116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211a:	4b41      	ldr	r3, [pc, #260]	@ (8002220 <pid_calculate+0x164>)
 800211c:	edc3 7a00 	vstr	s15, [r3]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	ed93 7a04 	vldr	s14, [r3, #16]
 8002126:	4b3c      	ldr	r3, [pc, #240]	@ (8002218 <pid_calculate+0x15c>)
 8002128:	edd3 6a00 	vldr	s13, [r3]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	edd3 7a00 	vldr	s15, [r3]
 8002132:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213a:	4b3a      	ldr	r3, [pc, #232]	@ (8002224 <pid_calculate+0x168>)
 800213c:	edc3 7a00 	vstr	s15, [r3]

	pid_output = p_term + i_term + d_term;
 8002140:	4b36      	ldr	r3, [pc, #216]	@ (800221c <pid_calculate+0x160>)
 8002142:	ed93 7a00 	vldr	s14, [r3]
 8002146:	4b36      	ldr	r3, [pc, #216]	@ (8002220 <pid_calculate+0x164>)
 8002148:	edd3 7a00 	vldr	s15, [r3]
 800214c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002150:	4b34      	ldr	r3, [pc, #208]	@ (8002224 <pid_calculate+0x168>)
 8002152:	edd3 7a00 	vldr	s15, [r3]
 8002156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215a:	4b33      	ldr	r3, [pc, #204]	@ (8002228 <pid_calculate+0x16c>)
 800215c:	edc3 7a00 	vstr	s15, [r3]

    // Anti-windup
    if (pid_output < -pid_data->anti_windup_limit)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	425b      	negs	r3, r3
 8002166:	ee07 3a90 	vmov	s15, r3
 800216a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800216e:	4b2e      	ldr	r3, [pc, #184]	@ (8002228 <pid_calculate+0x16c>)
 8002170:	edd3 7a00 	vldr	s15, [r3]
 8002174:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217c:	dd15      	ble.n	80021aa <pid_calculate+0xee>
    {
        pid_output = -pid_data->anti_windup_limit;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	425b      	negs	r3, r3
 8002184:	ee07 3a90 	vmov	s15, r3
 8002188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800218c:	4b26      	ldr	r3, [pc, #152]	@ (8002228 <pid_calculate+0x16c>)
 800218e:	edc3 7a00 	vstr	s15, [r3]
        pid_data->total_error = pid_data->total_error - error;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	ed93 7a01 	vldr	s14, [r3, #4]
 8002198:	4b1f      	ldr	r3, [pc, #124]	@ (8002218 <pid_calculate+0x15c>)
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	edc3 7a01 	vstr	s15, [r3, #4]
 80021a8:	e021      	b.n	80021ee <pid_calculate+0x132>

    } else if (pid_output > pid_data->anti_windup_limit)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002228 <pid_calculate+0x16c>)
 80021b8:	edd3 7a00 	vldr	s15, [r3]
 80021bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c4:	d513      	bpl.n	80021ee <pid_calculate+0x132>
    {
        pid_output = pid_data->anti_windup_limit;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d2:	4b15      	ldr	r3, [pc, #84]	@ (8002228 <pid_calculate+0x16c>)
 80021d4:	edc3 7a00 	vstr	s15, [r3]
        pid_data->total_error = pid_data->total_error - error;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	ed93 7a01 	vldr	s14, [r3, #4]
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <pid_calculate+0x15c>)
 80021e0:	edd3 7a00 	vldr	s15, [r3]
 80021e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	edc3 7a01 	vstr	s15, [r3, #4]
    }


	pid_data->previous_error = error;
 80021ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <pid_calculate+0x15c>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	601a      	str	r2, [r3, #0]
	uint8_t saturated_pwm_value = saturate_pwm(pid_output);
 80021f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <pid_calculate+0x16c>)
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002200:	ee17 0a90 	vmov	r0, s15
 8002204:	f000 f94c 	bl	80024a0 <saturate_pwm>
 8002208:	4603      	mov	r3, r0
 800220a:	75fb      	strb	r3, [r7, #23]
	return saturated_pwm_value;
 800220c:	7dfb      	ldrb	r3, [r7, #23]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200004dc 	.word	0x200004dc
 800221c:	200004e0 	.word	0x200004e0
 8002220:	200004e4 	.word	0x200004e4
 8002224:	200004e8 	.word	0x200004e8
 8002228:	200004ec 	.word	0x200004ec

0800222c <drive_velo_dir>:

#include "driving_modes.h"



void drive_velo_dir(DrivingSystem* driving_system, EDvDir dv_dir, float velocity){
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	460b      	mov	r3, r1
 8002236:	ed87 0a01 	vstr	s0, [r7, #4]
 800223a:	72fb      	strb	r3, [r7, #11]

	if(dv_dir == DV_DIR_STOP){
 800223c:	7afb      	ldrb	r3, [r7, #11]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d107      	bne.n	8002252 <drive_velo_dir+0x26>
		drive_velo(driving_system, velocity, L298N_MODE_STOP, L298N_MODE_STOP);
 8002242:	2200      	movs	r2, #0
 8002244:	2100      	movs	r1, #0
 8002246:	ed97 0a01 	vldr	s0, [r7, #4]
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 f86d 	bl	800232a <drive_velo>
	}else if(dv_dir == DV_DIR_LEFT){
		drive_velo(driving_system, velocity, L298N_MODE_FORWARD, L298N_MODE_BACKWARD);
	}else if(dv_dir == DV_DIR_RIGHT){
		drive_velo(driving_system, velocity, L298N_MODE_BACKWARD, L298N_MODE_FORWARD);
	}
}
 8002250:	e02a      	b.n	80022a8 <drive_velo_dir+0x7c>
	}else if(dv_dir == DV_DIR_FORWARD){
 8002252:	7afb      	ldrb	r3, [r7, #11]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d107      	bne.n	8002268 <drive_velo_dir+0x3c>
		drive_velo(driving_system, velocity, L298N_MODE_FORWARD, L298N_MODE_FORWARD);
 8002258:	2201      	movs	r2, #1
 800225a:	2101      	movs	r1, #1
 800225c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 f862 	bl	800232a <drive_velo>
}
 8002266:	e01f      	b.n	80022a8 <drive_velo_dir+0x7c>
	}else if(dv_dir == DV_DIR_BACKWARD){
 8002268:	7afb      	ldrb	r3, [r7, #11]
 800226a:	2b03      	cmp	r3, #3
 800226c:	d107      	bne.n	800227e <drive_velo_dir+0x52>
		drive_velo(driving_system, velocity, L298N_MODE_BACKWARD, L298N_MODE_BACKWARD);
 800226e:	2202      	movs	r2, #2
 8002270:	2102      	movs	r1, #2
 8002272:	ed97 0a01 	vldr	s0, [r7, #4]
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f857 	bl	800232a <drive_velo>
}
 800227c:	e014      	b.n	80022a8 <drive_velo_dir+0x7c>
	}else if(dv_dir == DV_DIR_LEFT){
 800227e:	7afb      	ldrb	r3, [r7, #11]
 8002280:	2b04      	cmp	r3, #4
 8002282:	d107      	bne.n	8002294 <drive_velo_dir+0x68>
		drive_velo(driving_system, velocity, L298N_MODE_FORWARD, L298N_MODE_BACKWARD);
 8002284:	2202      	movs	r2, #2
 8002286:	2101      	movs	r1, #1
 8002288:	ed97 0a01 	vldr	s0, [r7, #4]
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 f84c 	bl	800232a <drive_velo>
}
 8002292:	e009      	b.n	80022a8 <drive_velo_dir+0x7c>
	}else if(dv_dir == DV_DIR_RIGHT){
 8002294:	7afb      	ldrb	r3, [r7, #11]
 8002296:	2b05      	cmp	r3, #5
 8002298:	d106      	bne.n	80022a8 <drive_velo_dir+0x7c>
		drive_velo(driving_system, velocity, L298N_MODE_BACKWARD, L298N_MODE_FORWARD);
 800229a:	2201      	movs	r2, #1
 800229c:	2102      	movs	r1, #2
 800229e:	ed97 0a01 	vldr	s0, [r7, #4]
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f841 	bl	800232a <drive_velo>
}
 80022a8:	bf00      	nop
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <drive_pwm_dir>:

void drive_pwm_dir(DrivingSystem* driving_system, EDvDir dv_dir, uint8_t pwm){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	70fb      	strb	r3, [r7, #3]
 80022bc:	4613      	mov	r3, r2
 80022be:	70bb      	strb	r3, [r7, #2]

	if(dv_dir == DV_DIR_STOP){
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d106      	bne.n	80022d4 <drive_pwm_dir+0x24>
		drive_pwm(driving_system, pwm, L298N_MODE_STOP, L298N_MODE_STOP);
 80022c6:	78b9      	ldrb	r1, [r7, #2]
 80022c8:	2300      	movs	r3, #0
 80022ca:	2200      	movs	r2, #0
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f86e 	bl	80023ae <drive_pwm>
	}else if(dv_dir == DV_DIR_LEFT){
		drive_pwm(driving_system, pwm, L298N_MODE_FORWARD, L298N_MODE_BACKWARD);
	}else if(dv_dir == DV_DIR_RIGHT){
		drive_pwm(driving_system, pwm, L298N_MODE_BACKWARD, L298N_MODE_FORWARD);
	}
}
 80022d2:	e026      	b.n	8002322 <drive_pwm_dir+0x72>
	}else if(dv_dir == DV_DIR_FORWARD){
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d106      	bne.n	80022e8 <drive_pwm_dir+0x38>
		drive_pwm(driving_system, pwm, L298N_MODE_FORWARD, L298N_MODE_FORWARD);
 80022da:	78b9      	ldrb	r1, [r7, #2]
 80022dc:	2301      	movs	r3, #1
 80022de:	2201      	movs	r2, #1
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f864 	bl	80023ae <drive_pwm>
}
 80022e6:	e01c      	b.n	8002322 <drive_pwm_dir+0x72>
	}else if(dv_dir == DV_DIR_BACKWARD){
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d106      	bne.n	80022fc <drive_pwm_dir+0x4c>
		drive_pwm(driving_system, pwm, L298N_MODE_BACKWARD, L298N_MODE_BACKWARD);
 80022ee:	78b9      	ldrb	r1, [r7, #2]
 80022f0:	2302      	movs	r3, #2
 80022f2:	2202      	movs	r2, #2
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f85a 	bl	80023ae <drive_pwm>
}
 80022fa:	e012      	b.n	8002322 <drive_pwm_dir+0x72>
	}else if(dv_dir == DV_DIR_LEFT){
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d106      	bne.n	8002310 <drive_pwm_dir+0x60>
		drive_pwm(driving_system, pwm, L298N_MODE_FORWARD, L298N_MODE_BACKWARD);
 8002302:	78b9      	ldrb	r1, [r7, #2]
 8002304:	2302      	movs	r3, #2
 8002306:	2201      	movs	r2, #1
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f850 	bl	80023ae <drive_pwm>
}
 800230e:	e008      	b.n	8002322 <drive_pwm_dir+0x72>
	}else if(dv_dir == DV_DIR_RIGHT){
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	2b05      	cmp	r3, #5
 8002314:	d105      	bne.n	8002322 <drive_pwm_dir+0x72>
		drive_pwm(driving_system, pwm, L298N_MODE_BACKWARD, L298N_MODE_FORWARD);
 8002316:	78b9      	ldrb	r1, [r7, #2]
 8002318:	2301      	movs	r3, #1
 800231a:	2202      	movs	r2, #2
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f846 	bl	80023ae <drive_pwm>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <drive_velo>:



void drive_velo(DrivingSystem* driving_system, float velocity, EL298N_MODE left_dir, EL298N_MODE right_dir)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	ed87 0a02 	vstr	s0, [r7, #8]
 8002336:	460b      	mov	r3, r1
 8002338:	71fb      	strb	r3, [r7, #7]
 800233a:	4613      	mov	r3, r2
 800233c:	71bb      	strb	r3, [r7, #6]

	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i)
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	e02c      	b.n	800239e <drive_velo+0x74>
	{
		L298N_set_input_configuration(driving_system->left_motors_lst[i]->L298N_driver, left_dir);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	79fa      	ldrb	r2, [r7, #7]
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff faa5 	bl	80018a2 <L298N_set_input_configuration>
		L298N_set_input_configuration(driving_system->right_motors_lst[i]->L298N_driver, right_dir);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	3202      	adds	r2, #2
 800235e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	79ba      	ldrb	r2, [r7, #6]
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fa9a 	bl	80018a2 <L298N_set_input_configuration>
		motor_state_set_velocity(driving_system->left_motors_lst[i]->motor_state, velocity);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	ed97 0a02 	vldr	s0, [r7, #8]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fe39 	bl	8001ff4 <motor_state_set_velocity>
		motor_state_set_velocity(driving_system->right_motors_lst[i]->motor_state, velocity);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	3202      	adds	r2, #2
 8002388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fe2e 	bl	8001ff4 <motor_state_set_velocity>
	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3301      	adds	r3, #1
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	ddcf      	ble.n	8002344 <drive_velo+0x1a>

	}
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <drive_pwm>:


void drive_pwm(DrivingSystem* driving_system, uint8_t pwm, EL298N_MODE left_dir, EL298N_MODE right_dir){
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	4608      	mov	r0, r1
 80023b8:	4611      	mov	r1, r2
 80023ba:	461a      	mov	r2, r3
 80023bc:	4603      	mov	r3, r0
 80023be:	70fb      	strb	r3, [r7, #3]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70bb      	strb	r3, [r7, #2]
 80023c4:	4613      	mov	r3, r2
 80023c6:	707b      	strb	r3, [r7, #1]
	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i)
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	e02c      	b.n	8002428 <drive_pwm+0x7a>
	{
		L298N_set_input_configuration(driving_system->left_motors_lst[i]->L298N_driver, left_dir);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	78ba      	ldrb	r2, [r7, #2]
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fa60 	bl	80018a2 <L298N_set_input_configuration>
		L298N_set_input_configuration(driving_system->right_motors_lst[i]->L298N_driver, right_dir);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	3202      	adds	r2, #2
 80023e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	787a      	ldrb	r2, [r7, #1]
 80023f0:	4611      	mov	r1, r2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fa55 	bl	80018a2 <L298N_set_input_configuration>
		L298N_set_pwm_count(driving_system->left_motors_lst[i]->L298N_driver, pwm);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	78fa      	ldrb	r2, [r7, #3]
 8002404:	4611      	mov	r1, r2
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff f9f0 	bl	80017ec <L298N_set_pwm_count>
		L298N_set_pwm_count(driving_system->right_motors_lst[i]->L298N_driver, pwm);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	3202      	adds	r2, #2
 8002412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff f9e5 	bl	80017ec <L298N_set_pwm_count>
	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	3301      	adds	r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b01      	cmp	r3, #1
 800242c:	ddcf      	ble.n	80023ce <drive_pwm+0x20>
	}

}
 800242e:	bf00      	nop
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <convert_to_radians>:

#include "motor_features.h"



float convert_to_radians(int32_t enc_position){
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

	return 2* M_PI * (float)enc_position / (float) ONE_ROTATION_TICKS;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800244a:	ee17 0a90 	vmov	r0, s15
 800244e:	f7fe f8a3 	bl	8000598 <__aeabi_f2d>
 8002452:	a30f      	add	r3, pc, #60	@ (adr r3, 8002490 <convert_to_radians+0x58>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fe f8f6 	bl	8000648 <__aeabi_dmul>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	a30c      	add	r3, pc, #48	@ (adr r3, 8002498 <convert_to_radians+0x60>)
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	f7fe fa17 	bl	800089c <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f7fe fbdf 	bl	8000c38 <__aeabi_d2f>
 800247a:	4603      	mov	r3, r0
 800247c:	ee07 3a90 	vmov	s15, r3

}
 8002480:	eeb0 0a67 	vmov.f32	s0, s15
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	f3af 8000 	nop.w
 8002490:	54442d18 	.word	0x54442d18
 8002494:	401921fb 	.word	0x401921fb
 8002498:	00000000 	.word	0x00000000
 800249c:	40ae6400 	.word	0x40ae6400

080024a0 <saturate_pwm>:


uint8_t saturate_pwm(int pwm_value){
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]


	if (pwm_value < PWM_MIN_VALUE){
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da02      	bge.n	80024b4 <saturate_pwm+0x14>
		pwm_value = (uint8_t)PWM_MIN_VALUE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	607b      	str	r3, [r7, #4]
 80024b2:	e004      	b.n	80024be <saturate_pwm+0x1e>
	}else if(pwm_value > PWM_MAX_VALUE){
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b62      	cmp	r3, #98	@ 0x62
 80024b8:	dd01      	ble.n	80024be <saturate_pwm+0x1e>
		pwm_value = (uint8_t)PWM_MAX_VALUE;
 80024ba:	2362      	movs	r3, #98	@ 0x62
 80024bc:	607b      	str	r3, [r7, #4]
	}
	return (uint8_t)pwm_value;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	b2db      	uxtb	r3, r3

}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <parse_msg_cmd_id>:
#ifndef SRC_FEATURES_PARSER_FEATURES_C_
#define SRC_FEATURES_PARSER_FEATURES_C_

#include "parser_features.h"

void parse_msg_cmd_id(uint8_t* cmd, uint8_t* msg_cmd_id){
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]

	*msg_cmd_id = cmd[0];
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	701a      	strb	r2, [r3, #0]

}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <parse_cmd_code>:

void parse_cmd_code(uint8_t* cmd, uint8_t* cmd_code){
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
//		send_parsing_err("cmd[1] wrong format");
//		return 1;
//	}
//	return 0;

	cmd_code[0] = cmd[1];
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	785a      	ldrb	r2, [r3, #1]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	701a      	strb	r2, [r3, #0]
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <parse_payload>:

int parse_payload(uint8_t* cmd, uint8_t* payload) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]

    uint8_t cmd_index = MSG_CMD_PAYLOAD_BEGIN;
 8002516:	2302      	movs	r3, #2
 8002518:	73fb      	strb	r3, [r7, #15]
    while (cmd[cmd_index] != MSG_END_CHAR) {
 800251a:	e013      	b.n	8002544 <parse_payload+0x38>

    	if((cmd_index-MSG_CMD_PAYLOAD_BEGIN) == MSG_PAYLOAD_LENGTH-1){
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	2b07      	cmp	r3, #7
 8002520:	d104      	bne.n	800252c <parse_payload+0x20>
    		send_parsing_err("cmd end char not received");
 8002522:	4811      	ldr	r0, [pc, #68]	@ (8002568 <parse_payload+0x5c>)
 8002524:	f000 f822 	bl	800256c <send_parsing_err>
    		return 1;
 8002528:	2301      	movs	r3, #1
 800252a:	e018      	b.n	800255e <parse_payload+0x52>
    	}
        payload[cmd_index-MSG_CMD_PAYLOAD_BEGIN] = cmd[cmd_index];
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	441a      	add	r2, r3
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	3b02      	subs	r3, #2
 8002536:	6839      	ldr	r1, [r7, #0]
 8002538:	440b      	add	r3, r1
 800253a:	7812      	ldrb	r2, [r2, #0]
 800253c:	701a      	strb	r2, [r3, #0]
        cmd_index++;
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	3301      	adds	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
    while (cmd[cmd_index] != MSG_END_CHAR) {
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2bfe      	cmp	r3, #254	@ 0xfe
 800254e:	d1e5      	bne.n	800251c <parse_payload+0x10>
    }

    payload[cmd_index-MSG_CMD_PAYLOAD_BEGIN] = '\0';
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	3b02      	subs	r3, #2
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	4413      	add	r3, r2
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
    return 0;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	0800d0d8 	.word	0x0800d0d8

0800256c <send_parsing_err>:

void send_parsing_err(char* msg){
 800256c:	b580      	push	{r7, lr}
 800256e:	b09c      	sub	sp, #112	@ 0x70
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

	char err_buffer[100];
	memset(err_buffer, '\0', sizeof(err_buffer));
 8002574:	f107 030c 	add.w	r3, r7, #12
 8002578:	2264      	movs	r2, #100	@ 0x64
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f007 f996 	bl	80098ae <memset>
	strcat(err_buffer, PARSING_ERR);
 8002582:	f107 030c 	add.w	r3, r7, #12
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd fe9a 	bl	80002c0 <strlen>
 800258c:	4603      	mov	r3, r0
 800258e:	461a      	mov	r2, r3
 8002590:	f107 030c 	add.w	r3, r7, #12
 8002594:	4413      	add	r3, r2
 8002596:	4918      	ldr	r1, [pc, #96]	@ (80025f8 <send_parsing_err+0x8c>)
 8002598:	461a      	mov	r2, r3
 800259a:	460b      	mov	r3, r1
 800259c:	cb03      	ldmia	r3!, {r0, r1}
 800259e:	6010      	str	r0, [r2, #0]
 80025a0:	6051      	str	r1, [r2, #4]
 80025a2:	8819      	ldrh	r1, [r3, #0]
 80025a4:	789b      	ldrb	r3, [r3, #2]
 80025a6:	8111      	strh	r1, [r2, #8]
 80025a8:	7293      	strb	r3, [r2, #10]
	strcat(err_buffer, msg);
 80025aa:	f107 030c 	add.w	r3, r7, #12
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f007 f984 	bl	80098be <strcat>
	strcat(err_buffer, "\n\r");
 80025b6:	f107 030c 	add.w	r3, r7, #12
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fd fe80 	bl	80002c0 <strlen>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461a      	mov	r2, r3
 80025c4:	f107 030c 	add.w	r3, r7, #12
 80025c8:	4413      	add	r3, r2
 80025ca:	4a0c      	ldr	r2, [pc, #48]	@ (80025fc <send_parsing_err+0x90>)
 80025cc:	8811      	ldrh	r1, [r2, #0]
 80025ce:	7892      	ldrb	r2, [r2, #2]
 80025d0:	8019      	strh	r1, [r3, #0]
 80025d2:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&hlpuart1,(uint8_t*) err_buffer, strlen(err_buffer), PARSING_ERROR_TIMEOUT);
 80025d4:	f107 030c 	add.w	r3, r7, #12
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fd fe71 	bl	80002c0 <strlen>
 80025de:	4603      	mov	r3, r0
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	f107 010c 	add.w	r1, r7, #12
 80025e6:	230a      	movs	r3, #10
 80025e8:	4805      	ldr	r0, [pc, #20]	@ (8002600 <send_parsing_err+0x94>)
 80025ea:	f003 fef1 	bl	80063d0 <HAL_UART_Transmit>

}
 80025ee:	bf00      	nop
 80025f0:	3770      	adds	r7, #112	@ 0x70
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	0800d0f4 	.word	0x0800d0f4
 80025fc:	0800d100 	.word	0x0800d100
 8002600:	20000448 	.word	0x20000448

08002604 <CountPeriodS>:
 */

#include "timers_feature.h"

// Funkcja obliczająca okres w sekundach
float CountPeriodS(TIM_HandleTypeDef *htim) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
    uint32_t prescaler = htim->Init.Prescaler;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	617b      	str	r3, [r7, #20]
    uint32_t period = htim->Init.Period;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	613b      	str	r3, [r7, #16]
    uint32_t clock_freq = HAL_RCC_GetHCLKFreq();
 8002618:	f001 fe62 	bl	80042e0 <HAL_RCC_GetHCLKFreq>
 800261c:	60f8      	str	r0, [r7, #12]

    float period_seconds = (float)(prescaler * period) / (float)clock_freq;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	ee07 3a90 	vmov	s15, r3
 800262a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	ee07 3a90 	vmov	s15, r3
 8002634:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800263c:	edc7 7a02 	vstr	s15, [r7, #8]

    return period_seconds;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	ee07 3a90 	vmov	s15, r3
}
 8002646:	eeb0 0a67 	vmov.f32	s0, s15
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <prepare_for_motor_ini_lb>:
uint64_t tick;
void generate_stair_signal_pwm(void);
void generate_random_signal_velo(void);


void prepare_for_motor_ini_lb(){
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af04      	add	r7, sp, #16


	init_encoder_info(&lb_encoder_info, &htim4);
 8002656:	4919      	ldr	r1, [pc, #100]	@ (80026bc <prepare_for_motor_ini_lb+0x6c>)
 8002658:	4819      	ldr	r0, [pc, #100]	@ (80026c0 <prepare_for_motor_ini_lb+0x70>)
 800265a:	f7ff fb99 	bl	8001d90 <init_encoder_info>
	L298N_init(&lb_L298N, TIM_CHANNEL_1, &htim1, GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_1);
 800265e:	2302      	movs	r3, #2
 8002660:	9302      	str	r3, [sp, #8]
 8002662:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	2301      	movs	r3, #1
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002670:	4a14      	ldr	r2, [pc, #80]	@ (80026c4 <prepare_for_motor_ini_lb+0x74>)
 8002672:	2100      	movs	r1, #0
 8002674:	4814      	ldr	r0, [pc, #80]	@ (80026c8 <prepare_for_motor_ini_lb+0x78>)
 8002676:	f7ff f897 	bl	80017a8 <L298N_init>
	pid_init(&lb_pid_controller, MOTOR_Kp , MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 800267a:	215f      	movs	r1, #95	@ 0x5f
 800267c:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 80026cc <prepare_for_motor_ini_lb+0x7c>
 8002680:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80026d0 <prepare_for_motor_ini_lb+0x80>
 8002684:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80026d4 <prepare_for_motor_ini_lb+0x84>
 8002688:	4813      	ldr	r0, [pc, #76]	@ (80026d8 <prepare_for_motor_ini_lb+0x88>)
 800268a:	f7ff fcf1 	bl	8002070 <pid_init>
	init_motor(&lb_motor, &lb_motor_state, &htim7, &lb_encoder_info, &lb_pid_controller, &lb_L298N);
 800268e:	4b0e      	ldr	r3, [pc, #56]	@ (80026c8 <prepare_for_motor_ini_lb+0x78>)
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <prepare_for_motor_ini_lb+0x88>)
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	4b0a      	ldr	r3, [pc, #40]	@ (80026c0 <prepare_for_motor_ini_lb+0x70>)
 8002698:	4a10      	ldr	r2, [pc, #64]	@ (80026dc <prepare_for_motor_ini_lb+0x8c>)
 800269a:	4911      	ldr	r1, [pc, #68]	@ (80026e0 <prepare_for_motor_ini_lb+0x90>)
 800269c:	4811      	ldr	r0, [pc, #68]	@ (80026e4 <prepare_for_motor_ini_lb+0x94>)
 800269e:	f7ff fb9a 	bl	8001dd6 <init_motor>

	updater_timer_periods = CountPeriodS(lb_motor.motor_updater_tim);
 80026a2:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <prepare_for_motor_ini_lb+0x94>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff ffac 	bl	8002604 <CountPeriodS>
 80026ac:	eef0 7a40 	vmov.f32	s15, s0
 80026b0:	4b0d      	ldr	r3, [pc, #52]	@ (80026e8 <prepare_for_motor_ini_lb+0x98>)
 80026b2:	edc3 7a00 	vstr	s15, [r3]
}
 80026b6:	bf00      	nop
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000284 	.word	0x20000284
 80026c0:	20000508 	.word	0x20000508
 80026c4:	200001ec 	.word	0x200001ec
 80026c8:	20000528 	.word	0x20000528
 80026cc:	00000000 	.word	0x00000000
 80026d0:	3e4ccccd 	.word	0x3e4ccccd
 80026d4:	3c23d70a 	.word	0x3c23d70a
 80026d8:	200004f0 	.word	0x200004f0
 80026dc:	2000031c 	.word	0x2000031c
 80026e0:	20000544 	.word	0x20000544
 80026e4:	20000510 	.word	0x20000510
 80026e8:	20000644 	.word	0x20000644

080026ec <prepare_for_motor_ini_lf>:

void prepare_for_motor_ini_lf(){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af04      	add	r7, sp, #16

	init_encoder_info(&lf_encoder_info, &htim5);
 80026f2:	4919      	ldr	r1, [pc, #100]	@ (8002758 <prepare_for_motor_ini_lf+0x6c>)
 80026f4:	4819      	ldr	r0, [pc, #100]	@ (800275c <prepare_for_motor_ini_lf+0x70>)
 80026f6:	f7ff fb4b 	bl	8001d90 <init_encoder_info>
	L298N_init(&lf_L298N, TIM_CHANNEL_2, &htim1, GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_1);
 80026fa:	2302      	movs	r3, #2
 80026fc:	9302      	str	r3, [sp, #8]
 80026fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002702:	9301      	str	r3, [sp, #4]
 8002704:	2301      	movs	r3, #1
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800270c:	4a14      	ldr	r2, [pc, #80]	@ (8002760 <prepare_for_motor_ini_lf+0x74>)
 800270e:	2104      	movs	r1, #4
 8002710:	4814      	ldr	r0, [pc, #80]	@ (8002764 <prepare_for_motor_ini_lf+0x78>)
 8002712:	f7ff f849 	bl	80017a8 <L298N_init>
	pid_init(&lf_pid_controller, MOTOR_Kp , MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 8002716:	215f      	movs	r1, #95	@ 0x5f
 8002718:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8002768 <prepare_for_motor_ini_lf+0x7c>
 800271c:	eddf 0a13 	vldr	s1, [pc, #76]	@ 800276c <prepare_for_motor_ini_lf+0x80>
 8002720:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8002770 <prepare_for_motor_ini_lf+0x84>
 8002724:	4813      	ldr	r0, [pc, #76]	@ (8002774 <prepare_for_motor_ini_lf+0x88>)
 8002726:	f7ff fca3 	bl	8002070 <pid_init>
	init_motor(&lf_motor, &lf_motor_state, &htim7, &lf_encoder_info, &lf_pid_controller, &lf_L298N);
 800272a:	4b0e      	ldr	r3, [pc, #56]	@ (8002764 <prepare_for_motor_ini_lf+0x78>)
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	4b11      	ldr	r3, [pc, #68]	@ (8002774 <prepare_for_motor_ini_lf+0x88>)
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	4b0a      	ldr	r3, [pc, #40]	@ (800275c <prepare_for_motor_ini_lf+0x70>)
 8002734:	4a10      	ldr	r2, [pc, #64]	@ (8002778 <prepare_for_motor_ini_lf+0x8c>)
 8002736:	4911      	ldr	r1, [pc, #68]	@ (800277c <prepare_for_motor_ini_lf+0x90>)
 8002738:	4811      	ldr	r0, [pc, #68]	@ (8002780 <prepare_for_motor_ini_lf+0x94>)
 800273a:	f7ff fb4c 	bl	8001dd6 <init_motor>

	updater_timer_periods = CountPeriodS(lf_motor.motor_updater_tim);
 800273e:	4b10      	ldr	r3, [pc, #64]	@ (8002780 <prepare_for_motor_ini_lf+0x94>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ff5e 	bl	8002604 <CountPeriodS>
 8002748:	eef0 7a40 	vmov.f32	s15, s0
 800274c:	4b0d      	ldr	r3, [pc, #52]	@ (8002784 <prepare_for_motor_ini_lf+0x98>)
 800274e:	edc3 7a00 	vstr	s15, [r3]
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	200002d0 	.word	0x200002d0
 800275c:	20000570 	.word	0x20000570
 8002760:	200001ec 	.word	0x200001ec
 8002764:	20000590 	.word	0x20000590
 8002768:	00000000 	.word	0x00000000
 800276c:	3e4ccccd 	.word	0x3e4ccccd
 8002770:	3c23d70a 	.word	0x3c23d70a
 8002774:	20000558 	.word	0x20000558
 8002778:	2000031c 	.word	0x2000031c
 800277c:	200005ac 	.word	0x200005ac
 8002780:	20000578 	.word	0x20000578
 8002784:	20000644 	.word	0x20000644

08002788 <prepare_for_motor_ini_rb>:

void prepare_for_motor_ini_rb(){
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af04      	add	r7, sp, #16

	init_encoder_info(&rb_encoder_info, &htim8);
 800278e:	491a      	ldr	r1, [pc, #104]	@ (80027f8 <prepare_for_motor_ini_rb+0x70>)
 8002790:	481a      	ldr	r0, [pc, #104]	@ (80027fc <prepare_for_motor_ini_rb+0x74>)
 8002792:	f7ff fafd 	bl	8001d90 <init_encoder_info>
	L298N_init(&rb_L298N, TIM_CHANNEL_3, &htim1, GPIOA, GPIO_PIN_8, GPIOA, GPIO_PIN_9);
 8002796:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800279a:	9302      	str	r3, [sp, #8]
 800279c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80027ac:	4a14      	ldr	r2, [pc, #80]	@ (8002800 <prepare_for_motor_ini_rb+0x78>)
 80027ae:	2108      	movs	r1, #8
 80027b0:	4814      	ldr	r0, [pc, #80]	@ (8002804 <prepare_for_motor_ini_rb+0x7c>)
 80027b2:	f7fe fff9 	bl	80017a8 <L298N_init>
	pid_init(&rb_pid_controller, MOTOR_Kp , MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 80027b6:	215f      	movs	r1, #95	@ 0x5f
 80027b8:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8002808 <prepare_for_motor_ini_rb+0x80>
 80027bc:	eddf 0a13 	vldr	s1, [pc, #76]	@ 800280c <prepare_for_motor_ini_rb+0x84>
 80027c0:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8002810 <prepare_for_motor_ini_rb+0x88>
 80027c4:	4813      	ldr	r0, [pc, #76]	@ (8002814 <prepare_for_motor_ini_rb+0x8c>)
 80027c6:	f7ff fc53 	bl	8002070 <pid_init>
	init_motor(&rb_motor, &rb_motor_state, &htim7, &rb_encoder_info, &rb_pid_controller, &rb_L298N);
 80027ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002804 <prepare_for_motor_ini_rb+0x7c>)
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	4b11      	ldr	r3, [pc, #68]	@ (8002814 <prepare_for_motor_ini_rb+0x8c>)
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	4b0a      	ldr	r3, [pc, #40]	@ (80027fc <prepare_for_motor_ini_rb+0x74>)
 80027d4:	4a10      	ldr	r2, [pc, #64]	@ (8002818 <prepare_for_motor_ini_rb+0x90>)
 80027d6:	4911      	ldr	r1, [pc, #68]	@ (800281c <prepare_for_motor_ini_rb+0x94>)
 80027d8:	4811      	ldr	r0, [pc, #68]	@ (8002820 <prepare_for_motor_ini_rb+0x98>)
 80027da:	f7ff fafc 	bl	8001dd6 <init_motor>

	updater_timer_periods = CountPeriodS(lf_motor.motor_updater_tim);
 80027de:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <prepare_for_motor_ini_rb+0x9c>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff ff0e 	bl	8002604 <CountPeriodS>
 80027e8:	eef0 7a40 	vmov.f32	s15, s0
 80027ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002828 <prepare_for_motor_ini_rb+0xa0>)
 80027ee:	edc3 7a00 	vstr	s15, [r3]
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20000368 	.word	0x20000368
 80027fc:	200005d8 	.word	0x200005d8
 8002800:	200001ec 	.word	0x200001ec
 8002804:	200005f8 	.word	0x200005f8
 8002808:	00000000 	.word	0x00000000
 800280c:	3e4ccccd 	.word	0x3e4ccccd
 8002810:	3c23d70a 	.word	0x3c23d70a
 8002814:	200005c0 	.word	0x200005c0
 8002818:	2000031c 	.word	0x2000031c
 800281c:	20000614 	.word	0x20000614
 8002820:	200005e0 	.word	0x200005e0
 8002824:	20000578 	.word	0x20000578
 8002828:	20000644 	.word	0x20000644

0800282c <main>:
//	L298N_set_input_configuration(&lf_L298N, L298N_MODE_FORWARD);
//}


int main(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af02      	add	r7, sp, #8

  HAL_Init();
 8002832:	f000 fc92 	bl	800315a <HAL_Init>
  SystemClock_Config();
 8002836:	f7fe fbfd 	bl	8001034 <SystemClock_Config>
  MX_GPIO_Init();
 800283a:	f7fe fc47 	bl	80010cc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800283e:	f7fe ff1d 	bl	800167c <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8002842:	f7fe ff65 	bl	8001710 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002846:	f7fe fcb1 	bl	80011ac <MX_TIM1_Init>
  MX_TIM3_Init();
 800284a:	f7fe fd85 	bl	8001358 <MX_TIM3_Init>
  MX_TIM4_Init();
 800284e:	f7fe fdd9 	bl	8001404 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002852:	f7fe fe2d 	bl	80014b0 <MX_TIM5_Init>
  MX_TIM7_Init();
 8002856:	f7fe fe81 	bl	800155c <MX_TIM7_Init>
  MX_TIM8_Init();
 800285a:	f7fe feb5 	bl	80015c8 <MX_TIM8_Init>


  prepare_for_motor_ini_lb();
 800285e:	f7ff fef7 	bl	8002650 <prepare_for_motor_ini_lb>
  prepare_for_motor_ini_lf();
 8002862:	f7ff ff43 	bl	80026ec <prepare_for_motor_ini_lf>
  prepare_for_motor_ini_rb();
 8002866:	f7ff ff8f 	bl	8002788 <prepare_for_motor_ini_rb>

  init_driving_system(&driving_system ,&lb_motor, &lf_motor, &rb_motor, &lb_motor);
 800286a:	4b21      	ldr	r3, [pc, #132]	@ (80028f0 <main+0xc4>)
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	4b21      	ldr	r3, [pc, #132]	@ (80028f4 <main+0xc8>)
 8002870:	4a21      	ldr	r2, [pc, #132]	@ (80028f8 <main+0xcc>)
 8002872:	491f      	ldr	r1, [pc, #124]	@ (80028f0 <main+0xc4>)
 8002874:	4821      	ldr	r0, [pc, #132]	@ (80028fc <main+0xd0>)
 8002876:	f7ff f859 	bl	800192c <init_driving_system>
  default_init_driving_system_if(&drv_system_if);
 800287a:	4821      	ldr	r0, [pc, #132]	@ (8002900 <main+0xd4>)
 800287c:	f7ff f872 	bl	8001964 <default_init_driving_system_if>

  velo = 0;
 8002880:	4b20      	ldr	r3, [pc, #128]	@ (8002904 <main+0xd8>)
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
  pwm_output = 0;
 8002886:	4b20      	ldr	r3, [pc, #128]	@ (8002908 <main+0xdc>)
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]
  tick = 0;
 800288c:	491f      	ldr	r1, [pc, #124]	@ (800290c <main+0xe0>)
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	e9c1 2300 	strd	r2, r3, [r1]

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 800289a:	481d      	ldr	r0, [pc, #116]	@ (8002910 <main+0xe4>)
 800289c:	f002 f876 	bl	800498c <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80028a0:	2100      	movs	r1, #0
 80028a2:	481c      	ldr	r0, [pc, #112]	@ (8002914 <main+0xe8>)
 80028a4:	f002 f94c 	bl	8004b40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80028a8:	2104      	movs	r1, #4
 80028aa:	481a      	ldr	r0, [pc, #104]	@ (8002914 <main+0xe8>)
 80028ac:	f002 f948 	bl	8004b40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80028b0:	2108      	movs	r1, #8
 80028b2:	4818      	ldr	r0, [pc, #96]	@ (8002914 <main+0xe8>)
 80028b4:	f002 f944 	bl	8004b40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80028b8:	210c      	movs	r1, #12
 80028ba:	4816      	ldr	r0, [pc, #88]	@ (8002914 <main+0xe8>)
 80028bc:	f002 f940 	bl	8004b40 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80028c0:	213c      	movs	r1, #60	@ 0x3c
 80028c2:	4815      	ldr	r0, [pc, #84]	@ (8002918 <main+0xec>)
 80028c4:	f002 faf4 	bl	8004eb0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80028c8:	213c      	movs	r1, #60	@ 0x3c
 80028ca:	4814      	ldr	r0, [pc, #80]	@ (800291c <main+0xf0>)
 80028cc:	f002 faf0 	bl	8004eb0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80028d0:	213c      	movs	r1, #60	@ 0x3c
 80028d2:	4813      	ldr	r0, [pc, #76]	@ (8002920 <main+0xf4>)
 80028d4:	f002 faec 	bl	8004eb0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 80028d8:	213c      	movs	r1, #60	@ 0x3c
 80028da:	4812      	ldr	r0, [pc, #72]	@ (8002924 <main+0xf8>)
 80028dc:	f002 fae8 	bl	8004eb0 <HAL_TIM_Encoder_Start>



  /* USER CODE END 2 */

  HAL_UART_Receive_IT(&hlpuart1, cmd_data, CMD_CODE_LENGTH + MSG_PAYLOAD_LENGTH);
 80028e0:	2208      	movs	r2, #8
 80028e2:	4911      	ldr	r1, [pc, #68]	@ (8002928 <main+0xfc>)
 80028e4:	4811      	ldr	r0, [pc, #68]	@ (800292c <main+0x100>)
 80028e6:	f003 fe01 	bl	80064ec <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  driving_system.velo_ctrl_flag = 1;
    while (1)
 80028ea:	bf00      	nop
 80028ec:	e7fd      	b.n	80028ea <main+0xbe>
 80028ee:	bf00      	nop
 80028f0:	20000510 	.word	0x20000510
 80028f4:	200005e0 	.word	0x200005e0
 80028f8:	20000578 	.word	0x20000578
 80028fc:	20000628 	.word	0x20000628
 8002900:	2000063c 	.word	0x2000063c
 8002904:	20000651 	.word	0x20000651
 8002908:	20000650 	.word	0x20000650
 800290c:	20000658 	.word	0x20000658
 8002910:	2000031c 	.word	0x2000031c
 8002914:	200001ec 	.word	0x200001ec
 8002918:	20000238 	.word	0x20000238
 800291c:	20000284 	.word	0x20000284
 8002920:	200002d0 	.word	0x200002d0
 8002924:	20000368 	.word	0x20000368
 8002928:	20000648 	.word	0x20000648
 800292c:	20000448 	.word	0x20000448

08002930 <HAL_UART_RxCpltCallback>:
  }

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

	drv_system_if.exe_cmd(&driving_system, cmd_data);
 8002938:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <HAL_UART_RxCpltCallback+0x24>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4906      	ldr	r1, [pc, #24]	@ (8002958 <HAL_UART_RxCpltCallback+0x28>)
 800293e:	4807      	ldr	r0, [pc, #28]	@ (800295c <HAL_UART_RxCpltCallback+0x2c>)
 8002940:	4798      	blx	r3
	HAL_UART_Receive_IT(&hlpuart1, cmd_data, CMD_CODE_LENGTH + MSG_PAYLOAD_LENGTH);
 8002942:	2208      	movs	r2, #8
 8002944:	4904      	ldr	r1, [pc, #16]	@ (8002958 <HAL_UART_RxCpltCallback+0x28>)
 8002946:	4806      	ldr	r0, [pc, #24]	@ (8002960 <HAL_UART_RxCpltCallback+0x30>)
 8002948:	f003 fdd0 	bl	80064ec <HAL_UART_Receive_IT>

}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	2000063c 	.word	0x2000063c
 8002958:	20000648 	.word	0x20000648
 800295c:	20000628 	.word	0x20000628
 8002960:	20000448 	.word	0x20000448

08002964 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b5b0      	push	{r4, r5, r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

    if (htim->Instance == (TIM_TypeDef *)lb_motor.motor_updater_tim->Instance) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4b0a      	ldr	r3, [pc, #40]	@ (800299c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d10b      	bne.n	8002992 <HAL_TIM_PeriodElapsedCallback+0x2e>
//    	update_motor_position(lb_motor.motor_state, lb_motor.encoder_info);
//    	update_measured_velocity(&lb_motor);
//    	motor_state_set_velocity(&lb_motor_state, velo);
//    	L298N_set_pwm_count(lb_motor.L298N_driver, pwm_output);

    	driving_system_drive(&driving_system);
 800297a:	4809      	ldr	r0, [pc, #36]	@ (80029a0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800297c:	f7ff f806 	bl	800198c <driving_system_drive>
    	tick += 1;
 8002980:	4b08      	ldr	r3, [pc, #32]	@ (80029a4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	1c54      	adds	r4, r2, #1
 8002988:	f143 0500 	adc.w	r5, r3, #0
 800298c:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800298e:	e9c3 4500 	strd	r4, r5, [r3]
    }



//  /* USER CODE END Callback 1 */
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bdb0      	pop	{r4, r5, r7, pc}
 800299a:	bf00      	nop
 800299c:	20000510 	.word	0x20000510
 80029a0:	20000628 	.word	0x20000628
 80029a4:	20000658 	.word	0x20000658

080029a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029ac:	b672      	cpsid	i
}
 80029ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029b0:	bf00      	nop
 80029b2:	e7fd      	b.n	80029b0 <Error_Handler+0x8>

080029b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ba:	4b0f      	ldr	r3, [pc, #60]	@ (80029f8 <HAL_MspInit+0x44>)
 80029bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029be:	4a0e      	ldr	r2, [pc, #56]	@ (80029f8 <HAL_MspInit+0x44>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80029c6:	4b0c      	ldr	r3, [pc, #48]	@ (80029f8 <HAL_MspInit+0x44>)
 80029c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	607b      	str	r3, [r7, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d2:	4b09      	ldr	r3, [pc, #36]	@ (80029f8 <HAL_MspInit+0x44>)
 80029d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d6:	4a08      	ldr	r2, [pc, #32]	@ (80029f8 <HAL_MspInit+0x44>)
 80029d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80029de:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <HAL_MspInit+0x44>)
 80029e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80029ea:	f000 ffb9 	bl	8003960 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000

080029fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b0a0      	sub	sp, #128	@ 0x80
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a14:	f107 0318 	add.w	r3, r7, #24
 8002a18:	2254      	movs	r2, #84	@ 0x54
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f006 ff46 	bl	80098ae <memset>
  if(huart->Instance==LPUART1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a41      	ldr	r2, [pc, #260]	@ (8002b2c <HAL_UART_MspInit+0x130>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d13f      	bne.n	8002aac <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002a30:	2300      	movs	r3, #0
 8002a32:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a34:	f107 0318 	add.w	r3, r7, #24
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f001 fd01 	bl	8004440 <HAL_RCCEx_PeriphCLKConfig>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a44:	f7ff ffb0 	bl	80029a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002a48:	4b39      	ldr	r3, [pc, #228]	@ (8002b30 <HAL_UART_MspInit+0x134>)
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4c:	4a38      	ldr	r2, [pc, #224]	@ (8002b30 <HAL_UART_MspInit+0x134>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002a54:	4b36      	ldr	r3, [pc, #216]	@ (8002b30 <HAL_UART_MspInit+0x134>)
 8002a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a60:	4b33      	ldr	r3, [pc, #204]	@ (8002b30 <HAL_UART_MspInit+0x134>)
 8002a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a64:	4a32      	ldr	r2, [pc, #200]	@ (8002b30 <HAL_UART_MspInit+0x134>)
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a6c:	4b30      	ldr	r3, [pc, #192]	@ (8002b30 <HAL_UART_MspInit+0x134>)
 8002a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a78:	230c      	movs	r3, #12
 8002a7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a84:	2300      	movs	r3, #0
 8002a86:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002a88:	230c      	movs	r3, #12
 8002a8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002a90:	4619      	mov	r1, r3
 8002a92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a96:	f000 fd25 	bl	80034e4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	205b      	movs	r0, #91	@ 0x5b
 8002aa0:	f000 fc38 	bl	8003314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002aa4:	205b      	movs	r0, #91	@ 0x5b
 8002aa6:	f000 fc4f 	bl	8003348 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002aaa:	e03a      	b.n	8002b22 <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a20      	ldr	r2, [pc, #128]	@ (8002b34 <HAL_UART_MspInit+0x138>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d135      	bne.n	8002b22 <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002abe:	f107 0318 	add.w	r3, r7, #24
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f001 fcbc 	bl	8004440 <HAL_RCCEx_PeriphCLKConfig>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002ace:	f7ff ff6b 	bl	80029a8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ad2:	4b17      	ldr	r3, [pc, #92]	@ (8002b30 <HAL_UART_MspInit+0x134>)
 8002ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ad6:	4a16      	ldr	r2, [pc, #88]	@ (8002b30 <HAL_UART_MspInit+0x134>)
 8002ad8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002adc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ade:	4b14      	ldr	r3, [pc, #80]	@ (8002b30 <HAL_UART_MspInit+0x134>)
 8002ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aea:	4b11      	ldr	r3, [pc, #68]	@ (8002b30 <HAL_UART_MspInit+0x134>)
 8002aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aee:	4a10      	ldr	r2, [pc, #64]	@ (8002b30 <HAL_UART_MspInit+0x134>)
 8002af0:	f043 0304 	orr.w	r3, r3, #4
 8002af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002af6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <HAL_UART_MspInit+0x134>)
 8002af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002b02:	2330      	movs	r3, #48	@ 0x30
 8002b04:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b12:	2307      	movs	r3, #7
 8002b14:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b16:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4806      	ldr	r0, [pc, #24]	@ (8002b38 <HAL_UART_MspInit+0x13c>)
 8002b1e:	f000 fce1 	bl	80034e4 <HAL_GPIO_Init>
}
 8002b22:	bf00      	nop
 8002b24:	3780      	adds	r7, #128	@ 0x80
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40008000 	.word	0x40008000
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40013800 	.word	0x40013800
 8002b38:	48000800 	.word	0x48000800

08002b3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a16      	ldr	r2, [pc, #88]	@ (8002ba4 <HAL_TIM_Base_MspInit+0x68>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d10c      	bne.n	8002b68 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ba8 <HAL_TIM_Base_MspInit+0x6c>)
 8002b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b52:	4a15      	ldr	r2, [pc, #84]	@ (8002ba8 <HAL_TIM_Base_MspInit+0x6c>)
 8002b54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b58:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b5a:	4b13      	ldr	r3, [pc, #76]	@ (8002ba8 <HAL_TIM_Base_MspInit+0x6c>)
 8002b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002b66:	e018      	b.n	8002b9a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8002bac <HAL_TIM_Base_MspInit+0x70>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d113      	bne.n	8002b9a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002b72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba8 <HAL_TIM_Base_MspInit+0x6c>)
 8002b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b76:	4a0c      	ldr	r2, [pc, #48]	@ (8002ba8 <HAL_TIM_Base_MspInit+0x6c>)
 8002b78:	f043 0320 	orr.w	r3, r3, #32
 8002b7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba8 <HAL_TIM_Base_MspInit+0x6c>)
 8002b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	2037      	movs	r0, #55	@ 0x37
 8002b90:	f000 fbc0 	bl	8003314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8002b94:	2037      	movs	r0, #55	@ 0x37
 8002b96:	f000 fbd7 	bl	8003348 <HAL_NVIC_EnableIRQ>
}
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40012c00 	.word	0x40012c00
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40001400 	.word	0x40001400

08002bb0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b090      	sub	sp, #64	@ 0x40
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a6c      	ldr	r2, [pc, #432]	@ (8002d80 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d129      	bne.n	8002c26 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bd2:	4b6c      	ldr	r3, [pc, #432]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd6:	4a6b      	ldr	r2, [pc, #428]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bde:	4b69      	ldr	r3, [pc, #420]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bea:	4b66      	ldr	r3, [pc, #408]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bee:	4a65      	ldr	r2, [pc, #404]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bf6:	4b63      	ldr	r3, [pc, #396]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002c02:	2350      	movs	r3, #80	@ 0x50
 8002c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c06:	2302      	movs	r3, #2
 8002c08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c12:	2302      	movs	r3, #2
 8002c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c20:	f000 fc60 	bl	80034e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002c24:	e0a7      	b.n	8002d76 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM4)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a57      	ldr	r2, [pc, #348]	@ (8002d88 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d12a      	bne.n	8002c86 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c30:	4b54      	ldr	r3, [pc, #336]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c34:	4a53      	ldr	r2, [pc, #332]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002c36:	f043 0304 	orr.w	r3, r3, #4
 8002c3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c3c:	4b51      	ldr	r3, [pc, #324]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	623b      	str	r3, [r7, #32]
 8002c46:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c48:	4b4e      	ldr	r3, [pc, #312]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4c:	4a4d      	ldr	r2, [pc, #308]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c54:	4b4b      	ldr	r3, [pc, #300]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	61fb      	str	r3, [r7, #28]
 8002c5e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002c60:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c66:	2302      	movs	r3, #2
 8002c68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002c72:	230a      	movs	r3, #10
 8002c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c80:	f000 fc30 	bl	80034e4 <HAL_GPIO_Init>
}
 8002c84:	e077      	b.n	8002d76 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM5)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a40      	ldr	r2, [pc, #256]	@ (8002d8c <HAL_TIM_Encoder_MspInit+0x1dc>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d145      	bne.n	8002d1c <HAL_TIM_Encoder_MspInit+0x16c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c90:	4b3c      	ldr	r3, [pc, #240]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c94:	4a3b      	ldr	r2, [pc, #236]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002c96:	f043 0308 	orr.w	r3, r3, #8
 8002c9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c9c:	4b39      	ldr	r3, [pc, #228]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca8:	4b36      	ldr	r3, [pc, #216]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cac:	4a35      	ldr	r2, [pc, #212]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002cae:	f043 0302 	orr.w	r3, r3, #2
 8002cb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cb4:	4b33      	ldr	r3, [pc, #204]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc0:	4b30      	ldr	r3, [pc, #192]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc4:	4a2f      	ldr	r2, [pc, #188]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002cc6:	f043 0304 	orr.w	r3, r3, #4
 8002cca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cd8:	2304      	movs	r3, #4
 8002cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4827      	ldr	r0, [pc, #156]	@ (8002d90 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8002cf4:	f000 fbf6 	bl	80034e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002cf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d06:	2300      	movs	r3, #0
 8002d08:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d12:	4619      	mov	r1, r3
 8002d14:	481f      	ldr	r0, [pc, #124]	@ (8002d94 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8002d16:	f000 fbe5 	bl	80034e4 <HAL_GPIO_Init>
}
 8002d1a:	e02c      	b.n	8002d76 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM8)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a1d      	ldr	r2, [pc, #116]	@ (8002d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d127      	bne.n	8002d76 <HAL_TIM_Encoder_MspInit+0x1c6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002d26:	4b17      	ldr	r3, [pc, #92]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d2a:	4a16      	ldr	r2, [pc, #88]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002d2c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d30:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d32:	4b14      	ldr	r3, [pc, #80]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d3e:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d42:	4a10      	ldr	r2, [pc, #64]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002d44:	f043 0304 	orr.w	r3, r3, #4
 8002d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d56:	23c0      	movs	r3, #192	@ 0xc0
 8002d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d62:	2300      	movs	r3, #0
 8002d64:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002d66:	2304      	movs	r3, #4
 8002d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4808      	ldr	r0, [pc, #32]	@ (8002d94 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8002d72:	f000 fbb7 	bl	80034e4 <HAL_GPIO_Init>
}
 8002d76:	bf00      	nop
 8002d78:	3740      	adds	r7, #64	@ 0x40
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40000400 	.word	0x40000400
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40000800 	.word	0x40000800
 8002d8c:	40000c00 	.word	0x40000c00
 8002d90:	48000400 	.word	0x48000400
 8002d94:	48000800 	.word	0x48000800
 8002d98:	40013400 	.word	0x40013400

08002d9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da4:	f107 030c 	add.w	r3, r7, #12
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a11      	ldr	r2, [pc, #68]	@ (8002e00 <HAL_TIM_MspPostInit+0x64>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d11b      	bne.n	8002df6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dbe:	4b11      	ldr	r3, [pc, #68]	@ (8002e04 <HAL_TIM_MspPostInit+0x68>)
 8002dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc2:	4a10      	ldr	r2, [pc, #64]	@ (8002e04 <HAL_TIM_MspPostInit+0x68>)
 8002dc4:	f043 0304 	orr.w	r3, r3, #4
 8002dc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dca:	4b0e      	ldr	r3, [pc, #56]	@ (8002e04 <HAL_TIM_MspPostInit+0x68>)
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002dd6:	230f      	movs	r3, #15
 8002dd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002de6:	2302      	movs	r3, #2
 8002de8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dea:	f107 030c 	add.w	r3, r7, #12
 8002dee:	4619      	mov	r1, r3
 8002df0:	4805      	ldr	r0, [pc, #20]	@ (8002e08 <HAL_TIM_MspPostInit+0x6c>)
 8002df2:	f000 fb77 	bl	80034e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002df6:	bf00      	nop
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40012c00 	.word	0x40012c00
 8002e04:	40021000 	.word	0x40021000
 8002e08:	48000800 	.word	0x48000800

08002e0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08c      	sub	sp, #48	@ 0x30
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ed0 <HAL_InitTick+0xc4>)
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e20:	4a2b      	ldr	r2, [pc, #172]	@ (8002ed0 <HAL_InitTick+0xc4>)
 8002e22:	f043 0310 	orr.w	r3, r3, #16
 8002e26:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e28:	4b29      	ldr	r3, [pc, #164]	@ (8002ed0 <HAL_InitTick+0xc4>)
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e34:	f107 020c 	add.w	r2, r7, #12
 8002e38:	f107 0310 	add.w	r3, r7, #16
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 fa86 	bl	8004350 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e44:	f001 fa58 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 8002e48:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e4c:	4a21      	ldr	r2, [pc, #132]	@ (8002ed4 <HAL_InitTick+0xc8>)
 8002e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e52:	0c9b      	lsrs	r3, r3, #18
 8002e54:	3b01      	subs	r3, #1
 8002e56:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e58:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed8 <HAL_InitTick+0xcc>)
 8002e5a:	4a20      	ldr	r2, [pc, #128]	@ (8002edc <HAL_InitTick+0xd0>)
 8002e5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed8 <HAL_InitTick+0xcc>)
 8002e60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002e64:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e66:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed8 <HAL_InitTick+0xcc>)
 8002e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed8 <HAL_InitTick+0xcc>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e72:	4b19      	ldr	r3, [pc, #100]	@ (8002ed8 <HAL_InitTick+0xcc>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002e78:	4817      	ldr	r0, [pc, #92]	@ (8002ed8 <HAL_InitTick+0xcc>)
 8002e7a:	f001 fd2f 	bl	80048dc <HAL_TIM_Base_Init>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002e84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d11b      	bne.n	8002ec4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002e8c:	4812      	ldr	r0, [pc, #72]	@ (8002ed8 <HAL_InitTick+0xcc>)
 8002e8e:	f001 fd7d 	bl	800498c <HAL_TIM_Base_Start_IT>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002e98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d111      	bne.n	8002ec4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ea0:	2036      	movs	r0, #54	@ 0x36
 8002ea2:	f000 fa51 	bl	8003348 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b0f      	cmp	r3, #15
 8002eaa:	d808      	bhi.n	8002ebe <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002eac:	2200      	movs	r2, #0
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	2036      	movs	r0, #54	@ 0x36
 8002eb2:	f000 fa2f 	bl	8003314 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee0 <HAL_InitTick+0xd4>)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	e002      	b.n	8002ec4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002ec4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3730      	adds	r7, #48	@ 0x30
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	431bde83 	.word	0x431bde83
 8002ed8:	20000660 	.word	0x20000660
 8002edc:	40001000 	.word	0x40001000
 8002ee0:	20000004 	.word	0x20000004

08002ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ee8:	bf00      	nop
 8002eea:	e7fd      	b.n	8002ee8 <NMI_Handler+0x4>

08002eec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ef0:	bf00      	nop
 8002ef2:	e7fd      	b.n	8002ef0 <HardFault_Handler+0x4>

08002ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ef8:	bf00      	nop
 8002efa:	e7fd      	b.n	8002ef8 <MemManage_Handler+0x4>

08002efc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f00:	bf00      	nop
 8002f02:	e7fd      	b.n	8002f00 <BusFault_Handler+0x4>

08002f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f08:	bf00      	nop
 8002f0a:	e7fd      	b.n	8002f08 <UsageFault_Handler+0x4>

08002f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f20:	4802      	ldr	r0, [pc, #8]	@ (8002f2c <TIM6_DAC_IRQHandler+0x10>)
 8002f22:	f002 f853 	bl	8004fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000660 	.word	0x20000660

08002f30 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002f34:	4802      	ldr	r0, [pc, #8]	@ (8002f40 <TIM7_DAC_IRQHandler+0x10>)
 8002f36:	f002 f849 	bl	8004fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	2000031c 	.word	0x2000031c

08002f44 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002f48:	4802      	ldr	r0, [pc, #8]	@ (8002f54 <LPUART1_IRQHandler+0x10>)
 8002f4a:	f003 fb1b 	bl	8006584 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000448 	.word	0x20000448

08002f58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
	return 1;
 8002f5c:	2301      	movs	r3, #1
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <_kill>:

int _kill(int pid, int sig)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f72:	f006 fcfd 	bl	8009970 <__errno>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2216      	movs	r2, #22
 8002f7a:	601a      	str	r2, [r3, #0]
	return -1;
 8002f7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <_exit>:

void _exit (int status)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f90:	f04f 31ff 	mov.w	r1, #4294967295
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff ffe7 	bl	8002f68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f9a:	bf00      	nop
 8002f9c:	e7fd      	b.n	8002f9a <_exit+0x12>

08002f9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b086      	sub	sp, #24
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	e00a      	b.n	8002fc6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002fb0:	f3af 8000 	nop.w
 8002fb4:	4601      	mov	r1, r0
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	60ba      	str	r2, [r7, #8]
 8002fbc:	b2ca      	uxtb	r2, r1
 8002fbe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	dbf0      	blt.n	8002fb0 <_read+0x12>
	}

return len;
 8002fce:	687b      	ldr	r3, [r7, #4]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	e009      	b.n	8002ffe <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	60ba      	str	r2, [r7, #8]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	429a      	cmp	r2, r3
 8003004:	dbf1      	blt.n	8002fea <_write+0x12>
	}
	return len;
 8003006:	687b      	ldr	r3, [r7, #4]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <_close>:

int _close(int file)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
	return -1;
 8003018:	f04f 33ff 	mov.w	r3, #4294967295
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003038:	605a      	str	r2, [r3, #4]
	return 0;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <_isatty>:

int _isatty(int file)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
	return 1;
 8003050:	2301      	movs	r3, #1
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800305e:	b480      	push	{r7}
 8003060:	b085      	sub	sp, #20
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
	return 0;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003080:	4a14      	ldr	r2, [pc, #80]	@ (80030d4 <_sbrk+0x5c>)
 8003082:	4b15      	ldr	r3, [pc, #84]	@ (80030d8 <_sbrk+0x60>)
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800308c:	4b13      	ldr	r3, [pc, #76]	@ (80030dc <_sbrk+0x64>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d102      	bne.n	800309a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003094:	4b11      	ldr	r3, [pc, #68]	@ (80030dc <_sbrk+0x64>)
 8003096:	4a12      	ldr	r2, [pc, #72]	@ (80030e0 <_sbrk+0x68>)
 8003098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800309a:	4b10      	ldr	r3, [pc, #64]	@ (80030dc <_sbrk+0x64>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4413      	add	r3, r2
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d207      	bcs.n	80030b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030a8:	f006 fc62 	bl	8009970 <__errno>
 80030ac:	4603      	mov	r3, r0
 80030ae:	220c      	movs	r2, #12
 80030b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030b2:	f04f 33ff 	mov.w	r3, #4294967295
 80030b6:	e009      	b.n	80030cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030b8:	4b08      	ldr	r3, [pc, #32]	@ (80030dc <_sbrk+0x64>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030be:	4b07      	ldr	r3, [pc, #28]	@ (80030dc <_sbrk+0x64>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4413      	add	r3, r2
 80030c6:	4a05      	ldr	r2, [pc, #20]	@ (80030dc <_sbrk+0x64>)
 80030c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030ca:	68fb      	ldr	r3, [r7, #12]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20020000 	.word	0x20020000
 80030d8:	00000400 	.word	0x00000400
 80030dc:	200006ac 	.word	0x200006ac
 80030e0:	20000890 	.word	0x20000890

080030e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80030e8:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <SystemInit+0x20>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ee:	4a05      	ldr	r2, [pc, #20]	@ (8003104 <SystemInit+0x20>)
 80030f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030f8:	bf00      	nop
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003108:	480d      	ldr	r0, [pc, #52]	@ (8003140 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800310a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800310c:	f7ff ffea 	bl	80030e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003110:	480c      	ldr	r0, [pc, #48]	@ (8003144 <LoopForever+0x6>)
  ldr r1, =_edata
 8003112:	490d      	ldr	r1, [pc, #52]	@ (8003148 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003114:	4a0d      	ldr	r2, [pc, #52]	@ (800314c <LoopForever+0xe>)
  movs r3, #0
 8003116:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003118:	e002      	b.n	8003120 <LoopCopyDataInit>

0800311a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800311a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800311c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800311e:	3304      	adds	r3, #4

08003120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003124:	d3f9      	bcc.n	800311a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003126:	4a0a      	ldr	r2, [pc, #40]	@ (8003150 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003128:	4c0a      	ldr	r4, [pc, #40]	@ (8003154 <LoopForever+0x16>)
  movs r3, #0
 800312a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800312c:	e001      	b.n	8003132 <LoopFillZerobss>

0800312e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800312e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003130:	3204      	adds	r2, #4

08003132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003134:	d3fb      	bcc.n	800312e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003136:	f006 fc21 	bl	800997c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800313a:	f7ff fb77 	bl	800282c <main>

0800313e <LoopForever>:

LoopForever:
    b LoopForever
 800313e:	e7fe      	b.n	800313e <LoopForever>
  ldr   r0, =_estack
 8003140:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003148:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 800314c:	0800d580 	.word	0x0800d580
  ldr r2, =_sbss
 8003150:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8003154:	2000088c 	.word	0x2000088c

08003158 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003158:	e7fe      	b.n	8003158 <ADC1_2_IRQHandler>

0800315a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003164:	2003      	movs	r0, #3
 8003166:	f000 f8ca 	bl	80032fe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800316a:	200f      	movs	r0, #15
 800316c:	f7ff fe4e 	bl	8002e0c <HAL_InitTick>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	71fb      	strb	r3, [r7, #7]
 800317a:	e001      	b.n	8003180 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800317c:	f7ff fc1a 	bl	80029b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003180:	79fb      	ldrb	r3, [r7, #7]

}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return uwTick;
 8003190:	4b03      	ldr	r3, [pc, #12]	@ (80031a0 <HAL_GetTick+0x14>)
 8003192:	681b      	ldr	r3, [r3, #0]
 }
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	200006b0 	.word	0x200006b0

080031a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b4:	4b0c      	ldr	r3, [pc, #48]	@ (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031c0:	4013      	ands	r3, r2
 80031c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d6:	4a04      	ldr	r2, [pc, #16]	@ (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	60d3      	str	r3, [r2, #12]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f0:	4b04      	ldr	r3, [pc, #16]	@ (8003204 <__NVIC_GetPriorityGrouping+0x18>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	0a1b      	lsrs	r3, r3, #8
 80031f6:	f003 0307 	and.w	r3, r3, #7
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003216:	2b00      	cmp	r3, #0
 8003218:	db0b      	blt.n	8003232 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	f003 021f 	and.w	r2, r3, #31
 8003220:	4907      	ldr	r1, [pc, #28]	@ (8003240 <__NVIC_EnableIRQ+0x38>)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	2001      	movs	r0, #1
 800322a:	fa00 f202 	lsl.w	r2, r0, r2
 800322e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	e000e100 	.word	0xe000e100

08003244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	6039      	str	r1, [r7, #0]
 800324e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003254:	2b00      	cmp	r3, #0
 8003256:	db0a      	blt.n	800326e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	490c      	ldr	r1, [pc, #48]	@ (8003290 <__NVIC_SetPriority+0x4c>)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	0112      	lsls	r2, r2, #4
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	440b      	add	r3, r1
 8003268:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800326c:	e00a      	b.n	8003284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	b2da      	uxtb	r2, r3
 8003272:	4908      	ldr	r1, [pc, #32]	@ (8003294 <__NVIC_SetPriority+0x50>)
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	3b04      	subs	r3, #4
 800327c:	0112      	lsls	r2, r2, #4
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	440b      	add	r3, r1
 8003282:	761a      	strb	r2, [r3, #24]
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000e100 	.word	0xe000e100
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	@ 0x24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f1c3 0307 	rsb	r3, r3, #7
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	bf28      	it	cs
 80032b6:	2304      	movcs	r3, #4
 80032b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3304      	adds	r3, #4
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d902      	bls.n	80032c8 <NVIC_EncodePriority+0x30>
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3b03      	subs	r3, #3
 80032c6:	e000      	b.n	80032ca <NVIC_EncodePriority+0x32>
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	f04f 32ff 	mov.w	r2, #4294967295
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43da      	mvns	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	401a      	ands	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e0:	f04f 31ff 	mov.w	r1, #4294967295
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ea:	43d9      	mvns	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f0:	4313      	orrs	r3, r2
         );
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3724      	adds	r7, #36	@ 0x24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ff4c 	bl	80031a4 <__NVIC_SetPriorityGrouping>
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003322:	f7ff ff63 	bl	80031ec <__NVIC_GetPriorityGrouping>
 8003326:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	6978      	ldr	r0, [r7, #20]
 800332e:	f7ff ffb3 	bl	8003298 <NVIC_EncodePriority>
 8003332:	4602      	mov	r2, r0
 8003334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff ff82 	bl	8003244 <__NVIC_SetPriority>
}
 8003340:	bf00      	nop
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff ff56 	bl	8003208 <__NVIC_EnableIRQ>
}
 800335c:	bf00      	nop
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d005      	beq.n	8003388 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2204      	movs	r2, #4
 8003380:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	73fb      	strb	r3, [r7, #15]
 8003386:	e037      	b.n	80033f8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 020e 	bic.w	r2, r2, #14
 8003396:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033a6:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033bc:	f003 021f 	and.w	r2, r3, #31
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	2101      	movs	r1, #1
 80033c6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ca:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80033d4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00c      	beq.n	80033f8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033ec:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80033f6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003408:	7bfb      	ldrb	r3, [r7, #15]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d00d      	beq.n	800344a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2204      	movs	r2, #4
 8003432:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
 8003448:	e047      	b.n	80034da <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 020e 	bic.w	r2, r2, #14
 8003458:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0201 	bic.w	r2, r2, #1
 8003468:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003474:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003478:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347e:	f003 021f 	and.w	r2, r3, #31
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	2101      	movs	r1, #1
 8003488:	fa01 f202 	lsl.w	r2, r1, r2
 800348c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003496:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00c      	beq.n	80034ba <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80034b8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	4798      	blx	r3
    }
  }
  return status;
 80034da:	7bfb      	ldrb	r3, [r7, #15]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034f2:	e15a      	b.n	80037aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	2101      	movs	r1, #1
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003500:	4013      	ands	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 814c 	beq.w	80037a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	2b01      	cmp	r3, #1
 8003516:	d005      	beq.n	8003524 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003520:	2b02      	cmp	r3, #2
 8003522:	d130      	bne.n	8003586 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	2203      	movs	r2, #3
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4013      	ands	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800355a:	2201      	movs	r2, #1
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4013      	ands	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	091b      	lsrs	r3, r3, #4
 8003570:	f003 0201 	and.w	r2, r3, #1
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	2b03      	cmp	r3, #3
 8003590:	d017      	beq.n	80035c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	2203      	movs	r2, #3
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	43db      	mvns	r3, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4013      	ands	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d123      	bne.n	8003616 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	08da      	lsrs	r2, r3, #3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3208      	adds	r2, #8
 80035d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	220f      	movs	r2, #15
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43db      	mvns	r3, r3
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	4013      	ands	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	691a      	ldr	r2, [r3, #16]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	08da      	lsrs	r2, r3, #3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3208      	adds	r2, #8
 8003610:	6939      	ldr	r1, [r7, #16]
 8003612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	2203      	movs	r2, #3
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	43db      	mvns	r3, r3
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4013      	ands	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f003 0203 	and.w	r2, r3, #3
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 80a6 	beq.w	80037a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003658:	4b5b      	ldr	r3, [pc, #364]	@ (80037c8 <HAL_GPIO_Init+0x2e4>)
 800365a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800365c:	4a5a      	ldr	r2, [pc, #360]	@ (80037c8 <HAL_GPIO_Init+0x2e4>)
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	6613      	str	r3, [r2, #96]	@ 0x60
 8003664:	4b58      	ldr	r3, [pc, #352]	@ (80037c8 <HAL_GPIO_Init+0x2e4>)
 8003666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003670:	4a56      	ldr	r2, [pc, #344]	@ (80037cc <HAL_GPIO_Init+0x2e8>)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	089b      	lsrs	r3, r3, #2
 8003676:	3302      	adds	r3, #2
 8003678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800367c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f003 0303 	and.w	r3, r3, #3
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	220f      	movs	r2, #15
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4013      	ands	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800369a:	d01f      	beq.n	80036dc <HAL_GPIO_Init+0x1f8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a4c      	ldr	r2, [pc, #304]	@ (80037d0 <HAL_GPIO_Init+0x2ec>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d019      	beq.n	80036d8 <HAL_GPIO_Init+0x1f4>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a4b      	ldr	r2, [pc, #300]	@ (80037d4 <HAL_GPIO_Init+0x2f0>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d013      	beq.n	80036d4 <HAL_GPIO_Init+0x1f0>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a4a      	ldr	r2, [pc, #296]	@ (80037d8 <HAL_GPIO_Init+0x2f4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00d      	beq.n	80036d0 <HAL_GPIO_Init+0x1ec>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a49      	ldr	r2, [pc, #292]	@ (80037dc <HAL_GPIO_Init+0x2f8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d007      	beq.n	80036cc <HAL_GPIO_Init+0x1e8>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a48      	ldr	r2, [pc, #288]	@ (80037e0 <HAL_GPIO_Init+0x2fc>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d101      	bne.n	80036c8 <HAL_GPIO_Init+0x1e4>
 80036c4:	2305      	movs	r3, #5
 80036c6:	e00a      	b.n	80036de <HAL_GPIO_Init+0x1fa>
 80036c8:	2306      	movs	r3, #6
 80036ca:	e008      	b.n	80036de <HAL_GPIO_Init+0x1fa>
 80036cc:	2304      	movs	r3, #4
 80036ce:	e006      	b.n	80036de <HAL_GPIO_Init+0x1fa>
 80036d0:	2303      	movs	r3, #3
 80036d2:	e004      	b.n	80036de <HAL_GPIO_Init+0x1fa>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e002      	b.n	80036de <HAL_GPIO_Init+0x1fa>
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <HAL_GPIO_Init+0x1fa>
 80036dc:	2300      	movs	r3, #0
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	f002 0203 	and.w	r2, r2, #3
 80036e4:	0092      	lsls	r2, r2, #2
 80036e6:	4093      	lsls	r3, r2
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036ee:	4937      	ldr	r1, [pc, #220]	@ (80037cc <HAL_GPIO_Init+0x2e8>)
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	089b      	lsrs	r3, r3, #2
 80036f4:	3302      	adds	r3, #2
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036fc:	4b39      	ldr	r3, [pc, #228]	@ (80037e4 <HAL_GPIO_Init+0x300>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	43db      	mvns	r3, r3
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003720:	4a30      	ldr	r2, [pc, #192]	@ (80037e4 <HAL_GPIO_Init+0x300>)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003726:	4b2f      	ldr	r3, [pc, #188]	@ (80037e4 <HAL_GPIO_Init+0x300>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	43db      	mvns	r3, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800374a:	4a26      	ldr	r2, [pc, #152]	@ (80037e4 <HAL_GPIO_Init+0x300>)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003750:	4b24      	ldr	r3, [pc, #144]	@ (80037e4 <HAL_GPIO_Init+0x300>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	43db      	mvns	r3, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003774:	4a1b      	ldr	r2, [pc, #108]	@ (80037e4 <HAL_GPIO_Init+0x300>)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800377a:	4b1a      	ldr	r3, [pc, #104]	@ (80037e4 <HAL_GPIO_Init+0x300>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	43db      	mvns	r3, r3
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4013      	ands	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800379e:	4a11      	ldr	r2, [pc, #68]	@ (80037e4 <HAL_GPIO_Init+0x300>)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	3301      	adds	r3, #1
 80037a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f47f ae9d 	bne.w	80034f4 <HAL_GPIO_Init+0x10>
  }
}
 80037ba:	bf00      	nop
 80037bc:	bf00      	nop
 80037be:	371c      	adds	r7, #28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40010000 	.word	0x40010000
 80037d0:	48000400 	.word	0x48000400
 80037d4:	48000800 	.word	0x48000800
 80037d8:	48000c00 	.word	0x48000c00
 80037dc:	48001000 	.word	0x48001000
 80037e0:	48001400 	.word	0x48001400
 80037e4:	40010400 	.word	0x40010400

080037e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	807b      	strh	r3, [r7, #2]
 80037f4:	4613      	mov	r3, r2
 80037f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037f8:	787b      	ldrb	r3, [r7, #1]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037fe:	887a      	ldrh	r2, [r7, #2]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003804:	e002      	b.n	800380c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003806:	887a      	ldrh	r2, [r7, #2]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d141      	bne.n	80038aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003826:	4b4b      	ldr	r3, [pc, #300]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800382e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003832:	d131      	bne.n	8003898 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003834:	4b47      	ldr	r3, [pc, #284]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800383a:	4a46      	ldr	r2, [pc, #280]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800383c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003840:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003844:	4b43      	ldr	r3, [pc, #268]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800384c:	4a41      	ldr	r2, [pc, #260]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003852:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003854:	4b40      	ldr	r3, [pc, #256]	@ (8003958 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2232      	movs	r2, #50	@ 0x32
 800385a:	fb02 f303 	mul.w	r3, r2, r3
 800385e:	4a3f      	ldr	r2, [pc, #252]	@ (800395c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	0c9b      	lsrs	r3, r3, #18
 8003866:	3301      	adds	r3, #1
 8003868:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800386a:	e002      	b.n	8003872 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3b01      	subs	r3, #1
 8003870:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003872:	4b38      	ldr	r3, [pc, #224]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800387e:	d102      	bne.n	8003886 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f2      	bne.n	800386c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003886:	4b33      	ldr	r3, [pc, #204]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800388e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003892:	d158      	bne.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e057      	b.n	8003948 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003898:	4b2e      	ldr	r3, [pc, #184]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800389a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800389e:	4a2d      	ldr	r2, [pc, #180]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80038a8:	e04d      	b.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038b0:	d141      	bne.n	8003936 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038b2:	4b28      	ldr	r3, [pc, #160]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038be:	d131      	bne.n	8003924 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038c0:	4b24      	ldr	r3, [pc, #144]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038c6:	4a23      	ldr	r2, [pc, #140]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038d0:	4b20      	ldr	r3, [pc, #128]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003958 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2232      	movs	r2, #50	@ 0x32
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	4a1c      	ldr	r2, [pc, #112]	@ (800395c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038ec:	fba2 2303 	umull	r2, r3, r2, r3
 80038f0:	0c9b      	lsrs	r3, r3, #18
 80038f2:	3301      	adds	r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038f6:	e002      	b.n	80038fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038fe:	4b15      	ldr	r3, [pc, #84]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003906:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800390a:	d102      	bne.n	8003912 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f2      	bne.n	80038f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003912:	4b10      	ldr	r3, [pc, #64]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800391a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800391e:	d112      	bne.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e011      	b.n	8003948 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003924:	4b0b      	ldr	r3, [pc, #44]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800392a:	4a0a      	ldr	r2, [pc, #40]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800392c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003930:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003934:	e007      	b.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003936:	4b07      	ldr	r3, [pc, #28]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800393e:	4a05      	ldr	r2, [pc, #20]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003940:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003944:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	40007000 	.word	0x40007000
 8003958:	20000000 	.word	0x20000000
 800395c:	431bde83 	.word	0x431bde83

08003960 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4a04      	ldr	r2, [pc, #16]	@ (800397c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800396a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800396e:	6093      	str	r3, [r2, #8]
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40007000 	.word	0x40007000

08003980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e2fe      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d075      	beq.n	8003a8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800399e:	4b97      	ldr	r3, [pc, #604]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039a8:	4b94      	ldr	r3, [pc, #592]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b0c      	cmp	r3, #12
 80039b6:	d102      	bne.n	80039be <HAL_RCC_OscConfig+0x3e>
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d002      	beq.n	80039c4 <HAL_RCC_OscConfig+0x44>
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d10b      	bne.n	80039dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c4:	4b8d      	ldr	r3, [pc, #564]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d05b      	beq.n	8003a88 <HAL_RCC_OscConfig+0x108>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d157      	bne.n	8003a88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e2d9      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e4:	d106      	bne.n	80039f4 <HAL_RCC_OscConfig+0x74>
 80039e6:	4b85      	ldr	r3, [pc, #532]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a84      	ldr	r2, [pc, #528]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e01d      	b.n	8003a30 <HAL_RCC_OscConfig+0xb0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x98>
 80039fe:	4b7f      	ldr	r3, [pc, #508]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a7e      	ldr	r2, [pc, #504]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	4b7c      	ldr	r3, [pc, #496]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a7b      	ldr	r2, [pc, #492]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e00b      	b.n	8003a30 <HAL_RCC_OscConfig+0xb0>
 8003a18:	4b78      	ldr	r3, [pc, #480]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a77      	ldr	r2, [pc, #476]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	4b75      	ldr	r3, [pc, #468]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a74      	ldr	r2, [pc, #464]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d013      	beq.n	8003a60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7ff fba8 	bl	800318c <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a40:	f7ff fba4 	bl	800318c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	@ 0x64
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e29e      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a52:	4b6a      	ldr	r3, [pc, #424]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0xc0>
 8003a5e:	e014      	b.n	8003a8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7ff fb94 	bl	800318c <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a68:	f7ff fb90 	bl	800318c <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b64      	cmp	r3, #100	@ 0x64
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e28a      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a7a:	4b60      	ldr	r3, [pc, #384]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0xe8>
 8003a86:	e000      	b.n	8003a8a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d075      	beq.n	8003b82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a96:	4b59      	ldr	r3, [pc, #356]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aa0:	4b56      	ldr	r3, [pc, #344]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b0c      	cmp	r3, #12
 8003aae:	d102      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x136>
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d002      	beq.n	8003abc <HAL_RCC_OscConfig+0x13c>
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d11f      	bne.n	8003afc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003abc:	4b4f      	ldr	r3, [pc, #316]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x154>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e25d      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad4:	4b49      	ldr	r3, [pc, #292]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	061b      	lsls	r3, r3, #24
 8003ae2:	4946      	ldr	r1, [pc, #280]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ae8:	4b45      	ldr	r3, [pc, #276]	@ (8003c00 <HAL_RCC_OscConfig+0x280>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff f98d 	bl	8002e0c <HAL_InitTick>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d043      	beq.n	8003b80 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e249      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d023      	beq.n	8003b4c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b04:	4b3d      	ldr	r3, [pc, #244]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a3c      	ldr	r2, [pc, #240]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b10:	f7ff fb3c 	bl	800318c <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b18:	f7ff fb38 	bl	800318c <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e232      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b2a:	4b34      	ldr	r3, [pc, #208]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b36:	4b31      	ldr	r3, [pc, #196]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	061b      	lsls	r3, r3, #24
 8003b44:	492d      	ldr	r1, [pc, #180]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	604b      	str	r3, [r1, #4]
 8003b4a:	e01a      	b.n	8003b82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a2a      	ldr	r2, [pc, #168]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7ff fb18 	bl	800318c <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b60:	f7ff fb14 	bl	800318c <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e20e      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b72:	4b22      	ldr	r3, [pc, #136]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x1e0>
 8003b7e:	e000      	b.n	8003b82 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d041      	beq.n	8003c12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d01c      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b96:	4b19      	ldr	r3, [pc, #100]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b9c:	4a17      	ldr	r2, [pc, #92]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba6:	f7ff faf1 	bl	800318c <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bae:	f7ff faed 	bl	800318c <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e1e7      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0ef      	beq.n	8003bae <HAL_RCC_OscConfig+0x22e>
 8003bce:	e020      	b.n	8003c12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bd6:	4a09      	ldr	r2, [pc, #36]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003bd8:	f023 0301 	bic.w	r3, r3, #1
 8003bdc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be0:	f7ff fad4 	bl	800318c <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003be6:	e00d      	b.n	8003c04 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be8:	f7ff fad0 	bl	800318c <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d906      	bls.n	8003c04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e1ca      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
 8003bfa:	bf00      	nop
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c04:	4b8c      	ldr	r3, [pc, #560]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1ea      	bne.n	8003be8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 80a6 	beq.w	8003d6c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c20:	2300      	movs	r3, #0
 8003c22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c24:	4b84      	ldr	r3, [pc, #528]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_RCC_OscConfig+0x2b4>
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <HAL_RCC_OscConfig+0x2b6>
 8003c34:	2300      	movs	r3, #0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00d      	beq.n	8003c56 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c3a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c44:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c46:	4b7c      	ldr	r3, [pc, #496]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c52:	2301      	movs	r3, #1
 8003c54:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c56:	4b79      	ldr	r3, [pc, #484]	@ (8003e3c <HAL_RCC_OscConfig+0x4bc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d118      	bne.n	8003c94 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c62:	4b76      	ldr	r3, [pc, #472]	@ (8003e3c <HAL_RCC_OscConfig+0x4bc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a75      	ldr	r2, [pc, #468]	@ (8003e3c <HAL_RCC_OscConfig+0x4bc>)
 8003c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c6e:	f7ff fa8d 	bl	800318c <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c76:	f7ff fa89 	bl	800318c <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e183      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c88:	4b6c      	ldr	r3, [pc, #432]	@ (8003e3c <HAL_RCC_OscConfig+0x4bc>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d108      	bne.n	8003cae <HAL_RCC_OscConfig+0x32e>
 8003c9c:	4b66      	ldr	r3, [pc, #408]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca2:	4a65      	ldr	r2, [pc, #404]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cac:	e024      	b.n	8003cf8 <HAL_RCC_OscConfig+0x378>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b05      	cmp	r3, #5
 8003cb4:	d110      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x358>
 8003cb6:	4b60      	ldr	r3, [pc, #384]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cbc:	4a5e      	ldr	r2, [pc, #376]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003cbe:	f043 0304 	orr.w	r3, r3, #4
 8003cc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cc6:	4b5c      	ldr	r3, [pc, #368]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ccc:	4a5a      	ldr	r2, [pc, #360]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cd6:	e00f      	b.n	8003cf8 <HAL_RCC_OscConfig+0x378>
 8003cd8:	4b57      	ldr	r3, [pc, #348]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cde:	4a56      	ldr	r2, [pc, #344]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003ce0:	f023 0301 	bic.w	r3, r3, #1
 8003ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ce8:	4b53      	ldr	r3, [pc, #332]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cee:	4a52      	ldr	r2, [pc, #328]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003cf0:	f023 0304 	bic.w	r3, r3, #4
 8003cf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d016      	beq.n	8003d2e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d00:	f7ff fa44 	bl	800318c <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d06:	e00a      	b.n	8003d1e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d08:	f7ff fa40 	bl	800318c <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e138      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d1e:	4b46      	ldr	r3, [pc, #280]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0ed      	beq.n	8003d08 <HAL_RCC_OscConfig+0x388>
 8003d2c:	e015      	b.n	8003d5a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2e:	f7ff fa2d 	bl	800318c <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d34:	e00a      	b.n	8003d4c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d36:	f7ff fa29 	bl	800318c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e121      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d4c:	4b3a      	ldr	r3, [pc, #232]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1ed      	bne.n	8003d36 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d5a:	7ffb      	ldrb	r3, [r7, #31]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d105      	bne.n	8003d6c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d60:	4b35      	ldr	r3, [pc, #212]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d64:	4a34      	ldr	r2, [pc, #208]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003d66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d6a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d03c      	beq.n	8003df2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01c      	beq.n	8003dba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d80:	4b2d      	ldr	r3, [pc, #180]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003d82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d86:	4a2c      	ldr	r2, [pc, #176]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d90:	f7ff f9fc 	bl	800318c <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d98:	f7ff f9f8 	bl	800318c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e0f2      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003daa:	4b23      	ldr	r3, [pc, #140]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003dac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0ef      	beq.n	8003d98 <HAL_RCC_OscConfig+0x418>
 8003db8:	e01b      	b.n	8003df2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dba:	4b1f      	ldr	r3, [pc, #124]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003dbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003dc2:	f023 0301 	bic.w	r3, r3, #1
 8003dc6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dca:	f7ff f9df 	bl	800318c <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dd2:	f7ff f9db 	bl	800318c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e0d5      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003de4:	4b14      	ldr	r3, [pc, #80]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003de6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1ef      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 80c9 	beq.w	8003f8e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 030c 	and.w	r3, r3, #12
 8003e04:	2b0c      	cmp	r3, #12
 8003e06:	f000 8083 	beq.w	8003f10 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d15e      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e12:	4b09      	ldr	r3, [pc, #36]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a08      	ldr	r2, [pc, #32]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003e18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1e:	f7ff f9b5 	bl	800318c <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e24:	e00c      	b.n	8003e40 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e26:	f7ff f9b1 	bl	800318c <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d905      	bls.n	8003e40 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e0ab      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e40:	4b55      	ldr	r3, [pc, #340]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1ec      	bne.n	8003e26 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e4c:	4b52      	ldr	r3, [pc, #328]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	4b52      	ldr	r3, [pc, #328]	@ (8003f9c <HAL_RCC_OscConfig+0x61c>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6a11      	ldr	r1, [r2, #32]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e5c:	3a01      	subs	r2, #1
 8003e5e:	0112      	lsls	r2, r2, #4
 8003e60:	4311      	orrs	r1, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003e66:	0212      	lsls	r2, r2, #8
 8003e68:	4311      	orrs	r1, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e6e:	0852      	lsrs	r2, r2, #1
 8003e70:	3a01      	subs	r2, #1
 8003e72:	0552      	lsls	r2, r2, #21
 8003e74:	4311      	orrs	r1, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e7a:	0852      	lsrs	r2, r2, #1
 8003e7c:	3a01      	subs	r2, #1
 8003e7e:	0652      	lsls	r2, r2, #25
 8003e80:	4311      	orrs	r1, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e86:	06d2      	lsls	r2, r2, #27
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	4943      	ldr	r1, [pc, #268]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e90:	4b41      	ldr	r3, [pc, #260]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a40      	ldr	r2, [pc, #256]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003e96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e9a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e9c:	4b3e      	ldr	r3, [pc, #248]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4a3d      	ldr	r2, [pc, #244]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003ea2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ea6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7ff f970 	bl	800318c <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb0:	f7ff f96c 	bl	800318c <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e066      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ec2:	4b35      	ldr	r3, [pc, #212]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x530>
 8003ece:	e05e      	b.n	8003f8e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed0:	4b31      	ldr	r3, [pc, #196]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a30      	ldr	r2, [pc, #192]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003ed6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7ff f956 	bl	800318c <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7ff f952 	bl	800318c <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e04c      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef6:	4b28      	ldr	r3, [pc, #160]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003f02:	4b25      	ldr	r3, [pc, #148]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	4924      	ldr	r1, [pc, #144]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003f08:	4b25      	ldr	r3, [pc, #148]	@ (8003fa0 <HAL_RCC_OscConfig+0x620>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	60cb      	str	r3, [r1, #12]
 8003f0e:	e03e      	b.n	8003f8e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e039      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f003 0203 	and.w	r2, r3, #3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d12c      	bne.n	8003f8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d123      	bne.n	8003f8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d11b      	bne.n	8003f8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d113      	bne.n	8003f8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6c:	085b      	lsrs	r3, r3, #1
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d109      	bne.n	8003f8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	3b01      	subs	r3, #1
 8003f84:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d001      	beq.n	8003f8e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3720      	adds	r7, #32
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	019f800c 	.word	0x019f800c
 8003fa0:	feeefffc 	.word	0xfeeefffc

08003fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e11e      	b.n	80041fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fbc:	4b91      	ldr	r3, [pc, #580]	@ (8004204 <HAL_RCC_ClockConfig+0x260>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d910      	bls.n	8003fec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fca:	4b8e      	ldr	r3, [pc, #568]	@ (8004204 <HAL_RCC_ClockConfig+0x260>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 020f 	bic.w	r2, r3, #15
 8003fd2:	498c      	ldr	r1, [pc, #560]	@ (8004204 <HAL_RCC_ClockConfig+0x260>)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fda:	4b8a      	ldr	r3, [pc, #552]	@ (8004204 <HAL_RCC_ClockConfig+0x260>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e106      	b.n	80041fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d073      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d129      	bne.n	8004054 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004000:	4b81      	ldr	r3, [pc, #516]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0f4      	b.n	80041fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004010:	f000 f9d0 	bl	80043b4 <RCC_GetSysClockFreqFromPLLSource>
 8004014:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4a7c      	ldr	r2, [pc, #496]	@ (800420c <HAL_RCC_ClockConfig+0x268>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d93f      	bls.n	800409e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800401e:	4b7a      	ldr	r3, [pc, #488]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d009      	beq.n	800403e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004032:	2b00      	cmp	r3, #0
 8004034:	d033      	beq.n	800409e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800403a:	2b00      	cmp	r3, #0
 800403c:	d12f      	bne.n	800409e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800403e:	4b72      	ldr	r3, [pc, #456]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004046:	4a70      	ldr	r2, [pc, #448]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800404c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800404e:	2380      	movs	r3, #128	@ 0x80
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	e024      	b.n	800409e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d107      	bne.n	800406c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800405c:	4b6a      	ldr	r3, [pc, #424]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0c6      	b.n	80041fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800406c:	4b66      	ldr	r3, [pc, #408]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0be      	b.n	80041fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800407c:	f000 f8ce 	bl	800421c <HAL_RCC_GetSysClockFreq>
 8004080:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4a61      	ldr	r2, [pc, #388]	@ (800420c <HAL_RCC_ClockConfig+0x268>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d909      	bls.n	800409e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800408a:	4b5f      	ldr	r3, [pc, #380]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004092:	4a5d      	ldr	r2, [pc, #372]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004098:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800409a:	2380      	movs	r3, #128	@ 0x80
 800409c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800409e:	4b5a      	ldr	r3, [pc, #360]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f023 0203 	bic.w	r2, r3, #3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	4957      	ldr	r1, [pc, #348]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b0:	f7ff f86c 	bl	800318c <HAL_GetTick>
 80040b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b6:	e00a      	b.n	80040ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b8:	f7ff f868 	bl	800318c <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e095      	b.n	80041fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ce:	4b4e      	ldr	r3, [pc, #312]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 020c 	and.w	r2, r3, #12
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	429a      	cmp	r2, r3
 80040de:	d1eb      	bne.n	80040b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d023      	beq.n	8004134 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040f8:	4b43      	ldr	r3, [pc, #268]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4a42      	ldr	r2, [pc, #264]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 80040fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004102:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004110:	4b3d      	ldr	r3, [pc, #244]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004118:	4a3b      	ldr	r2, [pc, #236]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 800411a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800411e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004120:	4b39      	ldr	r3, [pc, #228]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	4936      	ldr	r1, [pc, #216]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 800412e:	4313      	orrs	r3, r2
 8004130:	608b      	str	r3, [r1, #8]
 8004132:	e008      	b.n	8004146 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2b80      	cmp	r3, #128	@ 0x80
 8004138:	d105      	bne.n	8004146 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800413a:	4b33      	ldr	r3, [pc, #204]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	4a32      	ldr	r2, [pc, #200]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004140:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004144:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004146:	4b2f      	ldr	r3, [pc, #188]	@ (8004204 <HAL_RCC_ClockConfig+0x260>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d21d      	bcs.n	8004190 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004154:	4b2b      	ldr	r3, [pc, #172]	@ (8004204 <HAL_RCC_ClockConfig+0x260>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f023 020f 	bic.w	r2, r3, #15
 800415c:	4929      	ldr	r1, [pc, #164]	@ (8004204 <HAL_RCC_ClockConfig+0x260>)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	4313      	orrs	r3, r2
 8004162:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004164:	f7ff f812 	bl	800318c <HAL_GetTick>
 8004168:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	e00a      	b.n	8004182 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416c:	f7ff f80e 	bl	800318c <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e03b      	b.n	80041fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004182:	4b20      	ldr	r3, [pc, #128]	@ (8004204 <HAL_RCC_ClockConfig+0x260>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d1ed      	bne.n	800416c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d008      	beq.n	80041ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800419c:	4b1a      	ldr	r3, [pc, #104]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	4917      	ldr	r1, [pc, #92]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d009      	beq.n	80041ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ba:	4b13      	ldr	r3, [pc, #76]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	490f      	ldr	r1, [pc, #60]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041ce:	f000 f825 	bl	800421c <HAL_RCC_GetSysClockFreq>
 80041d2:	4602      	mov	r2, r0
 80041d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	091b      	lsrs	r3, r3, #4
 80041da:	f003 030f 	and.w	r3, r3, #15
 80041de:	490c      	ldr	r1, [pc, #48]	@ (8004210 <HAL_RCC_ClockConfig+0x26c>)
 80041e0:	5ccb      	ldrb	r3, [r1, r3]
 80041e2:	f003 031f 	and.w	r3, r3, #31
 80041e6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004214 <HAL_RCC_ClockConfig+0x270>)
 80041ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004218 <HAL_RCC_ClockConfig+0x274>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fe fe0a 	bl	8002e0c <HAL_InitTick>
 80041f8:	4603      	mov	r3, r0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40022000 	.word	0x40022000
 8004208:	40021000 	.word	0x40021000
 800420c:	04c4b400 	.word	0x04c4b400
 8004210:	0800d104 	.word	0x0800d104
 8004214:	20000000 	.word	0x20000000
 8004218:	20000004 	.word	0x20000004

0800421c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004222:	4b2c      	ldr	r3, [pc, #176]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 030c 	and.w	r3, r3, #12
 800422a:	2b04      	cmp	r3, #4
 800422c:	d102      	bne.n	8004234 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800422e:	4b2a      	ldr	r3, [pc, #168]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	e047      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004234:	4b27      	ldr	r3, [pc, #156]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 030c 	and.w	r3, r3, #12
 800423c:	2b08      	cmp	r3, #8
 800423e:	d102      	bne.n	8004246 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004240:	4b26      	ldr	r3, [pc, #152]	@ (80042dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	e03e      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004246:	4b23      	ldr	r3, [pc, #140]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 030c 	and.w	r3, r3, #12
 800424e:	2b0c      	cmp	r3, #12
 8004250:	d136      	bne.n	80042c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004252:	4b20      	ldr	r3, [pc, #128]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800425c:	4b1d      	ldr	r3, [pc, #116]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	3301      	adds	r3, #1
 8004268:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b03      	cmp	r3, #3
 800426e:	d10c      	bne.n	800428a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004270:	4a1a      	ldr	r2, [pc, #104]	@ (80042dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	fbb2 f3f3 	udiv	r3, r2, r3
 8004278:	4a16      	ldr	r2, [pc, #88]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800427a:	68d2      	ldr	r2, [r2, #12]
 800427c:	0a12      	lsrs	r2, r2, #8
 800427e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004282:	fb02 f303 	mul.w	r3, r2, r3
 8004286:	617b      	str	r3, [r7, #20]
      break;
 8004288:	e00c      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800428a:	4a13      	ldr	r2, [pc, #76]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004292:	4a10      	ldr	r2, [pc, #64]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004294:	68d2      	ldr	r2, [r2, #12]
 8004296:	0a12      	lsrs	r2, r2, #8
 8004298:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800429c:	fb02 f303 	mul.w	r3, r2, r3
 80042a0:	617b      	str	r3, [r7, #20]
      break;
 80042a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042a4:	4b0b      	ldr	r3, [pc, #44]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	0e5b      	lsrs	r3, r3, #25
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	3301      	adds	r3, #1
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042bc:	613b      	str	r3, [r7, #16]
 80042be:	e001      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80042c4:	693b      	ldr	r3, [r7, #16]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000
 80042d8:	00f42400 	.word	0x00f42400
 80042dc:	016e3600 	.word	0x016e3600

080042e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e4:	4b03      	ldr	r3, [pc, #12]	@ (80042f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042e6:	681b      	ldr	r3, [r3, #0]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000000 	.word	0x20000000

080042f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042fc:	f7ff fff0 	bl	80042e0 <HAL_RCC_GetHCLKFreq>
 8004300:	4602      	mov	r2, r0
 8004302:	4b06      	ldr	r3, [pc, #24]	@ (800431c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	0a1b      	lsrs	r3, r3, #8
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	4904      	ldr	r1, [pc, #16]	@ (8004320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800430e:	5ccb      	ldrb	r3, [r1, r3]
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004318:	4618      	mov	r0, r3
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40021000 	.word	0x40021000
 8004320:	0800d114 	.word	0x0800d114

08004324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004328:	f7ff ffda 	bl	80042e0 <HAL_RCC_GetHCLKFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b06      	ldr	r3, [pc, #24]	@ (8004348 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	0adb      	lsrs	r3, r3, #11
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	4904      	ldr	r1, [pc, #16]	@ (800434c <HAL_RCC_GetPCLK2Freq+0x28>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40021000 	.word	0x40021000
 800434c:	0800d114 	.word	0x0800d114

08004350 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	220f      	movs	r2, #15
 800435e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004360:	4b12      	ldr	r3, [pc, #72]	@ (80043ac <HAL_RCC_GetClockConfig+0x5c>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0203 	and.w	r2, r3, #3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800436c:	4b0f      	ldr	r3, [pc, #60]	@ (80043ac <HAL_RCC_GetClockConfig+0x5c>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004378:	4b0c      	ldr	r3, [pc, #48]	@ (80043ac <HAL_RCC_GetClockConfig+0x5c>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004384:	4b09      	ldr	r3, [pc, #36]	@ (80043ac <HAL_RCC_GetClockConfig+0x5c>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	08db      	lsrs	r3, r3, #3
 800438a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004392:	4b07      	ldr	r3, [pc, #28]	@ (80043b0 <HAL_RCC_GetClockConfig+0x60>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 020f 	and.w	r2, r3, #15
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	601a      	str	r2, [r3, #0]
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000
 80043b0:	40022000 	.word	0x40022000

080043b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004434 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004434 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	3301      	adds	r3, #1
 80043d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d10c      	bne.n	80043f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043d8:	4a17      	ldr	r2, [pc, #92]	@ (8004438 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e0:	4a14      	ldr	r2, [pc, #80]	@ (8004434 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043e2:	68d2      	ldr	r2, [r2, #12]
 80043e4:	0a12      	lsrs	r2, r2, #8
 80043e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043ea:	fb02 f303 	mul.w	r3, r2, r3
 80043ee:	617b      	str	r3, [r7, #20]
    break;
 80043f0:	e00c      	b.n	800440c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043f2:	4a12      	ldr	r2, [pc, #72]	@ (800443c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004434 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043fc:	68d2      	ldr	r2, [r2, #12]
 80043fe:	0a12      	lsrs	r2, r2, #8
 8004400:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004404:	fb02 f303 	mul.w	r3, r2, r3
 8004408:	617b      	str	r3, [r7, #20]
    break;
 800440a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800440c:	4b09      	ldr	r3, [pc, #36]	@ (8004434 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	0e5b      	lsrs	r3, r3, #25
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	3301      	adds	r3, #1
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	fbb2 f3f3 	udiv	r3, r2, r3
 8004424:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004426:	687b      	ldr	r3, [r7, #4]
}
 8004428:	4618      	mov	r0, r3
 800442a:	371c      	adds	r7, #28
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	40021000 	.word	0x40021000
 8004438:	016e3600 	.word	0x016e3600
 800443c:	00f42400 	.word	0x00f42400

08004440 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004448:	2300      	movs	r3, #0
 800444a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800444c:	2300      	movs	r3, #0
 800444e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 8098 	beq.w	800458e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800445e:	2300      	movs	r3, #0
 8004460:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004462:	4b43      	ldr	r3, [pc, #268]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10d      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800446e:	4b40      	ldr	r3, [pc, #256]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004472:	4a3f      	ldr	r2, [pc, #252]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004478:	6593      	str	r3, [r2, #88]	@ 0x58
 800447a:	4b3d      	ldr	r3, [pc, #244]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800447c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004482:	60bb      	str	r3, [r7, #8]
 8004484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004486:	2301      	movs	r3, #1
 8004488:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800448a:	4b3a      	ldr	r3, [pc, #232]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a39      	ldr	r2, [pc, #228]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004494:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004496:	f7fe fe79 	bl	800318c <HAL_GetTick>
 800449a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800449c:	e009      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449e:	f7fe fe75 	bl	800318c <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d902      	bls.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	74fb      	strb	r3, [r7, #19]
        break;
 80044b0:	e005      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044b2:	4b30      	ldr	r3, [pc, #192]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0ef      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80044be:	7cfb      	ldrb	r3, [r7, #19]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d159      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044c4:	4b2a      	ldr	r3, [pc, #168]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d01e      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d019      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044e0:	4b23      	ldr	r3, [pc, #140]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044ec:	4b20      	ldr	r3, [pc, #128]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f2:	4a1f      	ldr	r2, [pc, #124]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004502:	4a1b      	ldr	r2, [pc, #108]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004508:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800450c:	4a18      	ldr	r2, [pc, #96]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d016      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451e:	f7fe fe35 	bl	800318c <HAL_GetTick>
 8004522:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004524:	e00b      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004526:	f7fe fe31 	bl	800318c <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004534:	4293      	cmp	r3, r2
 8004536:	d902      	bls.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	74fb      	strb	r3, [r7, #19]
            break;
 800453c:	e006      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800453e:	4b0c      	ldr	r3, [pc, #48]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0ec      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800454c:	7cfb      	ldrb	r3, [r7, #19]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10b      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004552:	4b07      	ldr	r3, [pc, #28]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004558:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004560:	4903      	ldr	r1, [pc, #12]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004568:	e008      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800456a:	7cfb      	ldrb	r3, [r7, #19]
 800456c:	74bb      	strb	r3, [r7, #18]
 800456e:	e005      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004570:	40021000 	.word	0x40021000
 8004574:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004578:	7cfb      	ldrb	r3, [r7, #19]
 800457a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800457c:	7c7b      	ldrb	r3, [r7, #17]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d105      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004582:	4ba7      	ldr	r3, [pc, #668]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004586:	4aa6      	ldr	r2, [pc, #664]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004588:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800458c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800459a:	4ba1      	ldr	r3, [pc, #644]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a0:	f023 0203 	bic.w	r2, r3, #3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	499d      	ldr	r1, [pc, #628]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045bc:	4b98      	ldr	r3, [pc, #608]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c2:	f023 020c 	bic.w	r2, r3, #12
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	4995      	ldr	r1, [pc, #596]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045de:	4b90      	ldr	r3, [pc, #576]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	498c      	ldr	r1, [pc, #560]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004600:	4b87      	ldr	r3, [pc, #540]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004606:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	4984      	ldr	r1, [pc, #528]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0310 	and.w	r3, r3, #16
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004622:	4b7f      	ldr	r3, [pc, #508]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004628:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	497b      	ldr	r1, [pc, #492]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0320 	and.w	r3, r3, #32
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00a      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004644:	4b76      	ldr	r3, [pc, #472]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	4973      	ldr	r1, [pc, #460]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004666:	4b6e      	ldr	r3, [pc, #440]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800466c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	496a      	ldr	r1, [pc, #424]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004676:	4313      	orrs	r3, r2
 8004678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004688:	4b65      	ldr	r3, [pc, #404]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	4962      	ldr	r1, [pc, #392]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046aa:	4b5d      	ldr	r3, [pc, #372]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	4959      	ldr	r1, [pc, #356]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046cc:	4b54      	ldr	r3, [pc, #336]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046d2:	f023 0203 	bic.w	r2, r3, #3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046da:	4951      	ldr	r1, [pc, #324]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ee:	4b4c      	ldr	r3, [pc, #304]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fc:	4948      	ldr	r1, [pc, #288]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800470c:	2b00      	cmp	r3, #0
 800470e:	d015      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004710:	4b43      	ldr	r3, [pc, #268]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004716:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471e:	4940      	ldr	r1, [pc, #256]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800472e:	d105      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004730:	4b3b      	ldr	r3, [pc, #236]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4a3a      	ldr	r2, [pc, #232]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004736:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800473a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004744:	2b00      	cmp	r3, #0
 8004746:	d015      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004748:	4b35      	ldr	r3, [pc, #212]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800474e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004756:	4932      	ldr	r1, [pc, #200]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004762:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004766:	d105      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004768:	4b2d      	ldr	r3, [pc, #180]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	4a2c      	ldr	r2, [pc, #176]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004772:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d015      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004780:	4b27      	ldr	r3, [pc, #156]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004786:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478e:	4924      	ldr	r1, [pc, #144]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800479e:	d105      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	4a1e      	ldr	r2, [pc, #120]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d015      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047b8:	4b19      	ldr	r3, [pc, #100]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c6:	4916      	ldr	r1, [pc, #88]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047d6:	d105      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047d8:	4b11      	ldr	r3, [pc, #68]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	4a10      	ldr	r2, [pc, #64]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d019      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fe:	4908      	ldr	r1, [pc, #32]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800480e:	d109      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004810:	4b03      	ldr	r3, [pc, #12]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4a02      	ldr	r2, [pc, #8]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004816:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800481a:	60d3      	str	r3, [r2, #12]
 800481c:	e002      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800481e:	bf00      	nop
 8004820:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d015      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004830:	4b29      	ldr	r3, [pc, #164]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004836:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800483e:	4926      	ldr	r1, [pc, #152]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004840:	4313      	orrs	r3, r2
 8004842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800484e:	d105      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004850:	4b21      	ldr	r3, [pc, #132]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4a20      	ldr	r2, [pc, #128]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004856:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800485a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d015      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004868:	4b1b      	ldr	r3, [pc, #108]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004876:	4918      	ldr	r1, [pc, #96]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004886:	d105      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004888:	4b13      	ldr	r3, [pc, #76]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	4a12      	ldr	r2, [pc, #72]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800488e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004892:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d015      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80048a0:	4b0d      	ldr	r3, [pc, #52]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ae:	490a      	ldr	r1, [pc, #40]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048be:	d105      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048c0:	4b05      	ldr	r3, [pc, #20]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	4a04      	ldr	r2, [pc, #16]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80048cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40021000 	.word	0x40021000

080048dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e049      	b.n	8004982 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fe f91a 	bl	8002b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3304      	adds	r3, #4
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f000 fef8 	bl	8005710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b01      	cmp	r3, #1
 800499e:	d001      	beq.n	80049a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e054      	b.n	8004a4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0201 	orr.w	r2, r2, #1
 80049ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a26      	ldr	r2, [pc, #152]	@ (8004a5c <HAL_TIM_Base_Start_IT+0xd0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d022      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ce:	d01d      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a22      	ldr	r2, [pc, #136]	@ (8004a60 <HAL_TIM_Base_Start_IT+0xd4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d018      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a21      	ldr	r2, [pc, #132]	@ (8004a64 <HAL_TIM_Base_Start_IT+0xd8>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d013      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a68 <HAL_TIM_Base_Start_IT+0xdc>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00e      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a6c <HAL_TIM_Base_Start_IT+0xe0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d009      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004a70 <HAL_TIM_Base_Start_IT+0xe4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d004      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a1b      	ldr	r2, [pc, #108]	@ (8004a74 <HAL_TIM_Base_Start_IT+0xe8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d115      	bne.n	8004a38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	4b19      	ldr	r3, [pc, #100]	@ (8004a78 <HAL_TIM_Base_Start_IT+0xec>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b06      	cmp	r3, #6
 8004a1c:	d015      	beq.n	8004a4a <HAL_TIM_Base_Start_IT+0xbe>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a24:	d011      	beq.n	8004a4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 0201 	orr.w	r2, r2, #1
 8004a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a36:	e008      	b.n	8004a4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	e000      	b.n	8004a4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40012c00 	.word	0x40012c00
 8004a60:	40000400 	.word	0x40000400
 8004a64:	40000800 	.word	0x40000800
 8004a68:	40000c00 	.word	0x40000c00
 8004a6c:	40013400 	.word	0x40013400
 8004a70:	40014000 	.word	0x40014000
 8004a74:	40015000 	.word	0x40015000
 8004a78:	00010007 	.word	0x00010007

08004a7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e049      	b.n	8004b22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f841 	bl	8004b2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4610      	mov	r0, r2
 8004abc:	f000 fe28 	bl	8005710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d109      	bne.n	8004b64 <HAL_TIM_PWM_Start+0x24>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	bf14      	ite	ne
 8004b5c:	2301      	movne	r3, #1
 8004b5e:	2300      	moveq	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	e03c      	b.n	8004bde <HAL_TIM_PWM_Start+0x9e>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d109      	bne.n	8004b7e <HAL_TIM_PWM_Start+0x3e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	bf14      	ite	ne
 8004b76:	2301      	movne	r3, #1
 8004b78:	2300      	moveq	r3, #0
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	e02f      	b.n	8004bde <HAL_TIM_PWM_Start+0x9e>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d109      	bne.n	8004b98 <HAL_TIM_PWM_Start+0x58>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	bf14      	ite	ne
 8004b90:	2301      	movne	r3, #1
 8004b92:	2300      	moveq	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	e022      	b.n	8004bde <HAL_TIM_PWM_Start+0x9e>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	2b0c      	cmp	r3, #12
 8004b9c:	d109      	bne.n	8004bb2 <HAL_TIM_PWM_Start+0x72>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	bf14      	ite	ne
 8004baa:	2301      	movne	r3, #1
 8004bac:	2300      	moveq	r3, #0
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	e015      	b.n	8004bde <HAL_TIM_PWM_Start+0x9e>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b10      	cmp	r3, #16
 8004bb6:	d109      	bne.n	8004bcc <HAL_TIM_PWM_Start+0x8c>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	bf14      	ite	ne
 8004bc4:	2301      	movne	r3, #1
 8004bc6:	2300      	moveq	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	e008      	b.n	8004bde <HAL_TIM_PWM_Start+0x9e>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	bf14      	ite	ne
 8004bd8:	2301      	movne	r3, #1
 8004bda:	2300      	moveq	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e0a6      	b.n	8004d34 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d104      	bne.n	8004bf6 <HAL_TIM_PWM_Start+0xb6>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bf4:	e023      	b.n	8004c3e <HAL_TIM_PWM_Start+0xfe>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d104      	bne.n	8004c06 <HAL_TIM_PWM_Start+0xc6>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c04:	e01b      	b.n	8004c3e <HAL_TIM_PWM_Start+0xfe>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d104      	bne.n	8004c16 <HAL_TIM_PWM_Start+0xd6>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c14:	e013      	b.n	8004c3e <HAL_TIM_PWM_Start+0xfe>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b0c      	cmp	r3, #12
 8004c1a:	d104      	bne.n	8004c26 <HAL_TIM_PWM_Start+0xe6>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c24:	e00b      	b.n	8004c3e <HAL_TIM_PWM_Start+0xfe>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b10      	cmp	r3, #16
 8004c2a:	d104      	bne.n	8004c36 <HAL_TIM_PWM_Start+0xf6>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c34:	e003      	b.n	8004c3e <HAL_TIM_PWM_Start+0xfe>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2201      	movs	r2, #1
 8004c44:	6839      	ldr	r1, [r7, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f001 f9dc 	bl	8006004 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a3a      	ldr	r2, [pc, #232]	@ (8004d3c <HAL_TIM_PWM_Start+0x1fc>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d018      	beq.n	8004c88 <HAL_TIM_PWM_Start+0x148>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a39      	ldr	r2, [pc, #228]	@ (8004d40 <HAL_TIM_PWM_Start+0x200>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d013      	beq.n	8004c88 <HAL_TIM_PWM_Start+0x148>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a37      	ldr	r2, [pc, #220]	@ (8004d44 <HAL_TIM_PWM_Start+0x204>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00e      	beq.n	8004c88 <HAL_TIM_PWM_Start+0x148>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a36      	ldr	r2, [pc, #216]	@ (8004d48 <HAL_TIM_PWM_Start+0x208>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d009      	beq.n	8004c88 <HAL_TIM_PWM_Start+0x148>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a34      	ldr	r2, [pc, #208]	@ (8004d4c <HAL_TIM_PWM_Start+0x20c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d004      	beq.n	8004c88 <HAL_TIM_PWM_Start+0x148>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a33      	ldr	r2, [pc, #204]	@ (8004d50 <HAL_TIM_PWM_Start+0x210>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d101      	bne.n	8004c8c <HAL_TIM_PWM_Start+0x14c>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e000      	b.n	8004c8e <HAL_TIM_PWM_Start+0x14e>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d007      	beq.n	8004ca2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ca0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a25      	ldr	r2, [pc, #148]	@ (8004d3c <HAL_TIM_PWM_Start+0x1fc>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d022      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x1b2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cb4:	d01d      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x1b2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a26      	ldr	r2, [pc, #152]	@ (8004d54 <HAL_TIM_PWM_Start+0x214>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d018      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x1b2>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a24      	ldr	r2, [pc, #144]	@ (8004d58 <HAL_TIM_PWM_Start+0x218>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d013      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x1b2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a23      	ldr	r2, [pc, #140]	@ (8004d5c <HAL_TIM_PWM_Start+0x21c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00e      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x1b2>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a19      	ldr	r2, [pc, #100]	@ (8004d40 <HAL_TIM_PWM_Start+0x200>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d009      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x1b2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a18      	ldr	r2, [pc, #96]	@ (8004d44 <HAL_TIM_PWM_Start+0x204>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d004      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x1b2>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a18      	ldr	r2, [pc, #96]	@ (8004d50 <HAL_TIM_PWM_Start+0x210>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d115      	bne.n	8004d1e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	4b19      	ldr	r3, [pc, #100]	@ (8004d60 <HAL_TIM_PWM_Start+0x220>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b06      	cmp	r3, #6
 8004d02:	d015      	beq.n	8004d30 <HAL_TIM_PWM_Start+0x1f0>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d0a:	d011      	beq.n	8004d30 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0201 	orr.w	r2, r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d1c:	e008      	b.n	8004d30 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0201 	orr.w	r2, r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	e000      	b.n	8004d32 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40012c00 	.word	0x40012c00
 8004d40:	40013400 	.word	0x40013400
 8004d44:	40014000 	.word	0x40014000
 8004d48:	40014400 	.word	0x40014400
 8004d4c:	40014800 	.word	0x40014800
 8004d50:	40015000 	.word	0x40015000
 8004d54:	40000400 	.word	0x40000400
 8004d58:	40000800 	.word	0x40000800
 8004d5c:	40000c00 	.word	0x40000c00
 8004d60:	00010007 	.word	0x00010007

08004d64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e097      	b.n	8004ea8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d106      	bne.n	8004d92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7fd ff0f 	bl	8002bb0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2202      	movs	r2, #2
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6812      	ldr	r2, [r2, #0]
 8004da4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004da8:	f023 0307 	bic.w	r3, r3, #7
 8004dac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3304      	adds	r3, #4
 8004db6:	4619      	mov	r1, r3
 8004db8:	4610      	mov	r0, r2
 8004dba:	f000 fca9 	bl	8005710 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004de6:	f023 0303 	bic.w	r3, r3, #3
 8004dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	021b      	lsls	r3, r3, #8
 8004df6:	4313      	orrs	r3, r2
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004e04:	f023 030c 	bic.w	r3, r3, #12
 8004e08:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	021b      	lsls	r3, r3, #8
 8004e20:	4313      	orrs	r3, r2
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	011a      	lsls	r2, r3, #4
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	031b      	lsls	r3, r3, #12
 8004e34:	4313      	orrs	r3, r2
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004e42:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004e4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	4313      	orrs	r3, r2
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ec0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ec8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ed0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ed8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d110      	bne.n	8004f02 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d102      	bne.n	8004eec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ee6:	7b7b      	ldrb	r3, [r7, #13]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d001      	beq.n	8004ef0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e069      	b.n	8004fc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f00:	e031      	b.n	8004f66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d110      	bne.n	8004f2a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f08:	7bbb      	ldrb	r3, [r7, #14]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d102      	bne.n	8004f14 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f0e:	7b3b      	ldrb	r3, [r7, #12]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d001      	beq.n	8004f18 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e055      	b.n	8004fc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f28:	e01d      	b.n	8004f66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d108      	bne.n	8004f42 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f30:	7bbb      	ldrb	r3, [r7, #14]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d105      	bne.n	8004f42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f36:	7b7b      	ldrb	r3, [r7, #13]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d102      	bne.n	8004f42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f3c:	7b3b      	ldrb	r3, [r7, #12]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d001      	beq.n	8004f46 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e03e      	b.n	8004fc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2202      	movs	r2, #2
 8004f52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2202      	movs	r2, #2
 8004f5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2202      	movs	r2, #2
 8004f62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <HAL_TIM_Encoder_Start+0xc4>
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d008      	beq.n	8004f84 <HAL_TIM_Encoder_Start+0xd4>
 8004f72:	e00f      	b.n	8004f94 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f001 f841 	bl	8006004 <TIM_CCxChannelCmd>
      break;
 8004f82:	e016      	b.n	8004fb2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	2104      	movs	r1, #4
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f001 f839 	bl	8006004 <TIM_CCxChannelCmd>
      break;
 8004f92:	e00e      	b.n	8004fb2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f001 f831 	bl	8006004 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	2104      	movs	r1, #4
 8004faa:	4618      	mov	r0, r3
 8004fac:	f001 f82a 	bl	8006004 <TIM_CCxChannelCmd>
      break;
 8004fb0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0201 	orr.w	r2, r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d020      	beq.n	8005030 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01b      	beq.n	8005030 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0202 	mvn.w	r2, #2
 8005000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fb5c 	bl	80056d4 <HAL_TIM_IC_CaptureCallback>
 800501c:	e005      	b.n	800502a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fb4e 	bl	80056c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fb5f 	bl	80056e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b00      	cmp	r3, #0
 8005038:	d020      	beq.n	800507c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01b      	beq.n	800507c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f06f 0204 	mvn.w	r2, #4
 800504c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2202      	movs	r2, #2
 8005052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fb36 	bl	80056d4 <HAL_TIM_IC_CaptureCallback>
 8005068:	e005      	b.n	8005076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fb28 	bl	80056c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fb39 	bl	80056e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	2b00      	cmp	r3, #0
 8005084:	d020      	beq.n	80050c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01b      	beq.n	80050c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0208 	mvn.w	r2, #8
 8005098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2204      	movs	r2, #4
 800509e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fb10 	bl	80056d4 <HAL_TIM_IC_CaptureCallback>
 80050b4:	e005      	b.n	80050c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fb02 	bl	80056c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fb13 	bl	80056e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d020      	beq.n	8005114 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01b      	beq.n	8005114 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0210 	mvn.w	r2, #16
 80050e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2208      	movs	r2, #8
 80050ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 faea 	bl	80056d4 <HAL_TIM_IC_CaptureCallback>
 8005100:	e005      	b.n	800510e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 fadc 	bl	80056c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 faed 	bl	80056e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00c      	beq.n	8005138 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0201 	mvn.w	r2, #1
 8005130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fd fc16 	bl	8002964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513e:	2b00      	cmp	r3, #0
 8005140:	d104      	bne.n	800514c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00c      	beq.n	8005166 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005152:	2b00      	cmp	r3, #0
 8005154:	d007      	beq.n	8005166 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800515e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f001 f8a9 	bl	80062b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00c      	beq.n	800518a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005176:	2b00      	cmp	r3, #0
 8005178:	d007      	beq.n	800518a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f001 f8a1 	bl	80062cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00c      	beq.n	80051ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d007      	beq.n	80051ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 faa7 	bl	80056fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	f003 0320 	and.w	r3, r3, #32
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00c      	beq.n	80051d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f003 0320 	and.w	r3, r3, #32
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d007      	beq.n	80051d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f06f 0220 	mvn.w	r2, #32
 80051ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f001 f869 	bl	80062a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00c      	beq.n	80051f6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d007      	beq.n	80051f6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80051ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f001 f875 	bl	80062e0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00c      	beq.n	800521a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d007      	beq.n	800521a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f001 f86d 	bl	80062f4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00c      	beq.n	800523e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d007      	beq.n	800523e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f001 f865 	bl	8006308 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00c      	beq.n	8005262 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d007      	beq.n	8005262 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800525a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f001 f85d 	bl	800631c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005262:	bf00      	nop
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
	...

0800526c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005282:	2b01      	cmp	r3, #1
 8005284:	d101      	bne.n	800528a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005286:	2302      	movs	r3, #2
 8005288:	e0ff      	b.n	800548a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b14      	cmp	r3, #20
 8005296:	f200 80f0 	bhi.w	800547a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800529a:	a201      	add	r2, pc, #4	@ (adr r2, 80052a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	080052f5 	.word	0x080052f5
 80052a4:	0800547b 	.word	0x0800547b
 80052a8:	0800547b 	.word	0x0800547b
 80052ac:	0800547b 	.word	0x0800547b
 80052b0:	08005335 	.word	0x08005335
 80052b4:	0800547b 	.word	0x0800547b
 80052b8:	0800547b 	.word	0x0800547b
 80052bc:	0800547b 	.word	0x0800547b
 80052c0:	08005377 	.word	0x08005377
 80052c4:	0800547b 	.word	0x0800547b
 80052c8:	0800547b 	.word	0x0800547b
 80052cc:	0800547b 	.word	0x0800547b
 80052d0:	080053b7 	.word	0x080053b7
 80052d4:	0800547b 	.word	0x0800547b
 80052d8:	0800547b 	.word	0x0800547b
 80052dc:	0800547b 	.word	0x0800547b
 80052e0:	080053f9 	.word	0x080053f9
 80052e4:	0800547b 	.word	0x0800547b
 80052e8:	0800547b 	.word	0x0800547b
 80052ec:	0800547b 	.word	0x0800547b
 80052f0:	08005439 	.word	0x08005439
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fabc 	bl	8005878 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699a      	ldr	r2, [r3, #24]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0208 	orr.w	r2, r2, #8
 800530e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699a      	ldr	r2, [r3, #24]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0204 	bic.w	r2, r2, #4
 800531e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6999      	ldr	r1, [r3, #24]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	691a      	ldr	r2, [r3, #16]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	619a      	str	r2, [r3, #24]
      break;
 8005332:	e0a5      	b.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68b9      	ldr	r1, [r7, #8]
 800533a:	4618      	mov	r0, r3
 800533c:	f000 fb36 	bl	80059ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800534e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699a      	ldr	r2, [r3, #24]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800535e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6999      	ldr	r1, [r3, #24]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	021a      	lsls	r2, r3, #8
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	619a      	str	r2, [r3, #24]
      break;
 8005374:	e084      	b.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	4618      	mov	r0, r3
 800537e:	f000 fba9 	bl	8005ad4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69da      	ldr	r2, [r3, #28]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0208 	orr.w	r2, r2, #8
 8005390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	69da      	ldr	r2, [r3, #28]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0204 	bic.w	r2, r2, #4
 80053a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69d9      	ldr	r1, [r3, #28]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	61da      	str	r2, [r3, #28]
      break;
 80053b4:	e064      	b.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fc1b 	bl	8005bf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69da      	ldr	r2, [r3, #28]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69d9      	ldr	r1, [r3, #28]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	021a      	lsls	r2, r3, #8
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	61da      	str	r2, [r3, #28]
      break;
 80053f6:	e043      	b.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fc8e 	bl	8005d20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0208 	orr.w	r2, r2, #8
 8005412:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0204 	bic.w	r2, r2, #4
 8005422:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005436:	e023      	b.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68b9      	ldr	r1, [r7, #8]
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fcd8 	bl	8005df4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005452:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005462:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	021a      	lsls	r2, r3, #8
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005478:	e002      	b.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	75fb      	strb	r3, [r7, #23]
      break;
 800547e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005488:	7dfb      	ldrb	r3, [r7, #23]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop

08005494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_TIM_ConfigClockSource+0x1c>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e0f6      	b.n	800569e <HAL_TIM_ConfigClockSource+0x20a>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80054ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80054d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a6f      	ldr	r2, [pc, #444]	@ (80056a8 <HAL_TIM_ConfigClockSource+0x214>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	f000 80c1 	beq.w	8005672 <HAL_TIM_ConfigClockSource+0x1de>
 80054f0:	4a6d      	ldr	r2, [pc, #436]	@ (80056a8 <HAL_TIM_ConfigClockSource+0x214>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	f200 80c6 	bhi.w	8005684 <HAL_TIM_ConfigClockSource+0x1f0>
 80054f8:	4a6c      	ldr	r2, [pc, #432]	@ (80056ac <HAL_TIM_ConfigClockSource+0x218>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	f000 80b9 	beq.w	8005672 <HAL_TIM_ConfigClockSource+0x1de>
 8005500:	4a6a      	ldr	r2, [pc, #424]	@ (80056ac <HAL_TIM_ConfigClockSource+0x218>)
 8005502:	4293      	cmp	r3, r2
 8005504:	f200 80be 	bhi.w	8005684 <HAL_TIM_ConfigClockSource+0x1f0>
 8005508:	4a69      	ldr	r2, [pc, #420]	@ (80056b0 <HAL_TIM_ConfigClockSource+0x21c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	f000 80b1 	beq.w	8005672 <HAL_TIM_ConfigClockSource+0x1de>
 8005510:	4a67      	ldr	r2, [pc, #412]	@ (80056b0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	f200 80b6 	bhi.w	8005684 <HAL_TIM_ConfigClockSource+0x1f0>
 8005518:	4a66      	ldr	r2, [pc, #408]	@ (80056b4 <HAL_TIM_ConfigClockSource+0x220>)
 800551a:	4293      	cmp	r3, r2
 800551c:	f000 80a9 	beq.w	8005672 <HAL_TIM_ConfigClockSource+0x1de>
 8005520:	4a64      	ldr	r2, [pc, #400]	@ (80056b4 <HAL_TIM_ConfigClockSource+0x220>)
 8005522:	4293      	cmp	r3, r2
 8005524:	f200 80ae 	bhi.w	8005684 <HAL_TIM_ConfigClockSource+0x1f0>
 8005528:	4a63      	ldr	r2, [pc, #396]	@ (80056b8 <HAL_TIM_ConfigClockSource+0x224>)
 800552a:	4293      	cmp	r3, r2
 800552c:	f000 80a1 	beq.w	8005672 <HAL_TIM_ConfigClockSource+0x1de>
 8005530:	4a61      	ldr	r2, [pc, #388]	@ (80056b8 <HAL_TIM_ConfigClockSource+0x224>)
 8005532:	4293      	cmp	r3, r2
 8005534:	f200 80a6 	bhi.w	8005684 <HAL_TIM_ConfigClockSource+0x1f0>
 8005538:	4a60      	ldr	r2, [pc, #384]	@ (80056bc <HAL_TIM_ConfigClockSource+0x228>)
 800553a:	4293      	cmp	r3, r2
 800553c:	f000 8099 	beq.w	8005672 <HAL_TIM_ConfigClockSource+0x1de>
 8005540:	4a5e      	ldr	r2, [pc, #376]	@ (80056bc <HAL_TIM_ConfigClockSource+0x228>)
 8005542:	4293      	cmp	r3, r2
 8005544:	f200 809e 	bhi.w	8005684 <HAL_TIM_ConfigClockSource+0x1f0>
 8005548:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800554c:	f000 8091 	beq.w	8005672 <HAL_TIM_ConfigClockSource+0x1de>
 8005550:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005554:	f200 8096 	bhi.w	8005684 <HAL_TIM_ConfigClockSource+0x1f0>
 8005558:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800555c:	f000 8089 	beq.w	8005672 <HAL_TIM_ConfigClockSource+0x1de>
 8005560:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005564:	f200 808e 	bhi.w	8005684 <HAL_TIM_ConfigClockSource+0x1f0>
 8005568:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800556c:	d03e      	beq.n	80055ec <HAL_TIM_ConfigClockSource+0x158>
 800556e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005572:	f200 8087 	bhi.w	8005684 <HAL_TIM_ConfigClockSource+0x1f0>
 8005576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800557a:	f000 8086 	beq.w	800568a <HAL_TIM_ConfigClockSource+0x1f6>
 800557e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005582:	d87f      	bhi.n	8005684 <HAL_TIM_ConfigClockSource+0x1f0>
 8005584:	2b70      	cmp	r3, #112	@ 0x70
 8005586:	d01a      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x12a>
 8005588:	2b70      	cmp	r3, #112	@ 0x70
 800558a:	d87b      	bhi.n	8005684 <HAL_TIM_ConfigClockSource+0x1f0>
 800558c:	2b60      	cmp	r3, #96	@ 0x60
 800558e:	d050      	beq.n	8005632 <HAL_TIM_ConfigClockSource+0x19e>
 8005590:	2b60      	cmp	r3, #96	@ 0x60
 8005592:	d877      	bhi.n	8005684 <HAL_TIM_ConfigClockSource+0x1f0>
 8005594:	2b50      	cmp	r3, #80	@ 0x50
 8005596:	d03c      	beq.n	8005612 <HAL_TIM_ConfigClockSource+0x17e>
 8005598:	2b50      	cmp	r3, #80	@ 0x50
 800559a:	d873      	bhi.n	8005684 <HAL_TIM_ConfigClockSource+0x1f0>
 800559c:	2b40      	cmp	r3, #64	@ 0x40
 800559e:	d058      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x1be>
 80055a0:	2b40      	cmp	r3, #64	@ 0x40
 80055a2:	d86f      	bhi.n	8005684 <HAL_TIM_ConfigClockSource+0x1f0>
 80055a4:	2b30      	cmp	r3, #48	@ 0x30
 80055a6:	d064      	beq.n	8005672 <HAL_TIM_ConfigClockSource+0x1de>
 80055a8:	2b30      	cmp	r3, #48	@ 0x30
 80055aa:	d86b      	bhi.n	8005684 <HAL_TIM_ConfigClockSource+0x1f0>
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	d060      	beq.n	8005672 <HAL_TIM_ConfigClockSource+0x1de>
 80055b0:	2b20      	cmp	r3, #32
 80055b2:	d867      	bhi.n	8005684 <HAL_TIM_ConfigClockSource+0x1f0>
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d05c      	beq.n	8005672 <HAL_TIM_ConfigClockSource+0x1de>
 80055b8:	2b10      	cmp	r3, #16
 80055ba:	d05a      	beq.n	8005672 <HAL_TIM_ConfigClockSource+0x1de>
 80055bc:	e062      	b.n	8005684 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055ce:	f000 fcf9 	bl	8005fc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80055e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	609a      	str	r2, [r3, #8]
      break;
 80055ea:	e04f      	b.n	800568c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055fc:	f000 fce2 	bl	8005fc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800560e:	609a      	str	r2, [r3, #8]
      break;
 8005610:	e03c      	b.n	800568c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800561e:	461a      	mov	r2, r3
 8005620:	f000 fc54 	bl	8005ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2150      	movs	r1, #80	@ 0x50
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fcad 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005630:	e02c      	b.n	800568c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800563e:	461a      	mov	r2, r3
 8005640:	f000 fc73 	bl	8005f2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2160      	movs	r1, #96	@ 0x60
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fc9d 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005650:	e01c      	b.n	800568c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800565e:	461a      	mov	r2, r3
 8005660:	f000 fc34 	bl	8005ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2140      	movs	r1, #64	@ 0x40
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fc8d 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005670:	e00c      	b.n	800568c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4619      	mov	r1, r3
 800567c:	4610      	mov	r0, r2
 800567e:	f000 fc84 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005682:	e003      	b.n	800568c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	73fb      	strb	r3, [r7, #15]
      break;
 8005688:	e000      	b.n	800568c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800568a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800569c:	7bfb      	ldrb	r3, [r7, #15]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	00100070 	.word	0x00100070
 80056ac:	00100060 	.word	0x00100060
 80056b0:	00100050 	.word	0x00100050
 80056b4:	00100040 	.word	0x00100040
 80056b8:	00100030 	.word	0x00100030
 80056bc:	00100020 	.word	0x00100020

080056c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a4c      	ldr	r2, [pc, #304]	@ (8005854 <TIM_Base_SetConfig+0x144>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d017      	beq.n	8005758 <TIM_Base_SetConfig+0x48>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800572e:	d013      	beq.n	8005758 <TIM_Base_SetConfig+0x48>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a49      	ldr	r2, [pc, #292]	@ (8005858 <TIM_Base_SetConfig+0x148>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d00f      	beq.n	8005758 <TIM_Base_SetConfig+0x48>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a48      	ldr	r2, [pc, #288]	@ (800585c <TIM_Base_SetConfig+0x14c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00b      	beq.n	8005758 <TIM_Base_SetConfig+0x48>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a47      	ldr	r2, [pc, #284]	@ (8005860 <TIM_Base_SetConfig+0x150>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d007      	beq.n	8005758 <TIM_Base_SetConfig+0x48>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a46      	ldr	r2, [pc, #280]	@ (8005864 <TIM_Base_SetConfig+0x154>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d003      	beq.n	8005758 <TIM_Base_SetConfig+0x48>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a45      	ldr	r2, [pc, #276]	@ (8005868 <TIM_Base_SetConfig+0x158>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d108      	bne.n	800576a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800575e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a39      	ldr	r2, [pc, #228]	@ (8005854 <TIM_Base_SetConfig+0x144>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d023      	beq.n	80057ba <TIM_Base_SetConfig+0xaa>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005778:	d01f      	beq.n	80057ba <TIM_Base_SetConfig+0xaa>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a36      	ldr	r2, [pc, #216]	@ (8005858 <TIM_Base_SetConfig+0x148>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d01b      	beq.n	80057ba <TIM_Base_SetConfig+0xaa>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a35      	ldr	r2, [pc, #212]	@ (800585c <TIM_Base_SetConfig+0x14c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d017      	beq.n	80057ba <TIM_Base_SetConfig+0xaa>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a34      	ldr	r2, [pc, #208]	@ (8005860 <TIM_Base_SetConfig+0x150>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d013      	beq.n	80057ba <TIM_Base_SetConfig+0xaa>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a33      	ldr	r2, [pc, #204]	@ (8005864 <TIM_Base_SetConfig+0x154>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d00f      	beq.n	80057ba <TIM_Base_SetConfig+0xaa>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a33      	ldr	r2, [pc, #204]	@ (800586c <TIM_Base_SetConfig+0x15c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d00b      	beq.n	80057ba <TIM_Base_SetConfig+0xaa>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a32      	ldr	r2, [pc, #200]	@ (8005870 <TIM_Base_SetConfig+0x160>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d007      	beq.n	80057ba <TIM_Base_SetConfig+0xaa>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a31      	ldr	r2, [pc, #196]	@ (8005874 <TIM_Base_SetConfig+0x164>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d003      	beq.n	80057ba <TIM_Base_SetConfig+0xaa>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005868 <TIM_Base_SetConfig+0x158>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d108      	bne.n	80057cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a18      	ldr	r2, [pc, #96]	@ (8005854 <TIM_Base_SetConfig+0x144>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d013      	beq.n	8005820 <TIM_Base_SetConfig+0x110>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005864 <TIM_Base_SetConfig+0x154>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00f      	beq.n	8005820 <TIM_Base_SetConfig+0x110>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a1a      	ldr	r2, [pc, #104]	@ (800586c <TIM_Base_SetConfig+0x15c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d00b      	beq.n	8005820 <TIM_Base_SetConfig+0x110>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a19      	ldr	r2, [pc, #100]	@ (8005870 <TIM_Base_SetConfig+0x160>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d007      	beq.n	8005820 <TIM_Base_SetConfig+0x110>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a18      	ldr	r2, [pc, #96]	@ (8005874 <TIM_Base_SetConfig+0x164>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d003      	beq.n	8005820 <TIM_Base_SetConfig+0x110>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a13      	ldr	r2, [pc, #76]	@ (8005868 <TIM_Base_SetConfig+0x158>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d103      	bne.n	8005828 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	691a      	ldr	r2, [r3, #16]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b01      	cmp	r3, #1
 8005838:	d105      	bne.n	8005846 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f023 0201 	bic.w	r2, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	611a      	str	r2, [r3, #16]
  }
}
 8005846:	bf00      	nop
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40012c00 	.word	0x40012c00
 8005858:	40000400 	.word	0x40000400
 800585c:	40000800 	.word	0x40000800
 8005860:	40000c00 	.word	0x40000c00
 8005864:	40013400 	.word	0x40013400
 8005868:	40015000 	.word	0x40015000
 800586c:	40014000 	.word	0x40014000
 8005870:	40014400 	.word	0x40014400
 8005874:	40014800 	.word	0x40014800

08005878 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	f023 0201 	bic.w	r2, r3, #1
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0303 	bic.w	r3, r3, #3
 80058b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f023 0302 	bic.w	r3, r3, #2
 80058c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a30      	ldr	r2, [pc, #192]	@ (8005994 <TIM_OC1_SetConfig+0x11c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d013      	beq.n	8005900 <TIM_OC1_SetConfig+0x88>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a2f      	ldr	r2, [pc, #188]	@ (8005998 <TIM_OC1_SetConfig+0x120>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00f      	beq.n	8005900 <TIM_OC1_SetConfig+0x88>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a2e      	ldr	r2, [pc, #184]	@ (800599c <TIM_OC1_SetConfig+0x124>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00b      	beq.n	8005900 <TIM_OC1_SetConfig+0x88>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a2d      	ldr	r2, [pc, #180]	@ (80059a0 <TIM_OC1_SetConfig+0x128>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d007      	beq.n	8005900 <TIM_OC1_SetConfig+0x88>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a2c      	ldr	r2, [pc, #176]	@ (80059a4 <TIM_OC1_SetConfig+0x12c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d003      	beq.n	8005900 <TIM_OC1_SetConfig+0x88>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a2b      	ldr	r2, [pc, #172]	@ (80059a8 <TIM_OC1_SetConfig+0x130>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d10c      	bne.n	800591a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f023 0308 	bic.w	r3, r3, #8
 8005906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f023 0304 	bic.w	r3, r3, #4
 8005918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a1d      	ldr	r2, [pc, #116]	@ (8005994 <TIM_OC1_SetConfig+0x11c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d013      	beq.n	800594a <TIM_OC1_SetConfig+0xd2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a1c      	ldr	r2, [pc, #112]	@ (8005998 <TIM_OC1_SetConfig+0x120>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00f      	beq.n	800594a <TIM_OC1_SetConfig+0xd2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a1b      	ldr	r2, [pc, #108]	@ (800599c <TIM_OC1_SetConfig+0x124>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00b      	beq.n	800594a <TIM_OC1_SetConfig+0xd2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a1a      	ldr	r2, [pc, #104]	@ (80059a0 <TIM_OC1_SetConfig+0x128>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d007      	beq.n	800594a <TIM_OC1_SetConfig+0xd2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a19      	ldr	r2, [pc, #100]	@ (80059a4 <TIM_OC1_SetConfig+0x12c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d003      	beq.n	800594a <TIM_OC1_SetConfig+0xd2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a18      	ldr	r2, [pc, #96]	@ (80059a8 <TIM_OC1_SetConfig+0x130>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d111      	bne.n	800596e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	621a      	str	r2, [r3, #32]
}
 8005988:	bf00      	nop
 800598a:	371c      	adds	r7, #28
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40013400 	.word	0x40013400
 800599c:	40014000 	.word	0x40014000
 80059a0:	40014400 	.word	0x40014400
 80059a4:	40014800 	.word	0x40014800
 80059a8:	40015000 	.word	0x40015000

080059ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	f023 0210 	bic.w	r2, r3, #16
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	021b      	lsls	r3, r3, #8
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f023 0320 	bic.w	r3, r3, #32
 80059fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a2c      	ldr	r2, [pc, #176]	@ (8005abc <TIM_OC2_SetConfig+0x110>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d007      	beq.n	8005a20 <TIM_OC2_SetConfig+0x74>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a2b      	ldr	r2, [pc, #172]	@ (8005ac0 <TIM_OC2_SetConfig+0x114>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d003      	beq.n	8005a20 <TIM_OC2_SetConfig+0x74>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a2a      	ldr	r2, [pc, #168]	@ (8005ac4 <TIM_OC2_SetConfig+0x118>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d10d      	bne.n	8005a3c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8005abc <TIM_OC2_SetConfig+0x110>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d013      	beq.n	8005a6c <TIM_OC2_SetConfig+0xc0>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a1e      	ldr	r2, [pc, #120]	@ (8005ac0 <TIM_OC2_SetConfig+0x114>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00f      	beq.n	8005a6c <TIM_OC2_SetConfig+0xc0>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ac8 <TIM_OC2_SetConfig+0x11c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d00b      	beq.n	8005a6c <TIM_OC2_SetConfig+0xc0>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a1d      	ldr	r2, [pc, #116]	@ (8005acc <TIM_OC2_SetConfig+0x120>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d007      	beq.n	8005a6c <TIM_OC2_SetConfig+0xc0>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ad0 <TIM_OC2_SetConfig+0x124>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d003      	beq.n	8005a6c <TIM_OC2_SetConfig+0xc0>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a17      	ldr	r2, [pc, #92]	@ (8005ac4 <TIM_OC2_SetConfig+0x118>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d113      	bne.n	8005a94 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	621a      	str	r2, [r3, #32]
}
 8005aae:	bf00      	nop
 8005ab0:	371c      	adds	r7, #28
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	40012c00 	.word	0x40012c00
 8005ac0:	40013400 	.word	0x40013400
 8005ac4:	40015000 	.word	0x40015000
 8005ac8:	40014000 	.word	0x40014000
 8005acc:	40014400 	.word	0x40014400
 8005ad0:	40014800 	.word	0x40014800

08005ad4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 0303 	bic.w	r3, r3, #3
 8005b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	021b      	lsls	r3, r3, #8
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a2b      	ldr	r2, [pc, #172]	@ (8005be0 <TIM_OC3_SetConfig+0x10c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d007      	beq.n	8005b46 <TIM_OC3_SetConfig+0x72>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a2a      	ldr	r2, [pc, #168]	@ (8005be4 <TIM_OC3_SetConfig+0x110>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d003      	beq.n	8005b46 <TIM_OC3_SetConfig+0x72>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a29      	ldr	r2, [pc, #164]	@ (8005be8 <TIM_OC3_SetConfig+0x114>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d10d      	bne.n	8005b62 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a1e      	ldr	r2, [pc, #120]	@ (8005be0 <TIM_OC3_SetConfig+0x10c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d013      	beq.n	8005b92 <TIM_OC3_SetConfig+0xbe>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8005be4 <TIM_OC3_SetConfig+0x110>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d00f      	beq.n	8005b92 <TIM_OC3_SetConfig+0xbe>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a1d      	ldr	r2, [pc, #116]	@ (8005bec <TIM_OC3_SetConfig+0x118>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d00b      	beq.n	8005b92 <TIM_OC3_SetConfig+0xbe>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8005bf0 <TIM_OC3_SetConfig+0x11c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d007      	beq.n	8005b92 <TIM_OC3_SetConfig+0xbe>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a1b      	ldr	r2, [pc, #108]	@ (8005bf4 <TIM_OC3_SetConfig+0x120>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d003      	beq.n	8005b92 <TIM_OC3_SetConfig+0xbe>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a16      	ldr	r2, [pc, #88]	@ (8005be8 <TIM_OC3_SetConfig+0x114>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d113      	bne.n	8005bba <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	621a      	str	r2, [r3, #32]
}
 8005bd4:	bf00      	nop
 8005bd6:	371c      	adds	r7, #28
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	40012c00 	.word	0x40012c00
 8005be4:	40013400 	.word	0x40013400
 8005be8:	40015000 	.word	0x40015000
 8005bec:	40014000 	.word	0x40014000
 8005bf0:	40014400 	.word	0x40014400
 8005bf4:	40014800 	.word	0x40014800

08005bf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	021b      	lsls	r3, r3, #8
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	031b      	lsls	r3, r3, #12
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a2c      	ldr	r2, [pc, #176]	@ (8005d08 <TIM_OC4_SetConfig+0x110>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d007      	beq.n	8005c6c <TIM_OC4_SetConfig+0x74>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a2b      	ldr	r2, [pc, #172]	@ (8005d0c <TIM_OC4_SetConfig+0x114>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d003      	beq.n	8005c6c <TIM_OC4_SetConfig+0x74>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a2a      	ldr	r2, [pc, #168]	@ (8005d10 <TIM_OC4_SetConfig+0x118>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d10d      	bne.n	8005c88 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	031b      	lsls	r3, r3, #12
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8005d08 <TIM_OC4_SetConfig+0x110>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d013      	beq.n	8005cb8 <TIM_OC4_SetConfig+0xc0>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a1e      	ldr	r2, [pc, #120]	@ (8005d0c <TIM_OC4_SetConfig+0x114>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d00f      	beq.n	8005cb8 <TIM_OC4_SetConfig+0xc0>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8005d14 <TIM_OC4_SetConfig+0x11c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00b      	beq.n	8005cb8 <TIM_OC4_SetConfig+0xc0>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a1d      	ldr	r2, [pc, #116]	@ (8005d18 <TIM_OC4_SetConfig+0x120>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d007      	beq.n	8005cb8 <TIM_OC4_SetConfig+0xc0>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a1c      	ldr	r2, [pc, #112]	@ (8005d1c <TIM_OC4_SetConfig+0x124>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d003      	beq.n	8005cb8 <TIM_OC4_SetConfig+0xc0>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a17      	ldr	r2, [pc, #92]	@ (8005d10 <TIM_OC4_SetConfig+0x118>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d113      	bne.n	8005ce0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cbe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005cc6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	019b      	lsls	r3, r3, #6
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	019b      	lsls	r3, r3, #6
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	621a      	str	r2, [r3, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	40012c00 	.word	0x40012c00
 8005d0c:	40013400 	.word	0x40013400
 8005d10:	40015000 	.word	0x40015000
 8005d14:	40014000 	.word	0x40014000
 8005d18:	40014400 	.word	0x40014400
 8005d1c:	40014800 	.word	0x40014800

08005d20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005d64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	041b      	lsls	r3, r3, #16
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a19      	ldr	r2, [pc, #100]	@ (8005ddc <TIM_OC5_SetConfig+0xbc>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d013      	beq.n	8005da2 <TIM_OC5_SetConfig+0x82>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a18      	ldr	r2, [pc, #96]	@ (8005de0 <TIM_OC5_SetConfig+0xc0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d00f      	beq.n	8005da2 <TIM_OC5_SetConfig+0x82>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a17      	ldr	r2, [pc, #92]	@ (8005de4 <TIM_OC5_SetConfig+0xc4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00b      	beq.n	8005da2 <TIM_OC5_SetConfig+0x82>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a16      	ldr	r2, [pc, #88]	@ (8005de8 <TIM_OC5_SetConfig+0xc8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d007      	beq.n	8005da2 <TIM_OC5_SetConfig+0x82>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a15      	ldr	r2, [pc, #84]	@ (8005dec <TIM_OC5_SetConfig+0xcc>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d003      	beq.n	8005da2 <TIM_OC5_SetConfig+0x82>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a14      	ldr	r2, [pc, #80]	@ (8005df0 <TIM_OC5_SetConfig+0xd0>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d109      	bne.n	8005db6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005da8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	021b      	lsls	r3, r3, #8
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	621a      	str	r2, [r3, #32]
}
 8005dd0:	bf00      	nop
 8005dd2:	371c      	adds	r7, #28
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	40012c00 	.word	0x40012c00
 8005de0:	40013400 	.word	0x40013400
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40014400 	.word	0x40014400
 8005dec:	40014800 	.word	0x40014800
 8005df0:	40015000 	.word	0x40015000

08005df4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	051b      	lsls	r3, r3, #20
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a1a      	ldr	r2, [pc, #104]	@ (8005eb4 <TIM_OC6_SetConfig+0xc0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d013      	beq.n	8005e78 <TIM_OC6_SetConfig+0x84>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a19      	ldr	r2, [pc, #100]	@ (8005eb8 <TIM_OC6_SetConfig+0xc4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d00f      	beq.n	8005e78 <TIM_OC6_SetConfig+0x84>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a18      	ldr	r2, [pc, #96]	@ (8005ebc <TIM_OC6_SetConfig+0xc8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00b      	beq.n	8005e78 <TIM_OC6_SetConfig+0x84>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a17      	ldr	r2, [pc, #92]	@ (8005ec0 <TIM_OC6_SetConfig+0xcc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d007      	beq.n	8005e78 <TIM_OC6_SetConfig+0x84>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a16      	ldr	r2, [pc, #88]	@ (8005ec4 <TIM_OC6_SetConfig+0xd0>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d003      	beq.n	8005e78 <TIM_OC6_SetConfig+0x84>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a15      	ldr	r2, [pc, #84]	@ (8005ec8 <TIM_OC6_SetConfig+0xd4>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d109      	bne.n	8005e8c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	029b      	lsls	r3, r3, #10
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	621a      	str	r2, [r3, #32]
}
 8005ea6:	bf00      	nop
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	40012c00 	.word	0x40012c00
 8005eb8:	40013400 	.word	0x40013400
 8005ebc:	40014000 	.word	0x40014000
 8005ec0:	40014400 	.word	0x40014400
 8005ec4:	40014800 	.word	0x40014800
 8005ec8:	40015000 	.word	0x40015000

08005ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f023 0201 	bic.w	r2, r3, #1
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f023 030a 	bic.w	r3, r3, #10
 8005f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	621a      	str	r2, [r3, #32]
}
 8005f1e:	bf00      	nop
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b087      	sub	sp, #28
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	60f8      	str	r0, [r7, #12]
 8005f32:	60b9      	str	r1, [r7, #8]
 8005f34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	f023 0210 	bic.w	r2, r3, #16
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	031b      	lsls	r3, r3, #12
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	621a      	str	r2, [r3, #32]
}
 8005f7e:	bf00      	nop
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b085      	sub	sp, #20
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f043 0307 	orr.w	r3, r3, #7
 8005fb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	609a      	str	r2, [r3, #8]
}
 8005fb8:	bf00      	nop
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	021a      	lsls	r2, r3, #8
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	609a      	str	r2, [r3, #8]
}
 8005ff8:	bf00      	nop
 8005ffa:	371c      	adds	r7, #28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f003 031f 	and.w	r3, r3, #31
 8006016:	2201      	movs	r2, #1
 8006018:	fa02 f303 	lsl.w	r3, r2, r3
 800601c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a1a      	ldr	r2, [r3, #32]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	43db      	mvns	r3, r3
 8006026:	401a      	ands	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a1a      	ldr	r2, [r3, #32]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f003 031f 	and.w	r3, r3, #31
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	fa01 f303 	lsl.w	r3, r1, r3
 800603c:	431a      	orrs	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	621a      	str	r2, [r3, #32]
}
 8006042:	bf00      	nop
 8006044:	371c      	adds	r7, #28
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
	...

08006050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006064:	2302      	movs	r3, #2
 8006066:	e074      	b.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a34      	ldr	r2, [pc, #208]	@ (8006160 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d009      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a33      	ldr	r2, [pc, #204]	@ (8006164 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d004      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a31      	ldr	r2, [pc, #196]	@ (8006168 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d108      	bne.n	80060b8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80060ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80060be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a21      	ldr	r2, [pc, #132]	@ (8006160 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d022      	beq.n	8006126 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060e8:	d01d      	beq.n	8006126 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a1f      	ldr	r2, [pc, #124]	@ (800616c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d018      	beq.n	8006126 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006170 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d013      	beq.n	8006126 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a1c      	ldr	r2, [pc, #112]	@ (8006174 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d00e      	beq.n	8006126 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a15      	ldr	r2, [pc, #84]	@ (8006164 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d009      	beq.n	8006126 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a18      	ldr	r2, [pc, #96]	@ (8006178 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d004      	beq.n	8006126 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a11      	ldr	r2, [pc, #68]	@ (8006168 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d10c      	bne.n	8006140 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800612c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	4313      	orrs	r3, r2
 8006136:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	40012c00 	.word	0x40012c00
 8006164:	40013400 	.word	0x40013400
 8006168:	40015000 	.word	0x40015000
 800616c:	40000400 	.word	0x40000400
 8006170:	40000800 	.word	0x40000800
 8006174:	40000c00 	.word	0x40000c00
 8006178:	40014000 	.word	0x40014000

0800617c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006186:	2300      	movs	r3, #0
 8006188:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006190:	2b01      	cmp	r3, #1
 8006192:	d101      	bne.n	8006198 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006194:	2302      	movs	r3, #2
 8006196:	e078      	b.n	800628a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	041b      	lsls	r3, r3, #16
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	69db      	ldr	r3, [r3, #28]
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a1c      	ldr	r2, [pc, #112]	@ (8006298 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d009      	beq.n	800623e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a1b      	ldr	r2, [pc, #108]	@ (800629c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d004      	beq.n	800623e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a19      	ldr	r2, [pc, #100]	@ (80062a0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d11c      	bne.n	8006278 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006248:	051b      	lsls	r3, r3, #20
 800624a:	4313      	orrs	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	4313      	orrs	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006274:	4313      	orrs	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	40012c00 	.word	0x40012c00
 800629c:	40013400 	.word	0x40013400
 80062a0:	40015000 	.word	0x40015000

080062a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e042      	b.n	80063c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006348:	2b00      	cmp	r3, #0
 800634a:	d106      	bne.n	800635a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7fc fb51 	bl	80029fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2224      	movs	r2, #36	@ 0x24
 800635e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0201 	bic.w	r2, r2, #1
 8006370:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 ff42 	bl	8007204 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 fc43 	bl	8006c0c <UART_SetConfig>
 8006386:	4603      	mov	r3, r0
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e01b      	b.n	80063c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800639e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0201 	orr.w	r2, r2, #1
 80063be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 ffc1 	bl	8007348 <UART_CheckIdleState>
 80063c6:	4603      	mov	r3, r0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08a      	sub	sp, #40	@ 0x28
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	603b      	str	r3, [r7, #0]
 80063dc:	4613      	mov	r3, r2
 80063de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e6:	2b20      	cmp	r3, #32
 80063e8:	d17b      	bne.n	80064e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <HAL_UART_Transmit+0x26>
 80063f0:	88fb      	ldrh	r3, [r7, #6]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e074      	b.n	80064e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2221      	movs	r2, #33	@ 0x21
 8006406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800640a:	f7fc febf 	bl	800318c <HAL_GetTick>
 800640e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	88fa      	ldrh	r2, [r7, #6]
 8006414:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	88fa      	ldrh	r2, [r7, #6]
 800641c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006428:	d108      	bne.n	800643c <HAL_UART_Transmit+0x6c>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d104      	bne.n	800643c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006432:	2300      	movs	r3, #0
 8006434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	61bb      	str	r3, [r7, #24]
 800643a:	e003      	b.n	8006444 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006440:	2300      	movs	r3, #0
 8006442:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006444:	e030      	b.n	80064a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2200      	movs	r2, #0
 800644e:	2180      	movs	r1, #128	@ 0x80
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f001 f823 	bl	800749c <UART_WaitOnFlagUntilTimeout>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d005      	beq.n	8006468 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2220      	movs	r2, #32
 8006460:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e03d      	b.n	80064e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10b      	bne.n	8006486 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800647c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	3302      	adds	r3, #2
 8006482:	61bb      	str	r3, [r7, #24]
 8006484:	e007      	b.n	8006496 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	781a      	ldrb	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	3301      	adds	r3, #1
 8006494:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800649c:	b29b      	uxth	r3, r3
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1c8      	bne.n	8006446 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	2200      	movs	r2, #0
 80064bc:	2140      	movs	r1, #64	@ 0x40
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 ffec 	bl	800749c <UART_WaitOnFlagUntilTimeout>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d005      	beq.n	80064d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e006      	b.n	80064e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2220      	movs	r2, #32
 80064da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	e000      	b.n	80064e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80064e2:	2302      	movs	r3, #2
  }
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3720      	adds	r7, #32
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b08a      	sub	sp, #40	@ 0x28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	4613      	mov	r3, r2
 80064f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006500:	2b20      	cmp	r3, #32
 8006502:	d137      	bne.n	8006574 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d002      	beq.n	8006510 <HAL_UART_Receive_IT+0x24>
 800650a:	88fb      	ldrh	r3, [r7, #6]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e030      	b.n	8006576 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a18      	ldr	r2, [pc, #96]	@ (8006580 <HAL_UART_Receive_IT+0x94>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d01f      	beq.n	8006564 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d018      	beq.n	8006564 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	e853 3f00 	ldrex	r3, [r3]
 800653e:	613b      	str	r3, [r7, #16]
   return(result);
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006546:	627b      	str	r3, [r7, #36]	@ 0x24
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006550:	623b      	str	r3, [r7, #32]
 8006552:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006554:	69f9      	ldr	r1, [r7, #28]
 8006556:	6a3a      	ldr	r2, [r7, #32]
 8006558:	e841 2300 	strex	r3, r2, [r1]
 800655c:	61bb      	str	r3, [r7, #24]
   return(result);
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1e6      	bne.n	8006532 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006564:	88fb      	ldrh	r3, [r7, #6]
 8006566:	461a      	mov	r2, r3
 8006568:	68b9      	ldr	r1, [r7, #8]
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f001 f804 	bl	8007578 <UART_Start_Receive_IT>
 8006570:	4603      	mov	r3, r0
 8006572:	e000      	b.n	8006576 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006574:	2302      	movs	r3, #2
  }
}
 8006576:	4618      	mov	r0, r3
 8006578:	3728      	adds	r7, #40	@ 0x28
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	40008000 	.word	0x40008000

08006584 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b0ba      	sub	sp, #232	@ 0xe8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80065ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80065b2:	4013      	ands	r3, r2
 80065b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80065b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d11b      	bne.n	80065f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065c4:	f003 0320 	and.w	r3, r3, #32
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d015      	beq.n	80065f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065d0:	f003 0320 	and.w	r3, r3, #32
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d105      	bne.n	80065e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d009      	beq.n	80065f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 82e3 	beq.w	8006bb4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	4798      	blx	r3
      }
      return;
 80065f6:	e2dd      	b.n	8006bb4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 8123 	beq.w	8006848 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006602:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006606:	4b8d      	ldr	r3, [pc, #564]	@ (800683c <HAL_UART_IRQHandler+0x2b8>)
 8006608:	4013      	ands	r3, r2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d106      	bne.n	800661c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800660e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006612:	4b8b      	ldr	r3, [pc, #556]	@ (8006840 <HAL_UART_IRQHandler+0x2bc>)
 8006614:	4013      	ands	r3, r2
 8006616:	2b00      	cmp	r3, #0
 8006618:	f000 8116 	beq.w	8006848 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800661c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b00      	cmp	r3, #0
 8006626:	d011      	beq.n	800664c <HAL_UART_IRQHandler+0xc8>
 8006628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800662c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00b      	beq.n	800664c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2201      	movs	r2, #1
 800663a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006642:	f043 0201 	orr.w	r2, r3, #1
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800664c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d011      	beq.n	800667c <HAL_UART_IRQHandler+0xf8>
 8006658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00b      	beq.n	800667c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2202      	movs	r2, #2
 800666a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006672:	f043 0204 	orr.w	r2, r3, #4
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800667c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006680:	f003 0304 	and.w	r3, r3, #4
 8006684:	2b00      	cmp	r3, #0
 8006686:	d011      	beq.n	80066ac <HAL_UART_IRQHandler+0x128>
 8006688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00b      	beq.n	80066ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2204      	movs	r2, #4
 800669a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066a2:	f043 0202 	orr.w	r2, r3, #2
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066b0:	f003 0308 	and.w	r3, r3, #8
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d017      	beq.n	80066e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066bc:	f003 0320 	and.w	r3, r3, #32
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d105      	bne.n	80066d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80066c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80066c8:	4b5c      	ldr	r3, [pc, #368]	@ (800683c <HAL_UART_IRQHandler+0x2b8>)
 80066ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00b      	beq.n	80066e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2208      	movs	r2, #8
 80066d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066de:	f043 0208 	orr.w	r2, r3, #8
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d012      	beq.n	800671a <HAL_UART_IRQHandler+0x196>
 80066f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00c      	beq.n	800671a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006708:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006710:	f043 0220 	orr.w	r2, r3, #32
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 8249 	beq.w	8006bb8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	2b00      	cmp	r3, #0
 8006730:	d013      	beq.n	800675a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006736:	f003 0320 	and.w	r3, r3, #32
 800673a:	2b00      	cmp	r3, #0
 800673c:	d105      	bne.n	800674a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800673e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d007      	beq.n	800675a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006760:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800676e:	2b40      	cmp	r3, #64	@ 0x40
 8006770:	d005      	beq.n	800677e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006776:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800677a:	2b00      	cmp	r3, #0
 800677c:	d054      	beq.n	8006828 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f001 f81c 	bl	80077bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678e:	2b40      	cmp	r3, #64	@ 0x40
 8006790:	d146      	bne.n	8006820 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3308      	adds	r3, #8
 8006798:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067a0:	e853 3f00 	ldrex	r3, [r3]
 80067a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80067a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3308      	adds	r3, #8
 80067ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80067be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80067c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80067ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80067ce:	e841 2300 	strex	r3, r2, [r1]
 80067d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80067d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1d9      	bne.n	8006792 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d017      	beq.n	8006818 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067ee:	4a15      	ldr	r2, [pc, #84]	@ (8006844 <HAL_UART_IRQHandler+0x2c0>)
 80067f0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fc fe0c 	bl	8003416 <HAL_DMA_Abort_IT>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d019      	beq.n	8006838 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800680a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006812:	4610      	mov	r0, r2
 8006814:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006816:	e00f      	b.n	8006838 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f9e1 	bl	8006be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681e:	e00b      	b.n	8006838 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f9dd 	bl	8006be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006826:	e007      	b.n	8006838 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f9d9 	bl	8006be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006836:	e1bf      	b.n	8006bb8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006838:	bf00      	nop
    return;
 800683a:	e1bd      	b.n	8006bb8 <HAL_UART_IRQHandler+0x634>
 800683c:	10000001 	.word	0x10000001
 8006840:	04000120 	.word	0x04000120
 8006844:	08007889 	.word	0x08007889

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800684c:	2b01      	cmp	r3, #1
 800684e:	f040 8153 	bne.w	8006af8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006856:	f003 0310 	and.w	r3, r3, #16
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 814c 	beq.w	8006af8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006864:	f003 0310 	and.w	r3, r3, #16
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 8145 	beq.w	8006af8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2210      	movs	r2, #16
 8006874:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006880:	2b40      	cmp	r3, #64	@ 0x40
 8006882:	f040 80bb 	bne.w	80069fc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006894:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 818f 	beq.w	8006bbc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80068a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068a8:	429a      	cmp	r2, r3
 80068aa:	f080 8187 	bcs.w	8006bbc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f040 8087 	bne.w	80069da <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068d8:	e853 3f00 	ldrex	r3, [r3]
 80068dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80068e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	461a      	mov	r2, r3
 80068f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006902:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800690e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1da      	bne.n	80068cc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3308      	adds	r3, #8
 800691c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006920:	e853 3f00 	ldrex	r3, [r3]
 8006924:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006926:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006928:	f023 0301 	bic.w	r3, r3, #1
 800692c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3308      	adds	r3, #8
 8006936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800693a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800693e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006940:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006942:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800694c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1e1      	bne.n	8006916 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3308      	adds	r3, #8
 8006958:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006962:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006964:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006968:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3308      	adds	r3, #8
 8006972:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006976:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006978:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800697c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006984:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e3      	bne.n	8006952 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2220      	movs	r2, #32
 800698e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069a8:	f023 0310 	bic.w	r3, r3, #16
 80069ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	461a      	mov	r2, r3
 80069b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069c2:	e841 2300 	strex	r3, r2, [r1]
 80069c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e4      	bne.n	8006998 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7fc fcc5 	bl	8003364 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2202      	movs	r2, #2
 80069de:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	4619      	mov	r1, r3
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f8fd 	bl	8006bf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069fa:	e0df      	b.n	8006bbc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 80d1 	beq.w	8006bc0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006a1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 80cc 	beq.w	8006bc0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	461a      	mov	r2, r3
 8006a46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a4c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e4      	bne.n	8006a28 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3308      	adds	r3, #8
 8006a64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	e853 3f00 	ldrex	r3, [r3]
 8006a6c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a74:	f023 0301 	bic.w	r3, r3, #1
 8006a78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3308      	adds	r3, #8
 8006a82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a86:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e1      	bne.n	8006a5e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	e853 3f00 	ldrex	r3, [r3]
 8006aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0310 	bic.w	r3, r3, #16
 8006ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006ad0:	61fb      	str	r3, [r7, #28]
 8006ad2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	69b9      	ldr	r1, [r7, #24]
 8006ad6:	69fa      	ldr	r2, [r7, #28]
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	617b      	str	r3, [r7, #20]
   return(result);
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e4      	bne.n	8006aae <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006aea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f87f 	bl	8006bf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006af6:	e063      	b.n	8006bc0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006afc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00e      	beq.n	8006b22 <HAL_UART_IRQHandler+0x59e>
 8006b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d008      	beq.n	8006b22 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006b18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f001 fc12 	bl	8008344 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b20:	e051      	b.n	8006bc6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d014      	beq.n	8006b58 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d105      	bne.n	8006b46 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d008      	beq.n	8006b58 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d03a      	beq.n	8006bc4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	4798      	blx	r3
    }
    return;
 8006b56:	e035      	b.n	8006bc4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d009      	beq.n	8006b78 <HAL_UART_IRQHandler+0x5f4>
 8006b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d003      	beq.n	8006b78 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fe9f 	bl	80078b4 <UART_EndTransmit_IT>
    return;
 8006b76:	e026      	b.n	8006bc6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d009      	beq.n	8006b98 <HAL_UART_IRQHandler+0x614>
 8006b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b88:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f001 fbeb 	bl	800836c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b96:	e016      	b.n	8006bc6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d010      	beq.n	8006bc6 <HAL_UART_IRQHandler+0x642>
 8006ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	da0c      	bge.n	8006bc6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f001 fbd3 	bl	8008358 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bb2:	e008      	b.n	8006bc6 <HAL_UART_IRQHandler+0x642>
      return;
 8006bb4:	bf00      	nop
 8006bb6:	e006      	b.n	8006bc6 <HAL_UART_IRQHandler+0x642>
    return;
 8006bb8:	bf00      	nop
 8006bba:	e004      	b.n	8006bc6 <HAL_UART_IRQHandler+0x642>
      return;
 8006bbc:	bf00      	nop
 8006bbe:	e002      	b.n	8006bc6 <HAL_UART_IRQHandler+0x642>
      return;
 8006bc0:	bf00      	nop
 8006bc2:	e000      	b.n	8006bc6 <HAL_UART_IRQHandler+0x642>
    return;
 8006bc4:	bf00      	nop
  }
}
 8006bc6:	37e8      	adds	r7, #232	@ 0xe8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c10:	b08c      	sub	sp, #48	@ 0x30
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	431a      	orrs	r2, r3
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	69db      	ldr	r3, [r3, #28]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	4baa      	ldr	r3, [pc, #680]	@ (8006ee4 <UART_SetConfig+0x2d8>)
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	6812      	ldr	r2, [r2, #0]
 8006c42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c44:	430b      	orrs	r3, r1
 8006c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a9f      	ldr	r2, [pc, #636]	@ (8006ee8 <UART_SetConfig+0x2dc>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d004      	beq.n	8006c78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c74:	4313      	orrs	r3, r2
 8006c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006c82:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	6812      	ldr	r2, [r2, #0]
 8006c8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c8c:	430b      	orrs	r3, r1
 8006c8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c96:	f023 010f 	bic.w	r1, r3, #15
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a90      	ldr	r2, [pc, #576]	@ (8006eec <UART_SetConfig+0x2e0>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d125      	bne.n	8006cfc <UART_SetConfig+0xf0>
 8006cb0:	4b8f      	ldr	r3, [pc, #572]	@ (8006ef0 <UART_SetConfig+0x2e4>)
 8006cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb6:	f003 0303 	and.w	r3, r3, #3
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	d81a      	bhi.n	8006cf4 <UART_SetConfig+0xe8>
 8006cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc4 <UART_SetConfig+0xb8>)
 8006cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc4:	08006cd5 	.word	0x08006cd5
 8006cc8:	08006ce5 	.word	0x08006ce5
 8006ccc:	08006cdd 	.word	0x08006cdd
 8006cd0:	08006ced 	.word	0x08006ced
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cda:	e116      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ce2:	e112      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006ce4:	2304      	movs	r3, #4
 8006ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cea:	e10e      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006cec:	2308      	movs	r3, #8
 8006cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cf2:	e10a      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006cf4:	2310      	movs	r3, #16
 8006cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cfa:	e106      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a7c      	ldr	r2, [pc, #496]	@ (8006ef4 <UART_SetConfig+0x2e8>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d138      	bne.n	8006d78 <UART_SetConfig+0x16c>
 8006d06:	4b7a      	ldr	r3, [pc, #488]	@ (8006ef0 <UART_SetConfig+0x2e4>)
 8006d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d0c:	f003 030c 	and.w	r3, r3, #12
 8006d10:	2b0c      	cmp	r3, #12
 8006d12:	d82d      	bhi.n	8006d70 <UART_SetConfig+0x164>
 8006d14:	a201      	add	r2, pc, #4	@ (adr r2, 8006d1c <UART_SetConfig+0x110>)
 8006d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1a:	bf00      	nop
 8006d1c:	08006d51 	.word	0x08006d51
 8006d20:	08006d71 	.word	0x08006d71
 8006d24:	08006d71 	.word	0x08006d71
 8006d28:	08006d71 	.word	0x08006d71
 8006d2c:	08006d61 	.word	0x08006d61
 8006d30:	08006d71 	.word	0x08006d71
 8006d34:	08006d71 	.word	0x08006d71
 8006d38:	08006d71 	.word	0x08006d71
 8006d3c:	08006d59 	.word	0x08006d59
 8006d40:	08006d71 	.word	0x08006d71
 8006d44:	08006d71 	.word	0x08006d71
 8006d48:	08006d71 	.word	0x08006d71
 8006d4c:	08006d69 	.word	0x08006d69
 8006d50:	2300      	movs	r3, #0
 8006d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d56:	e0d8      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d5e:	e0d4      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006d60:	2304      	movs	r3, #4
 8006d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d66:	e0d0      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006d68:	2308      	movs	r3, #8
 8006d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d6e:	e0cc      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006d70:	2310      	movs	r3, #16
 8006d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d76:	e0c8      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a5e      	ldr	r2, [pc, #376]	@ (8006ef8 <UART_SetConfig+0x2ec>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d125      	bne.n	8006dce <UART_SetConfig+0x1c2>
 8006d82:	4b5b      	ldr	r3, [pc, #364]	@ (8006ef0 <UART_SetConfig+0x2e4>)
 8006d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006d8c:	2b30      	cmp	r3, #48	@ 0x30
 8006d8e:	d016      	beq.n	8006dbe <UART_SetConfig+0x1b2>
 8006d90:	2b30      	cmp	r3, #48	@ 0x30
 8006d92:	d818      	bhi.n	8006dc6 <UART_SetConfig+0x1ba>
 8006d94:	2b20      	cmp	r3, #32
 8006d96:	d00a      	beq.n	8006dae <UART_SetConfig+0x1a2>
 8006d98:	2b20      	cmp	r3, #32
 8006d9a:	d814      	bhi.n	8006dc6 <UART_SetConfig+0x1ba>
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <UART_SetConfig+0x19a>
 8006da0:	2b10      	cmp	r3, #16
 8006da2:	d008      	beq.n	8006db6 <UART_SetConfig+0x1aa>
 8006da4:	e00f      	b.n	8006dc6 <UART_SetConfig+0x1ba>
 8006da6:	2300      	movs	r3, #0
 8006da8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dac:	e0ad      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006dae:	2302      	movs	r3, #2
 8006db0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006db4:	e0a9      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006db6:	2304      	movs	r3, #4
 8006db8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dbc:	e0a5      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006dbe:	2308      	movs	r3, #8
 8006dc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dc4:	e0a1      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006dc6:	2310      	movs	r3, #16
 8006dc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dcc:	e09d      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a4a      	ldr	r2, [pc, #296]	@ (8006efc <UART_SetConfig+0x2f0>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d125      	bne.n	8006e24 <UART_SetConfig+0x218>
 8006dd8:	4b45      	ldr	r3, [pc, #276]	@ (8006ef0 <UART_SetConfig+0x2e4>)
 8006dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dde:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006de2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006de4:	d016      	beq.n	8006e14 <UART_SetConfig+0x208>
 8006de6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006de8:	d818      	bhi.n	8006e1c <UART_SetConfig+0x210>
 8006dea:	2b80      	cmp	r3, #128	@ 0x80
 8006dec:	d00a      	beq.n	8006e04 <UART_SetConfig+0x1f8>
 8006dee:	2b80      	cmp	r3, #128	@ 0x80
 8006df0:	d814      	bhi.n	8006e1c <UART_SetConfig+0x210>
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <UART_SetConfig+0x1f0>
 8006df6:	2b40      	cmp	r3, #64	@ 0x40
 8006df8:	d008      	beq.n	8006e0c <UART_SetConfig+0x200>
 8006dfa:	e00f      	b.n	8006e1c <UART_SetConfig+0x210>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e02:	e082      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006e04:	2302      	movs	r3, #2
 8006e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e0a:	e07e      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006e0c:	2304      	movs	r3, #4
 8006e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e12:	e07a      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006e14:	2308      	movs	r3, #8
 8006e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e1a:	e076      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006e1c:	2310      	movs	r3, #16
 8006e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e22:	e072      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a35      	ldr	r2, [pc, #212]	@ (8006f00 <UART_SetConfig+0x2f4>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d12a      	bne.n	8006e84 <UART_SetConfig+0x278>
 8006e2e:	4b30      	ldr	r3, [pc, #192]	@ (8006ef0 <UART_SetConfig+0x2e4>)
 8006e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e3c:	d01a      	beq.n	8006e74 <UART_SetConfig+0x268>
 8006e3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e42:	d81b      	bhi.n	8006e7c <UART_SetConfig+0x270>
 8006e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e48:	d00c      	beq.n	8006e64 <UART_SetConfig+0x258>
 8006e4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e4e:	d815      	bhi.n	8006e7c <UART_SetConfig+0x270>
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d003      	beq.n	8006e5c <UART_SetConfig+0x250>
 8006e54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e58:	d008      	beq.n	8006e6c <UART_SetConfig+0x260>
 8006e5a:	e00f      	b.n	8006e7c <UART_SetConfig+0x270>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e62:	e052      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006e64:	2302      	movs	r3, #2
 8006e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e6a:	e04e      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006e6c:	2304      	movs	r3, #4
 8006e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e72:	e04a      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006e74:	2308      	movs	r3, #8
 8006e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e7a:	e046      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006e7c:	2310      	movs	r3, #16
 8006e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e82:	e042      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a17      	ldr	r2, [pc, #92]	@ (8006ee8 <UART_SetConfig+0x2dc>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d13a      	bne.n	8006f04 <UART_SetConfig+0x2f8>
 8006e8e:	4b18      	ldr	r3, [pc, #96]	@ (8006ef0 <UART_SetConfig+0x2e4>)
 8006e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e9c:	d01a      	beq.n	8006ed4 <UART_SetConfig+0x2c8>
 8006e9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ea2:	d81b      	bhi.n	8006edc <UART_SetConfig+0x2d0>
 8006ea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ea8:	d00c      	beq.n	8006ec4 <UART_SetConfig+0x2b8>
 8006eaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006eae:	d815      	bhi.n	8006edc <UART_SetConfig+0x2d0>
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <UART_SetConfig+0x2b0>
 8006eb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eb8:	d008      	beq.n	8006ecc <UART_SetConfig+0x2c0>
 8006eba:	e00f      	b.n	8006edc <UART_SetConfig+0x2d0>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ec2:	e022      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eca:	e01e      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006ecc:	2304      	movs	r3, #4
 8006ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ed2:	e01a      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006ed4:	2308      	movs	r3, #8
 8006ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eda:	e016      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006edc:	2310      	movs	r3, #16
 8006ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ee2:	e012      	b.n	8006f0a <UART_SetConfig+0x2fe>
 8006ee4:	cfff69f3 	.word	0xcfff69f3
 8006ee8:	40008000 	.word	0x40008000
 8006eec:	40013800 	.word	0x40013800
 8006ef0:	40021000 	.word	0x40021000
 8006ef4:	40004400 	.word	0x40004400
 8006ef8:	40004800 	.word	0x40004800
 8006efc:	40004c00 	.word	0x40004c00
 8006f00:	40005000 	.word	0x40005000
 8006f04:	2310      	movs	r3, #16
 8006f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4aae      	ldr	r2, [pc, #696]	@ (80071c8 <UART_SetConfig+0x5bc>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	f040 8097 	bne.w	8007044 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f1a:	2b08      	cmp	r3, #8
 8006f1c:	d823      	bhi.n	8006f66 <UART_SetConfig+0x35a>
 8006f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f24 <UART_SetConfig+0x318>)
 8006f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f24:	08006f49 	.word	0x08006f49
 8006f28:	08006f67 	.word	0x08006f67
 8006f2c:	08006f51 	.word	0x08006f51
 8006f30:	08006f67 	.word	0x08006f67
 8006f34:	08006f57 	.word	0x08006f57
 8006f38:	08006f67 	.word	0x08006f67
 8006f3c:	08006f67 	.word	0x08006f67
 8006f40:	08006f67 	.word	0x08006f67
 8006f44:	08006f5f 	.word	0x08006f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f48:	f7fd f9d6 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 8006f4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f4e:	e010      	b.n	8006f72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f50:	4b9e      	ldr	r3, [pc, #632]	@ (80071cc <UART_SetConfig+0x5c0>)
 8006f52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f54:	e00d      	b.n	8006f72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f56:	f7fd f961 	bl	800421c <HAL_RCC_GetSysClockFreq>
 8006f5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f5c:	e009      	b.n	8006f72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f64:	e005      	b.n	8006f72 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f000 8130 	beq.w	80071da <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7e:	4a94      	ldr	r2, [pc, #592]	@ (80071d0 <UART_SetConfig+0x5c4>)
 8006f80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f84:	461a      	mov	r2, r3
 8006f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f88:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	4613      	mov	r3, r2
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	4413      	add	r3, r2
 8006f98:	69ba      	ldr	r2, [r7, #24]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d305      	bcc.n	8006faa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d903      	bls.n	8006fb2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006fb0:	e113      	b.n	80071da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	60bb      	str	r3, [r7, #8]
 8006fb8:	60fa      	str	r2, [r7, #12]
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fbe:	4a84      	ldr	r2, [pc, #528]	@ (80071d0 <UART_SetConfig+0x5c4>)
 8006fc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	603b      	str	r3, [r7, #0]
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006fd4:	f7f9 fe80 	bl	8000cd8 <__aeabi_uldivmod>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4610      	mov	r0, r2
 8006fde:	4619      	mov	r1, r3
 8006fe0:	f04f 0200 	mov.w	r2, #0
 8006fe4:	f04f 0300 	mov.w	r3, #0
 8006fe8:	020b      	lsls	r3, r1, #8
 8006fea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fee:	0202      	lsls	r2, r0, #8
 8006ff0:	6979      	ldr	r1, [r7, #20]
 8006ff2:	6849      	ldr	r1, [r1, #4]
 8006ff4:	0849      	lsrs	r1, r1, #1
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	eb12 0804 	adds.w	r8, r2, r4
 8007000:	eb43 0905 	adc.w	r9, r3, r5
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	469a      	mov	sl, r3
 800700c:	4693      	mov	fp, r2
 800700e:	4652      	mov	r2, sl
 8007010:	465b      	mov	r3, fp
 8007012:	4640      	mov	r0, r8
 8007014:	4649      	mov	r1, r9
 8007016:	f7f9 fe5f 	bl	8000cd8 <__aeabi_uldivmod>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4613      	mov	r3, r2
 8007020:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007028:	d308      	bcc.n	800703c <UART_SetConfig+0x430>
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007030:	d204      	bcs.n	800703c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6a3a      	ldr	r2, [r7, #32]
 8007038:	60da      	str	r2, [r3, #12]
 800703a:	e0ce      	b.n	80071da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007042:	e0ca      	b.n	80071da <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800704c:	d166      	bne.n	800711c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800704e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007052:	2b08      	cmp	r3, #8
 8007054:	d827      	bhi.n	80070a6 <UART_SetConfig+0x49a>
 8007056:	a201      	add	r2, pc, #4	@ (adr r2, 800705c <UART_SetConfig+0x450>)
 8007058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705c:	08007081 	.word	0x08007081
 8007060:	08007089 	.word	0x08007089
 8007064:	08007091 	.word	0x08007091
 8007068:	080070a7 	.word	0x080070a7
 800706c:	08007097 	.word	0x08007097
 8007070:	080070a7 	.word	0x080070a7
 8007074:	080070a7 	.word	0x080070a7
 8007078:	080070a7 	.word	0x080070a7
 800707c:	0800709f 	.word	0x0800709f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007080:	f7fd f93a 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 8007084:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007086:	e014      	b.n	80070b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007088:	f7fd f94c 	bl	8004324 <HAL_RCC_GetPCLK2Freq>
 800708c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800708e:	e010      	b.n	80070b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007090:	4b4e      	ldr	r3, [pc, #312]	@ (80071cc <UART_SetConfig+0x5c0>)
 8007092:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007094:	e00d      	b.n	80070b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007096:	f7fd f8c1 	bl	800421c <HAL_RCC_GetSysClockFreq>
 800709a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800709c:	e009      	b.n	80070b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800709e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070a4:	e005      	b.n	80070b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80070b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 8090 	beq.w	80071da <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070be:	4a44      	ldr	r2, [pc, #272]	@ (80071d0 <UART_SetConfig+0x5c4>)
 80070c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070c4:	461a      	mov	r2, r3
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80070cc:	005a      	lsls	r2, r3, #1
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	085b      	lsrs	r3, r3, #1
 80070d4:	441a      	add	r2, r3
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	fbb2 f3f3 	udiv	r3, r2, r3
 80070de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	2b0f      	cmp	r3, #15
 80070e4:	d916      	bls.n	8007114 <UART_SetConfig+0x508>
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070ec:	d212      	bcs.n	8007114 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	f023 030f 	bic.w	r3, r3, #15
 80070f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	085b      	lsrs	r3, r3, #1
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	b29a      	uxth	r2, r3
 8007104:	8bfb      	ldrh	r3, [r7, #30]
 8007106:	4313      	orrs	r3, r2
 8007108:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	8bfa      	ldrh	r2, [r7, #30]
 8007110:	60da      	str	r2, [r3, #12]
 8007112:	e062      	b.n	80071da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800711a:	e05e      	b.n	80071da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800711c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007120:	2b08      	cmp	r3, #8
 8007122:	d828      	bhi.n	8007176 <UART_SetConfig+0x56a>
 8007124:	a201      	add	r2, pc, #4	@ (adr r2, 800712c <UART_SetConfig+0x520>)
 8007126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712a:	bf00      	nop
 800712c:	08007151 	.word	0x08007151
 8007130:	08007159 	.word	0x08007159
 8007134:	08007161 	.word	0x08007161
 8007138:	08007177 	.word	0x08007177
 800713c:	08007167 	.word	0x08007167
 8007140:	08007177 	.word	0x08007177
 8007144:	08007177 	.word	0x08007177
 8007148:	08007177 	.word	0x08007177
 800714c:	0800716f 	.word	0x0800716f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007150:	f7fd f8d2 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 8007154:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007156:	e014      	b.n	8007182 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007158:	f7fd f8e4 	bl	8004324 <HAL_RCC_GetPCLK2Freq>
 800715c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800715e:	e010      	b.n	8007182 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007160:	4b1a      	ldr	r3, [pc, #104]	@ (80071cc <UART_SetConfig+0x5c0>)
 8007162:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007164:	e00d      	b.n	8007182 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007166:	f7fd f859 	bl	800421c <HAL_RCC_GetSysClockFreq>
 800716a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800716c:	e009      	b.n	8007182 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800716e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007172:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007174:	e005      	b.n	8007182 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007176:	2300      	movs	r3, #0
 8007178:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007180:	bf00      	nop
    }

    if (pclk != 0U)
 8007182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007184:	2b00      	cmp	r3, #0
 8007186:	d028      	beq.n	80071da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718c:	4a10      	ldr	r2, [pc, #64]	@ (80071d0 <UART_SetConfig+0x5c4>)
 800718e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007192:	461a      	mov	r2, r3
 8007194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007196:	fbb3 f2f2 	udiv	r2, r3, r2
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	085b      	lsrs	r3, r3, #1
 80071a0:	441a      	add	r2, r3
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	2b0f      	cmp	r3, #15
 80071b0:	d910      	bls.n	80071d4 <UART_SetConfig+0x5c8>
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071b8:	d20c      	bcs.n	80071d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	b29a      	uxth	r2, r3
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	60da      	str	r2, [r3, #12]
 80071c4:	e009      	b.n	80071da <UART_SetConfig+0x5ce>
 80071c6:	bf00      	nop
 80071c8:	40008000 	.word	0x40008000
 80071cc:	00f42400 	.word	0x00f42400
 80071d0:	0800d11c 	.word	0x0800d11c
      }
      else
      {
        ret = HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2201      	movs	r2, #1
 80071de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	2200      	movs	r2, #0
 80071ee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2200      	movs	r2, #0
 80071f4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80071f6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3730      	adds	r7, #48	@ 0x30
 80071fe:	46bd      	mov	sp, r7
 8007200:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007204 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007210:	f003 0308 	and.w	r3, r3, #8
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00a      	beq.n	800722e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00a      	beq.n	8007250 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	430a      	orrs	r2, r1
 800724e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007254:	f003 0302 	and.w	r3, r3, #2
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00a      	beq.n	8007272 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007276:	f003 0304 	and.w	r3, r3, #4
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00a      	beq.n	8007294 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	430a      	orrs	r2, r1
 8007292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007298:	f003 0310 	and.w	r3, r3, #16
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00a      	beq.n	80072b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	430a      	orrs	r2, r1
 80072b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ba:	f003 0320 	and.w	r3, r3, #32
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00a      	beq.n	80072d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d01a      	beq.n	800731a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007302:	d10a      	bne.n	800731a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	430a      	orrs	r2, r1
 8007318:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800731e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00a      	beq.n	800733c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	430a      	orrs	r2, r1
 800733a:	605a      	str	r2, [r3, #4]
  }
}
 800733c:	bf00      	nop
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b098      	sub	sp, #96	@ 0x60
 800734c:	af02      	add	r7, sp, #8
 800734e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007358:	f7fb ff18 	bl	800318c <HAL_GetTick>
 800735c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0308 	and.w	r3, r3, #8
 8007368:	2b08      	cmp	r3, #8
 800736a:	d12f      	bne.n	80073cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800736c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007374:	2200      	movs	r2, #0
 8007376:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f88e 	bl	800749c <UART_WaitOnFlagUntilTimeout>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d022      	beq.n	80073cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800738e:	e853 3f00 	ldrex	r3, [r3]
 8007392:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007396:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800739a:	653b      	str	r3, [r7, #80]	@ 0x50
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	461a      	mov	r2, r3
 80073a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80073a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073ac:	e841 2300 	strex	r3, r2, [r1]
 80073b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1e6      	bne.n	8007386 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2220      	movs	r2, #32
 80073bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e063      	b.n	8007494 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0304 	and.w	r3, r3, #4
 80073d6:	2b04      	cmp	r3, #4
 80073d8:	d149      	bne.n	800746e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073e2:	2200      	movs	r2, #0
 80073e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f857 	bl	800749c <UART_WaitOnFlagUntilTimeout>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d03c      	beq.n	800746e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fc:	e853 3f00 	ldrex	r3, [r3]
 8007400:	623b      	str	r3, [r7, #32]
   return(result);
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007408:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007412:	633b      	str	r3, [r7, #48]	@ 0x30
 8007414:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800741a:	e841 2300 	strex	r3, r2, [r1]
 800741e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1e6      	bne.n	80073f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3308      	adds	r3, #8
 800742c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	e853 3f00 	ldrex	r3, [r3]
 8007434:	60fb      	str	r3, [r7, #12]
   return(result);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f023 0301 	bic.w	r3, r3, #1
 800743c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	3308      	adds	r3, #8
 8007444:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007446:	61fa      	str	r2, [r7, #28]
 8007448:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	69b9      	ldr	r1, [r7, #24]
 800744c:	69fa      	ldr	r2, [r7, #28]
 800744e:	e841 2300 	strex	r3, r2, [r1]
 8007452:	617b      	str	r3, [r7, #20]
   return(result);
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1e5      	bne.n	8007426 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2220      	movs	r2, #32
 800745e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e012      	b.n	8007494 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2220      	movs	r2, #32
 8007472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2220      	movs	r2, #32
 800747a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3758      	adds	r7, #88	@ 0x58
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	603b      	str	r3, [r7, #0]
 80074a8:	4613      	mov	r3, r2
 80074aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ac:	e04f      	b.n	800754e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b4:	d04b      	beq.n	800754e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074b6:	f7fb fe69 	bl	800318c <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	69ba      	ldr	r2, [r7, #24]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d302      	bcc.n	80074cc <UART_WaitOnFlagUntilTimeout+0x30>
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e04e      	b.n	800756e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0304 	and.w	r3, r3, #4
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d037      	beq.n	800754e <UART_WaitOnFlagUntilTimeout+0xb2>
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2b80      	cmp	r3, #128	@ 0x80
 80074e2:	d034      	beq.n	800754e <UART_WaitOnFlagUntilTimeout+0xb2>
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2b40      	cmp	r3, #64	@ 0x40
 80074e8:	d031      	beq.n	800754e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	69db      	ldr	r3, [r3, #28]
 80074f0:	f003 0308 	and.w	r3, r3, #8
 80074f4:	2b08      	cmp	r3, #8
 80074f6:	d110      	bne.n	800751a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2208      	movs	r2, #8
 80074fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 f95b 	bl	80077bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2208      	movs	r2, #8
 800750a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e029      	b.n	800756e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007528:	d111      	bne.n	800754e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007532:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f000 f941 	bl	80077bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2220      	movs	r2, #32
 800753e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e00f      	b.n	800756e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	69da      	ldr	r2, [r3, #28]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	4013      	ands	r3, r2
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	429a      	cmp	r2, r3
 800755c:	bf0c      	ite	eq
 800755e:	2301      	moveq	r3, #1
 8007560:	2300      	movne	r3, #0
 8007562:	b2db      	uxtb	r3, r3
 8007564:	461a      	mov	r2, r3
 8007566:	79fb      	ldrb	r3, [r7, #7]
 8007568:	429a      	cmp	r2, r3
 800756a:	d0a0      	beq.n	80074ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007578:	b480      	push	{r7}
 800757a:	b0a3      	sub	sp, #140	@ 0x8c
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	4613      	mov	r3, r2
 8007584:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	88fa      	ldrh	r2, [r7, #6]
 8007590:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	88fa      	ldrh	r2, [r7, #6]
 8007598:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075aa:	d10e      	bne.n	80075ca <UART_Start_Receive_IT+0x52>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d105      	bne.n	80075c0 <UART_Start_Receive_IT+0x48>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80075ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80075be:	e02d      	b.n	800761c <UART_Start_Receive_IT+0xa4>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	22ff      	movs	r2, #255	@ 0xff
 80075c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80075c8:	e028      	b.n	800761c <UART_Start_Receive_IT+0xa4>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10d      	bne.n	80075ee <UART_Start_Receive_IT+0x76>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d104      	bne.n	80075e4 <UART_Start_Receive_IT+0x6c>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	22ff      	movs	r2, #255	@ 0xff
 80075de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80075e2:	e01b      	b.n	800761c <UART_Start_Receive_IT+0xa4>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	227f      	movs	r2, #127	@ 0x7f
 80075e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80075ec:	e016      	b.n	800761c <UART_Start_Receive_IT+0xa4>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075f6:	d10d      	bne.n	8007614 <UART_Start_Receive_IT+0x9c>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d104      	bne.n	800760a <UART_Start_Receive_IT+0x92>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	227f      	movs	r2, #127	@ 0x7f
 8007604:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007608:	e008      	b.n	800761c <UART_Start_Receive_IT+0xa4>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	223f      	movs	r2, #63	@ 0x3f
 800760e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007612:	e003      	b.n	800761c <UART_Start_Receive_IT+0xa4>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2222      	movs	r2, #34	@ 0x22
 8007628:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3308      	adds	r3, #8
 8007632:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800763c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800763e:	f043 0301 	orr.w	r3, r3, #1
 8007642:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3308      	adds	r3, #8
 800764c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007650:	673a      	str	r2, [r7, #112]	@ 0x70
 8007652:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007654:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007656:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007658:	e841 2300 	strex	r3, r2, [r1]
 800765c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800765e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1e3      	bne.n	800762c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007668:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800766c:	d14f      	bne.n	800770e <UART_Start_Receive_IT+0x196>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007674:	88fa      	ldrh	r2, [r7, #6]
 8007676:	429a      	cmp	r2, r3
 8007678:	d349      	bcc.n	800770e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007682:	d107      	bne.n	8007694 <UART_Start_Receive_IT+0x11c>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d103      	bne.n	8007694 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4a47      	ldr	r2, [pc, #284]	@ (80077ac <UART_Start_Receive_IT+0x234>)
 8007690:	675a      	str	r2, [r3, #116]	@ 0x74
 8007692:	e002      	b.n	800769a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4a46      	ldr	r2, [pc, #280]	@ (80077b0 <UART_Start_Receive_IT+0x238>)
 8007698:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d01a      	beq.n	80076d8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076aa:	e853 3f00 	ldrex	r3, [r3]
 80076ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80076b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	461a      	mov	r2, r3
 80076c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80076c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076c6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80076ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80076cc:	e841 2300 	strex	r3, r2, [r1]
 80076d0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80076d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1e4      	bne.n	80076a2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3308      	adds	r3, #8
 80076de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076e2:	e853 3f00 	ldrex	r3, [r3]
 80076e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3308      	adds	r3, #8
 80076f6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80076f8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80076fa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80076fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007700:	e841 2300 	strex	r3, r2, [r1]
 8007704:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1e5      	bne.n	80076d8 <UART_Start_Receive_IT+0x160>
 800770c:	e046      	b.n	800779c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007716:	d107      	bne.n	8007728 <UART_Start_Receive_IT+0x1b0>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d103      	bne.n	8007728 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	4a24      	ldr	r2, [pc, #144]	@ (80077b4 <UART_Start_Receive_IT+0x23c>)
 8007724:	675a      	str	r2, [r3, #116]	@ 0x74
 8007726:	e002      	b.n	800772e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4a23      	ldr	r2, [pc, #140]	@ (80077b8 <UART_Start_Receive_IT+0x240>)
 800772c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d019      	beq.n	800776a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773e:	e853 3f00 	ldrex	r3, [r3]
 8007742:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007746:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800774a:	677b      	str	r3, [r7, #116]	@ 0x74
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	461a      	mov	r2, r3
 8007752:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007754:	637b      	str	r3, [r7, #52]	@ 0x34
 8007756:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007758:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800775a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800775c:	e841 2300 	strex	r3, r2, [r1]
 8007760:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1e6      	bne.n	8007736 <UART_Start_Receive_IT+0x1be>
 8007768:	e018      	b.n	800779c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	e853 3f00 	ldrex	r3, [r3]
 8007776:	613b      	str	r3, [r7, #16]
   return(result);
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	f043 0320 	orr.w	r3, r3, #32
 800777e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	461a      	mov	r2, r3
 8007786:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007788:	623b      	str	r3, [r7, #32]
 800778a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778c:	69f9      	ldr	r1, [r7, #28]
 800778e:	6a3a      	ldr	r2, [r7, #32]
 8007790:	e841 2300 	strex	r3, r2, [r1]
 8007794:	61bb      	str	r3, [r7, #24]
   return(result);
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e6      	bne.n	800776a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	378c      	adds	r7, #140	@ 0x8c
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	08007fdd 	.word	0x08007fdd
 80077b0:	08007c7d 	.word	0x08007c7d
 80077b4:	08007ac5 	.word	0x08007ac5
 80077b8:	0800790d 	.word	0x0800790d

080077bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077bc:	b480      	push	{r7}
 80077be:	b095      	sub	sp, #84	@ 0x54
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077cc:	e853 3f00 	ldrex	r3, [r3]
 80077d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	461a      	mov	r2, r3
 80077e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80077e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077ea:	e841 2300 	strex	r3, r2, [r1]
 80077ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1e6      	bne.n	80077c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3308      	adds	r3, #8
 80077fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	e853 3f00 	ldrex	r3, [r3]
 8007804:	61fb      	str	r3, [r7, #28]
   return(result);
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800780c:	f023 0301 	bic.w	r3, r3, #1
 8007810:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3308      	adds	r3, #8
 8007818:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800781a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800781c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007820:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007822:	e841 2300 	strex	r3, r2, [r1]
 8007826:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1e3      	bne.n	80077f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007832:	2b01      	cmp	r3, #1
 8007834:	d118      	bne.n	8007868 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	e853 3f00 	ldrex	r3, [r3]
 8007842:	60bb      	str	r3, [r7, #8]
   return(result);
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	f023 0310 	bic.w	r3, r3, #16
 800784a:	647b      	str	r3, [r7, #68]	@ 0x44
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007854:	61bb      	str	r3, [r7, #24]
 8007856:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007858:	6979      	ldr	r1, [r7, #20]
 800785a:	69ba      	ldr	r2, [r7, #24]
 800785c:	e841 2300 	strex	r3, r2, [r1]
 8007860:	613b      	str	r3, [r7, #16]
   return(result);
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1e6      	bne.n	8007836 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2220      	movs	r2, #32
 800786c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800787c:	bf00      	nop
 800787e:	3754      	adds	r7, #84	@ 0x54
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007894:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f7ff f99a 	bl	8006be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078ac:	bf00      	nop
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	e853 3f00 	ldrex	r3, [r3]
 80078c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078d0:	61fb      	str	r3, [r7, #28]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	461a      	mov	r2, r3
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	61bb      	str	r3, [r7, #24]
 80078dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078de:	6979      	ldr	r1, [r7, #20]
 80078e0:	69ba      	ldr	r2, [r7, #24]
 80078e2:	e841 2300 	strex	r3, r2, [r1]
 80078e6:	613b      	str	r3, [r7, #16]
   return(result);
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1e6      	bne.n	80078bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2220      	movs	r2, #32
 80078f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7ff f965 	bl	8006bcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007902:	bf00      	nop
 8007904:	3720      	adds	r7, #32
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
	...

0800790c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b09c      	sub	sp, #112	@ 0x70
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800791a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007924:	2b22      	cmp	r3, #34	@ 0x22
 8007926:	f040 80be 	bne.w	8007aa6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007930:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007934:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007938:	b2d9      	uxtb	r1, r3
 800793a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800793e:	b2da      	uxtb	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007944:	400a      	ands	r2, r1
 8007946:	b2d2      	uxtb	r2, r2
 8007948:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800794e:	1c5a      	adds	r2, r3, #1
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800795a:	b29b      	uxth	r3, r3
 800795c:	3b01      	subs	r3, #1
 800795e:	b29a      	uxth	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800796c:	b29b      	uxth	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	f040 80a1 	bne.w	8007ab6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800797c:	e853 3f00 	ldrex	r3, [r3]
 8007980:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007984:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007988:	66bb      	str	r3, [r7, #104]	@ 0x68
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	461a      	mov	r2, r3
 8007990:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007992:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007994:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007996:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007998:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800799a:	e841 2300 	strex	r3, r2, [r1]
 800799e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80079a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1e6      	bne.n	8007974 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3308      	adds	r3, #8
 80079ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b0:	e853 3f00 	ldrex	r3, [r3]
 80079b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079b8:	f023 0301 	bic.w	r3, r3, #1
 80079bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3308      	adds	r3, #8
 80079c4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80079c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80079c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079ce:	e841 2300 	strex	r3, r2, [r1]
 80079d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1e5      	bne.n	80079a6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2220      	movs	r2, #32
 80079de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a33      	ldr	r2, [pc, #204]	@ (8007ac0 <UART_RxISR_8BIT+0x1b4>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d01f      	beq.n	8007a38 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d018      	beq.n	8007a38 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0e:	e853 3f00 	ldrex	r3, [r3]
 8007a12:	623b      	str	r3, [r7, #32]
   return(result);
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	461a      	mov	r2, r3
 8007a22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a24:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a26:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a2c:	e841 2300 	strex	r3, r2, [r1]
 8007a30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1e6      	bne.n	8007a06 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d12e      	bne.n	8007a9e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	e853 3f00 	ldrex	r3, [r3]
 8007a52:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f023 0310 	bic.w	r3, r3, #16
 8007a5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	461a      	mov	r2, r3
 8007a62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a64:	61fb      	str	r3, [r7, #28]
 8007a66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a68:	69b9      	ldr	r1, [r7, #24]
 8007a6a:	69fa      	ldr	r2, [r7, #28]
 8007a6c:	e841 2300 	strex	r3, r2, [r1]
 8007a70:	617b      	str	r3, [r7, #20]
   return(result);
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1e6      	bne.n	8007a46 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	f003 0310 	and.w	r3, r3, #16
 8007a82:	2b10      	cmp	r3, #16
 8007a84:	d103      	bne.n	8007a8e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2210      	movs	r2, #16
 8007a8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a94:	4619      	mov	r1, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7ff f8ac 	bl	8006bf4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a9c:	e00b      	b.n	8007ab6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7fa ff46 	bl	8002930 <HAL_UART_RxCpltCallback>
}
 8007aa4:	e007      	b.n	8007ab6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	699a      	ldr	r2, [r3, #24]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f042 0208 	orr.w	r2, r2, #8
 8007ab4:	619a      	str	r2, [r3, #24]
}
 8007ab6:	bf00      	nop
 8007ab8:	3770      	adds	r7, #112	@ 0x70
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	40008000 	.word	0x40008000

08007ac4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b09c      	sub	sp, #112	@ 0x70
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007ad2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007adc:	2b22      	cmp	r3, #34	@ 0x22
 8007ade:	f040 80be 	bne.w	8007c5e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007af0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007af2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007af6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007afa:	4013      	ands	r3, r2
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b06:	1c9a      	adds	r2, r3, #2
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	3b01      	subs	r3, #1
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f040 80a1 	bne.w	8007c6e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b34:	e853 3f00 	ldrex	r3, [r3]
 8007b38:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007b3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b40:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	461a      	mov	r2, r3
 8007b48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b4c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b52:	e841 2300 	strex	r3, r2, [r1]
 8007b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1e6      	bne.n	8007b2c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3308      	adds	r3, #8
 8007b64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b68:	e853 3f00 	ldrex	r3, [r3]
 8007b6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b70:	f023 0301 	bic.w	r3, r3, #1
 8007b74:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3308      	adds	r3, #8
 8007b7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007b7e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b86:	e841 2300 	strex	r3, r2, [r1]
 8007b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1e5      	bne.n	8007b5e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a33      	ldr	r2, [pc, #204]	@ (8007c78 <UART_RxISR_16BIT+0x1b4>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d01f      	beq.n	8007bf0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d018      	beq.n	8007bf0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	6a3b      	ldr	r3, [r7, #32]
 8007bc6:	e853 3f00 	ldrex	r3, [r3]
 8007bca:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007bd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	461a      	mov	r2, r3
 8007bda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bde:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007be2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007be4:	e841 2300 	strex	r3, r2, [r1]
 8007be8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e6      	bne.n	8007bbe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d12e      	bne.n	8007c56 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	e853 3f00 	ldrex	r3, [r3]
 8007c0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	f023 0310 	bic.w	r3, r3, #16
 8007c12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	461a      	mov	r2, r3
 8007c1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c1c:	61bb      	str	r3, [r7, #24]
 8007c1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c20:	6979      	ldr	r1, [r7, #20]
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	e841 2300 	strex	r3, r2, [r1]
 8007c28:	613b      	str	r3, [r7, #16]
   return(result);
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1e6      	bne.n	8007bfe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	f003 0310 	and.w	r3, r3, #16
 8007c3a:	2b10      	cmp	r3, #16
 8007c3c:	d103      	bne.n	8007c46 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2210      	movs	r2, #16
 8007c44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7fe ffd0 	bl	8006bf4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c54:	e00b      	b.n	8007c6e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7fa fe6a 	bl	8002930 <HAL_UART_RxCpltCallback>
}
 8007c5c:	e007      	b.n	8007c6e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	699a      	ldr	r2, [r3, #24]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f042 0208 	orr.w	r2, r2, #8
 8007c6c:	619a      	str	r2, [r3, #24]
}
 8007c6e:	bf00      	nop
 8007c70:	3770      	adds	r7, #112	@ 0x70
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	40008000 	.word	0x40008000

08007c7c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b0ac      	sub	sp, #176	@ 0xb0
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007c8a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cb2:	2b22      	cmp	r3, #34	@ 0x22
 8007cb4:	f040 8182 	bne.w	8007fbc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007cbe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007cc2:	e125      	b.n	8007f10 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cca:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007cce:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007cd2:	b2d9      	uxtb	r1, r3
 8007cd4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cde:	400a      	ands	r2, r1
 8007ce0:	b2d2      	uxtb	r2, r2
 8007ce2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ce8:	1c5a      	adds	r2, r3, #1
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d0e:	f003 0307 	and.w	r3, r3, #7
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d053      	beq.n	8007dbe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d011      	beq.n	8007d46 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007d22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00b      	beq.n	8007d46 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2201      	movs	r2, #1
 8007d34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d3c:	f043 0201 	orr.w	r2, r3, #1
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d4a:	f003 0302 	and.w	r3, r3, #2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d011      	beq.n	8007d76 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007d52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00b      	beq.n	8007d76 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2202      	movs	r2, #2
 8007d64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d6c:	f043 0204 	orr.w	r2, r3, #4
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d7a:	f003 0304 	and.w	r3, r3, #4
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d011      	beq.n	8007da6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00b      	beq.n	8007da6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2204      	movs	r2, #4
 8007d94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d9c:	f043 0202 	orr.w	r2, r3, #2
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d006      	beq.n	8007dbe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f7fe ff15 	bl	8006be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f040 80a2 	bne.w	8007f10 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007dda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ddc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007de0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007dee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007df0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007df4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007dfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e4      	bne.n	8007dcc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3308      	adds	r3, #8
 8007e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e0c:	e853 3f00 	ldrex	r3, [r3]
 8007e10:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007e12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e18:	f023 0301 	bic.w	r3, r3, #1
 8007e1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3308      	adds	r3, #8
 8007e26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e2a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007e2c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007e30:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007e32:	e841 2300 	strex	r3, r2, [r1]
 8007e36:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007e38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1e1      	bne.n	8007e02 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a5f      	ldr	r2, [pc, #380]	@ (8007fd4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d021      	beq.n	8007ea0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d01a      	beq.n	8007ea0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e72:	e853 3f00 	ldrex	r3, [r3]
 8007e76:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007e8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e8e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e90:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007e92:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007e94:	e841 2300 	strex	r3, r2, [r1]
 8007e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1e4      	bne.n	8007e6a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d130      	bne.n	8007f0a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eb6:	e853 3f00 	ldrex	r3, [r3]
 8007eba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebe:	f023 0310 	bic.w	r3, r3, #16
 8007ec2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ed0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ed2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ed6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ed8:	e841 2300 	strex	r3, r2, [r1]
 8007edc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1e4      	bne.n	8007eae <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	f003 0310 	and.w	r3, r3, #16
 8007eee:	2b10      	cmp	r3, #16
 8007ef0:	d103      	bne.n	8007efa <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2210      	movs	r2, #16
 8007ef8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7fe fe76 	bl	8006bf4 <HAL_UARTEx_RxEventCallback>
 8007f08:	e002      	b.n	8007f10 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7fa fd10 	bl	8002930 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f10:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d006      	beq.n	8007f26 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007f18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f1c:	f003 0320 	and.w	r3, r3, #32
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f47f aecf 	bne.w	8007cc4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f2c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007f30:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d049      	beq.n	8007fcc <UART_RxISR_8BIT_FIFOEN+0x350>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007f3e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d242      	bcs.n	8007fcc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3308      	adds	r3, #8
 8007f4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	e853 3f00 	ldrex	r3, [r3]
 8007f54:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3308      	adds	r3, #8
 8007f66:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007f6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f72:	e841 2300 	strex	r3, r2, [r1]
 8007f76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e3      	bne.n	8007f46 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a15      	ldr	r2, [pc, #84]	@ (8007fd8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007f82:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	e853 3f00 	ldrex	r3, [r3]
 8007f90:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	f043 0320 	orr.w	r3, r3, #32
 8007f98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007fa6:	61bb      	str	r3, [r7, #24]
 8007fa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007faa:	6979      	ldr	r1, [r7, #20]
 8007fac:	69ba      	ldr	r2, [r7, #24]
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1e4      	bne.n	8007f84 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fba:	e007      	b.n	8007fcc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	699a      	ldr	r2, [r3, #24]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 0208 	orr.w	r2, r2, #8
 8007fca:	619a      	str	r2, [r3, #24]
}
 8007fcc:	bf00      	nop
 8007fce:	37b0      	adds	r7, #176	@ 0xb0
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	40008000 	.word	0x40008000
 8007fd8:	0800790d 	.word	0x0800790d

08007fdc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b0ae      	sub	sp, #184	@ 0xb8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007fea:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	69db      	ldr	r3, [r3, #28]
 8007ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008012:	2b22      	cmp	r3, #34	@ 0x22
 8008014:	f040 8186 	bne.w	8008324 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800801e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008022:	e129      	b.n	8008278 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800802a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008036:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800803a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800803e:	4013      	ands	r3, r2
 8008040:	b29a      	uxth	r2, r3
 8008042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008046:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800804c:	1c9a      	adds	r2, r3, #2
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008058:	b29b      	uxth	r3, r3
 800805a:	3b01      	subs	r3, #1
 800805c:	b29a      	uxth	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800806e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008072:	f003 0307 	and.w	r3, r3, #7
 8008076:	2b00      	cmp	r3, #0
 8008078:	d053      	beq.n	8008122 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800807a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d011      	beq.n	80080aa <UART_RxISR_16BIT_FIFOEN+0xce>
 8008086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800808a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00b      	beq.n	80080aa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2201      	movs	r2, #1
 8008098:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080a0:	f043 0201 	orr.w	r2, r3, #1
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d011      	beq.n	80080da <UART_RxISR_16BIT_FIFOEN+0xfe>
 80080b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00b      	beq.n	80080da <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2202      	movs	r2, #2
 80080c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080d0:	f043 0204 	orr.w	r2, r3, #4
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080de:	f003 0304 	and.w	r3, r3, #4
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d011      	beq.n	800810a <UART_RxISR_16BIT_FIFOEN+0x12e>
 80080e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00b      	beq.n	800810a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2204      	movs	r2, #4
 80080f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008100:	f043 0202 	orr.w	r2, r3, #2
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008110:	2b00      	cmp	r3, #0
 8008112:	d006      	beq.n	8008122 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7fe fd63 	bl	8006be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008128:	b29b      	uxth	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	f040 80a4 	bne.w	8008278 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008136:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008138:	e853 3f00 	ldrex	r3, [r3]
 800813c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800813e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008140:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008144:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	461a      	mov	r2, r3
 800814e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008152:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008156:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008158:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800815a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800815e:	e841 2300 	strex	r3, r2, [r1]
 8008162:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008164:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1e2      	bne.n	8008130 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3308      	adds	r3, #8
 8008170:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008172:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008174:	e853 3f00 	ldrex	r3, [r3]
 8008178:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800817a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800817c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008180:	f023 0301 	bic.w	r3, r3, #1
 8008184:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3308      	adds	r3, #8
 800818e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008192:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008194:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008196:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008198:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800819a:	e841 2300 	strex	r3, r2, [r1]
 800819e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80081a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1e1      	bne.n	800816a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2220      	movs	r2, #32
 80081aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a5f      	ldr	r2, [pc, #380]	@ (800833c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d021      	beq.n	8008208 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d01a      	beq.n	8008208 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081da:	e853 3f00 	ldrex	r3, [r3]
 80081de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80081e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80081e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081f6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80081fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081fc:	e841 2300 	strex	r3, r2, [r1]
 8008200:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008202:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1e4      	bne.n	80081d2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800820c:	2b01      	cmp	r3, #1
 800820e:	d130      	bne.n	8008272 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800821e:	e853 3f00 	ldrex	r3, [r3]
 8008222:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008226:	f023 0310 	bic.w	r3, r3, #16
 800822a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	461a      	mov	r2, r3
 8008234:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008238:	647b      	str	r3, [r7, #68]	@ 0x44
 800823a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800823e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008240:	e841 2300 	strex	r3, r2, [r1]
 8008244:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1e4      	bne.n	8008216 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	f003 0310 	and.w	r3, r3, #16
 8008256:	2b10      	cmp	r3, #16
 8008258:	d103      	bne.n	8008262 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2210      	movs	r2, #16
 8008260:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008268:	4619      	mov	r1, r3
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7fe fcc2 	bl	8006bf4 <HAL_UARTEx_RxEventCallback>
 8008270:	e002      	b.n	8008278 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7fa fb5c 	bl	8002930 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008278:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800827c:	2b00      	cmp	r3, #0
 800827e:	d006      	beq.n	800828e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008280:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008284:	f003 0320 	and.w	r3, r3, #32
 8008288:	2b00      	cmp	r3, #0
 800828a:	f47f aecb 	bne.w	8008024 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008294:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008298:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800829c:	2b00      	cmp	r3, #0
 800829e:	d049      	beq.n	8008334 <UART_RxISR_16BIT_FIFOEN+0x358>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80082a6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d242      	bcs.n	8008334 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	3308      	adds	r3, #8
 80082b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b8:	e853 3f00 	ldrex	r3, [r3]
 80082bc:	623b      	str	r3, [r7, #32]
   return(result);
 80082be:	6a3b      	ldr	r3, [r7, #32]
 80082c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	3308      	adds	r3, #8
 80082ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80082d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80082d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082da:	e841 2300 	strex	r3, r2, [r1]
 80082de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1e3      	bne.n	80082ae <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a15      	ldr	r2, [pc, #84]	@ (8008340 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80082ea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	e853 3f00 	ldrex	r3, [r3]
 80082f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f043 0320 	orr.w	r3, r3, #32
 8008300:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	461a      	mov	r2, r3
 800830a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800830e:	61fb      	str	r3, [r7, #28]
 8008310:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008312:	69b9      	ldr	r1, [r7, #24]
 8008314:	69fa      	ldr	r2, [r7, #28]
 8008316:	e841 2300 	strex	r3, r2, [r1]
 800831a:	617b      	str	r3, [r7, #20]
   return(result);
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1e4      	bne.n	80082ec <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008322:	e007      	b.n	8008334 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	699a      	ldr	r2, [r3, #24]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f042 0208 	orr.w	r2, r2, #8
 8008332:	619a      	str	r2, [r3, #24]
}
 8008334:	bf00      	nop
 8008336:	37b8      	adds	r7, #184	@ 0xb8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	40008000 	.word	0x40008000
 8008340:	08007ac5 	.word	0x08007ac5

08008344 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800838e:	2b01      	cmp	r3, #1
 8008390:	d101      	bne.n	8008396 <HAL_UARTEx_DisableFifoMode+0x16>
 8008392:	2302      	movs	r3, #2
 8008394:	e027      	b.n	80083e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2201      	movs	r2, #1
 800839a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2224      	movs	r2, #36	@ 0x24
 80083a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f022 0201 	bic.w	r2, r2, #1
 80083bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80083c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2220      	movs	r2, #32
 80083d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008402:	2b01      	cmp	r3, #1
 8008404:	d101      	bne.n	800840a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008406:	2302      	movs	r3, #2
 8008408:	e02d      	b.n	8008466 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2201      	movs	r2, #1
 800840e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2224      	movs	r2, #36	@ 0x24
 8008416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f022 0201 	bic.w	r2, r2, #1
 8008430:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	430a      	orrs	r2, r1
 8008444:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f850 	bl	80084ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2220      	movs	r2, #32
 8008458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b084      	sub	sp, #16
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800847e:	2b01      	cmp	r3, #1
 8008480:	d101      	bne.n	8008486 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008482:	2302      	movs	r3, #2
 8008484:	e02d      	b.n	80084e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2224      	movs	r2, #36	@ 0x24
 8008492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f022 0201 	bic.w	r2, r2, #1
 80084ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	430a      	orrs	r2, r1
 80084c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f812 	bl	80084ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2220      	movs	r2, #32
 80084d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
	...

080084ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d108      	bne.n	800850e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800850c:	e031      	b.n	8008572 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800850e:	2308      	movs	r3, #8
 8008510:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008512:	2308      	movs	r3, #8
 8008514:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	0e5b      	lsrs	r3, r3, #25
 800851e:	b2db      	uxtb	r3, r3
 8008520:	f003 0307 	and.w	r3, r3, #7
 8008524:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	0f5b      	lsrs	r3, r3, #29
 800852e:	b2db      	uxtb	r3, r3
 8008530:	f003 0307 	and.w	r3, r3, #7
 8008534:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008536:	7bbb      	ldrb	r3, [r7, #14]
 8008538:	7b3a      	ldrb	r2, [r7, #12]
 800853a:	4911      	ldr	r1, [pc, #68]	@ (8008580 <UARTEx_SetNbDataToProcess+0x94>)
 800853c:	5c8a      	ldrb	r2, [r1, r2]
 800853e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008542:	7b3a      	ldrb	r2, [r7, #12]
 8008544:	490f      	ldr	r1, [pc, #60]	@ (8008584 <UARTEx_SetNbDataToProcess+0x98>)
 8008546:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008548:	fb93 f3f2 	sdiv	r3, r3, r2
 800854c:	b29a      	uxth	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008554:	7bfb      	ldrb	r3, [r7, #15]
 8008556:	7b7a      	ldrb	r2, [r7, #13]
 8008558:	4909      	ldr	r1, [pc, #36]	@ (8008580 <UARTEx_SetNbDataToProcess+0x94>)
 800855a:	5c8a      	ldrb	r2, [r1, r2]
 800855c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008560:	7b7a      	ldrb	r2, [r7, #13]
 8008562:	4908      	ldr	r1, [pc, #32]	@ (8008584 <UARTEx_SetNbDataToProcess+0x98>)
 8008564:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008566:	fb93 f3f2 	sdiv	r3, r3, r2
 800856a:	b29a      	uxth	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008572:	bf00      	nop
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	0800d134 	.word	0x0800d134
 8008584:	0800d13c 	.word	0x0800d13c

08008588 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b08a      	sub	sp, #40	@ 0x28
 800858c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800858e:	2300      	movs	r3, #0
 8008590:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008592:	4b7e      	ldr	r3, [pc, #504]	@ (800878c <xTaskIncrementTick+0x204>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	f040 80ed 	bne.w	8008776 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800859c:	4b7c      	ldr	r3, [pc, #496]	@ (8008790 <xTaskIncrementTick+0x208>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3301      	adds	r3, #1
 80085a2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80085a4:	4a7a      	ldr	r2, [pc, #488]	@ (8008790 <xTaskIncrementTick+0x208>)
 80085a6:	6a3b      	ldr	r3, [r7, #32]
 80085a8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085aa:	6a3b      	ldr	r3, [r7, #32]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d121      	bne.n	80085f4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80085b0:	4b78      	ldr	r3, [pc, #480]	@ (8008794 <xTaskIncrementTick+0x20c>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00b      	beq.n	80085d2 <xTaskIncrementTick+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80085ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80085cc:	bf00      	nop
 80085ce:	bf00      	nop
 80085d0:	e7fd      	b.n	80085ce <xTaskIncrementTick+0x46>
 80085d2:	4b70      	ldr	r3, [pc, #448]	@ (8008794 <xTaskIncrementTick+0x20c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	61fb      	str	r3, [r7, #28]
 80085d8:	4b6f      	ldr	r3, [pc, #444]	@ (8008798 <xTaskIncrementTick+0x210>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a6d      	ldr	r2, [pc, #436]	@ (8008794 <xTaskIncrementTick+0x20c>)
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	4a6d      	ldr	r2, [pc, #436]	@ (8008798 <xTaskIncrementTick+0x210>)
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	4b6d      	ldr	r3, [pc, #436]	@ (800879c <xTaskIncrementTick+0x214>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3301      	adds	r3, #1
 80085ec:	4a6b      	ldr	r2, [pc, #428]	@ (800879c <xTaskIncrementTick+0x214>)
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	f000 f93e 	bl	8008870 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80085f4:	4b6a      	ldr	r3, [pc, #424]	@ (80087a0 <xTaskIncrementTick+0x218>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6a3a      	ldr	r2, [r7, #32]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	f0c0 80a6 	bcc.w	800874c <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008600:	4b64      	ldr	r3, [pc, #400]	@ (8008794 <xTaskIncrementTick+0x20c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d104      	bne.n	8008614 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800860a:	4b65      	ldr	r3, [pc, #404]	@ (80087a0 <xTaskIncrementTick+0x218>)
 800860c:	f04f 32ff 	mov.w	r2, #4294967295
 8008610:	601a      	str	r2, [r3, #0]
                    break;
 8008612:	e09b      	b.n	800874c <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008614:	4b5f      	ldr	r3, [pc, #380]	@ (8008794 <xTaskIncrementTick+0x20c>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8008624:	6a3a      	ldr	r2, [r7, #32]
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	429a      	cmp	r2, r3
 800862a:	d203      	bcs.n	8008634 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800862c:	4a5c      	ldr	r2, [pc, #368]	@ (80087a0 <xTaskIncrementTick+0x218>)
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8008632:	e08b      	b.n	800874c <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	695b      	ldr	r3, [r3, #20]
 8008638:	613b      	str	r3, [r7, #16]
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	68d2      	ldr	r2, [r2, #12]
 8008642:	609a      	str	r2, [r3, #8]
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	69ba      	ldr	r2, [r7, #24]
 800864a:	6892      	ldr	r2, [r2, #8]
 800864c:	605a      	str	r2, [r3, #4]
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	3304      	adds	r3, #4
 8008656:	429a      	cmp	r2, r3
 8008658:	d103      	bne.n	8008662 <xTaskIncrementTick+0xda>
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	68da      	ldr	r2, [r3, #12]
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	605a      	str	r2, [r3, #4]
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	2200      	movs	r2, #0
 8008666:	615a      	str	r2, [r3, #20]
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	1e5a      	subs	r2, r3, #1
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008676:	2b00      	cmp	r3, #0
 8008678:	d01e      	beq.n	80086b8 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	69db      	ldr	r3, [r3, #28]
 8008684:	69ba      	ldr	r2, [r7, #24]
 8008686:	6a12      	ldr	r2, [r2, #32]
 8008688:	609a      	str	r2, [r3, #8]
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	69d2      	ldr	r2, [r2, #28]
 8008692:	605a      	str	r2, [r3, #4]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	3318      	adds	r3, #24
 800869c:	429a      	cmp	r2, r3
 800869e:	d103      	bne.n	80086a8 <xTaskIncrementTick+0x120>
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	6a1a      	ldr	r2, [r3, #32]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	605a      	str	r2, [r3, #4]
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	2200      	movs	r2, #0
 80086ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	1e5a      	subs	r2, r3, #1
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086bc:	2201      	movs	r2, #1
 80086be:	409a      	lsls	r2, r3
 80086c0:	4b38      	ldr	r3, [pc, #224]	@ (80087a4 <xTaskIncrementTick+0x21c>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	4a37      	ldr	r2, [pc, #220]	@ (80087a4 <xTaskIncrementTick+0x21c>)
 80086c8:	6013      	str	r3, [r2, #0]
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ce:	4936      	ldr	r1, [pc, #216]	@ (80087a8 <xTaskIncrementTick+0x220>)
 80086d0:	4613      	mov	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	4413      	add	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	440b      	add	r3, r1
 80086da:	3304      	adds	r3, #4
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	60bb      	str	r3, [r7, #8]
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	609a      	str	r2, [r3, #8]
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	689a      	ldr	r2, [r3, #8]
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	60da      	str	r2, [r3, #12]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	69ba      	ldr	r2, [r7, #24]
 80086f4:	3204      	adds	r2, #4
 80086f6:	605a      	str	r2, [r3, #4]
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	1d1a      	adds	r2, r3, #4
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	609a      	str	r2, [r3, #8]
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008704:	4613      	mov	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4413      	add	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4a26      	ldr	r2, [pc, #152]	@ (80087a8 <xTaskIncrementTick+0x220>)
 800870e:	441a      	add	r2, r3
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	615a      	str	r2, [r3, #20]
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008718:	4923      	ldr	r1, [pc, #140]	@ (80087a8 <xTaskIncrementTick+0x220>)
 800871a:	4613      	mov	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	440b      	add	r3, r1
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	1c59      	adds	r1, r3, #1
 8008728:	481f      	ldr	r0, [pc, #124]	@ (80087a8 <xTaskIncrementTick+0x220>)
 800872a:	4613      	mov	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4403      	add	r3, r0
 8008734:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800873a:	4b1c      	ldr	r3, [pc, #112]	@ (80087ac <xTaskIncrementTick+0x224>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008740:	429a      	cmp	r2, r3
 8008742:	f67f af5d 	bls.w	8008600 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8008746:	2301      	movs	r3, #1
 8008748:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800874a:	e759      	b.n	8008600 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800874c:	4b17      	ldr	r3, [pc, #92]	@ (80087ac <xTaskIncrementTick+0x224>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008752:	4915      	ldr	r1, [pc, #84]	@ (80087a8 <xTaskIncrementTick+0x220>)
 8008754:	4613      	mov	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4413      	add	r3, r2
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	440b      	add	r3, r1
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d901      	bls.n	8008768 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8008764:	2301      	movs	r3, #1
 8008766:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8008768:	4b11      	ldr	r3, [pc, #68]	@ (80087b0 <xTaskIncrementTick+0x228>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d007      	beq.n	8008780 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8008770:	2301      	movs	r3, #1
 8008772:	627b      	str	r3, [r7, #36]	@ 0x24
 8008774:	e004      	b.n	8008780 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8008776:	4b0f      	ldr	r3, [pc, #60]	@ (80087b4 <xTaskIncrementTick+0x22c>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	3301      	adds	r3, #1
 800877c:	4a0d      	ldr	r2, [pc, #52]	@ (80087b4 <xTaskIncrementTick+0x22c>)
 800877e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8008780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008782:	4618      	mov	r0, r3
 8008784:	3728      	adds	r7, #40	@ 0x28
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	2000073c 	.word	0x2000073c
 8008790:	20000724 	.word	0x20000724
 8008794:	2000071c 	.word	0x2000071c
 8008798:	20000720 	.word	0x20000720
 800879c:	20000734 	.word	0x20000734
 80087a0:	20000738 	.word	0x20000738
 80087a4:	20000728 	.word	0x20000728
 80087a8:	200006b8 	.word	0x200006b8
 80087ac:	200006b4 	.word	0x200006b4
 80087b0:	20000730 	.word	0x20000730
 80087b4:	2000072c 	.word	0x2000072c

080087b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80087be:	4b27      	ldr	r3, [pc, #156]	@ (800885c <vTaskSwitchContext+0xa4>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d003      	beq.n	80087ce <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80087c6:	4b26      	ldr	r3, [pc, #152]	@ (8008860 <vTaskSwitchContext+0xa8>)
 80087c8:	2201      	movs	r2, #1
 80087ca:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80087cc:	e040      	b.n	8008850 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 80087ce:	4b24      	ldr	r3, [pc, #144]	@ (8008860 <vTaskSwitchContext+0xa8>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087d4:	4b23      	ldr	r3, [pc, #140]	@ (8008864 <vTaskSwitchContext+0xac>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	fab3 f383 	clz	r3, r3
 80087e0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80087e2:	7afb      	ldrb	r3, [r7, #11]
 80087e4:	f1c3 031f 	rsb	r3, r3, #31
 80087e8:	617b      	str	r3, [r7, #20]
 80087ea:	491f      	ldr	r1, [pc, #124]	@ (8008868 <vTaskSwitchContext+0xb0>)
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	4613      	mov	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	440b      	add	r3, r1
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10b      	bne.n	8008816 <vTaskSwitchContext+0x5e>
        __asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	607b      	str	r3, [r7, #4]
    }
 8008810:	bf00      	nop
 8008812:	bf00      	nop
 8008814:	e7fd      	b.n	8008812 <vTaskSwitchContext+0x5a>
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	4613      	mov	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4a11      	ldr	r2, [pc, #68]	@ (8008868 <vTaskSwitchContext+0xb0>)
 8008822:	4413      	add	r3, r2
 8008824:	613b      	str	r3, [r7, #16]
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	605a      	str	r2, [r3, #4]
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	685a      	ldr	r2, [r3, #4]
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	3308      	adds	r3, #8
 8008838:	429a      	cmp	r2, r3
 800883a:	d104      	bne.n	8008846 <vTaskSwitchContext+0x8e>
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	605a      	str	r2, [r3, #4]
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	4a07      	ldr	r2, [pc, #28]	@ (800886c <vTaskSwitchContext+0xb4>)
 800884e:	6013      	str	r3, [r2, #0]
}
 8008850:	bf00      	nop
 8008852:	371c      	adds	r7, #28
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr
 800885c:	2000073c 	.word	0x2000073c
 8008860:	20000730 	.word	0x20000730
 8008864:	20000728 	.word	0x20000728
 8008868:	200006b8 	.word	0x200006b8
 800886c:	200006b4 	.word	0x200006b4

08008870 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008870:	b480      	push	{r7}
 8008872:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008874:	4b0a      	ldr	r3, [pc, #40]	@ (80088a0 <prvResetNextTaskUnblockTime+0x30>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d104      	bne.n	8008888 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800887e:	4b09      	ldr	r3, [pc, #36]	@ (80088a4 <prvResetNextTaskUnblockTime+0x34>)
 8008880:	f04f 32ff 	mov.w	r2, #4294967295
 8008884:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8008886:	e005      	b.n	8008894 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008888:	4b05      	ldr	r3, [pc, #20]	@ (80088a0 <prvResetNextTaskUnblockTime+0x30>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a04      	ldr	r2, [pc, #16]	@ (80088a4 <prvResetNextTaskUnblockTime+0x34>)
 8008892:	6013      	str	r3, [r2, #0]
}
 8008894:	bf00      	nop
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	2000071c 	.word	0x2000071c
 80088a4:	20000738 	.word	0x20000738
	...

080088b0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80088b0:	4b07      	ldr	r3, [pc, #28]	@ (80088d0 <pxCurrentTCBConst2>)
 80088b2:	6819      	ldr	r1, [r3, #0]
 80088b4:	6808      	ldr	r0, [r1, #0]
 80088b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ba:	f380 8809 	msr	PSP, r0
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f04f 0000 	mov.w	r0, #0
 80088c6:	f380 8811 	msr	BASEPRI, r0
 80088ca:	4770      	bx	lr
 80088cc:	f3af 8000 	nop.w

080088d0 <pxCurrentTCBConst2>:
 80088d0:	200006b4 	.word	0x200006b4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop
	...

080088e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80088e0:	f3ef 8009 	mrs	r0, PSP
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	4b15      	ldr	r3, [pc, #84]	@ (8008940 <pxCurrentTCBConst>)
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	f01e 0f10 	tst.w	lr, #16
 80088f0:	bf08      	it	eq
 80088f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fa:	6010      	str	r0, [r2, #0]
 80088fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008900:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008904:	f380 8811 	msr	BASEPRI, r0
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f7ff ff52 	bl	80087b8 <vTaskSwitchContext>
 8008914:	f04f 0000 	mov.w	r0, #0
 8008918:	f380 8811 	msr	BASEPRI, r0
 800891c:	bc09      	pop	{r0, r3}
 800891e:	6819      	ldr	r1, [r3, #0]
 8008920:	6808      	ldr	r0, [r1, #0]
 8008922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008926:	f01e 0f10 	tst.w	lr, #16
 800892a:	bf08      	it	eq
 800892c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008930:	f380 8809 	msr	PSP, r0
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	f3af 8000 	nop.w

08008940 <pxCurrentTCBConst>:
 8008940:	200006b4 	.word	0x200006b4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop

08008948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
        __asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	607b      	str	r3, [r7, #4]
    }
 8008960:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008962:	f7ff fe11 	bl	8008588 <xTaskIncrementTick>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d003      	beq.n	8008974 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800896c:	4b06      	ldr	r3, [pc, #24]	@ (8008988 <SysTick_Handler+0x40>)
 800896e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008972:	601a      	str	r2, [r3, #0]
 8008974:	2300      	movs	r3, #0
 8008976:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800897e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	e000ed04 	.word	0xe000ed04

0800898c <__cvt>:
 800898c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008990:	ec57 6b10 	vmov	r6, r7, d0
 8008994:	2f00      	cmp	r7, #0
 8008996:	460c      	mov	r4, r1
 8008998:	4619      	mov	r1, r3
 800899a:	463b      	mov	r3, r7
 800899c:	bfbb      	ittet	lt
 800899e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80089a2:	461f      	movlt	r7, r3
 80089a4:	2300      	movge	r3, #0
 80089a6:	232d      	movlt	r3, #45	@ 0x2d
 80089a8:	700b      	strb	r3, [r1, #0]
 80089aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089ac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80089b0:	4691      	mov	r9, r2
 80089b2:	f023 0820 	bic.w	r8, r3, #32
 80089b6:	bfbc      	itt	lt
 80089b8:	4632      	movlt	r2, r6
 80089ba:	4616      	movlt	r6, r2
 80089bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80089c0:	d005      	beq.n	80089ce <__cvt+0x42>
 80089c2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80089c6:	d100      	bne.n	80089ca <__cvt+0x3e>
 80089c8:	3401      	adds	r4, #1
 80089ca:	2102      	movs	r1, #2
 80089cc:	e000      	b.n	80089d0 <__cvt+0x44>
 80089ce:	2103      	movs	r1, #3
 80089d0:	ab03      	add	r3, sp, #12
 80089d2:	9301      	str	r3, [sp, #4]
 80089d4:	ab02      	add	r3, sp, #8
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	ec47 6b10 	vmov	d0, r6, r7
 80089dc:	4653      	mov	r3, sl
 80089de:	4622      	mov	r2, r4
 80089e0:	f001 f892 	bl	8009b08 <_dtoa_r>
 80089e4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80089e8:	4605      	mov	r5, r0
 80089ea:	d119      	bne.n	8008a20 <__cvt+0x94>
 80089ec:	f019 0f01 	tst.w	r9, #1
 80089f0:	d00e      	beq.n	8008a10 <__cvt+0x84>
 80089f2:	eb00 0904 	add.w	r9, r0, r4
 80089f6:	2200      	movs	r2, #0
 80089f8:	2300      	movs	r3, #0
 80089fa:	4630      	mov	r0, r6
 80089fc:	4639      	mov	r1, r7
 80089fe:	f7f8 f88b 	bl	8000b18 <__aeabi_dcmpeq>
 8008a02:	b108      	cbz	r0, 8008a08 <__cvt+0x7c>
 8008a04:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a08:	2230      	movs	r2, #48	@ 0x30
 8008a0a:	9b03      	ldr	r3, [sp, #12]
 8008a0c:	454b      	cmp	r3, r9
 8008a0e:	d31e      	bcc.n	8008a4e <__cvt+0xc2>
 8008a10:	9b03      	ldr	r3, [sp, #12]
 8008a12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a14:	1b5b      	subs	r3, r3, r5
 8008a16:	4628      	mov	r0, r5
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	b004      	add	sp, #16
 8008a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008a24:	eb00 0904 	add.w	r9, r0, r4
 8008a28:	d1e5      	bne.n	80089f6 <__cvt+0x6a>
 8008a2a:	7803      	ldrb	r3, [r0, #0]
 8008a2c:	2b30      	cmp	r3, #48	@ 0x30
 8008a2e:	d10a      	bne.n	8008a46 <__cvt+0xba>
 8008a30:	2200      	movs	r2, #0
 8008a32:	2300      	movs	r3, #0
 8008a34:	4630      	mov	r0, r6
 8008a36:	4639      	mov	r1, r7
 8008a38:	f7f8 f86e 	bl	8000b18 <__aeabi_dcmpeq>
 8008a3c:	b918      	cbnz	r0, 8008a46 <__cvt+0xba>
 8008a3e:	f1c4 0401 	rsb	r4, r4, #1
 8008a42:	f8ca 4000 	str.w	r4, [sl]
 8008a46:	f8da 3000 	ldr.w	r3, [sl]
 8008a4a:	4499      	add	r9, r3
 8008a4c:	e7d3      	b.n	80089f6 <__cvt+0x6a>
 8008a4e:	1c59      	adds	r1, r3, #1
 8008a50:	9103      	str	r1, [sp, #12]
 8008a52:	701a      	strb	r2, [r3, #0]
 8008a54:	e7d9      	b.n	8008a0a <__cvt+0x7e>

08008a56 <__exponent>:
 8008a56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a58:	2900      	cmp	r1, #0
 8008a5a:	bfba      	itte	lt
 8008a5c:	4249      	neglt	r1, r1
 8008a5e:	232d      	movlt	r3, #45	@ 0x2d
 8008a60:	232b      	movge	r3, #43	@ 0x2b
 8008a62:	2909      	cmp	r1, #9
 8008a64:	7002      	strb	r2, [r0, #0]
 8008a66:	7043      	strb	r3, [r0, #1]
 8008a68:	dd29      	ble.n	8008abe <__exponent+0x68>
 8008a6a:	f10d 0307 	add.w	r3, sp, #7
 8008a6e:	461d      	mov	r5, r3
 8008a70:	270a      	movs	r7, #10
 8008a72:	461a      	mov	r2, r3
 8008a74:	fbb1 f6f7 	udiv	r6, r1, r7
 8008a78:	fb07 1416 	mls	r4, r7, r6, r1
 8008a7c:	3430      	adds	r4, #48	@ 0x30
 8008a7e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008a82:	460c      	mov	r4, r1
 8008a84:	2c63      	cmp	r4, #99	@ 0x63
 8008a86:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	dcf1      	bgt.n	8008a72 <__exponent+0x1c>
 8008a8e:	3130      	adds	r1, #48	@ 0x30
 8008a90:	1e94      	subs	r4, r2, #2
 8008a92:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008a96:	1c41      	adds	r1, r0, #1
 8008a98:	4623      	mov	r3, r4
 8008a9a:	42ab      	cmp	r3, r5
 8008a9c:	d30a      	bcc.n	8008ab4 <__exponent+0x5e>
 8008a9e:	f10d 0309 	add.w	r3, sp, #9
 8008aa2:	1a9b      	subs	r3, r3, r2
 8008aa4:	42ac      	cmp	r4, r5
 8008aa6:	bf88      	it	hi
 8008aa8:	2300      	movhi	r3, #0
 8008aaa:	3302      	adds	r3, #2
 8008aac:	4403      	add	r3, r0
 8008aae:	1a18      	subs	r0, r3, r0
 8008ab0:	b003      	add	sp, #12
 8008ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ab4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008ab8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008abc:	e7ed      	b.n	8008a9a <__exponent+0x44>
 8008abe:	2330      	movs	r3, #48	@ 0x30
 8008ac0:	3130      	adds	r1, #48	@ 0x30
 8008ac2:	7083      	strb	r3, [r0, #2]
 8008ac4:	70c1      	strb	r1, [r0, #3]
 8008ac6:	1d03      	adds	r3, r0, #4
 8008ac8:	e7f1      	b.n	8008aae <__exponent+0x58>
	...

08008acc <_printf_float>:
 8008acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad0:	b08d      	sub	sp, #52	@ 0x34
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008ad8:	4616      	mov	r6, r2
 8008ada:	461f      	mov	r7, r3
 8008adc:	4605      	mov	r5, r0
 8008ade:	f000 fefd 	bl	80098dc <_localeconv_r>
 8008ae2:	6803      	ldr	r3, [r0, #0]
 8008ae4:	9304      	str	r3, [sp, #16]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7f7 fbea 	bl	80002c0 <strlen>
 8008aec:	2300      	movs	r3, #0
 8008aee:	930a      	str	r3, [sp, #40]	@ 0x28
 8008af0:	f8d8 3000 	ldr.w	r3, [r8]
 8008af4:	9005      	str	r0, [sp, #20]
 8008af6:	3307      	adds	r3, #7
 8008af8:	f023 0307 	bic.w	r3, r3, #7
 8008afc:	f103 0208 	add.w	r2, r3, #8
 8008b00:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008b04:	f8d4 b000 	ldr.w	fp, [r4]
 8008b08:	f8c8 2000 	str.w	r2, [r8]
 8008b0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b10:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008b14:	9307      	str	r3, [sp, #28]
 8008b16:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b1a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008b1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b22:	4b9c      	ldr	r3, [pc, #624]	@ (8008d94 <_printf_float+0x2c8>)
 8008b24:	f04f 32ff 	mov.w	r2, #4294967295
 8008b28:	f7f8 f828 	bl	8000b7c <__aeabi_dcmpun>
 8008b2c:	bb70      	cbnz	r0, 8008b8c <_printf_float+0xc0>
 8008b2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b32:	4b98      	ldr	r3, [pc, #608]	@ (8008d94 <_printf_float+0x2c8>)
 8008b34:	f04f 32ff 	mov.w	r2, #4294967295
 8008b38:	f7f8 f802 	bl	8000b40 <__aeabi_dcmple>
 8008b3c:	bb30      	cbnz	r0, 8008b8c <_printf_float+0xc0>
 8008b3e:	2200      	movs	r2, #0
 8008b40:	2300      	movs	r3, #0
 8008b42:	4640      	mov	r0, r8
 8008b44:	4649      	mov	r1, r9
 8008b46:	f7f7 fff1 	bl	8000b2c <__aeabi_dcmplt>
 8008b4a:	b110      	cbz	r0, 8008b52 <_printf_float+0x86>
 8008b4c:	232d      	movs	r3, #45	@ 0x2d
 8008b4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b52:	4a91      	ldr	r2, [pc, #580]	@ (8008d98 <_printf_float+0x2cc>)
 8008b54:	4b91      	ldr	r3, [pc, #580]	@ (8008d9c <_printf_float+0x2d0>)
 8008b56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008b5a:	bf94      	ite	ls
 8008b5c:	4690      	movls	r8, r2
 8008b5e:	4698      	movhi	r8, r3
 8008b60:	2303      	movs	r3, #3
 8008b62:	6123      	str	r3, [r4, #16]
 8008b64:	f02b 0304 	bic.w	r3, fp, #4
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	f04f 0900 	mov.w	r9, #0
 8008b6e:	9700      	str	r7, [sp, #0]
 8008b70:	4633      	mov	r3, r6
 8008b72:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008b74:	4621      	mov	r1, r4
 8008b76:	4628      	mov	r0, r5
 8008b78:	f000 f9d2 	bl	8008f20 <_printf_common>
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	f040 808d 	bne.w	8008c9c <_printf_float+0x1d0>
 8008b82:	f04f 30ff 	mov.w	r0, #4294967295
 8008b86:	b00d      	add	sp, #52	@ 0x34
 8008b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b8c:	4642      	mov	r2, r8
 8008b8e:	464b      	mov	r3, r9
 8008b90:	4640      	mov	r0, r8
 8008b92:	4649      	mov	r1, r9
 8008b94:	f7f7 fff2 	bl	8000b7c <__aeabi_dcmpun>
 8008b98:	b140      	cbz	r0, 8008bac <_printf_float+0xe0>
 8008b9a:	464b      	mov	r3, r9
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	bfbc      	itt	lt
 8008ba0:	232d      	movlt	r3, #45	@ 0x2d
 8008ba2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008ba6:	4a7e      	ldr	r2, [pc, #504]	@ (8008da0 <_printf_float+0x2d4>)
 8008ba8:	4b7e      	ldr	r3, [pc, #504]	@ (8008da4 <_printf_float+0x2d8>)
 8008baa:	e7d4      	b.n	8008b56 <_printf_float+0x8a>
 8008bac:	6863      	ldr	r3, [r4, #4]
 8008bae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008bb2:	9206      	str	r2, [sp, #24]
 8008bb4:	1c5a      	adds	r2, r3, #1
 8008bb6:	d13b      	bne.n	8008c30 <_printf_float+0x164>
 8008bb8:	2306      	movs	r3, #6
 8008bba:	6063      	str	r3, [r4, #4]
 8008bbc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	6022      	str	r2, [r4, #0]
 8008bc4:	9303      	str	r3, [sp, #12]
 8008bc6:	ab0a      	add	r3, sp, #40	@ 0x28
 8008bc8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008bcc:	ab09      	add	r3, sp, #36	@ 0x24
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	6861      	ldr	r1, [r4, #4]
 8008bd2:	ec49 8b10 	vmov	d0, r8, r9
 8008bd6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008bda:	4628      	mov	r0, r5
 8008bdc:	f7ff fed6 	bl	800898c <__cvt>
 8008be0:	9b06      	ldr	r3, [sp, #24]
 8008be2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008be4:	2b47      	cmp	r3, #71	@ 0x47
 8008be6:	4680      	mov	r8, r0
 8008be8:	d129      	bne.n	8008c3e <_printf_float+0x172>
 8008bea:	1cc8      	adds	r0, r1, #3
 8008bec:	db02      	blt.n	8008bf4 <_printf_float+0x128>
 8008bee:	6863      	ldr	r3, [r4, #4]
 8008bf0:	4299      	cmp	r1, r3
 8008bf2:	dd41      	ble.n	8008c78 <_printf_float+0x1ac>
 8008bf4:	f1aa 0a02 	sub.w	sl, sl, #2
 8008bf8:	fa5f fa8a 	uxtb.w	sl, sl
 8008bfc:	3901      	subs	r1, #1
 8008bfe:	4652      	mov	r2, sl
 8008c00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008c04:	9109      	str	r1, [sp, #36]	@ 0x24
 8008c06:	f7ff ff26 	bl	8008a56 <__exponent>
 8008c0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c0c:	1813      	adds	r3, r2, r0
 8008c0e:	2a01      	cmp	r2, #1
 8008c10:	4681      	mov	r9, r0
 8008c12:	6123      	str	r3, [r4, #16]
 8008c14:	dc02      	bgt.n	8008c1c <_printf_float+0x150>
 8008c16:	6822      	ldr	r2, [r4, #0]
 8008c18:	07d2      	lsls	r2, r2, #31
 8008c1a:	d501      	bpl.n	8008c20 <_printf_float+0x154>
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	6123      	str	r3, [r4, #16]
 8008c20:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d0a2      	beq.n	8008b6e <_printf_float+0xa2>
 8008c28:	232d      	movs	r3, #45	@ 0x2d
 8008c2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c2e:	e79e      	b.n	8008b6e <_printf_float+0xa2>
 8008c30:	9a06      	ldr	r2, [sp, #24]
 8008c32:	2a47      	cmp	r2, #71	@ 0x47
 8008c34:	d1c2      	bne.n	8008bbc <_printf_float+0xf0>
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1c0      	bne.n	8008bbc <_printf_float+0xf0>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e7bd      	b.n	8008bba <_printf_float+0xee>
 8008c3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008c42:	d9db      	bls.n	8008bfc <_printf_float+0x130>
 8008c44:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008c48:	d118      	bne.n	8008c7c <_printf_float+0x1b0>
 8008c4a:	2900      	cmp	r1, #0
 8008c4c:	6863      	ldr	r3, [r4, #4]
 8008c4e:	dd0b      	ble.n	8008c68 <_printf_float+0x19c>
 8008c50:	6121      	str	r1, [r4, #16]
 8008c52:	b913      	cbnz	r3, 8008c5a <_printf_float+0x18e>
 8008c54:	6822      	ldr	r2, [r4, #0]
 8008c56:	07d0      	lsls	r0, r2, #31
 8008c58:	d502      	bpl.n	8008c60 <_printf_float+0x194>
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	440b      	add	r3, r1
 8008c5e:	6123      	str	r3, [r4, #16]
 8008c60:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008c62:	f04f 0900 	mov.w	r9, #0
 8008c66:	e7db      	b.n	8008c20 <_printf_float+0x154>
 8008c68:	b913      	cbnz	r3, 8008c70 <_printf_float+0x1a4>
 8008c6a:	6822      	ldr	r2, [r4, #0]
 8008c6c:	07d2      	lsls	r2, r2, #31
 8008c6e:	d501      	bpl.n	8008c74 <_printf_float+0x1a8>
 8008c70:	3302      	adds	r3, #2
 8008c72:	e7f4      	b.n	8008c5e <_printf_float+0x192>
 8008c74:	2301      	movs	r3, #1
 8008c76:	e7f2      	b.n	8008c5e <_printf_float+0x192>
 8008c78:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008c7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c7e:	4299      	cmp	r1, r3
 8008c80:	db05      	blt.n	8008c8e <_printf_float+0x1c2>
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	6121      	str	r1, [r4, #16]
 8008c86:	07d8      	lsls	r0, r3, #31
 8008c88:	d5ea      	bpl.n	8008c60 <_printf_float+0x194>
 8008c8a:	1c4b      	adds	r3, r1, #1
 8008c8c:	e7e7      	b.n	8008c5e <_printf_float+0x192>
 8008c8e:	2900      	cmp	r1, #0
 8008c90:	bfd4      	ite	le
 8008c92:	f1c1 0202 	rsble	r2, r1, #2
 8008c96:	2201      	movgt	r2, #1
 8008c98:	4413      	add	r3, r2
 8008c9a:	e7e0      	b.n	8008c5e <_printf_float+0x192>
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	055a      	lsls	r2, r3, #21
 8008ca0:	d407      	bmi.n	8008cb2 <_printf_float+0x1e6>
 8008ca2:	6923      	ldr	r3, [r4, #16]
 8008ca4:	4642      	mov	r2, r8
 8008ca6:	4631      	mov	r1, r6
 8008ca8:	4628      	mov	r0, r5
 8008caa:	47b8      	blx	r7
 8008cac:	3001      	adds	r0, #1
 8008cae:	d12b      	bne.n	8008d08 <_printf_float+0x23c>
 8008cb0:	e767      	b.n	8008b82 <_printf_float+0xb6>
 8008cb2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008cb6:	f240 80dd 	bls.w	8008e74 <_printf_float+0x3a8>
 8008cba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f7f7 ff29 	bl	8000b18 <__aeabi_dcmpeq>
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	d033      	beq.n	8008d32 <_printf_float+0x266>
 8008cca:	4a37      	ldr	r2, [pc, #220]	@ (8008da8 <_printf_float+0x2dc>)
 8008ccc:	2301      	movs	r3, #1
 8008cce:	4631      	mov	r1, r6
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	47b8      	blx	r7
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	f43f af54 	beq.w	8008b82 <_printf_float+0xb6>
 8008cda:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008cde:	4543      	cmp	r3, r8
 8008ce0:	db02      	blt.n	8008ce8 <_printf_float+0x21c>
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	07d8      	lsls	r0, r3, #31
 8008ce6:	d50f      	bpl.n	8008d08 <_printf_float+0x23c>
 8008ce8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cec:	4631      	mov	r1, r6
 8008cee:	4628      	mov	r0, r5
 8008cf0:	47b8      	blx	r7
 8008cf2:	3001      	adds	r0, #1
 8008cf4:	f43f af45 	beq.w	8008b82 <_printf_float+0xb6>
 8008cf8:	f04f 0900 	mov.w	r9, #0
 8008cfc:	f108 38ff 	add.w	r8, r8, #4294967295
 8008d00:	f104 0a1a 	add.w	sl, r4, #26
 8008d04:	45c8      	cmp	r8, r9
 8008d06:	dc09      	bgt.n	8008d1c <_printf_float+0x250>
 8008d08:	6823      	ldr	r3, [r4, #0]
 8008d0a:	079b      	lsls	r3, r3, #30
 8008d0c:	f100 8103 	bmi.w	8008f16 <_printf_float+0x44a>
 8008d10:	68e0      	ldr	r0, [r4, #12]
 8008d12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d14:	4298      	cmp	r0, r3
 8008d16:	bfb8      	it	lt
 8008d18:	4618      	movlt	r0, r3
 8008d1a:	e734      	b.n	8008b86 <_printf_float+0xba>
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	4652      	mov	r2, sl
 8008d20:	4631      	mov	r1, r6
 8008d22:	4628      	mov	r0, r5
 8008d24:	47b8      	blx	r7
 8008d26:	3001      	adds	r0, #1
 8008d28:	f43f af2b 	beq.w	8008b82 <_printf_float+0xb6>
 8008d2c:	f109 0901 	add.w	r9, r9, #1
 8008d30:	e7e8      	b.n	8008d04 <_printf_float+0x238>
 8008d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	dc39      	bgt.n	8008dac <_printf_float+0x2e0>
 8008d38:	4a1b      	ldr	r2, [pc, #108]	@ (8008da8 <_printf_float+0x2dc>)
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	4631      	mov	r1, r6
 8008d3e:	4628      	mov	r0, r5
 8008d40:	47b8      	blx	r7
 8008d42:	3001      	adds	r0, #1
 8008d44:	f43f af1d 	beq.w	8008b82 <_printf_float+0xb6>
 8008d48:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008d4c:	ea59 0303 	orrs.w	r3, r9, r3
 8008d50:	d102      	bne.n	8008d58 <_printf_float+0x28c>
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	07d9      	lsls	r1, r3, #31
 8008d56:	d5d7      	bpl.n	8008d08 <_printf_float+0x23c>
 8008d58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d5c:	4631      	mov	r1, r6
 8008d5e:	4628      	mov	r0, r5
 8008d60:	47b8      	blx	r7
 8008d62:	3001      	adds	r0, #1
 8008d64:	f43f af0d 	beq.w	8008b82 <_printf_float+0xb6>
 8008d68:	f04f 0a00 	mov.w	sl, #0
 8008d6c:	f104 0b1a 	add.w	fp, r4, #26
 8008d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d72:	425b      	negs	r3, r3
 8008d74:	4553      	cmp	r3, sl
 8008d76:	dc01      	bgt.n	8008d7c <_printf_float+0x2b0>
 8008d78:	464b      	mov	r3, r9
 8008d7a:	e793      	b.n	8008ca4 <_printf_float+0x1d8>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	465a      	mov	r2, fp
 8008d80:	4631      	mov	r1, r6
 8008d82:	4628      	mov	r0, r5
 8008d84:	47b8      	blx	r7
 8008d86:	3001      	adds	r0, #1
 8008d88:	f43f aefb 	beq.w	8008b82 <_printf_float+0xb6>
 8008d8c:	f10a 0a01 	add.w	sl, sl, #1
 8008d90:	e7ee      	b.n	8008d70 <_printf_float+0x2a4>
 8008d92:	bf00      	nop
 8008d94:	7fefffff 	.word	0x7fefffff
 8008d98:	0800d144 	.word	0x0800d144
 8008d9c:	0800d148 	.word	0x0800d148
 8008da0:	0800d14c 	.word	0x0800d14c
 8008da4:	0800d150 	.word	0x0800d150
 8008da8:	0800d154 	.word	0x0800d154
 8008dac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008dae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008db2:	4553      	cmp	r3, sl
 8008db4:	bfa8      	it	ge
 8008db6:	4653      	movge	r3, sl
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	4699      	mov	r9, r3
 8008dbc:	dc36      	bgt.n	8008e2c <_printf_float+0x360>
 8008dbe:	f04f 0b00 	mov.w	fp, #0
 8008dc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008dc6:	f104 021a 	add.w	r2, r4, #26
 8008dca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008dcc:	9306      	str	r3, [sp, #24]
 8008dce:	eba3 0309 	sub.w	r3, r3, r9
 8008dd2:	455b      	cmp	r3, fp
 8008dd4:	dc31      	bgt.n	8008e3a <_printf_float+0x36e>
 8008dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dd8:	459a      	cmp	sl, r3
 8008dda:	dc3a      	bgt.n	8008e52 <_printf_float+0x386>
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	07da      	lsls	r2, r3, #31
 8008de0:	d437      	bmi.n	8008e52 <_printf_float+0x386>
 8008de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008de4:	ebaa 0903 	sub.w	r9, sl, r3
 8008de8:	9b06      	ldr	r3, [sp, #24]
 8008dea:	ebaa 0303 	sub.w	r3, sl, r3
 8008dee:	4599      	cmp	r9, r3
 8008df0:	bfa8      	it	ge
 8008df2:	4699      	movge	r9, r3
 8008df4:	f1b9 0f00 	cmp.w	r9, #0
 8008df8:	dc33      	bgt.n	8008e62 <_printf_float+0x396>
 8008dfa:	f04f 0800 	mov.w	r8, #0
 8008dfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e02:	f104 0b1a 	add.w	fp, r4, #26
 8008e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e08:	ebaa 0303 	sub.w	r3, sl, r3
 8008e0c:	eba3 0309 	sub.w	r3, r3, r9
 8008e10:	4543      	cmp	r3, r8
 8008e12:	f77f af79 	ble.w	8008d08 <_printf_float+0x23c>
 8008e16:	2301      	movs	r3, #1
 8008e18:	465a      	mov	r2, fp
 8008e1a:	4631      	mov	r1, r6
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	47b8      	blx	r7
 8008e20:	3001      	adds	r0, #1
 8008e22:	f43f aeae 	beq.w	8008b82 <_printf_float+0xb6>
 8008e26:	f108 0801 	add.w	r8, r8, #1
 8008e2a:	e7ec      	b.n	8008e06 <_printf_float+0x33a>
 8008e2c:	4642      	mov	r2, r8
 8008e2e:	4631      	mov	r1, r6
 8008e30:	4628      	mov	r0, r5
 8008e32:	47b8      	blx	r7
 8008e34:	3001      	adds	r0, #1
 8008e36:	d1c2      	bne.n	8008dbe <_printf_float+0x2f2>
 8008e38:	e6a3      	b.n	8008b82 <_printf_float+0xb6>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4631      	mov	r1, r6
 8008e3e:	4628      	mov	r0, r5
 8008e40:	9206      	str	r2, [sp, #24]
 8008e42:	47b8      	blx	r7
 8008e44:	3001      	adds	r0, #1
 8008e46:	f43f ae9c 	beq.w	8008b82 <_printf_float+0xb6>
 8008e4a:	9a06      	ldr	r2, [sp, #24]
 8008e4c:	f10b 0b01 	add.w	fp, fp, #1
 8008e50:	e7bb      	b.n	8008dca <_printf_float+0x2fe>
 8008e52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e56:	4631      	mov	r1, r6
 8008e58:	4628      	mov	r0, r5
 8008e5a:	47b8      	blx	r7
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	d1c0      	bne.n	8008de2 <_printf_float+0x316>
 8008e60:	e68f      	b.n	8008b82 <_printf_float+0xb6>
 8008e62:	9a06      	ldr	r2, [sp, #24]
 8008e64:	464b      	mov	r3, r9
 8008e66:	4442      	add	r2, r8
 8008e68:	4631      	mov	r1, r6
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	47b8      	blx	r7
 8008e6e:	3001      	adds	r0, #1
 8008e70:	d1c3      	bne.n	8008dfa <_printf_float+0x32e>
 8008e72:	e686      	b.n	8008b82 <_printf_float+0xb6>
 8008e74:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008e78:	f1ba 0f01 	cmp.w	sl, #1
 8008e7c:	dc01      	bgt.n	8008e82 <_printf_float+0x3b6>
 8008e7e:	07db      	lsls	r3, r3, #31
 8008e80:	d536      	bpl.n	8008ef0 <_printf_float+0x424>
 8008e82:	2301      	movs	r3, #1
 8008e84:	4642      	mov	r2, r8
 8008e86:	4631      	mov	r1, r6
 8008e88:	4628      	mov	r0, r5
 8008e8a:	47b8      	blx	r7
 8008e8c:	3001      	adds	r0, #1
 8008e8e:	f43f ae78 	beq.w	8008b82 <_printf_float+0xb6>
 8008e92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e96:	4631      	mov	r1, r6
 8008e98:	4628      	mov	r0, r5
 8008e9a:	47b8      	blx	r7
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	f43f ae70 	beq.w	8008b82 <_printf_float+0xb6>
 8008ea2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008eae:	f7f7 fe33 	bl	8000b18 <__aeabi_dcmpeq>
 8008eb2:	b9c0      	cbnz	r0, 8008ee6 <_printf_float+0x41a>
 8008eb4:	4653      	mov	r3, sl
 8008eb6:	f108 0201 	add.w	r2, r8, #1
 8008eba:	4631      	mov	r1, r6
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	47b8      	blx	r7
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	d10c      	bne.n	8008ede <_printf_float+0x412>
 8008ec4:	e65d      	b.n	8008b82 <_printf_float+0xb6>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	465a      	mov	r2, fp
 8008eca:	4631      	mov	r1, r6
 8008ecc:	4628      	mov	r0, r5
 8008ece:	47b8      	blx	r7
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	f43f ae56 	beq.w	8008b82 <_printf_float+0xb6>
 8008ed6:	f108 0801 	add.w	r8, r8, #1
 8008eda:	45d0      	cmp	r8, sl
 8008edc:	dbf3      	blt.n	8008ec6 <_printf_float+0x3fa>
 8008ede:	464b      	mov	r3, r9
 8008ee0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008ee4:	e6df      	b.n	8008ca6 <_printf_float+0x1da>
 8008ee6:	f04f 0800 	mov.w	r8, #0
 8008eea:	f104 0b1a 	add.w	fp, r4, #26
 8008eee:	e7f4      	b.n	8008eda <_printf_float+0x40e>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	4642      	mov	r2, r8
 8008ef4:	e7e1      	b.n	8008eba <_printf_float+0x3ee>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	464a      	mov	r2, r9
 8008efa:	4631      	mov	r1, r6
 8008efc:	4628      	mov	r0, r5
 8008efe:	47b8      	blx	r7
 8008f00:	3001      	adds	r0, #1
 8008f02:	f43f ae3e 	beq.w	8008b82 <_printf_float+0xb6>
 8008f06:	f108 0801 	add.w	r8, r8, #1
 8008f0a:	68e3      	ldr	r3, [r4, #12]
 8008f0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f0e:	1a5b      	subs	r3, r3, r1
 8008f10:	4543      	cmp	r3, r8
 8008f12:	dcf0      	bgt.n	8008ef6 <_printf_float+0x42a>
 8008f14:	e6fc      	b.n	8008d10 <_printf_float+0x244>
 8008f16:	f04f 0800 	mov.w	r8, #0
 8008f1a:	f104 0919 	add.w	r9, r4, #25
 8008f1e:	e7f4      	b.n	8008f0a <_printf_float+0x43e>

08008f20 <_printf_common>:
 8008f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f24:	4616      	mov	r6, r2
 8008f26:	4698      	mov	r8, r3
 8008f28:	688a      	ldr	r2, [r1, #8]
 8008f2a:	690b      	ldr	r3, [r1, #16]
 8008f2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f30:	4293      	cmp	r3, r2
 8008f32:	bfb8      	it	lt
 8008f34:	4613      	movlt	r3, r2
 8008f36:	6033      	str	r3, [r6, #0]
 8008f38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f3c:	4607      	mov	r7, r0
 8008f3e:	460c      	mov	r4, r1
 8008f40:	b10a      	cbz	r2, 8008f46 <_printf_common+0x26>
 8008f42:	3301      	adds	r3, #1
 8008f44:	6033      	str	r3, [r6, #0]
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	0699      	lsls	r1, r3, #26
 8008f4a:	bf42      	ittt	mi
 8008f4c:	6833      	ldrmi	r3, [r6, #0]
 8008f4e:	3302      	addmi	r3, #2
 8008f50:	6033      	strmi	r3, [r6, #0]
 8008f52:	6825      	ldr	r5, [r4, #0]
 8008f54:	f015 0506 	ands.w	r5, r5, #6
 8008f58:	d106      	bne.n	8008f68 <_printf_common+0x48>
 8008f5a:	f104 0a19 	add.w	sl, r4, #25
 8008f5e:	68e3      	ldr	r3, [r4, #12]
 8008f60:	6832      	ldr	r2, [r6, #0]
 8008f62:	1a9b      	subs	r3, r3, r2
 8008f64:	42ab      	cmp	r3, r5
 8008f66:	dc26      	bgt.n	8008fb6 <_printf_common+0x96>
 8008f68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f6c:	6822      	ldr	r2, [r4, #0]
 8008f6e:	3b00      	subs	r3, #0
 8008f70:	bf18      	it	ne
 8008f72:	2301      	movne	r3, #1
 8008f74:	0692      	lsls	r2, r2, #26
 8008f76:	d42b      	bmi.n	8008fd0 <_printf_common+0xb0>
 8008f78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f7c:	4641      	mov	r1, r8
 8008f7e:	4638      	mov	r0, r7
 8008f80:	47c8      	blx	r9
 8008f82:	3001      	adds	r0, #1
 8008f84:	d01e      	beq.n	8008fc4 <_printf_common+0xa4>
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	6922      	ldr	r2, [r4, #16]
 8008f8a:	f003 0306 	and.w	r3, r3, #6
 8008f8e:	2b04      	cmp	r3, #4
 8008f90:	bf02      	ittt	eq
 8008f92:	68e5      	ldreq	r5, [r4, #12]
 8008f94:	6833      	ldreq	r3, [r6, #0]
 8008f96:	1aed      	subeq	r5, r5, r3
 8008f98:	68a3      	ldr	r3, [r4, #8]
 8008f9a:	bf0c      	ite	eq
 8008f9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fa0:	2500      	movne	r5, #0
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	bfc4      	itt	gt
 8008fa6:	1a9b      	subgt	r3, r3, r2
 8008fa8:	18ed      	addgt	r5, r5, r3
 8008faa:	2600      	movs	r6, #0
 8008fac:	341a      	adds	r4, #26
 8008fae:	42b5      	cmp	r5, r6
 8008fb0:	d11a      	bne.n	8008fe8 <_printf_common+0xc8>
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	e008      	b.n	8008fc8 <_printf_common+0xa8>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	4652      	mov	r2, sl
 8008fba:	4641      	mov	r1, r8
 8008fbc:	4638      	mov	r0, r7
 8008fbe:	47c8      	blx	r9
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	d103      	bne.n	8008fcc <_printf_common+0xac>
 8008fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fcc:	3501      	adds	r5, #1
 8008fce:	e7c6      	b.n	8008f5e <_printf_common+0x3e>
 8008fd0:	18e1      	adds	r1, r4, r3
 8008fd2:	1c5a      	adds	r2, r3, #1
 8008fd4:	2030      	movs	r0, #48	@ 0x30
 8008fd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008fda:	4422      	add	r2, r4
 8008fdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008fe0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008fe4:	3302      	adds	r3, #2
 8008fe6:	e7c7      	b.n	8008f78 <_printf_common+0x58>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	4622      	mov	r2, r4
 8008fec:	4641      	mov	r1, r8
 8008fee:	4638      	mov	r0, r7
 8008ff0:	47c8      	blx	r9
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	d0e6      	beq.n	8008fc4 <_printf_common+0xa4>
 8008ff6:	3601      	adds	r6, #1
 8008ff8:	e7d9      	b.n	8008fae <_printf_common+0x8e>
	...

08008ffc <_printf_i>:
 8008ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009000:	7e0f      	ldrb	r7, [r1, #24]
 8009002:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009004:	2f78      	cmp	r7, #120	@ 0x78
 8009006:	4691      	mov	r9, r2
 8009008:	4680      	mov	r8, r0
 800900a:	460c      	mov	r4, r1
 800900c:	469a      	mov	sl, r3
 800900e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009012:	d807      	bhi.n	8009024 <_printf_i+0x28>
 8009014:	2f62      	cmp	r7, #98	@ 0x62
 8009016:	d80a      	bhi.n	800902e <_printf_i+0x32>
 8009018:	2f00      	cmp	r7, #0
 800901a:	f000 80d2 	beq.w	80091c2 <_printf_i+0x1c6>
 800901e:	2f58      	cmp	r7, #88	@ 0x58
 8009020:	f000 80b9 	beq.w	8009196 <_printf_i+0x19a>
 8009024:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009028:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800902c:	e03a      	b.n	80090a4 <_printf_i+0xa8>
 800902e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009032:	2b15      	cmp	r3, #21
 8009034:	d8f6      	bhi.n	8009024 <_printf_i+0x28>
 8009036:	a101      	add	r1, pc, #4	@ (adr r1, 800903c <_printf_i+0x40>)
 8009038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800903c:	08009095 	.word	0x08009095
 8009040:	080090a9 	.word	0x080090a9
 8009044:	08009025 	.word	0x08009025
 8009048:	08009025 	.word	0x08009025
 800904c:	08009025 	.word	0x08009025
 8009050:	08009025 	.word	0x08009025
 8009054:	080090a9 	.word	0x080090a9
 8009058:	08009025 	.word	0x08009025
 800905c:	08009025 	.word	0x08009025
 8009060:	08009025 	.word	0x08009025
 8009064:	08009025 	.word	0x08009025
 8009068:	080091a9 	.word	0x080091a9
 800906c:	080090d3 	.word	0x080090d3
 8009070:	08009163 	.word	0x08009163
 8009074:	08009025 	.word	0x08009025
 8009078:	08009025 	.word	0x08009025
 800907c:	080091cb 	.word	0x080091cb
 8009080:	08009025 	.word	0x08009025
 8009084:	080090d3 	.word	0x080090d3
 8009088:	08009025 	.word	0x08009025
 800908c:	08009025 	.word	0x08009025
 8009090:	0800916b 	.word	0x0800916b
 8009094:	6833      	ldr	r3, [r6, #0]
 8009096:	1d1a      	adds	r2, r3, #4
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	6032      	str	r2, [r6, #0]
 800909c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80090a4:	2301      	movs	r3, #1
 80090a6:	e09d      	b.n	80091e4 <_printf_i+0x1e8>
 80090a8:	6833      	ldr	r3, [r6, #0]
 80090aa:	6820      	ldr	r0, [r4, #0]
 80090ac:	1d19      	adds	r1, r3, #4
 80090ae:	6031      	str	r1, [r6, #0]
 80090b0:	0606      	lsls	r6, r0, #24
 80090b2:	d501      	bpl.n	80090b8 <_printf_i+0xbc>
 80090b4:	681d      	ldr	r5, [r3, #0]
 80090b6:	e003      	b.n	80090c0 <_printf_i+0xc4>
 80090b8:	0645      	lsls	r5, r0, #25
 80090ba:	d5fb      	bpl.n	80090b4 <_printf_i+0xb8>
 80090bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80090c0:	2d00      	cmp	r5, #0
 80090c2:	da03      	bge.n	80090cc <_printf_i+0xd0>
 80090c4:	232d      	movs	r3, #45	@ 0x2d
 80090c6:	426d      	negs	r5, r5
 80090c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090cc:	4859      	ldr	r0, [pc, #356]	@ (8009234 <_printf_i+0x238>)
 80090ce:	230a      	movs	r3, #10
 80090d0:	e011      	b.n	80090f6 <_printf_i+0xfa>
 80090d2:	6821      	ldr	r1, [r4, #0]
 80090d4:	6833      	ldr	r3, [r6, #0]
 80090d6:	0608      	lsls	r0, r1, #24
 80090d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80090dc:	d402      	bmi.n	80090e4 <_printf_i+0xe8>
 80090de:	0649      	lsls	r1, r1, #25
 80090e0:	bf48      	it	mi
 80090e2:	b2ad      	uxthmi	r5, r5
 80090e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80090e6:	4853      	ldr	r0, [pc, #332]	@ (8009234 <_printf_i+0x238>)
 80090e8:	6033      	str	r3, [r6, #0]
 80090ea:	bf14      	ite	ne
 80090ec:	230a      	movne	r3, #10
 80090ee:	2308      	moveq	r3, #8
 80090f0:	2100      	movs	r1, #0
 80090f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80090f6:	6866      	ldr	r6, [r4, #4]
 80090f8:	60a6      	str	r6, [r4, #8]
 80090fa:	2e00      	cmp	r6, #0
 80090fc:	bfa2      	ittt	ge
 80090fe:	6821      	ldrge	r1, [r4, #0]
 8009100:	f021 0104 	bicge.w	r1, r1, #4
 8009104:	6021      	strge	r1, [r4, #0]
 8009106:	b90d      	cbnz	r5, 800910c <_printf_i+0x110>
 8009108:	2e00      	cmp	r6, #0
 800910a:	d04b      	beq.n	80091a4 <_printf_i+0x1a8>
 800910c:	4616      	mov	r6, r2
 800910e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009112:	fb03 5711 	mls	r7, r3, r1, r5
 8009116:	5dc7      	ldrb	r7, [r0, r7]
 8009118:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800911c:	462f      	mov	r7, r5
 800911e:	42bb      	cmp	r3, r7
 8009120:	460d      	mov	r5, r1
 8009122:	d9f4      	bls.n	800910e <_printf_i+0x112>
 8009124:	2b08      	cmp	r3, #8
 8009126:	d10b      	bne.n	8009140 <_printf_i+0x144>
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	07df      	lsls	r7, r3, #31
 800912c:	d508      	bpl.n	8009140 <_printf_i+0x144>
 800912e:	6923      	ldr	r3, [r4, #16]
 8009130:	6861      	ldr	r1, [r4, #4]
 8009132:	4299      	cmp	r1, r3
 8009134:	bfde      	ittt	le
 8009136:	2330      	movle	r3, #48	@ 0x30
 8009138:	f806 3c01 	strble.w	r3, [r6, #-1]
 800913c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009140:	1b92      	subs	r2, r2, r6
 8009142:	6122      	str	r2, [r4, #16]
 8009144:	f8cd a000 	str.w	sl, [sp]
 8009148:	464b      	mov	r3, r9
 800914a:	aa03      	add	r2, sp, #12
 800914c:	4621      	mov	r1, r4
 800914e:	4640      	mov	r0, r8
 8009150:	f7ff fee6 	bl	8008f20 <_printf_common>
 8009154:	3001      	adds	r0, #1
 8009156:	d14a      	bne.n	80091ee <_printf_i+0x1f2>
 8009158:	f04f 30ff 	mov.w	r0, #4294967295
 800915c:	b004      	add	sp, #16
 800915e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	f043 0320 	orr.w	r3, r3, #32
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	4833      	ldr	r0, [pc, #204]	@ (8009238 <_printf_i+0x23c>)
 800916c:	2778      	movs	r7, #120	@ 0x78
 800916e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009172:	6823      	ldr	r3, [r4, #0]
 8009174:	6831      	ldr	r1, [r6, #0]
 8009176:	061f      	lsls	r7, r3, #24
 8009178:	f851 5b04 	ldr.w	r5, [r1], #4
 800917c:	d402      	bmi.n	8009184 <_printf_i+0x188>
 800917e:	065f      	lsls	r7, r3, #25
 8009180:	bf48      	it	mi
 8009182:	b2ad      	uxthmi	r5, r5
 8009184:	6031      	str	r1, [r6, #0]
 8009186:	07d9      	lsls	r1, r3, #31
 8009188:	bf44      	itt	mi
 800918a:	f043 0320 	orrmi.w	r3, r3, #32
 800918e:	6023      	strmi	r3, [r4, #0]
 8009190:	b11d      	cbz	r5, 800919a <_printf_i+0x19e>
 8009192:	2310      	movs	r3, #16
 8009194:	e7ac      	b.n	80090f0 <_printf_i+0xf4>
 8009196:	4827      	ldr	r0, [pc, #156]	@ (8009234 <_printf_i+0x238>)
 8009198:	e7e9      	b.n	800916e <_printf_i+0x172>
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	f023 0320 	bic.w	r3, r3, #32
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	e7f6      	b.n	8009192 <_printf_i+0x196>
 80091a4:	4616      	mov	r6, r2
 80091a6:	e7bd      	b.n	8009124 <_printf_i+0x128>
 80091a8:	6833      	ldr	r3, [r6, #0]
 80091aa:	6825      	ldr	r5, [r4, #0]
 80091ac:	6961      	ldr	r1, [r4, #20]
 80091ae:	1d18      	adds	r0, r3, #4
 80091b0:	6030      	str	r0, [r6, #0]
 80091b2:	062e      	lsls	r6, r5, #24
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	d501      	bpl.n	80091bc <_printf_i+0x1c0>
 80091b8:	6019      	str	r1, [r3, #0]
 80091ba:	e002      	b.n	80091c2 <_printf_i+0x1c6>
 80091bc:	0668      	lsls	r0, r5, #25
 80091be:	d5fb      	bpl.n	80091b8 <_printf_i+0x1bc>
 80091c0:	8019      	strh	r1, [r3, #0]
 80091c2:	2300      	movs	r3, #0
 80091c4:	6123      	str	r3, [r4, #16]
 80091c6:	4616      	mov	r6, r2
 80091c8:	e7bc      	b.n	8009144 <_printf_i+0x148>
 80091ca:	6833      	ldr	r3, [r6, #0]
 80091cc:	1d1a      	adds	r2, r3, #4
 80091ce:	6032      	str	r2, [r6, #0]
 80091d0:	681e      	ldr	r6, [r3, #0]
 80091d2:	6862      	ldr	r2, [r4, #4]
 80091d4:	2100      	movs	r1, #0
 80091d6:	4630      	mov	r0, r6
 80091d8:	f7f7 f822 	bl	8000220 <memchr>
 80091dc:	b108      	cbz	r0, 80091e2 <_printf_i+0x1e6>
 80091de:	1b80      	subs	r0, r0, r6
 80091e0:	6060      	str	r0, [r4, #4]
 80091e2:	6863      	ldr	r3, [r4, #4]
 80091e4:	6123      	str	r3, [r4, #16]
 80091e6:	2300      	movs	r3, #0
 80091e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091ec:	e7aa      	b.n	8009144 <_printf_i+0x148>
 80091ee:	6923      	ldr	r3, [r4, #16]
 80091f0:	4632      	mov	r2, r6
 80091f2:	4649      	mov	r1, r9
 80091f4:	4640      	mov	r0, r8
 80091f6:	47d0      	blx	sl
 80091f8:	3001      	adds	r0, #1
 80091fa:	d0ad      	beq.n	8009158 <_printf_i+0x15c>
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	079b      	lsls	r3, r3, #30
 8009200:	d413      	bmi.n	800922a <_printf_i+0x22e>
 8009202:	68e0      	ldr	r0, [r4, #12]
 8009204:	9b03      	ldr	r3, [sp, #12]
 8009206:	4298      	cmp	r0, r3
 8009208:	bfb8      	it	lt
 800920a:	4618      	movlt	r0, r3
 800920c:	e7a6      	b.n	800915c <_printf_i+0x160>
 800920e:	2301      	movs	r3, #1
 8009210:	4632      	mov	r2, r6
 8009212:	4649      	mov	r1, r9
 8009214:	4640      	mov	r0, r8
 8009216:	47d0      	blx	sl
 8009218:	3001      	adds	r0, #1
 800921a:	d09d      	beq.n	8009158 <_printf_i+0x15c>
 800921c:	3501      	adds	r5, #1
 800921e:	68e3      	ldr	r3, [r4, #12]
 8009220:	9903      	ldr	r1, [sp, #12]
 8009222:	1a5b      	subs	r3, r3, r1
 8009224:	42ab      	cmp	r3, r5
 8009226:	dcf2      	bgt.n	800920e <_printf_i+0x212>
 8009228:	e7eb      	b.n	8009202 <_printf_i+0x206>
 800922a:	2500      	movs	r5, #0
 800922c:	f104 0619 	add.w	r6, r4, #25
 8009230:	e7f5      	b.n	800921e <_printf_i+0x222>
 8009232:	bf00      	nop
 8009234:	0800d156 	.word	0x0800d156
 8009238:	0800d167 	.word	0x0800d167

0800923c <_scanf_float>:
 800923c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009240:	b087      	sub	sp, #28
 8009242:	4617      	mov	r7, r2
 8009244:	9303      	str	r3, [sp, #12]
 8009246:	688b      	ldr	r3, [r1, #8]
 8009248:	1e5a      	subs	r2, r3, #1
 800924a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800924e:	bf81      	itttt	hi
 8009250:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009254:	eb03 0b05 	addhi.w	fp, r3, r5
 8009258:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800925c:	608b      	strhi	r3, [r1, #8]
 800925e:	680b      	ldr	r3, [r1, #0]
 8009260:	460a      	mov	r2, r1
 8009262:	f04f 0500 	mov.w	r5, #0
 8009266:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800926a:	f842 3b1c 	str.w	r3, [r2], #28
 800926e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009272:	4680      	mov	r8, r0
 8009274:	460c      	mov	r4, r1
 8009276:	bf98      	it	ls
 8009278:	f04f 0b00 	movls.w	fp, #0
 800927c:	9201      	str	r2, [sp, #4]
 800927e:	4616      	mov	r6, r2
 8009280:	46aa      	mov	sl, r5
 8009282:	46a9      	mov	r9, r5
 8009284:	9502      	str	r5, [sp, #8]
 8009286:	68a2      	ldr	r2, [r4, #8]
 8009288:	b152      	cbz	r2, 80092a0 <_scanf_float+0x64>
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	2b4e      	cmp	r3, #78	@ 0x4e
 8009290:	d864      	bhi.n	800935c <_scanf_float+0x120>
 8009292:	2b40      	cmp	r3, #64	@ 0x40
 8009294:	d83c      	bhi.n	8009310 <_scanf_float+0xd4>
 8009296:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800929a:	b2c8      	uxtb	r0, r1
 800929c:	280e      	cmp	r0, #14
 800929e:	d93a      	bls.n	8009316 <_scanf_float+0xda>
 80092a0:	f1b9 0f00 	cmp.w	r9, #0
 80092a4:	d003      	beq.n	80092ae <_scanf_float+0x72>
 80092a6:	6823      	ldr	r3, [r4, #0]
 80092a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092b2:	f1ba 0f01 	cmp.w	sl, #1
 80092b6:	f200 8117 	bhi.w	80094e8 <_scanf_float+0x2ac>
 80092ba:	9b01      	ldr	r3, [sp, #4]
 80092bc:	429e      	cmp	r6, r3
 80092be:	f200 8108 	bhi.w	80094d2 <_scanf_float+0x296>
 80092c2:	2001      	movs	r0, #1
 80092c4:	b007      	add	sp, #28
 80092c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ca:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80092ce:	2a0d      	cmp	r2, #13
 80092d0:	d8e6      	bhi.n	80092a0 <_scanf_float+0x64>
 80092d2:	a101      	add	r1, pc, #4	@ (adr r1, 80092d8 <_scanf_float+0x9c>)
 80092d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80092d8:	0800941f 	.word	0x0800941f
 80092dc:	080092a1 	.word	0x080092a1
 80092e0:	080092a1 	.word	0x080092a1
 80092e4:	080092a1 	.word	0x080092a1
 80092e8:	0800947f 	.word	0x0800947f
 80092ec:	08009457 	.word	0x08009457
 80092f0:	080092a1 	.word	0x080092a1
 80092f4:	080092a1 	.word	0x080092a1
 80092f8:	0800942d 	.word	0x0800942d
 80092fc:	080092a1 	.word	0x080092a1
 8009300:	080092a1 	.word	0x080092a1
 8009304:	080092a1 	.word	0x080092a1
 8009308:	080092a1 	.word	0x080092a1
 800930c:	080093e5 	.word	0x080093e5
 8009310:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009314:	e7db      	b.n	80092ce <_scanf_float+0x92>
 8009316:	290e      	cmp	r1, #14
 8009318:	d8c2      	bhi.n	80092a0 <_scanf_float+0x64>
 800931a:	a001      	add	r0, pc, #4	@ (adr r0, 8009320 <_scanf_float+0xe4>)
 800931c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009320:	080093d5 	.word	0x080093d5
 8009324:	080092a1 	.word	0x080092a1
 8009328:	080093d5 	.word	0x080093d5
 800932c:	0800946b 	.word	0x0800946b
 8009330:	080092a1 	.word	0x080092a1
 8009334:	0800937d 	.word	0x0800937d
 8009338:	080093bb 	.word	0x080093bb
 800933c:	080093bb 	.word	0x080093bb
 8009340:	080093bb 	.word	0x080093bb
 8009344:	080093bb 	.word	0x080093bb
 8009348:	080093bb 	.word	0x080093bb
 800934c:	080093bb 	.word	0x080093bb
 8009350:	080093bb 	.word	0x080093bb
 8009354:	080093bb 	.word	0x080093bb
 8009358:	080093bb 	.word	0x080093bb
 800935c:	2b6e      	cmp	r3, #110	@ 0x6e
 800935e:	d809      	bhi.n	8009374 <_scanf_float+0x138>
 8009360:	2b60      	cmp	r3, #96	@ 0x60
 8009362:	d8b2      	bhi.n	80092ca <_scanf_float+0x8e>
 8009364:	2b54      	cmp	r3, #84	@ 0x54
 8009366:	d07b      	beq.n	8009460 <_scanf_float+0x224>
 8009368:	2b59      	cmp	r3, #89	@ 0x59
 800936a:	d199      	bne.n	80092a0 <_scanf_float+0x64>
 800936c:	2d07      	cmp	r5, #7
 800936e:	d197      	bne.n	80092a0 <_scanf_float+0x64>
 8009370:	2508      	movs	r5, #8
 8009372:	e02c      	b.n	80093ce <_scanf_float+0x192>
 8009374:	2b74      	cmp	r3, #116	@ 0x74
 8009376:	d073      	beq.n	8009460 <_scanf_float+0x224>
 8009378:	2b79      	cmp	r3, #121	@ 0x79
 800937a:	e7f6      	b.n	800936a <_scanf_float+0x12e>
 800937c:	6821      	ldr	r1, [r4, #0]
 800937e:	05c8      	lsls	r0, r1, #23
 8009380:	d51b      	bpl.n	80093ba <_scanf_float+0x17e>
 8009382:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009386:	6021      	str	r1, [r4, #0]
 8009388:	f109 0901 	add.w	r9, r9, #1
 800938c:	f1bb 0f00 	cmp.w	fp, #0
 8009390:	d003      	beq.n	800939a <_scanf_float+0x15e>
 8009392:	3201      	adds	r2, #1
 8009394:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009398:	60a2      	str	r2, [r4, #8]
 800939a:	68a3      	ldr	r3, [r4, #8]
 800939c:	3b01      	subs	r3, #1
 800939e:	60a3      	str	r3, [r4, #8]
 80093a0:	6923      	ldr	r3, [r4, #16]
 80093a2:	3301      	adds	r3, #1
 80093a4:	6123      	str	r3, [r4, #16]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	3b01      	subs	r3, #1
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	607b      	str	r3, [r7, #4]
 80093ae:	f340 8087 	ble.w	80094c0 <_scanf_float+0x284>
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	3301      	adds	r3, #1
 80093b6:	603b      	str	r3, [r7, #0]
 80093b8:	e765      	b.n	8009286 <_scanf_float+0x4a>
 80093ba:	eb1a 0105 	adds.w	r1, sl, r5
 80093be:	f47f af6f 	bne.w	80092a0 <_scanf_float+0x64>
 80093c2:	6822      	ldr	r2, [r4, #0]
 80093c4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80093c8:	6022      	str	r2, [r4, #0]
 80093ca:	460d      	mov	r5, r1
 80093cc:	468a      	mov	sl, r1
 80093ce:	f806 3b01 	strb.w	r3, [r6], #1
 80093d2:	e7e2      	b.n	800939a <_scanf_float+0x15e>
 80093d4:	6822      	ldr	r2, [r4, #0]
 80093d6:	0610      	lsls	r0, r2, #24
 80093d8:	f57f af62 	bpl.w	80092a0 <_scanf_float+0x64>
 80093dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80093e0:	6022      	str	r2, [r4, #0]
 80093e2:	e7f4      	b.n	80093ce <_scanf_float+0x192>
 80093e4:	f1ba 0f00 	cmp.w	sl, #0
 80093e8:	d10e      	bne.n	8009408 <_scanf_float+0x1cc>
 80093ea:	f1b9 0f00 	cmp.w	r9, #0
 80093ee:	d10e      	bne.n	800940e <_scanf_float+0x1d2>
 80093f0:	6822      	ldr	r2, [r4, #0]
 80093f2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80093f6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80093fa:	d108      	bne.n	800940e <_scanf_float+0x1d2>
 80093fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009400:	6022      	str	r2, [r4, #0]
 8009402:	f04f 0a01 	mov.w	sl, #1
 8009406:	e7e2      	b.n	80093ce <_scanf_float+0x192>
 8009408:	f1ba 0f02 	cmp.w	sl, #2
 800940c:	d055      	beq.n	80094ba <_scanf_float+0x27e>
 800940e:	2d01      	cmp	r5, #1
 8009410:	d002      	beq.n	8009418 <_scanf_float+0x1dc>
 8009412:	2d04      	cmp	r5, #4
 8009414:	f47f af44 	bne.w	80092a0 <_scanf_float+0x64>
 8009418:	3501      	adds	r5, #1
 800941a:	b2ed      	uxtb	r5, r5
 800941c:	e7d7      	b.n	80093ce <_scanf_float+0x192>
 800941e:	f1ba 0f01 	cmp.w	sl, #1
 8009422:	f47f af3d 	bne.w	80092a0 <_scanf_float+0x64>
 8009426:	f04f 0a02 	mov.w	sl, #2
 800942a:	e7d0      	b.n	80093ce <_scanf_float+0x192>
 800942c:	b97d      	cbnz	r5, 800944e <_scanf_float+0x212>
 800942e:	f1b9 0f00 	cmp.w	r9, #0
 8009432:	f47f af38 	bne.w	80092a6 <_scanf_float+0x6a>
 8009436:	6822      	ldr	r2, [r4, #0]
 8009438:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800943c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009440:	f040 8108 	bne.w	8009654 <_scanf_float+0x418>
 8009444:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009448:	6022      	str	r2, [r4, #0]
 800944a:	2501      	movs	r5, #1
 800944c:	e7bf      	b.n	80093ce <_scanf_float+0x192>
 800944e:	2d03      	cmp	r5, #3
 8009450:	d0e2      	beq.n	8009418 <_scanf_float+0x1dc>
 8009452:	2d05      	cmp	r5, #5
 8009454:	e7de      	b.n	8009414 <_scanf_float+0x1d8>
 8009456:	2d02      	cmp	r5, #2
 8009458:	f47f af22 	bne.w	80092a0 <_scanf_float+0x64>
 800945c:	2503      	movs	r5, #3
 800945e:	e7b6      	b.n	80093ce <_scanf_float+0x192>
 8009460:	2d06      	cmp	r5, #6
 8009462:	f47f af1d 	bne.w	80092a0 <_scanf_float+0x64>
 8009466:	2507      	movs	r5, #7
 8009468:	e7b1      	b.n	80093ce <_scanf_float+0x192>
 800946a:	6822      	ldr	r2, [r4, #0]
 800946c:	0591      	lsls	r1, r2, #22
 800946e:	f57f af17 	bpl.w	80092a0 <_scanf_float+0x64>
 8009472:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009476:	6022      	str	r2, [r4, #0]
 8009478:	f8cd 9008 	str.w	r9, [sp, #8]
 800947c:	e7a7      	b.n	80093ce <_scanf_float+0x192>
 800947e:	6822      	ldr	r2, [r4, #0]
 8009480:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009484:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009488:	d006      	beq.n	8009498 <_scanf_float+0x25c>
 800948a:	0550      	lsls	r0, r2, #21
 800948c:	f57f af08 	bpl.w	80092a0 <_scanf_float+0x64>
 8009490:	f1b9 0f00 	cmp.w	r9, #0
 8009494:	f000 80de 	beq.w	8009654 <_scanf_float+0x418>
 8009498:	0591      	lsls	r1, r2, #22
 800949a:	bf58      	it	pl
 800949c:	9902      	ldrpl	r1, [sp, #8]
 800949e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80094a2:	bf58      	it	pl
 80094a4:	eba9 0101 	subpl.w	r1, r9, r1
 80094a8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80094ac:	bf58      	it	pl
 80094ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80094b2:	6022      	str	r2, [r4, #0]
 80094b4:	f04f 0900 	mov.w	r9, #0
 80094b8:	e789      	b.n	80093ce <_scanf_float+0x192>
 80094ba:	f04f 0a03 	mov.w	sl, #3
 80094be:	e786      	b.n	80093ce <_scanf_float+0x192>
 80094c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80094c4:	4639      	mov	r1, r7
 80094c6:	4640      	mov	r0, r8
 80094c8:	4798      	blx	r3
 80094ca:	2800      	cmp	r0, #0
 80094cc:	f43f aedb 	beq.w	8009286 <_scanf_float+0x4a>
 80094d0:	e6e6      	b.n	80092a0 <_scanf_float+0x64>
 80094d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80094d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80094da:	463a      	mov	r2, r7
 80094dc:	4640      	mov	r0, r8
 80094de:	4798      	blx	r3
 80094e0:	6923      	ldr	r3, [r4, #16]
 80094e2:	3b01      	subs	r3, #1
 80094e4:	6123      	str	r3, [r4, #16]
 80094e6:	e6e8      	b.n	80092ba <_scanf_float+0x7e>
 80094e8:	1e6b      	subs	r3, r5, #1
 80094ea:	2b06      	cmp	r3, #6
 80094ec:	d824      	bhi.n	8009538 <_scanf_float+0x2fc>
 80094ee:	2d02      	cmp	r5, #2
 80094f0:	d836      	bhi.n	8009560 <_scanf_float+0x324>
 80094f2:	9b01      	ldr	r3, [sp, #4]
 80094f4:	429e      	cmp	r6, r3
 80094f6:	f67f aee4 	bls.w	80092c2 <_scanf_float+0x86>
 80094fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80094fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009502:	463a      	mov	r2, r7
 8009504:	4640      	mov	r0, r8
 8009506:	4798      	blx	r3
 8009508:	6923      	ldr	r3, [r4, #16]
 800950a:	3b01      	subs	r3, #1
 800950c:	6123      	str	r3, [r4, #16]
 800950e:	e7f0      	b.n	80094f2 <_scanf_float+0x2b6>
 8009510:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009514:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009518:	463a      	mov	r2, r7
 800951a:	4640      	mov	r0, r8
 800951c:	4798      	blx	r3
 800951e:	6923      	ldr	r3, [r4, #16]
 8009520:	3b01      	subs	r3, #1
 8009522:	6123      	str	r3, [r4, #16]
 8009524:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009528:	fa5f fa8a 	uxtb.w	sl, sl
 800952c:	f1ba 0f02 	cmp.w	sl, #2
 8009530:	d1ee      	bne.n	8009510 <_scanf_float+0x2d4>
 8009532:	3d03      	subs	r5, #3
 8009534:	b2ed      	uxtb	r5, r5
 8009536:	1b76      	subs	r6, r6, r5
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	05da      	lsls	r2, r3, #23
 800953c:	d530      	bpl.n	80095a0 <_scanf_float+0x364>
 800953e:	055b      	lsls	r3, r3, #21
 8009540:	d511      	bpl.n	8009566 <_scanf_float+0x32a>
 8009542:	9b01      	ldr	r3, [sp, #4]
 8009544:	429e      	cmp	r6, r3
 8009546:	f67f aebc 	bls.w	80092c2 <_scanf_float+0x86>
 800954a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800954e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009552:	463a      	mov	r2, r7
 8009554:	4640      	mov	r0, r8
 8009556:	4798      	blx	r3
 8009558:	6923      	ldr	r3, [r4, #16]
 800955a:	3b01      	subs	r3, #1
 800955c:	6123      	str	r3, [r4, #16]
 800955e:	e7f0      	b.n	8009542 <_scanf_float+0x306>
 8009560:	46aa      	mov	sl, r5
 8009562:	46b3      	mov	fp, r6
 8009564:	e7de      	b.n	8009524 <_scanf_float+0x2e8>
 8009566:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800956a:	6923      	ldr	r3, [r4, #16]
 800956c:	2965      	cmp	r1, #101	@ 0x65
 800956e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009572:	f106 35ff 	add.w	r5, r6, #4294967295
 8009576:	6123      	str	r3, [r4, #16]
 8009578:	d00c      	beq.n	8009594 <_scanf_float+0x358>
 800957a:	2945      	cmp	r1, #69	@ 0x45
 800957c:	d00a      	beq.n	8009594 <_scanf_float+0x358>
 800957e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009582:	463a      	mov	r2, r7
 8009584:	4640      	mov	r0, r8
 8009586:	4798      	blx	r3
 8009588:	6923      	ldr	r3, [r4, #16]
 800958a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800958e:	3b01      	subs	r3, #1
 8009590:	1eb5      	subs	r5, r6, #2
 8009592:	6123      	str	r3, [r4, #16]
 8009594:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009598:	463a      	mov	r2, r7
 800959a:	4640      	mov	r0, r8
 800959c:	4798      	blx	r3
 800959e:	462e      	mov	r6, r5
 80095a0:	6822      	ldr	r2, [r4, #0]
 80095a2:	f012 0210 	ands.w	r2, r2, #16
 80095a6:	d001      	beq.n	80095ac <_scanf_float+0x370>
 80095a8:	2000      	movs	r0, #0
 80095aa:	e68b      	b.n	80092c4 <_scanf_float+0x88>
 80095ac:	7032      	strb	r2, [r6, #0]
 80095ae:	6823      	ldr	r3, [r4, #0]
 80095b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80095b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095b8:	d11c      	bne.n	80095f4 <_scanf_float+0x3b8>
 80095ba:	9b02      	ldr	r3, [sp, #8]
 80095bc:	454b      	cmp	r3, r9
 80095be:	eba3 0209 	sub.w	r2, r3, r9
 80095c2:	d123      	bne.n	800960c <_scanf_float+0x3d0>
 80095c4:	9901      	ldr	r1, [sp, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	4640      	mov	r0, r8
 80095ca:	f002 fc15 	bl	800bdf8 <_strtod_r>
 80095ce:	9b03      	ldr	r3, [sp, #12]
 80095d0:	6821      	ldr	r1, [r4, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f011 0f02 	tst.w	r1, #2
 80095d8:	ec57 6b10 	vmov	r6, r7, d0
 80095dc:	f103 0204 	add.w	r2, r3, #4
 80095e0:	d01f      	beq.n	8009622 <_scanf_float+0x3e6>
 80095e2:	9903      	ldr	r1, [sp, #12]
 80095e4:	600a      	str	r2, [r1, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	e9c3 6700 	strd	r6, r7, [r3]
 80095ec:	68e3      	ldr	r3, [r4, #12]
 80095ee:	3301      	adds	r3, #1
 80095f0:	60e3      	str	r3, [r4, #12]
 80095f2:	e7d9      	b.n	80095a8 <_scanf_float+0x36c>
 80095f4:	9b04      	ldr	r3, [sp, #16]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d0e4      	beq.n	80095c4 <_scanf_float+0x388>
 80095fa:	9905      	ldr	r1, [sp, #20]
 80095fc:	230a      	movs	r3, #10
 80095fe:	3101      	adds	r1, #1
 8009600:	4640      	mov	r0, r8
 8009602:	f002 fc79 	bl	800bef8 <_strtol_r>
 8009606:	9b04      	ldr	r3, [sp, #16]
 8009608:	9e05      	ldr	r6, [sp, #20]
 800960a:	1ac2      	subs	r2, r0, r3
 800960c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009610:	429e      	cmp	r6, r3
 8009612:	bf28      	it	cs
 8009614:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009618:	4910      	ldr	r1, [pc, #64]	@ (800965c <_scanf_float+0x420>)
 800961a:	4630      	mov	r0, r6
 800961c:	f000 f8e4 	bl	80097e8 <siprintf>
 8009620:	e7d0      	b.n	80095c4 <_scanf_float+0x388>
 8009622:	f011 0f04 	tst.w	r1, #4
 8009626:	9903      	ldr	r1, [sp, #12]
 8009628:	600a      	str	r2, [r1, #0]
 800962a:	d1dc      	bne.n	80095e6 <_scanf_float+0x3aa>
 800962c:	681d      	ldr	r5, [r3, #0]
 800962e:	4632      	mov	r2, r6
 8009630:	463b      	mov	r3, r7
 8009632:	4630      	mov	r0, r6
 8009634:	4639      	mov	r1, r7
 8009636:	f7f7 faa1 	bl	8000b7c <__aeabi_dcmpun>
 800963a:	b128      	cbz	r0, 8009648 <_scanf_float+0x40c>
 800963c:	4808      	ldr	r0, [pc, #32]	@ (8009660 <_scanf_float+0x424>)
 800963e:	f000 f9d3 	bl	80099e8 <nanf>
 8009642:	ed85 0a00 	vstr	s0, [r5]
 8009646:	e7d1      	b.n	80095ec <_scanf_float+0x3b0>
 8009648:	4630      	mov	r0, r6
 800964a:	4639      	mov	r1, r7
 800964c:	f7f7 faf4 	bl	8000c38 <__aeabi_d2f>
 8009650:	6028      	str	r0, [r5, #0]
 8009652:	e7cb      	b.n	80095ec <_scanf_float+0x3b0>
 8009654:	f04f 0900 	mov.w	r9, #0
 8009658:	e629      	b.n	80092ae <_scanf_float+0x72>
 800965a:	bf00      	nop
 800965c:	0800d178 	.word	0x0800d178
 8009660:	0800d50d 	.word	0x0800d50d

08009664 <std>:
 8009664:	2300      	movs	r3, #0
 8009666:	b510      	push	{r4, lr}
 8009668:	4604      	mov	r4, r0
 800966a:	e9c0 3300 	strd	r3, r3, [r0]
 800966e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009672:	6083      	str	r3, [r0, #8]
 8009674:	8181      	strh	r1, [r0, #12]
 8009676:	6643      	str	r3, [r0, #100]	@ 0x64
 8009678:	81c2      	strh	r2, [r0, #14]
 800967a:	6183      	str	r3, [r0, #24]
 800967c:	4619      	mov	r1, r3
 800967e:	2208      	movs	r2, #8
 8009680:	305c      	adds	r0, #92	@ 0x5c
 8009682:	f000 f914 	bl	80098ae <memset>
 8009686:	4b0d      	ldr	r3, [pc, #52]	@ (80096bc <std+0x58>)
 8009688:	6263      	str	r3, [r4, #36]	@ 0x24
 800968a:	4b0d      	ldr	r3, [pc, #52]	@ (80096c0 <std+0x5c>)
 800968c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800968e:	4b0d      	ldr	r3, [pc, #52]	@ (80096c4 <std+0x60>)
 8009690:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009692:	4b0d      	ldr	r3, [pc, #52]	@ (80096c8 <std+0x64>)
 8009694:	6323      	str	r3, [r4, #48]	@ 0x30
 8009696:	4b0d      	ldr	r3, [pc, #52]	@ (80096cc <std+0x68>)
 8009698:	6224      	str	r4, [r4, #32]
 800969a:	429c      	cmp	r4, r3
 800969c:	d006      	beq.n	80096ac <std+0x48>
 800969e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80096a2:	4294      	cmp	r4, r2
 80096a4:	d002      	beq.n	80096ac <std+0x48>
 80096a6:	33d0      	adds	r3, #208	@ 0xd0
 80096a8:	429c      	cmp	r4, r3
 80096aa:	d105      	bne.n	80096b8 <std+0x54>
 80096ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80096b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096b4:	f000 b986 	b.w	80099c4 <__retarget_lock_init_recursive>
 80096b8:	bd10      	pop	{r4, pc}
 80096ba:	bf00      	nop
 80096bc:	08009829 	.word	0x08009829
 80096c0:	0800984b 	.word	0x0800984b
 80096c4:	08009883 	.word	0x08009883
 80096c8:	080098a7 	.word	0x080098a7
 80096cc:	20000740 	.word	0x20000740

080096d0 <stdio_exit_handler>:
 80096d0:	4a02      	ldr	r2, [pc, #8]	@ (80096dc <stdio_exit_handler+0xc>)
 80096d2:	4903      	ldr	r1, [pc, #12]	@ (80096e0 <stdio_exit_handler+0x10>)
 80096d4:	4803      	ldr	r0, [pc, #12]	@ (80096e4 <stdio_exit_handler+0x14>)
 80096d6:	f000 b869 	b.w	80097ac <_fwalk_sglue>
 80096da:	bf00      	nop
 80096dc:	20000008 	.word	0x20000008
 80096e0:	0800c2b5 	.word	0x0800c2b5
 80096e4:	20000018 	.word	0x20000018

080096e8 <cleanup_stdio>:
 80096e8:	6841      	ldr	r1, [r0, #4]
 80096ea:	4b0c      	ldr	r3, [pc, #48]	@ (800971c <cleanup_stdio+0x34>)
 80096ec:	4299      	cmp	r1, r3
 80096ee:	b510      	push	{r4, lr}
 80096f0:	4604      	mov	r4, r0
 80096f2:	d001      	beq.n	80096f8 <cleanup_stdio+0x10>
 80096f4:	f002 fdde 	bl	800c2b4 <_fflush_r>
 80096f8:	68a1      	ldr	r1, [r4, #8]
 80096fa:	4b09      	ldr	r3, [pc, #36]	@ (8009720 <cleanup_stdio+0x38>)
 80096fc:	4299      	cmp	r1, r3
 80096fe:	d002      	beq.n	8009706 <cleanup_stdio+0x1e>
 8009700:	4620      	mov	r0, r4
 8009702:	f002 fdd7 	bl	800c2b4 <_fflush_r>
 8009706:	68e1      	ldr	r1, [r4, #12]
 8009708:	4b06      	ldr	r3, [pc, #24]	@ (8009724 <cleanup_stdio+0x3c>)
 800970a:	4299      	cmp	r1, r3
 800970c:	d004      	beq.n	8009718 <cleanup_stdio+0x30>
 800970e:	4620      	mov	r0, r4
 8009710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009714:	f002 bdce 	b.w	800c2b4 <_fflush_r>
 8009718:	bd10      	pop	{r4, pc}
 800971a:	bf00      	nop
 800971c:	20000740 	.word	0x20000740
 8009720:	200007a8 	.word	0x200007a8
 8009724:	20000810 	.word	0x20000810

08009728 <global_stdio_init.part.0>:
 8009728:	b510      	push	{r4, lr}
 800972a:	4b0b      	ldr	r3, [pc, #44]	@ (8009758 <global_stdio_init.part.0+0x30>)
 800972c:	4c0b      	ldr	r4, [pc, #44]	@ (800975c <global_stdio_init.part.0+0x34>)
 800972e:	4a0c      	ldr	r2, [pc, #48]	@ (8009760 <global_stdio_init.part.0+0x38>)
 8009730:	601a      	str	r2, [r3, #0]
 8009732:	4620      	mov	r0, r4
 8009734:	2200      	movs	r2, #0
 8009736:	2104      	movs	r1, #4
 8009738:	f7ff ff94 	bl	8009664 <std>
 800973c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009740:	2201      	movs	r2, #1
 8009742:	2109      	movs	r1, #9
 8009744:	f7ff ff8e 	bl	8009664 <std>
 8009748:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800974c:	2202      	movs	r2, #2
 800974e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009752:	2112      	movs	r1, #18
 8009754:	f7ff bf86 	b.w	8009664 <std>
 8009758:	20000878 	.word	0x20000878
 800975c:	20000740 	.word	0x20000740
 8009760:	080096d1 	.word	0x080096d1

08009764 <__sfp_lock_acquire>:
 8009764:	4801      	ldr	r0, [pc, #4]	@ (800976c <__sfp_lock_acquire+0x8>)
 8009766:	f000 b92e 	b.w	80099c6 <__retarget_lock_acquire_recursive>
 800976a:	bf00      	nop
 800976c:	20000881 	.word	0x20000881

08009770 <__sfp_lock_release>:
 8009770:	4801      	ldr	r0, [pc, #4]	@ (8009778 <__sfp_lock_release+0x8>)
 8009772:	f000 b929 	b.w	80099c8 <__retarget_lock_release_recursive>
 8009776:	bf00      	nop
 8009778:	20000881 	.word	0x20000881

0800977c <__sinit>:
 800977c:	b510      	push	{r4, lr}
 800977e:	4604      	mov	r4, r0
 8009780:	f7ff fff0 	bl	8009764 <__sfp_lock_acquire>
 8009784:	6a23      	ldr	r3, [r4, #32]
 8009786:	b11b      	cbz	r3, 8009790 <__sinit+0x14>
 8009788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800978c:	f7ff bff0 	b.w	8009770 <__sfp_lock_release>
 8009790:	4b04      	ldr	r3, [pc, #16]	@ (80097a4 <__sinit+0x28>)
 8009792:	6223      	str	r3, [r4, #32]
 8009794:	4b04      	ldr	r3, [pc, #16]	@ (80097a8 <__sinit+0x2c>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1f5      	bne.n	8009788 <__sinit+0xc>
 800979c:	f7ff ffc4 	bl	8009728 <global_stdio_init.part.0>
 80097a0:	e7f2      	b.n	8009788 <__sinit+0xc>
 80097a2:	bf00      	nop
 80097a4:	080096e9 	.word	0x080096e9
 80097a8:	20000878 	.word	0x20000878

080097ac <_fwalk_sglue>:
 80097ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097b0:	4607      	mov	r7, r0
 80097b2:	4688      	mov	r8, r1
 80097b4:	4614      	mov	r4, r2
 80097b6:	2600      	movs	r6, #0
 80097b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097bc:	f1b9 0901 	subs.w	r9, r9, #1
 80097c0:	d505      	bpl.n	80097ce <_fwalk_sglue+0x22>
 80097c2:	6824      	ldr	r4, [r4, #0]
 80097c4:	2c00      	cmp	r4, #0
 80097c6:	d1f7      	bne.n	80097b8 <_fwalk_sglue+0xc>
 80097c8:	4630      	mov	r0, r6
 80097ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097ce:	89ab      	ldrh	r3, [r5, #12]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d907      	bls.n	80097e4 <_fwalk_sglue+0x38>
 80097d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097d8:	3301      	adds	r3, #1
 80097da:	d003      	beq.n	80097e4 <_fwalk_sglue+0x38>
 80097dc:	4629      	mov	r1, r5
 80097de:	4638      	mov	r0, r7
 80097e0:	47c0      	blx	r8
 80097e2:	4306      	orrs	r6, r0
 80097e4:	3568      	adds	r5, #104	@ 0x68
 80097e6:	e7e9      	b.n	80097bc <_fwalk_sglue+0x10>

080097e8 <siprintf>:
 80097e8:	b40e      	push	{r1, r2, r3}
 80097ea:	b500      	push	{lr}
 80097ec:	b09c      	sub	sp, #112	@ 0x70
 80097ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80097f0:	9002      	str	r0, [sp, #8]
 80097f2:	9006      	str	r0, [sp, #24]
 80097f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80097f8:	4809      	ldr	r0, [pc, #36]	@ (8009820 <siprintf+0x38>)
 80097fa:	9107      	str	r1, [sp, #28]
 80097fc:	9104      	str	r1, [sp, #16]
 80097fe:	4909      	ldr	r1, [pc, #36]	@ (8009824 <siprintf+0x3c>)
 8009800:	f853 2b04 	ldr.w	r2, [r3], #4
 8009804:	9105      	str	r1, [sp, #20]
 8009806:	6800      	ldr	r0, [r0, #0]
 8009808:	9301      	str	r3, [sp, #4]
 800980a:	a902      	add	r1, sp, #8
 800980c:	f002 fbd2 	bl	800bfb4 <_svfiprintf_r>
 8009810:	9b02      	ldr	r3, [sp, #8]
 8009812:	2200      	movs	r2, #0
 8009814:	701a      	strb	r2, [r3, #0]
 8009816:	b01c      	add	sp, #112	@ 0x70
 8009818:	f85d eb04 	ldr.w	lr, [sp], #4
 800981c:	b003      	add	sp, #12
 800981e:	4770      	bx	lr
 8009820:	20000014 	.word	0x20000014
 8009824:	ffff0208 	.word	0xffff0208

08009828 <__sread>:
 8009828:	b510      	push	{r4, lr}
 800982a:	460c      	mov	r4, r1
 800982c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009830:	f000 f87a 	bl	8009928 <_read_r>
 8009834:	2800      	cmp	r0, #0
 8009836:	bfab      	itete	ge
 8009838:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800983a:	89a3      	ldrhlt	r3, [r4, #12]
 800983c:	181b      	addge	r3, r3, r0
 800983e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009842:	bfac      	ite	ge
 8009844:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009846:	81a3      	strhlt	r3, [r4, #12]
 8009848:	bd10      	pop	{r4, pc}

0800984a <__swrite>:
 800984a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800984e:	461f      	mov	r7, r3
 8009850:	898b      	ldrh	r3, [r1, #12]
 8009852:	05db      	lsls	r3, r3, #23
 8009854:	4605      	mov	r5, r0
 8009856:	460c      	mov	r4, r1
 8009858:	4616      	mov	r6, r2
 800985a:	d505      	bpl.n	8009868 <__swrite+0x1e>
 800985c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009860:	2302      	movs	r3, #2
 8009862:	2200      	movs	r2, #0
 8009864:	f000 f84e 	bl	8009904 <_lseek_r>
 8009868:	89a3      	ldrh	r3, [r4, #12]
 800986a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800986e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009872:	81a3      	strh	r3, [r4, #12]
 8009874:	4632      	mov	r2, r6
 8009876:	463b      	mov	r3, r7
 8009878:	4628      	mov	r0, r5
 800987a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800987e:	f000 b865 	b.w	800994c <_write_r>

08009882 <__sseek>:
 8009882:	b510      	push	{r4, lr}
 8009884:	460c      	mov	r4, r1
 8009886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800988a:	f000 f83b 	bl	8009904 <_lseek_r>
 800988e:	1c43      	adds	r3, r0, #1
 8009890:	89a3      	ldrh	r3, [r4, #12]
 8009892:	bf15      	itete	ne
 8009894:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009896:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800989a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800989e:	81a3      	strheq	r3, [r4, #12]
 80098a0:	bf18      	it	ne
 80098a2:	81a3      	strhne	r3, [r4, #12]
 80098a4:	bd10      	pop	{r4, pc}

080098a6 <__sclose>:
 80098a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098aa:	f000 b81b 	b.w	80098e4 <_close_r>

080098ae <memset>:
 80098ae:	4402      	add	r2, r0
 80098b0:	4603      	mov	r3, r0
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d100      	bne.n	80098b8 <memset+0xa>
 80098b6:	4770      	bx	lr
 80098b8:	f803 1b01 	strb.w	r1, [r3], #1
 80098bc:	e7f9      	b.n	80098b2 <memset+0x4>

080098be <strcat>:
 80098be:	b510      	push	{r4, lr}
 80098c0:	4602      	mov	r2, r0
 80098c2:	7814      	ldrb	r4, [r2, #0]
 80098c4:	4613      	mov	r3, r2
 80098c6:	3201      	adds	r2, #1
 80098c8:	2c00      	cmp	r4, #0
 80098ca:	d1fa      	bne.n	80098c2 <strcat+0x4>
 80098cc:	3b01      	subs	r3, #1
 80098ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098d6:	2a00      	cmp	r2, #0
 80098d8:	d1f9      	bne.n	80098ce <strcat+0x10>
 80098da:	bd10      	pop	{r4, pc}

080098dc <_localeconv_r>:
 80098dc:	4800      	ldr	r0, [pc, #0]	@ (80098e0 <_localeconv_r+0x4>)
 80098de:	4770      	bx	lr
 80098e0:	20000154 	.word	0x20000154

080098e4 <_close_r>:
 80098e4:	b538      	push	{r3, r4, r5, lr}
 80098e6:	4d06      	ldr	r5, [pc, #24]	@ (8009900 <_close_r+0x1c>)
 80098e8:	2300      	movs	r3, #0
 80098ea:	4604      	mov	r4, r0
 80098ec:	4608      	mov	r0, r1
 80098ee:	602b      	str	r3, [r5, #0]
 80098f0:	f7f9 fb8e 	bl	8003010 <_close>
 80098f4:	1c43      	adds	r3, r0, #1
 80098f6:	d102      	bne.n	80098fe <_close_r+0x1a>
 80098f8:	682b      	ldr	r3, [r5, #0]
 80098fa:	b103      	cbz	r3, 80098fe <_close_r+0x1a>
 80098fc:	6023      	str	r3, [r4, #0]
 80098fe:	bd38      	pop	{r3, r4, r5, pc}
 8009900:	2000087c 	.word	0x2000087c

08009904 <_lseek_r>:
 8009904:	b538      	push	{r3, r4, r5, lr}
 8009906:	4d07      	ldr	r5, [pc, #28]	@ (8009924 <_lseek_r+0x20>)
 8009908:	4604      	mov	r4, r0
 800990a:	4608      	mov	r0, r1
 800990c:	4611      	mov	r1, r2
 800990e:	2200      	movs	r2, #0
 8009910:	602a      	str	r2, [r5, #0]
 8009912:	461a      	mov	r2, r3
 8009914:	f7f9 fba3 	bl	800305e <_lseek>
 8009918:	1c43      	adds	r3, r0, #1
 800991a:	d102      	bne.n	8009922 <_lseek_r+0x1e>
 800991c:	682b      	ldr	r3, [r5, #0]
 800991e:	b103      	cbz	r3, 8009922 <_lseek_r+0x1e>
 8009920:	6023      	str	r3, [r4, #0]
 8009922:	bd38      	pop	{r3, r4, r5, pc}
 8009924:	2000087c 	.word	0x2000087c

08009928 <_read_r>:
 8009928:	b538      	push	{r3, r4, r5, lr}
 800992a:	4d07      	ldr	r5, [pc, #28]	@ (8009948 <_read_r+0x20>)
 800992c:	4604      	mov	r4, r0
 800992e:	4608      	mov	r0, r1
 8009930:	4611      	mov	r1, r2
 8009932:	2200      	movs	r2, #0
 8009934:	602a      	str	r2, [r5, #0]
 8009936:	461a      	mov	r2, r3
 8009938:	f7f9 fb31 	bl	8002f9e <_read>
 800993c:	1c43      	adds	r3, r0, #1
 800993e:	d102      	bne.n	8009946 <_read_r+0x1e>
 8009940:	682b      	ldr	r3, [r5, #0]
 8009942:	b103      	cbz	r3, 8009946 <_read_r+0x1e>
 8009944:	6023      	str	r3, [r4, #0]
 8009946:	bd38      	pop	{r3, r4, r5, pc}
 8009948:	2000087c 	.word	0x2000087c

0800994c <_write_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	4d07      	ldr	r5, [pc, #28]	@ (800996c <_write_r+0x20>)
 8009950:	4604      	mov	r4, r0
 8009952:	4608      	mov	r0, r1
 8009954:	4611      	mov	r1, r2
 8009956:	2200      	movs	r2, #0
 8009958:	602a      	str	r2, [r5, #0]
 800995a:	461a      	mov	r2, r3
 800995c:	f7f9 fb3c 	bl	8002fd8 <_write>
 8009960:	1c43      	adds	r3, r0, #1
 8009962:	d102      	bne.n	800996a <_write_r+0x1e>
 8009964:	682b      	ldr	r3, [r5, #0]
 8009966:	b103      	cbz	r3, 800996a <_write_r+0x1e>
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	bd38      	pop	{r3, r4, r5, pc}
 800996c:	2000087c 	.word	0x2000087c

08009970 <__errno>:
 8009970:	4b01      	ldr	r3, [pc, #4]	@ (8009978 <__errno+0x8>)
 8009972:	6818      	ldr	r0, [r3, #0]
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	20000014 	.word	0x20000014

0800997c <__libc_init_array>:
 800997c:	b570      	push	{r4, r5, r6, lr}
 800997e:	4d0d      	ldr	r5, [pc, #52]	@ (80099b4 <__libc_init_array+0x38>)
 8009980:	4c0d      	ldr	r4, [pc, #52]	@ (80099b8 <__libc_init_array+0x3c>)
 8009982:	1b64      	subs	r4, r4, r5
 8009984:	10a4      	asrs	r4, r4, #2
 8009986:	2600      	movs	r6, #0
 8009988:	42a6      	cmp	r6, r4
 800998a:	d109      	bne.n	80099a0 <__libc_init_array+0x24>
 800998c:	4d0b      	ldr	r5, [pc, #44]	@ (80099bc <__libc_init_array+0x40>)
 800998e:	4c0c      	ldr	r4, [pc, #48]	@ (80099c0 <__libc_init_array+0x44>)
 8009990:	f003 fb74 	bl	800d07c <_init>
 8009994:	1b64      	subs	r4, r4, r5
 8009996:	10a4      	asrs	r4, r4, #2
 8009998:	2600      	movs	r6, #0
 800999a:	42a6      	cmp	r6, r4
 800999c:	d105      	bne.n	80099aa <__libc_init_array+0x2e>
 800999e:	bd70      	pop	{r4, r5, r6, pc}
 80099a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099a4:	4798      	blx	r3
 80099a6:	3601      	adds	r6, #1
 80099a8:	e7ee      	b.n	8009988 <__libc_init_array+0xc>
 80099aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ae:	4798      	blx	r3
 80099b0:	3601      	adds	r6, #1
 80099b2:	e7f2      	b.n	800999a <__libc_init_array+0x1e>
 80099b4:	0800d578 	.word	0x0800d578
 80099b8:	0800d578 	.word	0x0800d578
 80099bc:	0800d578 	.word	0x0800d578
 80099c0:	0800d57c 	.word	0x0800d57c

080099c4 <__retarget_lock_init_recursive>:
 80099c4:	4770      	bx	lr

080099c6 <__retarget_lock_acquire_recursive>:
 80099c6:	4770      	bx	lr

080099c8 <__retarget_lock_release_recursive>:
 80099c8:	4770      	bx	lr

080099ca <memcpy>:
 80099ca:	440a      	add	r2, r1
 80099cc:	4291      	cmp	r1, r2
 80099ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80099d2:	d100      	bne.n	80099d6 <memcpy+0xc>
 80099d4:	4770      	bx	lr
 80099d6:	b510      	push	{r4, lr}
 80099d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099e0:	4291      	cmp	r1, r2
 80099e2:	d1f9      	bne.n	80099d8 <memcpy+0xe>
 80099e4:	bd10      	pop	{r4, pc}
	...

080099e8 <nanf>:
 80099e8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80099f0 <nanf+0x8>
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	7fc00000 	.word	0x7fc00000

080099f4 <quorem>:
 80099f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f8:	6903      	ldr	r3, [r0, #16]
 80099fa:	690c      	ldr	r4, [r1, #16]
 80099fc:	42a3      	cmp	r3, r4
 80099fe:	4607      	mov	r7, r0
 8009a00:	db7e      	blt.n	8009b00 <quorem+0x10c>
 8009a02:	3c01      	subs	r4, #1
 8009a04:	f101 0814 	add.w	r8, r1, #20
 8009a08:	00a3      	lsls	r3, r4, #2
 8009a0a:	f100 0514 	add.w	r5, r0, #20
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a14:	9301      	str	r3, [sp, #4]
 8009a16:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	429a      	cmp	r2, r3
 8009a22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a26:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a2a:	d32e      	bcc.n	8009a8a <quorem+0x96>
 8009a2c:	f04f 0a00 	mov.w	sl, #0
 8009a30:	46c4      	mov	ip, r8
 8009a32:	46ae      	mov	lr, r5
 8009a34:	46d3      	mov	fp, sl
 8009a36:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009a3a:	b298      	uxth	r0, r3
 8009a3c:	fb06 a000 	mla	r0, r6, r0, sl
 8009a40:	0c02      	lsrs	r2, r0, #16
 8009a42:	0c1b      	lsrs	r3, r3, #16
 8009a44:	fb06 2303 	mla	r3, r6, r3, r2
 8009a48:	f8de 2000 	ldr.w	r2, [lr]
 8009a4c:	b280      	uxth	r0, r0
 8009a4e:	b292      	uxth	r2, r2
 8009a50:	1a12      	subs	r2, r2, r0
 8009a52:	445a      	add	r2, fp
 8009a54:	f8de 0000 	ldr.w	r0, [lr]
 8009a58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009a62:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009a66:	b292      	uxth	r2, r2
 8009a68:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009a6c:	45e1      	cmp	r9, ip
 8009a6e:	f84e 2b04 	str.w	r2, [lr], #4
 8009a72:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009a76:	d2de      	bcs.n	8009a36 <quorem+0x42>
 8009a78:	9b00      	ldr	r3, [sp, #0]
 8009a7a:	58eb      	ldr	r3, [r5, r3]
 8009a7c:	b92b      	cbnz	r3, 8009a8a <quorem+0x96>
 8009a7e:	9b01      	ldr	r3, [sp, #4]
 8009a80:	3b04      	subs	r3, #4
 8009a82:	429d      	cmp	r5, r3
 8009a84:	461a      	mov	r2, r3
 8009a86:	d32f      	bcc.n	8009ae8 <quorem+0xf4>
 8009a88:	613c      	str	r4, [r7, #16]
 8009a8a:	4638      	mov	r0, r7
 8009a8c:	f001 f9c4 	bl	800ae18 <__mcmp>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	db25      	blt.n	8009ae0 <quorem+0xec>
 8009a94:	4629      	mov	r1, r5
 8009a96:	2000      	movs	r0, #0
 8009a98:	f858 2b04 	ldr.w	r2, [r8], #4
 8009a9c:	f8d1 c000 	ldr.w	ip, [r1]
 8009aa0:	fa1f fe82 	uxth.w	lr, r2
 8009aa4:	fa1f f38c 	uxth.w	r3, ip
 8009aa8:	eba3 030e 	sub.w	r3, r3, lr
 8009aac:	4403      	add	r3, r0
 8009aae:	0c12      	lsrs	r2, r2, #16
 8009ab0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009ab4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009abe:	45c1      	cmp	r9, r8
 8009ac0:	f841 3b04 	str.w	r3, [r1], #4
 8009ac4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009ac8:	d2e6      	bcs.n	8009a98 <quorem+0xa4>
 8009aca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ace:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ad2:	b922      	cbnz	r2, 8009ade <quorem+0xea>
 8009ad4:	3b04      	subs	r3, #4
 8009ad6:	429d      	cmp	r5, r3
 8009ad8:	461a      	mov	r2, r3
 8009ada:	d30b      	bcc.n	8009af4 <quorem+0x100>
 8009adc:	613c      	str	r4, [r7, #16]
 8009ade:	3601      	adds	r6, #1
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	b003      	add	sp, #12
 8009ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae8:	6812      	ldr	r2, [r2, #0]
 8009aea:	3b04      	subs	r3, #4
 8009aec:	2a00      	cmp	r2, #0
 8009aee:	d1cb      	bne.n	8009a88 <quorem+0x94>
 8009af0:	3c01      	subs	r4, #1
 8009af2:	e7c6      	b.n	8009a82 <quorem+0x8e>
 8009af4:	6812      	ldr	r2, [r2, #0]
 8009af6:	3b04      	subs	r3, #4
 8009af8:	2a00      	cmp	r2, #0
 8009afa:	d1ef      	bne.n	8009adc <quorem+0xe8>
 8009afc:	3c01      	subs	r4, #1
 8009afe:	e7ea      	b.n	8009ad6 <quorem+0xe2>
 8009b00:	2000      	movs	r0, #0
 8009b02:	e7ee      	b.n	8009ae2 <quorem+0xee>
 8009b04:	0000      	movs	r0, r0
	...

08009b08 <_dtoa_r>:
 8009b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b0c:	69c7      	ldr	r7, [r0, #28]
 8009b0e:	b099      	sub	sp, #100	@ 0x64
 8009b10:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009b14:	ec55 4b10 	vmov	r4, r5, d0
 8009b18:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009b1a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009b1c:	4683      	mov	fp, r0
 8009b1e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b22:	b97f      	cbnz	r7, 8009b44 <_dtoa_r+0x3c>
 8009b24:	2010      	movs	r0, #16
 8009b26:	f000 fdfd 	bl	800a724 <malloc>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009b30:	b920      	cbnz	r0, 8009b3c <_dtoa_r+0x34>
 8009b32:	4ba7      	ldr	r3, [pc, #668]	@ (8009dd0 <_dtoa_r+0x2c8>)
 8009b34:	21ef      	movs	r1, #239	@ 0xef
 8009b36:	48a7      	ldr	r0, [pc, #668]	@ (8009dd4 <_dtoa_r+0x2cc>)
 8009b38:	f002 fc2a 	bl	800c390 <__assert_func>
 8009b3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009b40:	6007      	str	r7, [r0, #0]
 8009b42:	60c7      	str	r7, [r0, #12]
 8009b44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009b48:	6819      	ldr	r1, [r3, #0]
 8009b4a:	b159      	cbz	r1, 8009b64 <_dtoa_r+0x5c>
 8009b4c:	685a      	ldr	r2, [r3, #4]
 8009b4e:	604a      	str	r2, [r1, #4]
 8009b50:	2301      	movs	r3, #1
 8009b52:	4093      	lsls	r3, r2
 8009b54:	608b      	str	r3, [r1, #8]
 8009b56:	4658      	mov	r0, fp
 8009b58:	f000 feda 	bl	800a910 <_Bfree>
 8009b5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009b60:	2200      	movs	r2, #0
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	1e2b      	subs	r3, r5, #0
 8009b66:	bfb9      	ittee	lt
 8009b68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009b6c:	9303      	strlt	r3, [sp, #12]
 8009b6e:	2300      	movge	r3, #0
 8009b70:	6033      	strge	r3, [r6, #0]
 8009b72:	9f03      	ldr	r7, [sp, #12]
 8009b74:	4b98      	ldr	r3, [pc, #608]	@ (8009dd8 <_dtoa_r+0x2d0>)
 8009b76:	bfbc      	itt	lt
 8009b78:	2201      	movlt	r2, #1
 8009b7a:	6032      	strlt	r2, [r6, #0]
 8009b7c:	43bb      	bics	r3, r7
 8009b7e:	d112      	bne.n	8009ba6 <_dtoa_r+0x9e>
 8009b80:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009b82:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009b86:	6013      	str	r3, [r2, #0]
 8009b88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009b8c:	4323      	orrs	r3, r4
 8009b8e:	f000 854d 	beq.w	800a62c <_dtoa_r+0xb24>
 8009b92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b94:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009dec <_dtoa_r+0x2e4>
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f000 854f 	beq.w	800a63c <_dtoa_r+0xb34>
 8009b9e:	f10a 0303 	add.w	r3, sl, #3
 8009ba2:	f000 bd49 	b.w	800a638 <_dtoa_r+0xb30>
 8009ba6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009baa:	2200      	movs	r2, #0
 8009bac:	ec51 0b17 	vmov	r0, r1, d7
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009bb6:	f7f6 ffaf 	bl	8000b18 <__aeabi_dcmpeq>
 8009bba:	4680      	mov	r8, r0
 8009bbc:	b158      	cbz	r0, 8009bd6 <_dtoa_r+0xce>
 8009bbe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	6013      	str	r3, [r2, #0]
 8009bc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009bc6:	b113      	cbz	r3, 8009bce <_dtoa_r+0xc6>
 8009bc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009bca:	4b84      	ldr	r3, [pc, #528]	@ (8009ddc <_dtoa_r+0x2d4>)
 8009bcc:	6013      	str	r3, [r2, #0]
 8009bce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009df0 <_dtoa_r+0x2e8>
 8009bd2:	f000 bd33 	b.w	800a63c <_dtoa_r+0xb34>
 8009bd6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009bda:	aa16      	add	r2, sp, #88	@ 0x58
 8009bdc:	a917      	add	r1, sp, #92	@ 0x5c
 8009bde:	4658      	mov	r0, fp
 8009be0:	f001 fa3a 	bl	800b058 <__d2b>
 8009be4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009be8:	4681      	mov	r9, r0
 8009bea:	2e00      	cmp	r6, #0
 8009bec:	d077      	beq.n	8009cde <_dtoa_r+0x1d6>
 8009bee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bf0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009bf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bfc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009c00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009c04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009c08:	4619      	mov	r1, r3
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	4b74      	ldr	r3, [pc, #464]	@ (8009de0 <_dtoa_r+0x2d8>)
 8009c0e:	f7f6 fb63 	bl	80002d8 <__aeabi_dsub>
 8009c12:	a369      	add	r3, pc, #420	@ (adr r3, 8009db8 <_dtoa_r+0x2b0>)
 8009c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c18:	f7f6 fd16 	bl	8000648 <__aeabi_dmul>
 8009c1c:	a368      	add	r3, pc, #416	@ (adr r3, 8009dc0 <_dtoa_r+0x2b8>)
 8009c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c22:	f7f6 fb5b 	bl	80002dc <__adddf3>
 8009c26:	4604      	mov	r4, r0
 8009c28:	4630      	mov	r0, r6
 8009c2a:	460d      	mov	r5, r1
 8009c2c:	f7f6 fca2 	bl	8000574 <__aeabi_i2d>
 8009c30:	a365      	add	r3, pc, #404	@ (adr r3, 8009dc8 <_dtoa_r+0x2c0>)
 8009c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c36:	f7f6 fd07 	bl	8000648 <__aeabi_dmul>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	4620      	mov	r0, r4
 8009c40:	4629      	mov	r1, r5
 8009c42:	f7f6 fb4b 	bl	80002dc <__adddf3>
 8009c46:	4604      	mov	r4, r0
 8009c48:	460d      	mov	r5, r1
 8009c4a:	f7f6 ffad 	bl	8000ba8 <__aeabi_d2iz>
 8009c4e:	2200      	movs	r2, #0
 8009c50:	4607      	mov	r7, r0
 8009c52:	2300      	movs	r3, #0
 8009c54:	4620      	mov	r0, r4
 8009c56:	4629      	mov	r1, r5
 8009c58:	f7f6 ff68 	bl	8000b2c <__aeabi_dcmplt>
 8009c5c:	b140      	cbz	r0, 8009c70 <_dtoa_r+0x168>
 8009c5e:	4638      	mov	r0, r7
 8009c60:	f7f6 fc88 	bl	8000574 <__aeabi_i2d>
 8009c64:	4622      	mov	r2, r4
 8009c66:	462b      	mov	r3, r5
 8009c68:	f7f6 ff56 	bl	8000b18 <__aeabi_dcmpeq>
 8009c6c:	b900      	cbnz	r0, 8009c70 <_dtoa_r+0x168>
 8009c6e:	3f01      	subs	r7, #1
 8009c70:	2f16      	cmp	r7, #22
 8009c72:	d851      	bhi.n	8009d18 <_dtoa_r+0x210>
 8009c74:	4b5b      	ldr	r3, [pc, #364]	@ (8009de4 <_dtoa_r+0x2dc>)
 8009c76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c82:	f7f6 ff53 	bl	8000b2c <__aeabi_dcmplt>
 8009c86:	2800      	cmp	r0, #0
 8009c88:	d048      	beq.n	8009d1c <_dtoa_r+0x214>
 8009c8a:	3f01      	subs	r7, #1
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009c90:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009c92:	1b9b      	subs	r3, r3, r6
 8009c94:	1e5a      	subs	r2, r3, #1
 8009c96:	bf44      	itt	mi
 8009c98:	f1c3 0801 	rsbmi	r8, r3, #1
 8009c9c:	2300      	movmi	r3, #0
 8009c9e:	9208      	str	r2, [sp, #32]
 8009ca0:	bf54      	ite	pl
 8009ca2:	f04f 0800 	movpl.w	r8, #0
 8009ca6:	9308      	strmi	r3, [sp, #32]
 8009ca8:	2f00      	cmp	r7, #0
 8009caa:	db39      	blt.n	8009d20 <_dtoa_r+0x218>
 8009cac:	9b08      	ldr	r3, [sp, #32]
 8009cae:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009cb0:	443b      	add	r3, r7
 8009cb2:	9308      	str	r3, [sp, #32]
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cba:	2b09      	cmp	r3, #9
 8009cbc:	d864      	bhi.n	8009d88 <_dtoa_r+0x280>
 8009cbe:	2b05      	cmp	r3, #5
 8009cc0:	bfc4      	itt	gt
 8009cc2:	3b04      	subgt	r3, #4
 8009cc4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cc8:	f1a3 0302 	sub.w	r3, r3, #2
 8009ccc:	bfcc      	ite	gt
 8009cce:	2400      	movgt	r4, #0
 8009cd0:	2401      	movle	r4, #1
 8009cd2:	2b03      	cmp	r3, #3
 8009cd4:	d863      	bhi.n	8009d9e <_dtoa_r+0x296>
 8009cd6:	e8df f003 	tbb	[pc, r3]
 8009cda:	372a      	.short	0x372a
 8009cdc:	5535      	.short	0x5535
 8009cde:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009ce2:	441e      	add	r6, r3
 8009ce4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009ce8:	2b20      	cmp	r3, #32
 8009cea:	bfc1      	itttt	gt
 8009cec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009cf0:	409f      	lslgt	r7, r3
 8009cf2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009cf6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009cfa:	bfd6      	itet	le
 8009cfc:	f1c3 0320 	rsble	r3, r3, #32
 8009d00:	ea47 0003 	orrgt.w	r0, r7, r3
 8009d04:	fa04 f003 	lslle.w	r0, r4, r3
 8009d08:	f7f6 fc24 	bl	8000554 <__aeabi_ui2d>
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009d12:	3e01      	subs	r6, #1
 8009d14:	9214      	str	r2, [sp, #80]	@ 0x50
 8009d16:	e777      	b.n	8009c08 <_dtoa_r+0x100>
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e7b8      	b.n	8009c8e <_dtoa_r+0x186>
 8009d1c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009d1e:	e7b7      	b.n	8009c90 <_dtoa_r+0x188>
 8009d20:	427b      	negs	r3, r7
 8009d22:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d24:	2300      	movs	r3, #0
 8009d26:	eba8 0807 	sub.w	r8, r8, r7
 8009d2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d2c:	e7c4      	b.n	8009cb8 <_dtoa_r+0x1b0>
 8009d2e:	2300      	movs	r3, #0
 8009d30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	dc35      	bgt.n	8009da4 <_dtoa_r+0x29c>
 8009d38:	2301      	movs	r3, #1
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	9307      	str	r3, [sp, #28]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d42:	e00b      	b.n	8009d5c <_dtoa_r+0x254>
 8009d44:	2301      	movs	r3, #1
 8009d46:	e7f3      	b.n	8009d30 <_dtoa_r+0x228>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d4e:	18fb      	adds	r3, r7, r3
 8009d50:	9300      	str	r3, [sp, #0]
 8009d52:	3301      	adds	r3, #1
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	9307      	str	r3, [sp, #28]
 8009d58:	bfb8      	it	lt
 8009d5a:	2301      	movlt	r3, #1
 8009d5c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009d60:	2100      	movs	r1, #0
 8009d62:	2204      	movs	r2, #4
 8009d64:	f102 0514 	add.w	r5, r2, #20
 8009d68:	429d      	cmp	r5, r3
 8009d6a:	d91f      	bls.n	8009dac <_dtoa_r+0x2a4>
 8009d6c:	6041      	str	r1, [r0, #4]
 8009d6e:	4658      	mov	r0, fp
 8009d70:	f000 fd8e 	bl	800a890 <_Balloc>
 8009d74:	4682      	mov	sl, r0
 8009d76:	2800      	cmp	r0, #0
 8009d78:	d13c      	bne.n	8009df4 <_dtoa_r+0x2ec>
 8009d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8009de8 <_dtoa_r+0x2e0>)
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009d82:	e6d8      	b.n	8009b36 <_dtoa_r+0x2e>
 8009d84:	2301      	movs	r3, #1
 8009d86:	e7e0      	b.n	8009d4a <_dtoa_r+0x242>
 8009d88:	2401      	movs	r4, #1
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d8e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009d90:	f04f 33ff 	mov.w	r3, #4294967295
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	9307      	str	r3, [sp, #28]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	2312      	movs	r3, #18
 8009d9c:	e7d0      	b.n	8009d40 <_dtoa_r+0x238>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009da2:	e7f5      	b.n	8009d90 <_dtoa_r+0x288>
 8009da4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	9307      	str	r3, [sp, #28]
 8009daa:	e7d7      	b.n	8009d5c <_dtoa_r+0x254>
 8009dac:	3101      	adds	r1, #1
 8009dae:	0052      	lsls	r2, r2, #1
 8009db0:	e7d8      	b.n	8009d64 <_dtoa_r+0x25c>
 8009db2:	bf00      	nop
 8009db4:	f3af 8000 	nop.w
 8009db8:	636f4361 	.word	0x636f4361
 8009dbc:	3fd287a7 	.word	0x3fd287a7
 8009dc0:	8b60c8b3 	.word	0x8b60c8b3
 8009dc4:	3fc68a28 	.word	0x3fc68a28
 8009dc8:	509f79fb 	.word	0x509f79fb
 8009dcc:	3fd34413 	.word	0x3fd34413
 8009dd0:	0800d18a 	.word	0x0800d18a
 8009dd4:	0800d1a1 	.word	0x0800d1a1
 8009dd8:	7ff00000 	.word	0x7ff00000
 8009ddc:	0800d155 	.word	0x0800d155
 8009de0:	3ff80000 	.word	0x3ff80000
 8009de4:	0800d298 	.word	0x0800d298
 8009de8:	0800d1f9 	.word	0x0800d1f9
 8009dec:	0800d186 	.word	0x0800d186
 8009df0:	0800d154 	.word	0x0800d154
 8009df4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009df8:	6018      	str	r0, [r3, #0]
 8009dfa:	9b07      	ldr	r3, [sp, #28]
 8009dfc:	2b0e      	cmp	r3, #14
 8009dfe:	f200 80a4 	bhi.w	8009f4a <_dtoa_r+0x442>
 8009e02:	2c00      	cmp	r4, #0
 8009e04:	f000 80a1 	beq.w	8009f4a <_dtoa_r+0x442>
 8009e08:	2f00      	cmp	r7, #0
 8009e0a:	dd33      	ble.n	8009e74 <_dtoa_r+0x36c>
 8009e0c:	4bad      	ldr	r3, [pc, #692]	@ (800a0c4 <_dtoa_r+0x5bc>)
 8009e0e:	f007 020f 	and.w	r2, r7, #15
 8009e12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e16:	ed93 7b00 	vldr	d7, [r3]
 8009e1a:	05f8      	lsls	r0, r7, #23
 8009e1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009e20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009e24:	d516      	bpl.n	8009e54 <_dtoa_r+0x34c>
 8009e26:	4ba8      	ldr	r3, [pc, #672]	@ (800a0c8 <_dtoa_r+0x5c0>)
 8009e28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e30:	f7f6 fd34 	bl	800089c <__aeabi_ddiv>
 8009e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e38:	f004 040f 	and.w	r4, r4, #15
 8009e3c:	2603      	movs	r6, #3
 8009e3e:	4da2      	ldr	r5, [pc, #648]	@ (800a0c8 <_dtoa_r+0x5c0>)
 8009e40:	b954      	cbnz	r4, 8009e58 <_dtoa_r+0x350>
 8009e42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e4a:	f7f6 fd27 	bl	800089c <__aeabi_ddiv>
 8009e4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e52:	e028      	b.n	8009ea6 <_dtoa_r+0x39e>
 8009e54:	2602      	movs	r6, #2
 8009e56:	e7f2      	b.n	8009e3e <_dtoa_r+0x336>
 8009e58:	07e1      	lsls	r1, r4, #31
 8009e5a:	d508      	bpl.n	8009e6e <_dtoa_r+0x366>
 8009e5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e64:	f7f6 fbf0 	bl	8000648 <__aeabi_dmul>
 8009e68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e6c:	3601      	adds	r6, #1
 8009e6e:	1064      	asrs	r4, r4, #1
 8009e70:	3508      	adds	r5, #8
 8009e72:	e7e5      	b.n	8009e40 <_dtoa_r+0x338>
 8009e74:	f000 80d2 	beq.w	800a01c <_dtoa_r+0x514>
 8009e78:	427c      	negs	r4, r7
 8009e7a:	4b92      	ldr	r3, [pc, #584]	@ (800a0c4 <_dtoa_r+0x5bc>)
 8009e7c:	4d92      	ldr	r5, [pc, #584]	@ (800a0c8 <_dtoa_r+0x5c0>)
 8009e7e:	f004 020f 	and.w	r2, r4, #15
 8009e82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e8e:	f7f6 fbdb 	bl	8000648 <__aeabi_dmul>
 8009e92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e96:	1124      	asrs	r4, r4, #4
 8009e98:	2300      	movs	r3, #0
 8009e9a:	2602      	movs	r6, #2
 8009e9c:	2c00      	cmp	r4, #0
 8009e9e:	f040 80b2 	bne.w	800a006 <_dtoa_r+0x4fe>
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1d3      	bne.n	8009e4e <_dtoa_r+0x346>
 8009ea6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ea8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f000 80b7 	beq.w	800a020 <_dtoa_r+0x518>
 8009eb2:	4b86      	ldr	r3, [pc, #536]	@ (800a0cc <_dtoa_r+0x5c4>)
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	4629      	mov	r1, r5
 8009eba:	f7f6 fe37 	bl	8000b2c <__aeabi_dcmplt>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	f000 80ae 	beq.w	800a020 <_dtoa_r+0x518>
 8009ec4:	9b07      	ldr	r3, [sp, #28]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	f000 80aa 	beq.w	800a020 <_dtoa_r+0x518>
 8009ecc:	9b00      	ldr	r3, [sp, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	dd37      	ble.n	8009f42 <_dtoa_r+0x43a>
 8009ed2:	1e7b      	subs	r3, r7, #1
 8009ed4:	9304      	str	r3, [sp, #16]
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	4b7d      	ldr	r3, [pc, #500]	@ (800a0d0 <_dtoa_r+0x5c8>)
 8009eda:	2200      	movs	r2, #0
 8009edc:	4629      	mov	r1, r5
 8009ede:	f7f6 fbb3 	bl	8000648 <__aeabi_dmul>
 8009ee2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ee6:	9c00      	ldr	r4, [sp, #0]
 8009ee8:	3601      	adds	r6, #1
 8009eea:	4630      	mov	r0, r6
 8009eec:	f7f6 fb42 	bl	8000574 <__aeabi_i2d>
 8009ef0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ef4:	f7f6 fba8 	bl	8000648 <__aeabi_dmul>
 8009ef8:	4b76      	ldr	r3, [pc, #472]	@ (800a0d4 <_dtoa_r+0x5cc>)
 8009efa:	2200      	movs	r2, #0
 8009efc:	f7f6 f9ee 	bl	80002dc <__adddf3>
 8009f00:	4605      	mov	r5, r0
 8009f02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009f06:	2c00      	cmp	r4, #0
 8009f08:	f040 808d 	bne.w	800a026 <_dtoa_r+0x51e>
 8009f0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f10:	4b71      	ldr	r3, [pc, #452]	@ (800a0d8 <_dtoa_r+0x5d0>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	f7f6 f9e0 	bl	80002d8 <__aeabi_dsub>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f20:	462a      	mov	r2, r5
 8009f22:	4633      	mov	r3, r6
 8009f24:	f7f6 fe20 	bl	8000b68 <__aeabi_dcmpgt>
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	f040 828b 	bne.w	800a444 <_dtoa_r+0x93c>
 8009f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f32:	462a      	mov	r2, r5
 8009f34:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009f38:	f7f6 fdf8 	bl	8000b2c <__aeabi_dcmplt>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	f040 8128 	bne.w	800a192 <_dtoa_r+0x68a>
 8009f42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009f46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009f4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f2c0 815a 	blt.w	800a206 <_dtoa_r+0x6fe>
 8009f52:	2f0e      	cmp	r7, #14
 8009f54:	f300 8157 	bgt.w	800a206 <_dtoa_r+0x6fe>
 8009f58:	4b5a      	ldr	r3, [pc, #360]	@ (800a0c4 <_dtoa_r+0x5bc>)
 8009f5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009f5e:	ed93 7b00 	vldr	d7, [r3]
 8009f62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	ed8d 7b00 	vstr	d7, [sp]
 8009f6a:	da03      	bge.n	8009f74 <_dtoa_r+0x46c>
 8009f6c:	9b07      	ldr	r3, [sp, #28]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f340 8101 	ble.w	800a176 <_dtoa_r+0x66e>
 8009f74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009f78:	4656      	mov	r6, sl
 8009f7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f7e:	4620      	mov	r0, r4
 8009f80:	4629      	mov	r1, r5
 8009f82:	f7f6 fc8b 	bl	800089c <__aeabi_ddiv>
 8009f86:	f7f6 fe0f 	bl	8000ba8 <__aeabi_d2iz>
 8009f8a:	4680      	mov	r8, r0
 8009f8c:	f7f6 faf2 	bl	8000574 <__aeabi_i2d>
 8009f90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f94:	f7f6 fb58 	bl	8000648 <__aeabi_dmul>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009fa4:	f7f6 f998 	bl	80002d8 <__aeabi_dsub>
 8009fa8:	f806 4b01 	strb.w	r4, [r6], #1
 8009fac:	9d07      	ldr	r5, [sp, #28]
 8009fae:	eba6 040a 	sub.w	r4, r6, sl
 8009fb2:	42a5      	cmp	r5, r4
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	f040 8117 	bne.w	800a1ea <_dtoa_r+0x6e2>
 8009fbc:	f7f6 f98e 	bl	80002dc <__adddf3>
 8009fc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	460d      	mov	r5, r1
 8009fc8:	f7f6 fdce 	bl	8000b68 <__aeabi_dcmpgt>
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	f040 80f9 	bne.w	800a1c4 <_dtoa_r+0x6bc>
 8009fd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	4629      	mov	r1, r5
 8009fda:	f7f6 fd9d 	bl	8000b18 <__aeabi_dcmpeq>
 8009fde:	b118      	cbz	r0, 8009fe8 <_dtoa_r+0x4e0>
 8009fe0:	f018 0f01 	tst.w	r8, #1
 8009fe4:	f040 80ee 	bne.w	800a1c4 <_dtoa_r+0x6bc>
 8009fe8:	4649      	mov	r1, r9
 8009fea:	4658      	mov	r0, fp
 8009fec:	f000 fc90 	bl	800a910 <_Bfree>
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	7033      	strb	r3, [r6, #0]
 8009ff4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ff6:	3701      	adds	r7, #1
 8009ff8:	601f      	str	r7, [r3, #0]
 8009ffa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f000 831d 	beq.w	800a63c <_dtoa_r+0xb34>
 800a002:	601e      	str	r6, [r3, #0]
 800a004:	e31a      	b.n	800a63c <_dtoa_r+0xb34>
 800a006:	07e2      	lsls	r2, r4, #31
 800a008:	d505      	bpl.n	800a016 <_dtoa_r+0x50e>
 800a00a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a00e:	f7f6 fb1b 	bl	8000648 <__aeabi_dmul>
 800a012:	3601      	adds	r6, #1
 800a014:	2301      	movs	r3, #1
 800a016:	1064      	asrs	r4, r4, #1
 800a018:	3508      	adds	r5, #8
 800a01a:	e73f      	b.n	8009e9c <_dtoa_r+0x394>
 800a01c:	2602      	movs	r6, #2
 800a01e:	e742      	b.n	8009ea6 <_dtoa_r+0x39e>
 800a020:	9c07      	ldr	r4, [sp, #28]
 800a022:	9704      	str	r7, [sp, #16]
 800a024:	e761      	b.n	8009eea <_dtoa_r+0x3e2>
 800a026:	4b27      	ldr	r3, [pc, #156]	@ (800a0c4 <_dtoa_r+0x5bc>)
 800a028:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a02a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a02e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a032:	4454      	add	r4, sl
 800a034:	2900      	cmp	r1, #0
 800a036:	d053      	beq.n	800a0e0 <_dtoa_r+0x5d8>
 800a038:	4928      	ldr	r1, [pc, #160]	@ (800a0dc <_dtoa_r+0x5d4>)
 800a03a:	2000      	movs	r0, #0
 800a03c:	f7f6 fc2e 	bl	800089c <__aeabi_ddiv>
 800a040:	4633      	mov	r3, r6
 800a042:	462a      	mov	r2, r5
 800a044:	f7f6 f948 	bl	80002d8 <__aeabi_dsub>
 800a048:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a04c:	4656      	mov	r6, sl
 800a04e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a052:	f7f6 fda9 	bl	8000ba8 <__aeabi_d2iz>
 800a056:	4605      	mov	r5, r0
 800a058:	f7f6 fa8c 	bl	8000574 <__aeabi_i2d>
 800a05c:	4602      	mov	r2, r0
 800a05e:	460b      	mov	r3, r1
 800a060:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a064:	f7f6 f938 	bl	80002d8 <__aeabi_dsub>
 800a068:	3530      	adds	r5, #48	@ 0x30
 800a06a:	4602      	mov	r2, r0
 800a06c:	460b      	mov	r3, r1
 800a06e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a072:	f806 5b01 	strb.w	r5, [r6], #1
 800a076:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a07a:	f7f6 fd57 	bl	8000b2c <__aeabi_dcmplt>
 800a07e:	2800      	cmp	r0, #0
 800a080:	d171      	bne.n	800a166 <_dtoa_r+0x65e>
 800a082:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a086:	4911      	ldr	r1, [pc, #68]	@ (800a0cc <_dtoa_r+0x5c4>)
 800a088:	2000      	movs	r0, #0
 800a08a:	f7f6 f925 	bl	80002d8 <__aeabi_dsub>
 800a08e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a092:	f7f6 fd4b 	bl	8000b2c <__aeabi_dcmplt>
 800a096:	2800      	cmp	r0, #0
 800a098:	f040 8095 	bne.w	800a1c6 <_dtoa_r+0x6be>
 800a09c:	42a6      	cmp	r6, r4
 800a09e:	f43f af50 	beq.w	8009f42 <_dtoa_r+0x43a>
 800a0a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a0a6:	4b0a      	ldr	r3, [pc, #40]	@ (800a0d0 <_dtoa_r+0x5c8>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f7f6 facd 	bl	8000648 <__aeabi_dmul>
 800a0ae:	4b08      	ldr	r3, [pc, #32]	@ (800a0d0 <_dtoa_r+0x5c8>)
 800a0b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0ba:	f7f6 fac5 	bl	8000648 <__aeabi_dmul>
 800a0be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0c2:	e7c4      	b.n	800a04e <_dtoa_r+0x546>
 800a0c4:	0800d298 	.word	0x0800d298
 800a0c8:	0800d270 	.word	0x0800d270
 800a0cc:	3ff00000 	.word	0x3ff00000
 800a0d0:	40240000 	.word	0x40240000
 800a0d4:	401c0000 	.word	0x401c0000
 800a0d8:	40140000 	.word	0x40140000
 800a0dc:	3fe00000 	.word	0x3fe00000
 800a0e0:	4631      	mov	r1, r6
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	f7f6 fab0 	bl	8000648 <__aeabi_dmul>
 800a0e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a0ec:	9415      	str	r4, [sp, #84]	@ 0x54
 800a0ee:	4656      	mov	r6, sl
 800a0f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0f4:	f7f6 fd58 	bl	8000ba8 <__aeabi_d2iz>
 800a0f8:	4605      	mov	r5, r0
 800a0fa:	f7f6 fa3b 	bl	8000574 <__aeabi_i2d>
 800a0fe:	4602      	mov	r2, r0
 800a100:	460b      	mov	r3, r1
 800a102:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a106:	f7f6 f8e7 	bl	80002d8 <__aeabi_dsub>
 800a10a:	3530      	adds	r5, #48	@ 0x30
 800a10c:	f806 5b01 	strb.w	r5, [r6], #1
 800a110:	4602      	mov	r2, r0
 800a112:	460b      	mov	r3, r1
 800a114:	42a6      	cmp	r6, r4
 800a116:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a11a:	f04f 0200 	mov.w	r2, #0
 800a11e:	d124      	bne.n	800a16a <_dtoa_r+0x662>
 800a120:	4bac      	ldr	r3, [pc, #688]	@ (800a3d4 <_dtoa_r+0x8cc>)
 800a122:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a126:	f7f6 f8d9 	bl	80002dc <__adddf3>
 800a12a:	4602      	mov	r2, r0
 800a12c:	460b      	mov	r3, r1
 800a12e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a132:	f7f6 fd19 	bl	8000b68 <__aeabi_dcmpgt>
 800a136:	2800      	cmp	r0, #0
 800a138:	d145      	bne.n	800a1c6 <_dtoa_r+0x6be>
 800a13a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a13e:	49a5      	ldr	r1, [pc, #660]	@ (800a3d4 <_dtoa_r+0x8cc>)
 800a140:	2000      	movs	r0, #0
 800a142:	f7f6 f8c9 	bl	80002d8 <__aeabi_dsub>
 800a146:	4602      	mov	r2, r0
 800a148:	460b      	mov	r3, r1
 800a14a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a14e:	f7f6 fced 	bl	8000b2c <__aeabi_dcmplt>
 800a152:	2800      	cmp	r0, #0
 800a154:	f43f aef5 	beq.w	8009f42 <_dtoa_r+0x43a>
 800a158:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a15a:	1e73      	subs	r3, r6, #1
 800a15c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a15e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a162:	2b30      	cmp	r3, #48	@ 0x30
 800a164:	d0f8      	beq.n	800a158 <_dtoa_r+0x650>
 800a166:	9f04      	ldr	r7, [sp, #16]
 800a168:	e73e      	b.n	8009fe8 <_dtoa_r+0x4e0>
 800a16a:	4b9b      	ldr	r3, [pc, #620]	@ (800a3d8 <_dtoa_r+0x8d0>)
 800a16c:	f7f6 fa6c 	bl	8000648 <__aeabi_dmul>
 800a170:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a174:	e7bc      	b.n	800a0f0 <_dtoa_r+0x5e8>
 800a176:	d10c      	bne.n	800a192 <_dtoa_r+0x68a>
 800a178:	4b98      	ldr	r3, [pc, #608]	@ (800a3dc <_dtoa_r+0x8d4>)
 800a17a:	2200      	movs	r2, #0
 800a17c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a180:	f7f6 fa62 	bl	8000648 <__aeabi_dmul>
 800a184:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a188:	f7f6 fce4 	bl	8000b54 <__aeabi_dcmpge>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	f000 8157 	beq.w	800a440 <_dtoa_r+0x938>
 800a192:	2400      	movs	r4, #0
 800a194:	4625      	mov	r5, r4
 800a196:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a198:	43db      	mvns	r3, r3
 800a19a:	9304      	str	r3, [sp, #16]
 800a19c:	4656      	mov	r6, sl
 800a19e:	2700      	movs	r7, #0
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	4658      	mov	r0, fp
 800a1a4:	f000 fbb4 	bl	800a910 <_Bfree>
 800a1a8:	2d00      	cmp	r5, #0
 800a1aa:	d0dc      	beq.n	800a166 <_dtoa_r+0x65e>
 800a1ac:	b12f      	cbz	r7, 800a1ba <_dtoa_r+0x6b2>
 800a1ae:	42af      	cmp	r7, r5
 800a1b0:	d003      	beq.n	800a1ba <_dtoa_r+0x6b2>
 800a1b2:	4639      	mov	r1, r7
 800a1b4:	4658      	mov	r0, fp
 800a1b6:	f000 fbab 	bl	800a910 <_Bfree>
 800a1ba:	4629      	mov	r1, r5
 800a1bc:	4658      	mov	r0, fp
 800a1be:	f000 fba7 	bl	800a910 <_Bfree>
 800a1c2:	e7d0      	b.n	800a166 <_dtoa_r+0x65e>
 800a1c4:	9704      	str	r7, [sp, #16]
 800a1c6:	4633      	mov	r3, r6
 800a1c8:	461e      	mov	r6, r3
 800a1ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1ce:	2a39      	cmp	r2, #57	@ 0x39
 800a1d0:	d107      	bne.n	800a1e2 <_dtoa_r+0x6da>
 800a1d2:	459a      	cmp	sl, r3
 800a1d4:	d1f8      	bne.n	800a1c8 <_dtoa_r+0x6c0>
 800a1d6:	9a04      	ldr	r2, [sp, #16]
 800a1d8:	3201      	adds	r2, #1
 800a1da:	9204      	str	r2, [sp, #16]
 800a1dc:	2230      	movs	r2, #48	@ 0x30
 800a1de:	f88a 2000 	strb.w	r2, [sl]
 800a1e2:	781a      	ldrb	r2, [r3, #0]
 800a1e4:	3201      	adds	r2, #1
 800a1e6:	701a      	strb	r2, [r3, #0]
 800a1e8:	e7bd      	b.n	800a166 <_dtoa_r+0x65e>
 800a1ea:	4b7b      	ldr	r3, [pc, #492]	@ (800a3d8 <_dtoa_r+0x8d0>)
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f7f6 fa2b 	bl	8000648 <__aeabi_dmul>
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	460d      	mov	r5, r1
 800a1fa:	f7f6 fc8d 	bl	8000b18 <__aeabi_dcmpeq>
 800a1fe:	2800      	cmp	r0, #0
 800a200:	f43f aebb 	beq.w	8009f7a <_dtoa_r+0x472>
 800a204:	e6f0      	b.n	8009fe8 <_dtoa_r+0x4e0>
 800a206:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a208:	2a00      	cmp	r2, #0
 800a20a:	f000 80db 	beq.w	800a3c4 <_dtoa_r+0x8bc>
 800a20e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a210:	2a01      	cmp	r2, #1
 800a212:	f300 80bf 	bgt.w	800a394 <_dtoa_r+0x88c>
 800a216:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a218:	2a00      	cmp	r2, #0
 800a21a:	f000 80b7 	beq.w	800a38c <_dtoa_r+0x884>
 800a21e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a222:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a224:	4646      	mov	r6, r8
 800a226:	9a08      	ldr	r2, [sp, #32]
 800a228:	2101      	movs	r1, #1
 800a22a:	441a      	add	r2, r3
 800a22c:	4658      	mov	r0, fp
 800a22e:	4498      	add	r8, r3
 800a230:	9208      	str	r2, [sp, #32]
 800a232:	f000 fc6b 	bl	800ab0c <__i2b>
 800a236:	4605      	mov	r5, r0
 800a238:	b15e      	cbz	r6, 800a252 <_dtoa_r+0x74a>
 800a23a:	9b08      	ldr	r3, [sp, #32]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	dd08      	ble.n	800a252 <_dtoa_r+0x74a>
 800a240:	42b3      	cmp	r3, r6
 800a242:	9a08      	ldr	r2, [sp, #32]
 800a244:	bfa8      	it	ge
 800a246:	4633      	movge	r3, r6
 800a248:	eba8 0803 	sub.w	r8, r8, r3
 800a24c:	1af6      	subs	r6, r6, r3
 800a24e:	1ad3      	subs	r3, r2, r3
 800a250:	9308      	str	r3, [sp, #32]
 800a252:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a254:	b1f3      	cbz	r3, 800a294 <_dtoa_r+0x78c>
 800a256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 80b7 	beq.w	800a3cc <_dtoa_r+0x8c4>
 800a25e:	b18c      	cbz	r4, 800a284 <_dtoa_r+0x77c>
 800a260:	4629      	mov	r1, r5
 800a262:	4622      	mov	r2, r4
 800a264:	4658      	mov	r0, fp
 800a266:	f000 fd11 	bl	800ac8c <__pow5mult>
 800a26a:	464a      	mov	r2, r9
 800a26c:	4601      	mov	r1, r0
 800a26e:	4605      	mov	r5, r0
 800a270:	4658      	mov	r0, fp
 800a272:	f000 fc61 	bl	800ab38 <__multiply>
 800a276:	4649      	mov	r1, r9
 800a278:	9004      	str	r0, [sp, #16]
 800a27a:	4658      	mov	r0, fp
 800a27c:	f000 fb48 	bl	800a910 <_Bfree>
 800a280:	9b04      	ldr	r3, [sp, #16]
 800a282:	4699      	mov	r9, r3
 800a284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a286:	1b1a      	subs	r2, r3, r4
 800a288:	d004      	beq.n	800a294 <_dtoa_r+0x78c>
 800a28a:	4649      	mov	r1, r9
 800a28c:	4658      	mov	r0, fp
 800a28e:	f000 fcfd 	bl	800ac8c <__pow5mult>
 800a292:	4681      	mov	r9, r0
 800a294:	2101      	movs	r1, #1
 800a296:	4658      	mov	r0, fp
 800a298:	f000 fc38 	bl	800ab0c <__i2b>
 800a29c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a29e:	4604      	mov	r4, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f000 81cf 	beq.w	800a644 <_dtoa_r+0xb3c>
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	4601      	mov	r1, r0
 800a2aa:	4658      	mov	r0, fp
 800a2ac:	f000 fcee 	bl	800ac8c <__pow5mult>
 800a2b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	4604      	mov	r4, r0
 800a2b6:	f300 8095 	bgt.w	800a3e4 <_dtoa_r+0x8dc>
 800a2ba:	9b02      	ldr	r3, [sp, #8]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f040 8087 	bne.w	800a3d0 <_dtoa_r+0x8c8>
 800a2c2:	9b03      	ldr	r3, [sp, #12]
 800a2c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f040 8089 	bne.w	800a3e0 <_dtoa_r+0x8d8>
 800a2ce:	9b03      	ldr	r3, [sp, #12]
 800a2d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a2d4:	0d1b      	lsrs	r3, r3, #20
 800a2d6:	051b      	lsls	r3, r3, #20
 800a2d8:	b12b      	cbz	r3, 800a2e6 <_dtoa_r+0x7de>
 800a2da:	9b08      	ldr	r3, [sp, #32]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	9308      	str	r3, [sp, #32]
 800a2e0:	f108 0801 	add.w	r8, r8, #1
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f000 81b0 	beq.w	800a650 <_dtoa_r+0xb48>
 800a2f0:	6923      	ldr	r3, [r4, #16]
 800a2f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a2f6:	6918      	ldr	r0, [r3, #16]
 800a2f8:	f000 fbbc 	bl	800aa74 <__hi0bits>
 800a2fc:	f1c0 0020 	rsb	r0, r0, #32
 800a300:	9b08      	ldr	r3, [sp, #32]
 800a302:	4418      	add	r0, r3
 800a304:	f010 001f 	ands.w	r0, r0, #31
 800a308:	d077      	beq.n	800a3fa <_dtoa_r+0x8f2>
 800a30a:	f1c0 0320 	rsb	r3, r0, #32
 800a30e:	2b04      	cmp	r3, #4
 800a310:	dd6b      	ble.n	800a3ea <_dtoa_r+0x8e2>
 800a312:	9b08      	ldr	r3, [sp, #32]
 800a314:	f1c0 001c 	rsb	r0, r0, #28
 800a318:	4403      	add	r3, r0
 800a31a:	4480      	add	r8, r0
 800a31c:	4406      	add	r6, r0
 800a31e:	9308      	str	r3, [sp, #32]
 800a320:	f1b8 0f00 	cmp.w	r8, #0
 800a324:	dd05      	ble.n	800a332 <_dtoa_r+0x82a>
 800a326:	4649      	mov	r1, r9
 800a328:	4642      	mov	r2, r8
 800a32a:	4658      	mov	r0, fp
 800a32c:	f000 fd08 	bl	800ad40 <__lshift>
 800a330:	4681      	mov	r9, r0
 800a332:	9b08      	ldr	r3, [sp, #32]
 800a334:	2b00      	cmp	r3, #0
 800a336:	dd05      	ble.n	800a344 <_dtoa_r+0x83c>
 800a338:	4621      	mov	r1, r4
 800a33a:	461a      	mov	r2, r3
 800a33c:	4658      	mov	r0, fp
 800a33e:	f000 fcff 	bl	800ad40 <__lshift>
 800a342:	4604      	mov	r4, r0
 800a344:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a346:	2b00      	cmp	r3, #0
 800a348:	d059      	beq.n	800a3fe <_dtoa_r+0x8f6>
 800a34a:	4621      	mov	r1, r4
 800a34c:	4648      	mov	r0, r9
 800a34e:	f000 fd63 	bl	800ae18 <__mcmp>
 800a352:	2800      	cmp	r0, #0
 800a354:	da53      	bge.n	800a3fe <_dtoa_r+0x8f6>
 800a356:	1e7b      	subs	r3, r7, #1
 800a358:	9304      	str	r3, [sp, #16]
 800a35a:	4649      	mov	r1, r9
 800a35c:	2300      	movs	r3, #0
 800a35e:	220a      	movs	r2, #10
 800a360:	4658      	mov	r0, fp
 800a362:	f000 faf7 	bl	800a954 <__multadd>
 800a366:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a368:	4681      	mov	r9, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f000 8172 	beq.w	800a654 <_dtoa_r+0xb4c>
 800a370:	2300      	movs	r3, #0
 800a372:	4629      	mov	r1, r5
 800a374:	220a      	movs	r2, #10
 800a376:	4658      	mov	r0, fp
 800a378:	f000 faec 	bl	800a954 <__multadd>
 800a37c:	9b00      	ldr	r3, [sp, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	4605      	mov	r5, r0
 800a382:	dc67      	bgt.n	800a454 <_dtoa_r+0x94c>
 800a384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a386:	2b02      	cmp	r3, #2
 800a388:	dc41      	bgt.n	800a40e <_dtoa_r+0x906>
 800a38a:	e063      	b.n	800a454 <_dtoa_r+0x94c>
 800a38c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a38e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a392:	e746      	b.n	800a222 <_dtoa_r+0x71a>
 800a394:	9b07      	ldr	r3, [sp, #28]
 800a396:	1e5c      	subs	r4, r3, #1
 800a398:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a39a:	42a3      	cmp	r3, r4
 800a39c:	bfbf      	itttt	lt
 800a39e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a3a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a3a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a3a4:	1ae3      	sublt	r3, r4, r3
 800a3a6:	bfb4      	ite	lt
 800a3a8:	18d2      	addlt	r2, r2, r3
 800a3aa:	1b1c      	subge	r4, r3, r4
 800a3ac:	9b07      	ldr	r3, [sp, #28]
 800a3ae:	bfbc      	itt	lt
 800a3b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a3b2:	2400      	movlt	r4, #0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	bfb5      	itete	lt
 800a3b8:	eba8 0603 	sublt.w	r6, r8, r3
 800a3bc:	9b07      	ldrge	r3, [sp, #28]
 800a3be:	2300      	movlt	r3, #0
 800a3c0:	4646      	movge	r6, r8
 800a3c2:	e730      	b.n	800a226 <_dtoa_r+0x71e>
 800a3c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a3c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a3c8:	4646      	mov	r6, r8
 800a3ca:	e735      	b.n	800a238 <_dtoa_r+0x730>
 800a3cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3ce:	e75c      	b.n	800a28a <_dtoa_r+0x782>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	e788      	b.n	800a2e6 <_dtoa_r+0x7de>
 800a3d4:	3fe00000 	.word	0x3fe00000
 800a3d8:	40240000 	.word	0x40240000
 800a3dc:	40140000 	.word	0x40140000
 800a3e0:	9b02      	ldr	r3, [sp, #8]
 800a3e2:	e780      	b.n	800a2e6 <_dtoa_r+0x7de>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3e8:	e782      	b.n	800a2f0 <_dtoa_r+0x7e8>
 800a3ea:	d099      	beq.n	800a320 <_dtoa_r+0x818>
 800a3ec:	9a08      	ldr	r2, [sp, #32]
 800a3ee:	331c      	adds	r3, #28
 800a3f0:	441a      	add	r2, r3
 800a3f2:	4498      	add	r8, r3
 800a3f4:	441e      	add	r6, r3
 800a3f6:	9208      	str	r2, [sp, #32]
 800a3f8:	e792      	b.n	800a320 <_dtoa_r+0x818>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	e7f6      	b.n	800a3ec <_dtoa_r+0x8e4>
 800a3fe:	9b07      	ldr	r3, [sp, #28]
 800a400:	9704      	str	r7, [sp, #16]
 800a402:	2b00      	cmp	r3, #0
 800a404:	dc20      	bgt.n	800a448 <_dtoa_r+0x940>
 800a406:	9300      	str	r3, [sp, #0]
 800a408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	dd1e      	ble.n	800a44c <_dtoa_r+0x944>
 800a40e:	9b00      	ldr	r3, [sp, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	f47f aec0 	bne.w	800a196 <_dtoa_r+0x68e>
 800a416:	4621      	mov	r1, r4
 800a418:	2205      	movs	r2, #5
 800a41a:	4658      	mov	r0, fp
 800a41c:	f000 fa9a 	bl	800a954 <__multadd>
 800a420:	4601      	mov	r1, r0
 800a422:	4604      	mov	r4, r0
 800a424:	4648      	mov	r0, r9
 800a426:	f000 fcf7 	bl	800ae18 <__mcmp>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	f77f aeb3 	ble.w	800a196 <_dtoa_r+0x68e>
 800a430:	4656      	mov	r6, sl
 800a432:	2331      	movs	r3, #49	@ 0x31
 800a434:	f806 3b01 	strb.w	r3, [r6], #1
 800a438:	9b04      	ldr	r3, [sp, #16]
 800a43a:	3301      	adds	r3, #1
 800a43c:	9304      	str	r3, [sp, #16]
 800a43e:	e6ae      	b.n	800a19e <_dtoa_r+0x696>
 800a440:	9c07      	ldr	r4, [sp, #28]
 800a442:	9704      	str	r7, [sp, #16]
 800a444:	4625      	mov	r5, r4
 800a446:	e7f3      	b.n	800a430 <_dtoa_r+0x928>
 800a448:	9b07      	ldr	r3, [sp, #28]
 800a44a:	9300      	str	r3, [sp, #0]
 800a44c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a44e:	2b00      	cmp	r3, #0
 800a450:	f000 8104 	beq.w	800a65c <_dtoa_r+0xb54>
 800a454:	2e00      	cmp	r6, #0
 800a456:	dd05      	ble.n	800a464 <_dtoa_r+0x95c>
 800a458:	4629      	mov	r1, r5
 800a45a:	4632      	mov	r2, r6
 800a45c:	4658      	mov	r0, fp
 800a45e:	f000 fc6f 	bl	800ad40 <__lshift>
 800a462:	4605      	mov	r5, r0
 800a464:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a466:	2b00      	cmp	r3, #0
 800a468:	d05a      	beq.n	800a520 <_dtoa_r+0xa18>
 800a46a:	6869      	ldr	r1, [r5, #4]
 800a46c:	4658      	mov	r0, fp
 800a46e:	f000 fa0f 	bl	800a890 <_Balloc>
 800a472:	4606      	mov	r6, r0
 800a474:	b928      	cbnz	r0, 800a482 <_dtoa_r+0x97a>
 800a476:	4b84      	ldr	r3, [pc, #528]	@ (800a688 <_dtoa_r+0xb80>)
 800a478:	4602      	mov	r2, r0
 800a47a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a47e:	f7ff bb5a 	b.w	8009b36 <_dtoa_r+0x2e>
 800a482:	692a      	ldr	r2, [r5, #16]
 800a484:	3202      	adds	r2, #2
 800a486:	0092      	lsls	r2, r2, #2
 800a488:	f105 010c 	add.w	r1, r5, #12
 800a48c:	300c      	adds	r0, #12
 800a48e:	f7ff fa9c 	bl	80099ca <memcpy>
 800a492:	2201      	movs	r2, #1
 800a494:	4631      	mov	r1, r6
 800a496:	4658      	mov	r0, fp
 800a498:	f000 fc52 	bl	800ad40 <__lshift>
 800a49c:	f10a 0301 	add.w	r3, sl, #1
 800a4a0:	9307      	str	r3, [sp, #28]
 800a4a2:	9b00      	ldr	r3, [sp, #0]
 800a4a4:	4453      	add	r3, sl
 800a4a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4a8:	9b02      	ldr	r3, [sp, #8]
 800a4aa:	f003 0301 	and.w	r3, r3, #1
 800a4ae:	462f      	mov	r7, r5
 800a4b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4b2:	4605      	mov	r5, r0
 800a4b4:	9b07      	ldr	r3, [sp, #28]
 800a4b6:	4621      	mov	r1, r4
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	4648      	mov	r0, r9
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	f7ff fa99 	bl	80099f4 <quorem>
 800a4c2:	4639      	mov	r1, r7
 800a4c4:	9002      	str	r0, [sp, #8]
 800a4c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a4ca:	4648      	mov	r0, r9
 800a4cc:	f000 fca4 	bl	800ae18 <__mcmp>
 800a4d0:	462a      	mov	r2, r5
 800a4d2:	9008      	str	r0, [sp, #32]
 800a4d4:	4621      	mov	r1, r4
 800a4d6:	4658      	mov	r0, fp
 800a4d8:	f000 fcba 	bl	800ae50 <__mdiff>
 800a4dc:	68c2      	ldr	r2, [r0, #12]
 800a4de:	4606      	mov	r6, r0
 800a4e0:	bb02      	cbnz	r2, 800a524 <_dtoa_r+0xa1c>
 800a4e2:	4601      	mov	r1, r0
 800a4e4:	4648      	mov	r0, r9
 800a4e6:	f000 fc97 	bl	800ae18 <__mcmp>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	4631      	mov	r1, r6
 800a4ee:	4658      	mov	r0, fp
 800a4f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a4f2:	f000 fa0d 	bl	800a910 <_Bfree>
 800a4f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4fa:	9e07      	ldr	r6, [sp, #28]
 800a4fc:	ea43 0102 	orr.w	r1, r3, r2
 800a500:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a502:	4319      	orrs	r1, r3
 800a504:	d110      	bne.n	800a528 <_dtoa_r+0xa20>
 800a506:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a50a:	d029      	beq.n	800a560 <_dtoa_r+0xa58>
 800a50c:	9b08      	ldr	r3, [sp, #32]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	dd02      	ble.n	800a518 <_dtoa_r+0xa10>
 800a512:	9b02      	ldr	r3, [sp, #8]
 800a514:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a518:	9b00      	ldr	r3, [sp, #0]
 800a51a:	f883 8000 	strb.w	r8, [r3]
 800a51e:	e63f      	b.n	800a1a0 <_dtoa_r+0x698>
 800a520:	4628      	mov	r0, r5
 800a522:	e7bb      	b.n	800a49c <_dtoa_r+0x994>
 800a524:	2201      	movs	r2, #1
 800a526:	e7e1      	b.n	800a4ec <_dtoa_r+0x9e4>
 800a528:	9b08      	ldr	r3, [sp, #32]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	db04      	blt.n	800a538 <_dtoa_r+0xa30>
 800a52e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a530:	430b      	orrs	r3, r1
 800a532:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a534:	430b      	orrs	r3, r1
 800a536:	d120      	bne.n	800a57a <_dtoa_r+0xa72>
 800a538:	2a00      	cmp	r2, #0
 800a53a:	dded      	ble.n	800a518 <_dtoa_r+0xa10>
 800a53c:	4649      	mov	r1, r9
 800a53e:	2201      	movs	r2, #1
 800a540:	4658      	mov	r0, fp
 800a542:	f000 fbfd 	bl	800ad40 <__lshift>
 800a546:	4621      	mov	r1, r4
 800a548:	4681      	mov	r9, r0
 800a54a:	f000 fc65 	bl	800ae18 <__mcmp>
 800a54e:	2800      	cmp	r0, #0
 800a550:	dc03      	bgt.n	800a55a <_dtoa_r+0xa52>
 800a552:	d1e1      	bne.n	800a518 <_dtoa_r+0xa10>
 800a554:	f018 0f01 	tst.w	r8, #1
 800a558:	d0de      	beq.n	800a518 <_dtoa_r+0xa10>
 800a55a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a55e:	d1d8      	bne.n	800a512 <_dtoa_r+0xa0a>
 800a560:	9a00      	ldr	r2, [sp, #0]
 800a562:	2339      	movs	r3, #57	@ 0x39
 800a564:	7013      	strb	r3, [r2, #0]
 800a566:	4633      	mov	r3, r6
 800a568:	461e      	mov	r6, r3
 800a56a:	3b01      	subs	r3, #1
 800a56c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a570:	2a39      	cmp	r2, #57	@ 0x39
 800a572:	d052      	beq.n	800a61a <_dtoa_r+0xb12>
 800a574:	3201      	adds	r2, #1
 800a576:	701a      	strb	r2, [r3, #0]
 800a578:	e612      	b.n	800a1a0 <_dtoa_r+0x698>
 800a57a:	2a00      	cmp	r2, #0
 800a57c:	dd07      	ble.n	800a58e <_dtoa_r+0xa86>
 800a57e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a582:	d0ed      	beq.n	800a560 <_dtoa_r+0xa58>
 800a584:	9a00      	ldr	r2, [sp, #0]
 800a586:	f108 0301 	add.w	r3, r8, #1
 800a58a:	7013      	strb	r3, [r2, #0]
 800a58c:	e608      	b.n	800a1a0 <_dtoa_r+0x698>
 800a58e:	9b07      	ldr	r3, [sp, #28]
 800a590:	9a07      	ldr	r2, [sp, #28]
 800a592:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a596:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a598:	4293      	cmp	r3, r2
 800a59a:	d028      	beq.n	800a5ee <_dtoa_r+0xae6>
 800a59c:	4649      	mov	r1, r9
 800a59e:	2300      	movs	r3, #0
 800a5a0:	220a      	movs	r2, #10
 800a5a2:	4658      	mov	r0, fp
 800a5a4:	f000 f9d6 	bl	800a954 <__multadd>
 800a5a8:	42af      	cmp	r7, r5
 800a5aa:	4681      	mov	r9, r0
 800a5ac:	f04f 0300 	mov.w	r3, #0
 800a5b0:	f04f 020a 	mov.w	r2, #10
 800a5b4:	4639      	mov	r1, r7
 800a5b6:	4658      	mov	r0, fp
 800a5b8:	d107      	bne.n	800a5ca <_dtoa_r+0xac2>
 800a5ba:	f000 f9cb 	bl	800a954 <__multadd>
 800a5be:	4607      	mov	r7, r0
 800a5c0:	4605      	mov	r5, r0
 800a5c2:	9b07      	ldr	r3, [sp, #28]
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	9307      	str	r3, [sp, #28]
 800a5c8:	e774      	b.n	800a4b4 <_dtoa_r+0x9ac>
 800a5ca:	f000 f9c3 	bl	800a954 <__multadd>
 800a5ce:	4629      	mov	r1, r5
 800a5d0:	4607      	mov	r7, r0
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	220a      	movs	r2, #10
 800a5d6:	4658      	mov	r0, fp
 800a5d8:	f000 f9bc 	bl	800a954 <__multadd>
 800a5dc:	4605      	mov	r5, r0
 800a5de:	e7f0      	b.n	800a5c2 <_dtoa_r+0xaba>
 800a5e0:	9b00      	ldr	r3, [sp, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	bfcc      	ite	gt
 800a5e6:	461e      	movgt	r6, r3
 800a5e8:	2601      	movle	r6, #1
 800a5ea:	4456      	add	r6, sl
 800a5ec:	2700      	movs	r7, #0
 800a5ee:	4649      	mov	r1, r9
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	4658      	mov	r0, fp
 800a5f4:	f000 fba4 	bl	800ad40 <__lshift>
 800a5f8:	4621      	mov	r1, r4
 800a5fa:	4681      	mov	r9, r0
 800a5fc:	f000 fc0c 	bl	800ae18 <__mcmp>
 800a600:	2800      	cmp	r0, #0
 800a602:	dcb0      	bgt.n	800a566 <_dtoa_r+0xa5e>
 800a604:	d102      	bne.n	800a60c <_dtoa_r+0xb04>
 800a606:	f018 0f01 	tst.w	r8, #1
 800a60a:	d1ac      	bne.n	800a566 <_dtoa_r+0xa5e>
 800a60c:	4633      	mov	r3, r6
 800a60e:	461e      	mov	r6, r3
 800a610:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a614:	2a30      	cmp	r2, #48	@ 0x30
 800a616:	d0fa      	beq.n	800a60e <_dtoa_r+0xb06>
 800a618:	e5c2      	b.n	800a1a0 <_dtoa_r+0x698>
 800a61a:	459a      	cmp	sl, r3
 800a61c:	d1a4      	bne.n	800a568 <_dtoa_r+0xa60>
 800a61e:	9b04      	ldr	r3, [sp, #16]
 800a620:	3301      	adds	r3, #1
 800a622:	9304      	str	r3, [sp, #16]
 800a624:	2331      	movs	r3, #49	@ 0x31
 800a626:	f88a 3000 	strb.w	r3, [sl]
 800a62a:	e5b9      	b.n	800a1a0 <_dtoa_r+0x698>
 800a62c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a62e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a68c <_dtoa_r+0xb84>
 800a632:	b11b      	cbz	r3, 800a63c <_dtoa_r+0xb34>
 800a634:	f10a 0308 	add.w	r3, sl, #8
 800a638:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a63a:	6013      	str	r3, [r2, #0]
 800a63c:	4650      	mov	r0, sl
 800a63e:	b019      	add	sp, #100	@ 0x64
 800a640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a646:	2b01      	cmp	r3, #1
 800a648:	f77f ae37 	ble.w	800a2ba <_dtoa_r+0x7b2>
 800a64c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a64e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a650:	2001      	movs	r0, #1
 800a652:	e655      	b.n	800a300 <_dtoa_r+0x7f8>
 800a654:	9b00      	ldr	r3, [sp, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	f77f aed6 	ble.w	800a408 <_dtoa_r+0x900>
 800a65c:	4656      	mov	r6, sl
 800a65e:	4621      	mov	r1, r4
 800a660:	4648      	mov	r0, r9
 800a662:	f7ff f9c7 	bl	80099f4 <quorem>
 800a666:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a66a:	f806 8b01 	strb.w	r8, [r6], #1
 800a66e:	9b00      	ldr	r3, [sp, #0]
 800a670:	eba6 020a 	sub.w	r2, r6, sl
 800a674:	4293      	cmp	r3, r2
 800a676:	ddb3      	ble.n	800a5e0 <_dtoa_r+0xad8>
 800a678:	4649      	mov	r1, r9
 800a67a:	2300      	movs	r3, #0
 800a67c:	220a      	movs	r2, #10
 800a67e:	4658      	mov	r0, fp
 800a680:	f000 f968 	bl	800a954 <__multadd>
 800a684:	4681      	mov	r9, r0
 800a686:	e7ea      	b.n	800a65e <_dtoa_r+0xb56>
 800a688:	0800d1f9 	.word	0x0800d1f9
 800a68c:	0800d17d 	.word	0x0800d17d

0800a690 <_free_r>:
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	4605      	mov	r5, r0
 800a694:	2900      	cmp	r1, #0
 800a696:	d041      	beq.n	800a71c <_free_r+0x8c>
 800a698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a69c:	1f0c      	subs	r4, r1, #4
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	bfb8      	it	lt
 800a6a2:	18e4      	addlt	r4, r4, r3
 800a6a4:	f000 f8e8 	bl	800a878 <__malloc_lock>
 800a6a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a720 <_free_r+0x90>)
 800a6aa:	6813      	ldr	r3, [r2, #0]
 800a6ac:	b933      	cbnz	r3, 800a6bc <_free_r+0x2c>
 800a6ae:	6063      	str	r3, [r4, #4]
 800a6b0:	6014      	str	r4, [r2, #0]
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6b8:	f000 b8e4 	b.w	800a884 <__malloc_unlock>
 800a6bc:	42a3      	cmp	r3, r4
 800a6be:	d908      	bls.n	800a6d2 <_free_r+0x42>
 800a6c0:	6820      	ldr	r0, [r4, #0]
 800a6c2:	1821      	adds	r1, r4, r0
 800a6c4:	428b      	cmp	r3, r1
 800a6c6:	bf01      	itttt	eq
 800a6c8:	6819      	ldreq	r1, [r3, #0]
 800a6ca:	685b      	ldreq	r3, [r3, #4]
 800a6cc:	1809      	addeq	r1, r1, r0
 800a6ce:	6021      	streq	r1, [r4, #0]
 800a6d0:	e7ed      	b.n	800a6ae <_free_r+0x1e>
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	b10b      	cbz	r3, 800a6dc <_free_r+0x4c>
 800a6d8:	42a3      	cmp	r3, r4
 800a6da:	d9fa      	bls.n	800a6d2 <_free_r+0x42>
 800a6dc:	6811      	ldr	r1, [r2, #0]
 800a6de:	1850      	adds	r0, r2, r1
 800a6e0:	42a0      	cmp	r0, r4
 800a6e2:	d10b      	bne.n	800a6fc <_free_r+0x6c>
 800a6e4:	6820      	ldr	r0, [r4, #0]
 800a6e6:	4401      	add	r1, r0
 800a6e8:	1850      	adds	r0, r2, r1
 800a6ea:	4283      	cmp	r3, r0
 800a6ec:	6011      	str	r1, [r2, #0]
 800a6ee:	d1e0      	bne.n	800a6b2 <_free_r+0x22>
 800a6f0:	6818      	ldr	r0, [r3, #0]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	6053      	str	r3, [r2, #4]
 800a6f6:	4408      	add	r0, r1
 800a6f8:	6010      	str	r0, [r2, #0]
 800a6fa:	e7da      	b.n	800a6b2 <_free_r+0x22>
 800a6fc:	d902      	bls.n	800a704 <_free_r+0x74>
 800a6fe:	230c      	movs	r3, #12
 800a700:	602b      	str	r3, [r5, #0]
 800a702:	e7d6      	b.n	800a6b2 <_free_r+0x22>
 800a704:	6820      	ldr	r0, [r4, #0]
 800a706:	1821      	adds	r1, r4, r0
 800a708:	428b      	cmp	r3, r1
 800a70a:	bf04      	itt	eq
 800a70c:	6819      	ldreq	r1, [r3, #0]
 800a70e:	685b      	ldreq	r3, [r3, #4]
 800a710:	6063      	str	r3, [r4, #4]
 800a712:	bf04      	itt	eq
 800a714:	1809      	addeq	r1, r1, r0
 800a716:	6021      	streq	r1, [r4, #0]
 800a718:	6054      	str	r4, [r2, #4]
 800a71a:	e7ca      	b.n	800a6b2 <_free_r+0x22>
 800a71c:	bd38      	pop	{r3, r4, r5, pc}
 800a71e:	bf00      	nop
 800a720:	20000888 	.word	0x20000888

0800a724 <malloc>:
 800a724:	4b02      	ldr	r3, [pc, #8]	@ (800a730 <malloc+0xc>)
 800a726:	4601      	mov	r1, r0
 800a728:	6818      	ldr	r0, [r3, #0]
 800a72a:	f000 b825 	b.w	800a778 <_malloc_r>
 800a72e:	bf00      	nop
 800a730:	20000014 	.word	0x20000014

0800a734 <sbrk_aligned>:
 800a734:	b570      	push	{r4, r5, r6, lr}
 800a736:	4e0f      	ldr	r6, [pc, #60]	@ (800a774 <sbrk_aligned+0x40>)
 800a738:	460c      	mov	r4, r1
 800a73a:	6831      	ldr	r1, [r6, #0]
 800a73c:	4605      	mov	r5, r0
 800a73e:	b911      	cbnz	r1, 800a746 <sbrk_aligned+0x12>
 800a740:	f001 fe0c 	bl	800c35c <_sbrk_r>
 800a744:	6030      	str	r0, [r6, #0]
 800a746:	4621      	mov	r1, r4
 800a748:	4628      	mov	r0, r5
 800a74a:	f001 fe07 	bl	800c35c <_sbrk_r>
 800a74e:	1c43      	adds	r3, r0, #1
 800a750:	d103      	bne.n	800a75a <sbrk_aligned+0x26>
 800a752:	f04f 34ff 	mov.w	r4, #4294967295
 800a756:	4620      	mov	r0, r4
 800a758:	bd70      	pop	{r4, r5, r6, pc}
 800a75a:	1cc4      	adds	r4, r0, #3
 800a75c:	f024 0403 	bic.w	r4, r4, #3
 800a760:	42a0      	cmp	r0, r4
 800a762:	d0f8      	beq.n	800a756 <sbrk_aligned+0x22>
 800a764:	1a21      	subs	r1, r4, r0
 800a766:	4628      	mov	r0, r5
 800a768:	f001 fdf8 	bl	800c35c <_sbrk_r>
 800a76c:	3001      	adds	r0, #1
 800a76e:	d1f2      	bne.n	800a756 <sbrk_aligned+0x22>
 800a770:	e7ef      	b.n	800a752 <sbrk_aligned+0x1e>
 800a772:	bf00      	nop
 800a774:	20000884 	.word	0x20000884

0800a778 <_malloc_r>:
 800a778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a77c:	1ccd      	adds	r5, r1, #3
 800a77e:	f025 0503 	bic.w	r5, r5, #3
 800a782:	3508      	adds	r5, #8
 800a784:	2d0c      	cmp	r5, #12
 800a786:	bf38      	it	cc
 800a788:	250c      	movcc	r5, #12
 800a78a:	2d00      	cmp	r5, #0
 800a78c:	4606      	mov	r6, r0
 800a78e:	db01      	blt.n	800a794 <_malloc_r+0x1c>
 800a790:	42a9      	cmp	r1, r5
 800a792:	d904      	bls.n	800a79e <_malloc_r+0x26>
 800a794:	230c      	movs	r3, #12
 800a796:	6033      	str	r3, [r6, #0]
 800a798:	2000      	movs	r0, #0
 800a79a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a79e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a874 <_malloc_r+0xfc>
 800a7a2:	f000 f869 	bl	800a878 <__malloc_lock>
 800a7a6:	f8d8 3000 	ldr.w	r3, [r8]
 800a7aa:	461c      	mov	r4, r3
 800a7ac:	bb44      	cbnz	r4, 800a800 <_malloc_r+0x88>
 800a7ae:	4629      	mov	r1, r5
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	f7ff ffbf 	bl	800a734 <sbrk_aligned>
 800a7b6:	1c43      	adds	r3, r0, #1
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	d158      	bne.n	800a86e <_malloc_r+0xf6>
 800a7bc:	f8d8 4000 	ldr.w	r4, [r8]
 800a7c0:	4627      	mov	r7, r4
 800a7c2:	2f00      	cmp	r7, #0
 800a7c4:	d143      	bne.n	800a84e <_malloc_r+0xd6>
 800a7c6:	2c00      	cmp	r4, #0
 800a7c8:	d04b      	beq.n	800a862 <_malloc_r+0xea>
 800a7ca:	6823      	ldr	r3, [r4, #0]
 800a7cc:	4639      	mov	r1, r7
 800a7ce:	4630      	mov	r0, r6
 800a7d0:	eb04 0903 	add.w	r9, r4, r3
 800a7d4:	f001 fdc2 	bl	800c35c <_sbrk_r>
 800a7d8:	4581      	cmp	r9, r0
 800a7da:	d142      	bne.n	800a862 <_malloc_r+0xea>
 800a7dc:	6821      	ldr	r1, [r4, #0]
 800a7de:	1a6d      	subs	r5, r5, r1
 800a7e0:	4629      	mov	r1, r5
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	f7ff ffa6 	bl	800a734 <sbrk_aligned>
 800a7e8:	3001      	adds	r0, #1
 800a7ea:	d03a      	beq.n	800a862 <_malloc_r+0xea>
 800a7ec:	6823      	ldr	r3, [r4, #0]
 800a7ee:	442b      	add	r3, r5
 800a7f0:	6023      	str	r3, [r4, #0]
 800a7f2:	f8d8 3000 	ldr.w	r3, [r8]
 800a7f6:	685a      	ldr	r2, [r3, #4]
 800a7f8:	bb62      	cbnz	r2, 800a854 <_malloc_r+0xdc>
 800a7fa:	f8c8 7000 	str.w	r7, [r8]
 800a7fe:	e00f      	b.n	800a820 <_malloc_r+0xa8>
 800a800:	6822      	ldr	r2, [r4, #0]
 800a802:	1b52      	subs	r2, r2, r5
 800a804:	d420      	bmi.n	800a848 <_malloc_r+0xd0>
 800a806:	2a0b      	cmp	r2, #11
 800a808:	d917      	bls.n	800a83a <_malloc_r+0xc2>
 800a80a:	1961      	adds	r1, r4, r5
 800a80c:	42a3      	cmp	r3, r4
 800a80e:	6025      	str	r5, [r4, #0]
 800a810:	bf18      	it	ne
 800a812:	6059      	strne	r1, [r3, #4]
 800a814:	6863      	ldr	r3, [r4, #4]
 800a816:	bf08      	it	eq
 800a818:	f8c8 1000 	streq.w	r1, [r8]
 800a81c:	5162      	str	r2, [r4, r5]
 800a81e:	604b      	str	r3, [r1, #4]
 800a820:	4630      	mov	r0, r6
 800a822:	f000 f82f 	bl	800a884 <__malloc_unlock>
 800a826:	f104 000b 	add.w	r0, r4, #11
 800a82a:	1d23      	adds	r3, r4, #4
 800a82c:	f020 0007 	bic.w	r0, r0, #7
 800a830:	1ac2      	subs	r2, r0, r3
 800a832:	bf1c      	itt	ne
 800a834:	1a1b      	subne	r3, r3, r0
 800a836:	50a3      	strne	r3, [r4, r2]
 800a838:	e7af      	b.n	800a79a <_malloc_r+0x22>
 800a83a:	6862      	ldr	r2, [r4, #4]
 800a83c:	42a3      	cmp	r3, r4
 800a83e:	bf0c      	ite	eq
 800a840:	f8c8 2000 	streq.w	r2, [r8]
 800a844:	605a      	strne	r2, [r3, #4]
 800a846:	e7eb      	b.n	800a820 <_malloc_r+0xa8>
 800a848:	4623      	mov	r3, r4
 800a84a:	6864      	ldr	r4, [r4, #4]
 800a84c:	e7ae      	b.n	800a7ac <_malloc_r+0x34>
 800a84e:	463c      	mov	r4, r7
 800a850:	687f      	ldr	r7, [r7, #4]
 800a852:	e7b6      	b.n	800a7c2 <_malloc_r+0x4a>
 800a854:	461a      	mov	r2, r3
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	42a3      	cmp	r3, r4
 800a85a:	d1fb      	bne.n	800a854 <_malloc_r+0xdc>
 800a85c:	2300      	movs	r3, #0
 800a85e:	6053      	str	r3, [r2, #4]
 800a860:	e7de      	b.n	800a820 <_malloc_r+0xa8>
 800a862:	230c      	movs	r3, #12
 800a864:	6033      	str	r3, [r6, #0]
 800a866:	4630      	mov	r0, r6
 800a868:	f000 f80c 	bl	800a884 <__malloc_unlock>
 800a86c:	e794      	b.n	800a798 <_malloc_r+0x20>
 800a86e:	6005      	str	r5, [r0, #0]
 800a870:	e7d6      	b.n	800a820 <_malloc_r+0xa8>
 800a872:	bf00      	nop
 800a874:	20000888 	.word	0x20000888

0800a878 <__malloc_lock>:
 800a878:	4801      	ldr	r0, [pc, #4]	@ (800a880 <__malloc_lock+0x8>)
 800a87a:	f7ff b8a4 	b.w	80099c6 <__retarget_lock_acquire_recursive>
 800a87e:	bf00      	nop
 800a880:	20000880 	.word	0x20000880

0800a884 <__malloc_unlock>:
 800a884:	4801      	ldr	r0, [pc, #4]	@ (800a88c <__malloc_unlock+0x8>)
 800a886:	f7ff b89f 	b.w	80099c8 <__retarget_lock_release_recursive>
 800a88a:	bf00      	nop
 800a88c:	20000880 	.word	0x20000880

0800a890 <_Balloc>:
 800a890:	b570      	push	{r4, r5, r6, lr}
 800a892:	69c6      	ldr	r6, [r0, #28]
 800a894:	4604      	mov	r4, r0
 800a896:	460d      	mov	r5, r1
 800a898:	b976      	cbnz	r6, 800a8b8 <_Balloc+0x28>
 800a89a:	2010      	movs	r0, #16
 800a89c:	f7ff ff42 	bl	800a724 <malloc>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	61e0      	str	r0, [r4, #28]
 800a8a4:	b920      	cbnz	r0, 800a8b0 <_Balloc+0x20>
 800a8a6:	4b18      	ldr	r3, [pc, #96]	@ (800a908 <_Balloc+0x78>)
 800a8a8:	4818      	ldr	r0, [pc, #96]	@ (800a90c <_Balloc+0x7c>)
 800a8aa:	216b      	movs	r1, #107	@ 0x6b
 800a8ac:	f001 fd70 	bl	800c390 <__assert_func>
 800a8b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8b4:	6006      	str	r6, [r0, #0]
 800a8b6:	60c6      	str	r6, [r0, #12]
 800a8b8:	69e6      	ldr	r6, [r4, #28]
 800a8ba:	68f3      	ldr	r3, [r6, #12]
 800a8bc:	b183      	cbz	r3, 800a8e0 <_Balloc+0x50>
 800a8be:	69e3      	ldr	r3, [r4, #28]
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a8c6:	b9b8      	cbnz	r0, 800a8f8 <_Balloc+0x68>
 800a8c8:	2101      	movs	r1, #1
 800a8ca:	fa01 f605 	lsl.w	r6, r1, r5
 800a8ce:	1d72      	adds	r2, r6, #5
 800a8d0:	0092      	lsls	r2, r2, #2
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	f001 fd7a 	bl	800c3cc <_calloc_r>
 800a8d8:	b160      	cbz	r0, 800a8f4 <_Balloc+0x64>
 800a8da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a8de:	e00e      	b.n	800a8fe <_Balloc+0x6e>
 800a8e0:	2221      	movs	r2, #33	@ 0x21
 800a8e2:	2104      	movs	r1, #4
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f001 fd71 	bl	800c3cc <_calloc_r>
 800a8ea:	69e3      	ldr	r3, [r4, #28]
 800a8ec:	60f0      	str	r0, [r6, #12]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d1e4      	bne.n	800a8be <_Balloc+0x2e>
 800a8f4:	2000      	movs	r0, #0
 800a8f6:	bd70      	pop	{r4, r5, r6, pc}
 800a8f8:	6802      	ldr	r2, [r0, #0]
 800a8fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a8fe:	2300      	movs	r3, #0
 800a900:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a904:	e7f7      	b.n	800a8f6 <_Balloc+0x66>
 800a906:	bf00      	nop
 800a908:	0800d18a 	.word	0x0800d18a
 800a90c:	0800d20a 	.word	0x0800d20a

0800a910 <_Bfree>:
 800a910:	b570      	push	{r4, r5, r6, lr}
 800a912:	69c6      	ldr	r6, [r0, #28]
 800a914:	4605      	mov	r5, r0
 800a916:	460c      	mov	r4, r1
 800a918:	b976      	cbnz	r6, 800a938 <_Bfree+0x28>
 800a91a:	2010      	movs	r0, #16
 800a91c:	f7ff ff02 	bl	800a724 <malloc>
 800a920:	4602      	mov	r2, r0
 800a922:	61e8      	str	r0, [r5, #28]
 800a924:	b920      	cbnz	r0, 800a930 <_Bfree+0x20>
 800a926:	4b09      	ldr	r3, [pc, #36]	@ (800a94c <_Bfree+0x3c>)
 800a928:	4809      	ldr	r0, [pc, #36]	@ (800a950 <_Bfree+0x40>)
 800a92a:	218f      	movs	r1, #143	@ 0x8f
 800a92c:	f001 fd30 	bl	800c390 <__assert_func>
 800a930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a934:	6006      	str	r6, [r0, #0]
 800a936:	60c6      	str	r6, [r0, #12]
 800a938:	b13c      	cbz	r4, 800a94a <_Bfree+0x3a>
 800a93a:	69eb      	ldr	r3, [r5, #28]
 800a93c:	6862      	ldr	r2, [r4, #4]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a944:	6021      	str	r1, [r4, #0]
 800a946:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a94a:	bd70      	pop	{r4, r5, r6, pc}
 800a94c:	0800d18a 	.word	0x0800d18a
 800a950:	0800d20a 	.word	0x0800d20a

0800a954 <__multadd>:
 800a954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a958:	690d      	ldr	r5, [r1, #16]
 800a95a:	4607      	mov	r7, r0
 800a95c:	460c      	mov	r4, r1
 800a95e:	461e      	mov	r6, r3
 800a960:	f101 0c14 	add.w	ip, r1, #20
 800a964:	2000      	movs	r0, #0
 800a966:	f8dc 3000 	ldr.w	r3, [ip]
 800a96a:	b299      	uxth	r1, r3
 800a96c:	fb02 6101 	mla	r1, r2, r1, r6
 800a970:	0c1e      	lsrs	r6, r3, #16
 800a972:	0c0b      	lsrs	r3, r1, #16
 800a974:	fb02 3306 	mla	r3, r2, r6, r3
 800a978:	b289      	uxth	r1, r1
 800a97a:	3001      	adds	r0, #1
 800a97c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a980:	4285      	cmp	r5, r0
 800a982:	f84c 1b04 	str.w	r1, [ip], #4
 800a986:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a98a:	dcec      	bgt.n	800a966 <__multadd+0x12>
 800a98c:	b30e      	cbz	r6, 800a9d2 <__multadd+0x7e>
 800a98e:	68a3      	ldr	r3, [r4, #8]
 800a990:	42ab      	cmp	r3, r5
 800a992:	dc19      	bgt.n	800a9c8 <__multadd+0x74>
 800a994:	6861      	ldr	r1, [r4, #4]
 800a996:	4638      	mov	r0, r7
 800a998:	3101      	adds	r1, #1
 800a99a:	f7ff ff79 	bl	800a890 <_Balloc>
 800a99e:	4680      	mov	r8, r0
 800a9a0:	b928      	cbnz	r0, 800a9ae <__multadd+0x5a>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a9d8 <__multadd+0x84>)
 800a9a6:	480d      	ldr	r0, [pc, #52]	@ (800a9dc <__multadd+0x88>)
 800a9a8:	21ba      	movs	r1, #186	@ 0xba
 800a9aa:	f001 fcf1 	bl	800c390 <__assert_func>
 800a9ae:	6922      	ldr	r2, [r4, #16]
 800a9b0:	3202      	adds	r2, #2
 800a9b2:	f104 010c 	add.w	r1, r4, #12
 800a9b6:	0092      	lsls	r2, r2, #2
 800a9b8:	300c      	adds	r0, #12
 800a9ba:	f7ff f806 	bl	80099ca <memcpy>
 800a9be:	4621      	mov	r1, r4
 800a9c0:	4638      	mov	r0, r7
 800a9c2:	f7ff ffa5 	bl	800a910 <_Bfree>
 800a9c6:	4644      	mov	r4, r8
 800a9c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a9cc:	3501      	adds	r5, #1
 800a9ce:	615e      	str	r6, [r3, #20]
 800a9d0:	6125      	str	r5, [r4, #16]
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d8:	0800d1f9 	.word	0x0800d1f9
 800a9dc:	0800d20a 	.word	0x0800d20a

0800a9e0 <__s2b>:
 800a9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9e4:	460c      	mov	r4, r1
 800a9e6:	4615      	mov	r5, r2
 800a9e8:	461f      	mov	r7, r3
 800a9ea:	2209      	movs	r2, #9
 800a9ec:	3308      	adds	r3, #8
 800a9ee:	4606      	mov	r6, r0
 800a9f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	db09      	blt.n	800aa10 <__s2b+0x30>
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	f7ff ff47 	bl	800a890 <_Balloc>
 800aa02:	b940      	cbnz	r0, 800aa16 <__s2b+0x36>
 800aa04:	4602      	mov	r2, r0
 800aa06:	4b19      	ldr	r3, [pc, #100]	@ (800aa6c <__s2b+0x8c>)
 800aa08:	4819      	ldr	r0, [pc, #100]	@ (800aa70 <__s2b+0x90>)
 800aa0a:	21d3      	movs	r1, #211	@ 0xd3
 800aa0c:	f001 fcc0 	bl	800c390 <__assert_func>
 800aa10:	0052      	lsls	r2, r2, #1
 800aa12:	3101      	adds	r1, #1
 800aa14:	e7f0      	b.n	800a9f8 <__s2b+0x18>
 800aa16:	9b08      	ldr	r3, [sp, #32]
 800aa18:	6143      	str	r3, [r0, #20]
 800aa1a:	2d09      	cmp	r5, #9
 800aa1c:	f04f 0301 	mov.w	r3, #1
 800aa20:	6103      	str	r3, [r0, #16]
 800aa22:	dd16      	ble.n	800aa52 <__s2b+0x72>
 800aa24:	f104 0909 	add.w	r9, r4, #9
 800aa28:	46c8      	mov	r8, r9
 800aa2a:	442c      	add	r4, r5
 800aa2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aa30:	4601      	mov	r1, r0
 800aa32:	3b30      	subs	r3, #48	@ 0x30
 800aa34:	220a      	movs	r2, #10
 800aa36:	4630      	mov	r0, r6
 800aa38:	f7ff ff8c 	bl	800a954 <__multadd>
 800aa3c:	45a0      	cmp	r8, r4
 800aa3e:	d1f5      	bne.n	800aa2c <__s2b+0x4c>
 800aa40:	f1a5 0408 	sub.w	r4, r5, #8
 800aa44:	444c      	add	r4, r9
 800aa46:	1b2d      	subs	r5, r5, r4
 800aa48:	1963      	adds	r3, r4, r5
 800aa4a:	42bb      	cmp	r3, r7
 800aa4c:	db04      	blt.n	800aa58 <__s2b+0x78>
 800aa4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa52:	340a      	adds	r4, #10
 800aa54:	2509      	movs	r5, #9
 800aa56:	e7f6      	b.n	800aa46 <__s2b+0x66>
 800aa58:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa5c:	4601      	mov	r1, r0
 800aa5e:	3b30      	subs	r3, #48	@ 0x30
 800aa60:	220a      	movs	r2, #10
 800aa62:	4630      	mov	r0, r6
 800aa64:	f7ff ff76 	bl	800a954 <__multadd>
 800aa68:	e7ee      	b.n	800aa48 <__s2b+0x68>
 800aa6a:	bf00      	nop
 800aa6c:	0800d1f9 	.word	0x0800d1f9
 800aa70:	0800d20a 	.word	0x0800d20a

0800aa74 <__hi0bits>:
 800aa74:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aa78:	4603      	mov	r3, r0
 800aa7a:	bf36      	itet	cc
 800aa7c:	0403      	lslcc	r3, r0, #16
 800aa7e:	2000      	movcs	r0, #0
 800aa80:	2010      	movcc	r0, #16
 800aa82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aa86:	bf3c      	itt	cc
 800aa88:	021b      	lslcc	r3, r3, #8
 800aa8a:	3008      	addcc	r0, #8
 800aa8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa90:	bf3c      	itt	cc
 800aa92:	011b      	lslcc	r3, r3, #4
 800aa94:	3004      	addcc	r0, #4
 800aa96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa9a:	bf3c      	itt	cc
 800aa9c:	009b      	lslcc	r3, r3, #2
 800aa9e:	3002      	addcc	r0, #2
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	db05      	blt.n	800aab0 <__hi0bits+0x3c>
 800aaa4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aaa8:	f100 0001 	add.w	r0, r0, #1
 800aaac:	bf08      	it	eq
 800aaae:	2020      	moveq	r0, #32
 800aab0:	4770      	bx	lr

0800aab2 <__lo0bits>:
 800aab2:	6803      	ldr	r3, [r0, #0]
 800aab4:	4602      	mov	r2, r0
 800aab6:	f013 0007 	ands.w	r0, r3, #7
 800aaba:	d00b      	beq.n	800aad4 <__lo0bits+0x22>
 800aabc:	07d9      	lsls	r1, r3, #31
 800aabe:	d421      	bmi.n	800ab04 <__lo0bits+0x52>
 800aac0:	0798      	lsls	r0, r3, #30
 800aac2:	bf49      	itett	mi
 800aac4:	085b      	lsrmi	r3, r3, #1
 800aac6:	089b      	lsrpl	r3, r3, #2
 800aac8:	2001      	movmi	r0, #1
 800aaca:	6013      	strmi	r3, [r2, #0]
 800aacc:	bf5c      	itt	pl
 800aace:	6013      	strpl	r3, [r2, #0]
 800aad0:	2002      	movpl	r0, #2
 800aad2:	4770      	bx	lr
 800aad4:	b299      	uxth	r1, r3
 800aad6:	b909      	cbnz	r1, 800aadc <__lo0bits+0x2a>
 800aad8:	0c1b      	lsrs	r3, r3, #16
 800aada:	2010      	movs	r0, #16
 800aadc:	b2d9      	uxtb	r1, r3
 800aade:	b909      	cbnz	r1, 800aae4 <__lo0bits+0x32>
 800aae0:	3008      	adds	r0, #8
 800aae2:	0a1b      	lsrs	r3, r3, #8
 800aae4:	0719      	lsls	r1, r3, #28
 800aae6:	bf04      	itt	eq
 800aae8:	091b      	lsreq	r3, r3, #4
 800aaea:	3004      	addeq	r0, #4
 800aaec:	0799      	lsls	r1, r3, #30
 800aaee:	bf04      	itt	eq
 800aaf0:	089b      	lsreq	r3, r3, #2
 800aaf2:	3002      	addeq	r0, #2
 800aaf4:	07d9      	lsls	r1, r3, #31
 800aaf6:	d403      	bmi.n	800ab00 <__lo0bits+0x4e>
 800aaf8:	085b      	lsrs	r3, r3, #1
 800aafa:	f100 0001 	add.w	r0, r0, #1
 800aafe:	d003      	beq.n	800ab08 <__lo0bits+0x56>
 800ab00:	6013      	str	r3, [r2, #0]
 800ab02:	4770      	bx	lr
 800ab04:	2000      	movs	r0, #0
 800ab06:	4770      	bx	lr
 800ab08:	2020      	movs	r0, #32
 800ab0a:	4770      	bx	lr

0800ab0c <__i2b>:
 800ab0c:	b510      	push	{r4, lr}
 800ab0e:	460c      	mov	r4, r1
 800ab10:	2101      	movs	r1, #1
 800ab12:	f7ff febd 	bl	800a890 <_Balloc>
 800ab16:	4602      	mov	r2, r0
 800ab18:	b928      	cbnz	r0, 800ab26 <__i2b+0x1a>
 800ab1a:	4b05      	ldr	r3, [pc, #20]	@ (800ab30 <__i2b+0x24>)
 800ab1c:	4805      	ldr	r0, [pc, #20]	@ (800ab34 <__i2b+0x28>)
 800ab1e:	f240 1145 	movw	r1, #325	@ 0x145
 800ab22:	f001 fc35 	bl	800c390 <__assert_func>
 800ab26:	2301      	movs	r3, #1
 800ab28:	6144      	str	r4, [r0, #20]
 800ab2a:	6103      	str	r3, [r0, #16]
 800ab2c:	bd10      	pop	{r4, pc}
 800ab2e:	bf00      	nop
 800ab30:	0800d1f9 	.word	0x0800d1f9
 800ab34:	0800d20a 	.word	0x0800d20a

0800ab38 <__multiply>:
 800ab38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab3c:	4614      	mov	r4, r2
 800ab3e:	690a      	ldr	r2, [r1, #16]
 800ab40:	6923      	ldr	r3, [r4, #16]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	bfa8      	it	ge
 800ab46:	4623      	movge	r3, r4
 800ab48:	460f      	mov	r7, r1
 800ab4a:	bfa4      	itt	ge
 800ab4c:	460c      	movge	r4, r1
 800ab4e:	461f      	movge	r7, r3
 800ab50:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ab54:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ab58:	68a3      	ldr	r3, [r4, #8]
 800ab5a:	6861      	ldr	r1, [r4, #4]
 800ab5c:	eb0a 0609 	add.w	r6, sl, r9
 800ab60:	42b3      	cmp	r3, r6
 800ab62:	b085      	sub	sp, #20
 800ab64:	bfb8      	it	lt
 800ab66:	3101      	addlt	r1, #1
 800ab68:	f7ff fe92 	bl	800a890 <_Balloc>
 800ab6c:	b930      	cbnz	r0, 800ab7c <__multiply+0x44>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	4b44      	ldr	r3, [pc, #272]	@ (800ac84 <__multiply+0x14c>)
 800ab72:	4845      	ldr	r0, [pc, #276]	@ (800ac88 <__multiply+0x150>)
 800ab74:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ab78:	f001 fc0a 	bl	800c390 <__assert_func>
 800ab7c:	f100 0514 	add.w	r5, r0, #20
 800ab80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ab84:	462b      	mov	r3, r5
 800ab86:	2200      	movs	r2, #0
 800ab88:	4543      	cmp	r3, r8
 800ab8a:	d321      	bcc.n	800abd0 <__multiply+0x98>
 800ab8c:	f107 0114 	add.w	r1, r7, #20
 800ab90:	f104 0214 	add.w	r2, r4, #20
 800ab94:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ab98:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ab9c:	9302      	str	r3, [sp, #8]
 800ab9e:	1b13      	subs	r3, r2, r4
 800aba0:	3b15      	subs	r3, #21
 800aba2:	f023 0303 	bic.w	r3, r3, #3
 800aba6:	3304      	adds	r3, #4
 800aba8:	f104 0715 	add.w	r7, r4, #21
 800abac:	42ba      	cmp	r2, r7
 800abae:	bf38      	it	cc
 800abb0:	2304      	movcc	r3, #4
 800abb2:	9301      	str	r3, [sp, #4]
 800abb4:	9b02      	ldr	r3, [sp, #8]
 800abb6:	9103      	str	r1, [sp, #12]
 800abb8:	428b      	cmp	r3, r1
 800abba:	d80c      	bhi.n	800abd6 <__multiply+0x9e>
 800abbc:	2e00      	cmp	r6, #0
 800abbe:	dd03      	ble.n	800abc8 <__multiply+0x90>
 800abc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d05b      	beq.n	800ac80 <__multiply+0x148>
 800abc8:	6106      	str	r6, [r0, #16]
 800abca:	b005      	add	sp, #20
 800abcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd0:	f843 2b04 	str.w	r2, [r3], #4
 800abd4:	e7d8      	b.n	800ab88 <__multiply+0x50>
 800abd6:	f8b1 a000 	ldrh.w	sl, [r1]
 800abda:	f1ba 0f00 	cmp.w	sl, #0
 800abde:	d024      	beq.n	800ac2a <__multiply+0xf2>
 800abe0:	f104 0e14 	add.w	lr, r4, #20
 800abe4:	46a9      	mov	r9, r5
 800abe6:	f04f 0c00 	mov.w	ip, #0
 800abea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800abee:	f8d9 3000 	ldr.w	r3, [r9]
 800abf2:	fa1f fb87 	uxth.w	fp, r7
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	fb0a 330b 	mla	r3, sl, fp, r3
 800abfc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ac00:	f8d9 7000 	ldr.w	r7, [r9]
 800ac04:	4463      	add	r3, ip
 800ac06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ac0a:	fb0a c70b 	mla	r7, sl, fp, ip
 800ac0e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac18:	4572      	cmp	r2, lr
 800ac1a:	f849 3b04 	str.w	r3, [r9], #4
 800ac1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ac22:	d8e2      	bhi.n	800abea <__multiply+0xb2>
 800ac24:	9b01      	ldr	r3, [sp, #4]
 800ac26:	f845 c003 	str.w	ip, [r5, r3]
 800ac2a:	9b03      	ldr	r3, [sp, #12]
 800ac2c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ac30:	3104      	adds	r1, #4
 800ac32:	f1b9 0f00 	cmp.w	r9, #0
 800ac36:	d021      	beq.n	800ac7c <__multiply+0x144>
 800ac38:	682b      	ldr	r3, [r5, #0]
 800ac3a:	f104 0c14 	add.w	ip, r4, #20
 800ac3e:	46ae      	mov	lr, r5
 800ac40:	f04f 0a00 	mov.w	sl, #0
 800ac44:	f8bc b000 	ldrh.w	fp, [ip]
 800ac48:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ac4c:	fb09 770b 	mla	r7, r9, fp, r7
 800ac50:	4457      	add	r7, sl
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac58:	f84e 3b04 	str.w	r3, [lr], #4
 800ac5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ac60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac64:	f8be 3000 	ldrh.w	r3, [lr]
 800ac68:	fb09 330a 	mla	r3, r9, sl, r3
 800ac6c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ac70:	4562      	cmp	r2, ip
 800ac72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac76:	d8e5      	bhi.n	800ac44 <__multiply+0x10c>
 800ac78:	9f01      	ldr	r7, [sp, #4]
 800ac7a:	51eb      	str	r3, [r5, r7]
 800ac7c:	3504      	adds	r5, #4
 800ac7e:	e799      	b.n	800abb4 <__multiply+0x7c>
 800ac80:	3e01      	subs	r6, #1
 800ac82:	e79b      	b.n	800abbc <__multiply+0x84>
 800ac84:	0800d1f9 	.word	0x0800d1f9
 800ac88:	0800d20a 	.word	0x0800d20a

0800ac8c <__pow5mult>:
 800ac8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac90:	4615      	mov	r5, r2
 800ac92:	f012 0203 	ands.w	r2, r2, #3
 800ac96:	4607      	mov	r7, r0
 800ac98:	460e      	mov	r6, r1
 800ac9a:	d007      	beq.n	800acac <__pow5mult+0x20>
 800ac9c:	4c25      	ldr	r4, [pc, #148]	@ (800ad34 <__pow5mult+0xa8>)
 800ac9e:	3a01      	subs	r2, #1
 800aca0:	2300      	movs	r3, #0
 800aca2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aca6:	f7ff fe55 	bl	800a954 <__multadd>
 800acaa:	4606      	mov	r6, r0
 800acac:	10ad      	asrs	r5, r5, #2
 800acae:	d03d      	beq.n	800ad2c <__pow5mult+0xa0>
 800acb0:	69fc      	ldr	r4, [r7, #28]
 800acb2:	b97c      	cbnz	r4, 800acd4 <__pow5mult+0x48>
 800acb4:	2010      	movs	r0, #16
 800acb6:	f7ff fd35 	bl	800a724 <malloc>
 800acba:	4602      	mov	r2, r0
 800acbc:	61f8      	str	r0, [r7, #28]
 800acbe:	b928      	cbnz	r0, 800accc <__pow5mult+0x40>
 800acc0:	4b1d      	ldr	r3, [pc, #116]	@ (800ad38 <__pow5mult+0xac>)
 800acc2:	481e      	ldr	r0, [pc, #120]	@ (800ad3c <__pow5mult+0xb0>)
 800acc4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800acc8:	f001 fb62 	bl	800c390 <__assert_func>
 800accc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800acd0:	6004      	str	r4, [r0, #0]
 800acd2:	60c4      	str	r4, [r0, #12]
 800acd4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800acd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800acdc:	b94c      	cbnz	r4, 800acf2 <__pow5mult+0x66>
 800acde:	f240 2171 	movw	r1, #625	@ 0x271
 800ace2:	4638      	mov	r0, r7
 800ace4:	f7ff ff12 	bl	800ab0c <__i2b>
 800ace8:	2300      	movs	r3, #0
 800acea:	f8c8 0008 	str.w	r0, [r8, #8]
 800acee:	4604      	mov	r4, r0
 800acf0:	6003      	str	r3, [r0, #0]
 800acf2:	f04f 0900 	mov.w	r9, #0
 800acf6:	07eb      	lsls	r3, r5, #31
 800acf8:	d50a      	bpl.n	800ad10 <__pow5mult+0x84>
 800acfa:	4631      	mov	r1, r6
 800acfc:	4622      	mov	r2, r4
 800acfe:	4638      	mov	r0, r7
 800ad00:	f7ff ff1a 	bl	800ab38 <__multiply>
 800ad04:	4631      	mov	r1, r6
 800ad06:	4680      	mov	r8, r0
 800ad08:	4638      	mov	r0, r7
 800ad0a:	f7ff fe01 	bl	800a910 <_Bfree>
 800ad0e:	4646      	mov	r6, r8
 800ad10:	106d      	asrs	r5, r5, #1
 800ad12:	d00b      	beq.n	800ad2c <__pow5mult+0xa0>
 800ad14:	6820      	ldr	r0, [r4, #0]
 800ad16:	b938      	cbnz	r0, 800ad28 <__pow5mult+0x9c>
 800ad18:	4622      	mov	r2, r4
 800ad1a:	4621      	mov	r1, r4
 800ad1c:	4638      	mov	r0, r7
 800ad1e:	f7ff ff0b 	bl	800ab38 <__multiply>
 800ad22:	6020      	str	r0, [r4, #0]
 800ad24:	f8c0 9000 	str.w	r9, [r0]
 800ad28:	4604      	mov	r4, r0
 800ad2a:	e7e4      	b.n	800acf6 <__pow5mult+0x6a>
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad32:	bf00      	nop
 800ad34:	0800d264 	.word	0x0800d264
 800ad38:	0800d18a 	.word	0x0800d18a
 800ad3c:	0800d20a 	.word	0x0800d20a

0800ad40 <__lshift>:
 800ad40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad44:	460c      	mov	r4, r1
 800ad46:	6849      	ldr	r1, [r1, #4]
 800ad48:	6923      	ldr	r3, [r4, #16]
 800ad4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad4e:	68a3      	ldr	r3, [r4, #8]
 800ad50:	4607      	mov	r7, r0
 800ad52:	4691      	mov	r9, r2
 800ad54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad58:	f108 0601 	add.w	r6, r8, #1
 800ad5c:	42b3      	cmp	r3, r6
 800ad5e:	db0b      	blt.n	800ad78 <__lshift+0x38>
 800ad60:	4638      	mov	r0, r7
 800ad62:	f7ff fd95 	bl	800a890 <_Balloc>
 800ad66:	4605      	mov	r5, r0
 800ad68:	b948      	cbnz	r0, 800ad7e <__lshift+0x3e>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	4b28      	ldr	r3, [pc, #160]	@ (800ae10 <__lshift+0xd0>)
 800ad6e:	4829      	ldr	r0, [pc, #164]	@ (800ae14 <__lshift+0xd4>)
 800ad70:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ad74:	f001 fb0c 	bl	800c390 <__assert_func>
 800ad78:	3101      	adds	r1, #1
 800ad7a:	005b      	lsls	r3, r3, #1
 800ad7c:	e7ee      	b.n	800ad5c <__lshift+0x1c>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	f100 0114 	add.w	r1, r0, #20
 800ad84:	f100 0210 	add.w	r2, r0, #16
 800ad88:	4618      	mov	r0, r3
 800ad8a:	4553      	cmp	r3, sl
 800ad8c:	db33      	blt.n	800adf6 <__lshift+0xb6>
 800ad8e:	6920      	ldr	r0, [r4, #16]
 800ad90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad94:	f104 0314 	add.w	r3, r4, #20
 800ad98:	f019 091f 	ands.w	r9, r9, #31
 800ad9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ada0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ada4:	d02b      	beq.n	800adfe <__lshift+0xbe>
 800ada6:	f1c9 0e20 	rsb	lr, r9, #32
 800adaa:	468a      	mov	sl, r1
 800adac:	2200      	movs	r2, #0
 800adae:	6818      	ldr	r0, [r3, #0]
 800adb0:	fa00 f009 	lsl.w	r0, r0, r9
 800adb4:	4310      	orrs	r0, r2
 800adb6:	f84a 0b04 	str.w	r0, [sl], #4
 800adba:	f853 2b04 	ldr.w	r2, [r3], #4
 800adbe:	459c      	cmp	ip, r3
 800adc0:	fa22 f20e 	lsr.w	r2, r2, lr
 800adc4:	d8f3      	bhi.n	800adae <__lshift+0x6e>
 800adc6:	ebac 0304 	sub.w	r3, ip, r4
 800adca:	3b15      	subs	r3, #21
 800adcc:	f023 0303 	bic.w	r3, r3, #3
 800add0:	3304      	adds	r3, #4
 800add2:	f104 0015 	add.w	r0, r4, #21
 800add6:	4584      	cmp	ip, r0
 800add8:	bf38      	it	cc
 800adda:	2304      	movcc	r3, #4
 800addc:	50ca      	str	r2, [r1, r3]
 800adde:	b10a      	cbz	r2, 800ade4 <__lshift+0xa4>
 800ade0:	f108 0602 	add.w	r6, r8, #2
 800ade4:	3e01      	subs	r6, #1
 800ade6:	4638      	mov	r0, r7
 800ade8:	612e      	str	r6, [r5, #16]
 800adea:	4621      	mov	r1, r4
 800adec:	f7ff fd90 	bl	800a910 <_Bfree>
 800adf0:	4628      	mov	r0, r5
 800adf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adf6:	f842 0f04 	str.w	r0, [r2, #4]!
 800adfa:	3301      	adds	r3, #1
 800adfc:	e7c5      	b.n	800ad8a <__lshift+0x4a>
 800adfe:	3904      	subs	r1, #4
 800ae00:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae04:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae08:	459c      	cmp	ip, r3
 800ae0a:	d8f9      	bhi.n	800ae00 <__lshift+0xc0>
 800ae0c:	e7ea      	b.n	800ade4 <__lshift+0xa4>
 800ae0e:	bf00      	nop
 800ae10:	0800d1f9 	.word	0x0800d1f9
 800ae14:	0800d20a 	.word	0x0800d20a

0800ae18 <__mcmp>:
 800ae18:	690a      	ldr	r2, [r1, #16]
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	6900      	ldr	r0, [r0, #16]
 800ae1e:	1a80      	subs	r0, r0, r2
 800ae20:	b530      	push	{r4, r5, lr}
 800ae22:	d10e      	bne.n	800ae42 <__mcmp+0x2a>
 800ae24:	3314      	adds	r3, #20
 800ae26:	3114      	adds	r1, #20
 800ae28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ae2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ae30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae38:	4295      	cmp	r5, r2
 800ae3a:	d003      	beq.n	800ae44 <__mcmp+0x2c>
 800ae3c:	d205      	bcs.n	800ae4a <__mcmp+0x32>
 800ae3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae42:	bd30      	pop	{r4, r5, pc}
 800ae44:	42a3      	cmp	r3, r4
 800ae46:	d3f3      	bcc.n	800ae30 <__mcmp+0x18>
 800ae48:	e7fb      	b.n	800ae42 <__mcmp+0x2a>
 800ae4a:	2001      	movs	r0, #1
 800ae4c:	e7f9      	b.n	800ae42 <__mcmp+0x2a>
	...

0800ae50 <__mdiff>:
 800ae50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae54:	4689      	mov	r9, r1
 800ae56:	4606      	mov	r6, r0
 800ae58:	4611      	mov	r1, r2
 800ae5a:	4648      	mov	r0, r9
 800ae5c:	4614      	mov	r4, r2
 800ae5e:	f7ff ffdb 	bl	800ae18 <__mcmp>
 800ae62:	1e05      	subs	r5, r0, #0
 800ae64:	d112      	bne.n	800ae8c <__mdiff+0x3c>
 800ae66:	4629      	mov	r1, r5
 800ae68:	4630      	mov	r0, r6
 800ae6a:	f7ff fd11 	bl	800a890 <_Balloc>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	b928      	cbnz	r0, 800ae7e <__mdiff+0x2e>
 800ae72:	4b3f      	ldr	r3, [pc, #252]	@ (800af70 <__mdiff+0x120>)
 800ae74:	f240 2137 	movw	r1, #567	@ 0x237
 800ae78:	483e      	ldr	r0, [pc, #248]	@ (800af74 <__mdiff+0x124>)
 800ae7a:	f001 fa89 	bl	800c390 <__assert_func>
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae84:	4610      	mov	r0, r2
 800ae86:	b003      	add	sp, #12
 800ae88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae8c:	bfbc      	itt	lt
 800ae8e:	464b      	movlt	r3, r9
 800ae90:	46a1      	movlt	r9, r4
 800ae92:	4630      	mov	r0, r6
 800ae94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ae98:	bfba      	itte	lt
 800ae9a:	461c      	movlt	r4, r3
 800ae9c:	2501      	movlt	r5, #1
 800ae9e:	2500      	movge	r5, #0
 800aea0:	f7ff fcf6 	bl	800a890 <_Balloc>
 800aea4:	4602      	mov	r2, r0
 800aea6:	b918      	cbnz	r0, 800aeb0 <__mdiff+0x60>
 800aea8:	4b31      	ldr	r3, [pc, #196]	@ (800af70 <__mdiff+0x120>)
 800aeaa:	f240 2145 	movw	r1, #581	@ 0x245
 800aeae:	e7e3      	b.n	800ae78 <__mdiff+0x28>
 800aeb0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aeb4:	6926      	ldr	r6, [r4, #16]
 800aeb6:	60c5      	str	r5, [r0, #12]
 800aeb8:	f109 0310 	add.w	r3, r9, #16
 800aebc:	f109 0514 	add.w	r5, r9, #20
 800aec0:	f104 0e14 	add.w	lr, r4, #20
 800aec4:	f100 0b14 	add.w	fp, r0, #20
 800aec8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aecc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aed0:	9301      	str	r3, [sp, #4]
 800aed2:	46d9      	mov	r9, fp
 800aed4:	f04f 0c00 	mov.w	ip, #0
 800aed8:	9b01      	ldr	r3, [sp, #4]
 800aeda:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aede:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aee2:	9301      	str	r3, [sp, #4]
 800aee4:	fa1f f38a 	uxth.w	r3, sl
 800aee8:	4619      	mov	r1, r3
 800aeea:	b283      	uxth	r3, r0
 800aeec:	1acb      	subs	r3, r1, r3
 800aeee:	0c00      	lsrs	r0, r0, #16
 800aef0:	4463      	add	r3, ip
 800aef2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aef6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800af00:	4576      	cmp	r6, lr
 800af02:	f849 3b04 	str.w	r3, [r9], #4
 800af06:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af0a:	d8e5      	bhi.n	800aed8 <__mdiff+0x88>
 800af0c:	1b33      	subs	r3, r6, r4
 800af0e:	3b15      	subs	r3, #21
 800af10:	f023 0303 	bic.w	r3, r3, #3
 800af14:	3415      	adds	r4, #21
 800af16:	3304      	adds	r3, #4
 800af18:	42a6      	cmp	r6, r4
 800af1a:	bf38      	it	cc
 800af1c:	2304      	movcc	r3, #4
 800af1e:	441d      	add	r5, r3
 800af20:	445b      	add	r3, fp
 800af22:	461e      	mov	r6, r3
 800af24:	462c      	mov	r4, r5
 800af26:	4544      	cmp	r4, r8
 800af28:	d30e      	bcc.n	800af48 <__mdiff+0xf8>
 800af2a:	f108 0103 	add.w	r1, r8, #3
 800af2e:	1b49      	subs	r1, r1, r5
 800af30:	f021 0103 	bic.w	r1, r1, #3
 800af34:	3d03      	subs	r5, #3
 800af36:	45a8      	cmp	r8, r5
 800af38:	bf38      	it	cc
 800af3a:	2100      	movcc	r1, #0
 800af3c:	440b      	add	r3, r1
 800af3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af42:	b191      	cbz	r1, 800af6a <__mdiff+0x11a>
 800af44:	6117      	str	r7, [r2, #16]
 800af46:	e79d      	b.n	800ae84 <__mdiff+0x34>
 800af48:	f854 1b04 	ldr.w	r1, [r4], #4
 800af4c:	46e6      	mov	lr, ip
 800af4e:	0c08      	lsrs	r0, r1, #16
 800af50:	fa1c fc81 	uxtah	ip, ip, r1
 800af54:	4471      	add	r1, lr
 800af56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800af5a:	b289      	uxth	r1, r1
 800af5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800af60:	f846 1b04 	str.w	r1, [r6], #4
 800af64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af68:	e7dd      	b.n	800af26 <__mdiff+0xd6>
 800af6a:	3f01      	subs	r7, #1
 800af6c:	e7e7      	b.n	800af3e <__mdiff+0xee>
 800af6e:	bf00      	nop
 800af70:	0800d1f9 	.word	0x0800d1f9
 800af74:	0800d20a 	.word	0x0800d20a

0800af78 <__ulp>:
 800af78:	b082      	sub	sp, #8
 800af7a:	ed8d 0b00 	vstr	d0, [sp]
 800af7e:	9a01      	ldr	r2, [sp, #4]
 800af80:	4b0f      	ldr	r3, [pc, #60]	@ (800afc0 <__ulp+0x48>)
 800af82:	4013      	ands	r3, r2
 800af84:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800af88:	2b00      	cmp	r3, #0
 800af8a:	dc08      	bgt.n	800af9e <__ulp+0x26>
 800af8c:	425b      	negs	r3, r3
 800af8e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800af92:	ea4f 5223 	mov.w	r2, r3, asr #20
 800af96:	da04      	bge.n	800afa2 <__ulp+0x2a>
 800af98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800af9c:	4113      	asrs	r3, r2
 800af9e:	2200      	movs	r2, #0
 800afa0:	e008      	b.n	800afb4 <__ulp+0x3c>
 800afa2:	f1a2 0314 	sub.w	r3, r2, #20
 800afa6:	2b1e      	cmp	r3, #30
 800afa8:	bfda      	itte	le
 800afaa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800afae:	40da      	lsrle	r2, r3
 800afb0:	2201      	movgt	r2, #1
 800afb2:	2300      	movs	r3, #0
 800afb4:	4619      	mov	r1, r3
 800afb6:	4610      	mov	r0, r2
 800afb8:	ec41 0b10 	vmov	d0, r0, r1
 800afbc:	b002      	add	sp, #8
 800afbe:	4770      	bx	lr
 800afc0:	7ff00000 	.word	0x7ff00000

0800afc4 <__b2d>:
 800afc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afc8:	6906      	ldr	r6, [r0, #16]
 800afca:	f100 0814 	add.w	r8, r0, #20
 800afce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800afd2:	1f37      	subs	r7, r6, #4
 800afd4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800afd8:	4610      	mov	r0, r2
 800afda:	f7ff fd4b 	bl	800aa74 <__hi0bits>
 800afde:	f1c0 0320 	rsb	r3, r0, #32
 800afe2:	280a      	cmp	r0, #10
 800afe4:	600b      	str	r3, [r1, #0]
 800afe6:	491b      	ldr	r1, [pc, #108]	@ (800b054 <__b2d+0x90>)
 800afe8:	dc15      	bgt.n	800b016 <__b2d+0x52>
 800afea:	f1c0 0c0b 	rsb	ip, r0, #11
 800afee:	fa22 f30c 	lsr.w	r3, r2, ip
 800aff2:	45b8      	cmp	r8, r7
 800aff4:	ea43 0501 	orr.w	r5, r3, r1
 800aff8:	bf34      	ite	cc
 800affa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800affe:	2300      	movcs	r3, #0
 800b000:	3015      	adds	r0, #21
 800b002:	fa02 f000 	lsl.w	r0, r2, r0
 800b006:	fa23 f30c 	lsr.w	r3, r3, ip
 800b00a:	4303      	orrs	r3, r0
 800b00c:	461c      	mov	r4, r3
 800b00e:	ec45 4b10 	vmov	d0, r4, r5
 800b012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b016:	45b8      	cmp	r8, r7
 800b018:	bf3a      	itte	cc
 800b01a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b01e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b022:	2300      	movcs	r3, #0
 800b024:	380b      	subs	r0, #11
 800b026:	d012      	beq.n	800b04e <__b2d+0x8a>
 800b028:	f1c0 0120 	rsb	r1, r0, #32
 800b02c:	fa23 f401 	lsr.w	r4, r3, r1
 800b030:	4082      	lsls	r2, r0
 800b032:	4322      	orrs	r2, r4
 800b034:	4547      	cmp	r7, r8
 800b036:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b03a:	bf8c      	ite	hi
 800b03c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b040:	2200      	movls	r2, #0
 800b042:	4083      	lsls	r3, r0
 800b044:	40ca      	lsrs	r2, r1
 800b046:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b04a:	4313      	orrs	r3, r2
 800b04c:	e7de      	b.n	800b00c <__b2d+0x48>
 800b04e:	ea42 0501 	orr.w	r5, r2, r1
 800b052:	e7db      	b.n	800b00c <__b2d+0x48>
 800b054:	3ff00000 	.word	0x3ff00000

0800b058 <__d2b>:
 800b058:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b05c:	460f      	mov	r7, r1
 800b05e:	2101      	movs	r1, #1
 800b060:	ec59 8b10 	vmov	r8, r9, d0
 800b064:	4616      	mov	r6, r2
 800b066:	f7ff fc13 	bl	800a890 <_Balloc>
 800b06a:	4604      	mov	r4, r0
 800b06c:	b930      	cbnz	r0, 800b07c <__d2b+0x24>
 800b06e:	4602      	mov	r2, r0
 800b070:	4b23      	ldr	r3, [pc, #140]	@ (800b100 <__d2b+0xa8>)
 800b072:	4824      	ldr	r0, [pc, #144]	@ (800b104 <__d2b+0xac>)
 800b074:	f240 310f 	movw	r1, #783	@ 0x30f
 800b078:	f001 f98a 	bl	800c390 <__assert_func>
 800b07c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b080:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b084:	b10d      	cbz	r5, 800b08a <__d2b+0x32>
 800b086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b08a:	9301      	str	r3, [sp, #4]
 800b08c:	f1b8 0300 	subs.w	r3, r8, #0
 800b090:	d023      	beq.n	800b0da <__d2b+0x82>
 800b092:	4668      	mov	r0, sp
 800b094:	9300      	str	r3, [sp, #0]
 800b096:	f7ff fd0c 	bl	800aab2 <__lo0bits>
 800b09a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b09e:	b1d0      	cbz	r0, 800b0d6 <__d2b+0x7e>
 800b0a0:	f1c0 0320 	rsb	r3, r0, #32
 800b0a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b0a8:	430b      	orrs	r3, r1
 800b0aa:	40c2      	lsrs	r2, r0
 800b0ac:	6163      	str	r3, [r4, #20]
 800b0ae:	9201      	str	r2, [sp, #4]
 800b0b0:	9b01      	ldr	r3, [sp, #4]
 800b0b2:	61a3      	str	r3, [r4, #24]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	bf0c      	ite	eq
 800b0b8:	2201      	moveq	r2, #1
 800b0ba:	2202      	movne	r2, #2
 800b0bc:	6122      	str	r2, [r4, #16]
 800b0be:	b1a5      	cbz	r5, 800b0ea <__d2b+0x92>
 800b0c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b0c4:	4405      	add	r5, r0
 800b0c6:	603d      	str	r5, [r7, #0]
 800b0c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b0cc:	6030      	str	r0, [r6, #0]
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	b003      	add	sp, #12
 800b0d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0d6:	6161      	str	r1, [r4, #20]
 800b0d8:	e7ea      	b.n	800b0b0 <__d2b+0x58>
 800b0da:	a801      	add	r0, sp, #4
 800b0dc:	f7ff fce9 	bl	800aab2 <__lo0bits>
 800b0e0:	9b01      	ldr	r3, [sp, #4]
 800b0e2:	6163      	str	r3, [r4, #20]
 800b0e4:	3020      	adds	r0, #32
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	e7e8      	b.n	800b0bc <__d2b+0x64>
 800b0ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b0ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b0f2:	6038      	str	r0, [r7, #0]
 800b0f4:	6918      	ldr	r0, [r3, #16]
 800b0f6:	f7ff fcbd 	bl	800aa74 <__hi0bits>
 800b0fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b0fe:	e7e5      	b.n	800b0cc <__d2b+0x74>
 800b100:	0800d1f9 	.word	0x0800d1f9
 800b104:	0800d20a 	.word	0x0800d20a

0800b108 <__ratio>:
 800b108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b10c:	b085      	sub	sp, #20
 800b10e:	e9cd 1000 	strd	r1, r0, [sp]
 800b112:	a902      	add	r1, sp, #8
 800b114:	f7ff ff56 	bl	800afc4 <__b2d>
 800b118:	9800      	ldr	r0, [sp, #0]
 800b11a:	a903      	add	r1, sp, #12
 800b11c:	ec55 4b10 	vmov	r4, r5, d0
 800b120:	f7ff ff50 	bl	800afc4 <__b2d>
 800b124:	9b01      	ldr	r3, [sp, #4]
 800b126:	6919      	ldr	r1, [r3, #16]
 800b128:	9b00      	ldr	r3, [sp, #0]
 800b12a:	691b      	ldr	r3, [r3, #16]
 800b12c:	1ac9      	subs	r1, r1, r3
 800b12e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b132:	1a9b      	subs	r3, r3, r2
 800b134:	ec5b ab10 	vmov	sl, fp, d0
 800b138:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	bfce      	itee	gt
 800b140:	462a      	movgt	r2, r5
 800b142:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b146:	465a      	movle	r2, fp
 800b148:	462f      	mov	r7, r5
 800b14a:	46d9      	mov	r9, fp
 800b14c:	bfcc      	ite	gt
 800b14e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b152:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b156:	464b      	mov	r3, r9
 800b158:	4652      	mov	r2, sl
 800b15a:	4620      	mov	r0, r4
 800b15c:	4639      	mov	r1, r7
 800b15e:	f7f5 fb9d 	bl	800089c <__aeabi_ddiv>
 800b162:	ec41 0b10 	vmov	d0, r0, r1
 800b166:	b005      	add	sp, #20
 800b168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b16c <__copybits>:
 800b16c:	3901      	subs	r1, #1
 800b16e:	b570      	push	{r4, r5, r6, lr}
 800b170:	1149      	asrs	r1, r1, #5
 800b172:	6914      	ldr	r4, [r2, #16]
 800b174:	3101      	adds	r1, #1
 800b176:	f102 0314 	add.w	r3, r2, #20
 800b17a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b17e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b182:	1f05      	subs	r5, r0, #4
 800b184:	42a3      	cmp	r3, r4
 800b186:	d30c      	bcc.n	800b1a2 <__copybits+0x36>
 800b188:	1aa3      	subs	r3, r4, r2
 800b18a:	3b11      	subs	r3, #17
 800b18c:	f023 0303 	bic.w	r3, r3, #3
 800b190:	3211      	adds	r2, #17
 800b192:	42a2      	cmp	r2, r4
 800b194:	bf88      	it	hi
 800b196:	2300      	movhi	r3, #0
 800b198:	4418      	add	r0, r3
 800b19a:	2300      	movs	r3, #0
 800b19c:	4288      	cmp	r0, r1
 800b19e:	d305      	bcc.n	800b1ac <__copybits+0x40>
 800b1a0:	bd70      	pop	{r4, r5, r6, pc}
 800b1a2:	f853 6b04 	ldr.w	r6, [r3], #4
 800b1a6:	f845 6f04 	str.w	r6, [r5, #4]!
 800b1aa:	e7eb      	b.n	800b184 <__copybits+0x18>
 800b1ac:	f840 3b04 	str.w	r3, [r0], #4
 800b1b0:	e7f4      	b.n	800b19c <__copybits+0x30>

0800b1b2 <__any_on>:
 800b1b2:	f100 0214 	add.w	r2, r0, #20
 800b1b6:	6900      	ldr	r0, [r0, #16]
 800b1b8:	114b      	asrs	r3, r1, #5
 800b1ba:	4298      	cmp	r0, r3
 800b1bc:	b510      	push	{r4, lr}
 800b1be:	db11      	blt.n	800b1e4 <__any_on+0x32>
 800b1c0:	dd0a      	ble.n	800b1d8 <__any_on+0x26>
 800b1c2:	f011 011f 	ands.w	r1, r1, #31
 800b1c6:	d007      	beq.n	800b1d8 <__any_on+0x26>
 800b1c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b1cc:	fa24 f001 	lsr.w	r0, r4, r1
 800b1d0:	fa00 f101 	lsl.w	r1, r0, r1
 800b1d4:	428c      	cmp	r4, r1
 800b1d6:	d10b      	bne.n	800b1f0 <__any_on+0x3e>
 800b1d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d803      	bhi.n	800b1e8 <__any_on+0x36>
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	bd10      	pop	{r4, pc}
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	e7f7      	b.n	800b1d8 <__any_on+0x26>
 800b1e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b1ec:	2900      	cmp	r1, #0
 800b1ee:	d0f5      	beq.n	800b1dc <__any_on+0x2a>
 800b1f0:	2001      	movs	r0, #1
 800b1f2:	e7f6      	b.n	800b1e2 <__any_on+0x30>

0800b1f4 <sulp>:
 800b1f4:	b570      	push	{r4, r5, r6, lr}
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	460d      	mov	r5, r1
 800b1fa:	ec45 4b10 	vmov	d0, r4, r5
 800b1fe:	4616      	mov	r6, r2
 800b200:	f7ff feba 	bl	800af78 <__ulp>
 800b204:	ec51 0b10 	vmov	r0, r1, d0
 800b208:	b17e      	cbz	r6, 800b22a <sulp+0x36>
 800b20a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b20e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b212:	2b00      	cmp	r3, #0
 800b214:	dd09      	ble.n	800b22a <sulp+0x36>
 800b216:	051b      	lsls	r3, r3, #20
 800b218:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b21c:	2400      	movs	r4, #0
 800b21e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b222:	4622      	mov	r2, r4
 800b224:	462b      	mov	r3, r5
 800b226:	f7f5 fa0f 	bl	8000648 <__aeabi_dmul>
 800b22a:	ec41 0b10 	vmov	d0, r0, r1
 800b22e:	bd70      	pop	{r4, r5, r6, pc}

0800b230 <_strtod_l>:
 800b230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b234:	b09f      	sub	sp, #124	@ 0x7c
 800b236:	460c      	mov	r4, r1
 800b238:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b23a:	2200      	movs	r2, #0
 800b23c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b23e:	9005      	str	r0, [sp, #20]
 800b240:	f04f 0a00 	mov.w	sl, #0
 800b244:	f04f 0b00 	mov.w	fp, #0
 800b248:	460a      	mov	r2, r1
 800b24a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b24c:	7811      	ldrb	r1, [r2, #0]
 800b24e:	292b      	cmp	r1, #43	@ 0x2b
 800b250:	d04a      	beq.n	800b2e8 <_strtod_l+0xb8>
 800b252:	d838      	bhi.n	800b2c6 <_strtod_l+0x96>
 800b254:	290d      	cmp	r1, #13
 800b256:	d832      	bhi.n	800b2be <_strtod_l+0x8e>
 800b258:	2908      	cmp	r1, #8
 800b25a:	d832      	bhi.n	800b2c2 <_strtod_l+0x92>
 800b25c:	2900      	cmp	r1, #0
 800b25e:	d03b      	beq.n	800b2d8 <_strtod_l+0xa8>
 800b260:	2200      	movs	r2, #0
 800b262:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b264:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b266:	782a      	ldrb	r2, [r5, #0]
 800b268:	2a30      	cmp	r2, #48	@ 0x30
 800b26a:	f040 80b3 	bne.w	800b3d4 <_strtod_l+0x1a4>
 800b26e:	786a      	ldrb	r2, [r5, #1]
 800b270:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b274:	2a58      	cmp	r2, #88	@ 0x58
 800b276:	d16e      	bne.n	800b356 <_strtod_l+0x126>
 800b278:	9302      	str	r3, [sp, #8]
 800b27a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b27c:	9301      	str	r3, [sp, #4]
 800b27e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b280:	9300      	str	r3, [sp, #0]
 800b282:	4a8e      	ldr	r2, [pc, #568]	@ (800b4bc <_strtod_l+0x28c>)
 800b284:	9805      	ldr	r0, [sp, #20]
 800b286:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b288:	a919      	add	r1, sp, #100	@ 0x64
 800b28a:	f001 f91b 	bl	800c4c4 <__gethex>
 800b28e:	f010 060f 	ands.w	r6, r0, #15
 800b292:	4604      	mov	r4, r0
 800b294:	d005      	beq.n	800b2a2 <_strtod_l+0x72>
 800b296:	2e06      	cmp	r6, #6
 800b298:	d128      	bne.n	800b2ec <_strtod_l+0xbc>
 800b29a:	3501      	adds	r5, #1
 800b29c:	2300      	movs	r3, #0
 800b29e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b2a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f040 858e 	bne.w	800bdc6 <_strtod_l+0xb96>
 800b2aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2ac:	b1cb      	cbz	r3, 800b2e2 <_strtod_l+0xb2>
 800b2ae:	4652      	mov	r2, sl
 800b2b0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b2b4:	ec43 2b10 	vmov	d0, r2, r3
 800b2b8:	b01f      	add	sp, #124	@ 0x7c
 800b2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2be:	2920      	cmp	r1, #32
 800b2c0:	d1ce      	bne.n	800b260 <_strtod_l+0x30>
 800b2c2:	3201      	adds	r2, #1
 800b2c4:	e7c1      	b.n	800b24a <_strtod_l+0x1a>
 800b2c6:	292d      	cmp	r1, #45	@ 0x2d
 800b2c8:	d1ca      	bne.n	800b260 <_strtod_l+0x30>
 800b2ca:	2101      	movs	r1, #1
 800b2cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b2ce:	1c51      	adds	r1, r2, #1
 800b2d0:	9119      	str	r1, [sp, #100]	@ 0x64
 800b2d2:	7852      	ldrb	r2, [r2, #1]
 800b2d4:	2a00      	cmp	r2, #0
 800b2d6:	d1c5      	bne.n	800b264 <_strtod_l+0x34>
 800b2d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b2da:	9419      	str	r4, [sp, #100]	@ 0x64
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f040 8570 	bne.w	800bdc2 <_strtod_l+0xb92>
 800b2e2:	4652      	mov	r2, sl
 800b2e4:	465b      	mov	r3, fp
 800b2e6:	e7e5      	b.n	800b2b4 <_strtod_l+0x84>
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	e7ef      	b.n	800b2cc <_strtod_l+0x9c>
 800b2ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b2ee:	b13a      	cbz	r2, 800b300 <_strtod_l+0xd0>
 800b2f0:	2135      	movs	r1, #53	@ 0x35
 800b2f2:	a81c      	add	r0, sp, #112	@ 0x70
 800b2f4:	f7ff ff3a 	bl	800b16c <__copybits>
 800b2f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2fa:	9805      	ldr	r0, [sp, #20]
 800b2fc:	f7ff fb08 	bl	800a910 <_Bfree>
 800b300:	3e01      	subs	r6, #1
 800b302:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b304:	2e04      	cmp	r6, #4
 800b306:	d806      	bhi.n	800b316 <_strtod_l+0xe6>
 800b308:	e8df f006 	tbb	[pc, r6]
 800b30c:	201d0314 	.word	0x201d0314
 800b310:	14          	.byte	0x14
 800b311:	00          	.byte	0x00
 800b312:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b316:	05e1      	lsls	r1, r4, #23
 800b318:	bf48      	it	mi
 800b31a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b31e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b322:	0d1b      	lsrs	r3, r3, #20
 800b324:	051b      	lsls	r3, r3, #20
 800b326:	2b00      	cmp	r3, #0
 800b328:	d1bb      	bne.n	800b2a2 <_strtod_l+0x72>
 800b32a:	f7fe fb21 	bl	8009970 <__errno>
 800b32e:	2322      	movs	r3, #34	@ 0x22
 800b330:	6003      	str	r3, [r0, #0]
 800b332:	e7b6      	b.n	800b2a2 <_strtod_l+0x72>
 800b334:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b338:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b33c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b340:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b344:	e7e7      	b.n	800b316 <_strtod_l+0xe6>
 800b346:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b4c4 <_strtod_l+0x294>
 800b34a:	e7e4      	b.n	800b316 <_strtod_l+0xe6>
 800b34c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b350:	f04f 3aff 	mov.w	sl, #4294967295
 800b354:	e7df      	b.n	800b316 <_strtod_l+0xe6>
 800b356:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b358:	1c5a      	adds	r2, r3, #1
 800b35a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b35c:	785b      	ldrb	r3, [r3, #1]
 800b35e:	2b30      	cmp	r3, #48	@ 0x30
 800b360:	d0f9      	beq.n	800b356 <_strtod_l+0x126>
 800b362:	2b00      	cmp	r3, #0
 800b364:	d09d      	beq.n	800b2a2 <_strtod_l+0x72>
 800b366:	2301      	movs	r3, #1
 800b368:	9309      	str	r3, [sp, #36]	@ 0x24
 800b36a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b36c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b36e:	2300      	movs	r3, #0
 800b370:	9308      	str	r3, [sp, #32]
 800b372:	930a      	str	r3, [sp, #40]	@ 0x28
 800b374:	461f      	mov	r7, r3
 800b376:	220a      	movs	r2, #10
 800b378:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b37a:	7805      	ldrb	r5, [r0, #0]
 800b37c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b380:	b2d9      	uxtb	r1, r3
 800b382:	2909      	cmp	r1, #9
 800b384:	d928      	bls.n	800b3d8 <_strtod_l+0x1a8>
 800b386:	494e      	ldr	r1, [pc, #312]	@ (800b4c0 <_strtod_l+0x290>)
 800b388:	2201      	movs	r2, #1
 800b38a:	f000 ffd5 	bl	800c338 <strncmp>
 800b38e:	2800      	cmp	r0, #0
 800b390:	d032      	beq.n	800b3f8 <_strtod_l+0x1c8>
 800b392:	2000      	movs	r0, #0
 800b394:	462a      	mov	r2, r5
 800b396:	4681      	mov	r9, r0
 800b398:	463d      	mov	r5, r7
 800b39a:	4603      	mov	r3, r0
 800b39c:	2a65      	cmp	r2, #101	@ 0x65
 800b39e:	d001      	beq.n	800b3a4 <_strtod_l+0x174>
 800b3a0:	2a45      	cmp	r2, #69	@ 0x45
 800b3a2:	d114      	bne.n	800b3ce <_strtod_l+0x19e>
 800b3a4:	b91d      	cbnz	r5, 800b3ae <_strtod_l+0x17e>
 800b3a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3a8:	4302      	orrs	r2, r0
 800b3aa:	d095      	beq.n	800b2d8 <_strtod_l+0xa8>
 800b3ac:	2500      	movs	r5, #0
 800b3ae:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b3b0:	1c62      	adds	r2, r4, #1
 800b3b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b3b4:	7862      	ldrb	r2, [r4, #1]
 800b3b6:	2a2b      	cmp	r2, #43	@ 0x2b
 800b3b8:	d077      	beq.n	800b4aa <_strtod_l+0x27a>
 800b3ba:	2a2d      	cmp	r2, #45	@ 0x2d
 800b3bc:	d07b      	beq.n	800b4b6 <_strtod_l+0x286>
 800b3be:	f04f 0c00 	mov.w	ip, #0
 800b3c2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b3c6:	2909      	cmp	r1, #9
 800b3c8:	f240 8082 	bls.w	800b4d0 <_strtod_l+0x2a0>
 800b3cc:	9419      	str	r4, [sp, #100]	@ 0x64
 800b3ce:	f04f 0800 	mov.w	r8, #0
 800b3d2:	e0a2      	b.n	800b51a <_strtod_l+0x2ea>
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	e7c7      	b.n	800b368 <_strtod_l+0x138>
 800b3d8:	2f08      	cmp	r7, #8
 800b3da:	bfd5      	itete	le
 800b3dc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b3de:	9908      	ldrgt	r1, [sp, #32]
 800b3e0:	fb02 3301 	mlale	r3, r2, r1, r3
 800b3e4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b3e8:	f100 0001 	add.w	r0, r0, #1
 800b3ec:	bfd4      	ite	le
 800b3ee:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b3f0:	9308      	strgt	r3, [sp, #32]
 800b3f2:	3701      	adds	r7, #1
 800b3f4:	9019      	str	r0, [sp, #100]	@ 0x64
 800b3f6:	e7bf      	b.n	800b378 <_strtod_l+0x148>
 800b3f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3fa:	1c5a      	adds	r2, r3, #1
 800b3fc:	9219      	str	r2, [sp, #100]	@ 0x64
 800b3fe:	785a      	ldrb	r2, [r3, #1]
 800b400:	b37f      	cbz	r7, 800b462 <_strtod_l+0x232>
 800b402:	4681      	mov	r9, r0
 800b404:	463d      	mov	r5, r7
 800b406:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b40a:	2b09      	cmp	r3, #9
 800b40c:	d912      	bls.n	800b434 <_strtod_l+0x204>
 800b40e:	2301      	movs	r3, #1
 800b410:	e7c4      	b.n	800b39c <_strtod_l+0x16c>
 800b412:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b414:	1c5a      	adds	r2, r3, #1
 800b416:	9219      	str	r2, [sp, #100]	@ 0x64
 800b418:	785a      	ldrb	r2, [r3, #1]
 800b41a:	3001      	adds	r0, #1
 800b41c:	2a30      	cmp	r2, #48	@ 0x30
 800b41e:	d0f8      	beq.n	800b412 <_strtod_l+0x1e2>
 800b420:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b424:	2b08      	cmp	r3, #8
 800b426:	f200 84d3 	bhi.w	800bdd0 <_strtod_l+0xba0>
 800b42a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b42c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b42e:	4681      	mov	r9, r0
 800b430:	2000      	movs	r0, #0
 800b432:	4605      	mov	r5, r0
 800b434:	3a30      	subs	r2, #48	@ 0x30
 800b436:	f100 0301 	add.w	r3, r0, #1
 800b43a:	d02a      	beq.n	800b492 <_strtod_l+0x262>
 800b43c:	4499      	add	r9, r3
 800b43e:	eb00 0c05 	add.w	ip, r0, r5
 800b442:	462b      	mov	r3, r5
 800b444:	210a      	movs	r1, #10
 800b446:	4563      	cmp	r3, ip
 800b448:	d10d      	bne.n	800b466 <_strtod_l+0x236>
 800b44a:	1c69      	adds	r1, r5, #1
 800b44c:	4401      	add	r1, r0
 800b44e:	4428      	add	r0, r5
 800b450:	2808      	cmp	r0, #8
 800b452:	dc16      	bgt.n	800b482 <_strtod_l+0x252>
 800b454:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b456:	230a      	movs	r3, #10
 800b458:	fb03 2300 	mla	r3, r3, r0, r2
 800b45c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b45e:	2300      	movs	r3, #0
 800b460:	e018      	b.n	800b494 <_strtod_l+0x264>
 800b462:	4638      	mov	r0, r7
 800b464:	e7da      	b.n	800b41c <_strtod_l+0x1ec>
 800b466:	2b08      	cmp	r3, #8
 800b468:	f103 0301 	add.w	r3, r3, #1
 800b46c:	dc03      	bgt.n	800b476 <_strtod_l+0x246>
 800b46e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b470:	434e      	muls	r6, r1
 800b472:	960a      	str	r6, [sp, #40]	@ 0x28
 800b474:	e7e7      	b.n	800b446 <_strtod_l+0x216>
 800b476:	2b10      	cmp	r3, #16
 800b478:	bfde      	ittt	le
 800b47a:	9e08      	ldrle	r6, [sp, #32]
 800b47c:	434e      	mulle	r6, r1
 800b47e:	9608      	strle	r6, [sp, #32]
 800b480:	e7e1      	b.n	800b446 <_strtod_l+0x216>
 800b482:	280f      	cmp	r0, #15
 800b484:	dceb      	bgt.n	800b45e <_strtod_l+0x22e>
 800b486:	9808      	ldr	r0, [sp, #32]
 800b488:	230a      	movs	r3, #10
 800b48a:	fb03 2300 	mla	r3, r3, r0, r2
 800b48e:	9308      	str	r3, [sp, #32]
 800b490:	e7e5      	b.n	800b45e <_strtod_l+0x22e>
 800b492:	4629      	mov	r1, r5
 800b494:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b496:	1c50      	adds	r0, r2, #1
 800b498:	9019      	str	r0, [sp, #100]	@ 0x64
 800b49a:	7852      	ldrb	r2, [r2, #1]
 800b49c:	4618      	mov	r0, r3
 800b49e:	460d      	mov	r5, r1
 800b4a0:	e7b1      	b.n	800b406 <_strtod_l+0x1d6>
 800b4a2:	f04f 0900 	mov.w	r9, #0
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e77d      	b.n	800b3a6 <_strtod_l+0x176>
 800b4aa:	f04f 0c00 	mov.w	ip, #0
 800b4ae:	1ca2      	adds	r2, r4, #2
 800b4b0:	9219      	str	r2, [sp, #100]	@ 0x64
 800b4b2:	78a2      	ldrb	r2, [r4, #2]
 800b4b4:	e785      	b.n	800b3c2 <_strtod_l+0x192>
 800b4b6:	f04f 0c01 	mov.w	ip, #1
 800b4ba:	e7f8      	b.n	800b4ae <_strtod_l+0x27e>
 800b4bc:	0800d378 	.word	0x0800d378
 800b4c0:	0800d360 	.word	0x0800d360
 800b4c4:	7ff00000 	.word	0x7ff00000
 800b4c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b4ca:	1c51      	adds	r1, r2, #1
 800b4cc:	9119      	str	r1, [sp, #100]	@ 0x64
 800b4ce:	7852      	ldrb	r2, [r2, #1]
 800b4d0:	2a30      	cmp	r2, #48	@ 0x30
 800b4d2:	d0f9      	beq.n	800b4c8 <_strtod_l+0x298>
 800b4d4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b4d8:	2908      	cmp	r1, #8
 800b4da:	f63f af78 	bhi.w	800b3ce <_strtod_l+0x19e>
 800b4de:	3a30      	subs	r2, #48	@ 0x30
 800b4e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b4e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b4e4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b4e6:	f04f 080a 	mov.w	r8, #10
 800b4ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b4ec:	1c56      	adds	r6, r2, #1
 800b4ee:	9619      	str	r6, [sp, #100]	@ 0x64
 800b4f0:	7852      	ldrb	r2, [r2, #1]
 800b4f2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b4f6:	f1be 0f09 	cmp.w	lr, #9
 800b4fa:	d939      	bls.n	800b570 <_strtod_l+0x340>
 800b4fc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b4fe:	1a76      	subs	r6, r6, r1
 800b500:	2e08      	cmp	r6, #8
 800b502:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b506:	dc03      	bgt.n	800b510 <_strtod_l+0x2e0>
 800b508:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b50a:	4588      	cmp	r8, r1
 800b50c:	bfa8      	it	ge
 800b50e:	4688      	movge	r8, r1
 800b510:	f1bc 0f00 	cmp.w	ip, #0
 800b514:	d001      	beq.n	800b51a <_strtod_l+0x2ea>
 800b516:	f1c8 0800 	rsb	r8, r8, #0
 800b51a:	2d00      	cmp	r5, #0
 800b51c:	d14e      	bne.n	800b5bc <_strtod_l+0x38c>
 800b51e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b520:	4308      	orrs	r0, r1
 800b522:	f47f aebe 	bne.w	800b2a2 <_strtod_l+0x72>
 800b526:	2b00      	cmp	r3, #0
 800b528:	f47f aed6 	bne.w	800b2d8 <_strtod_l+0xa8>
 800b52c:	2a69      	cmp	r2, #105	@ 0x69
 800b52e:	d028      	beq.n	800b582 <_strtod_l+0x352>
 800b530:	dc25      	bgt.n	800b57e <_strtod_l+0x34e>
 800b532:	2a49      	cmp	r2, #73	@ 0x49
 800b534:	d025      	beq.n	800b582 <_strtod_l+0x352>
 800b536:	2a4e      	cmp	r2, #78	@ 0x4e
 800b538:	f47f aece 	bne.w	800b2d8 <_strtod_l+0xa8>
 800b53c:	499b      	ldr	r1, [pc, #620]	@ (800b7ac <_strtod_l+0x57c>)
 800b53e:	a819      	add	r0, sp, #100	@ 0x64
 800b540:	f001 f9e2 	bl	800c908 <__match>
 800b544:	2800      	cmp	r0, #0
 800b546:	f43f aec7 	beq.w	800b2d8 <_strtod_l+0xa8>
 800b54a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	2b28      	cmp	r3, #40	@ 0x28
 800b550:	d12e      	bne.n	800b5b0 <_strtod_l+0x380>
 800b552:	4997      	ldr	r1, [pc, #604]	@ (800b7b0 <_strtod_l+0x580>)
 800b554:	aa1c      	add	r2, sp, #112	@ 0x70
 800b556:	a819      	add	r0, sp, #100	@ 0x64
 800b558:	f001 f9ea 	bl	800c930 <__hexnan>
 800b55c:	2805      	cmp	r0, #5
 800b55e:	d127      	bne.n	800b5b0 <_strtod_l+0x380>
 800b560:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b562:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b566:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b56a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b56e:	e698      	b.n	800b2a2 <_strtod_l+0x72>
 800b570:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b572:	fb08 2101 	mla	r1, r8, r1, r2
 800b576:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b57a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b57c:	e7b5      	b.n	800b4ea <_strtod_l+0x2ba>
 800b57e:	2a6e      	cmp	r2, #110	@ 0x6e
 800b580:	e7da      	b.n	800b538 <_strtod_l+0x308>
 800b582:	498c      	ldr	r1, [pc, #560]	@ (800b7b4 <_strtod_l+0x584>)
 800b584:	a819      	add	r0, sp, #100	@ 0x64
 800b586:	f001 f9bf 	bl	800c908 <__match>
 800b58a:	2800      	cmp	r0, #0
 800b58c:	f43f aea4 	beq.w	800b2d8 <_strtod_l+0xa8>
 800b590:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b592:	4989      	ldr	r1, [pc, #548]	@ (800b7b8 <_strtod_l+0x588>)
 800b594:	3b01      	subs	r3, #1
 800b596:	a819      	add	r0, sp, #100	@ 0x64
 800b598:	9319      	str	r3, [sp, #100]	@ 0x64
 800b59a:	f001 f9b5 	bl	800c908 <__match>
 800b59e:	b910      	cbnz	r0, 800b5a6 <_strtod_l+0x376>
 800b5a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	9319      	str	r3, [sp, #100]	@ 0x64
 800b5a6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b7c8 <_strtod_l+0x598>
 800b5aa:	f04f 0a00 	mov.w	sl, #0
 800b5ae:	e678      	b.n	800b2a2 <_strtod_l+0x72>
 800b5b0:	4882      	ldr	r0, [pc, #520]	@ (800b7bc <_strtod_l+0x58c>)
 800b5b2:	f000 fee5 	bl	800c380 <nan>
 800b5b6:	ec5b ab10 	vmov	sl, fp, d0
 800b5ba:	e672      	b.n	800b2a2 <_strtod_l+0x72>
 800b5bc:	eba8 0309 	sub.w	r3, r8, r9
 800b5c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b5c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5c4:	2f00      	cmp	r7, #0
 800b5c6:	bf08      	it	eq
 800b5c8:	462f      	moveq	r7, r5
 800b5ca:	2d10      	cmp	r5, #16
 800b5cc:	462c      	mov	r4, r5
 800b5ce:	bfa8      	it	ge
 800b5d0:	2410      	movge	r4, #16
 800b5d2:	f7f4 ffbf 	bl	8000554 <__aeabi_ui2d>
 800b5d6:	2d09      	cmp	r5, #9
 800b5d8:	4682      	mov	sl, r0
 800b5da:	468b      	mov	fp, r1
 800b5dc:	dc13      	bgt.n	800b606 <_strtod_l+0x3d6>
 800b5de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	f43f ae5e 	beq.w	800b2a2 <_strtod_l+0x72>
 800b5e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5e8:	dd78      	ble.n	800b6dc <_strtod_l+0x4ac>
 800b5ea:	2b16      	cmp	r3, #22
 800b5ec:	dc5f      	bgt.n	800b6ae <_strtod_l+0x47e>
 800b5ee:	4974      	ldr	r1, [pc, #464]	@ (800b7c0 <_strtod_l+0x590>)
 800b5f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b5f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5f8:	4652      	mov	r2, sl
 800b5fa:	465b      	mov	r3, fp
 800b5fc:	f7f5 f824 	bl	8000648 <__aeabi_dmul>
 800b600:	4682      	mov	sl, r0
 800b602:	468b      	mov	fp, r1
 800b604:	e64d      	b.n	800b2a2 <_strtod_l+0x72>
 800b606:	4b6e      	ldr	r3, [pc, #440]	@ (800b7c0 <_strtod_l+0x590>)
 800b608:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b60c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b610:	f7f5 f81a 	bl	8000648 <__aeabi_dmul>
 800b614:	4682      	mov	sl, r0
 800b616:	9808      	ldr	r0, [sp, #32]
 800b618:	468b      	mov	fp, r1
 800b61a:	f7f4 ff9b 	bl	8000554 <__aeabi_ui2d>
 800b61e:	4602      	mov	r2, r0
 800b620:	460b      	mov	r3, r1
 800b622:	4650      	mov	r0, sl
 800b624:	4659      	mov	r1, fp
 800b626:	f7f4 fe59 	bl	80002dc <__adddf3>
 800b62a:	2d0f      	cmp	r5, #15
 800b62c:	4682      	mov	sl, r0
 800b62e:	468b      	mov	fp, r1
 800b630:	ddd5      	ble.n	800b5de <_strtod_l+0x3ae>
 800b632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b634:	1b2c      	subs	r4, r5, r4
 800b636:	441c      	add	r4, r3
 800b638:	2c00      	cmp	r4, #0
 800b63a:	f340 8096 	ble.w	800b76a <_strtod_l+0x53a>
 800b63e:	f014 030f 	ands.w	r3, r4, #15
 800b642:	d00a      	beq.n	800b65a <_strtod_l+0x42a>
 800b644:	495e      	ldr	r1, [pc, #376]	@ (800b7c0 <_strtod_l+0x590>)
 800b646:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b64a:	4652      	mov	r2, sl
 800b64c:	465b      	mov	r3, fp
 800b64e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b652:	f7f4 fff9 	bl	8000648 <__aeabi_dmul>
 800b656:	4682      	mov	sl, r0
 800b658:	468b      	mov	fp, r1
 800b65a:	f034 040f 	bics.w	r4, r4, #15
 800b65e:	d073      	beq.n	800b748 <_strtod_l+0x518>
 800b660:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b664:	dd48      	ble.n	800b6f8 <_strtod_l+0x4c8>
 800b666:	2400      	movs	r4, #0
 800b668:	46a0      	mov	r8, r4
 800b66a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b66c:	46a1      	mov	r9, r4
 800b66e:	9a05      	ldr	r2, [sp, #20]
 800b670:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b7c8 <_strtod_l+0x598>
 800b674:	2322      	movs	r3, #34	@ 0x22
 800b676:	6013      	str	r3, [r2, #0]
 800b678:	f04f 0a00 	mov.w	sl, #0
 800b67c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b67e:	2b00      	cmp	r3, #0
 800b680:	f43f ae0f 	beq.w	800b2a2 <_strtod_l+0x72>
 800b684:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b686:	9805      	ldr	r0, [sp, #20]
 800b688:	f7ff f942 	bl	800a910 <_Bfree>
 800b68c:	9805      	ldr	r0, [sp, #20]
 800b68e:	4649      	mov	r1, r9
 800b690:	f7ff f93e 	bl	800a910 <_Bfree>
 800b694:	9805      	ldr	r0, [sp, #20]
 800b696:	4641      	mov	r1, r8
 800b698:	f7ff f93a 	bl	800a910 <_Bfree>
 800b69c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b69e:	9805      	ldr	r0, [sp, #20]
 800b6a0:	f7ff f936 	bl	800a910 <_Bfree>
 800b6a4:	9805      	ldr	r0, [sp, #20]
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	f7ff f932 	bl	800a910 <_Bfree>
 800b6ac:	e5f9      	b.n	800b2a2 <_strtod_l+0x72>
 800b6ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	dbbc      	blt.n	800b632 <_strtod_l+0x402>
 800b6b8:	4c41      	ldr	r4, [pc, #260]	@ (800b7c0 <_strtod_l+0x590>)
 800b6ba:	f1c5 050f 	rsb	r5, r5, #15
 800b6be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b6c2:	4652      	mov	r2, sl
 800b6c4:	465b      	mov	r3, fp
 800b6c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6ca:	f7f4 ffbd 	bl	8000648 <__aeabi_dmul>
 800b6ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6d0:	1b5d      	subs	r5, r3, r5
 800b6d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b6d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b6da:	e78f      	b.n	800b5fc <_strtod_l+0x3cc>
 800b6dc:	3316      	adds	r3, #22
 800b6de:	dba8      	blt.n	800b632 <_strtod_l+0x402>
 800b6e0:	4b37      	ldr	r3, [pc, #220]	@ (800b7c0 <_strtod_l+0x590>)
 800b6e2:	eba9 0808 	sub.w	r8, r9, r8
 800b6e6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b6ea:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b6ee:	4650      	mov	r0, sl
 800b6f0:	4659      	mov	r1, fp
 800b6f2:	f7f5 f8d3 	bl	800089c <__aeabi_ddiv>
 800b6f6:	e783      	b.n	800b600 <_strtod_l+0x3d0>
 800b6f8:	4b32      	ldr	r3, [pc, #200]	@ (800b7c4 <_strtod_l+0x594>)
 800b6fa:	9308      	str	r3, [sp, #32]
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	1124      	asrs	r4, r4, #4
 800b700:	4650      	mov	r0, sl
 800b702:	4659      	mov	r1, fp
 800b704:	461e      	mov	r6, r3
 800b706:	2c01      	cmp	r4, #1
 800b708:	dc21      	bgt.n	800b74e <_strtod_l+0x51e>
 800b70a:	b10b      	cbz	r3, 800b710 <_strtod_l+0x4e0>
 800b70c:	4682      	mov	sl, r0
 800b70e:	468b      	mov	fp, r1
 800b710:	492c      	ldr	r1, [pc, #176]	@ (800b7c4 <_strtod_l+0x594>)
 800b712:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b716:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b71a:	4652      	mov	r2, sl
 800b71c:	465b      	mov	r3, fp
 800b71e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b722:	f7f4 ff91 	bl	8000648 <__aeabi_dmul>
 800b726:	4b28      	ldr	r3, [pc, #160]	@ (800b7c8 <_strtod_l+0x598>)
 800b728:	460a      	mov	r2, r1
 800b72a:	400b      	ands	r3, r1
 800b72c:	4927      	ldr	r1, [pc, #156]	@ (800b7cc <_strtod_l+0x59c>)
 800b72e:	428b      	cmp	r3, r1
 800b730:	4682      	mov	sl, r0
 800b732:	d898      	bhi.n	800b666 <_strtod_l+0x436>
 800b734:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b738:	428b      	cmp	r3, r1
 800b73a:	bf86      	itte	hi
 800b73c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b7d0 <_strtod_l+0x5a0>
 800b740:	f04f 3aff 	movhi.w	sl, #4294967295
 800b744:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b748:	2300      	movs	r3, #0
 800b74a:	9308      	str	r3, [sp, #32]
 800b74c:	e07a      	b.n	800b844 <_strtod_l+0x614>
 800b74e:	07e2      	lsls	r2, r4, #31
 800b750:	d505      	bpl.n	800b75e <_strtod_l+0x52e>
 800b752:	9b08      	ldr	r3, [sp, #32]
 800b754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b758:	f7f4 ff76 	bl	8000648 <__aeabi_dmul>
 800b75c:	2301      	movs	r3, #1
 800b75e:	9a08      	ldr	r2, [sp, #32]
 800b760:	3208      	adds	r2, #8
 800b762:	3601      	adds	r6, #1
 800b764:	1064      	asrs	r4, r4, #1
 800b766:	9208      	str	r2, [sp, #32]
 800b768:	e7cd      	b.n	800b706 <_strtod_l+0x4d6>
 800b76a:	d0ed      	beq.n	800b748 <_strtod_l+0x518>
 800b76c:	4264      	negs	r4, r4
 800b76e:	f014 020f 	ands.w	r2, r4, #15
 800b772:	d00a      	beq.n	800b78a <_strtod_l+0x55a>
 800b774:	4b12      	ldr	r3, [pc, #72]	@ (800b7c0 <_strtod_l+0x590>)
 800b776:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b77a:	4650      	mov	r0, sl
 800b77c:	4659      	mov	r1, fp
 800b77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b782:	f7f5 f88b 	bl	800089c <__aeabi_ddiv>
 800b786:	4682      	mov	sl, r0
 800b788:	468b      	mov	fp, r1
 800b78a:	1124      	asrs	r4, r4, #4
 800b78c:	d0dc      	beq.n	800b748 <_strtod_l+0x518>
 800b78e:	2c1f      	cmp	r4, #31
 800b790:	dd20      	ble.n	800b7d4 <_strtod_l+0x5a4>
 800b792:	2400      	movs	r4, #0
 800b794:	46a0      	mov	r8, r4
 800b796:	940a      	str	r4, [sp, #40]	@ 0x28
 800b798:	46a1      	mov	r9, r4
 800b79a:	9a05      	ldr	r2, [sp, #20]
 800b79c:	2322      	movs	r3, #34	@ 0x22
 800b79e:	f04f 0a00 	mov.w	sl, #0
 800b7a2:	f04f 0b00 	mov.w	fp, #0
 800b7a6:	6013      	str	r3, [r2, #0]
 800b7a8:	e768      	b.n	800b67c <_strtod_l+0x44c>
 800b7aa:	bf00      	nop
 800b7ac:	0800d151 	.word	0x0800d151
 800b7b0:	0800d364 	.word	0x0800d364
 800b7b4:	0800d149 	.word	0x0800d149
 800b7b8:	0800d180 	.word	0x0800d180
 800b7bc:	0800d50d 	.word	0x0800d50d
 800b7c0:	0800d298 	.word	0x0800d298
 800b7c4:	0800d270 	.word	0x0800d270
 800b7c8:	7ff00000 	.word	0x7ff00000
 800b7cc:	7ca00000 	.word	0x7ca00000
 800b7d0:	7fefffff 	.word	0x7fefffff
 800b7d4:	f014 0310 	ands.w	r3, r4, #16
 800b7d8:	bf18      	it	ne
 800b7da:	236a      	movne	r3, #106	@ 0x6a
 800b7dc:	4ea9      	ldr	r6, [pc, #676]	@ (800ba84 <_strtod_l+0x854>)
 800b7de:	9308      	str	r3, [sp, #32]
 800b7e0:	4650      	mov	r0, sl
 800b7e2:	4659      	mov	r1, fp
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	07e2      	lsls	r2, r4, #31
 800b7e8:	d504      	bpl.n	800b7f4 <_strtod_l+0x5c4>
 800b7ea:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b7ee:	f7f4 ff2b 	bl	8000648 <__aeabi_dmul>
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	1064      	asrs	r4, r4, #1
 800b7f6:	f106 0608 	add.w	r6, r6, #8
 800b7fa:	d1f4      	bne.n	800b7e6 <_strtod_l+0x5b6>
 800b7fc:	b10b      	cbz	r3, 800b802 <_strtod_l+0x5d2>
 800b7fe:	4682      	mov	sl, r0
 800b800:	468b      	mov	fp, r1
 800b802:	9b08      	ldr	r3, [sp, #32]
 800b804:	b1b3      	cbz	r3, 800b834 <_strtod_l+0x604>
 800b806:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b80a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b80e:	2b00      	cmp	r3, #0
 800b810:	4659      	mov	r1, fp
 800b812:	dd0f      	ble.n	800b834 <_strtod_l+0x604>
 800b814:	2b1f      	cmp	r3, #31
 800b816:	dd55      	ble.n	800b8c4 <_strtod_l+0x694>
 800b818:	2b34      	cmp	r3, #52	@ 0x34
 800b81a:	bfde      	ittt	le
 800b81c:	f04f 33ff 	movle.w	r3, #4294967295
 800b820:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b824:	4093      	lslle	r3, r2
 800b826:	f04f 0a00 	mov.w	sl, #0
 800b82a:	bfcc      	ite	gt
 800b82c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b830:	ea03 0b01 	andle.w	fp, r3, r1
 800b834:	2200      	movs	r2, #0
 800b836:	2300      	movs	r3, #0
 800b838:	4650      	mov	r0, sl
 800b83a:	4659      	mov	r1, fp
 800b83c:	f7f5 f96c 	bl	8000b18 <__aeabi_dcmpeq>
 800b840:	2800      	cmp	r0, #0
 800b842:	d1a6      	bne.n	800b792 <_strtod_l+0x562>
 800b844:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b846:	9300      	str	r3, [sp, #0]
 800b848:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b84a:	9805      	ldr	r0, [sp, #20]
 800b84c:	462b      	mov	r3, r5
 800b84e:	463a      	mov	r2, r7
 800b850:	f7ff f8c6 	bl	800a9e0 <__s2b>
 800b854:	900a      	str	r0, [sp, #40]	@ 0x28
 800b856:	2800      	cmp	r0, #0
 800b858:	f43f af05 	beq.w	800b666 <_strtod_l+0x436>
 800b85c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b85e:	2a00      	cmp	r2, #0
 800b860:	eba9 0308 	sub.w	r3, r9, r8
 800b864:	bfa8      	it	ge
 800b866:	2300      	movge	r3, #0
 800b868:	9312      	str	r3, [sp, #72]	@ 0x48
 800b86a:	2400      	movs	r4, #0
 800b86c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b870:	9316      	str	r3, [sp, #88]	@ 0x58
 800b872:	46a0      	mov	r8, r4
 800b874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b876:	9805      	ldr	r0, [sp, #20]
 800b878:	6859      	ldr	r1, [r3, #4]
 800b87a:	f7ff f809 	bl	800a890 <_Balloc>
 800b87e:	4681      	mov	r9, r0
 800b880:	2800      	cmp	r0, #0
 800b882:	f43f aef4 	beq.w	800b66e <_strtod_l+0x43e>
 800b886:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b888:	691a      	ldr	r2, [r3, #16]
 800b88a:	3202      	adds	r2, #2
 800b88c:	f103 010c 	add.w	r1, r3, #12
 800b890:	0092      	lsls	r2, r2, #2
 800b892:	300c      	adds	r0, #12
 800b894:	f7fe f899 	bl	80099ca <memcpy>
 800b898:	ec4b ab10 	vmov	d0, sl, fp
 800b89c:	9805      	ldr	r0, [sp, #20]
 800b89e:	aa1c      	add	r2, sp, #112	@ 0x70
 800b8a0:	a91b      	add	r1, sp, #108	@ 0x6c
 800b8a2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b8a6:	f7ff fbd7 	bl	800b058 <__d2b>
 800b8aa:	901a      	str	r0, [sp, #104]	@ 0x68
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	f43f aede 	beq.w	800b66e <_strtod_l+0x43e>
 800b8b2:	9805      	ldr	r0, [sp, #20]
 800b8b4:	2101      	movs	r1, #1
 800b8b6:	f7ff f929 	bl	800ab0c <__i2b>
 800b8ba:	4680      	mov	r8, r0
 800b8bc:	b948      	cbnz	r0, 800b8d2 <_strtod_l+0x6a2>
 800b8be:	f04f 0800 	mov.w	r8, #0
 800b8c2:	e6d4      	b.n	800b66e <_strtod_l+0x43e>
 800b8c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b8c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b8cc:	ea03 0a0a 	and.w	sl, r3, sl
 800b8d0:	e7b0      	b.n	800b834 <_strtod_l+0x604>
 800b8d2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b8d4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b8d6:	2d00      	cmp	r5, #0
 800b8d8:	bfab      	itete	ge
 800b8da:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b8dc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b8de:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b8e0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b8e2:	bfac      	ite	ge
 800b8e4:	18ef      	addge	r7, r5, r3
 800b8e6:	1b5e      	sublt	r6, r3, r5
 800b8e8:	9b08      	ldr	r3, [sp, #32]
 800b8ea:	1aed      	subs	r5, r5, r3
 800b8ec:	4415      	add	r5, r2
 800b8ee:	4b66      	ldr	r3, [pc, #408]	@ (800ba88 <_strtod_l+0x858>)
 800b8f0:	3d01      	subs	r5, #1
 800b8f2:	429d      	cmp	r5, r3
 800b8f4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b8f8:	da50      	bge.n	800b99c <_strtod_l+0x76c>
 800b8fa:	1b5b      	subs	r3, r3, r5
 800b8fc:	2b1f      	cmp	r3, #31
 800b8fe:	eba2 0203 	sub.w	r2, r2, r3
 800b902:	f04f 0101 	mov.w	r1, #1
 800b906:	dc3d      	bgt.n	800b984 <_strtod_l+0x754>
 800b908:	fa01 f303 	lsl.w	r3, r1, r3
 800b90c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b90e:	2300      	movs	r3, #0
 800b910:	9310      	str	r3, [sp, #64]	@ 0x40
 800b912:	18bd      	adds	r5, r7, r2
 800b914:	9b08      	ldr	r3, [sp, #32]
 800b916:	42af      	cmp	r7, r5
 800b918:	4416      	add	r6, r2
 800b91a:	441e      	add	r6, r3
 800b91c:	463b      	mov	r3, r7
 800b91e:	bfa8      	it	ge
 800b920:	462b      	movge	r3, r5
 800b922:	42b3      	cmp	r3, r6
 800b924:	bfa8      	it	ge
 800b926:	4633      	movge	r3, r6
 800b928:	2b00      	cmp	r3, #0
 800b92a:	bfc2      	ittt	gt
 800b92c:	1aed      	subgt	r5, r5, r3
 800b92e:	1af6      	subgt	r6, r6, r3
 800b930:	1aff      	subgt	r7, r7, r3
 800b932:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b934:	2b00      	cmp	r3, #0
 800b936:	dd16      	ble.n	800b966 <_strtod_l+0x736>
 800b938:	4641      	mov	r1, r8
 800b93a:	9805      	ldr	r0, [sp, #20]
 800b93c:	461a      	mov	r2, r3
 800b93e:	f7ff f9a5 	bl	800ac8c <__pow5mult>
 800b942:	4680      	mov	r8, r0
 800b944:	2800      	cmp	r0, #0
 800b946:	d0ba      	beq.n	800b8be <_strtod_l+0x68e>
 800b948:	4601      	mov	r1, r0
 800b94a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b94c:	9805      	ldr	r0, [sp, #20]
 800b94e:	f7ff f8f3 	bl	800ab38 <__multiply>
 800b952:	900e      	str	r0, [sp, #56]	@ 0x38
 800b954:	2800      	cmp	r0, #0
 800b956:	f43f ae8a 	beq.w	800b66e <_strtod_l+0x43e>
 800b95a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b95c:	9805      	ldr	r0, [sp, #20]
 800b95e:	f7fe ffd7 	bl	800a910 <_Bfree>
 800b962:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b964:	931a      	str	r3, [sp, #104]	@ 0x68
 800b966:	2d00      	cmp	r5, #0
 800b968:	dc1d      	bgt.n	800b9a6 <_strtod_l+0x776>
 800b96a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	dd23      	ble.n	800b9b8 <_strtod_l+0x788>
 800b970:	4649      	mov	r1, r9
 800b972:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b974:	9805      	ldr	r0, [sp, #20]
 800b976:	f7ff f989 	bl	800ac8c <__pow5mult>
 800b97a:	4681      	mov	r9, r0
 800b97c:	b9e0      	cbnz	r0, 800b9b8 <_strtod_l+0x788>
 800b97e:	f04f 0900 	mov.w	r9, #0
 800b982:	e674      	b.n	800b66e <_strtod_l+0x43e>
 800b984:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b988:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b98c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b990:	35e2      	adds	r5, #226	@ 0xe2
 800b992:	fa01 f305 	lsl.w	r3, r1, r5
 800b996:	9310      	str	r3, [sp, #64]	@ 0x40
 800b998:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b99a:	e7ba      	b.n	800b912 <_strtod_l+0x6e2>
 800b99c:	2300      	movs	r3, #0
 800b99e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b9a4:	e7b5      	b.n	800b912 <_strtod_l+0x6e2>
 800b9a6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b9a8:	9805      	ldr	r0, [sp, #20]
 800b9aa:	462a      	mov	r2, r5
 800b9ac:	f7ff f9c8 	bl	800ad40 <__lshift>
 800b9b0:	901a      	str	r0, [sp, #104]	@ 0x68
 800b9b2:	2800      	cmp	r0, #0
 800b9b4:	d1d9      	bne.n	800b96a <_strtod_l+0x73a>
 800b9b6:	e65a      	b.n	800b66e <_strtod_l+0x43e>
 800b9b8:	2e00      	cmp	r6, #0
 800b9ba:	dd07      	ble.n	800b9cc <_strtod_l+0x79c>
 800b9bc:	4649      	mov	r1, r9
 800b9be:	9805      	ldr	r0, [sp, #20]
 800b9c0:	4632      	mov	r2, r6
 800b9c2:	f7ff f9bd 	bl	800ad40 <__lshift>
 800b9c6:	4681      	mov	r9, r0
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d0d8      	beq.n	800b97e <_strtod_l+0x74e>
 800b9cc:	2f00      	cmp	r7, #0
 800b9ce:	dd08      	ble.n	800b9e2 <_strtod_l+0x7b2>
 800b9d0:	4641      	mov	r1, r8
 800b9d2:	9805      	ldr	r0, [sp, #20]
 800b9d4:	463a      	mov	r2, r7
 800b9d6:	f7ff f9b3 	bl	800ad40 <__lshift>
 800b9da:	4680      	mov	r8, r0
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	f43f ae46 	beq.w	800b66e <_strtod_l+0x43e>
 800b9e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b9e4:	9805      	ldr	r0, [sp, #20]
 800b9e6:	464a      	mov	r2, r9
 800b9e8:	f7ff fa32 	bl	800ae50 <__mdiff>
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	f43f ae3d 	beq.w	800b66e <_strtod_l+0x43e>
 800b9f4:	68c3      	ldr	r3, [r0, #12]
 800b9f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	60c3      	str	r3, [r0, #12]
 800b9fc:	4641      	mov	r1, r8
 800b9fe:	f7ff fa0b 	bl	800ae18 <__mcmp>
 800ba02:	2800      	cmp	r0, #0
 800ba04:	da46      	bge.n	800ba94 <_strtod_l+0x864>
 800ba06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba08:	ea53 030a 	orrs.w	r3, r3, sl
 800ba0c:	d16c      	bne.n	800bae8 <_strtod_l+0x8b8>
 800ba0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d168      	bne.n	800bae8 <_strtod_l+0x8b8>
 800ba16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ba1a:	0d1b      	lsrs	r3, r3, #20
 800ba1c:	051b      	lsls	r3, r3, #20
 800ba1e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ba22:	d961      	bls.n	800bae8 <_strtod_l+0x8b8>
 800ba24:	6963      	ldr	r3, [r4, #20]
 800ba26:	b913      	cbnz	r3, 800ba2e <_strtod_l+0x7fe>
 800ba28:	6923      	ldr	r3, [r4, #16]
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	dd5c      	ble.n	800bae8 <_strtod_l+0x8b8>
 800ba2e:	4621      	mov	r1, r4
 800ba30:	2201      	movs	r2, #1
 800ba32:	9805      	ldr	r0, [sp, #20]
 800ba34:	f7ff f984 	bl	800ad40 <__lshift>
 800ba38:	4641      	mov	r1, r8
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	f7ff f9ec 	bl	800ae18 <__mcmp>
 800ba40:	2800      	cmp	r0, #0
 800ba42:	dd51      	ble.n	800bae8 <_strtod_l+0x8b8>
 800ba44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ba48:	9a08      	ldr	r2, [sp, #32]
 800ba4a:	0d1b      	lsrs	r3, r3, #20
 800ba4c:	051b      	lsls	r3, r3, #20
 800ba4e:	2a00      	cmp	r2, #0
 800ba50:	d06b      	beq.n	800bb2a <_strtod_l+0x8fa>
 800ba52:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ba56:	d868      	bhi.n	800bb2a <_strtod_l+0x8fa>
 800ba58:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ba5c:	f67f ae9d 	bls.w	800b79a <_strtod_l+0x56a>
 800ba60:	4b0a      	ldr	r3, [pc, #40]	@ (800ba8c <_strtod_l+0x85c>)
 800ba62:	4650      	mov	r0, sl
 800ba64:	4659      	mov	r1, fp
 800ba66:	2200      	movs	r2, #0
 800ba68:	f7f4 fdee 	bl	8000648 <__aeabi_dmul>
 800ba6c:	4b08      	ldr	r3, [pc, #32]	@ (800ba90 <_strtod_l+0x860>)
 800ba6e:	400b      	ands	r3, r1
 800ba70:	4682      	mov	sl, r0
 800ba72:	468b      	mov	fp, r1
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	f47f ae05 	bne.w	800b684 <_strtod_l+0x454>
 800ba7a:	9a05      	ldr	r2, [sp, #20]
 800ba7c:	2322      	movs	r3, #34	@ 0x22
 800ba7e:	6013      	str	r3, [r2, #0]
 800ba80:	e600      	b.n	800b684 <_strtod_l+0x454>
 800ba82:	bf00      	nop
 800ba84:	0800d390 	.word	0x0800d390
 800ba88:	fffffc02 	.word	0xfffffc02
 800ba8c:	39500000 	.word	0x39500000
 800ba90:	7ff00000 	.word	0x7ff00000
 800ba94:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ba98:	d165      	bne.n	800bb66 <_strtod_l+0x936>
 800ba9a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ba9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800baa0:	b35a      	cbz	r2, 800bafa <_strtod_l+0x8ca>
 800baa2:	4a9f      	ldr	r2, [pc, #636]	@ (800bd20 <_strtod_l+0xaf0>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d12b      	bne.n	800bb00 <_strtod_l+0x8d0>
 800baa8:	9b08      	ldr	r3, [sp, #32]
 800baaa:	4651      	mov	r1, sl
 800baac:	b303      	cbz	r3, 800baf0 <_strtod_l+0x8c0>
 800baae:	4b9d      	ldr	r3, [pc, #628]	@ (800bd24 <_strtod_l+0xaf4>)
 800bab0:	465a      	mov	r2, fp
 800bab2:	4013      	ands	r3, r2
 800bab4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bab8:	f04f 32ff 	mov.w	r2, #4294967295
 800babc:	d81b      	bhi.n	800baf6 <_strtod_l+0x8c6>
 800babe:	0d1b      	lsrs	r3, r3, #20
 800bac0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bac4:	fa02 f303 	lsl.w	r3, r2, r3
 800bac8:	4299      	cmp	r1, r3
 800baca:	d119      	bne.n	800bb00 <_strtod_l+0x8d0>
 800bacc:	4b96      	ldr	r3, [pc, #600]	@ (800bd28 <_strtod_l+0xaf8>)
 800bace:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d102      	bne.n	800bada <_strtod_l+0x8aa>
 800bad4:	3101      	adds	r1, #1
 800bad6:	f43f adca 	beq.w	800b66e <_strtod_l+0x43e>
 800bada:	4b92      	ldr	r3, [pc, #584]	@ (800bd24 <_strtod_l+0xaf4>)
 800badc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bade:	401a      	ands	r2, r3
 800bae0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bae4:	f04f 0a00 	mov.w	sl, #0
 800bae8:	9b08      	ldr	r3, [sp, #32]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d1b8      	bne.n	800ba60 <_strtod_l+0x830>
 800baee:	e5c9      	b.n	800b684 <_strtod_l+0x454>
 800baf0:	f04f 33ff 	mov.w	r3, #4294967295
 800baf4:	e7e8      	b.n	800bac8 <_strtod_l+0x898>
 800baf6:	4613      	mov	r3, r2
 800baf8:	e7e6      	b.n	800bac8 <_strtod_l+0x898>
 800bafa:	ea53 030a 	orrs.w	r3, r3, sl
 800bafe:	d0a1      	beq.n	800ba44 <_strtod_l+0x814>
 800bb00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bb02:	b1db      	cbz	r3, 800bb3c <_strtod_l+0x90c>
 800bb04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb06:	4213      	tst	r3, r2
 800bb08:	d0ee      	beq.n	800bae8 <_strtod_l+0x8b8>
 800bb0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb0c:	9a08      	ldr	r2, [sp, #32]
 800bb0e:	4650      	mov	r0, sl
 800bb10:	4659      	mov	r1, fp
 800bb12:	b1bb      	cbz	r3, 800bb44 <_strtod_l+0x914>
 800bb14:	f7ff fb6e 	bl	800b1f4 <sulp>
 800bb18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb1c:	ec53 2b10 	vmov	r2, r3, d0
 800bb20:	f7f4 fbdc 	bl	80002dc <__adddf3>
 800bb24:	4682      	mov	sl, r0
 800bb26:	468b      	mov	fp, r1
 800bb28:	e7de      	b.n	800bae8 <_strtod_l+0x8b8>
 800bb2a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bb2e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bb32:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bb36:	f04f 3aff 	mov.w	sl, #4294967295
 800bb3a:	e7d5      	b.n	800bae8 <_strtod_l+0x8b8>
 800bb3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bb3e:	ea13 0f0a 	tst.w	r3, sl
 800bb42:	e7e1      	b.n	800bb08 <_strtod_l+0x8d8>
 800bb44:	f7ff fb56 	bl	800b1f4 <sulp>
 800bb48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb4c:	ec53 2b10 	vmov	r2, r3, d0
 800bb50:	f7f4 fbc2 	bl	80002d8 <__aeabi_dsub>
 800bb54:	2200      	movs	r2, #0
 800bb56:	2300      	movs	r3, #0
 800bb58:	4682      	mov	sl, r0
 800bb5a:	468b      	mov	fp, r1
 800bb5c:	f7f4 ffdc 	bl	8000b18 <__aeabi_dcmpeq>
 800bb60:	2800      	cmp	r0, #0
 800bb62:	d0c1      	beq.n	800bae8 <_strtod_l+0x8b8>
 800bb64:	e619      	b.n	800b79a <_strtod_l+0x56a>
 800bb66:	4641      	mov	r1, r8
 800bb68:	4620      	mov	r0, r4
 800bb6a:	f7ff facd 	bl	800b108 <__ratio>
 800bb6e:	ec57 6b10 	vmov	r6, r7, d0
 800bb72:	2200      	movs	r2, #0
 800bb74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bb78:	4630      	mov	r0, r6
 800bb7a:	4639      	mov	r1, r7
 800bb7c:	f7f4 ffe0 	bl	8000b40 <__aeabi_dcmple>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	d06f      	beq.n	800bc64 <_strtod_l+0xa34>
 800bb84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d17a      	bne.n	800bc80 <_strtod_l+0xa50>
 800bb8a:	f1ba 0f00 	cmp.w	sl, #0
 800bb8e:	d158      	bne.n	800bc42 <_strtod_l+0xa12>
 800bb90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d15a      	bne.n	800bc50 <_strtod_l+0xa20>
 800bb9a:	4b64      	ldr	r3, [pc, #400]	@ (800bd2c <_strtod_l+0xafc>)
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	4630      	mov	r0, r6
 800bba0:	4639      	mov	r1, r7
 800bba2:	f7f4 ffc3 	bl	8000b2c <__aeabi_dcmplt>
 800bba6:	2800      	cmp	r0, #0
 800bba8:	d159      	bne.n	800bc5e <_strtod_l+0xa2e>
 800bbaa:	4630      	mov	r0, r6
 800bbac:	4639      	mov	r1, r7
 800bbae:	4b60      	ldr	r3, [pc, #384]	@ (800bd30 <_strtod_l+0xb00>)
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f7f4 fd49 	bl	8000648 <__aeabi_dmul>
 800bbb6:	4606      	mov	r6, r0
 800bbb8:	460f      	mov	r7, r1
 800bbba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bbbe:	9606      	str	r6, [sp, #24]
 800bbc0:	9307      	str	r3, [sp, #28]
 800bbc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bbc6:	4d57      	ldr	r5, [pc, #348]	@ (800bd24 <_strtod_l+0xaf4>)
 800bbc8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bbcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbce:	401d      	ands	r5, r3
 800bbd0:	4b58      	ldr	r3, [pc, #352]	@ (800bd34 <_strtod_l+0xb04>)
 800bbd2:	429d      	cmp	r5, r3
 800bbd4:	f040 80b2 	bne.w	800bd3c <_strtod_l+0xb0c>
 800bbd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbda:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bbde:	ec4b ab10 	vmov	d0, sl, fp
 800bbe2:	f7ff f9c9 	bl	800af78 <__ulp>
 800bbe6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bbea:	ec51 0b10 	vmov	r0, r1, d0
 800bbee:	f7f4 fd2b 	bl	8000648 <__aeabi_dmul>
 800bbf2:	4652      	mov	r2, sl
 800bbf4:	465b      	mov	r3, fp
 800bbf6:	f7f4 fb71 	bl	80002dc <__adddf3>
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	4949      	ldr	r1, [pc, #292]	@ (800bd24 <_strtod_l+0xaf4>)
 800bbfe:	4a4e      	ldr	r2, [pc, #312]	@ (800bd38 <_strtod_l+0xb08>)
 800bc00:	4019      	ands	r1, r3
 800bc02:	4291      	cmp	r1, r2
 800bc04:	4682      	mov	sl, r0
 800bc06:	d942      	bls.n	800bc8e <_strtod_l+0xa5e>
 800bc08:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bc0a:	4b47      	ldr	r3, [pc, #284]	@ (800bd28 <_strtod_l+0xaf8>)
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d103      	bne.n	800bc18 <_strtod_l+0x9e8>
 800bc10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc12:	3301      	adds	r3, #1
 800bc14:	f43f ad2b 	beq.w	800b66e <_strtod_l+0x43e>
 800bc18:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bd28 <_strtod_l+0xaf8>
 800bc1c:	f04f 3aff 	mov.w	sl, #4294967295
 800bc20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc22:	9805      	ldr	r0, [sp, #20]
 800bc24:	f7fe fe74 	bl	800a910 <_Bfree>
 800bc28:	9805      	ldr	r0, [sp, #20]
 800bc2a:	4649      	mov	r1, r9
 800bc2c:	f7fe fe70 	bl	800a910 <_Bfree>
 800bc30:	9805      	ldr	r0, [sp, #20]
 800bc32:	4641      	mov	r1, r8
 800bc34:	f7fe fe6c 	bl	800a910 <_Bfree>
 800bc38:	9805      	ldr	r0, [sp, #20]
 800bc3a:	4621      	mov	r1, r4
 800bc3c:	f7fe fe68 	bl	800a910 <_Bfree>
 800bc40:	e618      	b.n	800b874 <_strtod_l+0x644>
 800bc42:	f1ba 0f01 	cmp.w	sl, #1
 800bc46:	d103      	bne.n	800bc50 <_strtod_l+0xa20>
 800bc48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	f43f ada5 	beq.w	800b79a <_strtod_l+0x56a>
 800bc50:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bd00 <_strtod_l+0xad0>
 800bc54:	4f35      	ldr	r7, [pc, #212]	@ (800bd2c <_strtod_l+0xafc>)
 800bc56:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bc5a:	2600      	movs	r6, #0
 800bc5c:	e7b1      	b.n	800bbc2 <_strtod_l+0x992>
 800bc5e:	4f34      	ldr	r7, [pc, #208]	@ (800bd30 <_strtod_l+0xb00>)
 800bc60:	2600      	movs	r6, #0
 800bc62:	e7aa      	b.n	800bbba <_strtod_l+0x98a>
 800bc64:	4b32      	ldr	r3, [pc, #200]	@ (800bd30 <_strtod_l+0xb00>)
 800bc66:	4630      	mov	r0, r6
 800bc68:	4639      	mov	r1, r7
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f7f4 fcec 	bl	8000648 <__aeabi_dmul>
 800bc70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc72:	4606      	mov	r6, r0
 800bc74:	460f      	mov	r7, r1
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d09f      	beq.n	800bbba <_strtod_l+0x98a>
 800bc7a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bc7e:	e7a0      	b.n	800bbc2 <_strtod_l+0x992>
 800bc80:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bd08 <_strtod_l+0xad8>
 800bc84:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bc88:	ec57 6b17 	vmov	r6, r7, d7
 800bc8c:	e799      	b.n	800bbc2 <_strtod_l+0x992>
 800bc8e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bc92:	9b08      	ldr	r3, [sp, #32]
 800bc94:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1c1      	bne.n	800bc20 <_strtod_l+0x9f0>
 800bc9c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bca0:	0d1b      	lsrs	r3, r3, #20
 800bca2:	051b      	lsls	r3, r3, #20
 800bca4:	429d      	cmp	r5, r3
 800bca6:	d1bb      	bne.n	800bc20 <_strtod_l+0x9f0>
 800bca8:	4630      	mov	r0, r6
 800bcaa:	4639      	mov	r1, r7
 800bcac:	f7f5 f82c 	bl	8000d08 <__aeabi_d2lz>
 800bcb0:	f7f4 fc9c 	bl	80005ec <__aeabi_l2d>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	4630      	mov	r0, r6
 800bcba:	4639      	mov	r1, r7
 800bcbc:	f7f4 fb0c 	bl	80002d8 <__aeabi_dsub>
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bcc8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcce:	ea46 060a 	orr.w	r6, r6, sl
 800bcd2:	431e      	orrs	r6, r3
 800bcd4:	d06f      	beq.n	800bdb6 <_strtod_l+0xb86>
 800bcd6:	a30e      	add	r3, pc, #56	@ (adr r3, 800bd10 <_strtod_l+0xae0>)
 800bcd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcdc:	f7f4 ff26 	bl	8000b2c <__aeabi_dcmplt>
 800bce0:	2800      	cmp	r0, #0
 800bce2:	f47f accf 	bne.w	800b684 <_strtod_l+0x454>
 800bce6:	a30c      	add	r3, pc, #48	@ (adr r3, 800bd18 <_strtod_l+0xae8>)
 800bce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcf0:	f7f4 ff3a 	bl	8000b68 <__aeabi_dcmpgt>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	d093      	beq.n	800bc20 <_strtod_l+0x9f0>
 800bcf8:	e4c4      	b.n	800b684 <_strtod_l+0x454>
 800bcfa:	bf00      	nop
 800bcfc:	f3af 8000 	nop.w
 800bd00:	00000000 	.word	0x00000000
 800bd04:	bff00000 	.word	0xbff00000
 800bd08:	00000000 	.word	0x00000000
 800bd0c:	3ff00000 	.word	0x3ff00000
 800bd10:	94a03595 	.word	0x94a03595
 800bd14:	3fdfffff 	.word	0x3fdfffff
 800bd18:	35afe535 	.word	0x35afe535
 800bd1c:	3fe00000 	.word	0x3fe00000
 800bd20:	000fffff 	.word	0x000fffff
 800bd24:	7ff00000 	.word	0x7ff00000
 800bd28:	7fefffff 	.word	0x7fefffff
 800bd2c:	3ff00000 	.word	0x3ff00000
 800bd30:	3fe00000 	.word	0x3fe00000
 800bd34:	7fe00000 	.word	0x7fe00000
 800bd38:	7c9fffff 	.word	0x7c9fffff
 800bd3c:	9b08      	ldr	r3, [sp, #32]
 800bd3e:	b323      	cbz	r3, 800bd8a <_strtod_l+0xb5a>
 800bd40:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bd44:	d821      	bhi.n	800bd8a <_strtod_l+0xb5a>
 800bd46:	a328      	add	r3, pc, #160	@ (adr r3, 800bde8 <_strtod_l+0xbb8>)
 800bd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	4639      	mov	r1, r7
 800bd50:	f7f4 fef6 	bl	8000b40 <__aeabi_dcmple>
 800bd54:	b1a0      	cbz	r0, 800bd80 <_strtod_l+0xb50>
 800bd56:	4639      	mov	r1, r7
 800bd58:	4630      	mov	r0, r6
 800bd5a:	f7f4 ff4d 	bl	8000bf8 <__aeabi_d2uiz>
 800bd5e:	2801      	cmp	r0, #1
 800bd60:	bf38      	it	cc
 800bd62:	2001      	movcc	r0, #1
 800bd64:	f7f4 fbf6 	bl	8000554 <__aeabi_ui2d>
 800bd68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd6a:	4606      	mov	r6, r0
 800bd6c:	460f      	mov	r7, r1
 800bd6e:	b9fb      	cbnz	r3, 800bdb0 <_strtod_l+0xb80>
 800bd70:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bd74:	9014      	str	r0, [sp, #80]	@ 0x50
 800bd76:	9315      	str	r3, [sp, #84]	@ 0x54
 800bd78:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bd7c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bd80:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bd82:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bd86:	1b5b      	subs	r3, r3, r5
 800bd88:	9311      	str	r3, [sp, #68]	@ 0x44
 800bd8a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bd8e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bd92:	f7ff f8f1 	bl	800af78 <__ulp>
 800bd96:	4650      	mov	r0, sl
 800bd98:	ec53 2b10 	vmov	r2, r3, d0
 800bd9c:	4659      	mov	r1, fp
 800bd9e:	f7f4 fc53 	bl	8000648 <__aeabi_dmul>
 800bda2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bda6:	f7f4 fa99 	bl	80002dc <__adddf3>
 800bdaa:	4682      	mov	sl, r0
 800bdac:	468b      	mov	fp, r1
 800bdae:	e770      	b.n	800bc92 <_strtod_l+0xa62>
 800bdb0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bdb4:	e7e0      	b.n	800bd78 <_strtod_l+0xb48>
 800bdb6:	a30e      	add	r3, pc, #56	@ (adr r3, 800bdf0 <_strtod_l+0xbc0>)
 800bdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbc:	f7f4 feb6 	bl	8000b2c <__aeabi_dcmplt>
 800bdc0:	e798      	b.n	800bcf4 <_strtod_l+0xac4>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdc6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bdc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bdca:	6013      	str	r3, [r2, #0]
 800bdcc:	f7ff ba6d 	b.w	800b2aa <_strtod_l+0x7a>
 800bdd0:	2a65      	cmp	r2, #101	@ 0x65
 800bdd2:	f43f ab66 	beq.w	800b4a2 <_strtod_l+0x272>
 800bdd6:	2a45      	cmp	r2, #69	@ 0x45
 800bdd8:	f43f ab63 	beq.w	800b4a2 <_strtod_l+0x272>
 800bddc:	2301      	movs	r3, #1
 800bdde:	f7ff bb9e 	b.w	800b51e <_strtod_l+0x2ee>
 800bde2:	bf00      	nop
 800bde4:	f3af 8000 	nop.w
 800bde8:	ffc00000 	.word	0xffc00000
 800bdec:	41dfffff 	.word	0x41dfffff
 800bdf0:	94a03595 	.word	0x94a03595
 800bdf4:	3fcfffff 	.word	0x3fcfffff

0800bdf8 <_strtod_r>:
 800bdf8:	4b01      	ldr	r3, [pc, #4]	@ (800be00 <_strtod_r+0x8>)
 800bdfa:	f7ff ba19 	b.w	800b230 <_strtod_l>
 800bdfe:	bf00      	nop
 800be00:	20000064 	.word	0x20000064

0800be04 <_strtol_l.constprop.0>:
 800be04:	2b24      	cmp	r3, #36	@ 0x24
 800be06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be0a:	4686      	mov	lr, r0
 800be0c:	4690      	mov	r8, r2
 800be0e:	d801      	bhi.n	800be14 <_strtol_l.constprop.0+0x10>
 800be10:	2b01      	cmp	r3, #1
 800be12:	d106      	bne.n	800be22 <_strtol_l.constprop.0+0x1e>
 800be14:	f7fd fdac 	bl	8009970 <__errno>
 800be18:	2316      	movs	r3, #22
 800be1a:	6003      	str	r3, [r0, #0]
 800be1c:	2000      	movs	r0, #0
 800be1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be22:	4834      	ldr	r0, [pc, #208]	@ (800bef4 <_strtol_l.constprop.0+0xf0>)
 800be24:	460d      	mov	r5, r1
 800be26:	462a      	mov	r2, r5
 800be28:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be2c:	5d06      	ldrb	r6, [r0, r4]
 800be2e:	f016 0608 	ands.w	r6, r6, #8
 800be32:	d1f8      	bne.n	800be26 <_strtol_l.constprop.0+0x22>
 800be34:	2c2d      	cmp	r4, #45	@ 0x2d
 800be36:	d12d      	bne.n	800be94 <_strtol_l.constprop.0+0x90>
 800be38:	782c      	ldrb	r4, [r5, #0]
 800be3a:	2601      	movs	r6, #1
 800be3c:	1c95      	adds	r5, r2, #2
 800be3e:	f033 0210 	bics.w	r2, r3, #16
 800be42:	d109      	bne.n	800be58 <_strtol_l.constprop.0+0x54>
 800be44:	2c30      	cmp	r4, #48	@ 0x30
 800be46:	d12a      	bne.n	800be9e <_strtol_l.constprop.0+0x9a>
 800be48:	782a      	ldrb	r2, [r5, #0]
 800be4a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800be4e:	2a58      	cmp	r2, #88	@ 0x58
 800be50:	d125      	bne.n	800be9e <_strtol_l.constprop.0+0x9a>
 800be52:	786c      	ldrb	r4, [r5, #1]
 800be54:	2310      	movs	r3, #16
 800be56:	3502      	adds	r5, #2
 800be58:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800be5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800be60:	2200      	movs	r2, #0
 800be62:	fbbc f9f3 	udiv	r9, ip, r3
 800be66:	4610      	mov	r0, r2
 800be68:	fb03 ca19 	mls	sl, r3, r9, ip
 800be6c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800be70:	2f09      	cmp	r7, #9
 800be72:	d81b      	bhi.n	800beac <_strtol_l.constprop.0+0xa8>
 800be74:	463c      	mov	r4, r7
 800be76:	42a3      	cmp	r3, r4
 800be78:	dd27      	ble.n	800beca <_strtol_l.constprop.0+0xc6>
 800be7a:	1c57      	adds	r7, r2, #1
 800be7c:	d007      	beq.n	800be8e <_strtol_l.constprop.0+0x8a>
 800be7e:	4581      	cmp	r9, r0
 800be80:	d320      	bcc.n	800bec4 <_strtol_l.constprop.0+0xc0>
 800be82:	d101      	bne.n	800be88 <_strtol_l.constprop.0+0x84>
 800be84:	45a2      	cmp	sl, r4
 800be86:	db1d      	blt.n	800bec4 <_strtol_l.constprop.0+0xc0>
 800be88:	fb00 4003 	mla	r0, r0, r3, r4
 800be8c:	2201      	movs	r2, #1
 800be8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be92:	e7eb      	b.n	800be6c <_strtol_l.constprop.0+0x68>
 800be94:	2c2b      	cmp	r4, #43	@ 0x2b
 800be96:	bf04      	itt	eq
 800be98:	782c      	ldrbeq	r4, [r5, #0]
 800be9a:	1c95      	addeq	r5, r2, #2
 800be9c:	e7cf      	b.n	800be3e <_strtol_l.constprop.0+0x3a>
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d1da      	bne.n	800be58 <_strtol_l.constprop.0+0x54>
 800bea2:	2c30      	cmp	r4, #48	@ 0x30
 800bea4:	bf0c      	ite	eq
 800bea6:	2308      	moveq	r3, #8
 800bea8:	230a      	movne	r3, #10
 800beaa:	e7d5      	b.n	800be58 <_strtol_l.constprop.0+0x54>
 800beac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800beb0:	2f19      	cmp	r7, #25
 800beb2:	d801      	bhi.n	800beb8 <_strtol_l.constprop.0+0xb4>
 800beb4:	3c37      	subs	r4, #55	@ 0x37
 800beb6:	e7de      	b.n	800be76 <_strtol_l.constprop.0+0x72>
 800beb8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bebc:	2f19      	cmp	r7, #25
 800bebe:	d804      	bhi.n	800beca <_strtol_l.constprop.0+0xc6>
 800bec0:	3c57      	subs	r4, #87	@ 0x57
 800bec2:	e7d8      	b.n	800be76 <_strtol_l.constprop.0+0x72>
 800bec4:	f04f 32ff 	mov.w	r2, #4294967295
 800bec8:	e7e1      	b.n	800be8e <_strtol_l.constprop.0+0x8a>
 800beca:	1c53      	adds	r3, r2, #1
 800becc:	d108      	bne.n	800bee0 <_strtol_l.constprop.0+0xdc>
 800bece:	2322      	movs	r3, #34	@ 0x22
 800bed0:	f8ce 3000 	str.w	r3, [lr]
 800bed4:	4660      	mov	r0, ip
 800bed6:	f1b8 0f00 	cmp.w	r8, #0
 800beda:	d0a0      	beq.n	800be1e <_strtol_l.constprop.0+0x1a>
 800bedc:	1e69      	subs	r1, r5, #1
 800bede:	e006      	b.n	800beee <_strtol_l.constprop.0+0xea>
 800bee0:	b106      	cbz	r6, 800bee4 <_strtol_l.constprop.0+0xe0>
 800bee2:	4240      	negs	r0, r0
 800bee4:	f1b8 0f00 	cmp.w	r8, #0
 800bee8:	d099      	beq.n	800be1e <_strtol_l.constprop.0+0x1a>
 800beea:	2a00      	cmp	r2, #0
 800beec:	d1f6      	bne.n	800bedc <_strtol_l.constprop.0+0xd8>
 800beee:	f8c8 1000 	str.w	r1, [r8]
 800bef2:	e794      	b.n	800be1e <_strtol_l.constprop.0+0x1a>
 800bef4:	0800d3b9 	.word	0x0800d3b9

0800bef8 <_strtol_r>:
 800bef8:	f7ff bf84 	b.w	800be04 <_strtol_l.constprop.0>

0800befc <__ssputs_r>:
 800befc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf00:	688e      	ldr	r6, [r1, #8]
 800bf02:	461f      	mov	r7, r3
 800bf04:	42be      	cmp	r6, r7
 800bf06:	680b      	ldr	r3, [r1, #0]
 800bf08:	4682      	mov	sl, r0
 800bf0a:	460c      	mov	r4, r1
 800bf0c:	4690      	mov	r8, r2
 800bf0e:	d82d      	bhi.n	800bf6c <__ssputs_r+0x70>
 800bf10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bf14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bf18:	d026      	beq.n	800bf68 <__ssputs_r+0x6c>
 800bf1a:	6965      	ldr	r5, [r4, #20]
 800bf1c:	6909      	ldr	r1, [r1, #16]
 800bf1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf22:	eba3 0901 	sub.w	r9, r3, r1
 800bf26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf2a:	1c7b      	adds	r3, r7, #1
 800bf2c:	444b      	add	r3, r9
 800bf2e:	106d      	asrs	r5, r5, #1
 800bf30:	429d      	cmp	r5, r3
 800bf32:	bf38      	it	cc
 800bf34:	461d      	movcc	r5, r3
 800bf36:	0553      	lsls	r3, r2, #21
 800bf38:	d527      	bpl.n	800bf8a <__ssputs_r+0x8e>
 800bf3a:	4629      	mov	r1, r5
 800bf3c:	f7fe fc1c 	bl	800a778 <_malloc_r>
 800bf40:	4606      	mov	r6, r0
 800bf42:	b360      	cbz	r0, 800bf9e <__ssputs_r+0xa2>
 800bf44:	6921      	ldr	r1, [r4, #16]
 800bf46:	464a      	mov	r2, r9
 800bf48:	f7fd fd3f 	bl	80099ca <memcpy>
 800bf4c:	89a3      	ldrh	r3, [r4, #12]
 800bf4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bf52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf56:	81a3      	strh	r3, [r4, #12]
 800bf58:	6126      	str	r6, [r4, #16]
 800bf5a:	6165      	str	r5, [r4, #20]
 800bf5c:	444e      	add	r6, r9
 800bf5e:	eba5 0509 	sub.w	r5, r5, r9
 800bf62:	6026      	str	r6, [r4, #0]
 800bf64:	60a5      	str	r5, [r4, #8]
 800bf66:	463e      	mov	r6, r7
 800bf68:	42be      	cmp	r6, r7
 800bf6a:	d900      	bls.n	800bf6e <__ssputs_r+0x72>
 800bf6c:	463e      	mov	r6, r7
 800bf6e:	6820      	ldr	r0, [r4, #0]
 800bf70:	4632      	mov	r2, r6
 800bf72:	4641      	mov	r1, r8
 800bf74:	f000 f9c6 	bl	800c304 <memmove>
 800bf78:	68a3      	ldr	r3, [r4, #8]
 800bf7a:	1b9b      	subs	r3, r3, r6
 800bf7c:	60a3      	str	r3, [r4, #8]
 800bf7e:	6823      	ldr	r3, [r4, #0]
 800bf80:	4433      	add	r3, r6
 800bf82:	6023      	str	r3, [r4, #0]
 800bf84:	2000      	movs	r0, #0
 800bf86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf8a:	462a      	mov	r2, r5
 800bf8c:	f000 fd7d 	bl	800ca8a <_realloc_r>
 800bf90:	4606      	mov	r6, r0
 800bf92:	2800      	cmp	r0, #0
 800bf94:	d1e0      	bne.n	800bf58 <__ssputs_r+0x5c>
 800bf96:	6921      	ldr	r1, [r4, #16]
 800bf98:	4650      	mov	r0, sl
 800bf9a:	f7fe fb79 	bl	800a690 <_free_r>
 800bf9e:	230c      	movs	r3, #12
 800bfa0:	f8ca 3000 	str.w	r3, [sl]
 800bfa4:	89a3      	ldrh	r3, [r4, #12]
 800bfa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfaa:	81a3      	strh	r3, [r4, #12]
 800bfac:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb0:	e7e9      	b.n	800bf86 <__ssputs_r+0x8a>
	...

0800bfb4 <_svfiprintf_r>:
 800bfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb8:	4698      	mov	r8, r3
 800bfba:	898b      	ldrh	r3, [r1, #12]
 800bfbc:	061b      	lsls	r3, r3, #24
 800bfbe:	b09d      	sub	sp, #116	@ 0x74
 800bfc0:	4607      	mov	r7, r0
 800bfc2:	460d      	mov	r5, r1
 800bfc4:	4614      	mov	r4, r2
 800bfc6:	d510      	bpl.n	800bfea <_svfiprintf_r+0x36>
 800bfc8:	690b      	ldr	r3, [r1, #16]
 800bfca:	b973      	cbnz	r3, 800bfea <_svfiprintf_r+0x36>
 800bfcc:	2140      	movs	r1, #64	@ 0x40
 800bfce:	f7fe fbd3 	bl	800a778 <_malloc_r>
 800bfd2:	6028      	str	r0, [r5, #0]
 800bfd4:	6128      	str	r0, [r5, #16]
 800bfd6:	b930      	cbnz	r0, 800bfe6 <_svfiprintf_r+0x32>
 800bfd8:	230c      	movs	r3, #12
 800bfda:	603b      	str	r3, [r7, #0]
 800bfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe0:	b01d      	add	sp, #116	@ 0x74
 800bfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe6:	2340      	movs	r3, #64	@ 0x40
 800bfe8:	616b      	str	r3, [r5, #20]
 800bfea:	2300      	movs	r3, #0
 800bfec:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfee:	2320      	movs	r3, #32
 800bff0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bff4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bff8:	2330      	movs	r3, #48	@ 0x30
 800bffa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c198 <_svfiprintf_r+0x1e4>
 800bffe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c002:	f04f 0901 	mov.w	r9, #1
 800c006:	4623      	mov	r3, r4
 800c008:	469a      	mov	sl, r3
 800c00a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c00e:	b10a      	cbz	r2, 800c014 <_svfiprintf_r+0x60>
 800c010:	2a25      	cmp	r2, #37	@ 0x25
 800c012:	d1f9      	bne.n	800c008 <_svfiprintf_r+0x54>
 800c014:	ebba 0b04 	subs.w	fp, sl, r4
 800c018:	d00b      	beq.n	800c032 <_svfiprintf_r+0x7e>
 800c01a:	465b      	mov	r3, fp
 800c01c:	4622      	mov	r2, r4
 800c01e:	4629      	mov	r1, r5
 800c020:	4638      	mov	r0, r7
 800c022:	f7ff ff6b 	bl	800befc <__ssputs_r>
 800c026:	3001      	adds	r0, #1
 800c028:	f000 80a7 	beq.w	800c17a <_svfiprintf_r+0x1c6>
 800c02c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c02e:	445a      	add	r2, fp
 800c030:	9209      	str	r2, [sp, #36]	@ 0x24
 800c032:	f89a 3000 	ldrb.w	r3, [sl]
 800c036:	2b00      	cmp	r3, #0
 800c038:	f000 809f 	beq.w	800c17a <_svfiprintf_r+0x1c6>
 800c03c:	2300      	movs	r3, #0
 800c03e:	f04f 32ff 	mov.w	r2, #4294967295
 800c042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c046:	f10a 0a01 	add.w	sl, sl, #1
 800c04a:	9304      	str	r3, [sp, #16]
 800c04c:	9307      	str	r3, [sp, #28]
 800c04e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c052:	931a      	str	r3, [sp, #104]	@ 0x68
 800c054:	4654      	mov	r4, sl
 800c056:	2205      	movs	r2, #5
 800c058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c05c:	484e      	ldr	r0, [pc, #312]	@ (800c198 <_svfiprintf_r+0x1e4>)
 800c05e:	f7f4 f8df 	bl	8000220 <memchr>
 800c062:	9a04      	ldr	r2, [sp, #16]
 800c064:	b9d8      	cbnz	r0, 800c09e <_svfiprintf_r+0xea>
 800c066:	06d0      	lsls	r0, r2, #27
 800c068:	bf44      	itt	mi
 800c06a:	2320      	movmi	r3, #32
 800c06c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c070:	0711      	lsls	r1, r2, #28
 800c072:	bf44      	itt	mi
 800c074:	232b      	movmi	r3, #43	@ 0x2b
 800c076:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c07a:	f89a 3000 	ldrb.w	r3, [sl]
 800c07e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c080:	d015      	beq.n	800c0ae <_svfiprintf_r+0xfa>
 800c082:	9a07      	ldr	r2, [sp, #28]
 800c084:	4654      	mov	r4, sl
 800c086:	2000      	movs	r0, #0
 800c088:	f04f 0c0a 	mov.w	ip, #10
 800c08c:	4621      	mov	r1, r4
 800c08e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c092:	3b30      	subs	r3, #48	@ 0x30
 800c094:	2b09      	cmp	r3, #9
 800c096:	d94b      	bls.n	800c130 <_svfiprintf_r+0x17c>
 800c098:	b1b0      	cbz	r0, 800c0c8 <_svfiprintf_r+0x114>
 800c09a:	9207      	str	r2, [sp, #28]
 800c09c:	e014      	b.n	800c0c8 <_svfiprintf_r+0x114>
 800c09e:	eba0 0308 	sub.w	r3, r0, r8
 800c0a2:	fa09 f303 	lsl.w	r3, r9, r3
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	9304      	str	r3, [sp, #16]
 800c0aa:	46a2      	mov	sl, r4
 800c0ac:	e7d2      	b.n	800c054 <_svfiprintf_r+0xa0>
 800c0ae:	9b03      	ldr	r3, [sp, #12]
 800c0b0:	1d19      	adds	r1, r3, #4
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	9103      	str	r1, [sp, #12]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	bfbb      	ittet	lt
 800c0ba:	425b      	neglt	r3, r3
 800c0bc:	f042 0202 	orrlt.w	r2, r2, #2
 800c0c0:	9307      	strge	r3, [sp, #28]
 800c0c2:	9307      	strlt	r3, [sp, #28]
 800c0c4:	bfb8      	it	lt
 800c0c6:	9204      	strlt	r2, [sp, #16]
 800c0c8:	7823      	ldrb	r3, [r4, #0]
 800c0ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800c0cc:	d10a      	bne.n	800c0e4 <_svfiprintf_r+0x130>
 800c0ce:	7863      	ldrb	r3, [r4, #1]
 800c0d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0d2:	d132      	bne.n	800c13a <_svfiprintf_r+0x186>
 800c0d4:	9b03      	ldr	r3, [sp, #12]
 800c0d6:	1d1a      	adds	r2, r3, #4
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	9203      	str	r2, [sp, #12]
 800c0dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c0e0:	3402      	adds	r4, #2
 800c0e2:	9305      	str	r3, [sp, #20]
 800c0e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c1a8 <_svfiprintf_r+0x1f4>
 800c0e8:	7821      	ldrb	r1, [r4, #0]
 800c0ea:	2203      	movs	r2, #3
 800c0ec:	4650      	mov	r0, sl
 800c0ee:	f7f4 f897 	bl	8000220 <memchr>
 800c0f2:	b138      	cbz	r0, 800c104 <_svfiprintf_r+0x150>
 800c0f4:	9b04      	ldr	r3, [sp, #16]
 800c0f6:	eba0 000a 	sub.w	r0, r0, sl
 800c0fa:	2240      	movs	r2, #64	@ 0x40
 800c0fc:	4082      	lsls	r2, r0
 800c0fe:	4313      	orrs	r3, r2
 800c100:	3401      	adds	r4, #1
 800c102:	9304      	str	r3, [sp, #16]
 800c104:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c108:	4824      	ldr	r0, [pc, #144]	@ (800c19c <_svfiprintf_r+0x1e8>)
 800c10a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c10e:	2206      	movs	r2, #6
 800c110:	f7f4 f886 	bl	8000220 <memchr>
 800c114:	2800      	cmp	r0, #0
 800c116:	d036      	beq.n	800c186 <_svfiprintf_r+0x1d2>
 800c118:	4b21      	ldr	r3, [pc, #132]	@ (800c1a0 <_svfiprintf_r+0x1ec>)
 800c11a:	bb1b      	cbnz	r3, 800c164 <_svfiprintf_r+0x1b0>
 800c11c:	9b03      	ldr	r3, [sp, #12]
 800c11e:	3307      	adds	r3, #7
 800c120:	f023 0307 	bic.w	r3, r3, #7
 800c124:	3308      	adds	r3, #8
 800c126:	9303      	str	r3, [sp, #12]
 800c128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c12a:	4433      	add	r3, r6
 800c12c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c12e:	e76a      	b.n	800c006 <_svfiprintf_r+0x52>
 800c130:	fb0c 3202 	mla	r2, ip, r2, r3
 800c134:	460c      	mov	r4, r1
 800c136:	2001      	movs	r0, #1
 800c138:	e7a8      	b.n	800c08c <_svfiprintf_r+0xd8>
 800c13a:	2300      	movs	r3, #0
 800c13c:	3401      	adds	r4, #1
 800c13e:	9305      	str	r3, [sp, #20]
 800c140:	4619      	mov	r1, r3
 800c142:	f04f 0c0a 	mov.w	ip, #10
 800c146:	4620      	mov	r0, r4
 800c148:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c14c:	3a30      	subs	r2, #48	@ 0x30
 800c14e:	2a09      	cmp	r2, #9
 800c150:	d903      	bls.n	800c15a <_svfiprintf_r+0x1a6>
 800c152:	2b00      	cmp	r3, #0
 800c154:	d0c6      	beq.n	800c0e4 <_svfiprintf_r+0x130>
 800c156:	9105      	str	r1, [sp, #20]
 800c158:	e7c4      	b.n	800c0e4 <_svfiprintf_r+0x130>
 800c15a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c15e:	4604      	mov	r4, r0
 800c160:	2301      	movs	r3, #1
 800c162:	e7f0      	b.n	800c146 <_svfiprintf_r+0x192>
 800c164:	ab03      	add	r3, sp, #12
 800c166:	9300      	str	r3, [sp, #0]
 800c168:	462a      	mov	r2, r5
 800c16a:	4b0e      	ldr	r3, [pc, #56]	@ (800c1a4 <_svfiprintf_r+0x1f0>)
 800c16c:	a904      	add	r1, sp, #16
 800c16e:	4638      	mov	r0, r7
 800c170:	f7fc fcac 	bl	8008acc <_printf_float>
 800c174:	1c42      	adds	r2, r0, #1
 800c176:	4606      	mov	r6, r0
 800c178:	d1d6      	bne.n	800c128 <_svfiprintf_r+0x174>
 800c17a:	89ab      	ldrh	r3, [r5, #12]
 800c17c:	065b      	lsls	r3, r3, #25
 800c17e:	f53f af2d 	bmi.w	800bfdc <_svfiprintf_r+0x28>
 800c182:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c184:	e72c      	b.n	800bfe0 <_svfiprintf_r+0x2c>
 800c186:	ab03      	add	r3, sp, #12
 800c188:	9300      	str	r3, [sp, #0]
 800c18a:	462a      	mov	r2, r5
 800c18c:	4b05      	ldr	r3, [pc, #20]	@ (800c1a4 <_svfiprintf_r+0x1f0>)
 800c18e:	a904      	add	r1, sp, #16
 800c190:	4638      	mov	r0, r7
 800c192:	f7fc ff33 	bl	8008ffc <_printf_i>
 800c196:	e7ed      	b.n	800c174 <_svfiprintf_r+0x1c0>
 800c198:	0800d4b9 	.word	0x0800d4b9
 800c19c:	0800d4c3 	.word	0x0800d4c3
 800c1a0:	08008acd 	.word	0x08008acd
 800c1a4:	0800befd 	.word	0x0800befd
 800c1a8:	0800d4bf 	.word	0x0800d4bf

0800c1ac <__sflush_r>:
 800c1ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b4:	0716      	lsls	r6, r2, #28
 800c1b6:	4605      	mov	r5, r0
 800c1b8:	460c      	mov	r4, r1
 800c1ba:	d454      	bmi.n	800c266 <__sflush_r+0xba>
 800c1bc:	684b      	ldr	r3, [r1, #4]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	dc02      	bgt.n	800c1c8 <__sflush_r+0x1c>
 800c1c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	dd48      	ble.n	800c25a <__sflush_r+0xae>
 800c1c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c1ca:	2e00      	cmp	r6, #0
 800c1cc:	d045      	beq.n	800c25a <__sflush_r+0xae>
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c1d4:	682f      	ldr	r7, [r5, #0]
 800c1d6:	6a21      	ldr	r1, [r4, #32]
 800c1d8:	602b      	str	r3, [r5, #0]
 800c1da:	d030      	beq.n	800c23e <__sflush_r+0x92>
 800c1dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c1de:	89a3      	ldrh	r3, [r4, #12]
 800c1e0:	0759      	lsls	r1, r3, #29
 800c1e2:	d505      	bpl.n	800c1f0 <__sflush_r+0x44>
 800c1e4:	6863      	ldr	r3, [r4, #4]
 800c1e6:	1ad2      	subs	r2, r2, r3
 800c1e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c1ea:	b10b      	cbz	r3, 800c1f0 <__sflush_r+0x44>
 800c1ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c1ee:	1ad2      	subs	r2, r2, r3
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c1f4:	6a21      	ldr	r1, [r4, #32]
 800c1f6:	4628      	mov	r0, r5
 800c1f8:	47b0      	blx	r6
 800c1fa:	1c43      	adds	r3, r0, #1
 800c1fc:	89a3      	ldrh	r3, [r4, #12]
 800c1fe:	d106      	bne.n	800c20e <__sflush_r+0x62>
 800c200:	6829      	ldr	r1, [r5, #0]
 800c202:	291d      	cmp	r1, #29
 800c204:	d82b      	bhi.n	800c25e <__sflush_r+0xb2>
 800c206:	4a2a      	ldr	r2, [pc, #168]	@ (800c2b0 <__sflush_r+0x104>)
 800c208:	410a      	asrs	r2, r1
 800c20a:	07d6      	lsls	r6, r2, #31
 800c20c:	d427      	bmi.n	800c25e <__sflush_r+0xb2>
 800c20e:	2200      	movs	r2, #0
 800c210:	6062      	str	r2, [r4, #4]
 800c212:	04d9      	lsls	r1, r3, #19
 800c214:	6922      	ldr	r2, [r4, #16]
 800c216:	6022      	str	r2, [r4, #0]
 800c218:	d504      	bpl.n	800c224 <__sflush_r+0x78>
 800c21a:	1c42      	adds	r2, r0, #1
 800c21c:	d101      	bne.n	800c222 <__sflush_r+0x76>
 800c21e:	682b      	ldr	r3, [r5, #0]
 800c220:	b903      	cbnz	r3, 800c224 <__sflush_r+0x78>
 800c222:	6560      	str	r0, [r4, #84]	@ 0x54
 800c224:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c226:	602f      	str	r7, [r5, #0]
 800c228:	b1b9      	cbz	r1, 800c25a <__sflush_r+0xae>
 800c22a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c22e:	4299      	cmp	r1, r3
 800c230:	d002      	beq.n	800c238 <__sflush_r+0x8c>
 800c232:	4628      	mov	r0, r5
 800c234:	f7fe fa2c 	bl	800a690 <_free_r>
 800c238:	2300      	movs	r3, #0
 800c23a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c23c:	e00d      	b.n	800c25a <__sflush_r+0xae>
 800c23e:	2301      	movs	r3, #1
 800c240:	4628      	mov	r0, r5
 800c242:	47b0      	blx	r6
 800c244:	4602      	mov	r2, r0
 800c246:	1c50      	adds	r0, r2, #1
 800c248:	d1c9      	bne.n	800c1de <__sflush_r+0x32>
 800c24a:	682b      	ldr	r3, [r5, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d0c6      	beq.n	800c1de <__sflush_r+0x32>
 800c250:	2b1d      	cmp	r3, #29
 800c252:	d001      	beq.n	800c258 <__sflush_r+0xac>
 800c254:	2b16      	cmp	r3, #22
 800c256:	d11e      	bne.n	800c296 <__sflush_r+0xea>
 800c258:	602f      	str	r7, [r5, #0]
 800c25a:	2000      	movs	r0, #0
 800c25c:	e022      	b.n	800c2a4 <__sflush_r+0xf8>
 800c25e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c262:	b21b      	sxth	r3, r3
 800c264:	e01b      	b.n	800c29e <__sflush_r+0xf2>
 800c266:	690f      	ldr	r7, [r1, #16]
 800c268:	2f00      	cmp	r7, #0
 800c26a:	d0f6      	beq.n	800c25a <__sflush_r+0xae>
 800c26c:	0793      	lsls	r3, r2, #30
 800c26e:	680e      	ldr	r6, [r1, #0]
 800c270:	bf08      	it	eq
 800c272:	694b      	ldreq	r3, [r1, #20]
 800c274:	600f      	str	r7, [r1, #0]
 800c276:	bf18      	it	ne
 800c278:	2300      	movne	r3, #0
 800c27a:	eba6 0807 	sub.w	r8, r6, r7
 800c27e:	608b      	str	r3, [r1, #8]
 800c280:	f1b8 0f00 	cmp.w	r8, #0
 800c284:	dde9      	ble.n	800c25a <__sflush_r+0xae>
 800c286:	6a21      	ldr	r1, [r4, #32]
 800c288:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c28a:	4643      	mov	r3, r8
 800c28c:	463a      	mov	r2, r7
 800c28e:	4628      	mov	r0, r5
 800c290:	47b0      	blx	r6
 800c292:	2800      	cmp	r0, #0
 800c294:	dc08      	bgt.n	800c2a8 <__sflush_r+0xfc>
 800c296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c29a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c29e:	81a3      	strh	r3, [r4, #12]
 800c2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2a8:	4407      	add	r7, r0
 800c2aa:	eba8 0800 	sub.w	r8, r8, r0
 800c2ae:	e7e7      	b.n	800c280 <__sflush_r+0xd4>
 800c2b0:	dfbffffe 	.word	0xdfbffffe

0800c2b4 <_fflush_r>:
 800c2b4:	b538      	push	{r3, r4, r5, lr}
 800c2b6:	690b      	ldr	r3, [r1, #16]
 800c2b8:	4605      	mov	r5, r0
 800c2ba:	460c      	mov	r4, r1
 800c2bc:	b913      	cbnz	r3, 800c2c4 <_fflush_r+0x10>
 800c2be:	2500      	movs	r5, #0
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	bd38      	pop	{r3, r4, r5, pc}
 800c2c4:	b118      	cbz	r0, 800c2ce <_fflush_r+0x1a>
 800c2c6:	6a03      	ldr	r3, [r0, #32]
 800c2c8:	b90b      	cbnz	r3, 800c2ce <_fflush_r+0x1a>
 800c2ca:	f7fd fa57 	bl	800977c <__sinit>
 800c2ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d0f3      	beq.n	800c2be <_fflush_r+0xa>
 800c2d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c2d8:	07d0      	lsls	r0, r2, #31
 800c2da:	d404      	bmi.n	800c2e6 <_fflush_r+0x32>
 800c2dc:	0599      	lsls	r1, r3, #22
 800c2de:	d402      	bmi.n	800c2e6 <_fflush_r+0x32>
 800c2e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2e2:	f7fd fb70 	bl	80099c6 <__retarget_lock_acquire_recursive>
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	4621      	mov	r1, r4
 800c2ea:	f7ff ff5f 	bl	800c1ac <__sflush_r>
 800c2ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c2f0:	07da      	lsls	r2, r3, #31
 800c2f2:	4605      	mov	r5, r0
 800c2f4:	d4e4      	bmi.n	800c2c0 <_fflush_r+0xc>
 800c2f6:	89a3      	ldrh	r3, [r4, #12]
 800c2f8:	059b      	lsls	r3, r3, #22
 800c2fa:	d4e1      	bmi.n	800c2c0 <_fflush_r+0xc>
 800c2fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2fe:	f7fd fb63 	bl	80099c8 <__retarget_lock_release_recursive>
 800c302:	e7dd      	b.n	800c2c0 <_fflush_r+0xc>

0800c304 <memmove>:
 800c304:	4288      	cmp	r0, r1
 800c306:	b510      	push	{r4, lr}
 800c308:	eb01 0402 	add.w	r4, r1, r2
 800c30c:	d902      	bls.n	800c314 <memmove+0x10>
 800c30e:	4284      	cmp	r4, r0
 800c310:	4623      	mov	r3, r4
 800c312:	d807      	bhi.n	800c324 <memmove+0x20>
 800c314:	1e43      	subs	r3, r0, #1
 800c316:	42a1      	cmp	r1, r4
 800c318:	d008      	beq.n	800c32c <memmove+0x28>
 800c31a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c31e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c322:	e7f8      	b.n	800c316 <memmove+0x12>
 800c324:	4402      	add	r2, r0
 800c326:	4601      	mov	r1, r0
 800c328:	428a      	cmp	r2, r1
 800c32a:	d100      	bne.n	800c32e <memmove+0x2a>
 800c32c:	bd10      	pop	{r4, pc}
 800c32e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c332:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c336:	e7f7      	b.n	800c328 <memmove+0x24>

0800c338 <strncmp>:
 800c338:	b510      	push	{r4, lr}
 800c33a:	b16a      	cbz	r2, 800c358 <strncmp+0x20>
 800c33c:	3901      	subs	r1, #1
 800c33e:	1884      	adds	r4, r0, r2
 800c340:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c344:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c348:	429a      	cmp	r2, r3
 800c34a:	d103      	bne.n	800c354 <strncmp+0x1c>
 800c34c:	42a0      	cmp	r0, r4
 800c34e:	d001      	beq.n	800c354 <strncmp+0x1c>
 800c350:	2a00      	cmp	r2, #0
 800c352:	d1f5      	bne.n	800c340 <strncmp+0x8>
 800c354:	1ad0      	subs	r0, r2, r3
 800c356:	bd10      	pop	{r4, pc}
 800c358:	4610      	mov	r0, r2
 800c35a:	e7fc      	b.n	800c356 <strncmp+0x1e>

0800c35c <_sbrk_r>:
 800c35c:	b538      	push	{r3, r4, r5, lr}
 800c35e:	4d06      	ldr	r5, [pc, #24]	@ (800c378 <_sbrk_r+0x1c>)
 800c360:	2300      	movs	r3, #0
 800c362:	4604      	mov	r4, r0
 800c364:	4608      	mov	r0, r1
 800c366:	602b      	str	r3, [r5, #0]
 800c368:	f7f6 fe86 	bl	8003078 <_sbrk>
 800c36c:	1c43      	adds	r3, r0, #1
 800c36e:	d102      	bne.n	800c376 <_sbrk_r+0x1a>
 800c370:	682b      	ldr	r3, [r5, #0]
 800c372:	b103      	cbz	r3, 800c376 <_sbrk_r+0x1a>
 800c374:	6023      	str	r3, [r4, #0]
 800c376:	bd38      	pop	{r3, r4, r5, pc}
 800c378:	2000087c 	.word	0x2000087c
 800c37c:	00000000 	.word	0x00000000

0800c380 <nan>:
 800c380:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c388 <nan+0x8>
 800c384:	4770      	bx	lr
 800c386:	bf00      	nop
 800c388:	00000000 	.word	0x00000000
 800c38c:	7ff80000 	.word	0x7ff80000

0800c390 <__assert_func>:
 800c390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c392:	4614      	mov	r4, r2
 800c394:	461a      	mov	r2, r3
 800c396:	4b09      	ldr	r3, [pc, #36]	@ (800c3bc <__assert_func+0x2c>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4605      	mov	r5, r0
 800c39c:	68d8      	ldr	r0, [r3, #12]
 800c39e:	b954      	cbnz	r4, 800c3b6 <__assert_func+0x26>
 800c3a0:	4b07      	ldr	r3, [pc, #28]	@ (800c3c0 <__assert_func+0x30>)
 800c3a2:	461c      	mov	r4, r3
 800c3a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c3a8:	9100      	str	r1, [sp, #0]
 800c3aa:	462b      	mov	r3, r5
 800c3ac:	4905      	ldr	r1, [pc, #20]	@ (800c3c4 <__assert_func+0x34>)
 800c3ae:	f000 fba7 	bl	800cb00 <fiprintf>
 800c3b2:	f000 fbb7 	bl	800cb24 <abort>
 800c3b6:	4b04      	ldr	r3, [pc, #16]	@ (800c3c8 <__assert_func+0x38>)
 800c3b8:	e7f4      	b.n	800c3a4 <__assert_func+0x14>
 800c3ba:	bf00      	nop
 800c3bc:	20000014 	.word	0x20000014
 800c3c0:	0800d50d 	.word	0x0800d50d
 800c3c4:	0800d4df 	.word	0x0800d4df
 800c3c8:	0800d4d2 	.word	0x0800d4d2

0800c3cc <_calloc_r>:
 800c3cc:	b570      	push	{r4, r5, r6, lr}
 800c3ce:	fba1 5402 	umull	r5, r4, r1, r2
 800c3d2:	b93c      	cbnz	r4, 800c3e4 <_calloc_r+0x18>
 800c3d4:	4629      	mov	r1, r5
 800c3d6:	f7fe f9cf 	bl	800a778 <_malloc_r>
 800c3da:	4606      	mov	r6, r0
 800c3dc:	b928      	cbnz	r0, 800c3ea <_calloc_r+0x1e>
 800c3de:	2600      	movs	r6, #0
 800c3e0:	4630      	mov	r0, r6
 800c3e2:	bd70      	pop	{r4, r5, r6, pc}
 800c3e4:	220c      	movs	r2, #12
 800c3e6:	6002      	str	r2, [r0, #0]
 800c3e8:	e7f9      	b.n	800c3de <_calloc_r+0x12>
 800c3ea:	462a      	mov	r2, r5
 800c3ec:	4621      	mov	r1, r4
 800c3ee:	f7fd fa5e 	bl	80098ae <memset>
 800c3f2:	e7f5      	b.n	800c3e0 <_calloc_r+0x14>

0800c3f4 <rshift>:
 800c3f4:	6903      	ldr	r3, [r0, #16]
 800c3f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c3fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c402:	f100 0414 	add.w	r4, r0, #20
 800c406:	dd45      	ble.n	800c494 <rshift+0xa0>
 800c408:	f011 011f 	ands.w	r1, r1, #31
 800c40c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c410:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c414:	d10c      	bne.n	800c430 <rshift+0x3c>
 800c416:	f100 0710 	add.w	r7, r0, #16
 800c41a:	4629      	mov	r1, r5
 800c41c:	42b1      	cmp	r1, r6
 800c41e:	d334      	bcc.n	800c48a <rshift+0x96>
 800c420:	1a9b      	subs	r3, r3, r2
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	1eea      	subs	r2, r5, #3
 800c426:	4296      	cmp	r6, r2
 800c428:	bf38      	it	cc
 800c42a:	2300      	movcc	r3, #0
 800c42c:	4423      	add	r3, r4
 800c42e:	e015      	b.n	800c45c <rshift+0x68>
 800c430:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c434:	f1c1 0820 	rsb	r8, r1, #32
 800c438:	40cf      	lsrs	r7, r1
 800c43a:	f105 0e04 	add.w	lr, r5, #4
 800c43e:	46a1      	mov	r9, r4
 800c440:	4576      	cmp	r6, lr
 800c442:	46f4      	mov	ip, lr
 800c444:	d815      	bhi.n	800c472 <rshift+0x7e>
 800c446:	1a9a      	subs	r2, r3, r2
 800c448:	0092      	lsls	r2, r2, #2
 800c44a:	3a04      	subs	r2, #4
 800c44c:	3501      	adds	r5, #1
 800c44e:	42ae      	cmp	r6, r5
 800c450:	bf38      	it	cc
 800c452:	2200      	movcc	r2, #0
 800c454:	18a3      	adds	r3, r4, r2
 800c456:	50a7      	str	r7, [r4, r2]
 800c458:	b107      	cbz	r7, 800c45c <rshift+0x68>
 800c45a:	3304      	adds	r3, #4
 800c45c:	1b1a      	subs	r2, r3, r4
 800c45e:	42a3      	cmp	r3, r4
 800c460:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c464:	bf08      	it	eq
 800c466:	2300      	moveq	r3, #0
 800c468:	6102      	str	r2, [r0, #16]
 800c46a:	bf08      	it	eq
 800c46c:	6143      	streq	r3, [r0, #20]
 800c46e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c472:	f8dc c000 	ldr.w	ip, [ip]
 800c476:	fa0c fc08 	lsl.w	ip, ip, r8
 800c47a:	ea4c 0707 	orr.w	r7, ip, r7
 800c47e:	f849 7b04 	str.w	r7, [r9], #4
 800c482:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c486:	40cf      	lsrs	r7, r1
 800c488:	e7da      	b.n	800c440 <rshift+0x4c>
 800c48a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c48e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c492:	e7c3      	b.n	800c41c <rshift+0x28>
 800c494:	4623      	mov	r3, r4
 800c496:	e7e1      	b.n	800c45c <rshift+0x68>

0800c498 <__hexdig_fun>:
 800c498:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c49c:	2b09      	cmp	r3, #9
 800c49e:	d802      	bhi.n	800c4a6 <__hexdig_fun+0xe>
 800c4a0:	3820      	subs	r0, #32
 800c4a2:	b2c0      	uxtb	r0, r0
 800c4a4:	4770      	bx	lr
 800c4a6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c4aa:	2b05      	cmp	r3, #5
 800c4ac:	d801      	bhi.n	800c4b2 <__hexdig_fun+0x1a>
 800c4ae:	3847      	subs	r0, #71	@ 0x47
 800c4b0:	e7f7      	b.n	800c4a2 <__hexdig_fun+0xa>
 800c4b2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c4b6:	2b05      	cmp	r3, #5
 800c4b8:	d801      	bhi.n	800c4be <__hexdig_fun+0x26>
 800c4ba:	3827      	subs	r0, #39	@ 0x27
 800c4bc:	e7f1      	b.n	800c4a2 <__hexdig_fun+0xa>
 800c4be:	2000      	movs	r0, #0
 800c4c0:	4770      	bx	lr
	...

0800c4c4 <__gethex>:
 800c4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c8:	b085      	sub	sp, #20
 800c4ca:	468a      	mov	sl, r1
 800c4cc:	9302      	str	r3, [sp, #8]
 800c4ce:	680b      	ldr	r3, [r1, #0]
 800c4d0:	9001      	str	r0, [sp, #4]
 800c4d2:	4690      	mov	r8, r2
 800c4d4:	1c9c      	adds	r4, r3, #2
 800c4d6:	46a1      	mov	r9, r4
 800c4d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c4dc:	2830      	cmp	r0, #48	@ 0x30
 800c4de:	d0fa      	beq.n	800c4d6 <__gethex+0x12>
 800c4e0:	eba9 0303 	sub.w	r3, r9, r3
 800c4e4:	f1a3 0b02 	sub.w	fp, r3, #2
 800c4e8:	f7ff ffd6 	bl	800c498 <__hexdig_fun>
 800c4ec:	4605      	mov	r5, r0
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d168      	bne.n	800c5c4 <__gethex+0x100>
 800c4f2:	49a0      	ldr	r1, [pc, #640]	@ (800c774 <__gethex+0x2b0>)
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	4648      	mov	r0, r9
 800c4f8:	f7ff ff1e 	bl	800c338 <strncmp>
 800c4fc:	4607      	mov	r7, r0
 800c4fe:	2800      	cmp	r0, #0
 800c500:	d167      	bne.n	800c5d2 <__gethex+0x10e>
 800c502:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c506:	4626      	mov	r6, r4
 800c508:	f7ff ffc6 	bl	800c498 <__hexdig_fun>
 800c50c:	2800      	cmp	r0, #0
 800c50e:	d062      	beq.n	800c5d6 <__gethex+0x112>
 800c510:	4623      	mov	r3, r4
 800c512:	7818      	ldrb	r0, [r3, #0]
 800c514:	2830      	cmp	r0, #48	@ 0x30
 800c516:	4699      	mov	r9, r3
 800c518:	f103 0301 	add.w	r3, r3, #1
 800c51c:	d0f9      	beq.n	800c512 <__gethex+0x4e>
 800c51e:	f7ff ffbb 	bl	800c498 <__hexdig_fun>
 800c522:	fab0 f580 	clz	r5, r0
 800c526:	096d      	lsrs	r5, r5, #5
 800c528:	f04f 0b01 	mov.w	fp, #1
 800c52c:	464a      	mov	r2, r9
 800c52e:	4616      	mov	r6, r2
 800c530:	3201      	adds	r2, #1
 800c532:	7830      	ldrb	r0, [r6, #0]
 800c534:	f7ff ffb0 	bl	800c498 <__hexdig_fun>
 800c538:	2800      	cmp	r0, #0
 800c53a:	d1f8      	bne.n	800c52e <__gethex+0x6a>
 800c53c:	498d      	ldr	r1, [pc, #564]	@ (800c774 <__gethex+0x2b0>)
 800c53e:	2201      	movs	r2, #1
 800c540:	4630      	mov	r0, r6
 800c542:	f7ff fef9 	bl	800c338 <strncmp>
 800c546:	2800      	cmp	r0, #0
 800c548:	d13f      	bne.n	800c5ca <__gethex+0x106>
 800c54a:	b944      	cbnz	r4, 800c55e <__gethex+0x9a>
 800c54c:	1c74      	adds	r4, r6, #1
 800c54e:	4622      	mov	r2, r4
 800c550:	4616      	mov	r6, r2
 800c552:	3201      	adds	r2, #1
 800c554:	7830      	ldrb	r0, [r6, #0]
 800c556:	f7ff ff9f 	bl	800c498 <__hexdig_fun>
 800c55a:	2800      	cmp	r0, #0
 800c55c:	d1f8      	bne.n	800c550 <__gethex+0x8c>
 800c55e:	1ba4      	subs	r4, r4, r6
 800c560:	00a7      	lsls	r7, r4, #2
 800c562:	7833      	ldrb	r3, [r6, #0]
 800c564:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c568:	2b50      	cmp	r3, #80	@ 0x50
 800c56a:	d13e      	bne.n	800c5ea <__gethex+0x126>
 800c56c:	7873      	ldrb	r3, [r6, #1]
 800c56e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c570:	d033      	beq.n	800c5da <__gethex+0x116>
 800c572:	2b2d      	cmp	r3, #45	@ 0x2d
 800c574:	d034      	beq.n	800c5e0 <__gethex+0x11c>
 800c576:	1c71      	adds	r1, r6, #1
 800c578:	2400      	movs	r4, #0
 800c57a:	7808      	ldrb	r0, [r1, #0]
 800c57c:	f7ff ff8c 	bl	800c498 <__hexdig_fun>
 800c580:	1e43      	subs	r3, r0, #1
 800c582:	b2db      	uxtb	r3, r3
 800c584:	2b18      	cmp	r3, #24
 800c586:	d830      	bhi.n	800c5ea <__gethex+0x126>
 800c588:	f1a0 0210 	sub.w	r2, r0, #16
 800c58c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c590:	f7ff ff82 	bl	800c498 <__hexdig_fun>
 800c594:	f100 3cff 	add.w	ip, r0, #4294967295
 800c598:	fa5f fc8c 	uxtb.w	ip, ip
 800c59c:	f1bc 0f18 	cmp.w	ip, #24
 800c5a0:	f04f 030a 	mov.w	r3, #10
 800c5a4:	d91e      	bls.n	800c5e4 <__gethex+0x120>
 800c5a6:	b104      	cbz	r4, 800c5aa <__gethex+0xe6>
 800c5a8:	4252      	negs	r2, r2
 800c5aa:	4417      	add	r7, r2
 800c5ac:	f8ca 1000 	str.w	r1, [sl]
 800c5b0:	b1ed      	cbz	r5, 800c5ee <__gethex+0x12a>
 800c5b2:	f1bb 0f00 	cmp.w	fp, #0
 800c5b6:	bf0c      	ite	eq
 800c5b8:	2506      	moveq	r5, #6
 800c5ba:	2500      	movne	r5, #0
 800c5bc:	4628      	mov	r0, r5
 800c5be:	b005      	add	sp, #20
 800c5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c4:	2500      	movs	r5, #0
 800c5c6:	462c      	mov	r4, r5
 800c5c8:	e7b0      	b.n	800c52c <__gethex+0x68>
 800c5ca:	2c00      	cmp	r4, #0
 800c5cc:	d1c7      	bne.n	800c55e <__gethex+0x9a>
 800c5ce:	4627      	mov	r7, r4
 800c5d0:	e7c7      	b.n	800c562 <__gethex+0x9e>
 800c5d2:	464e      	mov	r6, r9
 800c5d4:	462f      	mov	r7, r5
 800c5d6:	2501      	movs	r5, #1
 800c5d8:	e7c3      	b.n	800c562 <__gethex+0x9e>
 800c5da:	2400      	movs	r4, #0
 800c5dc:	1cb1      	adds	r1, r6, #2
 800c5de:	e7cc      	b.n	800c57a <__gethex+0xb6>
 800c5e0:	2401      	movs	r4, #1
 800c5e2:	e7fb      	b.n	800c5dc <__gethex+0x118>
 800c5e4:	fb03 0002 	mla	r0, r3, r2, r0
 800c5e8:	e7ce      	b.n	800c588 <__gethex+0xc4>
 800c5ea:	4631      	mov	r1, r6
 800c5ec:	e7de      	b.n	800c5ac <__gethex+0xe8>
 800c5ee:	eba6 0309 	sub.w	r3, r6, r9
 800c5f2:	3b01      	subs	r3, #1
 800c5f4:	4629      	mov	r1, r5
 800c5f6:	2b07      	cmp	r3, #7
 800c5f8:	dc0a      	bgt.n	800c610 <__gethex+0x14c>
 800c5fa:	9801      	ldr	r0, [sp, #4]
 800c5fc:	f7fe f948 	bl	800a890 <_Balloc>
 800c600:	4604      	mov	r4, r0
 800c602:	b940      	cbnz	r0, 800c616 <__gethex+0x152>
 800c604:	4b5c      	ldr	r3, [pc, #368]	@ (800c778 <__gethex+0x2b4>)
 800c606:	4602      	mov	r2, r0
 800c608:	21e4      	movs	r1, #228	@ 0xe4
 800c60a:	485c      	ldr	r0, [pc, #368]	@ (800c77c <__gethex+0x2b8>)
 800c60c:	f7ff fec0 	bl	800c390 <__assert_func>
 800c610:	3101      	adds	r1, #1
 800c612:	105b      	asrs	r3, r3, #1
 800c614:	e7ef      	b.n	800c5f6 <__gethex+0x132>
 800c616:	f100 0a14 	add.w	sl, r0, #20
 800c61a:	2300      	movs	r3, #0
 800c61c:	4655      	mov	r5, sl
 800c61e:	469b      	mov	fp, r3
 800c620:	45b1      	cmp	r9, r6
 800c622:	d337      	bcc.n	800c694 <__gethex+0x1d0>
 800c624:	f845 bb04 	str.w	fp, [r5], #4
 800c628:	eba5 050a 	sub.w	r5, r5, sl
 800c62c:	10ad      	asrs	r5, r5, #2
 800c62e:	6125      	str	r5, [r4, #16]
 800c630:	4658      	mov	r0, fp
 800c632:	f7fe fa1f 	bl	800aa74 <__hi0bits>
 800c636:	016d      	lsls	r5, r5, #5
 800c638:	f8d8 6000 	ldr.w	r6, [r8]
 800c63c:	1a2d      	subs	r5, r5, r0
 800c63e:	42b5      	cmp	r5, r6
 800c640:	dd54      	ble.n	800c6ec <__gethex+0x228>
 800c642:	1bad      	subs	r5, r5, r6
 800c644:	4629      	mov	r1, r5
 800c646:	4620      	mov	r0, r4
 800c648:	f7fe fdb3 	bl	800b1b2 <__any_on>
 800c64c:	4681      	mov	r9, r0
 800c64e:	b178      	cbz	r0, 800c670 <__gethex+0x1ac>
 800c650:	1e6b      	subs	r3, r5, #1
 800c652:	1159      	asrs	r1, r3, #5
 800c654:	f003 021f 	and.w	r2, r3, #31
 800c658:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c65c:	f04f 0901 	mov.w	r9, #1
 800c660:	fa09 f202 	lsl.w	r2, r9, r2
 800c664:	420a      	tst	r2, r1
 800c666:	d003      	beq.n	800c670 <__gethex+0x1ac>
 800c668:	454b      	cmp	r3, r9
 800c66a:	dc36      	bgt.n	800c6da <__gethex+0x216>
 800c66c:	f04f 0902 	mov.w	r9, #2
 800c670:	4629      	mov	r1, r5
 800c672:	4620      	mov	r0, r4
 800c674:	f7ff febe 	bl	800c3f4 <rshift>
 800c678:	442f      	add	r7, r5
 800c67a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c67e:	42bb      	cmp	r3, r7
 800c680:	da42      	bge.n	800c708 <__gethex+0x244>
 800c682:	9801      	ldr	r0, [sp, #4]
 800c684:	4621      	mov	r1, r4
 800c686:	f7fe f943 	bl	800a910 <_Bfree>
 800c68a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c68c:	2300      	movs	r3, #0
 800c68e:	6013      	str	r3, [r2, #0]
 800c690:	25a3      	movs	r5, #163	@ 0xa3
 800c692:	e793      	b.n	800c5bc <__gethex+0xf8>
 800c694:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c698:	2a2e      	cmp	r2, #46	@ 0x2e
 800c69a:	d012      	beq.n	800c6c2 <__gethex+0x1fe>
 800c69c:	2b20      	cmp	r3, #32
 800c69e:	d104      	bne.n	800c6aa <__gethex+0x1e6>
 800c6a0:	f845 bb04 	str.w	fp, [r5], #4
 800c6a4:	f04f 0b00 	mov.w	fp, #0
 800c6a8:	465b      	mov	r3, fp
 800c6aa:	7830      	ldrb	r0, [r6, #0]
 800c6ac:	9303      	str	r3, [sp, #12]
 800c6ae:	f7ff fef3 	bl	800c498 <__hexdig_fun>
 800c6b2:	9b03      	ldr	r3, [sp, #12]
 800c6b4:	f000 000f 	and.w	r0, r0, #15
 800c6b8:	4098      	lsls	r0, r3
 800c6ba:	ea4b 0b00 	orr.w	fp, fp, r0
 800c6be:	3304      	adds	r3, #4
 800c6c0:	e7ae      	b.n	800c620 <__gethex+0x15c>
 800c6c2:	45b1      	cmp	r9, r6
 800c6c4:	d8ea      	bhi.n	800c69c <__gethex+0x1d8>
 800c6c6:	492b      	ldr	r1, [pc, #172]	@ (800c774 <__gethex+0x2b0>)
 800c6c8:	9303      	str	r3, [sp, #12]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	f7ff fe33 	bl	800c338 <strncmp>
 800c6d2:	9b03      	ldr	r3, [sp, #12]
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	d1e1      	bne.n	800c69c <__gethex+0x1d8>
 800c6d8:	e7a2      	b.n	800c620 <__gethex+0x15c>
 800c6da:	1ea9      	subs	r1, r5, #2
 800c6dc:	4620      	mov	r0, r4
 800c6de:	f7fe fd68 	bl	800b1b2 <__any_on>
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	d0c2      	beq.n	800c66c <__gethex+0x1a8>
 800c6e6:	f04f 0903 	mov.w	r9, #3
 800c6ea:	e7c1      	b.n	800c670 <__gethex+0x1ac>
 800c6ec:	da09      	bge.n	800c702 <__gethex+0x23e>
 800c6ee:	1b75      	subs	r5, r6, r5
 800c6f0:	4621      	mov	r1, r4
 800c6f2:	9801      	ldr	r0, [sp, #4]
 800c6f4:	462a      	mov	r2, r5
 800c6f6:	f7fe fb23 	bl	800ad40 <__lshift>
 800c6fa:	1b7f      	subs	r7, r7, r5
 800c6fc:	4604      	mov	r4, r0
 800c6fe:	f100 0a14 	add.w	sl, r0, #20
 800c702:	f04f 0900 	mov.w	r9, #0
 800c706:	e7b8      	b.n	800c67a <__gethex+0x1b6>
 800c708:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c70c:	42bd      	cmp	r5, r7
 800c70e:	dd6f      	ble.n	800c7f0 <__gethex+0x32c>
 800c710:	1bed      	subs	r5, r5, r7
 800c712:	42ae      	cmp	r6, r5
 800c714:	dc34      	bgt.n	800c780 <__gethex+0x2bc>
 800c716:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c71a:	2b02      	cmp	r3, #2
 800c71c:	d022      	beq.n	800c764 <__gethex+0x2a0>
 800c71e:	2b03      	cmp	r3, #3
 800c720:	d024      	beq.n	800c76c <__gethex+0x2a8>
 800c722:	2b01      	cmp	r3, #1
 800c724:	d115      	bne.n	800c752 <__gethex+0x28e>
 800c726:	42ae      	cmp	r6, r5
 800c728:	d113      	bne.n	800c752 <__gethex+0x28e>
 800c72a:	2e01      	cmp	r6, #1
 800c72c:	d10b      	bne.n	800c746 <__gethex+0x282>
 800c72e:	9a02      	ldr	r2, [sp, #8]
 800c730:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c734:	6013      	str	r3, [r2, #0]
 800c736:	2301      	movs	r3, #1
 800c738:	6123      	str	r3, [r4, #16]
 800c73a:	f8ca 3000 	str.w	r3, [sl]
 800c73e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c740:	2562      	movs	r5, #98	@ 0x62
 800c742:	601c      	str	r4, [r3, #0]
 800c744:	e73a      	b.n	800c5bc <__gethex+0xf8>
 800c746:	1e71      	subs	r1, r6, #1
 800c748:	4620      	mov	r0, r4
 800c74a:	f7fe fd32 	bl	800b1b2 <__any_on>
 800c74e:	2800      	cmp	r0, #0
 800c750:	d1ed      	bne.n	800c72e <__gethex+0x26a>
 800c752:	9801      	ldr	r0, [sp, #4]
 800c754:	4621      	mov	r1, r4
 800c756:	f7fe f8db 	bl	800a910 <_Bfree>
 800c75a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c75c:	2300      	movs	r3, #0
 800c75e:	6013      	str	r3, [r2, #0]
 800c760:	2550      	movs	r5, #80	@ 0x50
 800c762:	e72b      	b.n	800c5bc <__gethex+0xf8>
 800c764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c766:	2b00      	cmp	r3, #0
 800c768:	d1f3      	bne.n	800c752 <__gethex+0x28e>
 800c76a:	e7e0      	b.n	800c72e <__gethex+0x26a>
 800c76c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d1dd      	bne.n	800c72e <__gethex+0x26a>
 800c772:	e7ee      	b.n	800c752 <__gethex+0x28e>
 800c774:	0800d360 	.word	0x0800d360
 800c778:	0800d1f9 	.word	0x0800d1f9
 800c77c:	0800d50e 	.word	0x0800d50e
 800c780:	1e6f      	subs	r7, r5, #1
 800c782:	f1b9 0f00 	cmp.w	r9, #0
 800c786:	d130      	bne.n	800c7ea <__gethex+0x326>
 800c788:	b127      	cbz	r7, 800c794 <__gethex+0x2d0>
 800c78a:	4639      	mov	r1, r7
 800c78c:	4620      	mov	r0, r4
 800c78e:	f7fe fd10 	bl	800b1b2 <__any_on>
 800c792:	4681      	mov	r9, r0
 800c794:	117a      	asrs	r2, r7, #5
 800c796:	2301      	movs	r3, #1
 800c798:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c79c:	f007 071f 	and.w	r7, r7, #31
 800c7a0:	40bb      	lsls	r3, r7
 800c7a2:	4213      	tst	r3, r2
 800c7a4:	4629      	mov	r1, r5
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	bf18      	it	ne
 800c7aa:	f049 0902 	orrne.w	r9, r9, #2
 800c7ae:	f7ff fe21 	bl	800c3f4 <rshift>
 800c7b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c7b6:	1b76      	subs	r6, r6, r5
 800c7b8:	2502      	movs	r5, #2
 800c7ba:	f1b9 0f00 	cmp.w	r9, #0
 800c7be:	d047      	beq.n	800c850 <__gethex+0x38c>
 800c7c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	d015      	beq.n	800c7f4 <__gethex+0x330>
 800c7c8:	2b03      	cmp	r3, #3
 800c7ca:	d017      	beq.n	800c7fc <__gethex+0x338>
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d109      	bne.n	800c7e4 <__gethex+0x320>
 800c7d0:	f019 0f02 	tst.w	r9, #2
 800c7d4:	d006      	beq.n	800c7e4 <__gethex+0x320>
 800c7d6:	f8da 3000 	ldr.w	r3, [sl]
 800c7da:	ea49 0903 	orr.w	r9, r9, r3
 800c7de:	f019 0f01 	tst.w	r9, #1
 800c7e2:	d10e      	bne.n	800c802 <__gethex+0x33e>
 800c7e4:	f045 0510 	orr.w	r5, r5, #16
 800c7e8:	e032      	b.n	800c850 <__gethex+0x38c>
 800c7ea:	f04f 0901 	mov.w	r9, #1
 800c7ee:	e7d1      	b.n	800c794 <__gethex+0x2d0>
 800c7f0:	2501      	movs	r5, #1
 800c7f2:	e7e2      	b.n	800c7ba <__gethex+0x2f6>
 800c7f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7f6:	f1c3 0301 	rsb	r3, r3, #1
 800c7fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c7fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d0f0      	beq.n	800c7e4 <__gethex+0x320>
 800c802:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c806:	f104 0314 	add.w	r3, r4, #20
 800c80a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c80e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c812:	f04f 0c00 	mov.w	ip, #0
 800c816:	4618      	mov	r0, r3
 800c818:	f853 2b04 	ldr.w	r2, [r3], #4
 800c81c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c820:	d01b      	beq.n	800c85a <__gethex+0x396>
 800c822:	3201      	adds	r2, #1
 800c824:	6002      	str	r2, [r0, #0]
 800c826:	2d02      	cmp	r5, #2
 800c828:	f104 0314 	add.w	r3, r4, #20
 800c82c:	d13c      	bne.n	800c8a8 <__gethex+0x3e4>
 800c82e:	f8d8 2000 	ldr.w	r2, [r8]
 800c832:	3a01      	subs	r2, #1
 800c834:	42b2      	cmp	r2, r6
 800c836:	d109      	bne.n	800c84c <__gethex+0x388>
 800c838:	1171      	asrs	r1, r6, #5
 800c83a:	2201      	movs	r2, #1
 800c83c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c840:	f006 061f 	and.w	r6, r6, #31
 800c844:	fa02 f606 	lsl.w	r6, r2, r6
 800c848:	421e      	tst	r6, r3
 800c84a:	d13a      	bne.n	800c8c2 <__gethex+0x3fe>
 800c84c:	f045 0520 	orr.w	r5, r5, #32
 800c850:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c852:	601c      	str	r4, [r3, #0]
 800c854:	9b02      	ldr	r3, [sp, #8]
 800c856:	601f      	str	r7, [r3, #0]
 800c858:	e6b0      	b.n	800c5bc <__gethex+0xf8>
 800c85a:	4299      	cmp	r1, r3
 800c85c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c860:	d8d9      	bhi.n	800c816 <__gethex+0x352>
 800c862:	68a3      	ldr	r3, [r4, #8]
 800c864:	459b      	cmp	fp, r3
 800c866:	db17      	blt.n	800c898 <__gethex+0x3d4>
 800c868:	6861      	ldr	r1, [r4, #4]
 800c86a:	9801      	ldr	r0, [sp, #4]
 800c86c:	3101      	adds	r1, #1
 800c86e:	f7fe f80f 	bl	800a890 <_Balloc>
 800c872:	4681      	mov	r9, r0
 800c874:	b918      	cbnz	r0, 800c87e <__gethex+0x3ba>
 800c876:	4b1a      	ldr	r3, [pc, #104]	@ (800c8e0 <__gethex+0x41c>)
 800c878:	4602      	mov	r2, r0
 800c87a:	2184      	movs	r1, #132	@ 0x84
 800c87c:	e6c5      	b.n	800c60a <__gethex+0x146>
 800c87e:	6922      	ldr	r2, [r4, #16]
 800c880:	3202      	adds	r2, #2
 800c882:	f104 010c 	add.w	r1, r4, #12
 800c886:	0092      	lsls	r2, r2, #2
 800c888:	300c      	adds	r0, #12
 800c88a:	f7fd f89e 	bl	80099ca <memcpy>
 800c88e:	4621      	mov	r1, r4
 800c890:	9801      	ldr	r0, [sp, #4]
 800c892:	f7fe f83d 	bl	800a910 <_Bfree>
 800c896:	464c      	mov	r4, r9
 800c898:	6923      	ldr	r3, [r4, #16]
 800c89a:	1c5a      	adds	r2, r3, #1
 800c89c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c8a0:	6122      	str	r2, [r4, #16]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	615a      	str	r2, [r3, #20]
 800c8a6:	e7be      	b.n	800c826 <__gethex+0x362>
 800c8a8:	6922      	ldr	r2, [r4, #16]
 800c8aa:	455a      	cmp	r2, fp
 800c8ac:	dd0b      	ble.n	800c8c6 <__gethex+0x402>
 800c8ae:	2101      	movs	r1, #1
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	f7ff fd9f 	bl	800c3f4 <rshift>
 800c8b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c8ba:	3701      	adds	r7, #1
 800c8bc:	42bb      	cmp	r3, r7
 800c8be:	f6ff aee0 	blt.w	800c682 <__gethex+0x1be>
 800c8c2:	2501      	movs	r5, #1
 800c8c4:	e7c2      	b.n	800c84c <__gethex+0x388>
 800c8c6:	f016 061f 	ands.w	r6, r6, #31
 800c8ca:	d0fa      	beq.n	800c8c2 <__gethex+0x3fe>
 800c8cc:	4453      	add	r3, sl
 800c8ce:	f1c6 0620 	rsb	r6, r6, #32
 800c8d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c8d6:	f7fe f8cd 	bl	800aa74 <__hi0bits>
 800c8da:	42b0      	cmp	r0, r6
 800c8dc:	dbe7      	blt.n	800c8ae <__gethex+0x3ea>
 800c8de:	e7f0      	b.n	800c8c2 <__gethex+0x3fe>
 800c8e0:	0800d1f9 	.word	0x0800d1f9

0800c8e4 <L_shift>:
 800c8e4:	f1c2 0208 	rsb	r2, r2, #8
 800c8e8:	0092      	lsls	r2, r2, #2
 800c8ea:	b570      	push	{r4, r5, r6, lr}
 800c8ec:	f1c2 0620 	rsb	r6, r2, #32
 800c8f0:	6843      	ldr	r3, [r0, #4]
 800c8f2:	6804      	ldr	r4, [r0, #0]
 800c8f4:	fa03 f506 	lsl.w	r5, r3, r6
 800c8f8:	432c      	orrs	r4, r5
 800c8fa:	40d3      	lsrs	r3, r2
 800c8fc:	6004      	str	r4, [r0, #0]
 800c8fe:	f840 3f04 	str.w	r3, [r0, #4]!
 800c902:	4288      	cmp	r0, r1
 800c904:	d3f4      	bcc.n	800c8f0 <L_shift+0xc>
 800c906:	bd70      	pop	{r4, r5, r6, pc}

0800c908 <__match>:
 800c908:	b530      	push	{r4, r5, lr}
 800c90a:	6803      	ldr	r3, [r0, #0]
 800c90c:	3301      	adds	r3, #1
 800c90e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c912:	b914      	cbnz	r4, 800c91a <__match+0x12>
 800c914:	6003      	str	r3, [r0, #0]
 800c916:	2001      	movs	r0, #1
 800c918:	bd30      	pop	{r4, r5, pc}
 800c91a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c91e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c922:	2d19      	cmp	r5, #25
 800c924:	bf98      	it	ls
 800c926:	3220      	addls	r2, #32
 800c928:	42a2      	cmp	r2, r4
 800c92a:	d0f0      	beq.n	800c90e <__match+0x6>
 800c92c:	2000      	movs	r0, #0
 800c92e:	e7f3      	b.n	800c918 <__match+0x10>

0800c930 <__hexnan>:
 800c930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c934:	680b      	ldr	r3, [r1, #0]
 800c936:	6801      	ldr	r1, [r0, #0]
 800c938:	115e      	asrs	r6, r3, #5
 800c93a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c93e:	f013 031f 	ands.w	r3, r3, #31
 800c942:	b087      	sub	sp, #28
 800c944:	bf18      	it	ne
 800c946:	3604      	addne	r6, #4
 800c948:	2500      	movs	r5, #0
 800c94a:	1f37      	subs	r7, r6, #4
 800c94c:	4682      	mov	sl, r0
 800c94e:	4690      	mov	r8, r2
 800c950:	9301      	str	r3, [sp, #4]
 800c952:	f846 5c04 	str.w	r5, [r6, #-4]
 800c956:	46b9      	mov	r9, r7
 800c958:	463c      	mov	r4, r7
 800c95a:	9502      	str	r5, [sp, #8]
 800c95c:	46ab      	mov	fp, r5
 800c95e:	784a      	ldrb	r2, [r1, #1]
 800c960:	1c4b      	adds	r3, r1, #1
 800c962:	9303      	str	r3, [sp, #12]
 800c964:	b342      	cbz	r2, 800c9b8 <__hexnan+0x88>
 800c966:	4610      	mov	r0, r2
 800c968:	9105      	str	r1, [sp, #20]
 800c96a:	9204      	str	r2, [sp, #16]
 800c96c:	f7ff fd94 	bl	800c498 <__hexdig_fun>
 800c970:	2800      	cmp	r0, #0
 800c972:	d151      	bne.n	800ca18 <__hexnan+0xe8>
 800c974:	9a04      	ldr	r2, [sp, #16]
 800c976:	9905      	ldr	r1, [sp, #20]
 800c978:	2a20      	cmp	r2, #32
 800c97a:	d818      	bhi.n	800c9ae <__hexnan+0x7e>
 800c97c:	9b02      	ldr	r3, [sp, #8]
 800c97e:	459b      	cmp	fp, r3
 800c980:	dd13      	ble.n	800c9aa <__hexnan+0x7a>
 800c982:	454c      	cmp	r4, r9
 800c984:	d206      	bcs.n	800c994 <__hexnan+0x64>
 800c986:	2d07      	cmp	r5, #7
 800c988:	dc04      	bgt.n	800c994 <__hexnan+0x64>
 800c98a:	462a      	mov	r2, r5
 800c98c:	4649      	mov	r1, r9
 800c98e:	4620      	mov	r0, r4
 800c990:	f7ff ffa8 	bl	800c8e4 <L_shift>
 800c994:	4544      	cmp	r4, r8
 800c996:	d952      	bls.n	800ca3e <__hexnan+0x10e>
 800c998:	2300      	movs	r3, #0
 800c99a:	f1a4 0904 	sub.w	r9, r4, #4
 800c99e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9a2:	f8cd b008 	str.w	fp, [sp, #8]
 800c9a6:	464c      	mov	r4, r9
 800c9a8:	461d      	mov	r5, r3
 800c9aa:	9903      	ldr	r1, [sp, #12]
 800c9ac:	e7d7      	b.n	800c95e <__hexnan+0x2e>
 800c9ae:	2a29      	cmp	r2, #41	@ 0x29
 800c9b0:	d157      	bne.n	800ca62 <__hexnan+0x132>
 800c9b2:	3102      	adds	r1, #2
 800c9b4:	f8ca 1000 	str.w	r1, [sl]
 800c9b8:	f1bb 0f00 	cmp.w	fp, #0
 800c9bc:	d051      	beq.n	800ca62 <__hexnan+0x132>
 800c9be:	454c      	cmp	r4, r9
 800c9c0:	d206      	bcs.n	800c9d0 <__hexnan+0xa0>
 800c9c2:	2d07      	cmp	r5, #7
 800c9c4:	dc04      	bgt.n	800c9d0 <__hexnan+0xa0>
 800c9c6:	462a      	mov	r2, r5
 800c9c8:	4649      	mov	r1, r9
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	f7ff ff8a 	bl	800c8e4 <L_shift>
 800c9d0:	4544      	cmp	r4, r8
 800c9d2:	d936      	bls.n	800ca42 <__hexnan+0x112>
 800c9d4:	f1a8 0204 	sub.w	r2, r8, #4
 800c9d8:	4623      	mov	r3, r4
 800c9da:	f853 1b04 	ldr.w	r1, [r3], #4
 800c9de:	f842 1f04 	str.w	r1, [r2, #4]!
 800c9e2:	429f      	cmp	r7, r3
 800c9e4:	d2f9      	bcs.n	800c9da <__hexnan+0xaa>
 800c9e6:	1b3b      	subs	r3, r7, r4
 800c9e8:	f023 0303 	bic.w	r3, r3, #3
 800c9ec:	3304      	adds	r3, #4
 800c9ee:	3401      	adds	r4, #1
 800c9f0:	3e03      	subs	r6, #3
 800c9f2:	42b4      	cmp	r4, r6
 800c9f4:	bf88      	it	hi
 800c9f6:	2304      	movhi	r3, #4
 800c9f8:	4443      	add	r3, r8
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f843 2b04 	str.w	r2, [r3], #4
 800ca00:	429f      	cmp	r7, r3
 800ca02:	d2fb      	bcs.n	800c9fc <__hexnan+0xcc>
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	b91b      	cbnz	r3, 800ca10 <__hexnan+0xe0>
 800ca08:	4547      	cmp	r7, r8
 800ca0a:	d128      	bne.n	800ca5e <__hexnan+0x12e>
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	603b      	str	r3, [r7, #0]
 800ca10:	2005      	movs	r0, #5
 800ca12:	b007      	add	sp, #28
 800ca14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca18:	3501      	adds	r5, #1
 800ca1a:	2d08      	cmp	r5, #8
 800ca1c:	f10b 0b01 	add.w	fp, fp, #1
 800ca20:	dd06      	ble.n	800ca30 <__hexnan+0x100>
 800ca22:	4544      	cmp	r4, r8
 800ca24:	d9c1      	bls.n	800c9aa <__hexnan+0x7a>
 800ca26:	2300      	movs	r3, #0
 800ca28:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca2c:	2501      	movs	r5, #1
 800ca2e:	3c04      	subs	r4, #4
 800ca30:	6822      	ldr	r2, [r4, #0]
 800ca32:	f000 000f 	and.w	r0, r0, #15
 800ca36:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ca3a:	6020      	str	r0, [r4, #0]
 800ca3c:	e7b5      	b.n	800c9aa <__hexnan+0x7a>
 800ca3e:	2508      	movs	r5, #8
 800ca40:	e7b3      	b.n	800c9aa <__hexnan+0x7a>
 800ca42:	9b01      	ldr	r3, [sp, #4]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d0dd      	beq.n	800ca04 <__hexnan+0xd4>
 800ca48:	f1c3 0320 	rsb	r3, r3, #32
 800ca4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca50:	40da      	lsrs	r2, r3
 800ca52:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ca56:	4013      	ands	r3, r2
 800ca58:	f846 3c04 	str.w	r3, [r6, #-4]
 800ca5c:	e7d2      	b.n	800ca04 <__hexnan+0xd4>
 800ca5e:	3f04      	subs	r7, #4
 800ca60:	e7d0      	b.n	800ca04 <__hexnan+0xd4>
 800ca62:	2004      	movs	r0, #4
 800ca64:	e7d5      	b.n	800ca12 <__hexnan+0xe2>

0800ca66 <__ascii_mbtowc>:
 800ca66:	b082      	sub	sp, #8
 800ca68:	b901      	cbnz	r1, 800ca6c <__ascii_mbtowc+0x6>
 800ca6a:	a901      	add	r1, sp, #4
 800ca6c:	b142      	cbz	r2, 800ca80 <__ascii_mbtowc+0x1a>
 800ca6e:	b14b      	cbz	r3, 800ca84 <__ascii_mbtowc+0x1e>
 800ca70:	7813      	ldrb	r3, [r2, #0]
 800ca72:	600b      	str	r3, [r1, #0]
 800ca74:	7812      	ldrb	r2, [r2, #0]
 800ca76:	1e10      	subs	r0, r2, #0
 800ca78:	bf18      	it	ne
 800ca7a:	2001      	movne	r0, #1
 800ca7c:	b002      	add	sp, #8
 800ca7e:	4770      	bx	lr
 800ca80:	4610      	mov	r0, r2
 800ca82:	e7fb      	b.n	800ca7c <__ascii_mbtowc+0x16>
 800ca84:	f06f 0001 	mvn.w	r0, #1
 800ca88:	e7f8      	b.n	800ca7c <__ascii_mbtowc+0x16>

0800ca8a <_realloc_r>:
 800ca8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca8e:	4680      	mov	r8, r0
 800ca90:	4615      	mov	r5, r2
 800ca92:	460c      	mov	r4, r1
 800ca94:	b921      	cbnz	r1, 800caa0 <_realloc_r+0x16>
 800ca96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca9a:	4611      	mov	r1, r2
 800ca9c:	f7fd be6c 	b.w	800a778 <_malloc_r>
 800caa0:	b92a      	cbnz	r2, 800caae <_realloc_r+0x24>
 800caa2:	f7fd fdf5 	bl	800a690 <_free_r>
 800caa6:	2400      	movs	r4, #0
 800caa8:	4620      	mov	r0, r4
 800caaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caae:	f000 f840 	bl	800cb32 <_malloc_usable_size_r>
 800cab2:	4285      	cmp	r5, r0
 800cab4:	4606      	mov	r6, r0
 800cab6:	d802      	bhi.n	800cabe <_realloc_r+0x34>
 800cab8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cabc:	d8f4      	bhi.n	800caa8 <_realloc_r+0x1e>
 800cabe:	4629      	mov	r1, r5
 800cac0:	4640      	mov	r0, r8
 800cac2:	f7fd fe59 	bl	800a778 <_malloc_r>
 800cac6:	4607      	mov	r7, r0
 800cac8:	2800      	cmp	r0, #0
 800caca:	d0ec      	beq.n	800caa6 <_realloc_r+0x1c>
 800cacc:	42b5      	cmp	r5, r6
 800cace:	462a      	mov	r2, r5
 800cad0:	4621      	mov	r1, r4
 800cad2:	bf28      	it	cs
 800cad4:	4632      	movcs	r2, r6
 800cad6:	f7fc ff78 	bl	80099ca <memcpy>
 800cada:	4621      	mov	r1, r4
 800cadc:	4640      	mov	r0, r8
 800cade:	f7fd fdd7 	bl	800a690 <_free_r>
 800cae2:	463c      	mov	r4, r7
 800cae4:	e7e0      	b.n	800caa8 <_realloc_r+0x1e>

0800cae6 <__ascii_wctomb>:
 800cae6:	4603      	mov	r3, r0
 800cae8:	4608      	mov	r0, r1
 800caea:	b141      	cbz	r1, 800cafe <__ascii_wctomb+0x18>
 800caec:	2aff      	cmp	r2, #255	@ 0xff
 800caee:	d904      	bls.n	800cafa <__ascii_wctomb+0x14>
 800caf0:	228a      	movs	r2, #138	@ 0x8a
 800caf2:	601a      	str	r2, [r3, #0]
 800caf4:	f04f 30ff 	mov.w	r0, #4294967295
 800caf8:	4770      	bx	lr
 800cafa:	700a      	strb	r2, [r1, #0]
 800cafc:	2001      	movs	r0, #1
 800cafe:	4770      	bx	lr

0800cb00 <fiprintf>:
 800cb00:	b40e      	push	{r1, r2, r3}
 800cb02:	b503      	push	{r0, r1, lr}
 800cb04:	4601      	mov	r1, r0
 800cb06:	ab03      	add	r3, sp, #12
 800cb08:	4805      	ldr	r0, [pc, #20]	@ (800cb20 <fiprintf+0x20>)
 800cb0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb0e:	6800      	ldr	r0, [r0, #0]
 800cb10:	9301      	str	r3, [sp, #4]
 800cb12:	f000 f83f 	bl	800cb94 <_vfiprintf_r>
 800cb16:	b002      	add	sp, #8
 800cb18:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb1c:	b003      	add	sp, #12
 800cb1e:	4770      	bx	lr
 800cb20:	20000014 	.word	0x20000014

0800cb24 <abort>:
 800cb24:	b508      	push	{r3, lr}
 800cb26:	2006      	movs	r0, #6
 800cb28:	f000 fa08 	bl	800cf3c <raise>
 800cb2c:	2001      	movs	r0, #1
 800cb2e:	f7f6 fa2b 	bl	8002f88 <_exit>

0800cb32 <_malloc_usable_size_r>:
 800cb32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb36:	1f18      	subs	r0, r3, #4
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	bfbc      	itt	lt
 800cb3c:	580b      	ldrlt	r3, [r1, r0]
 800cb3e:	18c0      	addlt	r0, r0, r3
 800cb40:	4770      	bx	lr

0800cb42 <__sfputc_r>:
 800cb42:	6893      	ldr	r3, [r2, #8]
 800cb44:	3b01      	subs	r3, #1
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	b410      	push	{r4}
 800cb4a:	6093      	str	r3, [r2, #8]
 800cb4c:	da08      	bge.n	800cb60 <__sfputc_r+0x1e>
 800cb4e:	6994      	ldr	r4, [r2, #24]
 800cb50:	42a3      	cmp	r3, r4
 800cb52:	db01      	blt.n	800cb58 <__sfputc_r+0x16>
 800cb54:	290a      	cmp	r1, #10
 800cb56:	d103      	bne.n	800cb60 <__sfputc_r+0x1e>
 800cb58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb5c:	f000 b932 	b.w	800cdc4 <__swbuf_r>
 800cb60:	6813      	ldr	r3, [r2, #0]
 800cb62:	1c58      	adds	r0, r3, #1
 800cb64:	6010      	str	r0, [r2, #0]
 800cb66:	7019      	strb	r1, [r3, #0]
 800cb68:	4608      	mov	r0, r1
 800cb6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb6e:	4770      	bx	lr

0800cb70 <__sfputs_r>:
 800cb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb72:	4606      	mov	r6, r0
 800cb74:	460f      	mov	r7, r1
 800cb76:	4614      	mov	r4, r2
 800cb78:	18d5      	adds	r5, r2, r3
 800cb7a:	42ac      	cmp	r4, r5
 800cb7c:	d101      	bne.n	800cb82 <__sfputs_r+0x12>
 800cb7e:	2000      	movs	r0, #0
 800cb80:	e007      	b.n	800cb92 <__sfputs_r+0x22>
 800cb82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb86:	463a      	mov	r2, r7
 800cb88:	4630      	mov	r0, r6
 800cb8a:	f7ff ffda 	bl	800cb42 <__sfputc_r>
 800cb8e:	1c43      	adds	r3, r0, #1
 800cb90:	d1f3      	bne.n	800cb7a <__sfputs_r+0xa>
 800cb92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cb94 <_vfiprintf_r>:
 800cb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb98:	460d      	mov	r5, r1
 800cb9a:	b09d      	sub	sp, #116	@ 0x74
 800cb9c:	4614      	mov	r4, r2
 800cb9e:	4698      	mov	r8, r3
 800cba0:	4606      	mov	r6, r0
 800cba2:	b118      	cbz	r0, 800cbac <_vfiprintf_r+0x18>
 800cba4:	6a03      	ldr	r3, [r0, #32]
 800cba6:	b90b      	cbnz	r3, 800cbac <_vfiprintf_r+0x18>
 800cba8:	f7fc fde8 	bl	800977c <__sinit>
 800cbac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cbae:	07d9      	lsls	r1, r3, #31
 800cbb0:	d405      	bmi.n	800cbbe <_vfiprintf_r+0x2a>
 800cbb2:	89ab      	ldrh	r3, [r5, #12]
 800cbb4:	059a      	lsls	r2, r3, #22
 800cbb6:	d402      	bmi.n	800cbbe <_vfiprintf_r+0x2a>
 800cbb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbba:	f7fc ff04 	bl	80099c6 <__retarget_lock_acquire_recursive>
 800cbbe:	89ab      	ldrh	r3, [r5, #12]
 800cbc0:	071b      	lsls	r3, r3, #28
 800cbc2:	d501      	bpl.n	800cbc8 <_vfiprintf_r+0x34>
 800cbc4:	692b      	ldr	r3, [r5, #16]
 800cbc6:	b99b      	cbnz	r3, 800cbf0 <_vfiprintf_r+0x5c>
 800cbc8:	4629      	mov	r1, r5
 800cbca:	4630      	mov	r0, r6
 800cbcc:	f000 f938 	bl	800ce40 <__swsetup_r>
 800cbd0:	b170      	cbz	r0, 800cbf0 <_vfiprintf_r+0x5c>
 800cbd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cbd4:	07dc      	lsls	r4, r3, #31
 800cbd6:	d504      	bpl.n	800cbe2 <_vfiprintf_r+0x4e>
 800cbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbdc:	b01d      	add	sp, #116	@ 0x74
 800cbde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbe2:	89ab      	ldrh	r3, [r5, #12]
 800cbe4:	0598      	lsls	r0, r3, #22
 800cbe6:	d4f7      	bmi.n	800cbd8 <_vfiprintf_r+0x44>
 800cbe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbea:	f7fc feed 	bl	80099c8 <__retarget_lock_release_recursive>
 800cbee:	e7f3      	b.n	800cbd8 <_vfiprintf_r+0x44>
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbf4:	2320      	movs	r3, #32
 800cbf6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cbfa:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbfe:	2330      	movs	r3, #48	@ 0x30
 800cc00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cdb0 <_vfiprintf_r+0x21c>
 800cc04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc08:	f04f 0901 	mov.w	r9, #1
 800cc0c:	4623      	mov	r3, r4
 800cc0e:	469a      	mov	sl, r3
 800cc10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc14:	b10a      	cbz	r2, 800cc1a <_vfiprintf_r+0x86>
 800cc16:	2a25      	cmp	r2, #37	@ 0x25
 800cc18:	d1f9      	bne.n	800cc0e <_vfiprintf_r+0x7a>
 800cc1a:	ebba 0b04 	subs.w	fp, sl, r4
 800cc1e:	d00b      	beq.n	800cc38 <_vfiprintf_r+0xa4>
 800cc20:	465b      	mov	r3, fp
 800cc22:	4622      	mov	r2, r4
 800cc24:	4629      	mov	r1, r5
 800cc26:	4630      	mov	r0, r6
 800cc28:	f7ff ffa2 	bl	800cb70 <__sfputs_r>
 800cc2c:	3001      	adds	r0, #1
 800cc2e:	f000 80a7 	beq.w	800cd80 <_vfiprintf_r+0x1ec>
 800cc32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc34:	445a      	add	r2, fp
 800cc36:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc38:	f89a 3000 	ldrb.w	r3, [sl]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	f000 809f 	beq.w	800cd80 <_vfiprintf_r+0x1ec>
 800cc42:	2300      	movs	r3, #0
 800cc44:	f04f 32ff 	mov.w	r2, #4294967295
 800cc48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc4c:	f10a 0a01 	add.w	sl, sl, #1
 800cc50:	9304      	str	r3, [sp, #16]
 800cc52:	9307      	str	r3, [sp, #28]
 800cc54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc58:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc5a:	4654      	mov	r4, sl
 800cc5c:	2205      	movs	r2, #5
 800cc5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc62:	4853      	ldr	r0, [pc, #332]	@ (800cdb0 <_vfiprintf_r+0x21c>)
 800cc64:	f7f3 fadc 	bl	8000220 <memchr>
 800cc68:	9a04      	ldr	r2, [sp, #16]
 800cc6a:	b9d8      	cbnz	r0, 800cca4 <_vfiprintf_r+0x110>
 800cc6c:	06d1      	lsls	r1, r2, #27
 800cc6e:	bf44      	itt	mi
 800cc70:	2320      	movmi	r3, #32
 800cc72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc76:	0713      	lsls	r3, r2, #28
 800cc78:	bf44      	itt	mi
 800cc7a:	232b      	movmi	r3, #43	@ 0x2b
 800cc7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc80:	f89a 3000 	ldrb.w	r3, [sl]
 800cc84:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc86:	d015      	beq.n	800ccb4 <_vfiprintf_r+0x120>
 800cc88:	9a07      	ldr	r2, [sp, #28]
 800cc8a:	4654      	mov	r4, sl
 800cc8c:	2000      	movs	r0, #0
 800cc8e:	f04f 0c0a 	mov.w	ip, #10
 800cc92:	4621      	mov	r1, r4
 800cc94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc98:	3b30      	subs	r3, #48	@ 0x30
 800cc9a:	2b09      	cmp	r3, #9
 800cc9c:	d94b      	bls.n	800cd36 <_vfiprintf_r+0x1a2>
 800cc9e:	b1b0      	cbz	r0, 800ccce <_vfiprintf_r+0x13a>
 800cca0:	9207      	str	r2, [sp, #28]
 800cca2:	e014      	b.n	800ccce <_vfiprintf_r+0x13a>
 800cca4:	eba0 0308 	sub.w	r3, r0, r8
 800cca8:	fa09 f303 	lsl.w	r3, r9, r3
 800ccac:	4313      	orrs	r3, r2
 800ccae:	9304      	str	r3, [sp, #16]
 800ccb0:	46a2      	mov	sl, r4
 800ccb2:	e7d2      	b.n	800cc5a <_vfiprintf_r+0xc6>
 800ccb4:	9b03      	ldr	r3, [sp, #12]
 800ccb6:	1d19      	adds	r1, r3, #4
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	9103      	str	r1, [sp, #12]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	bfbb      	ittet	lt
 800ccc0:	425b      	neglt	r3, r3
 800ccc2:	f042 0202 	orrlt.w	r2, r2, #2
 800ccc6:	9307      	strge	r3, [sp, #28]
 800ccc8:	9307      	strlt	r3, [sp, #28]
 800ccca:	bfb8      	it	lt
 800cccc:	9204      	strlt	r2, [sp, #16]
 800ccce:	7823      	ldrb	r3, [r4, #0]
 800ccd0:	2b2e      	cmp	r3, #46	@ 0x2e
 800ccd2:	d10a      	bne.n	800ccea <_vfiprintf_r+0x156>
 800ccd4:	7863      	ldrb	r3, [r4, #1]
 800ccd6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccd8:	d132      	bne.n	800cd40 <_vfiprintf_r+0x1ac>
 800ccda:	9b03      	ldr	r3, [sp, #12]
 800ccdc:	1d1a      	adds	r2, r3, #4
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	9203      	str	r2, [sp, #12]
 800cce2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cce6:	3402      	adds	r4, #2
 800cce8:	9305      	str	r3, [sp, #20]
 800ccea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cdc0 <_vfiprintf_r+0x22c>
 800ccee:	7821      	ldrb	r1, [r4, #0]
 800ccf0:	2203      	movs	r2, #3
 800ccf2:	4650      	mov	r0, sl
 800ccf4:	f7f3 fa94 	bl	8000220 <memchr>
 800ccf8:	b138      	cbz	r0, 800cd0a <_vfiprintf_r+0x176>
 800ccfa:	9b04      	ldr	r3, [sp, #16]
 800ccfc:	eba0 000a 	sub.w	r0, r0, sl
 800cd00:	2240      	movs	r2, #64	@ 0x40
 800cd02:	4082      	lsls	r2, r0
 800cd04:	4313      	orrs	r3, r2
 800cd06:	3401      	adds	r4, #1
 800cd08:	9304      	str	r3, [sp, #16]
 800cd0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd0e:	4829      	ldr	r0, [pc, #164]	@ (800cdb4 <_vfiprintf_r+0x220>)
 800cd10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd14:	2206      	movs	r2, #6
 800cd16:	f7f3 fa83 	bl	8000220 <memchr>
 800cd1a:	2800      	cmp	r0, #0
 800cd1c:	d03f      	beq.n	800cd9e <_vfiprintf_r+0x20a>
 800cd1e:	4b26      	ldr	r3, [pc, #152]	@ (800cdb8 <_vfiprintf_r+0x224>)
 800cd20:	bb1b      	cbnz	r3, 800cd6a <_vfiprintf_r+0x1d6>
 800cd22:	9b03      	ldr	r3, [sp, #12]
 800cd24:	3307      	adds	r3, #7
 800cd26:	f023 0307 	bic.w	r3, r3, #7
 800cd2a:	3308      	adds	r3, #8
 800cd2c:	9303      	str	r3, [sp, #12]
 800cd2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd30:	443b      	add	r3, r7
 800cd32:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd34:	e76a      	b.n	800cc0c <_vfiprintf_r+0x78>
 800cd36:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd3a:	460c      	mov	r4, r1
 800cd3c:	2001      	movs	r0, #1
 800cd3e:	e7a8      	b.n	800cc92 <_vfiprintf_r+0xfe>
 800cd40:	2300      	movs	r3, #0
 800cd42:	3401      	adds	r4, #1
 800cd44:	9305      	str	r3, [sp, #20]
 800cd46:	4619      	mov	r1, r3
 800cd48:	f04f 0c0a 	mov.w	ip, #10
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd52:	3a30      	subs	r2, #48	@ 0x30
 800cd54:	2a09      	cmp	r2, #9
 800cd56:	d903      	bls.n	800cd60 <_vfiprintf_r+0x1cc>
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d0c6      	beq.n	800ccea <_vfiprintf_r+0x156>
 800cd5c:	9105      	str	r1, [sp, #20]
 800cd5e:	e7c4      	b.n	800ccea <_vfiprintf_r+0x156>
 800cd60:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd64:	4604      	mov	r4, r0
 800cd66:	2301      	movs	r3, #1
 800cd68:	e7f0      	b.n	800cd4c <_vfiprintf_r+0x1b8>
 800cd6a:	ab03      	add	r3, sp, #12
 800cd6c:	9300      	str	r3, [sp, #0]
 800cd6e:	462a      	mov	r2, r5
 800cd70:	4b12      	ldr	r3, [pc, #72]	@ (800cdbc <_vfiprintf_r+0x228>)
 800cd72:	a904      	add	r1, sp, #16
 800cd74:	4630      	mov	r0, r6
 800cd76:	f7fb fea9 	bl	8008acc <_printf_float>
 800cd7a:	4607      	mov	r7, r0
 800cd7c:	1c78      	adds	r0, r7, #1
 800cd7e:	d1d6      	bne.n	800cd2e <_vfiprintf_r+0x19a>
 800cd80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd82:	07d9      	lsls	r1, r3, #31
 800cd84:	d405      	bmi.n	800cd92 <_vfiprintf_r+0x1fe>
 800cd86:	89ab      	ldrh	r3, [r5, #12]
 800cd88:	059a      	lsls	r2, r3, #22
 800cd8a:	d402      	bmi.n	800cd92 <_vfiprintf_r+0x1fe>
 800cd8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd8e:	f7fc fe1b 	bl	80099c8 <__retarget_lock_release_recursive>
 800cd92:	89ab      	ldrh	r3, [r5, #12]
 800cd94:	065b      	lsls	r3, r3, #25
 800cd96:	f53f af1f 	bmi.w	800cbd8 <_vfiprintf_r+0x44>
 800cd9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd9c:	e71e      	b.n	800cbdc <_vfiprintf_r+0x48>
 800cd9e:	ab03      	add	r3, sp, #12
 800cda0:	9300      	str	r3, [sp, #0]
 800cda2:	462a      	mov	r2, r5
 800cda4:	4b05      	ldr	r3, [pc, #20]	@ (800cdbc <_vfiprintf_r+0x228>)
 800cda6:	a904      	add	r1, sp, #16
 800cda8:	4630      	mov	r0, r6
 800cdaa:	f7fc f927 	bl	8008ffc <_printf_i>
 800cdae:	e7e4      	b.n	800cd7a <_vfiprintf_r+0x1e6>
 800cdb0:	0800d4b9 	.word	0x0800d4b9
 800cdb4:	0800d4c3 	.word	0x0800d4c3
 800cdb8:	08008acd 	.word	0x08008acd
 800cdbc:	0800cb71 	.word	0x0800cb71
 800cdc0:	0800d4bf 	.word	0x0800d4bf

0800cdc4 <__swbuf_r>:
 800cdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdc6:	460e      	mov	r6, r1
 800cdc8:	4614      	mov	r4, r2
 800cdca:	4605      	mov	r5, r0
 800cdcc:	b118      	cbz	r0, 800cdd6 <__swbuf_r+0x12>
 800cdce:	6a03      	ldr	r3, [r0, #32]
 800cdd0:	b90b      	cbnz	r3, 800cdd6 <__swbuf_r+0x12>
 800cdd2:	f7fc fcd3 	bl	800977c <__sinit>
 800cdd6:	69a3      	ldr	r3, [r4, #24]
 800cdd8:	60a3      	str	r3, [r4, #8]
 800cdda:	89a3      	ldrh	r3, [r4, #12]
 800cddc:	071a      	lsls	r2, r3, #28
 800cdde:	d501      	bpl.n	800cde4 <__swbuf_r+0x20>
 800cde0:	6923      	ldr	r3, [r4, #16]
 800cde2:	b943      	cbnz	r3, 800cdf6 <__swbuf_r+0x32>
 800cde4:	4621      	mov	r1, r4
 800cde6:	4628      	mov	r0, r5
 800cde8:	f000 f82a 	bl	800ce40 <__swsetup_r>
 800cdec:	b118      	cbz	r0, 800cdf6 <__swbuf_r+0x32>
 800cdee:	f04f 37ff 	mov.w	r7, #4294967295
 800cdf2:	4638      	mov	r0, r7
 800cdf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdf6:	6823      	ldr	r3, [r4, #0]
 800cdf8:	6922      	ldr	r2, [r4, #16]
 800cdfa:	1a98      	subs	r0, r3, r2
 800cdfc:	6963      	ldr	r3, [r4, #20]
 800cdfe:	b2f6      	uxtb	r6, r6
 800ce00:	4283      	cmp	r3, r0
 800ce02:	4637      	mov	r7, r6
 800ce04:	dc05      	bgt.n	800ce12 <__swbuf_r+0x4e>
 800ce06:	4621      	mov	r1, r4
 800ce08:	4628      	mov	r0, r5
 800ce0a:	f7ff fa53 	bl	800c2b4 <_fflush_r>
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	d1ed      	bne.n	800cdee <__swbuf_r+0x2a>
 800ce12:	68a3      	ldr	r3, [r4, #8]
 800ce14:	3b01      	subs	r3, #1
 800ce16:	60a3      	str	r3, [r4, #8]
 800ce18:	6823      	ldr	r3, [r4, #0]
 800ce1a:	1c5a      	adds	r2, r3, #1
 800ce1c:	6022      	str	r2, [r4, #0]
 800ce1e:	701e      	strb	r6, [r3, #0]
 800ce20:	6962      	ldr	r2, [r4, #20]
 800ce22:	1c43      	adds	r3, r0, #1
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d004      	beq.n	800ce32 <__swbuf_r+0x6e>
 800ce28:	89a3      	ldrh	r3, [r4, #12]
 800ce2a:	07db      	lsls	r3, r3, #31
 800ce2c:	d5e1      	bpl.n	800cdf2 <__swbuf_r+0x2e>
 800ce2e:	2e0a      	cmp	r6, #10
 800ce30:	d1df      	bne.n	800cdf2 <__swbuf_r+0x2e>
 800ce32:	4621      	mov	r1, r4
 800ce34:	4628      	mov	r0, r5
 800ce36:	f7ff fa3d 	bl	800c2b4 <_fflush_r>
 800ce3a:	2800      	cmp	r0, #0
 800ce3c:	d0d9      	beq.n	800cdf2 <__swbuf_r+0x2e>
 800ce3e:	e7d6      	b.n	800cdee <__swbuf_r+0x2a>

0800ce40 <__swsetup_r>:
 800ce40:	b538      	push	{r3, r4, r5, lr}
 800ce42:	4b29      	ldr	r3, [pc, #164]	@ (800cee8 <__swsetup_r+0xa8>)
 800ce44:	4605      	mov	r5, r0
 800ce46:	6818      	ldr	r0, [r3, #0]
 800ce48:	460c      	mov	r4, r1
 800ce4a:	b118      	cbz	r0, 800ce54 <__swsetup_r+0x14>
 800ce4c:	6a03      	ldr	r3, [r0, #32]
 800ce4e:	b90b      	cbnz	r3, 800ce54 <__swsetup_r+0x14>
 800ce50:	f7fc fc94 	bl	800977c <__sinit>
 800ce54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce58:	0719      	lsls	r1, r3, #28
 800ce5a:	d422      	bmi.n	800cea2 <__swsetup_r+0x62>
 800ce5c:	06da      	lsls	r2, r3, #27
 800ce5e:	d407      	bmi.n	800ce70 <__swsetup_r+0x30>
 800ce60:	2209      	movs	r2, #9
 800ce62:	602a      	str	r2, [r5, #0]
 800ce64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce68:	81a3      	strh	r3, [r4, #12]
 800ce6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce6e:	e033      	b.n	800ced8 <__swsetup_r+0x98>
 800ce70:	0758      	lsls	r0, r3, #29
 800ce72:	d512      	bpl.n	800ce9a <__swsetup_r+0x5a>
 800ce74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ce76:	b141      	cbz	r1, 800ce8a <__swsetup_r+0x4a>
 800ce78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ce7c:	4299      	cmp	r1, r3
 800ce7e:	d002      	beq.n	800ce86 <__swsetup_r+0x46>
 800ce80:	4628      	mov	r0, r5
 800ce82:	f7fd fc05 	bl	800a690 <_free_r>
 800ce86:	2300      	movs	r3, #0
 800ce88:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce8a:	89a3      	ldrh	r3, [r4, #12]
 800ce8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ce90:	81a3      	strh	r3, [r4, #12]
 800ce92:	2300      	movs	r3, #0
 800ce94:	6063      	str	r3, [r4, #4]
 800ce96:	6923      	ldr	r3, [r4, #16]
 800ce98:	6023      	str	r3, [r4, #0]
 800ce9a:	89a3      	ldrh	r3, [r4, #12]
 800ce9c:	f043 0308 	orr.w	r3, r3, #8
 800cea0:	81a3      	strh	r3, [r4, #12]
 800cea2:	6923      	ldr	r3, [r4, #16]
 800cea4:	b94b      	cbnz	r3, 800ceba <__swsetup_r+0x7a>
 800cea6:	89a3      	ldrh	r3, [r4, #12]
 800cea8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ceac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ceb0:	d003      	beq.n	800ceba <__swsetup_r+0x7a>
 800ceb2:	4621      	mov	r1, r4
 800ceb4:	4628      	mov	r0, r5
 800ceb6:	f000 f883 	bl	800cfc0 <__smakebuf_r>
 800ceba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cebe:	f013 0201 	ands.w	r2, r3, #1
 800cec2:	d00a      	beq.n	800ceda <__swsetup_r+0x9a>
 800cec4:	2200      	movs	r2, #0
 800cec6:	60a2      	str	r2, [r4, #8]
 800cec8:	6962      	ldr	r2, [r4, #20]
 800ceca:	4252      	negs	r2, r2
 800cecc:	61a2      	str	r2, [r4, #24]
 800cece:	6922      	ldr	r2, [r4, #16]
 800ced0:	b942      	cbnz	r2, 800cee4 <__swsetup_r+0xa4>
 800ced2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ced6:	d1c5      	bne.n	800ce64 <__swsetup_r+0x24>
 800ced8:	bd38      	pop	{r3, r4, r5, pc}
 800ceda:	0799      	lsls	r1, r3, #30
 800cedc:	bf58      	it	pl
 800cede:	6962      	ldrpl	r2, [r4, #20]
 800cee0:	60a2      	str	r2, [r4, #8]
 800cee2:	e7f4      	b.n	800cece <__swsetup_r+0x8e>
 800cee4:	2000      	movs	r0, #0
 800cee6:	e7f7      	b.n	800ced8 <__swsetup_r+0x98>
 800cee8:	20000014 	.word	0x20000014

0800ceec <_raise_r>:
 800ceec:	291f      	cmp	r1, #31
 800ceee:	b538      	push	{r3, r4, r5, lr}
 800cef0:	4605      	mov	r5, r0
 800cef2:	460c      	mov	r4, r1
 800cef4:	d904      	bls.n	800cf00 <_raise_r+0x14>
 800cef6:	2316      	movs	r3, #22
 800cef8:	6003      	str	r3, [r0, #0]
 800cefa:	f04f 30ff 	mov.w	r0, #4294967295
 800cefe:	bd38      	pop	{r3, r4, r5, pc}
 800cf00:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cf02:	b112      	cbz	r2, 800cf0a <_raise_r+0x1e>
 800cf04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf08:	b94b      	cbnz	r3, 800cf1e <_raise_r+0x32>
 800cf0a:	4628      	mov	r0, r5
 800cf0c:	f000 f830 	bl	800cf70 <_getpid_r>
 800cf10:	4622      	mov	r2, r4
 800cf12:	4601      	mov	r1, r0
 800cf14:	4628      	mov	r0, r5
 800cf16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf1a:	f000 b817 	b.w	800cf4c <_kill_r>
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d00a      	beq.n	800cf38 <_raise_r+0x4c>
 800cf22:	1c59      	adds	r1, r3, #1
 800cf24:	d103      	bne.n	800cf2e <_raise_r+0x42>
 800cf26:	2316      	movs	r3, #22
 800cf28:	6003      	str	r3, [r0, #0]
 800cf2a:	2001      	movs	r0, #1
 800cf2c:	e7e7      	b.n	800cefe <_raise_r+0x12>
 800cf2e:	2100      	movs	r1, #0
 800cf30:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cf34:	4620      	mov	r0, r4
 800cf36:	4798      	blx	r3
 800cf38:	2000      	movs	r0, #0
 800cf3a:	e7e0      	b.n	800cefe <_raise_r+0x12>

0800cf3c <raise>:
 800cf3c:	4b02      	ldr	r3, [pc, #8]	@ (800cf48 <raise+0xc>)
 800cf3e:	4601      	mov	r1, r0
 800cf40:	6818      	ldr	r0, [r3, #0]
 800cf42:	f7ff bfd3 	b.w	800ceec <_raise_r>
 800cf46:	bf00      	nop
 800cf48:	20000014 	.word	0x20000014

0800cf4c <_kill_r>:
 800cf4c:	b538      	push	{r3, r4, r5, lr}
 800cf4e:	4d07      	ldr	r5, [pc, #28]	@ (800cf6c <_kill_r+0x20>)
 800cf50:	2300      	movs	r3, #0
 800cf52:	4604      	mov	r4, r0
 800cf54:	4608      	mov	r0, r1
 800cf56:	4611      	mov	r1, r2
 800cf58:	602b      	str	r3, [r5, #0]
 800cf5a:	f7f6 f805 	bl	8002f68 <_kill>
 800cf5e:	1c43      	adds	r3, r0, #1
 800cf60:	d102      	bne.n	800cf68 <_kill_r+0x1c>
 800cf62:	682b      	ldr	r3, [r5, #0]
 800cf64:	b103      	cbz	r3, 800cf68 <_kill_r+0x1c>
 800cf66:	6023      	str	r3, [r4, #0]
 800cf68:	bd38      	pop	{r3, r4, r5, pc}
 800cf6a:	bf00      	nop
 800cf6c:	2000087c 	.word	0x2000087c

0800cf70 <_getpid_r>:
 800cf70:	f7f5 bff2 	b.w	8002f58 <_getpid>

0800cf74 <__swhatbuf_r>:
 800cf74:	b570      	push	{r4, r5, r6, lr}
 800cf76:	460c      	mov	r4, r1
 800cf78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf7c:	2900      	cmp	r1, #0
 800cf7e:	b096      	sub	sp, #88	@ 0x58
 800cf80:	4615      	mov	r5, r2
 800cf82:	461e      	mov	r6, r3
 800cf84:	da0d      	bge.n	800cfa2 <__swhatbuf_r+0x2e>
 800cf86:	89a3      	ldrh	r3, [r4, #12]
 800cf88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cf8c:	f04f 0100 	mov.w	r1, #0
 800cf90:	bf14      	ite	ne
 800cf92:	2340      	movne	r3, #64	@ 0x40
 800cf94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cf98:	2000      	movs	r0, #0
 800cf9a:	6031      	str	r1, [r6, #0]
 800cf9c:	602b      	str	r3, [r5, #0]
 800cf9e:	b016      	add	sp, #88	@ 0x58
 800cfa0:	bd70      	pop	{r4, r5, r6, pc}
 800cfa2:	466a      	mov	r2, sp
 800cfa4:	f000 f848 	bl	800d038 <_fstat_r>
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	dbec      	blt.n	800cf86 <__swhatbuf_r+0x12>
 800cfac:	9901      	ldr	r1, [sp, #4]
 800cfae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cfb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cfb6:	4259      	negs	r1, r3
 800cfb8:	4159      	adcs	r1, r3
 800cfba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cfbe:	e7eb      	b.n	800cf98 <__swhatbuf_r+0x24>

0800cfc0 <__smakebuf_r>:
 800cfc0:	898b      	ldrh	r3, [r1, #12]
 800cfc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfc4:	079d      	lsls	r5, r3, #30
 800cfc6:	4606      	mov	r6, r0
 800cfc8:	460c      	mov	r4, r1
 800cfca:	d507      	bpl.n	800cfdc <__smakebuf_r+0x1c>
 800cfcc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cfd0:	6023      	str	r3, [r4, #0]
 800cfd2:	6123      	str	r3, [r4, #16]
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	6163      	str	r3, [r4, #20]
 800cfd8:	b003      	add	sp, #12
 800cfda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfdc:	ab01      	add	r3, sp, #4
 800cfde:	466a      	mov	r2, sp
 800cfe0:	f7ff ffc8 	bl	800cf74 <__swhatbuf_r>
 800cfe4:	9f00      	ldr	r7, [sp, #0]
 800cfe6:	4605      	mov	r5, r0
 800cfe8:	4639      	mov	r1, r7
 800cfea:	4630      	mov	r0, r6
 800cfec:	f7fd fbc4 	bl	800a778 <_malloc_r>
 800cff0:	b948      	cbnz	r0, 800d006 <__smakebuf_r+0x46>
 800cff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cff6:	059a      	lsls	r2, r3, #22
 800cff8:	d4ee      	bmi.n	800cfd8 <__smakebuf_r+0x18>
 800cffa:	f023 0303 	bic.w	r3, r3, #3
 800cffe:	f043 0302 	orr.w	r3, r3, #2
 800d002:	81a3      	strh	r3, [r4, #12]
 800d004:	e7e2      	b.n	800cfcc <__smakebuf_r+0xc>
 800d006:	89a3      	ldrh	r3, [r4, #12]
 800d008:	6020      	str	r0, [r4, #0]
 800d00a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d00e:	81a3      	strh	r3, [r4, #12]
 800d010:	9b01      	ldr	r3, [sp, #4]
 800d012:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d016:	b15b      	cbz	r3, 800d030 <__smakebuf_r+0x70>
 800d018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d01c:	4630      	mov	r0, r6
 800d01e:	f000 f81d 	bl	800d05c <_isatty_r>
 800d022:	b128      	cbz	r0, 800d030 <__smakebuf_r+0x70>
 800d024:	89a3      	ldrh	r3, [r4, #12]
 800d026:	f023 0303 	bic.w	r3, r3, #3
 800d02a:	f043 0301 	orr.w	r3, r3, #1
 800d02e:	81a3      	strh	r3, [r4, #12]
 800d030:	89a3      	ldrh	r3, [r4, #12]
 800d032:	431d      	orrs	r5, r3
 800d034:	81a5      	strh	r5, [r4, #12]
 800d036:	e7cf      	b.n	800cfd8 <__smakebuf_r+0x18>

0800d038 <_fstat_r>:
 800d038:	b538      	push	{r3, r4, r5, lr}
 800d03a:	4d07      	ldr	r5, [pc, #28]	@ (800d058 <_fstat_r+0x20>)
 800d03c:	2300      	movs	r3, #0
 800d03e:	4604      	mov	r4, r0
 800d040:	4608      	mov	r0, r1
 800d042:	4611      	mov	r1, r2
 800d044:	602b      	str	r3, [r5, #0]
 800d046:	f7f5 ffef 	bl	8003028 <_fstat>
 800d04a:	1c43      	adds	r3, r0, #1
 800d04c:	d102      	bne.n	800d054 <_fstat_r+0x1c>
 800d04e:	682b      	ldr	r3, [r5, #0]
 800d050:	b103      	cbz	r3, 800d054 <_fstat_r+0x1c>
 800d052:	6023      	str	r3, [r4, #0]
 800d054:	bd38      	pop	{r3, r4, r5, pc}
 800d056:	bf00      	nop
 800d058:	2000087c 	.word	0x2000087c

0800d05c <_isatty_r>:
 800d05c:	b538      	push	{r3, r4, r5, lr}
 800d05e:	4d06      	ldr	r5, [pc, #24]	@ (800d078 <_isatty_r+0x1c>)
 800d060:	2300      	movs	r3, #0
 800d062:	4604      	mov	r4, r0
 800d064:	4608      	mov	r0, r1
 800d066:	602b      	str	r3, [r5, #0]
 800d068:	f7f5 ffee 	bl	8003048 <_isatty>
 800d06c:	1c43      	adds	r3, r0, #1
 800d06e:	d102      	bne.n	800d076 <_isatty_r+0x1a>
 800d070:	682b      	ldr	r3, [r5, #0]
 800d072:	b103      	cbz	r3, 800d076 <_isatty_r+0x1a>
 800d074:	6023      	str	r3, [r4, #0]
 800d076:	bd38      	pop	{r3, r4, r5, pc}
 800d078:	2000087c 	.word	0x2000087c

0800d07c <_init>:
 800d07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d07e:	bf00      	nop
 800d080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d082:	bc08      	pop	{r3}
 800d084:	469e      	mov	lr, r3
 800d086:	4770      	bx	lr

0800d088 <_fini>:
 800d088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d08a:	bf00      	nop
 800d08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d08e:	bc08      	pop	{r3}
 800d090:	469e      	mov	lr, r3
 800d092:	4770      	bx	lr
