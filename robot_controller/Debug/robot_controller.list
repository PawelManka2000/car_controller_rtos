
robot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf54  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800d138  0800d138  0000e138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d610  0800d610  0000f1d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d610  0800d610  0000e610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d618  0800d618  0000f1d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d618  0800d618  0000e618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d61c  0800d61c  0000e61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800d620  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000724  200001d0  0800d7f0  0000f1d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008f4  0800d7f0  0000f8f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e0c7  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044e2  00000000  00000000  0002d2c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  000317b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001145  00000000  00000000  00032e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a7c  00000000  00000000  00033f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001efad  00000000  00000000  0005d9e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106300  00000000  00000000  0007c98e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00182c8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007040  00000000  00000000  00182cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00189d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d0 	.word	0x200001d0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d11c 	.word	0x0800d11c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d4 	.word	0x200001d4
 800021c:	0800d11c 	.word	0x0800d11c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	@ 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	2238      	movs	r2, #56	@ 0x38
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f008 fc83 	bl	800994e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001056:	2000      	movs	r0, #0
 8001058:	f002 fc32 	bl	80038c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800105c:	2302      	movs	r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001060:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001066:	2340      	movs	r3, #64	@ 0x40
 8001068:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106a:	2302      	movs	r3, #2
 800106c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800106e:	2302      	movs	r3, #2
 8001070:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001072:	2304      	movs	r3, #4
 8001074:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001076:	2355      	movs	r3, #85	@ 0x55
 8001078:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800107a:	2302      	movs	r3, #2
 800107c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800107e:	2302      	movs	r3, #2
 8001080:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001082:	2302      	movs	r3, #2
 8001084:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	4618      	mov	r0, r3
 800108c:	f002 fccc 	bl	8003a28 <HAL_RCC_OscConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001096:	f001 fcdb 	bl	8002a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109a:	230f      	movs	r3, #15
 800109c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109e:	2303      	movs	r3, #3
 80010a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2104      	movs	r1, #4
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 ffca 	bl	800404c <HAL_RCC_ClockConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010be:	f001 fcc7 	bl	8002a50 <Error_Handler>
  }
}
 80010c2:	bf00      	nop
 80010c4:	3750      	adds	r7, #80	@ 0x50
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <MX_GPIO_Init>:

#include "gpio_configuration.h"


void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b30      	ldr	r3, [pc, #192]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a2f      	ldr	r2, [pc, #188]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b2d      	ldr	r3, [pc, #180]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010fa:	4b2a      	ldr	r3, [pc, #168]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a29      	ldr	r2, [pc, #164]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001100:	f043 0320 	orr.w	r3, r3, #32
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b27      	ldr	r3, [pc, #156]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0320 	and.w	r3, r3, #32
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b24      	ldr	r3, [pc, #144]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a23      	ldr	r2, [pc, #140]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b21      	ldr	r3, [pc, #132]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b1e      	ldr	r3, [pc, #120]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a1d      	ldr	r2, [pc, #116]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9|LD2_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f240 3123 	movw	r1, #803	@ 0x323
 8001148:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800114c:	f002 fba0 	bl	8003890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001150:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001156:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800115a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	4810      	ldr	r0, [pc, #64]	@ (80011a8 <MX_GPIO_Init+0xdc>)
 8001168:	f002 fa10 	bl	800358c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA9 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9|LD2_Pin;
 800116c:	f240 3323 	movw	r3, #803	@ 0x323
 8001170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001188:	f002 fa00 	bl	800358c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2028      	movs	r0, #40	@ 0x28
 8001192:	f002 f913 	bl	80033bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001196:	2028      	movs	r0, #40	@ 0x28
 8001198:	f002 f92a 	bl	80033f0 <HAL_NVIC_EnableIRQ>

}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	@ 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021000 	.word	0x40021000
 80011a8:	48000800 	.word	0x48000800

080011ac <MX_TIM1_Init>:




void MX_TIM1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b09c      	sub	sp, #112	@ 0x70
 80011b0:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
 80011dc:	615a      	str	r2, [r3, #20]
 80011de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2234      	movs	r2, #52	@ 0x34
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f008 fbb1 	bl	800994e <memset>

  htim1.Instance = TIM1;
 80011ec:	4b57      	ldr	r3, [pc, #348]	@ (800134c <MX_TIM1_Init+0x1a0>)
 80011ee:	4a58      	ldr	r2, [pc, #352]	@ (8001350 <MX_TIM1_Init+0x1a4>)
 80011f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170000-1;
 80011f2:	4b56      	ldr	r3, [pc, #344]	@ (800134c <MX_TIM1_Init+0x1a0>)
 80011f4:	4a57      	ldr	r2, [pc, #348]	@ (8001354 <MX_TIM1_Init+0x1a8>)
 80011f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f8:	4b54      	ldr	r3, [pc, #336]	@ (800134c <MX_TIM1_Init+0x1a0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80011fe:	4b53      	ldr	r3, [pc, #332]	@ (800134c <MX_TIM1_Init+0x1a0>)
 8001200:	2263      	movs	r2, #99	@ 0x63
 8001202:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001204:	4b51      	ldr	r3, [pc, #324]	@ (800134c <MX_TIM1_Init+0x1a0>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800120a:	4b50      	ldr	r3, [pc, #320]	@ (800134c <MX_TIM1_Init+0x1a0>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001210:	4b4e      	ldr	r3, [pc, #312]	@ (800134c <MX_TIM1_Init+0x1a0>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001216:	484d      	ldr	r0, [pc, #308]	@ (800134c <MX_TIM1_Init+0x1a0>)
 8001218:	f003 fbb4 	bl	8004984 <HAL_TIM_Base_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001222:	f001 fc15 	bl	8002a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001226:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800122a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800122c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001230:	4619      	mov	r1, r3
 8001232:	4846      	ldr	r0, [pc, #280]	@ (800134c <MX_TIM1_Init+0x1a0>)
 8001234:	f004 f982 	bl	800553c <HAL_TIM_ConfigClockSource>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800123e:	f001 fc07 	bl	8002a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001242:	4842      	ldr	r0, [pc, #264]	@ (800134c <MX_TIM1_Init+0x1a0>)
 8001244:	f003 fc6e 	bl	8004b24 <HAL_TIM_PWM_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800124e:	f001 fbff 	bl	8002a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800125e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001262:	4619      	mov	r1, r3
 8001264:	4839      	ldr	r0, [pc, #228]	@ (800134c <MX_TIM1_Init+0x1a0>)
 8001266:	f004 ff47 	bl	80060f8 <HAL_TIMEx_MasterConfigSynchronization>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001270:	f001 fbee 	bl	8002a50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001274:	2360      	movs	r3, #96	@ 0x60
 8001276:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127c:	2300      	movs	r3, #0
 800127e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001280:	2300      	movs	r3, #0
 8001282:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001290:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001294:	2200      	movs	r2, #0
 8001296:	4619      	mov	r1, r3
 8001298:	482c      	ldr	r0, [pc, #176]	@ (800134c <MX_TIM1_Init+0x1a0>)
 800129a:	f004 f83b 	bl	8005314 <HAL_TIM_PWM_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80012a4:	f001 fbd4 	bl	8002a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012ac:	2204      	movs	r2, #4
 80012ae:	4619      	mov	r1, r3
 80012b0:	4826      	ldr	r0, [pc, #152]	@ (800134c <MX_TIM1_Init+0x1a0>)
 80012b2:	f004 f82f 	bl	8005314 <HAL_TIM_PWM_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80012bc:	f001 fbc8 	bl	8002a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012c4:	2208      	movs	r2, #8
 80012c6:	4619      	mov	r1, r3
 80012c8:	4820      	ldr	r0, [pc, #128]	@ (800134c <MX_TIM1_Init+0x1a0>)
 80012ca:	f004 f823 	bl	8005314 <HAL_TIM_PWM_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80012d4:	f001 fbbc 	bl	8002a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012dc:	220c      	movs	r2, #12
 80012de:	4619      	mov	r1, r3
 80012e0:	481a      	ldr	r0, [pc, #104]	@ (800134c <MX_TIM1_Init+0x1a0>)
 80012e2:	f004 f817 	bl	8005314 <HAL_TIM_PWM_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80012ec:	f001 fbb0 	bl	8002a50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001304:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001308:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800130e:	2300      	movs	r3, #0
 8001310:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001316:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800131a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001320:	2300      	movs	r3, #0
 8001322:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4619      	mov	r1, r3
 800132c:	4807      	ldr	r0, [pc, #28]	@ (800134c <MX_TIM1_Init+0x1a0>)
 800132e:	f004 ff79 	bl	8006224 <HAL_TIMEx_ConfigBreakDeadTime>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8001338:	f001 fb8a 	bl	8002a50 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 800133c:	4803      	ldr	r0, [pc, #12]	@ (800134c <MX_TIM1_Init+0x1a0>)
 800133e:	f001 fd81 	bl	8002e44 <HAL_TIM_MspPostInit>

}
 8001342:	bf00      	nop
 8001344:	3770      	adds	r7, #112	@ 0x70
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200001ec 	.word	0x200001ec
 8001350:	40012c00 	.word	0x40012c00
 8001354:	0002980f 	.word	0x0002980f

08001358 <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08c      	sub	sp, #48	@ 0x30
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	2224      	movs	r2, #36	@ 0x24
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f008 faf1 	bl	800994e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136c:	463b      	mov	r3, r7
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001376:	4b21      	ldr	r3, [pc, #132]	@ (80013fc <MX_TIM3_Init+0xa4>)
 8001378:	4a21      	ldr	r2, [pc, #132]	@ (8001400 <MX_TIM3_Init+0xa8>)
 800137a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800137c:	4b1f      	ldr	r3, [pc, #124]	@ (80013fc <MX_TIM3_Init+0xa4>)
 800137e:	2200      	movs	r2, #0
 8001380:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b1e      	ldr	r3, [pc, #120]	@ (80013fc <MX_TIM3_Init+0xa4>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001388:	4b1c      	ldr	r3, [pc, #112]	@ (80013fc <MX_TIM3_Init+0xa4>)
 800138a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800138e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001390:	4b1a      	ldr	r3, [pc, #104]	@ (80013fc <MX_TIM3_Init+0xa4>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001396:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <MX_TIM3_Init+0xa4>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800139c:	2303      	movs	r3, #3
 800139e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013a4:	2301      	movs	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013b4:	2301      	movs	r3, #1
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	480d      	ldr	r0, [pc, #52]	@ (80013fc <MX_TIM3_Init+0xa4>)
 80013c8:	f003 fd20 	bl	8004e0c <HAL_TIM_Encoder_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80013d2:	f001 fb3d 	bl	8002a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013de:	463b      	mov	r3, r7
 80013e0:	4619      	mov	r1, r3
 80013e2:	4806      	ldr	r0, [pc, #24]	@ (80013fc <MX_TIM3_Init+0xa4>)
 80013e4:	f004 fe88 	bl	80060f8 <HAL_TIMEx_MasterConfigSynchronization>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80013ee:	f001 fb2f 	bl	8002a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	3730      	adds	r7, #48	@ 0x30
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000238 	.word	0x20000238
 8001400:	40000400 	.word	0x40000400

08001404 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	@ 0x30
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	2224      	movs	r2, #36	@ 0x24
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f008 fa9b 	bl	800994e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001418:	463b      	mov	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001422:	4b21      	ldr	r3, [pc, #132]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 8001424:	4a21      	ldr	r2, [pc, #132]	@ (80014ac <MX_TIM4_Init+0xa8>)
 8001426:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001428:	4b1f      	ldr	r3, [pc, #124]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 800142a:	2200      	movs	r2, #0
 800142c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142e:	4b1e      	ldr	r3, [pc, #120]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001434:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 8001436:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800143a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143c:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001442:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 8001444:	2280      	movs	r2, #128	@ 0x80
 8001446:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001448:	2303      	movs	r3, #3
 800144a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800144c:	2300      	movs	r3, #0
 800144e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001450:	2301      	movs	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001458:	230a      	movs	r3, #10
 800145a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001460:	2301      	movs	r3, #1
 8001462:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	4619      	mov	r1, r3
 8001472:	480d      	ldr	r0, [pc, #52]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 8001474:	f003 fcca 	bl	8004e0c <HAL_TIM_Encoder_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800147e:	f001 fae7 	bl	8002a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800148a:	463b      	mov	r3, r7
 800148c:	4619      	mov	r1, r3
 800148e:	4806      	ldr	r0, [pc, #24]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 8001490:	f004 fe32 	bl	80060f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800149a:	f001 fad9 	bl	8002a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	3730      	adds	r7, #48	@ 0x30
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000284 	.word	0x20000284
 80014ac:	40000800 	.word	0x40000800

080014b0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	@ 0x30
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	2224      	movs	r2, #36	@ 0x24
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f008 fa45 	bl	800994e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c4:	463b      	mov	r3, r7
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014ce:	4b21      	ldr	r3, [pc, #132]	@ (8001554 <MX_TIM5_Init+0xa4>)
 80014d0:	4a21      	ldr	r2, [pc, #132]	@ (8001558 <MX_TIM5_Init+0xa8>)
 80014d2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <MX_TIM5_Init+0xa4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014da:	4b1e      	ldr	r3, [pc, #120]	@ (8001554 <MX_TIM5_Init+0xa4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80014e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <MX_TIM5_Init+0xa4>)
 80014e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014e6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <MX_TIM5_Init+0xa4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ee:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <MX_TIM5_Init+0xa4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014f4:	2303      	movs	r3, #3
 80014f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014fc:	2301      	movs	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800150c:	2301      	movs	r3, #1
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	4619      	mov	r1, r3
 800151e:	480d      	ldr	r0, [pc, #52]	@ (8001554 <MX_TIM5_Init+0xa4>)
 8001520:	f003 fc74 	bl	8004e0c <HAL_TIM_Encoder_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800152a:	f001 fa91 	bl	8002a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001536:	463b      	mov	r3, r7
 8001538:	4619      	mov	r1, r3
 800153a:	4806      	ldr	r0, [pc, #24]	@ (8001554 <MX_TIM5_Init+0xa4>)
 800153c:	f004 fddc 	bl	80060f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001546:	f001 fa83 	bl	8002a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	3730      	adds	r7, #48	@ 0x30
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200002d0 	.word	0x200002d0
 8001558:	40000c00 	.word	0x40000c00

0800155c <MX_TIM7_Init>:

void MX_TIM7_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800156c:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <MX_TIM7_Init+0x64>)
 800156e:	4a15      	ldr	r2, [pc, #84]	@ (80015c4 <MX_TIM7_Init+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170-1;
 8001572:	4b13      	ldr	r3, [pc, #76]	@ (80015c0 <MX_TIM7_Init+0x64>)
 8001574:	22a9      	movs	r2, #169	@ 0xa9
 8001576:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <MX_TIM7_Init+0x64>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50000;
 800157e:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <MX_TIM7_Init+0x64>)
 8001580:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001584:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001586:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <MX_TIM7_Init+0x64>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <MX_TIM7_Init+0x64>)
 800158e:	f003 f9f9 	bl	8004984 <HAL_TIM_Base_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001598:	f001 fa5a 	bl	8002a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <MX_TIM7_Init+0x64>)
 80015aa:	f004 fda5 	bl	80060f8 <HAL_TIMEx_MasterConfigSynchronization>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80015b4:	f001 fa4c 	bl	8002a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	2000031c 	.word	0x2000031c
 80015c4:	40001400 	.word	0x40001400

080015c8 <MX_TIM8_Init>:

void MX_TIM8_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08c      	sub	sp, #48	@ 0x30
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	2224      	movs	r2, #36	@ 0x24
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f008 f9b9 	bl	800994e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015dc:	463b      	mov	r3, r7
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015e6:	4b23      	ldr	r3, [pc, #140]	@ (8001674 <MX_TIM8_Init+0xac>)
 80015e8:	4a23      	ldr	r2, [pc, #140]	@ (8001678 <MX_TIM8_Init+0xb0>)
 80015ea:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015ec:	4b21      	ldr	r3, [pc, #132]	@ (8001674 <MX_TIM8_Init+0xac>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f2:	4b20      	ldr	r3, [pc, #128]	@ (8001674 <MX_TIM8_Init+0xac>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80015f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001674 <MX_TIM8_Init+0xac>)
 80015fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015fe:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001600:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <MX_TIM8_Init+0xac>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001606:	4b1b      	ldr	r3, [pc, #108]	@ (8001674 <MX_TIM8_Init+0xac>)
 8001608:	2200      	movs	r2, #0
 800160a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160c:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <MX_TIM8_Init+0xac>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001612:	2303      	movs	r3, #3
 8001614:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800161a:	2301      	movs	r3, #1
 800161c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800162a:	2301      	movs	r3, #1
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800162e:	2300      	movs	r3, #0
 8001630:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	4619      	mov	r1, r3
 800163c:	480d      	ldr	r0, [pc, #52]	@ (8001674 <MX_TIM8_Init+0xac>)
 800163e:	f003 fbe5 	bl	8004e0c <HAL_TIM_Encoder_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001648:	f001 fa02 	bl	8002a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001658:	463b      	mov	r3, r7
 800165a:	4619      	mov	r1, r3
 800165c:	4805      	ldr	r0, [pc, #20]	@ (8001674 <MX_TIM8_Init+0xac>)
 800165e:	f004 fd4b 	bl	80060f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001668:	f001 f9f2 	bl	8002a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	3730      	adds	r7, #48	@ 0x30
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000368 	.word	0x20000368
 8001678:	40013400 	.word	0x40013400

0800167c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001680:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 8001682:	4a22      	ldr	r2, [pc, #136]	@ (800170c <MX_LPUART1_UART_Init+0x90>)
 8001684:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001686:	4b20      	ldr	r3, [pc, #128]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 8001688:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800168c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168e:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001694:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800169a:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80016a0:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016a2:	220c      	movs	r2, #12
 80016a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a6:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ac:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b8:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016be:	4812      	ldr	r0, [pc, #72]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016c0:	f004 fe8a 	bl	80063d8 <HAL_UART_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80016ca:	f001 f9c1 	bl	8002a50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ce:	2100      	movs	r1, #0
 80016d0:	480d      	ldr	r0, [pc, #52]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016d2:	f006 fee2 	bl	800849a <HAL_UARTEx_SetTxFifoThreshold>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80016dc:	f001 f9b8 	bl	8002a50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4809      	ldr	r0, [pc, #36]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016e4:	f006 ff17 	bl	8008516 <HAL_UARTEx_SetRxFifoThreshold>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80016ee:	f001 f9af 	bl	8002a50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016f4:	f006 fe98 	bl	8008428 <HAL_UARTEx_DisableFifoMode>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80016fe:	f001 f9a7 	bl	8002a50 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000448 	.word	0x20000448
 800170c:	40008000 	.word	0x40008000

08001710 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001714:	4b22      	ldr	r3, [pc, #136]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 8001716:	4a23      	ldr	r2, [pc, #140]	@ (80017a4 <MX_USART1_UART_Init+0x94>)
 8001718:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800171a:	4b21      	ldr	r3, [pc, #132]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800171c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001720:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b1f      	ldr	r3, [pc, #124]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b1d      	ldr	r3, [pc, #116]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800172e:	4b1c      	ldr	r3, [pc, #112]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b17      	ldr	r3, [pc, #92]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001746:	4b16      	ldr	r3, [pc, #88]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800174c:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001752:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001758:	4811      	ldr	r0, [pc, #68]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800175a:	f004 fe3d 	bl	80063d8 <HAL_UART_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001764:	f001 f974 	bl	8002a50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001768:	2100      	movs	r1, #0
 800176a:	480d      	ldr	r0, [pc, #52]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800176c:	f006 fe95 	bl	800849a <HAL_UARTEx_SetTxFifoThreshold>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001776:	f001 f96b 	bl	8002a50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800177a:	2100      	movs	r1, #0
 800177c:	4808      	ldr	r0, [pc, #32]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800177e:	f006 feca 	bl	8008516 <HAL_UARTEx_SetRxFifoThreshold>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001788:	f001 f962 	bl	8002a50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800178c:	4804      	ldr	r0, [pc, #16]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800178e:	f006 fe4b 	bl	8008428 <HAL_UARTEx_DisableFifoMode>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001798:	f001 f95a 	bl	8002a50 <Error_Handler>
  }

}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	200003b4 	.word	0x200003b4
 80017a4:	40013800 	.word	0x40013800

080017a8 <L298N_init>:
				TIM_HandleTypeDef* pwm_timer_,
				GPIO_TypeDef* GPIOx_1_,
				uint16_t GPIO_Pin_1_,
				GPIO_TypeDef* GPIOx_2_,
				uint16_t GPIO_Pin_2_)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	603b      	str	r3, [r7, #0]
	L298N_driver->PWM_count = 0;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	721a      	strb	r2, [r3, #8]
	L298N_driver->pwm_timer = pwm_timer_;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	605a      	str	r2, [r3, #4]
	L298N_driver->pwm_channel=pwm_channel_;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	601a      	str	r2, [r3, #0]
	L298N_driver->GPIOx_1 =GPIOx_1_;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	60da      	str	r2, [r3, #12]
	L298N_driver->GPIO_Pin_1 = GPIO_Pin_1_;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8b3a      	ldrh	r2, [r7, #24]
 80017d2:	821a      	strh	r2, [r3, #16]
	L298N_driver->GPIOx_2 = GPIOx_2_;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	615a      	str	r2, [r3, #20]
	L298N_driver->GPIO_Pin_2 = GPIO_Pin_2_;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8c3a      	ldrh	r2, [r7, #32]
 80017de:	831a      	strh	r2, [r3, #24]

}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <L298N_set_pwm_count>:

void L298N_set_pwm_count(L298N_driver* L298_driver, uint8_t new_pwm_count){
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]

	L298_driver->PWM_count = new_pwm_count;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	78fa      	ldrb	r2, [r7, #3]
 80017fc:	721a      	strb	r2, [r3, #8]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <L298N_update_pwm>:

void L298N_update_pwm(L298N_driver* L298_driver)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d106      	bne.n	8001828 <L298N_update_pwm+0x1e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	7a1a      	ldrb	r2, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001826:	e036      	b.n	8001896 <L298N_update_pwm+0x8c>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b04      	cmp	r3, #4
 800182e:	d107      	bne.n	8001840 <L298N_update_pwm+0x36>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7a19      	ldrb	r1, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	460b      	mov	r3, r1
 800183c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800183e:	e02a      	b.n	8001896 <L298N_update_pwm+0x8c>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b08      	cmp	r3, #8
 8001846:	d107      	bne.n	8001858 <L298N_update_pwm+0x4e>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	7a19      	ldrb	r1, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	460b      	mov	r3, r1
 8001854:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001856:	e01e      	b.n	8001896 <L298N_update_pwm+0x8c>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b0c      	cmp	r3, #12
 800185e:	d107      	bne.n	8001870 <L298N_update_pwm+0x66>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	7a19      	ldrb	r1, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	460b      	mov	r3, r1
 800186c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800186e:	e012      	b.n	8001896 <L298N_update_pwm+0x8c>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b10      	cmp	r3, #16
 8001876:	d107      	bne.n	8001888 <L298N_update_pwm+0x7e>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	7a19      	ldrb	r1, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	460b      	mov	r3, r1
 8001884:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001886:	e006      	b.n	8001896 <L298N_update_pwm+0x8c>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7a19      	ldrb	r1, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	460b      	mov	r3, r1
 8001894:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <L298N_set_input_configuration>:


void L298N_set_input_configuration(L298N_driver* L298_driver, EL298N_MODE l298n_mode)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	460b      	mov	r3, r1
 80018ac:	70fb      	strb	r3, [r7, #3]

	if(l298n_mode == L298N_MODE_BACKWARD)
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d110      	bne.n	80018d6 <L298N_set_input_configuration+0x34>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_SET);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68d8      	ldr	r0, [r3, #12]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	8a1b      	ldrh	r3, [r3, #16]
 80018bc:	2201      	movs	r2, #1
 80018be:	4619      	mov	r1, r3
 80018c0:	f001 ffe6 	bl	8003890 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6958      	ldr	r0, [r3, #20]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	8b1b      	ldrh	r3, [r3, #24]
 80018cc:	2200      	movs	r2, #0
 80018ce:	4619      	mov	r1, r3
 80018d0:	f001 ffde 	bl	8003890 <HAL_GPIO_WritePin>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
	}

}
 80018d4:	e026      	b.n	8001924 <L298N_set_input_configuration+0x82>
	}else if(l298n_mode == L298N_MODE_FORWARD)
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d110      	bne.n	80018fe <L298N_set_input_configuration+0x5c>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68d8      	ldr	r0, [r3, #12]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	8a1b      	ldrh	r3, [r3, #16]
 80018e4:	2200      	movs	r2, #0
 80018e6:	4619      	mov	r1, r3
 80018e8:	f001 ffd2 	bl	8003890 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_SET);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6958      	ldr	r0, [r3, #20]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	8b1b      	ldrh	r3, [r3, #24]
 80018f4:	2201      	movs	r2, #1
 80018f6:	4619      	mov	r1, r3
 80018f8:	f001 ffca 	bl	8003890 <HAL_GPIO_WritePin>
}
 80018fc:	e012      	b.n	8001924 <L298N_set_input_configuration+0x82>
	else if(l298n_mode == L298N_MODE_STOP)
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10f      	bne.n	8001924 <L298N_set_input_configuration+0x82>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68d8      	ldr	r0, [r3, #12]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	8a1b      	ldrh	r3, [r3, #16]
 800190c:	2200      	movs	r2, #0
 800190e:	4619      	mov	r1, r3
 8001910:	f001 ffbe 	bl	8003890 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6958      	ldr	r0, [r3, #20]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	8b1b      	ldrh	r3, [r3, #24]
 800191c:	2200      	movs	r2, #0
 800191e:	4619      	mov	r1, r3
 8001920:	f001 ffb6 	bl	8003890 <HAL_GPIO_WritePin>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <init_driving_system>:

static void add_states_payload_to_state_msg(MotorState* motor_state, uint8_t* offset, uint8_t* state_msg);


void init_driving_system(DrivingSystem* driving_system, MotorStruct* lb_motor, MotorStruct* lf_motor, MotorStruct* rb_motor, MotorStruct* rf_motor)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	603b      	str	r3, [r7, #0]

	driving_system->left_motors_lst[0] = lb_motor;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	601a      	str	r2, [r3, #0]
	driving_system->left_motors_lst[1] = lf_motor;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	605a      	str	r2, [r3, #4]
	driving_system->right_motors_lst[0] = rb_motor;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	609a      	str	r2, [r3, #8]
	driving_system->right_motors_lst[1] = rf_motor;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	60da      	str	r2, [r3, #12]
	driving_system->velo_ctrl_flag = 1;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2201      	movs	r2, #1
 8001956:	741a      	strb	r2, [r3, #16]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <default_init_driving_system_if>:

void default_init_driving_system_if(DrivingSystemIface* drv_system_if){
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

	drv_system_if->exe_cmd = execute_cmd;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a05      	ldr	r2, [pc, #20]	@ (8001984 <default_init_driving_system_if+0x20>)
 8001970:	601a      	str	r2, [r3, #0]
	drv_system_if->send_state = send_state;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a04      	ldr	r2, [pc, #16]	@ (8001988 <default_init_driving_system_if+0x24>)
 8001976:	605a      	str	r2, [r3, #4]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	08001a51 	.word	0x08001a51
 8001988:	08001cc1 	.word	0x08001cc1

0800198c <driving_system_drive>:

// TODO DELETE VELO
void driving_system_drive(DrivingSystem* driving_system){
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]


	// TODO change to NO_OF_SIDE_MOTORS WHEN APPEARS
//	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i){
	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i){
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e051      	b.n	8001a3e <driving_system_drive+0xb2>

    	update_motor_position(driving_system->left_motors_lst[i]->motor_state, driving_system->left_motors_lst[i]->encoder_info);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	4619      	mov	r1, r3
 80019b0:	f000 fab1 	bl	8001f16 <update_motor_position>
    	update_motor_position(driving_system->right_motors_lst[i]->motor_state, driving_system->right_motors_lst[i]->encoder_info);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	3202      	adds	r2, #2
 80019ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	3202      	adds	r2, #2
 80019c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	4619      	mov	r1, r3
 80019ce:	f000 faa2 	bl	8001f16 <update_motor_position>

    	update_measured_velocity(driving_system->left_motors_lst[i]);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fb19 	bl	8002012 <update_measured_velocity>
    	update_measured_velocity(driving_system->right_motors_lst[i]);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	3202      	adds	r2, #2
 80019e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 fb11 	bl	8002012 <update_measured_velocity>

		if(driving_system->velo_ctrl_flag){
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7c1b      	ldrb	r3, [r3, #16]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00e      	beq.n	8001a16 <driving_system_drive+0x8a>
			regulate_velocity(driving_system->left_motors_lst[i]);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fa5f 	bl	8001ec4 <regulate_velocity>
			regulate_velocity(driving_system->right_motors_lst[i]);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	3202      	adds	r2, #2
 8001a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fa57 	bl	8001ec4 <regulate_velocity>
		}

		L298N_update_pwm(driving_system->left_motors_lst[i]->L298N_driver);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fef2 	bl	800180a <L298N_update_pwm>
		L298N_update_pwm(driving_system->right_motors_lst[i]->L298N_driver);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	3202      	adds	r2, #2
 8001a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fee9 	bl	800180a <L298N_update_pwm>
	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i){
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	ddaa      	ble.n	800199a <driving_system_drive+0xe>


	}


}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <execute_cmd>:


int execute_cmd(DrivingSystem* driving_system, uint8_t* cmd){
 8001a50:	b5b0      	push	{r4, r5, r7, lr}
 8001a52:	b092      	sub	sp, #72	@ 0x48
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]

	uint8_t cmd_id = 0x00;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t cmd_code[] = {0x00};
 8001a60:	2300      	movs	r3, #0
 8001a62:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	uint8_t payload[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001a66:	4a43      	ldr	r2, [pc, #268]	@ (8001b74 <execute_cmd+0x124>)
 8001a68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a70:	6018      	str	r0, [r3, #0]
 8001a72:	3304      	adds	r3, #4
 8001a74:	8019      	strh	r1, [r3, #0]

	parse_msg_cmd_id(cmd, &cmd_id);
 8001a76:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	6838      	ldr	r0, [r7, #0]
 8001a7e:	f000 fd26 	bl	80024ce <parse_msg_cmd_id>
	if(cmd_id != MSG_CMD_REQUEST){
 8001a82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d001      	beq.n	8001a8e <execute_cmd+0x3e>
		return 1;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e06e      	b.n	8001b6c <execute_cmd+0x11c>
	}

    parse_cmd_code(cmd, cmd_code);
 8001a8e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a92:	4619      	mov	r1, r3
 8001a94:	6838      	ldr	r0, [r7, #0]
 8001a96:	f000 fd29 	bl	80024ec <parse_cmd_code>
    if (parse_payload(cmd, payload)) {
 8001a9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6838      	ldr	r0, [r7, #0]
 8001aa2:	f000 fd33 	bl	800250c <parse_payload>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <execute_cmd+0x60>
        return 1;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e05d      	b.n	8001b6c <execute_cmd+0x11c>
    }


	if(cmd_code[CMD_CODE_ID_POS] == CMD_ID_STATE_REQ)
 8001ab0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d103      	bne.n	8001ac0 <execute_cmd+0x70>
	{
		send_state(driving_system);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f901 	bl	8001cc0 <send_state>
 8001abe:	e054      	b.n	8001b6a <execute_cmd+0x11a>

	}else if(cmd_code[CMD_CODE_ID_POS] == CMD_ID_CTRL_VELO_REQ)
 8001ac0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d12b      	bne.n	8001b20 <execute_cmd+0xd0>
	{
		int whole_number = payload[1];
 8001ac8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001acc:	643b      	str	r3, [r7, #64]	@ 0x40
		float fractional_part =  payload[2] /100.0;
 8001ace:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fd4e 	bl	8000574 <__aeabi_i2d>
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	4b26      	ldr	r3, [pc, #152]	@ (8001b78 <execute_cmd+0x128>)
 8001ade:	f7fe fedd 	bl	800089c <__aeabi_ddiv>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f7ff f8a5 	bl	8000c38 <__aeabi_d2f>
 8001aee:	4603      	mov	r3, r0
 8001af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		float vel = fractional_part + whole_number;
 8001af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afc:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b04:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		drive_velo_dir(driving_system, payload[PAYLOAD_DV_MODE_POS], vel);
 8001b08:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b0c:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 8001b10:	4619      	mov	r1, r3
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 fb8a 	bl	800222c <drive_velo_dir>
		driving_system->velo_ctrl_flag = 1;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	741a      	strb	r2, [r3, #16]
 8001b1e:	e024      	b.n	8001b6a <execute_cmd+0x11a>


	}else if(cmd_code[CMD_CODE_ID_POS] == CMD_ID_PWM_DRIVING_REQ){
 8001b20:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d10f      	bne.n	8001b48 <execute_cmd+0xf8>

	    uint8_t pwm = payload[1];
 8001b28:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001b2c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		drive_pwm_dir(driving_system, payload[PAYLOAD_DV_MODE_POS], pwm);
 8001b30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b34:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8001b38:	4619      	mov	r1, r3
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 fbb8 	bl	80022b0 <drive_pwm_dir>
		driving_system->velo_ctrl_flag = 0;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	741a      	strb	r2, [r3, #16]
 8001b46:	e010      	b.n	8001b6a <execute_cmd+0x11a>
	}
	else{
		char msg[] = "Undefined First Cmd Literall";
 8001b48:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <execute_cmd+0x12c>)
 8001b4a:	f107 040c 	add.w	r4, r7, #12
 8001b4e:	461d      	mov	r5, r3
 8001b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b58:	c407      	stmia	r4!, {r0, r1, r2}
 8001b5a:	7023      	strb	r3, [r4, #0]
		send_drv_err(msg);
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 f80d 	bl	8001b80 <send_drv_err>
		return 1;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <execute_cmd+0x11c>
	}
	return 0;
 8001b6a:	2300      	movs	r3, #0

}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3748      	adds	r7, #72	@ 0x48
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bdb0      	pop	{r4, r5, r7, pc}
 8001b74:	0800d138 	.word	0x0800d138
 8001b78:	40590000 	.word	0x40590000
 8001b7c:	0800d140 	.word	0x0800d140

08001b80 <send_drv_err>:



void send_drv_err(char* msg){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b09c      	sub	sp, #112	@ 0x70
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

	char err_buffer[100];
	memset(err_buffer, '\0', sizeof(err_buffer));
 8001b88:	f107 030c 	add.w	r3, r7, #12
 8001b8c:	2264      	movs	r2, #100	@ 0x64
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f007 fedc 	bl	800994e <memset>
	strcat(err_buffer, DRIVING_ERR);
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fb90 	bl	80002c0 <strlen>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	4413      	add	r3, r2
 8001baa:	4917      	ldr	r1, [pc, #92]	@ (8001c08 <send_drv_err+0x88>)
 8001bac:	461a      	mov	r2, r3
 8001bae:	460b      	mov	r3, r1
 8001bb0:	cb03      	ldmia	r3!, {r0, r1}
 8001bb2:	6010      	str	r0, [r2, #0]
 8001bb4:	6051      	str	r1, [r2, #4]
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	7213      	strb	r3, [r2, #8]
	strcat(err_buffer, msg);
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f007 fecc 	bl	800995e <strcat>
	strcat(err_buffer, "\n\r");
 8001bc6:	f107 030c 	add.w	r3, r7, #12
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fb78 	bl	80002c0 <strlen>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a0c      	ldr	r2, [pc, #48]	@ (8001c0c <send_drv_err+0x8c>)
 8001bdc:	8811      	ldrh	r1, [r2, #0]
 8001bde:	7892      	ldrb	r2, [r2, #2]
 8001be0:	8019      	strh	r1, [r3, #0]
 8001be2:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&hlpuart1,(uint8_t*) err_buffer, strlen(err_buffer), STATE_SENDING_TIMEOUT);
 8001be4:	f107 030c 	add.w	r3, r7, #12
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fb69 	bl	80002c0 <strlen>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	f107 010c 	add.w	r1, r7, #12
 8001bf6:	230a      	movs	r3, #10
 8001bf8:	4805      	ldr	r0, [pc, #20]	@ (8001c10 <send_drv_err+0x90>)
 8001bfa:	f004 fc3d 	bl	8006478 <HAL_UART_Transmit>

}
 8001bfe:	bf00      	nop
 8001c00:	3770      	adds	r7, #112	@ 0x70
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	0800d160 	.word	0x0800d160
 8001c0c:	0800d16c 	.word	0x0800d16c
 8001c10:	20000448 	.word	0x20000448

08001c14 <add_states_payload_to_state_msg>:


static void add_states_payload_to_state_msg(MotorState* motor_state, uint8_t* offset, uint8_t* state_msg){
 8001c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c18:	b089      	sub	sp, #36	@ 0x24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	466b      	mov	r3, sp
 8001c24:	461e      	mov	r6, r3

	uint8_t payload_length = 6;
 8001c26:	2306      	movs	r3, #6
 8001c28:	76fb      	strb	r3, [r7, #27]
	uint8_t state_payload[payload_length];
 8001c2a:	7ef9      	ldrb	r1, [r7, #27]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	b2cb      	uxtb	r3, r1
 8001c34:	2200      	movs	r2, #0
 8001c36:	4698      	mov	r8, r3
 8001c38:	4691      	mov	r9, r2
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c4e:	b2cb      	uxtb	r3, r1
 8001c50:	2200      	movs	r2, #0
 8001c52:	461c      	mov	r4, r3
 8001c54:	4615      	mov	r5, r2
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	00eb      	lsls	r3, r5, #3
 8001c60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c64:	00e2      	lsls	r2, r4, #3
 8001c66:	460b      	mov	r3, r1
 8001c68:	3307      	adds	r3, #7
 8001c6a:	08db      	lsrs	r3, r3, #3
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	ebad 0d03 	sub.w	sp, sp, r3
 8001c72:	466b      	mov	r3, sp
 8001c74:	3300      	adds	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
	bytes_motor_state(motor_state, state_payload);
 8001c78:	6939      	ldr	r1, [r7, #16]
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 f8cd 	bl	8001e1a <bytes_motor_state>

	for (int i = 0; i < payload_length; i++){
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	e012      	b.n	8001cac <add_states_payload_to_state_msg+0x98>
		state_msg[*offset] = state_payload[i];
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4413      	add	r3, r2
 8001c90:	6939      	ldr	r1, [r7, #16]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	440a      	add	r2, r1
 8001c96:	7812      	ldrb	r2, [r2, #0]
 8001c98:	701a      	strb	r2, [r3, #0]
		*offset += 1;
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < payload_length; i++){
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	7efb      	ldrb	r3, [r7, #27]
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dbe8      	blt.n	8001c86 <add_states_payload_to_state_msg+0x72>
 8001cb4:	46b5      	mov	sp, r6
	}

}
 8001cb6:	bf00      	nop
 8001cb8:	3724      	adds	r7, #36	@ 0x24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001cc0 <send_state>:


}


void send_state(DrivingSystem* driving_system){
 8001cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cc4:	b088      	sub	sp, #32
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	466b      	mov	r3, sp
 8001ccc:	469a      	mov	sl, r3

	uint8_t state_msg_length = 26;
 8001cce:	231a      	movs	r3, #26
 8001cd0:	76fb      	strb	r3, [r7, #27]
	uint8_t state_msg[state_msg_length];
 8001cd2:	7efe      	ldrb	r6, [r7, #27]
 8001cd4:	4633      	mov	r3, r6
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	b2f3      	uxtb	r3, r6
 8001cdc:	2200      	movs	r2, #0
 8001cde:	4698      	mov	r8, r3
 8001ce0:	4691      	mov	r9, r2
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cf6:	b2f3      	uxtb	r3, r6
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	461c      	mov	r4, r3
 8001cfc:	4615      	mov	r5, r2
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	00eb      	lsls	r3, r5, #3
 8001d08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d0c:	00e2      	lsls	r2, r4, #3
 8001d0e:	4633      	mov	r3, r6
 8001d10:	3307      	adds	r3, #7
 8001d12:	08db      	lsrs	r3, r3, #3
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	ebad 0d03 	sub.w	sp, sp, r3
 8001d1a:	466b      	mov	r3, sp
 8001d1c:	3300      	adds	r3, #0
 8001d1e:	613b      	str	r3, [r7, #16]
	state_msg[0] = MSG_STATE;
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	2203      	movs	r2, #3
 8001d24:	701a      	strb	r2, [r3, #0]
	uint8_t offset = 1;
 8001d26:	2301      	movs	r3, #1
 8001d28:	73fb      	strb	r3, [r7, #15]


	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i){
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	e019      	b.n	8001d64 <send_state+0xa4>

		add_states_payload_to_state_msg(driving_system->left_motors_lst[i]->motor_state, &offset, state_msg);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f107 010f 	add.w	r1, r7, #15
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff67 	bl	8001c14 <add_states_payload_to_state_msg>
		add_states_payload_to_state_msg(driving_system->right_motors_lst[i]->motor_state, &offset, state_msg);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	3202      	adds	r2, #2
 8001d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f107 010f 	add.w	r1, r7, #15
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff5b 	bl	8001c14 <add_states_payload_to_state_msg>
	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i){
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3301      	adds	r3, #1
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	dde2      	ble.n	8001d30 <send_state+0x70>
	}
	state_msg[state_msg_length-1] = MSG_END_CHAR;
 8001d6a:	7efb      	ldrb	r3, [r7, #27]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	21fe      	movs	r1, #254	@ 0xfe
 8001d72:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit(&hlpuart1,(uint8_t*) state_msg, sizeof(state_msg)/sizeof(state_msg[0]),STATE_SENDING_TIMEOUT);
 8001d74:	4632      	mov	r2, r6
 8001d76:	230a      	movs	r3, #10
 8001d78:	6939      	ldr	r1, [r7, #16]
 8001d7a:	4804      	ldr	r0, [pc, #16]	@ (8001d8c <send_state+0xcc>)
 8001d7c:	f004 fb7c 	bl	8006478 <HAL_UART_Transmit>
 8001d80:	46d5      	mov	sp, sl

}
 8001d82:	bf00      	nop
 8001d84:	3720      	adds	r7, #32
 8001d86:	46bd      	mov	sp, r7
 8001d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d8c:	20000448 	.word	0x20000448

08001d90 <init_encoder_info>:
 */

#include "encoder_driver.h"

void init_encoder_info(EncoderInfo* encoder_info, TIM_HandleTypeDef* encoder_timer_)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
	encoder_info->encoder_timer=encoder_timer_;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	601a      	str	r2, [r3, #0]

}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <update_encoder_info>:

void update_encoder_info(EncoderInfo* encoder_info)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

	encoder_info->last_counter_value = encoder_info->counter_value;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	889a      	ldrh	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	80da      	strh	r2, [r3, #6]
	encoder_info->counter_value = __HAL_TIM_GET_COUNTER(encoder_info->encoder_timer);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	809a      	strh	r2, [r3, #4]

}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <init_motor>:
		MotorState *motor_state_,
		TIM_HandleTypeDef *updater_tim_,
		EncoderInfo *enc_inf_param_,
		PIDController *pid_controller_,
		L298N_driver *L298N_)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	603b      	str	r3, [r7, #0]
	motor_struct->motor_state = motor_state_;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	601a      	str	r2, [r3, #0]
	motor_struct->motor_updater_tim = updater_tim_;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	60da      	str	r2, [r3, #12]
	motor_struct->updater_timer_periods = CountPeriodS(updater_tim_);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 fc07 	bl	8002604 <CountPeriodS>
 8001df6:	eef0 7a40 	vmov.f32	s15, s0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	edc3 7a04 	vstr	s15, [r3, #16]
	motor_struct->encoder_info = enc_inf_param_;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	609a      	str	r2, [r3, #8]
	motor_struct->L298N_driver = L298N_;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	69fa      	ldr	r2, [r7, #28]
 8001e0a:	615a      	str	r2, [r3, #20]
	motor_struct->pid_controller = pid_controller_;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	605a      	str	r2, [r3, #4]

}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <bytes_motor_state>:
void str_motor_state(MotorState* motor_state, char* state_buffer){

	sprintf(state_buffer, "%d,%.2f,%.2f\n\r", motor_state->motor_id, motor_state->set_velocity, motor_state->measured_velocity);
}

void bytes_motor_state(MotorState* motor_state, uint8_t* state_payload){
 8001e1a:	b480      	push	{r7}
 8001e1c:	b087      	sub	sp, #28
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]

	state_payload[0] = motor_state->motor_id;
 8001e24:	68f9      	ldr	r1, [r7, #12]
 8001e26:	7c08      	ldrb	r0, [r1, #16]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	7008      	strb	r0, [r1, #0]
	state_payload[1]=  (uint8_t)motor_state->measured_velocity;
 8001e2c:	68f9      	ldr	r1, [r7, #12]
 8001e2e:	edd1 7a00 	vldr	s15, [r1]
 8001e32:	68b9      	ldr	r1, [r7, #8]
 8001e34:	3101      	adds	r1, #1
 8001e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e3a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001e3e:	7938      	ldrb	r0, [r7, #4]
 8001e40:	b2c0      	uxtb	r0, r0
 8001e42:	7008      	strb	r0, [r1, #0]
	uint64_t position_uint = (int32_t)motor_state->position;
 8001e44:	68f9      	ldr	r1, [r7, #12]
 8001e46:	edd1 7a02 	vldr	s15, [r1, #8]
 8001e4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e4e:	ee17 0a90 	vmov	r0, s15
 8001e52:	17c1      	asrs	r1, r0, #31
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	e9c7 2304 	strd	r2, r3, [r7, #16]

	state_payload[2] = (position_uint >> 24) & (0xFF);
 8001e5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	0e02      	lsrs	r2, r0, #24
 8001e6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e6e:	0e0b      	lsrs	r3, r1, #24
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	3102      	adds	r1, #2
 8001e74:	b2d3      	uxtb	r3, r2
 8001e76:	700b      	strb	r3, [r1, #0]
	state_payload[3] = (position_uint >> 16) & (0xFF);
 8001e78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	0c02      	lsrs	r2, r0, #16
 8001e86:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001e8a:	0c0b      	lsrs	r3, r1, #16
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	3103      	adds	r1, #3
 8001e90:	b2d3      	uxtb	r3, r2
 8001e92:	700b      	strb	r3, [r1, #0]
	state_payload[4] = (position_uint >> 8) & (0xFF);
 8001e94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	0a02      	lsrs	r2, r0, #8
 8001ea2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001ea6:	0a0b      	lsrs	r3, r1, #8
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	3104      	adds	r1, #4
 8001eac:	b2d3      	uxtb	r3, r2
 8001eae:	700b      	strb	r3, [r1, #0]
	state_payload[5] = (position_uint >> 0) & (0xFF);
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	3305      	adds	r3, #5
 8001eb4:	7c3a      	ldrb	r2, [r7, #16]
 8001eb6:	701a      	strb	r2, [r3, #0]



}
 8001eb8:	bf00      	nop
 8001eba:	371c      	adds	r7, #28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <regulate_velocity>:


void regulate_velocity(MotorStruct *motor_struct)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

	MotorState* current_motor_state = motor_struct->motor_state;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]
	uint16_t pwm_value = pid_calculate(	motor_struct->pid_controller,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	ed93 7a00 	vldr	s14, [r3]
 8001ee2:	eef0 0a47 	vmov.f32	s1, s14
 8001ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eea:	4610      	mov	r0, r2
 8001eec:	f000 f8e6 	bl	80020bc <pid_calculate>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	817b      	strh	r3, [r7, #10]
										current_motor_state->set_velocity,
										current_motor_state->measured_velocity);
	uint8_t saturated_pwm_value = saturate_pwm(pwm_value);
 8001ef4:	897b      	ldrh	r3, [r7, #10]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fad2 	bl	80024a0 <saturate_pwm>
 8001efc:	4603      	mov	r3, r0
 8001efe:	727b      	strb	r3, [r7, #9]
	L298N_set_pwm_count(motor_struct->L298N_driver, saturated_pwm_value);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	7a7a      	ldrb	r2, [r7, #9]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fc6f 	bl	80017ec <L298N_set_pwm_count>

}
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <update_motor_position>:



void update_motor_position(MotorState* motor_state, EncoderInfo* encoder_info)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]

	motor_state->last_position = motor_state->position;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	60da      	str	r2, [r3, #12]
	update_encoder_info(encoder_info);
 8001f28:	6838      	ldr	r0, [r7, #0]
 8001f2a:	f7ff ff3f 	bl	8001dac <update_encoder_info>
	int16_t encoder_diff = encoder_info->counter_value - encoder_info->last_counter_value;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	889a      	ldrh	r2, [r3, #4]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	88db      	ldrh	r3, [r3, #6]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	82bb      	strh	r3, [r7, #20]
	int16_t position_change = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	82fb      	strh	r3, [r7, #22]
	//encoder increase
	if (encoder_diff > 0){
 8001f40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	dd1f      	ble.n	8001f88 <update_motor_position+0x72>

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	2b10      	cmp	r3, #16
 8001f56:	d114      	bne.n	8001f82 <update_motor_position+0x6c>

			uint16_t postreload_count = abs(encoder_info->counter_value - __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	889b      	ldrh	r3, [r3, #4]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bfb8      	it	lt
 8001f6c:	425b      	neglt	r3, r3
 8001f6e:	81fb      	strh	r3, [r7, #14]
			position_change = -(encoder_info->last_counter_value + postreload_count); //- because its decreasing
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	88da      	ldrh	r2, [r3, #6]
 8001f74:	89fb      	ldrh	r3, [r7, #14]
 8001f76:	4413      	add	r3, r2
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	425b      	negs	r3, r3
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	82fb      	strh	r3, [r7, #22]
 8001f80:	e023      	b.n	8001fca <update_motor_position+0xb4>

		}else{
			position_change = encoder_diff;
 8001f82:	8abb      	ldrh	r3, [r7, #20]
 8001f84:	82fb      	strh	r3, [r7, #22]
 8001f86:	e020      	b.n	8001fca <update_motor_position+0xb4>
		}
	}else if(encoder_diff < 0) //encoder decrease
 8001f88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	da1c      	bge.n	8001fca <update_motor_position+0xb4>
	{
		if (!__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b10      	cmp	r3, #16
 8001f9e:	d012      	beq.n	8001fc6 <update_motor_position+0xb0>

			int16_t postreload_count = encoder_info->counter_value;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	889b      	ldrh	r3, [r3, #4]
 8001fa4:	827b      	strh	r3, [r7, #18]
			int16_t prereload_count = __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer) - encoder_info->last_counter_value;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	88db      	ldrh	r3, [r3, #6]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	823b      	strh	r3, [r7, #16]
			position_change = postreload_count + prereload_count;
 8001fba:	8a7a      	ldrh	r2, [r7, #18]
 8001fbc:	8a3b      	ldrh	r3, [r7, #16]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	82fb      	strh	r3, [r7, #22]
 8001fc4:	e001      	b.n	8001fca <update_motor_position+0xb4>

		}else{
			position_change = encoder_diff;
 8001fc6:	8abb      	ldrh	r3, [r7, #20]
 8001fc8:	82fb      	strh	r3, [r7, #22]
		}
	}

	float position_change_rad = convert_to_radians(position_change);
 8001fca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fa32 	bl	8002438 <convert_to_radians>
 8001fd4:	ed87 0a02 	vstr	s0, [r7, #8]
	motor_state->position = motor_state->last_position - position_change_rad;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	ed93 7a03 	vldr	s14, [r3, #12]
 8001fde:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fe2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8001fec:	bf00      	nop
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <motor_state_set_velocity>:

void motor_state_set_velocity(MotorState *motor_state, float velocity)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	ed87 0a00 	vstr	s0, [r7]
	motor_state->set_velocity = velocity;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	605a      	str	r2, [r3, #4]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <update_measured_velocity>:

void update_measured_velocity(MotorStruct* motor_struct)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b084      	sub	sp, #16
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
	MotorState *curr_motor_state = motor_struct->motor_state;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	60fb      	str	r3, [r7, #12]
	float rotary_displacement_ = rotary_displacement(curr_motor_state);
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 f810 	bl	8002046 <rotary_displacement>
 8002026:	ed87 0a02 	vstr	s0, [r7, #8]
	curr_motor_state->measured_velocity = (float)rotary_displacement_ / motor_struct->updater_timer_periods;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002030:	edd7 6a02 	vldr	s13, [r7, #8]
 8002034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	edc3 7a00 	vstr	s15, [r3]

}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <rotary_displacement>:

float rotary_displacement(MotorState *motor_state){
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]

	// physically displacement shouldn't be negative value, but this mean it has different direction
	// which will be pointed by position value
	return fabs(motor_state->position - motor_state->last_position);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	ed93 7a02 	vldr	s14, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	edd3 7a03 	vldr	s15, [r3, #12]
 800205a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800205e:	eef0 7ae7 	vabs.f32	s15, s15
}
 8002062:	eeb0 0a67 	vmov.f32	s0, s15
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <pid_init>:
#include "pid_controller.h"
#include "motor_features.h"

void pid_init(PIDController *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 8002070:	b480      	push	{r7}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6178      	str	r0, [r7, #20]
 8002078:	ed87 0a04 	vstr	s0, [r7, #16]
 800207c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002080:	ed87 1a02 	vstr	s2, [r7, #8]
 8002084:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	615a      	str	r2, [r3, #20]
}
 80020ae:	bf00      	nop
 80020b0:	371c      	adds	r7, #28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <pid_calculate>:
float d_term;
float pid_output;


uint8_t pid_calculate(PIDController *pid_data, float setpoint, float process_variable)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80020c8:	edc7 0a01 	vstr	s1, [r7, #4]

	error = setpoint - process_variable;
 80020cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80020d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80020d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d8:	4b4f      	ldr	r3, [pc, #316]	@ (8002218 <pid_calculate+0x15c>)
 80020da:	edc3 7a00 	vstr	s15, [r3]
	pid_data->total_error += error;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80020e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002218 <pid_calculate+0x15c>)
 80020e6:	edd3 7a00 	vldr	s15, [r3]
 80020ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	edc3 7a01 	vstr	s15, [r3, #4]

	p_term = (float)(pid_data->Kp * error);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80020fa:	4b47      	ldr	r3, [pc, #284]	@ (8002218 <pid_calculate+0x15c>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002104:	4b45      	ldr	r3, [pc, #276]	@ (800221c <pid_calculate+0x160>)
 8002106:	edc3 7a00 	vstr	s15, [r3]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	edd3 7a01 	vldr	s15, [r3, #4]
 8002116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211a:	4b41      	ldr	r3, [pc, #260]	@ (8002220 <pid_calculate+0x164>)
 800211c:	edc3 7a00 	vstr	s15, [r3]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	ed93 7a04 	vldr	s14, [r3, #16]
 8002126:	4b3c      	ldr	r3, [pc, #240]	@ (8002218 <pid_calculate+0x15c>)
 8002128:	edd3 6a00 	vldr	s13, [r3]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	edd3 7a00 	vldr	s15, [r3]
 8002132:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213a:	4b3a      	ldr	r3, [pc, #232]	@ (8002224 <pid_calculate+0x168>)
 800213c:	edc3 7a00 	vstr	s15, [r3]

	pid_output = p_term + i_term + d_term;
 8002140:	4b36      	ldr	r3, [pc, #216]	@ (800221c <pid_calculate+0x160>)
 8002142:	ed93 7a00 	vldr	s14, [r3]
 8002146:	4b36      	ldr	r3, [pc, #216]	@ (8002220 <pid_calculate+0x164>)
 8002148:	edd3 7a00 	vldr	s15, [r3]
 800214c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002150:	4b34      	ldr	r3, [pc, #208]	@ (8002224 <pid_calculate+0x168>)
 8002152:	edd3 7a00 	vldr	s15, [r3]
 8002156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215a:	4b33      	ldr	r3, [pc, #204]	@ (8002228 <pid_calculate+0x16c>)
 800215c:	edc3 7a00 	vstr	s15, [r3]

    // Anti-windup
    if (pid_output < -pid_data->anti_windup_limit)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	425b      	negs	r3, r3
 8002166:	ee07 3a90 	vmov	s15, r3
 800216a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800216e:	4b2e      	ldr	r3, [pc, #184]	@ (8002228 <pid_calculate+0x16c>)
 8002170:	edd3 7a00 	vldr	s15, [r3]
 8002174:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217c:	dd15      	ble.n	80021aa <pid_calculate+0xee>
    {
        pid_output = -pid_data->anti_windup_limit;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	425b      	negs	r3, r3
 8002184:	ee07 3a90 	vmov	s15, r3
 8002188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800218c:	4b26      	ldr	r3, [pc, #152]	@ (8002228 <pid_calculate+0x16c>)
 800218e:	edc3 7a00 	vstr	s15, [r3]
        pid_data->total_error = pid_data->total_error - error;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	ed93 7a01 	vldr	s14, [r3, #4]
 8002198:	4b1f      	ldr	r3, [pc, #124]	@ (8002218 <pid_calculate+0x15c>)
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	edc3 7a01 	vstr	s15, [r3, #4]
 80021a8:	e021      	b.n	80021ee <pid_calculate+0x132>

    } else if (pid_output > pid_data->anti_windup_limit)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002228 <pid_calculate+0x16c>)
 80021b8:	edd3 7a00 	vldr	s15, [r3]
 80021bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c4:	d513      	bpl.n	80021ee <pid_calculate+0x132>
    {
        pid_output = pid_data->anti_windup_limit;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d2:	4b15      	ldr	r3, [pc, #84]	@ (8002228 <pid_calculate+0x16c>)
 80021d4:	edc3 7a00 	vstr	s15, [r3]
        pid_data->total_error = pid_data->total_error - error;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	ed93 7a01 	vldr	s14, [r3, #4]
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <pid_calculate+0x15c>)
 80021e0:	edd3 7a00 	vldr	s15, [r3]
 80021e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	edc3 7a01 	vstr	s15, [r3, #4]
    }


	pid_data->previous_error = error;
 80021ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <pid_calculate+0x15c>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	601a      	str	r2, [r3, #0]
	uint8_t saturated_pwm_value = saturate_pwm(pid_output);
 80021f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <pid_calculate+0x16c>)
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002200:	ee17 0a90 	vmov	r0, s15
 8002204:	f000 f94c 	bl	80024a0 <saturate_pwm>
 8002208:	4603      	mov	r3, r0
 800220a:	75fb      	strb	r3, [r7, #23]
	return saturated_pwm_value;
 800220c:	7dfb      	ldrb	r3, [r7, #23]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200004dc 	.word	0x200004dc
 800221c:	200004e0 	.word	0x200004e0
 8002220:	200004e4 	.word	0x200004e4
 8002224:	200004e8 	.word	0x200004e8
 8002228:	200004ec 	.word	0x200004ec

0800222c <drive_velo_dir>:

#include "driving_modes.h"



void drive_velo_dir(DrivingSystem* driving_system, EDvDir dv_dir, float velocity){
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	460b      	mov	r3, r1
 8002236:	ed87 0a01 	vstr	s0, [r7, #4]
 800223a:	72fb      	strb	r3, [r7, #11]

	if(dv_dir == DV_DIR_STOP){
 800223c:	7afb      	ldrb	r3, [r7, #11]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d107      	bne.n	8002252 <drive_velo_dir+0x26>
		drive_velo(driving_system, velocity, L298N_MODE_STOP, L298N_MODE_STOP);
 8002242:	2200      	movs	r2, #0
 8002244:	2100      	movs	r1, #0
 8002246:	ed97 0a01 	vldr	s0, [r7, #4]
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 f86d 	bl	800232a <drive_velo>
	}else if(dv_dir == DV_DIR_LEFT){
		drive_velo(driving_system, velocity, L298N_MODE_FORWARD, L298N_MODE_BACKWARD);
	}else if(dv_dir == DV_DIR_RIGHT){
		drive_velo(driving_system, velocity, L298N_MODE_BACKWARD, L298N_MODE_FORWARD);
	}
}
 8002250:	e02a      	b.n	80022a8 <drive_velo_dir+0x7c>
	}else if(dv_dir == DV_DIR_FORWARD){
 8002252:	7afb      	ldrb	r3, [r7, #11]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d107      	bne.n	8002268 <drive_velo_dir+0x3c>
		drive_velo(driving_system, velocity, L298N_MODE_FORWARD, L298N_MODE_FORWARD);
 8002258:	2201      	movs	r2, #1
 800225a:	2101      	movs	r1, #1
 800225c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 f862 	bl	800232a <drive_velo>
}
 8002266:	e01f      	b.n	80022a8 <drive_velo_dir+0x7c>
	}else if(dv_dir == DV_DIR_BACKWARD){
 8002268:	7afb      	ldrb	r3, [r7, #11]
 800226a:	2b03      	cmp	r3, #3
 800226c:	d107      	bne.n	800227e <drive_velo_dir+0x52>
		drive_velo(driving_system, velocity, L298N_MODE_BACKWARD, L298N_MODE_BACKWARD);
 800226e:	2202      	movs	r2, #2
 8002270:	2102      	movs	r1, #2
 8002272:	ed97 0a01 	vldr	s0, [r7, #4]
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f857 	bl	800232a <drive_velo>
}
 800227c:	e014      	b.n	80022a8 <drive_velo_dir+0x7c>
	}else if(dv_dir == DV_DIR_LEFT){
 800227e:	7afb      	ldrb	r3, [r7, #11]
 8002280:	2b04      	cmp	r3, #4
 8002282:	d107      	bne.n	8002294 <drive_velo_dir+0x68>
		drive_velo(driving_system, velocity, L298N_MODE_FORWARD, L298N_MODE_BACKWARD);
 8002284:	2202      	movs	r2, #2
 8002286:	2101      	movs	r1, #1
 8002288:	ed97 0a01 	vldr	s0, [r7, #4]
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 f84c 	bl	800232a <drive_velo>
}
 8002292:	e009      	b.n	80022a8 <drive_velo_dir+0x7c>
	}else if(dv_dir == DV_DIR_RIGHT){
 8002294:	7afb      	ldrb	r3, [r7, #11]
 8002296:	2b05      	cmp	r3, #5
 8002298:	d106      	bne.n	80022a8 <drive_velo_dir+0x7c>
		drive_velo(driving_system, velocity, L298N_MODE_BACKWARD, L298N_MODE_FORWARD);
 800229a:	2201      	movs	r2, #1
 800229c:	2102      	movs	r1, #2
 800229e:	ed97 0a01 	vldr	s0, [r7, #4]
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f841 	bl	800232a <drive_velo>
}
 80022a8:	bf00      	nop
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <drive_pwm_dir>:

void drive_pwm_dir(DrivingSystem* driving_system, EDvDir dv_dir, uint8_t pwm){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	70fb      	strb	r3, [r7, #3]
 80022bc:	4613      	mov	r3, r2
 80022be:	70bb      	strb	r3, [r7, #2]

	if(dv_dir == DV_DIR_STOP){
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d106      	bne.n	80022d4 <drive_pwm_dir+0x24>
		drive_pwm(driving_system, pwm, L298N_MODE_STOP, L298N_MODE_STOP);
 80022c6:	78b9      	ldrb	r1, [r7, #2]
 80022c8:	2300      	movs	r3, #0
 80022ca:	2200      	movs	r2, #0
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f86e 	bl	80023ae <drive_pwm>
	}else if(dv_dir == DV_DIR_LEFT){
		drive_pwm(driving_system, pwm, L298N_MODE_FORWARD, L298N_MODE_BACKWARD);
	}else if(dv_dir == DV_DIR_RIGHT){
		drive_pwm(driving_system, pwm, L298N_MODE_BACKWARD, L298N_MODE_FORWARD);
	}
}
 80022d2:	e026      	b.n	8002322 <drive_pwm_dir+0x72>
	}else if(dv_dir == DV_DIR_FORWARD){
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d106      	bne.n	80022e8 <drive_pwm_dir+0x38>
		drive_pwm(driving_system, pwm, L298N_MODE_FORWARD, L298N_MODE_FORWARD);
 80022da:	78b9      	ldrb	r1, [r7, #2]
 80022dc:	2301      	movs	r3, #1
 80022de:	2201      	movs	r2, #1
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f864 	bl	80023ae <drive_pwm>
}
 80022e6:	e01c      	b.n	8002322 <drive_pwm_dir+0x72>
	}else if(dv_dir == DV_DIR_BACKWARD){
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d106      	bne.n	80022fc <drive_pwm_dir+0x4c>
		drive_pwm(driving_system, pwm, L298N_MODE_BACKWARD, L298N_MODE_BACKWARD);
 80022ee:	78b9      	ldrb	r1, [r7, #2]
 80022f0:	2302      	movs	r3, #2
 80022f2:	2202      	movs	r2, #2
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f85a 	bl	80023ae <drive_pwm>
}
 80022fa:	e012      	b.n	8002322 <drive_pwm_dir+0x72>
	}else if(dv_dir == DV_DIR_LEFT){
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d106      	bne.n	8002310 <drive_pwm_dir+0x60>
		drive_pwm(driving_system, pwm, L298N_MODE_FORWARD, L298N_MODE_BACKWARD);
 8002302:	78b9      	ldrb	r1, [r7, #2]
 8002304:	2302      	movs	r3, #2
 8002306:	2201      	movs	r2, #1
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f850 	bl	80023ae <drive_pwm>
}
 800230e:	e008      	b.n	8002322 <drive_pwm_dir+0x72>
	}else if(dv_dir == DV_DIR_RIGHT){
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	2b05      	cmp	r3, #5
 8002314:	d105      	bne.n	8002322 <drive_pwm_dir+0x72>
		drive_pwm(driving_system, pwm, L298N_MODE_BACKWARD, L298N_MODE_FORWARD);
 8002316:	78b9      	ldrb	r1, [r7, #2]
 8002318:	2301      	movs	r3, #1
 800231a:	2202      	movs	r2, #2
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f846 	bl	80023ae <drive_pwm>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <drive_velo>:



void drive_velo(DrivingSystem* driving_system, float velocity, EL298N_MODE left_dir, EL298N_MODE right_dir)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	ed87 0a02 	vstr	s0, [r7, #8]
 8002336:	460b      	mov	r3, r1
 8002338:	71fb      	strb	r3, [r7, #7]
 800233a:	4613      	mov	r3, r2
 800233c:	71bb      	strb	r3, [r7, #6]

	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i)
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	e02c      	b.n	800239e <drive_velo+0x74>
	{
		L298N_set_input_configuration(driving_system->left_motors_lst[i]->L298N_driver, left_dir);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	79fa      	ldrb	r2, [r7, #7]
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff faa5 	bl	80018a2 <L298N_set_input_configuration>
		L298N_set_input_configuration(driving_system->right_motors_lst[i]->L298N_driver, right_dir);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	3202      	adds	r2, #2
 800235e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	79ba      	ldrb	r2, [r7, #6]
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fa9a 	bl	80018a2 <L298N_set_input_configuration>
		motor_state_set_velocity(driving_system->left_motors_lst[i]->motor_state, velocity);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	ed97 0a02 	vldr	s0, [r7, #8]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fe39 	bl	8001ff4 <motor_state_set_velocity>
		motor_state_set_velocity(driving_system->right_motors_lst[i]->motor_state, velocity);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	3202      	adds	r2, #2
 8002388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fe2e 	bl	8001ff4 <motor_state_set_velocity>
	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3301      	adds	r3, #1
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	ddcf      	ble.n	8002344 <drive_velo+0x1a>

	}
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <drive_pwm>:


void drive_pwm(DrivingSystem* driving_system, uint8_t pwm, EL298N_MODE left_dir, EL298N_MODE right_dir){
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	4608      	mov	r0, r1
 80023b8:	4611      	mov	r1, r2
 80023ba:	461a      	mov	r2, r3
 80023bc:	4603      	mov	r3, r0
 80023be:	70fb      	strb	r3, [r7, #3]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70bb      	strb	r3, [r7, #2]
 80023c4:	4613      	mov	r3, r2
 80023c6:	707b      	strb	r3, [r7, #1]
	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i)
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	e02c      	b.n	8002428 <drive_pwm+0x7a>
	{
		L298N_set_input_configuration(driving_system->left_motors_lst[i]->L298N_driver, left_dir);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	78ba      	ldrb	r2, [r7, #2]
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fa60 	bl	80018a2 <L298N_set_input_configuration>
		L298N_set_input_configuration(driving_system->right_motors_lst[i]->L298N_driver, right_dir);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	3202      	adds	r2, #2
 80023e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	787a      	ldrb	r2, [r7, #1]
 80023f0:	4611      	mov	r1, r2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fa55 	bl	80018a2 <L298N_set_input_configuration>
		L298N_set_pwm_count(driving_system->left_motors_lst[i]->L298N_driver, pwm);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	78fa      	ldrb	r2, [r7, #3]
 8002404:	4611      	mov	r1, r2
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff f9f0 	bl	80017ec <L298N_set_pwm_count>
		L298N_set_pwm_count(driving_system->right_motors_lst[i]->L298N_driver, pwm);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	3202      	adds	r2, #2
 8002412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff f9e5 	bl	80017ec <L298N_set_pwm_count>
	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	3301      	adds	r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b01      	cmp	r3, #1
 800242c:	ddcf      	ble.n	80023ce <drive_pwm+0x20>
	}

}
 800242e:	bf00      	nop
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <convert_to_radians>:

#include "motor_features.h"



float convert_to_radians(int32_t enc_position){
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

	return 2* M_PI * (float)enc_position / (float) ONE_ROTATION_TICKS;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800244a:	ee17 0a90 	vmov	r0, s15
 800244e:	f7fe f8a3 	bl	8000598 <__aeabi_f2d>
 8002452:	a30f      	add	r3, pc, #60	@ (adr r3, 8002490 <convert_to_radians+0x58>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fe f8f6 	bl	8000648 <__aeabi_dmul>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	a30c      	add	r3, pc, #48	@ (adr r3, 8002498 <convert_to_radians+0x60>)
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	f7fe fa17 	bl	800089c <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f7fe fbdf 	bl	8000c38 <__aeabi_d2f>
 800247a:	4603      	mov	r3, r0
 800247c:	ee07 3a90 	vmov	s15, r3

}
 8002480:	eeb0 0a67 	vmov.f32	s0, s15
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	f3af 8000 	nop.w
 8002490:	54442d18 	.word	0x54442d18
 8002494:	401921fb 	.word	0x401921fb
 8002498:	00000000 	.word	0x00000000
 800249c:	40ae6400 	.word	0x40ae6400

080024a0 <saturate_pwm>:


uint8_t saturate_pwm(int pwm_value){
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]


	if (pwm_value < PWM_MIN_VALUE){
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da02      	bge.n	80024b4 <saturate_pwm+0x14>
		pwm_value = (uint8_t)PWM_MIN_VALUE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	607b      	str	r3, [r7, #4]
 80024b2:	e004      	b.n	80024be <saturate_pwm+0x1e>
	}else if(pwm_value > PWM_MAX_VALUE){
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b62      	cmp	r3, #98	@ 0x62
 80024b8:	dd01      	ble.n	80024be <saturate_pwm+0x1e>
		pwm_value = (uint8_t)PWM_MAX_VALUE;
 80024ba:	2362      	movs	r3, #98	@ 0x62
 80024bc:	607b      	str	r3, [r7, #4]
	}
	return (uint8_t)pwm_value;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	b2db      	uxtb	r3, r3

}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <parse_msg_cmd_id>:
#ifndef SRC_FEATURES_PARSER_FEATURES_C_
#define SRC_FEATURES_PARSER_FEATURES_C_

#include "parser_features.h"

void parse_msg_cmd_id(uint8_t* cmd, uint8_t* msg_cmd_id){
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]

	*msg_cmd_id = cmd[0];
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	701a      	strb	r2, [r3, #0]

}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <parse_cmd_code>:

void parse_cmd_code(uint8_t* cmd, uint8_t* cmd_code){
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
//		send_parsing_err("cmd[1] wrong format");
//		return 1;
//	}
//	return 0;

	cmd_code[0] = cmd[1];
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	785a      	ldrb	r2, [r3, #1]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	701a      	strb	r2, [r3, #0]
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <parse_payload>:

int parse_payload(uint8_t* cmd, uint8_t* payload) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]

    uint8_t cmd_index = MSG_CMD_PAYLOAD_BEGIN;
 8002516:	2302      	movs	r3, #2
 8002518:	73fb      	strb	r3, [r7, #15]
    while (cmd[cmd_index] != MSG_END_CHAR) {
 800251a:	e013      	b.n	8002544 <parse_payload+0x38>

    	if((cmd_index-MSG_CMD_PAYLOAD_BEGIN) == MSG_PAYLOAD_LENGTH-1){
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	2b07      	cmp	r3, #7
 8002520:	d104      	bne.n	800252c <parse_payload+0x20>
    		send_parsing_err("cmd end char not received");
 8002522:	4811      	ldr	r0, [pc, #68]	@ (8002568 <parse_payload+0x5c>)
 8002524:	f000 f822 	bl	800256c <send_parsing_err>
    		return 1;
 8002528:	2301      	movs	r3, #1
 800252a:	e018      	b.n	800255e <parse_payload+0x52>
    	}
        payload[cmd_index-MSG_CMD_PAYLOAD_BEGIN] = cmd[cmd_index];
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	441a      	add	r2, r3
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	3b02      	subs	r3, #2
 8002536:	6839      	ldr	r1, [r7, #0]
 8002538:	440b      	add	r3, r1
 800253a:	7812      	ldrb	r2, [r2, #0]
 800253c:	701a      	strb	r2, [r3, #0]
        cmd_index++;
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	3301      	adds	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
    while (cmd[cmd_index] != MSG_END_CHAR) {
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2bfe      	cmp	r3, #254	@ 0xfe
 800254e:	d1e5      	bne.n	800251c <parse_payload+0x10>
    }

    payload[cmd_index-MSG_CMD_PAYLOAD_BEGIN] = '\0';
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	3b02      	subs	r3, #2
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	4413      	add	r3, r2
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
    return 0;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	0800d178 	.word	0x0800d178

0800256c <send_parsing_err>:

void send_parsing_err(char* msg){
 800256c:	b580      	push	{r7, lr}
 800256e:	b09c      	sub	sp, #112	@ 0x70
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

	char err_buffer[100];
	memset(err_buffer, '\0', sizeof(err_buffer));
 8002574:	f107 030c 	add.w	r3, r7, #12
 8002578:	2264      	movs	r2, #100	@ 0x64
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f007 f9e6 	bl	800994e <memset>
	strcat(err_buffer, PARSING_ERR);
 8002582:	f107 030c 	add.w	r3, r7, #12
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd fe9a 	bl	80002c0 <strlen>
 800258c:	4603      	mov	r3, r0
 800258e:	461a      	mov	r2, r3
 8002590:	f107 030c 	add.w	r3, r7, #12
 8002594:	4413      	add	r3, r2
 8002596:	4918      	ldr	r1, [pc, #96]	@ (80025f8 <send_parsing_err+0x8c>)
 8002598:	461a      	mov	r2, r3
 800259a:	460b      	mov	r3, r1
 800259c:	cb03      	ldmia	r3!, {r0, r1}
 800259e:	6010      	str	r0, [r2, #0]
 80025a0:	6051      	str	r1, [r2, #4]
 80025a2:	8819      	ldrh	r1, [r3, #0]
 80025a4:	789b      	ldrb	r3, [r3, #2]
 80025a6:	8111      	strh	r1, [r2, #8]
 80025a8:	7293      	strb	r3, [r2, #10]
	strcat(err_buffer, msg);
 80025aa:	f107 030c 	add.w	r3, r7, #12
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f007 f9d4 	bl	800995e <strcat>
	strcat(err_buffer, "\n\r");
 80025b6:	f107 030c 	add.w	r3, r7, #12
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fd fe80 	bl	80002c0 <strlen>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461a      	mov	r2, r3
 80025c4:	f107 030c 	add.w	r3, r7, #12
 80025c8:	4413      	add	r3, r2
 80025ca:	4a0c      	ldr	r2, [pc, #48]	@ (80025fc <send_parsing_err+0x90>)
 80025cc:	8811      	ldrh	r1, [r2, #0]
 80025ce:	7892      	ldrb	r2, [r2, #2]
 80025d0:	8019      	strh	r1, [r3, #0]
 80025d2:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&hlpuart1,(uint8_t*) err_buffer, strlen(err_buffer), PARSING_ERROR_TIMEOUT);
 80025d4:	f107 030c 	add.w	r3, r7, #12
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fd fe71 	bl	80002c0 <strlen>
 80025de:	4603      	mov	r3, r0
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	f107 010c 	add.w	r1, r7, #12
 80025e6:	230a      	movs	r3, #10
 80025e8:	4805      	ldr	r0, [pc, #20]	@ (8002600 <send_parsing_err+0x94>)
 80025ea:	f003 ff45 	bl	8006478 <HAL_UART_Transmit>

}
 80025ee:	bf00      	nop
 80025f0:	3770      	adds	r7, #112	@ 0x70
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	0800d194 	.word	0x0800d194
 80025fc:	0800d1a0 	.word	0x0800d1a0
 8002600:	20000448 	.word	0x20000448

08002604 <CountPeriodS>:
 */

#include "timers_feature.h"

// Funkcja obliczająca okres w sekundach
float CountPeriodS(TIM_HandleTypeDef *htim) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
    uint32_t prescaler = htim->Init.Prescaler;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	617b      	str	r3, [r7, #20]
    uint32_t period = htim->Init.Period;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	613b      	str	r3, [r7, #16]
    uint32_t clock_freq = HAL_RCC_GetHCLKFreq();
 8002618:	f001 feb6 	bl	8004388 <HAL_RCC_GetHCLKFreq>
 800261c:	60f8      	str	r0, [r7, #12]

    float period_seconds = (float)(prescaler * period) / (float)clock_freq;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	ee07 3a90 	vmov	s15, r3
 800262a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	ee07 3a90 	vmov	s15, r3
 8002634:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800263c:	edc7 7a02 	vstr	s15, [r7, #8]

    return period_seconds;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	ee07 3a90 	vmov	s15, r3
}
 8002646:	eeb0 0a67 	vmov.f32	s0, s15
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <prepare_for_motor_ini_lb>:
uint64_t tick;
void generate_stair_signal_pwm(void);
void generate_random_signal_velo(void);


void prepare_for_motor_ini_lb(){
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af04      	add	r7, sp, #16


	init_encoder_info(&lb_encoder_info, &htim4);
 8002656:	4919      	ldr	r1, [pc, #100]	@ (80026bc <prepare_for_motor_ini_lb+0x6c>)
 8002658:	4819      	ldr	r0, [pc, #100]	@ (80026c0 <prepare_for_motor_ini_lb+0x70>)
 800265a:	f7ff fb99 	bl	8001d90 <init_encoder_info>
	L298N_init(&lb_L298N, TIM_CHANNEL_1, &htim1, GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_1);
 800265e:	2302      	movs	r3, #2
 8002660:	9302      	str	r3, [sp, #8]
 8002662:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	2301      	movs	r3, #1
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002670:	4a14      	ldr	r2, [pc, #80]	@ (80026c4 <prepare_for_motor_ini_lb+0x74>)
 8002672:	2100      	movs	r1, #0
 8002674:	4814      	ldr	r0, [pc, #80]	@ (80026c8 <prepare_for_motor_ini_lb+0x78>)
 8002676:	f7ff f897 	bl	80017a8 <L298N_init>
	pid_init(&lb_pid_controller, MOTOR_Kp , MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 800267a:	215f      	movs	r1, #95	@ 0x5f
 800267c:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 80026cc <prepare_for_motor_ini_lb+0x7c>
 8002680:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80026d0 <prepare_for_motor_ini_lb+0x80>
 8002684:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80026d4 <prepare_for_motor_ini_lb+0x84>
 8002688:	4813      	ldr	r0, [pc, #76]	@ (80026d8 <prepare_for_motor_ini_lb+0x88>)
 800268a:	f7ff fcf1 	bl	8002070 <pid_init>
	init_motor(&lb_motor, &lb_motor_state, &htim7, &lb_encoder_info, &lb_pid_controller, &lb_L298N);
 800268e:	4b0e      	ldr	r3, [pc, #56]	@ (80026c8 <prepare_for_motor_ini_lb+0x78>)
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <prepare_for_motor_ini_lb+0x88>)
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	4b0a      	ldr	r3, [pc, #40]	@ (80026c0 <prepare_for_motor_ini_lb+0x70>)
 8002698:	4a10      	ldr	r2, [pc, #64]	@ (80026dc <prepare_for_motor_ini_lb+0x8c>)
 800269a:	4911      	ldr	r1, [pc, #68]	@ (80026e0 <prepare_for_motor_ini_lb+0x90>)
 800269c:	4811      	ldr	r0, [pc, #68]	@ (80026e4 <prepare_for_motor_ini_lb+0x94>)
 800269e:	f7ff fb9a 	bl	8001dd6 <init_motor>

	updater_timer_periods = CountPeriodS(lb_motor.motor_updater_tim);
 80026a2:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <prepare_for_motor_ini_lb+0x94>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff ffac 	bl	8002604 <CountPeriodS>
 80026ac:	eef0 7a40 	vmov.f32	s15, s0
 80026b0:	4b0d      	ldr	r3, [pc, #52]	@ (80026e8 <prepare_for_motor_ini_lb+0x98>)
 80026b2:	edc3 7a00 	vstr	s15, [r3]
}
 80026b6:	bf00      	nop
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000284 	.word	0x20000284
 80026c0:	20000508 	.word	0x20000508
 80026c4:	200001ec 	.word	0x200001ec
 80026c8:	20000528 	.word	0x20000528
 80026cc:	00000000 	.word	0x00000000
 80026d0:	3e4ccccd 	.word	0x3e4ccccd
 80026d4:	3c23d70a 	.word	0x3c23d70a
 80026d8:	200004f0 	.word	0x200004f0
 80026dc:	2000031c 	.word	0x2000031c
 80026e0:	20000544 	.word	0x20000544
 80026e4:	20000510 	.word	0x20000510
 80026e8:	200006ac 	.word	0x200006ac

080026ec <prepare_for_motor_ini_lf>:

void prepare_for_motor_ini_lf(){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af04      	add	r7, sp, #16

	init_encoder_info(&lf_encoder_info, &htim5);
 80026f2:	4919      	ldr	r1, [pc, #100]	@ (8002758 <prepare_for_motor_ini_lf+0x6c>)
 80026f4:	4819      	ldr	r0, [pc, #100]	@ (800275c <prepare_for_motor_ini_lf+0x70>)
 80026f6:	f7ff fb4b 	bl	8001d90 <init_encoder_info>
	L298N_init(&lf_L298N, TIM_CHANNEL_2, &htim1, GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_1);
 80026fa:	2302      	movs	r3, #2
 80026fc:	9302      	str	r3, [sp, #8]
 80026fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002702:	9301      	str	r3, [sp, #4]
 8002704:	2301      	movs	r3, #1
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800270c:	4a14      	ldr	r2, [pc, #80]	@ (8002760 <prepare_for_motor_ini_lf+0x74>)
 800270e:	2104      	movs	r1, #4
 8002710:	4814      	ldr	r0, [pc, #80]	@ (8002764 <prepare_for_motor_ini_lf+0x78>)
 8002712:	f7ff f849 	bl	80017a8 <L298N_init>
	pid_init(&lf_pid_controller, MOTOR_Kp , MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 8002716:	215f      	movs	r1, #95	@ 0x5f
 8002718:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8002768 <prepare_for_motor_ini_lf+0x7c>
 800271c:	eddf 0a13 	vldr	s1, [pc, #76]	@ 800276c <prepare_for_motor_ini_lf+0x80>
 8002720:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8002770 <prepare_for_motor_ini_lf+0x84>
 8002724:	4813      	ldr	r0, [pc, #76]	@ (8002774 <prepare_for_motor_ini_lf+0x88>)
 8002726:	f7ff fca3 	bl	8002070 <pid_init>
	init_motor(&lf_motor, &lf_motor_state, &htim7, &lf_encoder_info, &lf_pid_controller, &lf_L298N);
 800272a:	4b0e      	ldr	r3, [pc, #56]	@ (8002764 <prepare_for_motor_ini_lf+0x78>)
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	4b11      	ldr	r3, [pc, #68]	@ (8002774 <prepare_for_motor_ini_lf+0x88>)
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	4b0a      	ldr	r3, [pc, #40]	@ (800275c <prepare_for_motor_ini_lf+0x70>)
 8002734:	4a10      	ldr	r2, [pc, #64]	@ (8002778 <prepare_for_motor_ini_lf+0x8c>)
 8002736:	4911      	ldr	r1, [pc, #68]	@ (800277c <prepare_for_motor_ini_lf+0x90>)
 8002738:	4811      	ldr	r0, [pc, #68]	@ (8002780 <prepare_for_motor_ini_lf+0x94>)
 800273a:	f7ff fb4c 	bl	8001dd6 <init_motor>

	updater_timer_periods = CountPeriodS(lf_motor.motor_updater_tim);
 800273e:	4b10      	ldr	r3, [pc, #64]	@ (8002780 <prepare_for_motor_ini_lf+0x94>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ff5e 	bl	8002604 <CountPeriodS>
 8002748:	eef0 7a40 	vmov.f32	s15, s0
 800274c:	4b0d      	ldr	r3, [pc, #52]	@ (8002784 <prepare_for_motor_ini_lf+0x98>)
 800274e:	edc3 7a00 	vstr	s15, [r3]
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	200002d0 	.word	0x200002d0
 800275c:	20000570 	.word	0x20000570
 8002760:	200001ec 	.word	0x200001ec
 8002764:	20000590 	.word	0x20000590
 8002768:	00000000 	.word	0x00000000
 800276c:	3e4ccccd 	.word	0x3e4ccccd
 8002770:	3c23d70a 	.word	0x3c23d70a
 8002774:	20000558 	.word	0x20000558
 8002778:	2000031c 	.word	0x2000031c
 800277c:	200005ac 	.word	0x200005ac
 8002780:	20000578 	.word	0x20000578
 8002784:	200006ac 	.word	0x200006ac

08002788 <prepare_for_motor_ini_rb>:

void prepare_for_motor_ini_rb(){
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af04      	add	r7, sp, #16

	init_encoder_info(&rb_encoder_info, &htim8);
 800278e:	491a      	ldr	r1, [pc, #104]	@ (80027f8 <prepare_for_motor_ini_rb+0x70>)
 8002790:	481a      	ldr	r0, [pc, #104]	@ (80027fc <prepare_for_motor_ini_rb+0x74>)
 8002792:	f7ff fafd 	bl	8001d90 <init_encoder_info>
	L298N_init(&rb_L298N, TIM_CHANNEL_3, &htim1, GPIOA, GPIO_PIN_8, GPIOA, GPIO_PIN_9);
 8002796:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800279a:	9302      	str	r3, [sp, #8]
 800279c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80027ac:	4a14      	ldr	r2, [pc, #80]	@ (8002800 <prepare_for_motor_ini_rb+0x78>)
 80027ae:	2108      	movs	r1, #8
 80027b0:	4814      	ldr	r0, [pc, #80]	@ (8002804 <prepare_for_motor_ini_rb+0x7c>)
 80027b2:	f7fe fff9 	bl	80017a8 <L298N_init>
	pid_init(&rb_pid_controller, MOTOR_Kp , MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 80027b6:	215f      	movs	r1, #95	@ 0x5f
 80027b8:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8002808 <prepare_for_motor_ini_rb+0x80>
 80027bc:	eddf 0a13 	vldr	s1, [pc, #76]	@ 800280c <prepare_for_motor_ini_rb+0x84>
 80027c0:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8002810 <prepare_for_motor_ini_rb+0x88>
 80027c4:	4813      	ldr	r0, [pc, #76]	@ (8002814 <prepare_for_motor_ini_rb+0x8c>)
 80027c6:	f7ff fc53 	bl	8002070 <pid_init>
	init_motor(&rb_motor, &rb_motor_state, &htim7, &rb_encoder_info, &rb_pid_controller, &rb_L298N);
 80027ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002804 <prepare_for_motor_ini_rb+0x7c>)
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	4b11      	ldr	r3, [pc, #68]	@ (8002814 <prepare_for_motor_ini_rb+0x8c>)
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	4b0a      	ldr	r3, [pc, #40]	@ (80027fc <prepare_for_motor_ini_rb+0x74>)
 80027d4:	4a10      	ldr	r2, [pc, #64]	@ (8002818 <prepare_for_motor_ini_rb+0x90>)
 80027d6:	4911      	ldr	r1, [pc, #68]	@ (800281c <prepare_for_motor_ini_rb+0x94>)
 80027d8:	4811      	ldr	r0, [pc, #68]	@ (8002820 <prepare_for_motor_ini_rb+0x98>)
 80027da:	f7ff fafc 	bl	8001dd6 <init_motor>

	updater_timer_periods = CountPeriodS(lf_motor.motor_updater_tim);
 80027de:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <prepare_for_motor_ini_rb+0x9c>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff ff0e 	bl	8002604 <CountPeriodS>
 80027e8:	eef0 7a40 	vmov.f32	s15, s0
 80027ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002828 <prepare_for_motor_ini_rb+0xa0>)
 80027ee:	edc3 7a00 	vstr	s15, [r3]
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20000368 	.word	0x20000368
 80027fc:	200005d8 	.word	0x200005d8
 8002800:	200001ec 	.word	0x200001ec
 8002804:	200005f8 	.word	0x200005f8
 8002808:	00000000 	.word	0x00000000
 800280c:	3e4ccccd 	.word	0x3e4ccccd
 8002810:	3c23d70a 	.word	0x3c23d70a
 8002814:	200005c0 	.word	0x200005c0
 8002818:	2000031c 	.word	0x2000031c
 800281c:	20000614 	.word	0x20000614
 8002820:	200005e0 	.word	0x200005e0
 8002824:	20000578 	.word	0x20000578
 8002828:	200006ac 	.word	0x200006ac

0800282c <prepare_for_motor_ini_rf>:

void prepare_for_motor_ini_rf(){
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af04      	add	r7, sp, #16

	init_encoder_info(&rf_encoder_info, &htim3);
 8002832:	491a      	ldr	r1, [pc, #104]	@ (800289c <prepare_for_motor_ini_rf+0x70>)
 8002834:	481a      	ldr	r0, [pc, #104]	@ (80028a0 <prepare_for_motor_ini_rf+0x74>)
 8002836:	f7ff faab 	bl	8001d90 <init_encoder_info>
	L298N_init(&rf_L298N, TIM_CHANNEL_4, &htim1, GPIOA, GPIO_PIN_8, GPIOA, GPIO_PIN_9);
 800283a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800283e:	9302      	str	r3, [sp, #8]
 8002840:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002850:	4a14      	ldr	r2, [pc, #80]	@ (80028a4 <prepare_for_motor_ini_rf+0x78>)
 8002852:	210c      	movs	r1, #12
 8002854:	4814      	ldr	r0, [pc, #80]	@ (80028a8 <prepare_for_motor_ini_rf+0x7c>)
 8002856:	f7fe ffa7 	bl	80017a8 <L298N_init>
	pid_init(&rf_pid_controller, MOTOR_Kp , MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 800285a:	215f      	movs	r1, #95	@ 0x5f
 800285c:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 80028ac <prepare_for_motor_ini_rf+0x80>
 8002860:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80028b0 <prepare_for_motor_ini_rf+0x84>
 8002864:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80028b4 <prepare_for_motor_ini_rf+0x88>
 8002868:	4813      	ldr	r0, [pc, #76]	@ (80028b8 <prepare_for_motor_ini_rf+0x8c>)
 800286a:	f7ff fc01 	bl	8002070 <pid_init>
	init_motor(&rf_motor, &rf_motor_state, &htim7, &rf_encoder_info, &rf_pid_controller, &rf_L298N);
 800286e:	4b0e      	ldr	r3, [pc, #56]	@ (80028a8 <prepare_for_motor_ini_rf+0x7c>)
 8002870:	9301      	str	r3, [sp, #4]
 8002872:	4b11      	ldr	r3, [pc, #68]	@ (80028b8 <prepare_for_motor_ini_rf+0x8c>)
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	4b0a      	ldr	r3, [pc, #40]	@ (80028a0 <prepare_for_motor_ini_rf+0x74>)
 8002878:	4a10      	ldr	r2, [pc, #64]	@ (80028bc <prepare_for_motor_ini_rf+0x90>)
 800287a:	4911      	ldr	r1, [pc, #68]	@ (80028c0 <prepare_for_motor_ini_rf+0x94>)
 800287c:	4811      	ldr	r0, [pc, #68]	@ (80028c4 <prepare_for_motor_ini_rf+0x98>)
 800287e:	f7ff faaa 	bl	8001dd6 <init_motor>

	updater_timer_periods = CountPeriodS(rf_motor.motor_updater_tim);
 8002882:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <prepare_for_motor_ini_rf+0x98>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff febc 	bl	8002604 <CountPeriodS>
 800288c:	eef0 7a40 	vmov.f32	s15, s0
 8002890:	4b0d      	ldr	r3, [pc, #52]	@ (80028c8 <prepare_for_motor_ini_rf+0x9c>)
 8002892:	edc3 7a00 	vstr	s15, [r3]
}
 8002896:	bf00      	nop
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000238 	.word	0x20000238
 80028a0:	20000640 	.word	0x20000640
 80028a4:	200001ec 	.word	0x200001ec
 80028a8:	20000660 	.word	0x20000660
 80028ac:	00000000 	.word	0x00000000
 80028b0:	3e4ccccd 	.word	0x3e4ccccd
 80028b4:	3c23d70a 	.word	0x3c23d70a
 80028b8:	20000628 	.word	0x20000628
 80028bc:	2000031c 	.word	0x2000031c
 80028c0:	2000067c 	.word	0x2000067c
 80028c4:	20000648 	.word	0x20000648
 80028c8:	200006ac 	.word	0x200006ac

080028cc <main>:




int main(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af02      	add	r7, sp, #8

  HAL_Init();
 80028d2:	f000 fc96 	bl	8003202 <HAL_Init>
  SystemClock_Config();
 80028d6:	f7fe fbad 	bl	8001034 <SystemClock_Config>
  MX_GPIO_Init();
 80028da:	f7fe fbf7 	bl	80010cc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80028de:	f7fe fecd 	bl	800167c <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80028e2:	f7fe ff15 	bl	8001710 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80028e6:	f7fe fc61 	bl	80011ac <MX_TIM1_Init>
  MX_TIM3_Init();
 80028ea:	f7fe fd35 	bl	8001358 <MX_TIM3_Init>
  MX_TIM4_Init();
 80028ee:	f7fe fd89 	bl	8001404 <MX_TIM4_Init>
  MX_TIM5_Init();
 80028f2:	f7fe fddd 	bl	80014b0 <MX_TIM5_Init>
  MX_TIM7_Init();
 80028f6:	f7fe fe31 	bl	800155c <MX_TIM7_Init>
  MX_TIM8_Init();
 80028fa:	f7fe fe65 	bl	80015c8 <MX_TIM8_Init>


  prepare_for_motor_ini_lb();
 80028fe:	f7ff fea7 	bl	8002650 <prepare_for_motor_ini_lb>
  prepare_for_motor_ini_lf();
 8002902:	f7ff fef3 	bl	80026ec <prepare_for_motor_ini_lf>
  prepare_for_motor_ini_rb();
 8002906:	f7ff ff3f 	bl	8002788 <prepare_for_motor_ini_rb>
  prepare_for_motor_ini_rf();
 800290a:	f7ff ff8f 	bl	800282c <prepare_for_motor_ini_rf>

  init_driving_system(&driving_system ,&lb_motor, &lf_motor, &rb_motor, &rf_motor);
 800290e:	4b21      	ldr	r3, [pc, #132]	@ (8002994 <main+0xc8>)
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	4b21      	ldr	r3, [pc, #132]	@ (8002998 <main+0xcc>)
 8002914:	4a21      	ldr	r2, [pc, #132]	@ (800299c <main+0xd0>)
 8002916:	4922      	ldr	r1, [pc, #136]	@ (80029a0 <main+0xd4>)
 8002918:	4822      	ldr	r0, [pc, #136]	@ (80029a4 <main+0xd8>)
 800291a:	f7ff f807 	bl	800192c <init_driving_system>
  default_init_driving_system_if(&drv_system_if);
 800291e:	4822      	ldr	r0, [pc, #136]	@ (80029a8 <main+0xdc>)
 8002920:	f7ff f820 	bl	8001964 <default_init_driving_system_if>

  velo = 0;
 8002924:	4b21      	ldr	r3, [pc, #132]	@ (80029ac <main+0xe0>)
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
  pwm_output = 0;
 800292a:	4b21      	ldr	r3, [pc, #132]	@ (80029b0 <main+0xe4>)
 800292c:	2200      	movs	r2, #0
 800292e:	701a      	strb	r2, [r3, #0]
  tick = 0;
 8002930:	4920      	ldr	r1, [pc, #128]	@ (80029b4 <main+0xe8>)
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	e9c1 2300 	strd	r2, r3, [r1]

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 800293e:	481e      	ldr	r0, [pc, #120]	@ (80029b8 <main+0xec>)
 8002940:	f002 f878 	bl	8004a34 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002944:	2100      	movs	r1, #0
 8002946:	481d      	ldr	r0, [pc, #116]	@ (80029bc <main+0xf0>)
 8002948:	f002 f94e 	bl	8004be8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800294c:	2104      	movs	r1, #4
 800294e:	481b      	ldr	r0, [pc, #108]	@ (80029bc <main+0xf0>)
 8002950:	f002 f94a 	bl	8004be8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002954:	2108      	movs	r1, #8
 8002956:	4819      	ldr	r0, [pc, #100]	@ (80029bc <main+0xf0>)
 8002958:	f002 f946 	bl	8004be8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800295c:	210c      	movs	r1, #12
 800295e:	4817      	ldr	r0, [pc, #92]	@ (80029bc <main+0xf0>)
 8002960:	f002 f942 	bl	8004be8 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002964:	213c      	movs	r1, #60	@ 0x3c
 8002966:	4816      	ldr	r0, [pc, #88]	@ (80029c0 <main+0xf4>)
 8002968:	f002 faf6 	bl	8004f58 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800296c:	213c      	movs	r1, #60	@ 0x3c
 800296e:	4815      	ldr	r0, [pc, #84]	@ (80029c4 <main+0xf8>)
 8002970:	f002 faf2 	bl	8004f58 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8002974:	213c      	movs	r1, #60	@ 0x3c
 8002976:	4814      	ldr	r0, [pc, #80]	@ (80029c8 <main+0xfc>)
 8002978:	f002 faee 	bl	8004f58 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 800297c:	213c      	movs	r1, #60	@ 0x3c
 800297e:	4813      	ldr	r0, [pc, #76]	@ (80029cc <main+0x100>)
 8002980:	f002 faea 	bl	8004f58 <HAL_TIM_Encoder_Start>



  /* USER CODE END 2 */

  HAL_UART_Receive_IT(&hlpuart1, cmd_data, CMD_CODE_LENGTH + MSG_PAYLOAD_LENGTH);
 8002984:	2208      	movs	r2, #8
 8002986:	4912      	ldr	r1, [pc, #72]	@ (80029d0 <main+0x104>)
 8002988:	4812      	ldr	r0, [pc, #72]	@ (80029d4 <main+0x108>)
 800298a:	f003 fe03 	bl	8006594 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  driving_system.velo_ctrl_flag = 1;
    while (1)
 800298e:	bf00      	nop
 8002990:	e7fd      	b.n	800298e <main+0xc2>
 8002992:	bf00      	nop
 8002994:	20000648 	.word	0x20000648
 8002998:	200005e0 	.word	0x200005e0
 800299c:	20000578 	.word	0x20000578
 80029a0:	20000510 	.word	0x20000510
 80029a4:	20000690 	.word	0x20000690
 80029a8:	200006a4 	.word	0x200006a4
 80029ac:	200006b9 	.word	0x200006b9
 80029b0:	200006b8 	.word	0x200006b8
 80029b4:	200006c0 	.word	0x200006c0
 80029b8:	2000031c 	.word	0x2000031c
 80029bc:	200001ec 	.word	0x200001ec
 80029c0:	20000238 	.word	0x20000238
 80029c4:	20000284 	.word	0x20000284
 80029c8:	200002d0 	.word	0x200002d0
 80029cc:	20000368 	.word	0x20000368
 80029d0:	200006b0 	.word	0x200006b0
 80029d4:	20000448 	.word	0x20000448

080029d8 <HAL_UART_RxCpltCallback>:
  }

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

	drv_system_if.exe_cmd(&driving_system, cmd_data);
 80029e0:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_UART_RxCpltCallback+0x24>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4906      	ldr	r1, [pc, #24]	@ (8002a00 <HAL_UART_RxCpltCallback+0x28>)
 80029e6:	4807      	ldr	r0, [pc, #28]	@ (8002a04 <HAL_UART_RxCpltCallback+0x2c>)
 80029e8:	4798      	blx	r3
	HAL_UART_Receive_IT(&hlpuart1, cmd_data, CMD_CODE_LENGTH + MSG_PAYLOAD_LENGTH);
 80029ea:	2208      	movs	r2, #8
 80029ec:	4904      	ldr	r1, [pc, #16]	@ (8002a00 <HAL_UART_RxCpltCallback+0x28>)
 80029ee:	4806      	ldr	r0, [pc, #24]	@ (8002a08 <HAL_UART_RxCpltCallback+0x30>)
 80029f0:	f003 fdd0 	bl	8006594 <HAL_UART_Receive_IT>

}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	200006a4 	.word	0x200006a4
 8002a00:	200006b0 	.word	0x200006b0
 8002a04:	20000690 	.word	0x20000690
 8002a08:	20000448 	.word	0x20000448

08002a0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a0c:	b5b0      	push	{r4, r5, r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

    if (htim->Instance == (TIM_TypeDef *)lb_motor.motor_updater_tim->Instance) {
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b0a      	ldr	r3, [pc, #40]	@ (8002a44 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d10b      	bne.n	8002a3a <HAL_TIM_PeriodElapsedCallback+0x2e>
//    	update_motor_position(lb_motor.motor_state, lb_motor.encoder_info);
//    	update_measured_velocity(&lb_motor);
//    	motor_state_set_velocity(&lb_motor_state, velo);
//    	L298N_set_pwm_count(lb_motor.L298N_driver, pwm_output);

    	driving_system_drive(&driving_system);
 8002a22:	4809      	ldr	r0, [pc, #36]	@ (8002a48 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002a24:	f7fe ffb2 	bl	800198c <driving_system_drive>
    	tick += 1;
 8002a28:	4b08      	ldr	r3, [pc, #32]	@ (8002a4c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2e:	1c54      	adds	r4, r2, #1
 8002a30:	f143 0500 	adc.w	r5, r3, #0
 8002a34:	4b05      	ldr	r3, [pc, #20]	@ (8002a4c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002a36:	e9c3 4500 	strd	r4, r5, [r3]
    }



//  /* USER CODE END Callback 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bdb0      	pop	{r4, r5, r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000510 	.word	0x20000510
 8002a48:	20000690 	.word	0x20000690
 8002a4c:	200006c0 	.word	0x200006c0

08002a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a54:	b672      	cpsid	i
}
 8002a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a58:	bf00      	nop
 8002a5a:	e7fd      	b.n	8002a58 <Error_Handler+0x8>

08002a5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a62:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa0 <HAL_MspInit+0x44>)
 8002a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a66:	4a0e      	ldr	r2, [pc, #56]	@ (8002aa0 <HAL_MspInit+0x44>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <HAL_MspInit+0x44>)
 8002a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a7a:	4b09      	ldr	r3, [pc, #36]	@ (8002aa0 <HAL_MspInit+0x44>)
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7e:	4a08      	ldr	r2, [pc, #32]	@ (8002aa0 <HAL_MspInit+0x44>)
 8002a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a84:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a86:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <HAL_MspInit+0x44>)
 8002a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002a92:	f000 ffb9 	bl	8003a08 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000

08002aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b0a0      	sub	sp, #128	@ 0x80
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002abc:	f107 0318 	add.w	r3, r7, #24
 8002ac0:	2254      	movs	r2, #84	@ 0x54
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f006 ff42 	bl	800994e <memset>
  if(huart->Instance==LPUART1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a41      	ldr	r2, [pc, #260]	@ (8002bd4 <HAL_UART_MspInit+0x130>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d13f      	bne.n	8002b54 <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002adc:	f107 0318 	add.w	r3, r7, #24
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f001 fd01 	bl	80044e8 <HAL_RCCEx_PeriphCLKConfig>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002aec:	f7ff ffb0 	bl	8002a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002af0:	4b39      	ldr	r3, [pc, #228]	@ (8002bd8 <HAL_UART_MspInit+0x134>)
 8002af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af4:	4a38      	ldr	r2, [pc, #224]	@ (8002bd8 <HAL_UART_MspInit+0x134>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002afc:	4b36      	ldr	r3, [pc, #216]	@ (8002bd8 <HAL_UART_MspInit+0x134>)
 8002afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b08:	4b33      	ldr	r3, [pc, #204]	@ (8002bd8 <HAL_UART_MspInit+0x134>)
 8002b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0c:	4a32      	ldr	r2, [pc, #200]	@ (8002bd8 <HAL_UART_MspInit+0x134>)
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b14:	4b30      	ldr	r3, [pc, #192]	@ (8002bd8 <HAL_UART_MspInit+0x134>)
 8002b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b20:	230c      	movs	r3, #12
 8002b22:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b24:	2302      	movs	r3, #2
 8002b26:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002b30:	230c      	movs	r3, #12
 8002b32:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b34:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b3e:	f000 fd25 	bl	800358c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2100      	movs	r1, #0
 8002b46:	205b      	movs	r0, #91	@ 0x5b
 8002b48:	f000 fc38 	bl	80033bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002b4c:	205b      	movs	r0, #91	@ 0x5b
 8002b4e:	f000 fc4f 	bl	80033f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b52:	e03a      	b.n	8002bca <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a20      	ldr	r2, [pc, #128]	@ (8002bdc <HAL_UART_MspInit+0x138>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d135      	bne.n	8002bca <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b66:	f107 0318 	add.w	r3, r7, #24
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f001 fcbc 	bl	80044e8 <HAL_RCCEx_PeriphCLKConfig>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002b76:	f7ff ff6b 	bl	8002a50 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b7a:	4b17      	ldr	r3, [pc, #92]	@ (8002bd8 <HAL_UART_MspInit+0x134>)
 8002b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b7e:	4a16      	ldr	r2, [pc, #88]	@ (8002bd8 <HAL_UART_MspInit+0x134>)
 8002b80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b84:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b86:	4b14      	ldr	r3, [pc, #80]	@ (8002bd8 <HAL_UART_MspInit+0x134>)
 8002b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b92:	4b11      	ldr	r3, [pc, #68]	@ (8002bd8 <HAL_UART_MspInit+0x134>)
 8002b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b96:	4a10      	ldr	r2, [pc, #64]	@ (8002bd8 <HAL_UART_MspInit+0x134>)
 8002b98:	f043 0304 	orr.w	r3, r3, #4
 8002b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd8 <HAL_UART_MspInit+0x134>)
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002baa:	2330      	movs	r3, #48	@ 0x30
 8002bac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bba:	2307      	movs	r3, #7
 8002bbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bbe:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4806      	ldr	r0, [pc, #24]	@ (8002be0 <HAL_UART_MspInit+0x13c>)
 8002bc6:	f000 fce1 	bl	800358c <HAL_GPIO_Init>
}
 8002bca:	bf00      	nop
 8002bcc:	3780      	adds	r7, #128	@ 0x80
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40008000 	.word	0x40008000
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40013800 	.word	0x40013800
 8002be0:	48000800 	.word	0x48000800

08002be4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a16      	ldr	r2, [pc, #88]	@ (8002c4c <HAL_TIM_Base_MspInit+0x68>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d10c      	bne.n	8002c10 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bf6:	4b16      	ldr	r3, [pc, #88]	@ (8002c50 <HAL_TIM_Base_MspInit+0x6c>)
 8002bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfa:	4a15      	ldr	r2, [pc, #84]	@ (8002c50 <HAL_TIM_Base_MspInit+0x6c>)
 8002bfc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c00:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c02:	4b13      	ldr	r3, [pc, #76]	@ (8002c50 <HAL_TIM_Base_MspInit+0x6c>)
 8002c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002c0e:	e018      	b.n	8002c42 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0f      	ldr	r2, [pc, #60]	@ (8002c54 <HAL_TIM_Base_MspInit+0x70>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d113      	bne.n	8002c42 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c50 <HAL_TIM_Base_MspInit+0x6c>)
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1e:	4a0c      	ldr	r2, [pc, #48]	@ (8002c50 <HAL_TIM_Base_MspInit+0x6c>)
 8002c20:	f043 0320 	orr.w	r3, r3, #32
 8002c24:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c26:	4b0a      	ldr	r3, [pc, #40]	@ (8002c50 <HAL_TIM_Base_MspInit+0x6c>)
 8002c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2a:	f003 0320 	and.w	r3, r3, #32
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8002c32:	2200      	movs	r2, #0
 8002c34:	2100      	movs	r1, #0
 8002c36:	2037      	movs	r0, #55	@ 0x37
 8002c38:	f000 fbc0 	bl	80033bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8002c3c:	2037      	movs	r0, #55	@ 0x37
 8002c3e:	f000 fbd7 	bl	80033f0 <HAL_NVIC_EnableIRQ>
}
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40012c00 	.word	0x40012c00
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40001400 	.word	0x40001400

08002c58 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b090      	sub	sp, #64	@ 0x40
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a6c      	ldr	r2, [pc, #432]	@ (8002e28 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d129      	bne.n	8002cce <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c7a:	4b6c      	ldr	r3, [pc, #432]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7e:	4a6b      	ldr	r2, [pc, #428]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002c80:	f043 0302 	orr.w	r3, r3, #2
 8002c84:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c86:	4b69      	ldr	r3, [pc, #420]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c92:	4b66      	ldr	r3, [pc, #408]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c96:	4a65      	ldr	r2, [pc, #404]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c9e:	4b63      	ldr	r3, [pc, #396]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002caa:	2350      	movs	r3, #80	@ 0x50
 8002cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cc8:	f000 fc60 	bl	800358c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002ccc:	e0a7      	b.n	8002e1e <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM4)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a57      	ldr	r2, [pc, #348]	@ (8002e30 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d12a      	bne.n	8002d2e <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cd8:	4b54      	ldr	r3, [pc, #336]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cdc:	4a53      	ldr	r2, [pc, #332]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002cde:	f043 0304 	orr.w	r3, r3, #4
 8002ce2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ce4:	4b51      	ldr	r3, [pc, #324]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	623b      	str	r3, [r7, #32]
 8002cee:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf0:	4b4e      	ldr	r3, [pc, #312]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf4:	4a4d      	ldr	r2, [pc, #308]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cfc:	4b4b      	ldr	r3, [pc, #300]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002d08:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d16:	2300      	movs	r3, #0
 8002d18:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002d1a:	230a      	movs	r3, #10
 8002d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d22:	4619      	mov	r1, r3
 8002d24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d28:	f000 fc30 	bl	800358c <HAL_GPIO_Init>
}
 8002d2c:	e077      	b.n	8002e1e <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM5)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a40      	ldr	r2, [pc, #256]	@ (8002e34 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d145      	bne.n	8002dc4 <HAL_TIM_Encoder_MspInit+0x16c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d38:	4b3c      	ldr	r3, [pc, #240]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3c:	4a3b      	ldr	r2, [pc, #236]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002d3e:	f043 0308 	orr.w	r3, r3, #8
 8002d42:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d44:	4b39      	ldr	r3, [pc, #228]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d50:	4b36      	ldr	r3, [pc, #216]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d54:	4a35      	ldr	r2, [pc, #212]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002d56:	f043 0302 	orr.w	r3, r3, #2
 8002d5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d5c:	4b33      	ldr	r3, [pc, #204]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d68:	4b30      	ldr	r3, [pc, #192]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d6c:	4a2f      	ldr	r2, [pc, #188]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002d6e:	f043 0304 	orr.w	r3, r3, #4
 8002d72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d74:	4b2d      	ldr	r3, [pc, #180]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d80:	2304      	movs	r3, #4
 8002d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d90:	2302      	movs	r3, #2
 8002d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4827      	ldr	r0, [pc, #156]	@ (8002e38 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8002d9c:	f000 fbf6 	bl	800358c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002da0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	2302      	movs	r3, #2
 8002da8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dae:	2300      	movs	r3, #0
 8002db0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8002db2:	2301      	movs	r3, #1
 8002db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dba:	4619      	mov	r1, r3
 8002dbc:	481f      	ldr	r0, [pc, #124]	@ (8002e3c <HAL_TIM_Encoder_MspInit+0x1e4>)
 8002dbe:	f000 fbe5 	bl	800358c <HAL_GPIO_Init>
}
 8002dc2:	e02c      	b.n	8002e1e <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM8)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8002e40 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d127      	bne.n	8002e1e <HAL_TIM_Encoder_MspInit+0x1c6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002dce:	4b17      	ldr	r3, [pc, #92]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dd2:	4a16      	ldr	r2, [pc, #88]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002dd4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002dd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002dda:	4b14      	ldr	r3, [pc, #80]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de6:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dea:	4a10      	ldr	r2, [pc, #64]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002dec:	f043 0304 	orr.w	r3, r3, #4
 8002df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002df2:	4b0e      	ldr	r3, [pc, #56]	@ (8002e2c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dfe:	23c0      	movs	r3, #192	@ 0xc0
 8002e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e02:	2302      	movs	r3, #2
 8002e04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002e0e:	2304      	movs	r3, #4
 8002e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e16:	4619      	mov	r1, r3
 8002e18:	4808      	ldr	r0, [pc, #32]	@ (8002e3c <HAL_TIM_Encoder_MspInit+0x1e4>)
 8002e1a:	f000 fbb7 	bl	800358c <HAL_GPIO_Init>
}
 8002e1e:	bf00      	nop
 8002e20:	3740      	adds	r7, #64	@ 0x40
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40000400 	.word	0x40000400
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	40000800 	.word	0x40000800
 8002e34:	40000c00 	.word	0x40000c00
 8002e38:	48000400 	.word	0x48000400
 8002e3c:	48000800 	.word	0x48000800
 8002e40:	40013400 	.word	0x40013400

08002e44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4c:	f107 030c 	add.w	r3, r7, #12
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a11      	ldr	r2, [pc, #68]	@ (8002ea8 <HAL_TIM_MspPostInit+0x64>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d11b      	bne.n	8002e9e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e66:	4b11      	ldr	r3, [pc, #68]	@ (8002eac <HAL_TIM_MspPostInit+0x68>)
 8002e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e6a:	4a10      	ldr	r2, [pc, #64]	@ (8002eac <HAL_TIM_MspPostInit+0x68>)
 8002e6c:	f043 0304 	orr.w	r3, r3, #4
 8002e70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e72:	4b0e      	ldr	r3, [pc, #56]	@ (8002eac <HAL_TIM_MspPostInit+0x68>)
 8002e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002e7e:	230f      	movs	r3, #15
 8002e80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e82:	2302      	movs	r3, #2
 8002e84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e92:	f107 030c 	add.w	r3, r7, #12
 8002e96:	4619      	mov	r1, r3
 8002e98:	4805      	ldr	r0, [pc, #20]	@ (8002eb0 <HAL_TIM_MspPostInit+0x6c>)
 8002e9a:	f000 fb77 	bl	800358c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002e9e:	bf00      	nop
 8002ea0:	3720      	adds	r7, #32
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40012c00 	.word	0x40012c00
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	48000800 	.word	0x48000800

08002eb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08c      	sub	sp, #48	@ 0x30
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002ec4:	4b2c      	ldr	r3, [pc, #176]	@ (8002f78 <HAL_InitTick+0xc4>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec8:	4a2b      	ldr	r2, [pc, #172]	@ (8002f78 <HAL_InitTick+0xc4>)
 8002eca:	f043 0310 	orr.w	r3, r3, #16
 8002ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ed0:	4b29      	ldr	r3, [pc, #164]	@ (8002f78 <HAL_InitTick+0xc4>)
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002edc:	f107 020c 	add.w	r2, r7, #12
 8002ee0:	f107 0310 	add.w	r3, r7, #16
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f001 fa86 	bl	80043f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002eec:	f001 fa58 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 8002ef0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef4:	4a21      	ldr	r2, [pc, #132]	@ (8002f7c <HAL_InitTick+0xc8>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	0c9b      	lsrs	r3, r3, #18
 8002efc:	3b01      	subs	r3, #1
 8002efe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002f00:	4b1f      	ldr	r3, [pc, #124]	@ (8002f80 <HAL_InitTick+0xcc>)
 8002f02:	4a20      	ldr	r2, [pc, #128]	@ (8002f84 <HAL_InitTick+0xd0>)
 8002f04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002f06:	4b1e      	ldr	r3, [pc, #120]	@ (8002f80 <HAL_InitTick+0xcc>)
 8002f08:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002f0c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8002f80 <HAL_InitTick+0xcc>)
 8002f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f12:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002f14:	4b1a      	ldr	r3, [pc, #104]	@ (8002f80 <HAL_InitTick+0xcc>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f1a:	4b19      	ldr	r3, [pc, #100]	@ (8002f80 <HAL_InitTick+0xcc>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002f20:	4817      	ldr	r0, [pc, #92]	@ (8002f80 <HAL_InitTick+0xcc>)
 8002f22:	f001 fd2f 	bl	8004984 <HAL_TIM_Base_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002f2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d11b      	bne.n	8002f6c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002f34:	4812      	ldr	r0, [pc, #72]	@ (8002f80 <HAL_InitTick+0xcc>)
 8002f36:	f001 fd7d 	bl	8004a34 <HAL_TIM_Base_Start_IT>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002f40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d111      	bne.n	8002f6c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f48:	2036      	movs	r0, #54	@ 0x36
 8002f4a:	f000 fa51 	bl	80033f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b0f      	cmp	r3, #15
 8002f52:	d808      	bhi.n	8002f66 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002f54:	2200      	movs	r2, #0
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	2036      	movs	r0, #54	@ 0x36
 8002f5a:	f000 fa2f 	bl	80033bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f88 <HAL_InitTick+0xd4>)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	e002      	b.n	8002f6c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002f6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3730      	adds	r7, #48	@ 0x30
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	431bde83 	.word	0x431bde83
 8002f80:	200006c8 	.word	0x200006c8
 8002f84:	40001000 	.word	0x40001000
 8002f88:	20000004 	.word	0x20000004

08002f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f90:	bf00      	nop
 8002f92:	e7fd      	b.n	8002f90 <NMI_Handler+0x4>

08002f94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f98:	bf00      	nop
 8002f9a:	e7fd      	b.n	8002f98 <HardFault_Handler+0x4>

08002f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fa0:	bf00      	nop
 8002fa2:	e7fd      	b.n	8002fa0 <MemManage_Handler+0x4>

08002fa4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fa8:	bf00      	nop
 8002faa:	e7fd      	b.n	8002fa8 <BusFault_Handler+0x4>

08002fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fb0:	bf00      	nop
 8002fb2:	e7fd      	b.n	8002fb0 <UsageFault_Handler+0x4>

08002fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002fc8:	4802      	ldr	r0, [pc, #8]	@ (8002fd4 <TIM6_DAC_IRQHandler+0x10>)
 8002fca:	f002 f853 	bl	8005074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	200006c8 	.word	0x200006c8

08002fd8 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002fdc:	4802      	ldr	r0, [pc, #8]	@ (8002fe8 <TIM7_DAC_IRQHandler+0x10>)
 8002fde:	f002 f849 	bl	8005074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	2000031c 	.word	0x2000031c

08002fec <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002ff0:	4802      	ldr	r0, [pc, #8]	@ (8002ffc <LPUART1_IRQHandler+0x10>)
 8002ff2:	f003 fb1b 	bl	800662c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000448 	.word	0x20000448

08003000 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
	return 1;
 8003004:	2301      	movs	r3, #1
}
 8003006:	4618      	mov	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <_kill>:

int _kill(int pid, int sig)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800301a:	f006 fcf9 	bl	8009a10 <__errno>
 800301e:	4603      	mov	r3, r0
 8003020:	2216      	movs	r2, #22
 8003022:	601a      	str	r2, [r3, #0]
	return -1;
 8003024:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <_exit>:

void _exit (int status)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003038:	f04f 31ff 	mov.w	r1, #4294967295
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff ffe7 	bl	8003010 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003042:	bf00      	nop
 8003044:	e7fd      	b.n	8003042 <_exit+0x12>

08003046 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b086      	sub	sp, #24
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	e00a      	b.n	800306e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003058:	f3af 8000 	nop.w
 800305c:	4601      	mov	r1, r0
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	60ba      	str	r2, [r7, #8]
 8003064:	b2ca      	uxtb	r2, r1
 8003066:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	3301      	adds	r3, #1
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	429a      	cmp	r2, r3
 8003074:	dbf0      	blt.n	8003058 <_read+0x12>
	}

return len;
 8003076:	687b      	ldr	r3, [r7, #4]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	e009      	b.n	80030a6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	60ba      	str	r2, [r7, #8]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	3301      	adds	r3, #1
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	dbf1      	blt.n	8003092 <_write+0x12>
	}
	return len;
 80030ae:	687b      	ldr	r3, [r7, #4]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <_close>:

int _close(int file)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
	return -1;
 80030c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030e0:	605a      	str	r2, [r3, #4]
	return 0;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <_isatty>:

int _isatty(int file)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
	return 1;
 80030f8:	2301      	movs	r3, #1
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003106:	b480      	push	{r7}
 8003108:	b085      	sub	sp, #20
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	607a      	str	r2, [r7, #4]
	return 0;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003128:	4a14      	ldr	r2, [pc, #80]	@ (800317c <_sbrk+0x5c>)
 800312a:	4b15      	ldr	r3, [pc, #84]	@ (8003180 <_sbrk+0x60>)
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003134:	4b13      	ldr	r3, [pc, #76]	@ (8003184 <_sbrk+0x64>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d102      	bne.n	8003142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800313c:	4b11      	ldr	r3, [pc, #68]	@ (8003184 <_sbrk+0x64>)
 800313e:	4a12      	ldr	r2, [pc, #72]	@ (8003188 <_sbrk+0x68>)
 8003140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003142:	4b10      	ldr	r3, [pc, #64]	@ (8003184 <_sbrk+0x64>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4413      	add	r3, r2
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	429a      	cmp	r2, r3
 800314e:	d207      	bcs.n	8003160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003150:	f006 fc5e 	bl	8009a10 <__errno>
 8003154:	4603      	mov	r3, r0
 8003156:	220c      	movs	r2, #12
 8003158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800315a:	f04f 33ff 	mov.w	r3, #4294967295
 800315e:	e009      	b.n	8003174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003160:	4b08      	ldr	r3, [pc, #32]	@ (8003184 <_sbrk+0x64>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003166:	4b07      	ldr	r3, [pc, #28]	@ (8003184 <_sbrk+0x64>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4413      	add	r3, r2
 800316e:	4a05      	ldr	r2, [pc, #20]	@ (8003184 <_sbrk+0x64>)
 8003170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003172:	68fb      	ldr	r3, [r7, #12]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20020000 	.word	0x20020000
 8003180:	00000400 	.word	0x00000400
 8003184:	20000714 	.word	0x20000714
 8003188:	200008f8 	.word	0x200008f8

0800318c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003190:	4b06      	ldr	r3, [pc, #24]	@ (80031ac <SystemInit+0x20>)
 8003192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003196:	4a05      	ldr	r2, [pc, #20]	@ (80031ac <SystemInit+0x20>)
 8003198:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800319c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031b0:	480d      	ldr	r0, [pc, #52]	@ (80031e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031b4:	f7ff ffea 	bl	800318c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031b8:	480c      	ldr	r0, [pc, #48]	@ (80031ec <LoopForever+0x6>)
  ldr r1, =_edata
 80031ba:	490d      	ldr	r1, [pc, #52]	@ (80031f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031bc:	4a0d      	ldr	r2, [pc, #52]	@ (80031f4 <LoopForever+0xe>)
  movs r3, #0
 80031be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80031c0:	e002      	b.n	80031c8 <LoopCopyDataInit>

080031c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031c6:	3304      	adds	r3, #4

080031c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031cc:	d3f9      	bcc.n	80031c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ce:	4a0a      	ldr	r2, [pc, #40]	@ (80031f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031d0:	4c0a      	ldr	r4, [pc, #40]	@ (80031fc <LoopForever+0x16>)
  movs r3, #0
 80031d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031d4:	e001      	b.n	80031da <LoopFillZerobss>

080031d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031d8:	3204      	adds	r2, #4

080031da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031dc:	d3fb      	bcc.n	80031d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031de:	f006 fc1d 	bl	8009a1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031e2:	f7ff fb73 	bl	80028cc <main>

080031e6 <LoopForever>:

LoopForever:
    b LoopForever
 80031e6:	e7fe      	b.n	80031e6 <LoopForever>
  ldr   r0, =_estack
 80031e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031f0:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80031f4:	0800d620 	.word	0x0800d620
  ldr r2, =_sbss
 80031f8:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80031fc:	200008f4 	.word	0x200008f4

08003200 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003200:	e7fe      	b.n	8003200 <ADC1_2_IRQHandler>

08003202 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800320c:	2003      	movs	r0, #3
 800320e:	f000 f8ca 	bl	80033a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003212:	200f      	movs	r0, #15
 8003214:	f7ff fe4e 	bl	8002eb4 <HAL_InitTick>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	71fb      	strb	r3, [r7, #7]
 8003222:	e001      	b.n	8003228 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003224:	f7ff fc1a 	bl	8002a5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003228:	79fb      	ldrb	r3, [r7, #7]

}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return uwTick;
 8003238:	4b03      	ldr	r3, [pc, #12]	@ (8003248 <HAL_GetTick+0x14>)
 800323a:	681b      	ldr	r3, [r3, #0]
 }
 800323c:	4618      	mov	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	20000718 	.word	0x20000718

0800324c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800325c:	4b0c      	ldr	r3, [pc, #48]	@ (8003290 <__NVIC_SetPriorityGrouping+0x44>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003268:	4013      	ands	r3, r2
 800326a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003274:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800327c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800327e:	4a04      	ldr	r2, [pc, #16]	@ (8003290 <__NVIC_SetPriorityGrouping+0x44>)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	60d3      	str	r3, [r2, #12]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003298:	4b04      	ldr	r3, [pc, #16]	@ (80032ac <__NVIC_GetPriorityGrouping+0x18>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	0a1b      	lsrs	r3, r3, #8
 800329e:	f003 0307 	and.w	r3, r3, #7
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	db0b      	blt.n	80032da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	f003 021f 	and.w	r2, r3, #31
 80032c8:	4907      	ldr	r1, [pc, #28]	@ (80032e8 <__NVIC_EnableIRQ+0x38>)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	2001      	movs	r0, #1
 80032d2:	fa00 f202 	lsl.w	r2, r0, r2
 80032d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	e000e100 	.word	0xe000e100

080032ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	6039      	str	r1, [r7, #0]
 80032f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	db0a      	blt.n	8003316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	b2da      	uxtb	r2, r3
 8003304:	490c      	ldr	r1, [pc, #48]	@ (8003338 <__NVIC_SetPriority+0x4c>)
 8003306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330a:	0112      	lsls	r2, r2, #4
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	440b      	add	r3, r1
 8003310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003314:	e00a      	b.n	800332c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	4908      	ldr	r1, [pc, #32]	@ (800333c <__NVIC_SetPriority+0x50>)
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	3b04      	subs	r3, #4
 8003324:	0112      	lsls	r2, r2, #4
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	440b      	add	r3, r1
 800332a:	761a      	strb	r2, [r3, #24]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000e100 	.word	0xe000e100
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003340:	b480      	push	{r7}
 8003342:	b089      	sub	sp, #36	@ 0x24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f1c3 0307 	rsb	r3, r3, #7
 800335a:	2b04      	cmp	r3, #4
 800335c:	bf28      	it	cs
 800335e:	2304      	movcs	r3, #4
 8003360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	3304      	adds	r3, #4
 8003366:	2b06      	cmp	r3, #6
 8003368:	d902      	bls.n	8003370 <NVIC_EncodePriority+0x30>
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3b03      	subs	r3, #3
 800336e:	e000      	b.n	8003372 <NVIC_EncodePriority+0x32>
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003374:	f04f 32ff 	mov.w	r2, #4294967295
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43da      	mvns	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	401a      	ands	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003388:	f04f 31ff 	mov.w	r1, #4294967295
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	43d9      	mvns	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003398:	4313      	orrs	r3, r2
         );
}
 800339a:	4618      	mov	r0, r3
 800339c:	3724      	adds	r7, #36	@ 0x24
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff ff4c 	bl	800324c <__NVIC_SetPriorityGrouping>
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033ca:	f7ff ff63 	bl	8003294 <__NVIC_GetPriorityGrouping>
 80033ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	68b9      	ldr	r1, [r7, #8]
 80033d4:	6978      	ldr	r0, [r7, #20]
 80033d6:	f7ff ffb3 	bl	8003340 <NVIC_EncodePriority>
 80033da:	4602      	mov	r2, r0
 80033dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e0:	4611      	mov	r1, r2
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff ff82 	bl	80032ec <__NVIC_SetPriority>
}
 80033e8:	bf00      	nop
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff ff56 	bl	80032b0 <__NVIC_EnableIRQ>
}
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d005      	beq.n	8003430 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2204      	movs	r2, #4
 8003428:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	73fb      	strb	r3, [r7, #15]
 800342e:	e037      	b.n	80034a0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 020e 	bic.w	r2, r2, #14
 800343e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800344a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800344e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0201 	bic.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003464:	f003 021f 	and.w	r2, r3, #31
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346c:	2101      	movs	r1, #1
 800346e:	fa01 f202 	lsl.w	r2, r1, r2
 8003472:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800347c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00c      	beq.n	80034a0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003490:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003494:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800349e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d00d      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2204      	movs	r2, #4
 80034da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
 80034f0:	e047      	b.n	8003582 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 020e 	bic.w	r2, r2, #14
 8003500:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0201 	bic.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800351c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003520:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003526:	f003 021f 	and.w	r2, r3, #31
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	2101      	movs	r1, #1
 8003530:	fa01 f202 	lsl.w	r2, r1, r2
 8003534:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800353e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00c      	beq.n	8003562 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003552:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003556:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003560:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	4798      	blx	r3
    }
  }
  return status;
 8003582:	7bfb      	ldrb	r3, [r7, #15]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800359a:	e15a      	b.n	8003852 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	2101      	movs	r1, #1
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	fa01 f303 	lsl.w	r3, r1, r3
 80035a8:	4013      	ands	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 814c 	beq.w	800384c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d005      	beq.n	80035cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d130      	bne.n	800362e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	2203      	movs	r2, #3
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4013      	ands	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003602:	2201      	movs	r2, #1
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4013      	ands	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	091b      	lsrs	r3, r3, #4
 8003618:	f003 0201 	and.w	r2, r3, #1
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	2b03      	cmp	r3, #3
 8003638:	d017      	beq.n	800366a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	2203      	movs	r2, #3
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4013      	ands	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d123      	bne.n	80036be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	08da      	lsrs	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3208      	adds	r2, #8
 800367e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003682:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	220f      	movs	r2, #15
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43db      	mvns	r3, r3
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4013      	ands	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	08da      	lsrs	r2, r3, #3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3208      	adds	r2, #8
 80036b8:	6939      	ldr	r1, [r7, #16]
 80036ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	2203      	movs	r2, #3
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4013      	ands	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 0203 	and.w	r2, r3, #3
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 80a6 	beq.w	800384c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003700:	4b5b      	ldr	r3, [pc, #364]	@ (8003870 <HAL_GPIO_Init+0x2e4>)
 8003702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003704:	4a5a      	ldr	r2, [pc, #360]	@ (8003870 <HAL_GPIO_Init+0x2e4>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	6613      	str	r3, [r2, #96]	@ 0x60
 800370c:	4b58      	ldr	r3, [pc, #352]	@ (8003870 <HAL_GPIO_Init+0x2e4>)
 800370e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003718:	4a56      	ldr	r2, [pc, #344]	@ (8003874 <HAL_GPIO_Init+0x2e8>)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	3302      	adds	r3, #2
 8003720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003724:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	220f      	movs	r2, #15
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4013      	ands	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003742:	d01f      	beq.n	8003784 <HAL_GPIO_Init+0x1f8>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a4c      	ldr	r2, [pc, #304]	@ (8003878 <HAL_GPIO_Init+0x2ec>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d019      	beq.n	8003780 <HAL_GPIO_Init+0x1f4>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a4b      	ldr	r2, [pc, #300]	@ (800387c <HAL_GPIO_Init+0x2f0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d013      	beq.n	800377c <HAL_GPIO_Init+0x1f0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a4a      	ldr	r2, [pc, #296]	@ (8003880 <HAL_GPIO_Init+0x2f4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00d      	beq.n	8003778 <HAL_GPIO_Init+0x1ec>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a49      	ldr	r2, [pc, #292]	@ (8003884 <HAL_GPIO_Init+0x2f8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d007      	beq.n	8003774 <HAL_GPIO_Init+0x1e8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a48      	ldr	r2, [pc, #288]	@ (8003888 <HAL_GPIO_Init+0x2fc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d101      	bne.n	8003770 <HAL_GPIO_Init+0x1e4>
 800376c:	2305      	movs	r3, #5
 800376e:	e00a      	b.n	8003786 <HAL_GPIO_Init+0x1fa>
 8003770:	2306      	movs	r3, #6
 8003772:	e008      	b.n	8003786 <HAL_GPIO_Init+0x1fa>
 8003774:	2304      	movs	r3, #4
 8003776:	e006      	b.n	8003786 <HAL_GPIO_Init+0x1fa>
 8003778:	2303      	movs	r3, #3
 800377a:	e004      	b.n	8003786 <HAL_GPIO_Init+0x1fa>
 800377c:	2302      	movs	r3, #2
 800377e:	e002      	b.n	8003786 <HAL_GPIO_Init+0x1fa>
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <HAL_GPIO_Init+0x1fa>
 8003784:	2300      	movs	r3, #0
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	f002 0203 	and.w	r2, r2, #3
 800378c:	0092      	lsls	r2, r2, #2
 800378e:	4093      	lsls	r3, r2
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003796:	4937      	ldr	r1, [pc, #220]	@ (8003874 <HAL_GPIO_Init+0x2e8>)
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	089b      	lsrs	r3, r3, #2
 800379c:	3302      	adds	r3, #2
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037a4:	4b39      	ldr	r3, [pc, #228]	@ (800388c <HAL_GPIO_Init+0x300>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037c8:	4a30      	ldr	r2, [pc, #192]	@ (800388c <HAL_GPIO_Init+0x300>)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037ce:	4b2f      	ldr	r3, [pc, #188]	@ (800388c <HAL_GPIO_Init+0x300>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4013      	ands	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037f2:	4a26      	ldr	r2, [pc, #152]	@ (800388c <HAL_GPIO_Init+0x300>)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80037f8:	4b24      	ldr	r3, [pc, #144]	@ (800388c <HAL_GPIO_Init+0x300>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	43db      	mvns	r3, r3
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4013      	ands	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800381c:	4a1b      	ldr	r2, [pc, #108]	@ (800388c <HAL_GPIO_Init+0x300>)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003822:	4b1a      	ldr	r3, [pc, #104]	@ (800388c <HAL_GPIO_Init+0x300>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	43db      	mvns	r3, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003846:	4a11      	ldr	r2, [pc, #68]	@ (800388c <HAL_GPIO_Init+0x300>)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	3301      	adds	r3, #1
 8003850:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	f47f ae9d 	bne.w	800359c <HAL_GPIO_Init+0x10>
  }
}
 8003862:	bf00      	nop
 8003864:	bf00      	nop
 8003866:	371c      	adds	r7, #28
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	40021000 	.word	0x40021000
 8003874:	40010000 	.word	0x40010000
 8003878:	48000400 	.word	0x48000400
 800387c:	48000800 	.word	0x48000800
 8003880:	48000c00 	.word	0x48000c00
 8003884:	48001000 	.word	0x48001000
 8003888:	48001400 	.word	0x48001400
 800388c:	40010400 	.word	0x40010400

08003890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	807b      	strh	r3, [r7, #2]
 800389c:	4613      	mov	r3, r2
 800389e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038a0:	787b      	ldrb	r3, [r7, #1]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038a6:	887a      	ldrh	r2, [r7, #2]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038ac:	e002      	b.n	80038b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038ae:	887a      	ldrh	r2, [r7, #2]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d141      	bne.n	8003952 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038ce:	4b4b      	ldr	r3, [pc, #300]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038da:	d131      	bne.n	8003940 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038dc:	4b47      	ldr	r3, [pc, #284]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038e2:	4a46      	ldr	r2, [pc, #280]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038ec:	4b43      	ldr	r3, [pc, #268]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038f4:	4a41      	ldr	r2, [pc, #260]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038fc:	4b40      	ldr	r3, [pc, #256]	@ (8003a00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2232      	movs	r2, #50	@ 0x32
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	4a3f      	ldr	r2, [pc, #252]	@ (8003a04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	0c9b      	lsrs	r3, r3, #18
 800390e:	3301      	adds	r3, #1
 8003910:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003912:	e002      	b.n	800391a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3b01      	subs	r3, #1
 8003918:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800391a:	4b38      	ldr	r3, [pc, #224]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003926:	d102      	bne.n	800392e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f2      	bne.n	8003914 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800392e:	4b33      	ldr	r3, [pc, #204]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800393a:	d158      	bne.n	80039ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e057      	b.n	80039f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003940:	4b2e      	ldr	r3, [pc, #184]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003946:	4a2d      	ldr	r2, [pc, #180]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800394c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003950:	e04d      	b.n	80039ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003958:	d141      	bne.n	80039de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800395a:	4b28      	ldr	r3, [pc, #160]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003966:	d131      	bne.n	80039cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003968:	4b24      	ldr	r3, [pc, #144]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800396a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800396e:	4a23      	ldr	r2, [pc, #140]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003974:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003978:	4b20      	ldr	r3, [pc, #128]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003980:	4a1e      	ldr	r2, [pc, #120]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003982:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003986:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003988:	4b1d      	ldr	r3, [pc, #116]	@ (8003a00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2232      	movs	r2, #50	@ 0x32
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	4a1c      	ldr	r2, [pc, #112]	@ (8003a04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	0c9b      	lsrs	r3, r3, #18
 800399a:	3301      	adds	r3, #1
 800399c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800399e:	e002      	b.n	80039a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039a6:	4b15      	ldr	r3, [pc, #84]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039b2:	d102      	bne.n	80039ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f2      	bne.n	80039a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039ba:	4b10      	ldr	r3, [pc, #64]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039c6:	d112      	bne.n	80039ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e011      	b.n	80039f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039cc:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039d2:	4a0a      	ldr	r2, [pc, #40]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80039dc:	e007      	b.n	80039ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039de:	4b07      	ldr	r3, [pc, #28]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039e6:	4a05      	ldr	r2, [pc, #20]	@ (80039fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	40007000 	.word	0x40007000
 8003a00:	20000000 	.word	0x20000000
 8003a04:	431bde83 	.word	0x431bde83

08003a08 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003a0c:	4b05      	ldr	r3, [pc, #20]	@ (8003a24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	4a04      	ldr	r2, [pc, #16]	@ (8003a24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a16:	6093      	str	r3, [r2, #8]
}
 8003a18:	bf00      	nop
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40007000 	.word	0x40007000

08003a28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e2fe      	b.n	8004038 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d075      	beq.n	8003b32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a46:	4b97      	ldr	r3, [pc, #604]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a50:	4b94      	ldr	r3, [pc, #592]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	2b0c      	cmp	r3, #12
 8003a5e:	d102      	bne.n	8003a66 <HAL_RCC_OscConfig+0x3e>
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	d002      	beq.n	8003a6c <HAL_RCC_OscConfig+0x44>
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d10b      	bne.n	8003a84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6c:	4b8d      	ldr	r3, [pc, #564]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d05b      	beq.n	8003b30 <HAL_RCC_OscConfig+0x108>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d157      	bne.n	8003b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e2d9      	b.n	8004038 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a8c:	d106      	bne.n	8003a9c <HAL_RCC_OscConfig+0x74>
 8003a8e:	4b85      	ldr	r3, [pc, #532]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a84      	ldr	r2, [pc, #528]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	e01d      	b.n	8003ad8 <HAL_RCC_OscConfig+0xb0>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x98>
 8003aa6:	4b7f      	ldr	r3, [pc, #508]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a7e      	ldr	r2, [pc, #504]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a7b      	ldr	r2, [pc, #492]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e00b      	b.n	8003ad8 <HAL_RCC_OscConfig+0xb0>
 8003ac0:	4b78      	ldr	r3, [pc, #480]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a77      	ldr	r2, [pc, #476]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	4b75      	ldr	r3, [pc, #468]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a74      	ldr	r2, [pc, #464]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d013      	beq.n	8003b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae0:	f7ff fba8 	bl	8003234 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae8:	f7ff fba4 	bl	8003234 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b64      	cmp	r3, #100	@ 0x64
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e29e      	b.n	8004038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003afa:	4b6a      	ldr	r3, [pc, #424]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0xc0>
 8003b06:	e014      	b.n	8003b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7ff fb94 	bl	8003234 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b10:	f7ff fb90 	bl	8003234 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b64      	cmp	r3, #100	@ 0x64
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e28a      	b.n	8004038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b22:	4b60      	ldr	r3, [pc, #384]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0xe8>
 8003b2e:	e000      	b.n	8003b32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d075      	beq.n	8003c2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b3e:	4b59      	ldr	r3, [pc, #356]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b48:	4b56      	ldr	r3, [pc, #344]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0303 	and.w	r3, r3, #3
 8003b50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2b0c      	cmp	r3, #12
 8003b56:	d102      	bne.n	8003b5e <HAL_RCC_OscConfig+0x136>
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d002      	beq.n	8003b64 <HAL_RCC_OscConfig+0x13c>
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d11f      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b64:	4b4f      	ldr	r3, [pc, #316]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_RCC_OscConfig+0x154>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e25d      	b.n	8004038 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7c:	4b49      	ldr	r3, [pc, #292]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	061b      	lsls	r3, r3, #24
 8003b8a:	4946      	ldr	r1, [pc, #280]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b90:	4b45      	ldr	r3, [pc, #276]	@ (8003ca8 <HAL_RCC_OscConfig+0x280>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff f98d 	bl	8002eb4 <HAL_InitTick>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d043      	beq.n	8003c28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e249      	b.n	8004038 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d023      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bac:	4b3d      	ldr	r3, [pc, #244]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a3c      	ldr	r2, [pc, #240]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb8:	f7ff fb3c 	bl	8003234 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc0:	f7ff fb38 	bl	8003234 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e232      	b.n	8004038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bd2:	4b34      	ldr	r3, [pc, #208]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f0      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bde:	4b31      	ldr	r3, [pc, #196]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	061b      	lsls	r3, r3, #24
 8003bec:	492d      	ldr	r1, [pc, #180]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	604b      	str	r3, [r1, #4]
 8003bf2:	e01a      	b.n	8003c2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a2a      	ldr	r2, [pc, #168]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003bfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7ff fb18 	bl	8003234 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c08:	f7ff fb14 	bl	8003234 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e20e      	b.n	8004038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c1a:	4b22      	ldr	r3, [pc, #136]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0x1e0>
 8003c26:	e000      	b.n	8003c2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d041      	beq.n	8003cba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d01c      	beq.n	8003c78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c3e:	4b19      	ldr	r3, [pc, #100]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c44:	4a17      	ldr	r2, [pc, #92]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4e:	f7ff faf1 	bl	8003234 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c56:	f7ff faed 	bl	8003234 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e1e7      	b.n	8004038 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c68:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0ef      	beq.n	8003c56 <HAL_RCC_OscConfig+0x22e>
 8003c76:	e020      	b.n	8003cba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c78:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c7e:	4a09      	ldr	r2, [pc, #36]	@ (8003ca4 <HAL_RCC_OscConfig+0x27c>)
 8003c80:	f023 0301 	bic.w	r3, r3, #1
 8003c84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c88:	f7ff fad4 	bl	8003234 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c8e:	e00d      	b.n	8003cac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c90:	f7ff fad0 	bl	8003234 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d906      	bls.n	8003cac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e1ca      	b.n	8004038 <HAL_RCC_OscConfig+0x610>
 8003ca2:	bf00      	nop
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cac:	4b8c      	ldr	r3, [pc, #560]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1ea      	bne.n	8003c90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80a6 	beq.w	8003e14 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ccc:	4b84      	ldr	r3, [pc, #528]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_OscConfig+0x2b4>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <HAL_RCC_OscConfig+0x2b6>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00d      	beq.n	8003cfe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cee:	4b7c      	ldr	r3, [pc, #496]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cfe:	4b79      	ldr	r3, [pc, #484]	@ (8003ee4 <HAL_RCC_OscConfig+0x4bc>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d118      	bne.n	8003d3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d0a:	4b76      	ldr	r3, [pc, #472]	@ (8003ee4 <HAL_RCC_OscConfig+0x4bc>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a75      	ldr	r2, [pc, #468]	@ (8003ee4 <HAL_RCC_OscConfig+0x4bc>)
 8003d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d16:	f7ff fa8d 	bl	8003234 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1e:	f7ff fa89 	bl	8003234 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e183      	b.n	8004038 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d30:	4b6c      	ldr	r3, [pc, #432]	@ (8003ee4 <HAL_RCC_OscConfig+0x4bc>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d108      	bne.n	8003d56 <HAL_RCC_OscConfig+0x32e>
 8003d44:	4b66      	ldr	r3, [pc, #408]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d4a:	4a65      	ldr	r2, [pc, #404]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d54:	e024      	b.n	8003da0 <HAL_RCC_OscConfig+0x378>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	2b05      	cmp	r3, #5
 8003d5c:	d110      	bne.n	8003d80 <HAL_RCC_OscConfig+0x358>
 8003d5e:	4b60      	ldr	r3, [pc, #384]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d64:	4a5e      	ldr	r2, [pc, #376]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003d66:	f043 0304 	orr.w	r3, r3, #4
 8003d6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d6e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d74:	4a5a      	ldr	r2, [pc, #360]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d7e:	e00f      	b.n	8003da0 <HAL_RCC_OscConfig+0x378>
 8003d80:	4b57      	ldr	r3, [pc, #348]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d86:	4a56      	ldr	r2, [pc, #344]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003d88:	f023 0301 	bic.w	r3, r3, #1
 8003d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d90:	4b53      	ldr	r3, [pc, #332]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d96:	4a52      	ldr	r2, [pc, #328]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003d98:	f023 0304 	bic.w	r3, r3, #4
 8003d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d016      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da8:	f7ff fa44 	bl	8003234 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dae:	e00a      	b.n	8003dc6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db0:	f7ff fa40 	bl	8003234 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e138      	b.n	8004038 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc6:	4b46      	ldr	r3, [pc, #280]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0ed      	beq.n	8003db0 <HAL_RCC_OscConfig+0x388>
 8003dd4:	e015      	b.n	8003e02 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd6:	f7ff fa2d 	bl	8003234 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ddc:	e00a      	b.n	8003df4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dde:	f7ff fa29 	bl	8003234 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e121      	b.n	8004038 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003df4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1ed      	bne.n	8003dde <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e02:	7ffb      	ldrb	r3, [r7, #31]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d105      	bne.n	8003e14 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e08:	4b35      	ldr	r3, [pc, #212]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0c:	4a34      	ldr	r2, [pc, #208]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003e0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e12:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d03c      	beq.n	8003e9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01c      	beq.n	8003e62 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e28:	4b2d      	ldr	r3, [pc, #180]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003e2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e2e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e38:	f7ff f9fc 	bl	8003234 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e40:	f7ff f9f8 	bl	8003234 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e0f2      	b.n	8004038 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e52:	4b23      	ldr	r3, [pc, #140]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003e54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0ef      	beq.n	8003e40 <HAL_RCC_OscConfig+0x418>
 8003e60:	e01b      	b.n	8003e9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e62:	4b1f      	ldr	r3, [pc, #124]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e68:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003e6a:	f023 0301 	bic.w	r3, r3, #1
 8003e6e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e72:	f7ff f9df 	bl	8003234 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e7a:	f7ff f9db 	bl	8003234 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e0d5      	b.n	8004038 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e8c:	4b14      	ldr	r3, [pc, #80]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1ef      	bne.n	8003e7a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 80c9 	beq.w	8004036 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 030c 	and.w	r3, r3, #12
 8003eac:	2b0c      	cmp	r3, #12
 8003eae:	f000 8083 	beq.w	8003fb8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d15e      	bne.n	8003f78 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eba:	4b09      	ldr	r3, [pc, #36]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a08      	ldr	r2, [pc, #32]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b8>)
 8003ec0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec6:	f7ff f9b5 	bl	8003234 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ecc:	e00c      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ece:	f7ff f9b1 	bl	8003234 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d905      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e0ab      	b.n	8004038 <HAL_RCC_OscConfig+0x610>
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee8:	4b55      	ldr	r3, [pc, #340]	@ (8004040 <HAL_RCC_OscConfig+0x618>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1ec      	bne.n	8003ece <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ef4:	4b52      	ldr	r3, [pc, #328]	@ (8004040 <HAL_RCC_OscConfig+0x618>)
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	4b52      	ldr	r3, [pc, #328]	@ (8004044 <HAL_RCC_OscConfig+0x61c>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6a11      	ldr	r1, [r2, #32]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f04:	3a01      	subs	r2, #1
 8003f06:	0112      	lsls	r2, r2, #4
 8003f08:	4311      	orrs	r1, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003f0e:	0212      	lsls	r2, r2, #8
 8003f10:	4311      	orrs	r1, r2
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003f16:	0852      	lsrs	r2, r2, #1
 8003f18:	3a01      	subs	r2, #1
 8003f1a:	0552      	lsls	r2, r2, #21
 8003f1c:	4311      	orrs	r1, r2
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f22:	0852      	lsrs	r2, r2, #1
 8003f24:	3a01      	subs	r2, #1
 8003f26:	0652      	lsls	r2, r2, #25
 8003f28:	4311      	orrs	r1, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f2e:	06d2      	lsls	r2, r2, #27
 8003f30:	430a      	orrs	r2, r1
 8003f32:	4943      	ldr	r1, [pc, #268]	@ (8004040 <HAL_RCC_OscConfig+0x618>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f38:	4b41      	ldr	r3, [pc, #260]	@ (8004040 <HAL_RCC_OscConfig+0x618>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a40      	ldr	r2, [pc, #256]	@ (8004040 <HAL_RCC_OscConfig+0x618>)
 8003f3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f42:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f44:	4b3e      	ldr	r3, [pc, #248]	@ (8004040 <HAL_RCC_OscConfig+0x618>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4a3d      	ldr	r2, [pc, #244]	@ (8004040 <HAL_RCC_OscConfig+0x618>)
 8003f4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7ff f970 	bl	8003234 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f58:	f7ff f96c 	bl	8003234 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e066      	b.n	8004038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f6a:	4b35      	ldr	r3, [pc, #212]	@ (8004040 <HAL_RCC_OscConfig+0x618>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0x530>
 8003f76:	e05e      	b.n	8004036 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f78:	4b31      	ldr	r3, [pc, #196]	@ (8004040 <HAL_RCC_OscConfig+0x618>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a30      	ldr	r2, [pc, #192]	@ (8004040 <HAL_RCC_OscConfig+0x618>)
 8003f7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7ff f956 	bl	8003234 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8c:	f7ff f952 	bl	8003234 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e04c      	b.n	8004038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f9e:	4b28      	ldr	r3, [pc, #160]	@ (8004040 <HAL_RCC_OscConfig+0x618>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003faa:	4b25      	ldr	r3, [pc, #148]	@ (8004040 <HAL_RCC_OscConfig+0x618>)
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	4924      	ldr	r1, [pc, #144]	@ (8004040 <HAL_RCC_OscConfig+0x618>)
 8003fb0:	4b25      	ldr	r3, [pc, #148]	@ (8004048 <HAL_RCC_OscConfig+0x620>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	60cb      	str	r3, [r1, #12]
 8003fb6:	e03e      	b.n	8004036 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e039      	b.n	8004038 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003fc4:	4b1e      	ldr	r3, [pc, #120]	@ (8004040 <HAL_RCC_OscConfig+0x618>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f003 0203 	and.w	r2, r3, #3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d12c      	bne.n	8004032 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d123      	bne.n	8004032 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d11b      	bne.n	8004032 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004004:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004006:	429a      	cmp	r2, r3
 8004008:	d113      	bne.n	8004032 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004014:	085b      	lsrs	r3, r3, #1
 8004016:	3b01      	subs	r3, #1
 8004018:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800401a:	429a      	cmp	r2, r3
 800401c:	d109      	bne.n	8004032 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004028:	085b      	lsrs	r3, r3, #1
 800402a:	3b01      	subs	r3, #1
 800402c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800402e:	429a      	cmp	r2, r3
 8004030:	d001      	beq.n	8004036 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3720      	adds	r7, #32
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40021000 	.word	0x40021000
 8004044:	019f800c 	.word	0x019f800c
 8004048:	feeefffc 	.word	0xfeeefffc

0800404c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e11e      	b.n	80042a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004064:	4b91      	ldr	r3, [pc, #580]	@ (80042ac <HAL_RCC_ClockConfig+0x260>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d910      	bls.n	8004094 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004072:	4b8e      	ldr	r3, [pc, #568]	@ (80042ac <HAL_RCC_ClockConfig+0x260>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f023 020f 	bic.w	r2, r3, #15
 800407a:	498c      	ldr	r1, [pc, #560]	@ (80042ac <HAL_RCC_ClockConfig+0x260>)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	4313      	orrs	r3, r2
 8004080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004082:	4b8a      	ldr	r3, [pc, #552]	@ (80042ac <HAL_RCC_ClockConfig+0x260>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e106      	b.n	80042a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d073      	beq.n	8004188 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d129      	bne.n	80040fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a8:	4b81      	ldr	r3, [pc, #516]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0f4      	b.n	80042a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80040b8:	f000 f9d0 	bl	800445c <RCC_GetSysClockFreqFromPLLSource>
 80040bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	4a7c      	ldr	r2, [pc, #496]	@ (80042b4 <HAL_RCC_ClockConfig+0x268>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d93f      	bls.n	8004146 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80040c6:	4b7a      	ldr	r3, [pc, #488]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d033      	beq.n	8004146 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d12f      	bne.n	8004146 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040e6:	4b72      	ldr	r3, [pc, #456]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040ee:	4a70      	ldr	r2, [pc, #448]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 80040f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80040f6:	2380      	movs	r3, #128	@ 0x80
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	e024      	b.n	8004146 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b02      	cmp	r3, #2
 8004102:	d107      	bne.n	8004114 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004104:	4b6a      	ldr	r3, [pc, #424]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d109      	bne.n	8004124 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0c6      	b.n	80042a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004114:	4b66      	ldr	r3, [pc, #408]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0be      	b.n	80042a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004124:	f000 f8ce 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 8004128:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	4a61      	ldr	r2, [pc, #388]	@ (80042b4 <HAL_RCC_ClockConfig+0x268>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d909      	bls.n	8004146 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004132:	4b5f      	ldr	r3, [pc, #380]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800413a:	4a5d      	ldr	r2, [pc, #372]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 800413c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004140:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004142:	2380      	movs	r3, #128	@ 0x80
 8004144:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004146:	4b5a      	ldr	r3, [pc, #360]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f023 0203 	bic.w	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	4957      	ldr	r1, [pc, #348]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 8004154:	4313      	orrs	r3, r2
 8004156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004158:	f7ff f86c 	bl	8003234 <HAL_GetTick>
 800415c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415e:	e00a      	b.n	8004176 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004160:	f7ff f868 	bl	8003234 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e095      	b.n	80042a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004176:	4b4e      	ldr	r3, [pc, #312]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 020c 	and.w	r2, r3, #12
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	429a      	cmp	r2, r3
 8004186:	d1eb      	bne.n	8004160 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d023      	beq.n	80041dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d005      	beq.n	80041ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041a0:	4b43      	ldr	r3, [pc, #268]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	4a42      	ldr	r2, [pc, #264]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 80041a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80041aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d007      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80041b8:	4b3d      	ldr	r3, [pc, #244]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80041c0:	4a3b      	ldr	r2, [pc, #236]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 80041c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80041c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c8:	4b39      	ldr	r3, [pc, #228]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	4936      	ldr	r1, [pc, #216]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
 80041da:	e008      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2b80      	cmp	r3, #128	@ 0x80
 80041e0:	d105      	bne.n	80041ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80041e2:	4b33      	ldr	r3, [pc, #204]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	4a32      	ldr	r2, [pc, #200]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 80041e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041ee:	4b2f      	ldr	r3, [pc, #188]	@ (80042ac <HAL_RCC_ClockConfig+0x260>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d21d      	bcs.n	8004238 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fc:	4b2b      	ldr	r3, [pc, #172]	@ (80042ac <HAL_RCC_ClockConfig+0x260>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f023 020f 	bic.w	r2, r3, #15
 8004204:	4929      	ldr	r1, [pc, #164]	@ (80042ac <HAL_RCC_ClockConfig+0x260>)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	4313      	orrs	r3, r2
 800420a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800420c:	f7ff f812 	bl	8003234 <HAL_GetTick>
 8004210:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004212:	e00a      	b.n	800422a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004214:	f7ff f80e 	bl	8003234 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e03b      	b.n	80042a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800422a:	4b20      	ldr	r3, [pc, #128]	@ (80042ac <HAL_RCC_ClockConfig+0x260>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d1ed      	bne.n	8004214 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004244:	4b1a      	ldr	r3, [pc, #104]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4917      	ldr	r1, [pc, #92]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 8004252:	4313      	orrs	r3, r2
 8004254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d009      	beq.n	8004276 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004262:	4b13      	ldr	r3, [pc, #76]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	490f      	ldr	r1, [pc, #60]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 8004272:	4313      	orrs	r3, r2
 8004274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004276:	f000 f825 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 800427a:	4602      	mov	r2, r0
 800427c:	4b0c      	ldr	r3, [pc, #48]	@ (80042b0 <HAL_RCC_ClockConfig+0x264>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	091b      	lsrs	r3, r3, #4
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	490c      	ldr	r1, [pc, #48]	@ (80042b8 <HAL_RCC_ClockConfig+0x26c>)
 8004288:	5ccb      	ldrb	r3, [r1, r3]
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	fa22 f303 	lsr.w	r3, r2, r3
 8004292:	4a0a      	ldr	r2, [pc, #40]	@ (80042bc <HAL_RCC_ClockConfig+0x270>)
 8004294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004296:	4b0a      	ldr	r3, [pc, #40]	@ (80042c0 <HAL_RCC_ClockConfig+0x274>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fe fe0a 	bl	8002eb4 <HAL_InitTick>
 80042a0:	4603      	mov	r3, r0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40022000 	.word	0x40022000
 80042b0:	40021000 	.word	0x40021000
 80042b4:	04c4b400 	.word	0x04c4b400
 80042b8:	0800d1a4 	.word	0x0800d1a4
 80042bc:	20000000 	.word	0x20000000
 80042c0:	20000004 	.word	0x20000004

080042c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80042ca:	4b2c      	ldr	r3, [pc, #176]	@ (800437c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d102      	bne.n	80042dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004380 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	e047      	b.n	800436c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80042dc:	4b27      	ldr	r3, [pc, #156]	@ (800437c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 030c 	and.w	r3, r3, #12
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d102      	bne.n	80042ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042e8:	4b26      	ldr	r3, [pc, #152]	@ (8004384 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042ea:	613b      	str	r3, [r7, #16]
 80042ec:	e03e      	b.n	800436c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80042ee:	4b23      	ldr	r3, [pc, #140]	@ (800437c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	2b0c      	cmp	r3, #12
 80042f8:	d136      	bne.n	8004368 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042fa:	4b20      	ldr	r3, [pc, #128]	@ (800437c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004304:	4b1d      	ldr	r3, [pc, #116]	@ (800437c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	091b      	lsrs	r3, r3, #4
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	3301      	adds	r3, #1
 8004310:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b03      	cmp	r3, #3
 8004316:	d10c      	bne.n	8004332 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004318:	4a1a      	ldr	r2, [pc, #104]	@ (8004384 <HAL_RCC_GetSysClockFreq+0xc0>)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004320:	4a16      	ldr	r2, [pc, #88]	@ (800437c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004322:	68d2      	ldr	r2, [r2, #12]
 8004324:	0a12      	lsrs	r2, r2, #8
 8004326:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800432a:	fb02 f303 	mul.w	r3, r2, r3
 800432e:	617b      	str	r3, [r7, #20]
      break;
 8004330:	e00c      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004332:	4a13      	ldr	r2, [pc, #76]	@ (8004380 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	fbb2 f3f3 	udiv	r3, r2, r3
 800433a:	4a10      	ldr	r2, [pc, #64]	@ (800437c <HAL_RCC_GetSysClockFreq+0xb8>)
 800433c:	68d2      	ldr	r2, [r2, #12]
 800433e:	0a12      	lsrs	r2, r2, #8
 8004340:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004344:	fb02 f303 	mul.w	r3, r2, r3
 8004348:	617b      	str	r3, [r7, #20]
      break;
 800434a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800434c:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <HAL_RCC_GetSysClockFreq+0xb8>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	0e5b      	lsrs	r3, r3, #25
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	3301      	adds	r3, #1
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	fbb2 f3f3 	udiv	r3, r2, r3
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	e001      	b.n	800436c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800436c:	693b      	ldr	r3, [r7, #16]
}
 800436e:	4618      	mov	r0, r3
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40021000 	.word	0x40021000
 8004380:	00f42400 	.word	0x00f42400
 8004384:	016e3600 	.word	0x016e3600

08004388 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800438c:	4b03      	ldr	r3, [pc, #12]	@ (800439c <HAL_RCC_GetHCLKFreq+0x14>)
 800438e:	681b      	ldr	r3, [r3, #0]
}
 8004390:	4618      	mov	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	20000000 	.word	0x20000000

080043a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043a4:	f7ff fff0 	bl	8004388 <HAL_RCC_GetHCLKFreq>
 80043a8:	4602      	mov	r2, r0
 80043aa:	4b06      	ldr	r3, [pc, #24]	@ (80043c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	0a1b      	lsrs	r3, r3, #8
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	4904      	ldr	r1, [pc, #16]	@ (80043c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043b6:	5ccb      	ldrb	r3, [r1, r3]
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40021000 	.word	0x40021000
 80043c8:	0800d1b4 	.word	0x0800d1b4

080043cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043d0:	f7ff ffda 	bl	8004388 <HAL_RCC_GetHCLKFreq>
 80043d4:	4602      	mov	r2, r0
 80043d6:	4b06      	ldr	r3, [pc, #24]	@ (80043f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	0adb      	lsrs	r3, r3, #11
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	4904      	ldr	r1, [pc, #16]	@ (80043f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043e2:	5ccb      	ldrb	r3, [r1, r3]
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40021000 	.word	0x40021000
 80043f4:	0800d1b4 	.word	0x0800d1b4

080043f8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	220f      	movs	r2, #15
 8004406:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004408:	4b12      	ldr	r3, [pc, #72]	@ (8004454 <HAL_RCC_GetClockConfig+0x5c>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 0203 	and.w	r2, r3, #3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004414:	4b0f      	ldr	r3, [pc, #60]	@ (8004454 <HAL_RCC_GetClockConfig+0x5c>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004420:	4b0c      	ldr	r3, [pc, #48]	@ (8004454 <HAL_RCC_GetClockConfig+0x5c>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800442c:	4b09      	ldr	r3, [pc, #36]	@ (8004454 <HAL_RCC_GetClockConfig+0x5c>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	08db      	lsrs	r3, r3, #3
 8004432:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800443a:	4b07      	ldr	r3, [pc, #28]	@ (8004458 <HAL_RCC_GetClockConfig+0x60>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 020f 	and.w	r2, r3, #15
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	601a      	str	r2, [r3, #0]
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000
 8004458:	40022000 	.word	0x40022000

0800445c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004462:	4b1e      	ldr	r3, [pc, #120]	@ (80044dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800446c:	4b1b      	ldr	r3, [pc, #108]	@ (80044dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	091b      	lsrs	r3, r3, #4
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	3301      	adds	r3, #1
 8004478:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b03      	cmp	r3, #3
 800447e:	d10c      	bne.n	800449a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004480:	4a17      	ldr	r2, [pc, #92]	@ (80044e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	fbb2 f3f3 	udiv	r3, r2, r3
 8004488:	4a14      	ldr	r2, [pc, #80]	@ (80044dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800448a:	68d2      	ldr	r2, [r2, #12]
 800448c:	0a12      	lsrs	r2, r2, #8
 800448e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004492:	fb02 f303 	mul.w	r3, r2, r3
 8004496:	617b      	str	r3, [r7, #20]
    break;
 8004498:	e00c      	b.n	80044b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800449a:	4a12      	ldr	r2, [pc, #72]	@ (80044e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a2:	4a0e      	ldr	r2, [pc, #56]	@ (80044dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044a4:	68d2      	ldr	r2, [r2, #12]
 80044a6:	0a12      	lsrs	r2, r2, #8
 80044a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044ac:	fb02 f303 	mul.w	r3, r2, r3
 80044b0:	617b      	str	r3, [r7, #20]
    break;
 80044b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044b4:	4b09      	ldr	r3, [pc, #36]	@ (80044dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	0e5b      	lsrs	r3, r3, #25
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	3301      	adds	r3, #1
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80044ce:	687b      	ldr	r3, [r7, #4]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	40021000 	.word	0x40021000
 80044e0:	016e3600 	.word	0x016e3600
 80044e4:	00f42400 	.word	0x00f42400

080044e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044f0:	2300      	movs	r3, #0
 80044f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044f4:	2300      	movs	r3, #0
 80044f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 8098 	beq.w	8004636 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004506:	2300      	movs	r3, #0
 8004508:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800450a:	4b43      	ldr	r3, [pc, #268]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800450c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800450e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10d      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004516:	4b40      	ldr	r3, [pc, #256]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451a:	4a3f      	ldr	r2, [pc, #252]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800451c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004520:	6593      	str	r3, [r2, #88]	@ 0x58
 8004522:	4b3d      	ldr	r3, [pc, #244]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800452a:	60bb      	str	r3, [r7, #8]
 800452c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800452e:	2301      	movs	r3, #1
 8004530:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004532:	4b3a      	ldr	r3, [pc, #232]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a39      	ldr	r2, [pc, #228]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800453c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800453e:	f7fe fe79 	bl	8003234 <HAL_GetTick>
 8004542:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004544:	e009      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004546:	f7fe fe75 	bl	8003234 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d902      	bls.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	74fb      	strb	r3, [r7, #19]
        break;
 8004558:	e005      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800455a:	4b30      	ldr	r3, [pc, #192]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0ef      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004566:	7cfb      	ldrb	r3, [r7, #19]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d159      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800456c:	4b2a      	ldr	r3, [pc, #168]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800456e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004576:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d01e      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	429a      	cmp	r2, r3
 8004586:	d019      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004588:	4b23      	ldr	r3, [pc, #140]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800458a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800458e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004592:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004594:	4b20      	ldr	r3, [pc, #128]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800459a:	4a1f      	ldr	r2, [pc, #124]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800459c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045a4:	4b1c      	ldr	r3, [pc, #112]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045b4:	4a18      	ldr	r2, [pc, #96]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d016      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c6:	f7fe fe35 	bl	8003234 <HAL_GetTick>
 80045ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045cc:	e00b      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ce:	f7fe fe31 	bl	8003234 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045dc:	4293      	cmp	r3, r2
 80045de:	d902      	bls.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	74fb      	strb	r3, [r7, #19]
            break;
 80045e4:	e006      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0ec      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80045f4:	7cfb      	ldrb	r3, [r7, #19]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10b      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045fa:	4b07      	ldr	r3, [pc, #28]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004600:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004608:	4903      	ldr	r1, [pc, #12]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004610:	e008      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004612:	7cfb      	ldrb	r3, [r7, #19]
 8004614:	74bb      	strb	r3, [r7, #18]
 8004616:	e005      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004618:	40021000 	.word	0x40021000
 800461c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004620:	7cfb      	ldrb	r3, [r7, #19]
 8004622:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004624:	7c7b      	ldrb	r3, [r7, #17]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d105      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800462a:	4ba7      	ldr	r3, [pc, #668]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800462c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462e:	4aa6      	ldr	r2, [pc, #664]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004630:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004634:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004642:	4ba1      	ldr	r3, [pc, #644]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004648:	f023 0203 	bic.w	r2, r3, #3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	499d      	ldr	r1, [pc, #628]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004664:	4b98      	ldr	r3, [pc, #608]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800466a:	f023 020c 	bic.w	r2, r3, #12
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	4995      	ldr	r1, [pc, #596]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004686:	4b90      	ldr	r3, [pc, #576]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	498c      	ldr	r1, [pc, #560]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046a8:	4b87      	ldr	r3, [pc, #540]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	4984      	ldr	r1, [pc, #528]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0310 	and.w	r3, r3, #16
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046ca:	4b7f      	ldr	r3, [pc, #508]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	497b      	ldr	r1, [pc, #492]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046ec:	4b76      	ldr	r3, [pc, #472]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	4973      	ldr	r1, [pc, #460]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800470e:	4b6e      	ldr	r3, [pc, #440]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004714:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	496a      	ldr	r1, [pc, #424]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004730:	4b65      	ldr	r3, [pc, #404]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004736:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	4962      	ldr	r1, [pc, #392]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004752:	4b5d      	ldr	r3, [pc, #372]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004758:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	4959      	ldr	r1, [pc, #356]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004774:	4b54      	ldr	r3, [pc, #336]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004776:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800477a:	f023 0203 	bic.w	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004782:	4951      	ldr	r1, [pc, #324]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004796:	4b4c      	ldr	r3, [pc, #304]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a4:	4948      	ldr	r1, [pc, #288]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d015      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047b8:	4b43      	ldr	r3, [pc, #268]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c6:	4940      	ldr	r1, [pc, #256]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047d6:	d105      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047d8:	4b3b      	ldr	r3, [pc, #236]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	4a3a      	ldr	r2, [pc, #232]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d015      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047f0:	4b35      	ldr	r3, [pc, #212]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047fe:	4932      	ldr	r1, [pc, #200]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800480a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800480e:	d105      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004810:	4b2d      	ldr	r3, [pc, #180]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4a2c      	ldr	r2, [pc, #176]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004816:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800481a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d015      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004828:	4b27      	ldr	r3, [pc, #156]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004836:	4924      	ldr	r1, [pc, #144]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004842:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004846:	d105      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004848:	4b1f      	ldr	r3, [pc, #124]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4a1e      	ldr	r2, [pc, #120]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800484e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004852:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d015      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004860:	4b19      	ldr	r3, [pc, #100]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004866:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800486e:	4916      	ldr	r1, [pc, #88]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800487a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800487e:	d105      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004880:	4b11      	ldr	r3, [pc, #68]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	4a10      	ldr	r2, [pc, #64]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800488a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d019      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004898:	4b0b      	ldr	r3, [pc, #44]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	4908      	ldr	r1, [pc, #32]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048b6:	d109      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048b8:	4b03      	ldr	r3, [pc, #12]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	4a02      	ldr	r2, [pc, #8]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048c2:	60d3      	str	r3, [r2, #12]
 80048c4:	e002      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80048c6:	bf00      	nop
 80048c8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d015      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048d8:	4b29      	ldr	r3, [pc, #164]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e6:	4926      	ldr	r1, [pc, #152]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048f6:	d105      	bne.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80048f8:	4b21      	ldr	r3, [pc, #132]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	4a20      	ldr	r2, [pc, #128]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004902:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d015      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004910:	4b1b      	ldr	r3, [pc, #108]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004916:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800491e:	4918      	ldr	r1, [pc, #96]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800492a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800492e:	d105      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004930:	4b13      	ldr	r3, [pc, #76]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	4a12      	ldr	r2, [pc, #72]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800493a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d015      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004948:	4b0d      	ldr	r3, [pc, #52]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800494a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800494e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004956:	490a      	ldr	r1, [pc, #40]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004962:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004966:	d105      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004968:	4b05      	ldr	r3, [pc, #20]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4a04      	ldr	r2, [pc, #16]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800496e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004972:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004974:	7cbb      	ldrb	r3, [r7, #18]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40021000 	.word	0x40021000

08004984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e049      	b.n	8004a2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7fe f91a 	bl	8002be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3304      	adds	r3, #4
 80049c0:	4619      	mov	r1, r3
 80049c2:	4610      	mov	r0, r2
 80049c4:	f000 fef8 	bl	80057b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d001      	beq.n	8004a4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e054      	b.n	8004af6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0201 	orr.w	r2, r2, #1
 8004a62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a26      	ldr	r2, [pc, #152]	@ (8004b04 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d022      	beq.n	8004ab4 <HAL_TIM_Base_Start_IT+0x80>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a76:	d01d      	beq.n	8004ab4 <HAL_TIM_Base_Start_IT+0x80>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a22      	ldr	r2, [pc, #136]	@ (8004b08 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d018      	beq.n	8004ab4 <HAL_TIM_Base_Start_IT+0x80>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a21      	ldr	r2, [pc, #132]	@ (8004b0c <HAL_TIM_Base_Start_IT+0xd8>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d013      	beq.n	8004ab4 <HAL_TIM_Base_Start_IT+0x80>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1f      	ldr	r2, [pc, #124]	@ (8004b10 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00e      	beq.n	8004ab4 <HAL_TIM_Base_Start_IT+0x80>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004b14 <HAL_TIM_Base_Start_IT+0xe0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d009      	beq.n	8004ab4 <HAL_TIM_Base_Start_IT+0x80>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b18 <HAL_TIM_Base_Start_IT+0xe4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d004      	beq.n	8004ab4 <HAL_TIM_Base_Start_IT+0x80>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a1b      	ldr	r2, [pc, #108]	@ (8004b1c <HAL_TIM_Base_Start_IT+0xe8>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d115      	bne.n	8004ae0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	4b19      	ldr	r3, [pc, #100]	@ (8004b20 <HAL_TIM_Base_Start_IT+0xec>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2b06      	cmp	r3, #6
 8004ac4:	d015      	beq.n	8004af2 <HAL_TIM_Base_Start_IT+0xbe>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004acc:	d011      	beq.n	8004af2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0201 	orr.w	r2, r2, #1
 8004adc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ade:	e008      	b.n	8004af2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	e000      	b.n	8004af4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40012c00 	.word	0x40012c00
 8004b08:	40000400 	.word	0x40000400
 8004b0c:	40000800 	.word	0x40000800
 8004b10:	40000c00 	.word	0x40000c00
 8004b14:	40013400 	.word	0x40013400
 8004b18:	40014000 	.word	0x40014000
 8004b1c:	40015000 	.word	0x40015000
 8004b20:	00010007 	.word	0x00010007

08004b24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e049      	b.n	8004bca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f841 	bl	8004bd2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3304      	adds	r3, #4
 8004b60:	4619      	mov	r1, r3
 8004b62:	4610      	mov	r0, r2
 8004b64:	f000 fe28 	bl	80057b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d109      	bne.n	8004c0c <HAL_TIM_PWM_Start+0x24>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	bf14      	ite	ne
 8004c04:	2301      	movne	r3, #1
 8004c06:	2300      	moveq	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	e03c      	b.n	8004c86 <HAL_TIM_PWM_Start+0x9e>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d109      	bne.n	8004c26 <HAL_TIM_PWM_Start+0x3e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	bf14      	ite	ne
 8004c1e:	2301      	movne	r3, #1
 8004c20:	2300      	moveq	r3, #0
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	e02f      	b.n	8004c86 <HAL_TIM_PWM_Start+0x9e>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d109      	bne.n	8004c40 <HAL_TIM_PWM_Start+0x58>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	bf14      	ite	ne
 8004c38:	2301      	movne	r3, #1
 8004c3a:	2300      	moveq	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	e022      	b.n	8004c86 <HAL_TIM_PWM_Start+0x9e>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	2b0c      	cmp	r3, #12
 8004c44:	d109      	bne.n	8004c5a <HAL_TIM_PWM_Start+0x72>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	bf14      	ite	ne
 8004c52:	2301      	movne	r3, #1
 8004c54:	2300      	moveq	r3, #0
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	e015      	b.n	8004c86 <HAL_TIM_PWM_Start+0x9e>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b10      	cmp	r3, #16
 8004c5e:	d109      	bne.n	8004c74 <HAL_TIM_PWM_Start+0x8c>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	bf14      	ite	ne
 8004c6c:	2301      	movne	r3, #1
 8004c6e:	2300      	moveq	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	e008      	b.n	8004c86 <HAL_TIM_PWM_Start+0x9e>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	bf14      	ite	ne
 8004c80:	2301      	movne	r3, #1
 8004c82:	2300      	moveq	r3, #0
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e0a6      	b.n	8004ddc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d104      	bne.n	8004c9e <HAL_TIM_PWM_Start+0xb6>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c9c:	e023      	b.n	8004ce6 <HAL_TIM_PWM_Start+0xfe>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d104      	bne.n	8004cae <HAL_TIM_PWM_Start+0xc6>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cac:	e01b      	b.n	8004ce6 <HAL_TIM_PWM_Start+0xfe>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d104      	bne.n	8004cbe <HAL_TIM_PWM_Start+0xd6>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cbc:	e013      	b.n	8004ce6 <HAL_TIM_PWM_Start+0xfe>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b0c      	cmp	r3, #12
 8004cc2:	d104      	bne.n	8004cce <HAL_TIM_PWM_Start+0xe6>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ccc:	e00b      	b.n	8004ce6 <HAL_TIM_PWM_Start+0xfe>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b10      	cmp	r3, #16
 8004cd2:	d104      	bne.n	8004cde <HAL_TIM_PWM_Start+0xf6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cdc:	e003      	b.n	8004ce6 <HAL_TIM_PWM_Start+0xfe>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2201      	movs	r2, #1
 8004cec:	6839      	ldr	r1, [r7, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f001 f9dc 	bl	80060ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a3a      	ldr	r2, [pc, #232]	@ (8004de4 <HAL_TIM_PWM_Start+0x1fc>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d018      	beq.n	8004d30 <HAL_TIM_PWM_Start+0x148>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a39      	ldr	r2, [pc, #228]	@ (8004de8 <HAL_TIM_PWM_Start+0x200>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d013      	beq.n	8004d30 <HAL_TIM_PWM_Start+0x148>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a37      	ldr	r2, [pc, #220]	@ (8004dec <HAL_TIM_PWM_Start+0x204>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00e      	beq.n	8004d30 <HAL_TIM_PWM_Start+0x148>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a36      	ldr	r2, [pc, #216]	@ (8004df0 <HAL_TIM_PWM_Start+0x208>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d009      	beq.n	8004d30 <HAL_TIM_PWM_Start+0x148>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a34      	ldr	r2, [pc, #208]	@ (8004df4 <HAL_TIM_PWM_Start+0x20c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d004      	beq.n	8004d30 <HAL_TIM_PWM_Start+0x148>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a33      	ldr	r2, [pc, #204]	@ (8004df8 <HAL_TIM_PWM_Start+0x210>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d101      	bne.n	8004d34 <HAL_TIM_PWM_Start+0x14c>
 8004d30:	2301      	movs	r3, #1
 8004d32:	e000      	b.n	8004d36 <HAL_TIM_PWM_Start+0x14e>
 8004d34:	2300      	movs	r3, #0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d007      	beq.n	8004d4a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a25      	ldr	r2, [pc, #148]	@ (8004de4 <HAL_TIM_PWM_Start+0x1fc>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d022      	beq.n	8004d9a <HAL_TIM_PWM_Start+0x1b2>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d5c:	d01d      	beq.n	8004d9a <HAL_TIM_PWM_Start+0x1b2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a26      	ldr	r2, [pc, #152]	@ (8004dfc <HAL_TIM_PWM_Start+0x214>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d018      	beq.n	8004d9a <HAL_TIM_PWM_Start+0x1b2>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a24      	ldr	r2, [pc, #144]	@ (8004e00 <HAL_TIM_PWM_Start+0x218>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d013      	beq.n	8004d9a <HAL_TIM_PWM_Start+0x1b2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a23      	ldr	r2, [pc, #140]	@ (8004e04 <HAL_TIM_PWM_Start+0x21c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00e      	beq.n	8004d9a <HAL_TIM_PWM_Start+0x1b2>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a19      	ldr	r2, [pc, #100]	@ (8004de8 <HAL_TIM_PWM_Start+0x200>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d009      	beq.n	8004d9a <HAL_TIM_PWM_Start+0x1b2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a18      	ldr	r2, [pc, #96]	@ (8004dec <HAL_TIM_PWM_Start+0x204>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d004      	beq.n	8004d9a <HAL_TIM_PWM_Start+0x1b2>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a18      	ldr	r2, [pc, #96]	@ (8004df8 <HAL_TIM_PWM_Start+0x210>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d115      	bne.n	8004dc6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	4b19      	ldr	r3, [pc, #100]	@ (8004e08 <HAL_TIM_PWM_Start+0x220>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b06      	cmp	r3, #6
 8004daa:	d015      	beq.n	8004dd8 <HAL_TIM_PWM_Start+0x1f0>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004db2:	d011      	beq.n	8004dd8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc4:	e008      	b.n	8004dd8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0201 	orr.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	e000      	b.n	8004dda <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40012c00 	.word	0x40012c00
 8004de8:	40013400 	.word	0x40013400
 8004dec:	40014000 	.word	0x40014000
 8004df0:	40014400 	.word	0x40014400
 8004df4:	40014800 	.word	0x40014800
 8004df8:	40015000 	.word	0x40015000
 8004dfc:	40000400 	.word	0x40000400
 8004e00:	40000800 	.word	0x40000800
 8004e04:	40000c00 	.word	0x40000c00
 8004e08:	00010007 	.word	0x00010007

08004e0c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e097      	b.n	8004f50 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d106      	bne.n	8004e3a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7fd ff0f 	bl	8002c58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6812      	ldr	r2, [r2, #0]
 8004e4c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004e50:	f023 0307 	bic.w	r3, r3, #7
 8004e54:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4610      	mov	r0, r2
 8004e62:	f000 fca9 	bl	80057b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e8e:	f023 0303 	bic.w	r3, r3, #3
 8004e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004eac:	f023 030c 	bic.w	r3, r3, #12
 8004eb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004eb8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	011a      	lsls	r2, r3, #4
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	031b      	lsls	r3, r3, #12
 8004edc:	4313      	orrs	r3, r2
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004eea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004ef2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	4313      	orrs	r3, r2
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f80:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d110      	bne.n	8004faa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d102      	bne.n	8004f94 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f8e:	7b7b      	ldrb	r3, [r7, #13]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d001      	beq.n	8004f98 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e069      	b.n	800506c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fa8:	e031      	b.n	800500e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b04      	cmp	r3, #4
 8004fae:	d110      	bne.n	8004fd2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fb0:	7bbb      	ldrb	r3, [r7, #14]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d102      	bne.n	8004fbc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fb6:	7b3b      	ldrb	r3, [r7, #12]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d001      	beq.n	8004fc0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e055      	b.n	800506c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fd0:	e01d      	b.n	800500e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d108      	bne.n	8004fea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fd8:	7bbb      	ldrb	r3, [r7, #14]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d105      	bne.n	8004fea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fde:	7b7b      	ldrb	r3, [r7, #13]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d102      	bne.n	8004fea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fe4:	7b3b      	ldrb	r3, [r7, #12]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d001      	beq.n	8004fee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e03e      	b.n	800506c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2202      	movs	r2, #2
 8005002:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2202      	movs	r2, #2
 800500a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_TIM_Encoder_Start+0xc4>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b04      	cmp	r3, #4
 8005018:	d008      	beq.n	800502c <HAL_TIM_Encoder_Start+0xd4>
 800501a:	e00f      	b.n	800503c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2201      	movs	r2, #1
 8005022:	2100      	movs	r1, #0
 8005024:	4618      	mov	r0, r3
 8005026:	f001 f841 	bl	80060ac <TIM_CCxChannelCmd>
      break;
 800502a:	e016      	b.n	800505a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2201      	movs	r2, #1
 8005032:	2104      	movs	r1, #4
 8005034:	4618      	mov	r0, r3
 8005036:	f001 f839 	bl	80060ac <TIM_CCxChannelCmd>
      break;
 800503a:	e00e      	b.n	800505a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2201      	movs	r2, #1
 8005042:	2100      	movs	r1, #0
 8005044:	4618      	mov	r0, r3
 8005046:	f001 f831 	bl	80060ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2201      	movs	r2, #1
 8005050:	2104      	movs	r1, #4
 8005052:	4618      	mov	r0, r3
 8005054:	f001 f82a 	bl	80060ac <TIM_CCxChannelCmd>
      break;
 8005058:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0201 	orr.w	r2, r2, #1
 8005068:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d020      	beq.n	80050d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01b      	beq.n	80050d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0202 	mvn.w	r2, #2
 80050a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fb5c 	bl	800577c <HAL_TIM_IC_CaptureCallback>
 80050c4:	e005      	b.n	80050d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fb4e 	bl	8005768 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 fb5f 	bl	8005790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d020      	beq.n	8005124 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01b      	beq.n	8005124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0204 	mvn.w	r2, #4
 80050f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2202      	movs	r2, #2
 80050fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fb36 	bl	800577c <HAL_TIM_IC_CaptureCallback>
 8005110:	e005      	b.n	800511e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fb28 	bl	8005768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fb39 	bl	8005790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d020      	beq.n	8005170 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f003 0308 	and.w	r3, r3, #8
 8005134:	2b00      	cmp	r3, #0
 8005136:	d01b      	beq.n	8005170 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f06f 0208 	mvn.w	r2, #8
 8005140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2204      	movs	r2, #4
 8005146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fb10 	bl	800577c <HAL_TIM_IC_CaptureCallback>
 800515c:	e005      	b.n	800516a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fb02 	bl	8005768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 fb13 	bl	8005790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f003 0310 	and.w	r3, r3, #16
 8005176:	2b00      	cmp	r3, #0
 8005178:	d020      	beq.n	80051bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f003 0310 	and.w	r3, r3, #16
 8005180:	2b00      	cmp	r3, #0
 8005182:	d01b      	beq.n	80051bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f06f 0210 	mvn.w	r2, #16
 800518c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2208      	movs	r2, #8
 8005192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 faea 	bl	800577c <HAL_TIM_IC_CaptureCallback>
 80051a8:	e005      	b.n	80051b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fadc 	bl	8005768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 faed 	bl	8005790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00c      	beq.n	80051e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d007      	beq.n	80051e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0201 	mvn.w	r2, #1
 80051d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fd fc16 	bl	8002a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d104      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00c      	beq.n	800520e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d007      	beq.n	800520e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f001 f8a9 	bl	8006360 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00c      	beq.n	8005232 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800521e:	2b00      	cmp	r3, #0
 8005220:	d007      	beq.n	8005232 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800522a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f001 f8a1 	bl	8006374 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00c      	beq.n	8005256 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005242:	2b00      	cmp	r3, #0
 8005244:	d007      	beq.n	8005256 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800524e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 faa7 	bl	80057a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f003 0320 	and.w	r3, r3, #32
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00c      	beq.n	800527a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f003 0320 	and.w	r3, r3, #32
 8005266:	2b00      	cmp	r3, #0
 8005268:	d007      	beq.n	800527a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f06f 0220 	mvn.w	r2, #32
 8005272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f001 f869 	bl	800634c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00c      	beq.n	800529e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d007      	beq.n	800529e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f001 f875 	bl	8006388 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00c      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d007      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80052ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f001 f86d 	bl	800639c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00c      	beq.n	80052e6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d007      	beq.n	80052e6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80052de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f001 f865 	bl	80063b0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00c      	beq.n	800530a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d007      	beq.n	800530a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f001 f85d 	bl	80063c4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800530a:	bf00      	nop
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800532e:	2302      	movs	r3, #2
 8005330:	e0ff      	b.n	8005532 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b14      	cmp	r3, #20
 800533e:	f200 80f0 	bhi.w	8005522 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005342:	a201      	add	r2, pc, #4	@ (adr r2, 8005348 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005348:	0800539d 	.word	0x0800539d
 800534c:	08005523 	.word	0x08005523
 8005350:	08005523 	.word	0x08005523
 8005354:	08005523 	.word	0x08005523
 8005358:	080053dd 	.word	0x080053dd
 800535c:	08005523 	.word	0x08005523
 8005360:	08005523 	.word	0x08005523
 8005364:	08005523 	.word	0x08005523
 8005368:	0800541f 	.word	0x0800541f
 800536c:	08005523 	.word	0x08005523
 8005370:	08005523 	.word	0x08005523
 8005374:	08005523 	.word	0x08005523
 8005378:	0800545f 	.word	0x0800545f
 800537c:	08005523 	.word	0x08005523
 8005380:	08005523 	.word	0x08005523
 8005384:	08005523 	.word	0x08005523
 8005388:	080054a1 	.word	0x080054a1
 800538c:	08005523 	.word	0x08005523
 8005390:	08005523 	.word	0x08005523
 8005394:	08005523 	.word	0x08005523
 8005398:	080054e1 	.word	0x080054e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68b9      	ldr	r1, [r7, #8]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fabc 	bl	8005920 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699a      	ldr	r2, [r3, #24]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0208 	orr.w	r2, r2, #8
 80053b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0204 	bic.w	r2, r2, #4
 80053c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6999      	ldr	r1, [r3, #24]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	619a      	str	r2, [r3, #24]
      break;
 80053da:	e0a5      	b.n	8005528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fb36 	bl	8005a54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6999      	ldr	r1, [r3, #24]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	021a      	lsls	r2, r3, #8
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	619a      	str	r2, [r3, #24]
      break;
 800541c:	e084      	b.n	8005528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68b9      	ldr	r1, [r7, #8]
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fba9 	bl	8005b7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69da      	ldr	r2, [r3, #28]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f042 0208 	orr.w	r2, r2, #8
 8005438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69da      	ldr	r2, [r3, #28]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0204 	bic.w	r2, r2, #4
 8005448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69d9      	ldr	r1, [r3, #28]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	61da      	str	r2, [r3, #28]
      break;
 800545c:	e064      	b.n	8005528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68b9      	ldr	r1, [r7, #8]
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fc1b 	bl	8005ca0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69da      	ldr	r2, [r3, #28]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69da      	ldr	r2, [r3, #28]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69d9      	ldr	r1, [r3, #28]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	021a      	lsls	r2, r3, #8
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	61da      	str	r2, [r3, #28]
      break;
 800549e:	e043      	b.n	8005528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68b9      	ldr	r1, [r7, #8]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fc8e 	bl	8005dc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0208 	orr.w	r2, r2, #8
 80054ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0204 	bic.w	r2, r2, #4
 80054ca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	691a      	ldr	r2, [r3, #16]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80054de:	e023      	b.n	8005528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68b9      	ldr	r1, [r7, #8]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fcd8 	bl	8005e9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800550a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	021a      	lsls	r2, r3, #8
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005520:	e002      	b.n	8005528 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	75fb      	strb	r3, [r7, #23]
      break;
 8005526:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005530:	7dfb      	ldrb	r3, [r7, #23]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop

0800553c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <HAL_TIM_ConfigClockSource+0x1c>
 8005554:	2302      	movs	r3, #2
 8005556:	e0f6      	b.n	8005746 <HAL_TIM_ConfigClockSource+0x20a>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005576:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800557a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005582:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a6f      	ldr	r2, [pc, #444]	@ (8005750 <HAL_TIM_ConfigClockSource+0x214>)
 8005592:	4293      	cmp	r3, r2
 8005594:	f000 80c1 	beq.w	800571a <HAL_TIM_ConfigClockSource+0x1de>
 8005598:	4a6d      	ldr	r2, [pc, #436]	@ (8005750 <HAL_TIM_ConfigClockSource+0x214>)
 800559a:	4293      	cmp	r3, r2
 800559c:	f200 80c6 	bhi.w	800572c <HAL_TIM_ConfigClockSource+0x1f0>
 80055a0:	4a6c      	ldr	r2, [pc, #432]	@ (8005754 <HAL_TIM_ConfigClockSource+0x218>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	f000 80b9 	beq.w	800571a <HAL_TIM_ConfigClockSource+0x1de>
 80055a8:	4a6a      	ldr	r2, [pc, #424]	@ (8005754 <HAL_TIM_ConfigClockSource+0x218>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	f200 80be 	bhi.w	800572c <HAL_TIM_ConfigClockSource+0x1f0>
 80055b0:	4a69      	ldr	r2, [pc, #420]	@ (8005758 <HAL_TIM_ConfigClockSource+0x21c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	f000 80b1 	beq.w	800571a <HAL_TIM_ConfigClockSource+0x1de>
 80055b8:	4a67      	ldr	r2, [pc, #412]	@ (8005758 <HAL_TIM_ConfigClockSource+0x21c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	f200 80b6 	bhi.w	800572c <HAL_TIM_ConfigClockSource+0x1f0>
 80055c0:	4a66      	ldr	r2, [pc, #408]	@ (800575c <HAL_TIM_ConfigClockSource+0x220>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	f000 80a9 	beq.w	800571a <HAL_TIM_ConfigClockSource+0x1de>
 80055c8:	4a64      	ldr	r2, [pc, #400]	@ (800575c <HAL_TIM_ConfigClockSource+0x220>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	f200 80ae 	bhi.w	800572c <HAL_TIM_ConfigClockSource+0x1f0>
 80055d0:	4a63      	ldr	r2, [pc, #396]	@ (8005760 <HAL_TIM_ConfigClockSource+0x224>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	f000 80a1 	beq.w	800571a <HAL_TIM_ConfigClockSource+0x1de>
 80055d8:	4a61      	ldr	r2, [pc, #388]	@ (8005760 <HAL_TIM_ConfigClockSource+0x224>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	f200 80a6 	bhi.w	800572c <HAL_TIM_ConfigClockSource+0x1f0>
 80055e0:	4a60      	ldr	r2, [pc, #384]	@ (8005764 <HAL_TIM_ConfigClockSource+0x228>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	f000 8099 	beq.w	800571a <HAL_TIM_ConfigClockSource+0x1de>
 80055e8:	4a5e      	ldr	r2, [pc, #376]	@ (8005764 <HAL_TIM_ConfigClockSource+0x228>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	f200 809e 	bhi.w	800572c <HAL_TIM_ConfigClockSource+0x1f0>
 80055f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80055f4:	f000 8091 	beq.w	800571a <HAL_TIM_ConfigClockSource+0x1de>
 80055f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80055fc:	f200 8096 	bhi.w	800572c <HAL_TIM_ConfigClockSource+0x1f0>
 8005600:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005604:	f000 8089 	beq.w	800571a <HAL_TIM_ConfigClockSource+0x1de>
 8005608:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800560c:	f200 808e 	bhi.w	800572c <HAL_TIM_ConfigClockSource+0x1f0>
 8005610:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005614:	d03e      	beq.n	8005694 <HAL_TIM_ConfigClockSource+0x158>
 8005616:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800561a:	f200 8087 	bhi.w	800572c <HAL_TIM_ConfigClockSource+0x1f0>
 800561e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005622:	f000 8086 	beq.w	8005732 <HAL_TIM_ConfigClockSource+0x1f6>
 8005626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800562a:	d87f      	bhi.n	800572c <HAL_TIM_ConfigClockSource+0x1f0>
 800562c:	2b70      	cmp	r3, #112	@ 0x70
 800562e:	d01a      	beq.n	8005666 <HAL_TIM_ConfigClockSource+0x12a>
 8005630:	2b70      	cmp	r3, #112	@ 0x70
 8005632:	d87b      	bhi.n	800572c <HAL_TIM_ConfigClockSource+0x1f0>
 8005634:	2b60      	cmp	r3, #96	@ 0x60
 8005636:	d050      	beq.n	80056da <HAL_TIM_ConfigClockSource+0x19e>
 8005638:	2b60      	cmp	r3, #96	@ 0x60
 800563a:	d877      	bhi.n	800572c <HAL_TIM_ConfigClockSource+0x1f0>
 800563c:	2b50      	cmp	r3, #80	@ 0x50
 800563e:	d03c      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x17e>
 8005640:	2b50      	cmp	r3, #80	@ 0x50
 8005642:	d873      	bhi.n	800572c <HAL_TIM_ConfigClockSource+0x1f0>
 8005644:	2b40      	cmp	r3, #64	@ 0x40
 8005646:	d058      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x1be>
 8005648:	2b40      	cmp	r3, #64	@ 0x40
 800564a:	d86f      	bhi.n	800572c <HAL_TIM_ConfigClockSource+0x1f0>
 800564c:	2b30      	cmp	r3, #48	@ 0x30
 800564e:	d064      	beq.n	800571a <HAL_TIM_ConfigClockSource+0x1de>
 8005650:	2b30      	cmp	r3, #48	@ 0x30
 8005652:	d86b      	bhi.n	800572c <HAL_TIM_ConfigClockSource+0x1f0>
 8005654:	2b20      	cmp	r3, #32
 8005656:	d060      	beq.n	800571a <HAL_TIM_ConfigClockSource+0x1de>
 8005658:	2b20      	cmp	r3, #32
 800565a:	d867      	bhi.n	800572c <HAL_TIM_ConfigClockSource+0x1f0>
 800565c:	2b00      	cmp	r3, #0
 800565e:	d05c      	beq.n	800571a <HAL_TIM_ConfigClockSource+0x1de>
 8005660:	2b10      	cmp	r3, #16
 8005662:	d05a      	beq.n	800571a <HAL_TIM_ConfigClockSource+0x1de>
 8005664:	e062      	b.n	800572c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005676:	f000 fcf9 	bl	800606c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005688:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	609a      	str	r2, [r3, #8]
      break;
 8005692:	e04f      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056a4:	f000 fce2 	bl	800606c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056b6:	609a      	str	r2, [r3, #8]
      break;
 80056b8:	e03c      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c6:	461a      	mov	r2, r3
 80056c8:	f000 fc54 	bl	8005f74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2150      	movs	r1, #80	@ 0x50
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fcad 	bl	8006032 <TIM_ITRx_SetConfig>
      break;
 80056d8:	e02c      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056e6:	461a      	mov	r2, r3
 80056e8:	f000 fc73 	bl	8005fd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2160      	movs	r1, #96	@ 0x60
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fc9d 	bl	8006032 <TIM_ITRx_SetConfig>
      break;
 80056f8:	e01c      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005706:	461a      	mov	r2, r3
 8005708:	f000 fc34 	bl	8005f74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2140      	movs	r1, #64	@ 0x40
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fc8d 	bl	8006032 <TIM_ITRx_SetConfig>
      break;
 8005718:	e00c      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4619      	mov	r1, r3
 8005724:	4610      	mov	r0, r2
 8005726:	f000 fc84 	bl	8006032 <TIM_ITRx_SetConfig>
      break;
 800572a:	e003      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	73fb      	strb	r3, [r7, #15]
      break;
 8005730:	e000      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005732:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005744:	7bfb      	ldrb	r3, [r7, #15]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	00100070 	.word	0x00100070
 8005754:	00100060 	.word	0x00100060
 8005758:	00100050 	.word	0x00100050
 800575c:	00100040 	.word	0x00100040
 8005760:	00100030 	.word	0x00100030
 8005764:	00100020 	.word	0x00100020

08005768 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a4c      	ldr	r2, [pc, #304]	@ (80058fc <TIM_Base_SetConfig+0x144>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d017      	beq.n	8005800 <TIM_Base_SetConfig+0x48>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057d6:	d013      	beq.n	8005800 <TIM_Base_SetConfig+0x48>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a49      	ldr	r2, [pc, #292]	@ (8005900 <TIM_Base_SetConfig+0x148>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00f      	beq.n	8005800 <TIM_Base_SetConfig+0x48>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a48      	ldr	r2, [pc, #288]	@ (8005904 <TIM_Base_SetConfig+0x14c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d00b      	beq.n	8005800 <TIM_Base_SetConfig+0x48>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a47      	ldr	r2, [pc, #284]	@ (8005908 <TIM_Base_SetConfig+0x150>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d007      	beq.n	8005800 <TIM_Base_SetConfig+0x48>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a46      	ldr	r2, [pc, #280]	@ (800590c <TIM_Base_SetConfig+0x154>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d003      	beq.n	8005800 <TIM_Base_SetConfig+0x48>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a45      	ldr	r2, [pc, #276]	@ (8005910 <TIM_Base_SetConfig+0x158>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d108      	bne.n	8005812 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a39      	ldr	r2, [pc, #228]	@ (80058fc <TIM_Base_SetConfig+0x144>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d023      	beq.n	8005862 <TIM_Base_SetConfig+0xaa>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005820:	d01f      	beq.n	8005862 <TIM_Base_SetConfig+0xaa>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a36      	ldr	r2, [pc, #216]	@ (8005900 <TIM_Base_SetConfig+0x148>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d01b      	beq.n	8005862 <TIM_Base_SetConfig+0xaa>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a35      	ldr	r2, [pc, #212]	@ (8005904 <TIM_Base_SetConfig+0x14c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d017      	beq.n	8005862 <TIM_Base_SetConfig+0xaa>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a34      	ldr	r2, [pc, #208]	@ (8005908 <TIM_Base_SetConfig+0x150>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d013      	beq.n	8005862 <TIM_Base_SetConfig+0xaa>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a33      	ldr	r2, [pc, #204]	@ (800590c <TIM_Base_SetConfig+0x154>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00f      	beq.n	8005862 <TIM_Base_SetConfig+0xaa>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a33      	ldr	r2, [pc, #204]	@ (8005914 <TIM_Base_SetConfig+0x15c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d00b      	beq.n	8005862 <TIM_Base_SetConfig+0xaa>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a32      	ldr	r2, [pc, #200]	@ (8005918 <TIM_Base_SetConfig+0x160>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d007      	beq.n	8005862 <TIM_Base_SetConfig+0xaa>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a31      	ldr	r2, [pc, #196]	@ (800591c <TIM_Base_SetConfig+0x164>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d003      	beq.n	8005862 <TIM_Base_SetConfig+0xaa>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a2c      	ldr	r2, [pc, #176]	@ (8005910 <TIM_Base_SetConfig+0x158>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d108      	bne.n	8005874 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4313      	orrs	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a18      	ldr	r2, [pc, #96]	@ (80058fc <TIM_Base_SetConfig+0x144>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d013      	beq.n	80058c8 <TIM_Base_SetConfig+0x110>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a1a      	ldr	r2, [pc, #104]	@ (800590c <TIM_Base_SetConfig+0x154>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d00f      	beq.n	80058c8 <TIM_Base_SetConfig+0x110>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005914 <TIM_Base_SetConfig+0x15c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d00b      	beq.n	80058c8 <TIM_Base_SetConfig+0x110>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a19      	ldr	r2, [pc, #100]	@ (8005918 <TIM_Base_SetConfig+0x160>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d007      	beq.n	80058c8 <TIM_Base_SetConfig+0x110>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a18      	ldr	r2, [pc, #96]	@ (800591c <TIM_Base_SetConfig+0x164>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d003      	beq.n	80058c8 <TIM_Base_SetConfig+0x110>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a13      	ldr	r2, [pc, #76]	@ (8005910 <TIM_Base_SetConfig+0x158>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d103      	bne.n	80058d0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	691a      	ldr	r2, [r3, #16]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d105      	bne.n	80058ee <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f023 0201 	bic.w	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	611a      	str	r2, [r3, #16]
  }
}
 80058ee:	bf00      	nop
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40012c00 	.word	0x40012c00
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800
 8005908:	40000c00 	.word	0x40000c00
 800590c:	40013400 	.word	0x40013400
 8005910:	40015000 	.word	0x40015000
 8005914:	40014000 	.word	0x40014000
 8005918:	40014400 	.word	0x40014400
 800591c:	40014800 	.word	0x40014800

08005920 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	f023 0201 	bic.w	r2, r3, #1
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800594e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0303 	bic.w	r3, r3, #3
 800595a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f023 0302 	bic.w	r3, r3, #2
 800596c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a30      	ldr	r2, [pc, #192]	@ (8005a3c <TIM_OC1_SetConfig+0x11c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <TIM_OC1_SetConfig+0x88>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a2f      	ldr	r2, [pc, #188]	@ (8005a40 <TIM_OC1_SetConfig+0x120>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00f      	beq.n	80059a8 <TIM_OC1_SetConfig+0x88>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a2e      	ldr	r2, [pc, #184]	@ (8005a44 <TIM_OC1_SetConfig+0x124>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00b      	beq.n	80059a8 <TIM_OC1_SetConfig+0x88>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a2d      	ldr	r2, [pc, #180]	@ (8005a48 <TIM_OC1_SetConfig+0x128>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d007      	beq.n	80059a8 <TIM_OC1_SetConfig+0x88>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a2c      	ldr	r2, [pc, #176]	@ (8005a4c <TIM_OC1_SetConfig+0x12c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_OC1_SetConfig+0x88>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a2b      	ldr	r2, [pc, #172]	@ (8005a50 <TIM_OC1_SetConfig+0x130>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d10c      	bne.n	80059c2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f023 0308 	bic.w	r3, r3, #8
 80059ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f023 0304 	bic.w	r3, r3, #4
 80059c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a3c <TIM_OC1_SetConfig+0x11c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d013      	beq.n	80059f2 <TIM_OC1_SetConfig+0xd2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a1c      	ldr	r2, [pc, #112]	@ (8005a40 <TIM_OC1_SetConfig+0x120>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00f      	beq.n	80059f2 <TIM_OC1_SetConfig+0xd2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a44 <TIM_OC1_SetConfig+0x124>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d00b      	beq.n	80059f2 <TIM_OC1_SetConfig+0xd2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a1a      	ldr	r2, [pc, #104]	@ (8005a48 <TIM_OC1_SetConfig+0x128>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d007      	beq.n	80059f2 <TIM_OC1_SetConfig+0xd2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a19      	ldr	r2, [pc, #100]	@ (8005a4c <TIM_OC1_SetConfig+0x12c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d003      	beq.n	80059f2 <TIM_OC1_SetConfig+0xd2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a18      	ldr	r2, [pc, #96]	@ (8005a50 <TIM_OC1_SetConfig+0x130>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d111      	bne.n	8005a16 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	621a      	str	r2, [r3, #32]
}
 8005a30:	bf00      	nop
 8005a32:	371c      	adds	r7, #28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	40012c00 	.word	0x40012c00
 8005a40:	40013400 	.word	0x40013400
 8005a44:	40014000 	.word	0x40014000
 8005a48:	40014400 	.word	0x40014400
 8005a4c:	40014800 	.word	0x40014800
 8005a50:	40015000 	.word	0x40015000

08005a54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	f023 0210 	bic.w	r2, r3, #16
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	021b      	lsls	r3, r3, #8
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f023 0320 	bic.w	r3, r3, #32
 8005aa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8005b64 <TIM_OC2_SetConfig+0x110>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d007      	beq.n	8005ac8 <TIM_OC2_SetConfig+0x74>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a2b      	ldr	r2, [pc, #172]	@ (8005b68 <TIM_OC2_SetConfig+0x114>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d003      	beq.n	8005ac8 <TIM_OC2_SetConfig+0x74>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8005b6c <TIM_OC2_SetConfig+0x118>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d10d      	bne.n	8005ae4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ae2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8005b64 <TIM_OC2_SetConfig+0x110>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d013      	beq.n	8005b14 <TIM_OC2_SetConfig+0xc0>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a1e      	ldr	r2, [pc, #120]	@ (8005b68 <TIM_OC2_SetConfig+0x114>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d00f      	beq.n	8005b14 <TIM_OC2_SetConfig+0xc0>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a1e      	ldr	r2, [pc, #120]	@ (8005b70 <TIM_OC2_SetConfig+0x11c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d00b      	beq.n	8005b14 <TIM_OC2_SetConfig+0xc0>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a1d      	ldr	r2, [pc, #116]	@ (8005b74 <TIM_OC2_SetConfig+0x120>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d007      	beq.n	8005b14 <TIM_OC2_SetConfig+0xc0>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a1c      	ldr	r2, [pc, #112]	@ (8005b78 <TIM_OC2_SetConfig+0x124>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d003      	beq.n	8005b14 <TIM_OC2_SetConfig+0xc0>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a17      	ldr	r2, [pc, #92]	@ (8005b6c <TIM_OC2_SetConfig+0x118>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d113      	bne.n	8005b3c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	621a      	str	r2, [r3, #32]
}
 8005b56:	bf00      	nop
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	40012c00 	.word	0x40012c00
 8005b68:	40013400 	.word	0x40013400
 8005b6c:	40015000 	.word	0x40015000
 8005b70:	40014000 	.word	0x40014000
 8005b74:	40014400 	.word	0x40014400
 8005b78:	40014800 	.word	0x40014800

08005b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0303 	bic.w	r3, r3, #3
 8005bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	021b      	lsls	r3, r3, #8
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a2b      	ldr	r2, [pc, #172]	@ (8005c88 <TIM_OC3_SetConfig+0x10c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d007      	beq.n	8005bee <TIM_OC3_SetConfig+0x72>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a2a      	ldr	r2, [pc, #168]	@ (8005c8c <TIM_OC3_SetConfig+0x110>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d003      	beq.n	8005bee <TIM_OC3_SetConfig+0x72>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a29      	ldr	r2, [pc, #164]	@ (8005c90 <TIM_OC3_SetConfig+0x114>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d10d      	bne.n	8005c0a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	021b      	lsls	r3, r3, #8
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a1e      	ldr	r2, [pc, #120]	@ (8005c88 <TIM_OC3_SetConfig+0x10c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d013      	beq.n	8005c3a <TIM_OC3_SetConfig+0xbe>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a1d      	ldr	r2, [pc, #116]	@ (8005c8c <TIM_OC3_SetConfig+0x110>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d00f      	beq.n	8005c3a <TIM_OC3_SetConfig+0xbe>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005c94 <TIM_OC3_SetConfig+0x118>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00b      	beq.n	8005c3a <TIM_OC3_SetConfig+0xbe>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a1c      	ldr	r2, [pc, #112]	@ (8005c98 <TIM_OC3_SetConfig+0x11c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d007      	beq.n	8005c3a <TIM_OC3_SetConfig+0xbe>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8005c9c <TIM_OC3_SetConfig+0x120>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d003      	beq.n	8005c3a <TIM_OC3_SetConfig+0xbe>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a16      	ldr	r2, [pc, #88]	@ (8005c90 <TIM_OC3_SetConfig+0x114>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d113      	bne.n	8005c62 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	011b      	lsls	r3, r3, #4
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	621a      	str	r2, [r3, #32]
}
 8005c7c:	bf00      	nop
 8005c7e:	371c      	adds	r7, #28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	40012c00 	.word	0x40012c00
 8005c8c:	40013400 	.word	0x40013400
 8005c90:	40015000 	.word	0x40015000
 8005c94:	40014000 	.word	0x40014000
 8005c98:	40014400 	.word	0x40014400
 8005c9c:	40014800 	.word	0x40014800

08005ca0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	021b      	lsls	r3, r3, #8
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	031b      	lsls	r3, r3, #12
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a2c      	ldr	r2, [pc, #176]	@ (8005db0 <TIM_OC4_SetConfig+0x110>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d007      	beq.n	8005d14 <TIM_OC4_SetConfig+0x74>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a2b      	ldr	r2, [pc, #172]	@ (8005db4 <TIM_OC4_SetConfig+0x114>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d003      	beq.n	8005d14 <TIM_OC4_SetConfig+0x74>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a2a      	ldr	r2, [pc, #168]	@ (8005db8 <TIM_OC4_SetConfig+0x118>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d10d      	bne.n	8005d30 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	031b      	lsls	r3, r3, #12
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a1f      	ldr	r2, [pc, #124]	@ (8005db0 <TIM_OC4_SetConfig+0x110>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d013      	beq.n	8005d60 <TIM_OC4_SetConfig+0xc0>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8005db4 <TIM_OC4_SetConfig+0x114>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d00f      	beq.n	8005d60 <TIM_OC4_SetConfig+0xc0>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a1e      	ldr	r2, [pc, #120]	@ (8005dbc <TIM_OC4_SetConfig+0x11c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00b      	beq.n	8005d60 <TIM_OC4_SetConfig+0xc0>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8005dc0 <TIM_OC4_SetConfig+0x120>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d007      	beq.n	8005d60 <TIM_OC4_SetConfig+0xc0>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a1c      	ldr	r2, [pc, #112]	@ (8005dc4 <TIM_OC4_SetConfig+0x124>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d003      	beq.n	8005d60 <TIM_OC4_SetConfig+0xc0>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a17      	ldr	r2, [pc, #92]	@ (8005db8 <TIM_OC4_SetConfig+0x118>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d113      	bne.n	8005d88 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d66:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d6e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	019b      	lsls	r3, r3, #6
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	019b      	lsls	r3, r3, #6
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	621a      	str	r2, [r3, #32]
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	40012c00 	.word	0x40012c00
 8005db4:	40013400 	.word	0x40013400
 8005db8:	40015000 	.word	0x40015000
 8005dbc:	40014000 	.word	0x40014000
 8005dc0:	40014400 	.word	0x40014400
 8005dc4:	40014800 	.word	0x40014800

08005dc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005e0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	041b      	lsls	r3, r3, #16
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a19      	ldr	r2, [pc, #100]	@ (8005e84 <TIM_OC5_SetConfig+0xbc>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d013      	beq.n	8005e4a <TIM_OC5_SetConfig+0x82>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a18      	ldr	r2, [pc, #96]	@ (8005e88 <TIM_OC5_SetConfig+0xc0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00f      	beq.n	8005e4a <TIM_OC5_SetConfig+0x82>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a17      	ldr	r2, [pc, #92]	@ (8005e8c <TIM_OC5_SetConfig+0xc4>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00b      	beq.n	8005e4a <TIM_OC5_SetConfig+0x82>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a16      	ldr	r2, [pc, #88]	@ (8005e90 <TIM_OC5_SetConfig+0xc8>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d007      	beq.n	8005e4a <TIM_OC5_SetConfig+0x82>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a15      	ldr	r2, [pc, #84]	@ (8005e94 <TIM_OC5_SetConfig+0xcc>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d003      	beq.n	8005e4a <TIM_OC5_SetConfig+0x82>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a14      	ldr	r2, [pc, #80]	@ (8005e98 <TIM_OC5_SetConfig+0xd0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d109      	bne.n	8005e5e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	021b      	lsls	r3, r3, #8
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	621a      	str	r2, [r3, #32]
}
 8005e78:	bf00      	nop
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	40012c00 	.word	0x40012c00
 8005e88:	40013400 	.word	0x40013400
 8005e8c:	40014000 	.word	0x40014000
 8005e90:	40014400 	.word	0x40014400
 8005e94:	40014800 	.word	0x40014800
 8005e98:	40015000 	.word	0x40015000

08005e9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005eca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	021b      	lsls	r3, r3, #8
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	051b      	lsls	r3, r3, #20
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8005f5c <TIM_OC6_SetConfig+0xc0>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d013      	beq.n	8005f20 <TIM_OC6_SetConfig+0x84>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a19      	ldr	r2, [pc, #100]	@ (8005f60 <TIM_OC6_SetConfig+0xc4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00f      	beq.n	8005f20 <TIM_OC6_SetConfig+0x84>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a18      	ldr	r2, [pc, #96]	@ (8005f64 <TIM_OC6_SetConfig+0xc8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00b      	beq.n	8005f20 <TIM_OC6_SetConfig+0x84>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a17      	ldr	r2, [pc, #92]	@ (8005f68 <TIM_OC6_SetConfig+0xcc>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d007      	beq.n	8005f20 <TIM_OC6_SetConfig+0x84>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a16      	ldr	r2, [pc, #88]	@ (8005f6c <TIM_OC6_SetConfig+0xd0>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d003      	beq.n	8005f20 <TIM_OC6_SetConfig+0x84>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a15      	ldr	r2, [pc, #84]	@ (8005f70 <TIM_OC6_SetConfig+0xd4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d109      	bne.n	8005f34 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	029b      	lsls	r3, r3, #10
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	40012c00 	.word	0x40012c00
 8005f60:	40013400 	.word	0x40013400
 8005f64:	40014000 	.word	0x40014000
 8005f68:	40014400 	.word	0x40014400
 8005f6c:	40014800 	.word	0x40014800
 8005f70:	40015000 	.word	0x40015000

08005f74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	f023 0201 	bic.w	r2, r3, #1
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f023 030a 	bic.w	r3, r3, #10
 8005fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	621a      	str	r2, [r3, #32]
}
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b087      	sub	sp, #28
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	60f8      	str	r0, [r7, #12]
 8005fda:	60b9      	str	r1, [r7, #8]
 8005fdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	f023 0210 	bic.w	r2, r3, #16
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ffc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	031b      	lsls	r3, r3, #12
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4313      	orrs	r3, r2
 8006006:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800600e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	621a      	str	r2, [r3, #32]
}
 8006026:	bf00      	nop
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006032:	b480      	push	{r7}
 8006034:	b085      	sub	sp, #20
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006048:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800604c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4313      	orrs	r3, r2
 8006054:	f043 0307 	orr.w	r3, r3, #7
 8006058:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	609a      	str	r2, [r3, #8]
}
 8006060:	bf00      	nop
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	021a      	lsls	r2, r3, #8
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	431a      	orrs	r2, r3
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	4313      	orrs	r3, r2
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	4313      	orrs	r3, r2
 8006098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	609a      	str	r2, [r3, #8]
}
 80060a0:	bf00      	nop
 80060a2:	371c      	adds	r7, #28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f003 031f 	and.w	r3, r3, #31
 80060be:	2201      	movs	r2, #1
 80060c0:	fa02 f303 	lsl.w	r3, r2, r3
 80060c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6a1a      	ldr	r2, [r3, #32]
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	43db      	mvns	r3, r3
 80060ce:	401a      	ands	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6a1a      	ldr	r2, [r3, #32]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f003 031f 	and.w	r3, r3, #31
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	fa01 f303 	lsl.w	r3, r1, r3
 80060e4:	431a      	orrs	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	621a      	str	r2, [r3, #32]
}
 80060ea:	bf00      	nop
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
	...

080060f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800610c:	2302      	movs	r3, #2
 800610e:	e074      	b.n	80061fa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a34      	ldr	r2, [pc, #208]	@ (8006208 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d009      	beq.n	800614e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a33      	ldr	r2, [pc, #204]	@ (800620c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d004      	beq.n	800614e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a31      	ldr	r2, [pc, #196]	@ (8006210 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d108      	bne.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006154:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	4313      	orrs	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800616a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a21      	ldr	r2, [pc, #132]	@ (8006208 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d022      	beq.n	80061ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006190:	d01d      	beq.n	80061ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a1f      	ldr	r2, [pc, #124]	@ (8006214 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d018      	beq.n	80061ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006218 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d013      	beq.n	80061ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a1c      	ldr	r2, [pc, #112]	@ (800621c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d00e      	beq.n	80061ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a15      	ldr	r2, [pc, #84]	@ (800620c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d009      	beq.n	80061ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a18      	ldr	r2, [pc, #96]	@ (8006220 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d004      	beq.n	80061ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a11      	ldr	r2, [pc, #68]	@ (8006210 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d10c      	bne.n	80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	4313      	orrs	r3, r2
 80061de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	40012c00 	.word	0x40012c00
 800620c:	40013400 	.word	0x40013400
 8006210:	40015000 	.word	0x40015000
 8006214:	40000400 	.word	0x40000400
 8006218:	40000800 	.word	0x40000800
 800621c:	40000c00 	.word	0x40000c00
 8006220:	40014000 	.word	0x40014000

08006224 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006238:	2b01      	cmp	r3, #1
 800623a:	d101      	bne.n	8006240 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800623c:	2302      	movs	r3, #2
 800623e:	e078      	b.n	8006332 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	4313      	orrs	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4313      	orrs	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	4313      	orrs	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	041b      	lsls	r3, r3, #16
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006340 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d009      	beq.n	80062e6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006344 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d004      	beq.n	80062e6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a19      	ldr	r2, [pc, #100]	@ (8006348 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d11c      	bne.n	8006320 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f0:	051b      	lsls	r3, r3, #20
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	4313      	orrs	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	40012c00 	.word	0x40012c00
 8006344:	40013400 	.word	0x40013400
 8006348:	40015000 	.word	0x40015000

0800634c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e042      	b.n	8006470 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d106      	bne.n	8006402 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7fc fb51 	bl	8002aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2224      	movs	r2, #36	@ 0x24
 8006406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0201 	bic.w	r2, r2, #1
 8006418:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 ff42 	bl	80072ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fc43 	bl	8006cb4 <UART_SetConfig>
 800642e:	4603      	mov	r3, r0
 8006430:	2b01      	cmp	r3, #1
 8006432:	d101      	bne.n	8006438 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e01b      	b.n	8006470 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006446:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006456:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0201 	orr.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 ffc1 	bl	80073f0 <UART_CheckIdleState>
 800646e:	4603      	mov	r3, r0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08a      	sub	sp, #40	@ 0x28
 800647c:	af02      	add	r7, sp, #8
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	603b      	str	r3, [r7, #0]
 8006484:	4613      	mov	r3, r2
 8006486:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800648e:	2b20      	cmp	r3, #32
 8006490:	d17b      	bne.n	800658a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <HAL_UART_Transmit+0x26>
 8006498:	88fb      	ldrh	r3, [r7, #6]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e074      	b.n	800658c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2221      	movs	r2, #33	@ 0x21
 80064ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064b2:	f7fc febf 	bl	8003234 <HAL_GetTick>
 80064b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	88fa      	ldrh	r2, [r7, #6]
 80064bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	88fa      	ldrh	r2, [r7, #6]
 80064c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064d0:	d108      	bne.n	80064e4 <HAL_UART_Transmit+0x6c>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d104      	bne.n	80064e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	e003      	b.n	80064ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064e8:	2300      	movs	r3, #0
 80064ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064ec:	e030      	b.n	8006550 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2200      	movs	r2, #0
 80064f6:	2180      	movs	r1, #128	@ 0x80
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f001 f823 	bl	8007544 <UART_WaitOnFlagUntilTimeout>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d005      	beq.n	8006510 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2220      	movs	r2, #32
 8006508:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e03d      	b.n	800658c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10b      	bne.n	800652e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006524:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	3302      	adds	r3, #2
 800652a:	61bb      	str	r3, [r7, #24]
 800652c:	e007      	b.n	800653e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	781a      	ldrb	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	3301      	adds	r3, #1
 800653c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006544:	b29b      	uxth	r3, r3
 8006546:	3b01      	subs	r3, #1
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006556:	b29b      	uxth	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1c8      	bne.n	80064ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2200      	movs	r2, #0
 8006564:	2140      	movs	r1, #64	@ 0x40
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 ffec 	bl	8007544 <UART_WaitOnFlagUntilTimeout>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d005      	beq.n	800657e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2220      	movs	r2, #32
 8006576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e006      	b.n	800658c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2220      	movs	r2, #32
 8006582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	e000      	b.n	800658c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800658a:	2302      	movs	r3, #2
  }
}
 800658c:	4618      	mov	r0, r3
 800658e:	3720      	adds	r7, #32
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08a      	sub	sp, #40	@ 0x28
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	4613      	mov	r3, r2
 80065a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065a8:	2b20      	cmp	r3, #32
 80065aa:	d137      	bne.n	800661c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <HAL_UART_Receive_IT+0x24>
 80065b2:	88fb      	ldrh	r3, [r7, #6]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e030      	b.n	800661e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a18      	ldr	r2, [pc, #96]	@ (8006628 <HAL_UART_Receive_IT+0x94>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d01f      	beq.n	800660c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d018      	beq.n	800660c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	e853 3f00 	ldrex	r3, [r3]
 80065e6:	613b      	str	r3, [r7, #16]
   return(result);
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80065ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	461a      	mov	r2, r3
 80065f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f8:	623b      	str	r3, [r7, #32]
 80065fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	69f9      	ldr	r1, [r7, #28]
 80065fe:	6a3a      	ldr	r2, [r7, #32]
 8006600:	e841 2300 	strex	r3, r2, [r1]
 8006604:	61bb      	str	r3, [r7, #24]
   return(result);
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e6      	bne.n	80065da <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800660c:	88fb      	ldrh	r3, [r7, #6]
 800660e:	461a      	mov	r2, r3
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f001 f804 	bl	8007620 <UART_Start_Receive_IT>
 8006618:	4603      	mov	r3, r0
 800661a:	e000      	b.n	800661e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800661c:	2302      	movs	r3, #2
  }
}
 800661e:	4618      	mov	r0, r3
 8006620:	3728      	adds	r7, #40	@ 0x28
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	40008000 	.word	0x40008000

0800662c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b0ba      	sub	sp, #232	@ 0xe8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006652:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006656:	f640 030f 	movw	r3, #2063	@ 0x80f
 800665a:	4013      	ands	r3, r2
 800665c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006660:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006664:	2b00      	cmp	r3, #0
 8006666:	d11b      	bne.n	80066a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800666c:	f003 0320 	and.w	r3, r3, #32
 8006670:	2b00      	cmp	r3, #0
 8006672:	d015      	beq.n	80066a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006678:	f003 0320 	and.w	r3, r3, #32
 800667c:	2b00      	cmp	r3, #0
 800667e:	d105      	bne.n	800668c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d009      	beq.n	80066a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 82e3 	beq.w	8006c5c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	4798      	blx	r3
      }
      return;
 800669e:	e2dd      	b.n	8006c5c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 8123 	beq.w	80068f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80066aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80066ae:	4b8d      	ldr	r3, [pc, #564]	@ (80068e4 <HAL_UART_IRQHandler+0x2b8>)
 80066b0:	4013      	ands	r3, r2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d106      	bne.n	80066c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80066b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80066ba:	4b8b      	ldr	r3, [pc, #556]	@ (80068e8 <HAL_UART_IRQHandler+0x2bc>)
 80066bc:	4013      	ands	r3, r2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 8116 	beq.w	80068f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d011      	beq.n	80066f4 <HAL_UART_IRQHandler+0xc8>
 80066d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00b      	beq.n	80066f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2201      	movs	r2, #1
 80066e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ea:	f043 0201 	orr.w	r2, r3, #1
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d011      	beq.n	8006724 <HAL_UART_IRQHandler+0xf8>
 8006700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00b      	beq.n	8006724 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2202      	movs	r2, #2
 8006712:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800671a:	f043 0204 	orr.w	r2, r3, #4
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d011      	beq.n	8006754 <HAL_UART_IRQHandler+0x128>
 8006730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00b      	beq.n	8006754 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2204      	movs	r2, #4
 8006742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800674a:	f043 0202 	orr.w	r2, r3, #2
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006758:	f003 0308 	and.w	r3, r3, #8
 800675c:	2b00      	cmp	r3, #0
 800675e:	d017      	beq.n	8006790 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006764:	f003 0320 	and.w	r3, r3, #32
 8006768:	2b00      	cmp	r3, #0
 800676a:	d105      	bne.n	8006778 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800676c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006770:	4b5c      	ldr	r3, [pc, #368]	@ (80068e4 <HAL_UART_IRQHandler+0x2b8>)
 8006772:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00b      	beq.n	8006790 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2208      	movs	r2, #8
 800677e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006786:	f043 0208 	orr.w	r2, r3, #8
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006798:	2b00      	cmp	r3, #0
 800679a:	d012      	beq.n	80067c2 <HAL_UART_IRQHandler+0x196>
 800679c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00c      	beq.n	80067c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b8:	f043 0220 	orr.w	r2, r3, #32
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 8249 	beq.w	8006c60 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067d2:	f003 0320 	and.w	r3, r3, #32
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d013      	beq.n	8006802 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067de:	f003 0320 	and.w	r3, r3, #32
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d105      	bne.n	80067f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d007      	beq.n	8006802 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006808:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006816:	2b40      	cmp	r3, #64	@ 0x40
 8006818:	d005      	beq.n	8006826 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800681a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800681e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006822:	2b00      	cmp	r3, #0
 8006824:	d054      	beq.n	80068d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f001 f81c 	bl	8007864 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006836:	2b40      	cmp	r3, #64	@ 0x40
 8006838:	d146      	bne.n	80068c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3308      	adds	r3, #8
 8006840:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006844:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006850:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006854:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006858:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3308      	adds	r3, #8
 8006862:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006866:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800686a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006872:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800687e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1d9      	bne.n	800683a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800688c:	2b00      	cmp	r3, #0
 800688e:	d017      	beq.n	80068c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006896:	4a15      	ldr	r2, [pc, #84]	@ (80068ec <HAL_UART_IRQHandler+0x2c0>)
 8006898:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fc fe0c 	bl	80034be <HAL_DMA_Abort_IT>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d019      	beq.n	80068e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80068ba:	4610      	mov	r0, r2
 80068bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068be:	e00f      	b.n	80068e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f9e1 	bl	8006c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c6:	e00b      	b.n	80068e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f9dd 	bl	8006c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ce:	e007      	b.n	80068e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f9d9 	bl	8006c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80068de:	e1bf      	b.n	8006c60 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e0:	bf00      	nop
    return;
 80068e2:	e1bd      	b.n	8006c60 <HAL_UART_IRQHandler+0x634>
 80068e4:	10000001 	.word	0x10000001
 80068e8:	04000120 	.word	0x04000120
 80068ec:	08007931 	.word	0x08007931

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	f040 8153 	bne.w	8006ba0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80068fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068fe:	f003 0310 	and.w	r3, r3, #16
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 814c 	beq.w	8006ba0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800690c:	f003 0310 	and.w	r3, r3, #16
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 8145 	beq.w	8006ba0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2210      	movs	r2, #16
 800691c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006928:	2b40      	cmp	r3, #64	@ 0x40
 800692a:	f040 80bb 	bne.w	8006aa4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800693c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006940:	2b00      	cmp	r3, #0
 8006942:	f000 818f 	beq.w	8006c64 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800694c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006950:	429a      	cmp	r2, r3
 8006952:	f080 8187 	bcs.w	8006c64 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800695c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b00      	cmp	r3, #0
 8006970:	f040 8087 	bne.w	8006a82 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006988:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800698c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006990:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	461a      	mov	r2, r3
 800699a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800699e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80069a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80069aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80069b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1da      	bne.n	8006974 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3308      	adds	r3, #8
 80069c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80069ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069d0:	f023 0301 	bic.w	r3, r3, #1
 80069d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3308      	adds	r3, #8
 80069de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80069e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80069e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80069ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80069f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e1      	bne.n	80069be <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3308      	adds	r3, #8
 8006a00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3308      	adds	r3, #8
 8006a1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006a1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1e3      	bne.n	80069fa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a48:	e853 3f00 	ldrex	r3, [r3]
 8006a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a50:	f023 0310 	bic.w	r3, r3, #16
 8006a54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1e4      	bne.n	8006a40 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fc fcc5 	bl	800340c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2202      	movs	r2, #2
 8006a86:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f8fd 	bl	8006c9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006aa2:	e0df      	b.n	8006c64 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 80d1 	beq.w	8006c68 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006ac6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 80cc 	beq.w	8006c68 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad8:	e853 3f00 	ldrex	r3, [r3]
 8006adc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ae0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ae4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	461a      	mov	r2, r3
 8006aee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006af2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006af4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006af8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006afa:	e841 2300 	strex	r3, r2, [r1]
 8006afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1e4      	bne.n	8006ad0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	623b      	str	r3, [r7, #32]
   return(result);
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b1c:	f023 0301 	bic.w	r3, r3, #1
 8006b20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3308      	adds	r3, #8
 8006b2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006b2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b36:	e841 2300 	strex	r3, r2, [r1]
 8006b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1e1      	bne.n	8006b06 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	e853 3f00 	ldrex	r3, [r3]
 8006b62:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f023 0310 	bic.w	r3, r3, #16
 8006b6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006b78:	61fb      	str	r3, [r7, #28]
 8006b7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	69b9      	ldr	r1, [r7, #24]
 8006b7e:	69fa      	ldr	r2, [r7, #28]
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	617b      	str	r3, [r7, #20]
   return(result);
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e4      	bne.n	8006b56 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f87f 	bl	8006c9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b9e:	e063      	b.n	8006c68 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ba4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00e      	beq.n	8006bca <HAL_UART_IRQHandler+0x59e>
 8006bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d008      	beq.n	8006bca <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006bc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f001 fc12 	bl	80083ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bc8:	e051      	b.n	8006c6e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d014      	beq.n	8006c00 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d105      	bne.n	8006bee <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006be6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d008      	beq.n	8006c00 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d03a      	beq.n	8006c6c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
    }
    return;
 8006bfe:	e035      	b.n	8006c6c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d009      	beq.n	8006c20 <HAL_UART_IRQHandler+0x5f4>
 8006c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fe9f 	bl	800795c <UART_EndTransmit_IT>
    return;
 8006c1e:	e026      	b.n	8006c6e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d009      	beq.n	8006c40 <HAL_UART_IRQHandler+0x614>
 8006c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c30:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f001 fbeb 	bl	8008414 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c3e:	e016      	b.n	8006c6e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d010      	beq.n	8006c6e <HAL_UART_IRQHandler+0x642>
 8006c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	da0c      	bge.n	8006c6e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 fbd3 	bl	8008400 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c5a:	e008      	b.n	8006c6e <HAL_UART_IRQHandler+0x642>
      return;
 8006c5c:	bf00      	nop
 8006c5e:	e006      	b.n	8006c6e <HAL_UART_IRQHandler+0x642>
    return;
 8006c60:	bf00      	nop
 8006c62:	e004      	b.n	8006c6e <HAL_UART_IRQHandler+0x642>
      return;
 8006c64:	bf00      	nop
 8006c66:	e002      	b.n	8006c6e <HAL_UART_IRQHandler+0x642>
      return;
 8006c68:	bf00      	nop
 8006c6a:	e000      	b.n	8006c6e <HAL_UART_IRQHandler+0x642>
    return;
 8006c6c:	bf00      	nop
  }
}
 8006c6e:	37e8      	adds	r7, #232	@ 0xe8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cb8:	b08c      	sub	sp, #48	@ 0x30
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	689a      	ldr	r2, [r3, #8]
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	69db      	ldr	r3, [r3, #28]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	4baa      	ldr	r3, [pc, #680]	@ (8006f8c <UART_SetConfig+0x2d8>)
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	6812      	ldr	r2, [r2, #0]
 8006cea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cec:	430b      	orrs	r3, r1
 8006cee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a9f      	ldr	r2, [pc, #636]	@ (8006f90 <UART_SetConfig+0x2dc>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d004      	beq.n	8006d20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006d2a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	6812      	ldr	r2, [r2, #0]
 8006d32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d34:	430b      	orrs	r3, r1
 8006d36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3e:	f023 010f 	bic.w	r1, r3, #15
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a90      	ldr	r2, [pc, #576]	@ (8006f94 <UART_SetConfig+0x2e0>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d125      	bne.n	8006da4 <UART_SetConfig+0xf0>
 8006d58:	4b8f      	ldr	r3, [pc, #572]	@ (8006f98 <UART_SetConfig+0x2e4>)
 8006d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	2b03      	cmp	r3, #3
 8006d64:	d81a      	bhi.n	8006d9c <UART_SetConfig+0xe8>
 8006d66:	a201      	add	r2, pc, #4	@ (adr r2, 8006d6c <UART_SetConfig+0xb8>)
 8006d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6c:	08006d7d 	.word	0x08006d7d
 8006d70:	08006d8d 	.word	0x08006d8d
 8006d74:	08006d85 	.word	0x08006d85
 8006d78:	08006d95 	.word	0x08006d95
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d82:	e116      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006d84:	2302      	movs	r3, #2
 8006d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d8a:	e112      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006d8c:	2304      	movs	r3, #4
 8006d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d92:	e10e      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006d94:	2308      	movs	r3, #8
 8006d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d9a:	e10a      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006da2:	e106      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a7c      	ldr	r2, [pc, #496]	@ (8006f9c <UART_SetConfig+0x2e8>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d138      	bne.n	8006e20 <UART_SetConfig+0x16c>
 8006dae:	4b7a      	ldr	r3, [pc, #488]	@ (8006f98 <UART_SetConfig+0x2e4>)
 8006db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006db4:	f003 030c 	and.w	r3, r3, #12
 8006db8:	2b0c      	cmp	r3, #12
 8006dba:	d82d      	bhi.n	8006e18 <UART_SetConfig+0x164>
 8006dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc4 <UART_SetConfig+0x110>)
 8006dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc2:	bf00      	nop
 8006dc4:	08006df9 	.word	0x08006df9
 8006dc8:	08006e19 	.word	0x08006e19
 8006dcc:	08006e19 	.word	0x08006e19
 8006dd0:	08006e19 	.word	0x08006e19
 8006dd4:	08006e09 	.word	0x08006e09
 8006dd8:	08006e19 	.word	0x08006e19
 8006ddc:	08006e19 	.word	0x08006e19
 8006de0:	08006e19 	.word	0x08006e19
 8006de4:	08006e01 	.word	0x08006e01
 8006de8:	08006e19 	.word	0x08006e19
 8006dec:	08006e19 	.word	0x08006e19
 8006df0:	08006e19 	.word	0x08006e19
 8006df4:	08006e11 	.word	0x08006e11
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dfe:	e0d8      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006e00:	2302      	movs	r3, #2
 8006e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e06:	e0d4      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006e08:	2304      	movs	r3, #4
 8006e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e0e:	e0d0      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006e10:	2308      	movs	r3, #8
 8006e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e16:	e0cc      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006e18:	2310      	movs	r3, #16
 8006e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e1e:	e0c8      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a5e      	ldr	r2, [pc, #376]	@ (8006fa0 <UART_SetConfig+0x2ec>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d125      	bne.n	8006e76 <UART_SetConfig+0x1c2>
 8006e2a:	4b5b      	ldr	r3, [pc, #364]	@ (8006f98 <UART_SetConfig+0x2e4>)
 8006e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006e34:	2b30      	cmp	r3, #48	@ 0x30
 8006e36:	d016      	beq.n	8006e66 <UART_SetConfig+0x1b2>
 8006e38:	2b30      	cmp	r3, #48	@ 0x30
 8006e3a:	d818      	bhi.n	8006e6e <UART_SetConfig+0x1ba>
 8006e3c:	2b20      	cmp	r3, #32
 8006e3e:	d00a      	beq.n	8006e56 <UART_SetConfig+0x1a2>
 8006e40:	2b20      	cmp	r3, #32
 8006e42:	d814      	bhi.n	8006e6e <UART_SetConfig+0x1ba>
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <UART_SetConfig+0x19a>
 8006e48:	2b10      	cmp	r3, #16
 8006e4a:	d008      	beq.n	8006e5e <UART_SetConfig+0x1aa>
 8006e4c:	e00f      	b.n	8006e6e <UART_SetConfig+0x1ba>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e54:	e0ad      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006e56:	2302      	movs	r3, #2
 8006e58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e5c:	e0a9      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006e5e:	2304      	movs	r3, #4
 8006e60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e64:	e0a5      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006e66:	2308      	movs	r3, #8
 8006e68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e6c:	e0a1      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006e6e:	2310      	movs	r3, #16
 8006e70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e74:	e09d      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a4a      	ldr	r2, [pc, #296]	@ (8006fa4 <UART_SetConfig+0x2f0>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d125      	bne.n	8006ecc <UART_SetConfig+0x218>
 8006e80:	4b45      	ldr	r3, [pc, #276]	@ (8006f98 <UART_SetConfig+0x2e4>)
 8006e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006e8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e8c:	d016      	beq.n	8006ebc <UART_SetConfig+0x208>
 8006e8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e90:	d818      	bhi.n	8006ec4 <UART_SetConfig+0x210>
 8006e92:	2b80      	cmp	r3, #128	@ 0x80
 8006e94:	d00a      	beq.n	8006eac <UART_SetConfig+0x1f8>
 8006e96:	2b80      	cmp	r3, #128	@ 0x80
 8006e98:	d814      	bhi.n	8006ec4 <UART_SetConfig+0x210>
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d002      	beq.n	8006ea4 <UART_SetConfig+0x1f0>
 8006e9e:	2b40      	cmp	r3, #64	@ 0x40
 8006ea0:	d008      	beq.n	8006eb4 <UART_SetConfig+0x200>
 8006ea2:	e00f      	b.n	8006ec4 <UART_SetConfig+0x210>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eaa:	e082      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006eac:	2302      	movs	r3, #2
 8006eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eb2:	e07e      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006eb4:	2304      	movs	r3, #4
 8006eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eba:	e07a      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006ebc:	2308      	movs	r3, #8
 8006ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ec2:	e076      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006ec4:	2310      	movs	r3, #16
 8006ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eca:	e072      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a35      	ldr	r2, [pc, #212]	@ (8006fa8 <UART_SetConfig+0x2f4>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d12a      	bne.n	8006f2c <UART_SetConfig+0x278>
 8006ed6:	4b30      	ldr	r3, [pc, #192]	@ (8006f98 <UART_SetConfig+0x2e4>)
 8006ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006edc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ee0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ee4:	d01a      	beq.n	8006f1c <UART_SetConfig+0x268>
 8006ee6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006eea:	d81b      	bhi.n	8006f24 <UART_SetConfig+0x270>
 8006eec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ef0:	d00c      	beq.n	8006f0c <UART_SetConfig+0x258>
 8006ef2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ef6:	d815      	bhi.n	8006f24 <UART_SetConfig+0x270>
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d003      	beq.n	8006f04 <UART_SetConfig+0x250>
 8006efc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f00:	d008      	beq.n	8006f14 <UART_SetConfig+0x260>
 8006f02:	e00f      	b.n	8006f24 <UART_SetConfig+0x270>
 8006f04:	2300      	movs	r3, #0
 8006f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f0a:	e052      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f12:	e04e      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006f14:	2304      	movs	r3, #4
 8006f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f1a:	e04a      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006f1c:	2308      	movs	r3, #8
 8006f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f22:	e046      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006f24:	2310      	movs	r3, #16
 8006f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f2a:	e042      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a17      	ldr	r2, [pc, #92]	@ (8006f90 <UART_SetConfig+0x2dc>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d13a      	bne.n	8006fac <UART_SetConfig+0x2f8>
 8006f36:	4b18      	ldr	r3, [pc, #96]	@ (8006f98 <UART_SetConfig+0x2e4>)
 8006f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f44:	d01a      	beq.n	8006f7c <UART_SetConfig+0x2c8>
 8006f46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f4a:	d81b      	bhi.n	8006f84 <UART_SetConfig+0x2d0>
 8006f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f50:	d00c      	beq.n	8006f6c <UART_SetConfig+0x2b8>
 8006f52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f56:	d815      	bhi.n	8006f84 <UART_SetConfig+0x2d0>
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d003      	beq.n	8006f64 <UART_SetConfig+0x2b0>
 8006f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f60:	d008      	beq.n	8006f74 <UART_SetConfig+0x2c0>
 8006f62:	e00f      	b.n	8006f84 <UART_SetConfig+0x2d0>
 8006f64:	2300      	movs	r3, #0
 8006f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f6a:	e022      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f72:	e01e      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006f74:	2304      	movs	r3, #4
 8006f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f7a:	e01a      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006f7c:	2308      	movs	r3, #8
 8006f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f82:	e016      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006f84:	2310      	movs	r3, #16
 8006f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f8a:	e012      	b.n	8006fb2 <UART_SetConfig+0x2fe>
 8006f8c:	cfff69f3 	.word	0xcfff69f3
 8006f90:	40008000 	.word	0x40008000
 8006f94:	40013800 	.word	0x40013800
 8006f98:	40021000 	.word	0x40021000
 8006f9c:	40004400 	.word	0x40004400
 8006fa0:	40004800 	.word	0x40004800
 8006fa4:	40004c00 	.word	0x40004c00
 8006fa8:	40005000 	.word	0x40005000
 8006fac:	2310      	movs	r3, #16
 8006fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4aae      	ldr	r2, [pc, #696]	@ (8007270 <UART_SetConfig+0x5bc>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	f040 8097 	bne.w	80070ec <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006fbe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006fc2:	2b08      	cmp	r3, #8
 8006fc4:	d823      	bhi.n	800700e <UART_SetConfig+0x35a>
 8006fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fcc <UART_SetConfig+0x318>)
 8006fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fcc:	08006ff1 	.word	0x08006ff1
 8006fd0:	0800700f 	.word	0x0800700f
 8006fd4:	08006ff9 	.word	0x08006ff9
 8006fd8:	0800700f 	.word	0x0800700f
 8006fdc:	08006fff 	.word	0x08006fff
 8006fe0:	0800700f 	.word	0x0800700f
 8006fe4:	0800700f 	.word	0x0800700f
 8006fe8:	0800700f 	.word	0x0800700f
 8006fec:	08007007 	.word	0x08007007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ff0:	f7fd f9d6 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 8006ff4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ff6:	e010      	b.n	800701a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ff8:	4b9e      	ldr	r3, [pc, #632]	@ (8007274 <UART_SetConfig+0x5c0>)
 8006ffa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ffc:	e00d      	b.n	800701a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ffe:	f7fd f961 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 8007002:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007004:	e009      	b.n	800701a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800700a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800700c:	e005      	b.n	800701a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007018:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 8130 	beq.w	8007282 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007026:	4a94      	ldr	r2, [pc, #592]	@ (8007278 <UART_SetConfig+0x5c4>)
 8007028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800702c:	461a      	mov	r2, r3
 800702e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007030:	fbb3 f3f2 	udiv	r3, r3, r2
 8007034:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	4613      	mov	r3, r2
 800703c:	005b      	lsls	r3, r3, #1
 800703e:	4413      	add	r3, r2
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	429a      	cmp	r2, r3
 8007044:	d305      	bcc.n	8007052 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	429a      	cmp	r2, r3
 8007050:	d903      	bls.n	800705a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007058:	e113      	b.n	8007282 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	2200      	movs	r2, #0
 800705e:	60bb      	str	r3, [r7, #8]
 8007060:	60fa      	str	r2, [r7, #12]
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007066:	4a84      	ldr	r2, [pc, #528]	@ (8007278 <UART_SetConfig+0x5c4>)
 8007068:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800706c:	b29b      	uxth	r3, r3
 800706e:	2200      	movs	r2, #0
 8007070:	603b      	str	r3, [r7, #0]
 8007072:	607a      	str	r2, [r7, #4]
 8007074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007078:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800707c:	f7f9 fe2c 	bl	8000cd8 <__aeabi_uldivmod>
 8007080:	4602      	mov	r2, r0
 8007082:	460b      	mov	r3, r1
 8007084:	4610      	mov	r0, r2
 8007086:	4619      	mov	r1, r3
 8007088:	f04f 0200 	mov.w	r2, #0
 800708c:	f04f 0300 	mov.w	r3, #0
 8007090:	020b      	lsls	r3, r1, #8
 8007092:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007096:	0202      	lsls	r2, r0, #8
 8007098:	6979      	ldr	r1, [r7, #20]
 800709a:	6849      	ldr	r1, [r1, #4]
 800709c:	0849      	lsrs	r1, r1, #1
 800709e:	2000      	movs	r0, #0
 80070a0:	460c      	mov	r4, r1
 80070a2:	4605      	mov	r5, r0
 80070a4:	eb12 0804 	adds.w	r8, r2, r4
 80070a8:	eb43 0905 	adc.w	r9, r3, r5
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	469a      	mov	sl, r3
 80070b4:	4693      	mov	fp, r2
 80070b6:	4652      	mov	r2, sl
 80070b8:	465b      	mov	r3, fp
 80070ba:	4640      	mov	r0, r8
 80070bc:	4649      	mov	r1, r9
 80070be:	f7f9 fe0b 	bl	8000cd8 <__aeabi_uldivmod>
 80070c2:	4602      	mov	r2, r0
 80070c4:	460b      	mov	r3, r1
 80070c6:	4613      	mov	r3, r2
 80070c8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070d0:	d308      	bcc.n	80070e4 <UART_SetConfig+0x430>
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070d8:	d204      	bcs.n	80070e4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6a3a      	ldr	r2, [r7, #32]
 80070e0:	60da      	str	r2, [r3, #12]
 80070e2:	e0ce      	b.n	8007282 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80070ea:	e0ca      	b.n	8007282 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	69db      	ldr	r3, [r3, #28]
 80070f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070f4:	d166      	bne.n	80071c4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80070f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80070fa:	2b08      	cmp	r3, #8
 80070fc:	d827      	bhi.n	800714e <UART_SetConfig+0x49a>
 80070fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007104 <UART_SetConfig+0x450>)
 8007100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007104:	08007129 	.word	0x08007129
 8007108:	08007131 	.word	0x08007131
 800710c:	08007139 	.word	0x08007139
 8007110:	0800714f 	.word	0x0800714f
 8007114:	0800713f 	.word	0x0800713f
 8007118:	0800714f 	.word	0x0800714f
 800711c:	0800714f 	.word	0x0800714f
 8007120:	0800714f 	.word	0x0800714f
 8007124:	08007147 	.word	0x08007147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007128:	f7fd f93a 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 800712c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800712e:	e014      	b.n	800715a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007130:	f7fd f94c 	bl	80043cc <HAL_RCC_GetPCLK2Freq>
 8007134:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007136:	e010      	b.n	800715a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007138:	4b4e      	ldr	r3, [pc, #312]	@ (8007274 <UART_SetConfig+0x5c0>)
 800713a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800713c:	e00d      	b.n	800715a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800713e:	f7fd f8c1 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 8007142:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007144:	e009      	b.n	800715a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800714a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800714c:	e005      	b.n	800715a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007158:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800715a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 8090 	beq.w	8007282 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007166:	4a44      	ldr	r2, [pc, #272]	@ (8007278 <UART_SetConfig+0x5c4>)
 8007168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800716c:	461a      	mov	r2, r3
 800716e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007170:	fbb3 f3f2 	udiv	r3, r3, r2
 8007174:	005a      	lsls	r2, r3, #1
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	085b      	lsrs	r3, r3, #1
 800717c:	441a      	add	r2, r3
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	fbb2 f3f3 	udiv	r3, r2, r3
 8007186:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	2b0f      	cmp	r3, #15
 800718c:	d916      	bls.n	80071bc <UART_SetConfig+0x508>
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007194:	d212      	bcs.n	80071bc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	b29b      	uxth	r3, r3
 800719a:	f023 030f 	bic.w	r3, r3, #15
 800719e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	085b      	lsrs	r3, r3, #1
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	f003 0307 	and.w	r3, r3, #7
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	8bfb      	ldrh	r3, [r7, #30]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	8bfa      	ldrh	r2, [r7, #30]
 80071b8:	60da      	str	r2, [r3, #12]
 80071ba:	e062      	b.n	8007282 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80071c2:	e05e      	b.n	8007282 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	d828      	bhi.n	800721e <UART_SetConfig+0x56a>
 80071cc:	a201      	add	r2, pc, #4	@ (adr r2, 80071d4 <UART_SetConfig+0x520>)
 80071ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d2:	bf00      	nop
 80071d4:	080071f9 	.word	0x080071f9
 80071d8:	08007201 	.word	0x08007201
 80071dc:	08007209 	.word	0x08007209
 80071e0:	0800721f 	.word	0x0800721f
 80071e4:	0800720f 	.word	0x0800720f
 80071e8:	0800721f 	.word	0x0800721f
 80071ec:	0800721f 	.word	0x0800721f
 80071f0:	0800721f 	.word	0x0800721f
 80071f4:	08007217 	.word	0x08007217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071f8:	f7fd f8d2 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 80071fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071fe:	e014      	b.n	800722a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007200:	f7fd f8e4 	bl	80043cc <HAL_RCC_GetPCLK2Freq>
 8007204:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007206:	e010      	b.n	800722a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007208:	4b1a      	ldr	r3, [pc, #104]	@ (8007274 <UART_SetConfig+0x5c0>)
 800720a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800720c:	e00d      	b.n	800722a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800720e:	f7fd f859 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 8007212:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007214:	e009      	b.n	800722a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007216:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800721a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800721c:	e005      	b.n	800722a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007228:	bf00      	nop
    }

    if (pclk != 0U)
 800722a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722c:	2b00      	cmp	r3, #0
 800722e:	d028      	beq.n	8007282 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007234:	4a10      	ldr	r2, [pc, #64]	@ (8007278 <UART_SetConfig+0x5c4>)
 8007236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800723a:	461a      	mov	r2, r3
 800723c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	085b      	lsrs	r3, r3, #1
 8007248:	441a      	add	r2, r3
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007252:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	2b0f      	cmp	r3, #15
 8007258:	d910      	bls.n	800727c <UART_SetConfig+0x5c8>
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007260:	d20c      	bcs.n	800727c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007262:	6a3b      	ldr	r3, [r7, #32]
 8007264:	b29a      	uxth	r2, r3
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	60da      	str	r2, [r3, #12]
 800726c:	e009      	b.n	8007282 <UART_SetConfig+0x5ce>
 800726e:	bf00      	nop
 8007270:	40008000 	.word	0x40008000
 8007274:	00f42400 	.word	0x00f42400
 8007278:	0800d1bc 	.word	0x0800d1bc
      }
      else
      {
        ret = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2201      	movs	r2, #1
 8007286:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	2201      	movs	r2, #1
 800728e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2200      	movs	r2, #0
 8007296:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2200      	movs	r2, #0
 800729c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800729e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3730      	adds	r7, #48	@ 0x30
 80072a6:	46bd      	mov	sp, r7
 80072a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080072ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b8:	f003 0308 	and.w	r3, r3, #8
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00a      	beq.n	80072d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00a      	beq.n	80072f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	430a      	orrs	r2, r1
 80072f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00a      	beq.n	800731a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	430a      	orrs	r2, r1
 8007318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800731e:	f003 0304 	and.w	r3, r3, #4
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00a      	beq.n	800733c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	430a      	orrs	r2, r1
 800733a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007340:	f003 0310 	and.w	r3, r3, #16
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00a      	beq.n	800735e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	430a      	orrs	r2, r1
 800735c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007362:	f003 0320 	and.w	r3, r3, #32
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00a      	beq.n	8007380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	430a      	orrs	r2, r1
 800737e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01a      	beq.n	80073c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073aa:	d10a      	bne.n	80073c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	605a      	str	r2, [r3, #4]
  }
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b098      	sub	sp, #96	@ 0x60
 80073f4:	af02      	add	r7, sp, #8
 80073f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007400:	f7fb ff18 	bl	8003234 <HAL_GetTick>
 8007404:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0308 	and.w	r3, r3, #8
 8007410:	2b08      	cmp	r3, #8
 8007412:	d12f      	bne.n	8007474 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007414:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800741c:	2200      	movs	r2, #0
 800741e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f88e 	bl	8007544 <UART_WaitOnFlagUntilTimeout>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d022      	beq.n	8007474 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007436:	e853 3f00 	ldrex	r3, [r3]
 800743a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800743c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800743e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007442:	653b      	str	r3, [r7, #80]	@ 0x50
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	461a      	mov	r2, r3
 800744a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800744c:	647b      	str	r3, [r7, #68]	@ 0x44
 800744e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007450:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007452:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007454:	e841 2300 	strex	r3, r2, [r1]
 8007458:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800745a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1e6      	bne.n	800742e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2220      	movs	r2, #32
 8007464:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e063      	b.n	800753c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0304 	and.w	r3, r3, #4
 800747e:	2b04      	cmp	r3, #4
 8007480:	d149      	bne.n	8007516 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007482:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800748a:	2200      	movs	r2, #0
 800748c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f857 	bl	8007544 <UART_WaitOnFlagUntilTimeout>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d03c      	beq.n	8007516 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a4:	e853 3f00 	ldrex	r3, [r3]
 80074a8:	623b      	str	r3, [r7, #32]
   return(result);
 80074aa:	6a3b      	ldr	r3, [r7, #32]
 80074ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	461a      	mov	r2, r3
 80074b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80074bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074c2:	e841 2300 	strex	r3, r2, [r1]
 80074c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1e6      	bne.n	800749c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3308      	adds	r3, #8
 80074d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	e853 3f00 	ldrex	r3, [r3]
 80074dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f023 0301 	bic.w	r3, r3, #1
 80074e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3308      	adds	r3, #8
 80074ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074ee:	61fa      	str	r2, [r7, #28]
 80074f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	69b9      	ldr	r1, [r7, #24]
 80074f4:	69fa      	ldr	r2, [r7, #28]
 80074f6:	e841 2300 	strex	r3, r2, [r1]
 80074fa:	617b      	str	r3, [r7, #20]
   return(result);
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1e5      	bne.n	80074ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2220      	movs	r2, #32
 8007506:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e012      	b.n	800753c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2220      	movs	r2, #32
 800751a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2220      	movs	r2, #32
 8007522:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3758      	adds	r7, #88	@ 0x58
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	603b      	str	r3, [r7, #0]
 8007550:	4613      	mov	r3, r2
 8007552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007554:	e04f      	b.n	80075f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755c:	d04b      	beq.n	80075f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800755e:	f7fb fe69 	bl	8003234 <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	429a      	cmp	r2, r3
 800756c:	d302      	bcc.n	8007574 <UART_WaitOnFlagUntilTimeout+0x30>
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e04e      	b.n	8007616 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0304 	and.w	r3, r3, #4
 8007582:	2b00      	cmp	r3, #0
 8007584:	d037      	beq.n	80075f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2b80      	cmp	r3, #128	@ 0x80
 800758a:	d034      	beq.n	80075f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2b40      	cmp	r3, #64	@ 0x40
 8007590:	d031      	beq.n	80075f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	f003 0308 	and.w	r3, r3, #8
 800759c:	2b08      	cmp	r3, #8
 800759e:	d110      	bne.n	80075c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2208      	movs	r2, #8
 80075a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 f95b 	bl	8007864 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2208      	movs	r2, #8
 80075b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e029      	b.n	8007616 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	69db      	ldr	r3, [r3, #28]
 80075c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075d0:	d111      	bne.n	80075f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f000 f941 	bl	8007864 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2220      	movs	r2, #32
 80075e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e00f      	b.n	8007616 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	69da      	ldr	r2, [r3, #28]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	4013      	ands	r3, r2
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	429a      	cmp	r2, r3
 8007604:	bf0c      	ite	eq
 8007606:	2301      	moveq	r3, #1
 8007608:	2300      	movne	r3, #0
 800760a:	b2db      	uxtb	r3, r3
 800760c:	461a      	mov	r2, r3
 800760e:	79fb      	ldrb	r3, [r7, #7]
 8007610:	429a      	cmp	r2, r3
 8007612:	d0a0      	beq.n	8007556 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
	...

08007620 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007620:	b480      	push	{r7}
 8007622:	b0a3      	sub	sp, #140	@ 0x8c
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	4613      	mov	r3, r2
 800762c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	88fa      	ldrh	r2, [r7, #6]
 8007638:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	88fa      	ldrh	r2, [r7, #6]
 8007640:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007652:	d10e      	bne.n	8007672 <UART_Start_Receive_IT+0x52>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d105      	bne.n	8007668 <UART_Start_Receive_IT+0x48>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007662:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007666:	e02d      	b.n	80076c4 <UART_Start_Receive_IT+0xa4>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	22ff      	movs	r2, #255	@ 0xff
 800766c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007670:	e028      	b.n	80076c4 <UART_Start_Receive_IT+0xa4>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10d      	bne.n	8007696 <UART_Start_Receive_IT+0x76>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d104      	bne.n	800768c <UART_Start_Receive_IT+0x6c>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	22ff      	movs	r2, #255	@ 0xff
 8007686:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800768a:	e01b      	b.n	80076c4 <UART_Start_Receive_IT+0xa4>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	227f      	movs	r2, #127	@ 0x7f
 8007690:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007694:	e016      	b.n	80076c4 <UART_Start_Receive_IT+0xa4>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800769e:	d10d      	bne.n	80076bc <UART_Start_Receive_IT+0x9c>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d104      	bne.n	80076b2 <UART_Start_Receive_IT+0x92>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	227f      	movs	r2, #127	@ 0x7f
 80076ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80076b0:	e008      	b.n	80076c4 <UART_Start_Receive_IT+0xa4>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	223f      	movs	r2, #63	@ 0x3f
 80076b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80076ba:	e003      	b.n	80076c4 <UART_Start_Receive_IT+0xa4>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2222      	movs	r2, #34	@ 0x22
 80076d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3308      	adds	r3, #8
 80076da:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076de:	e853 3f00 	ldrex	r3, [r3]
 80076e2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80076e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076e6:	f043 0301 	orr.w	r3, r3, #1
 80076ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3308      	adds	r3, #8
 80076f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80076f8:	673a      	str	r2, [r7, #112]	@ 0x70
 80076fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80076fe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007700:	e841 2300 	strex	r3, r2, [r1]
 8007704:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007706:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1e3      	bne.n	80076d4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007710:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007714:	d14f      	bne.n	80077b6 <UART_Start_Receive_IT+0x196>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800771c:	88fa      	ldrh	r2, [r7, #6]
 800771e:	429a      	cmp	r2, r3
 8007720:	d349      	bcc.n	80077b6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800772a:	d107      	bne.n	800773c <UART_Start_Receive_IT+0x11c>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d103      	bne.n	800773c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	4a47      	ldr	r2, [pc, #284]	@ (8007854 <UART_Start_Receive_IT+0x234>)
 8007738:	675a      	str	r2, [r3, #116]	@ 0x74
 800773a:	e002      	b.n	8007742 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	4a46      	ldr	r2, [pc, #280]	@ (8007858 <UART_Start_Receive_IT+0x238>)
 8007740:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d01a      	beq.n	8007780 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007752:	e853 3f00 	ldrex	r3, [r3]
 8007756:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800775a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800775e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	461a      	mov	r2, r3
 8007768:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800776c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800776e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007770:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007772:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007774:	e841 2300 	strex	r3, r2, [r1]
 8007778:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800777a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1e4      	bne.n	800774a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3308      	adds	r3, #8
 8007786:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800778a:	e853 3f00 	ldrex	r3, [r3]
 800778e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007796:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	3308      	adds	r3, #8
 800779e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80077a0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80077a2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80077a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077a8:	e841 2300 	strex	r3, r2, [r1]
 80077ac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80077ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1e5      	bne.n	8007780 <UART_Start_Receive_IT+0x160>
 80077b4:	e046      	b.n	8007844 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077be:	d107      	bne.n	80077d0 <UART_Start_Receive_IT+0x1b0>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d103      	bne.n	80077d0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4a24      	ldr	r2, [pc, #144]	@ (800785c <UART_Start_Receive_IT+0x23c>)
 80077cc:	675a      	str	r2, [r3, #116]	@ 0x74
 80077ce:	e002      	b.n	80077d6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4a23      	ldr	r2, [pc, #140]	@ (8007860 <UART_Start_Receive_IT+0x240>)
 80077d4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d019      	beq.n	8007812 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e6:	e853 3f00 	ldrex	r3, [r3]
 80077ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ee:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80077f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	461a      	mov	r2, r3
 80077fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80077fe:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007800:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007802:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007804:	e841 2300 	strex	r3, r2, [r1]
 8007808:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800780a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e6      	bne.n	80077de <UART_Start_Receive_IT+0x1be>
 8007810:	e018      	b.n	8007844 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	e853 3f00 	ldrex	r3, [r3]
 800781e:	613b      	str	r3, [r7, #16]
   return(result);
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	f043 0320 	orr.w	r3, r3, #32
 8007826:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	461a      	mov	r2, r3
 800782e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007830:	623b      	str	r3, [r7, #32]
 8007832:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007834:	69f9      	ldr	r1, [r7, #28]
 8007836:	6a3a      	ldr	r2, [r7, #32]
 8007838:	e841 2300 	strex	r3, r2, [r1]
 800783c:	61bb      	str	r3, [r7, #24]
   return(result);
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1e6      	bne.n	8007812 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	378c      	adds	r7, #140	@ 0x8c
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	08008085 	.word	0x08008085
 8007858:	08007d25 	.word	0x08007d25
 800785c:	08007b6d 	.word	0x08007b6d
 8007860:	080079b5 	.word	0x080079b5

08007864 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007864:	b480      	push	{r7}
 8007866:	b095      	sub	sp, #84	@ 0x54
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800787a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007880:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800788a:	643b      	str	r3, [r7, #64]	@ 0x40
 800788c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007890:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e6      	bne.n	800786c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3308      	adds	r3, #8
 80078a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078b4:	f023 0301 	bic.w	r3, r3, #1
 80078b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3308      	adds	r3, #8
 80078c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078ca:	e841 2300 	strex	r3, r2, [r1]
 80078ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1e3      	bne.n	800789e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d118      	bne.n	8007910 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	e853 3f00 	ldrex	r3, [r3]
 80078ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	f023 0310 	bic.w	r3, r3, #16
 80078f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	461a      	mov	r2, r3
 80078fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078fc:	61bb      	str	r3, [r7, #24]
 80078fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007900:	6979      	ldr	r1, [r7, #20]
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	e841 2300 	strex	r3, r2, [r1]
 8007908:	613b      	str	r3, [r7, #16]
   return(result);
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1e6      	bne.n	80078de <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2220      	movs	r2, #32
 8007914:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007924:	bf00      	nop
 8007926:	3754      	adds	r7, #84	@ 0x54
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800793c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f7ff f99a 	bl	8006c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007954:	bf00      	nop
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b088      	sub	sp, #32
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	60bb      	str	r3, [r7, #8]
   return(result);
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007978:	61fb      	str	r3, [r7, #28]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	61bb      	str	r3, [r7, #24]
 8007984:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007986:	6979      	ldr	r1, [r7, #20]
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	e841 2300 	strex	r3, r2, [r1]
 800798e:	613b      	str	r3, [r7, #16]
   return(result);
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e6      	bne.n	8007964 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2220      	movs	r2, #32
 800799a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7ff f965 	bl	8006c74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079aa:	bf00      	nop
 80079ac:	3720      	adds	r7, #32
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
	...

080079b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b09c      	sub	sp, #112	@ 0x70
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80079c2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079cc:	2b22      	cmp	r3, #34	@ 0x22
 80079ce:	f040 80be 	bne.w	8007b4e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80079dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80079e0:	b2d9      	uxtb	r1, r3
 80079e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079ec:	400a      	ands	r2, r1
 80079ee:	b2d2      	uxtb	r2, r2
 80079f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079f6:	1c5a      	adds	r2, r3, #1
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	3b01      	subs	r3, #1
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f040 80a1 	bne.w	8007b5e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a24:	e853 3f00 	ldrex	r3, [r3]
 8007a28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	461a      	mov	r2, r3
 8007a38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a3c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e6      	bne.n	8007a1c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3308      	adds	r3, #8
 8007a54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a60:	f023 0301 	bic.w	r3, r3, #1
 8007a64:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007a6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007a70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e5      	bne.n	8007a4e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2220      	movs	r2, #32
 8007a86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a33      	ldr	r2, [pc, #204]	@ (8007b68 <UART_RxISR_8BIT+0x1b4>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d01f      	beq.n	8007ae0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d018      	beq.n	8007ae0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab6:	e853 3f00 	ldrex	r3, [r3]
 8007aba:	623b      	str	r3, [r7, #32]
   return(result);
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ac2:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007acc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ace:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ad4:	e841 2300 	strex	r3, r2, [r1]
 8007ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e6      	bne.n	8007aae <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d12e      	bne.n	8007b46 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	e853 3f00 	ldrex	r3, [r3]
 8007afa:	60fb      	str	r3, [r7, #12]
   return(result);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f023 0310 	bic.w	r3, r3, #16
 8007b02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b0c:	61fb      	str	r3, [r7, #28]
 8007b0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	69b9      	ldr	r1, [r7, #24]
 8007b12:	69fa      	ldr	r2, [r7, #28]
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	617b      	str	r3, [r7, #20]
   return(result);
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e6      	bne.n	8007aee <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	f003 0310 	and.w	r3, r3, #16
 8007b2a:	2b10      	cmp	r3, #16
 8007b2c:	d103      	bne.n	8007b36 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2210      	movs	r2, #16
 8007b34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff f8ac 	bl	8006c9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b44:	e00b      	b.n	8007b5e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7fa ff46 	bl	80029d8 <HAL_UART_RxCpltCallback>
}
 8007b4c:	e007      	b.n	8007b5e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	699a      	ldr	r2, [r3, #24]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f042 0208 	orr.w	r2, r2, #8
 8007b5c:	619a      	str	r2, [r3, #24]
}
 8007b5e:	bf00      	nop
 8007b60:	3770      	adds	r7, #112	@ 0x70
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	40008000 	.word	0x40008000

08007b6c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b09c      	sub	sp, #112	@ 0x70
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007b7a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b84:	2b22      	cmp	r3, #34	@ 0x22
 8007b86:	f040 80be 	bne.w	8007d06 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b90:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b98:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007b9a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007b9e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ba8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bae:	1c9a      	adds	r2, r3, #2
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f040 80a1 	bne.w	8007d16 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007be2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007be4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007be8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bf4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007bf8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1e6      	bne.n	8007bd4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c18:	f023 0301 	bic.w	r3, r3, #1
 8007c1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3308      	adds	r3, #8
 8007c24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007c26:	643a      	str	r2, [r7, #64]	@ 0x40
 8007c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e5      	bne.n	8007c06 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a33      	ldr	r2, [pc, #204]	@ (8007d20 <UART_RxISR_16BIT+0x1b4>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d01f      	beq.n	8007c98 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d018      	beq.n	8007c98 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
 8007c6e:	e853 3f00 	ldrex	r3, [r3]
 8007c72:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007c7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	461a      	mov	r2, r3
 8007c82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c86:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c8c:	e841 2300 	strex	r3, r2, [r1]
 8007c90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1e6      	bne.n	8007c66 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d12e      	bne.n	8007cfe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	e853 3f00 	ldrex	r3, [r3]
 8007cb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	f023 0310 	bic.w	r3, r3, #16
 8007cba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007cc4:	61bb      	str	r3, [r7, #24]
 8007cc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc8:	6979      	ldr	r1, [r7, #20]
 8007cca:	69ba      	ldr	r2, [r7, #24]
 8007ccc:	e841 2300 	strex	r3, r2, [r1]
 8007cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e6      	bne.n	8007ca6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	f003 0310 	and.w	r3, r3, #16
 8007ce2:	2b10      	cmp	r3, #16
 8007ce4:	d103      	bne.n	8007cee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2210      	movs	r2, #16
 8007cec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7fe ffd0 	bl	8006c9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cfc:	e00b      	b.n	8007d16 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7fa fe6a 	bl	80029d8 <HAL_UART_RxCpltCallback>
}
 8007d04:	e007      	b.n	8007d16 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	699a      	ldr	r2, [r3, #24]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f042 0208 	orr.w	r2, r2, #8
 8007d14:	619a      	str	r2, [r3, #24]
}
 8007d16:	bf00      	nop
 8007d18:	3770      	adds	r7, #112	@ 0x70
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	40008000 	.word	0x40008000

08007d24 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b0ac      	sub	sp, #176	@ 0xb0
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007d32:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	69db      	ldr	r3, [r3, #28]
 8007d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d5a:	2b22      	cmp	r3, #34	@ 0x22
 8007d5c:	f040 8182 	bne.w	8008064 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007d66:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d6a:	e125      	b.n	8007fb8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d72:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d76:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007d7a:	b2d9      	uxtb	r1, r3
 8007d7c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d86:	400a      	ands	r2, r1
 8007d88:	b2d2      	uxtb	r2, r2
 8007d8a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d90:	1c5a      	adds	r2, r3, #1
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007db6:	f003 0307 	and.w	r3, r3, #7
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d053      	beq.n	8007e66 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007dbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d011      	beq.n	8007dee <UART_RxISR_8BIT_FIFOEN+0xca>
 8007dca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00b      	beq.n	8007dee <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007de4:	f043 0201 	orr.w	r2, r3, #1
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d011      	beq.n	8007e1e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007dfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007dfe:	f003 0301 	and.w	r3, r3, #1
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00b      	beq.n	8007e1e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e14:	f043 0204 	orr.w	r2, r3, #4
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e22:	f003 0304 	and.w	r3, r3, #4
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d011      	beq.n	8007e4e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007e2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00b      	beq.n	8007e4e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2204      	movs	r2, #4
 8007e3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e44:	f043 0202 	orr.w	r2, r3, #2
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d006      	beq.n	8007e66 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f7fe ff15 	bl	8006c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f040 80a2 	bne.w	8007fb8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e7c:	e853 3f00 	ldrex	r3, [r3]
 8007e80:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007e82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	461a      	mov	r2, r3
 8007e92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e98:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007e9c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007e9e:	e841 2300 	strex	r3, r2, [r1]
 8007ea2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007ea4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1e4      	bne.n	8007e74 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	3308      	adds	r3, #8
 8007eb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007eb4:	e853 3f00 	ldrex	r3, [r3]
 8007eb8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007eba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ebc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ec0:	f023 0301 	bic.w	r3, r3, #1
 8007ec4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3308      	adds	r3, #8
 8007ece:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007ed2:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007ed4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007ed8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007eda:	e841 2300 	strex	r3, r2, [r1]
 8007ede:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007ee0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1e1      	bne.n	8007eaa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2220      	movs	r2, #32
 8007eea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a5f      	ldr	r2, [pc, #380]	@ (800807c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d021      	beq.n	8007f48 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d01a      	beq.n	8007f48 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f1a:	e853 3f00 	ldrex	r3, [r3]
 8007f1e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f34:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f36:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f38:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007f3a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007f3c:	e841 2300 	strex	r3, r2, [r1]
 8007f40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007f42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1e4      	bne.n	8007f12 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d130      	bne.n	8007fb2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f5e:	e853 3f00 	ldrex	r3, [r3]
 8007f62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f66:	f023 0310 	bic.w	r3, r3, #16
 8007f6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f78:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f7a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f80:	e841 2300 	strex	r3, r2, [r1]
 8007f84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1e4      	bne.n	8007f56 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	f003 0310 	and.w	r3, r3, #16
 8007f96:	2b10      	cmp	r3, #16
 8007f98:	d103      	bne.n	8007fa2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2210      	movs	r2, #16
 8007fa0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f7fe fe76 	bl	8006c9c <HAL_UARTEx_RxEventCallback>
 8007fb0:	e002      	b.n	8007fb8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7fa fd10 	bl	80029d8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007fb8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d006      	beq.n	8007fce <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007fc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fc4:	f003 0320 	and.w	r3, r3, #32
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f47f aecf 	bne.w	8007d6c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fd4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007fd8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d049      	beq.n	8008074 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007fe6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d242      	bcs.n	8008074 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3308      	adds	r3, #8
 8007ff4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	e853 3f00 	ldrex	r3, [r3]
 8007ffc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008004:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	3308      	adds	r3, #8
 800800e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008012:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008014:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008016:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008018:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800801a:	e841 2300 	strex	r3, r2, [r1]
 800801e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1e3      	bne.n	8007fee <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a15      	ldr	r2, [pc, #84]	@ (8008080 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800802a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	e853 3f00 	ldrex	r3, [r3]
 8008038:	60bb      	str	r3, [r7, #8]
   return(result);
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f043 0320 	orr.w	r3, r3, #32
 8008040:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800804e:	61bb      	str	r3, [r7, #24]
 8008050:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008052:	6979      	ldr	r1, [r7, #20]
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	e841 2300 	strex	r3, r2, [r1]
 800805a:	613b      	str	r3, [r7, #16]
   return(result);
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1e4      	bne.n	800802c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008062:	e007      	b.n	8008074 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	699a      	ldr	r2, [r3, #24]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f042 0208 	orr.w	r2, r2, #8
 8008072:	619a      	str	r2, [r3, #24]
}
 8008074:	bf00      	nop
 8008076:	37b0      	adds	r7, #176	@ 0xb0
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	40008000 	.word	0x40008000
 8008080:	080079b5 	.word	0x080079b5

08008084 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b0ae      	sub	sp, #184	@ 0xb8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008092:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	69db      	ldr	r3, [r3, #28]
 800809c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080ba:	2b22      	cmp	r3, #34	@ 0x22
 80080bc:	f040 8186 	bne.w	80083cc <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80080c6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080ca:	e129      	b.n	8008320 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80080de:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80080e2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80080e6:	4013      	ands	r3, r2
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80080ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080f4:	1c9a      	adds	r2, r3, #2
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008100:	b29b      	uxth	r3, r3
 8008102:	3b01      	subs	r3, #1
 8008104:	b29a      	uxth	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008116:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800811a:	f003 0307 	and.w	r3, r3, #7
 800811e:	2b00      	cmp	r3, #0
 8008120:	d053      	beq.n	80081ca <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008122:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	d011      	beq.n	8008152 <UART_RxISR_16BIT_FIFOEN+0xce>
 800812e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00b      	beq.n	8008152 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2201      	movs	r2, #1
 8008140:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008148:	f043 0201 	orr.w	r2, r3, #1
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008152:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008156:	f003 0302 	and.w	r3, r3, #2
 800815a:	2b00      	cmp	r3, #0
 800815c:	d011      	beq.n	8008182 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800815e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008162:	f003 0301 	and.w	r3, r3, #1
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00b      	beq.n	8008182 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2202      	movs	r2, #2
 8008170:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008178:	f043 0204 	orr.w	r2, r3, #4
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008182:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008186:	f003 0304 	and.w	r3, r3, #4
 800818a:	2b00      	cmp	r3, #0
 800818c:	d011      	beq.n	80081b2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800818e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00b      	beq.n	80081b2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2204      	movs	r2, #4
 80081a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081a8:	f043 0202 	orr.w	r2, r3, #2
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d006      	beq.n	80081ca <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7fe fd63 	bl	8006c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f040 80a4 	bne.w	8008320 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80081e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	461a      	mov	r2, r3
 80081f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80081fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008200:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008202:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008206:	e841 2300 	strex	r3, r2, [r1]
 800820a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800820c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1e2      	bne.n	80081d8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3308      	adds	r3, #8
 8008218:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800821c:	e853 3f00 	ldrex	r3, [r3]
 8008220:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008222:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008224:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008228:	f023 0301 	bic.w	r3, r3, #1
 800822c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	3308      	adds	r3, #8
 8008236:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800823a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800823c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008240:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008242:	e841 2300 	strex	r3, r2, [r1]
 8008246:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008248:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1e1      	bne.n	8008212 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2220      	movs	r2, #32
 8008252:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a5f      	ldr	r2, [pc, #380]	@ (80083e4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d021      	beq.n	80082b0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008276:	2b00      	cmp	r3, #0
 8008278:	d01a      	beq.n	80082b0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008280:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008282:	e853 3f00 	ldrex	r3, [r3]
 8008286:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008288:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800828a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800828e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	461a      	mov	r2, r3
 8008298:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800829c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800829e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80082a4:	e841 2300 	strex	r3, r2, [r1]
 80082a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80082aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1e4      	bne.n	800827a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d130      	bne.n	800831a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c6:	e853 3f00 	ldrex	r3, [r3]
 80082ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ce:	f023 0310 	bic.w	r3, r3, #16
 80082d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	461a      	mov	r2, r3
 80082dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80082e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80082e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082e8:	e841 2300 	strex	r3, r2, [r1]
 80082ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1e4      	bne.n	80082be <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	f003 0310 	and.w	r3, r3, #16
 80082fe:	2b10      	cmp	r3, #16
 8008300:	d103      	bne.n	800830a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2210      	movs	r2, #16
 8008308:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7fe fcc2 	bl	8006c9c <HAL_UARTEx_RxEventCallback>
 8008318:	e002      	b.n	8008320 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f7fa fb5c 	bl	80029d8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008320:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008324:	2b00      	cmp	r3, #0
 8008326:	d006      	beq.n	8008336 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008328:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800832c:	f003 0320 	and.w	r3, r3, #32
 8008330:	2b00      	cmp	r3, #0
 8008332:	f47f aecb 	bne.w	80080cc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800833c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008340:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008344:	2b00      	cmp	r3, #0
 8008346:	d049      	beq.n	80083dc <UART_RxISR_16BIT_FIFOEN+0x358>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800834e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008352:	429a      	cmp	r2, r3
 8008354:	d242      	bcs.n	80083dc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	3308      	adds	r3, #8
 800835c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008360:	e853 3f00 	ldrex	r3, [r3]
 8008364:	623b      	str	r3, [r7, #32]
   return(result);
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800836c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3308      	adds	r3, #8
 8008376:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800837a:	633a      	str	r2, [r7, #48]	@ 0x30
 800837c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008380:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008382:	e841 2300 	strex	r3, r2, [r1]
 8008386:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1e3      	bne.n	8008356 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a15      	ldr	r2, [pc, #84]	@ (80083e8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008392:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	e853 3f00 	ldrex	r3, [r3]
 80083a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f043 0320 	orr.w	r3, r3, #32
 80083a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	461a      	mov	r2, r3
 80083b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083b6:	61fb      	str	r3, [r7, #28]
 80083b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ba:	69b9      	ldr	r1, [r7, #24]
 80083bc:	69fa      	ldr	r2, [r7, #28]
 80083be:	e841 2300 	strex	r3, r2, [r1]
 80083c2:	617b      	str	r3, [r7, #20]
   return(result);
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1e4      	bne.n	8008394 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083ca:	e007      	b.n	80083dc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	699a      	ldr	r2, [r3, #24]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f042 0208 	orr.w	r2, r2, #8
 80083da:	619a      	str	r2, [r3, #24]
}
 80083dc:	bf00      	nop
 80083de:	37b8      	adds	r7, #184	@ 0xb8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	40008000 	.word	0x40008000
 80083e8:	08007b6d 	.word	0x08007b6d

080083ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008436:	2b01      	cmp	r3, #1
 8008438:	d101      	bne.n	800843e <HAL_UARTEx_DisableFifoMode+0x16>
 800843a:	2302      	movs	r3, #2
 800843c:	e027      	b.n	800848e <HAL_UARTEx_DisableFifoMode+0x66>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2224      	movs	r2, #36	@ 0x24
 800844a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f022 0201 	bic.w	r2, r2, #1
 8008464:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800846c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2220      	movs	r2, #32
 8008480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d101      	bne.n	80084b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084ae:	2302      	movs	r3, #2
 80084b0:	e02d      	b.n	800850e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2224      	movs	r2, #36	@ 0x24
 80084be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f022 0201 	bic.w	r2, r2, #1
 80084d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f850 	bl	8008594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2220      	movs	r2, #32
 8008500:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008526:	2b01      	cmp	r3, #1
 8008528:	d101      	bne.n	800852e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800852a:	2302      	movs	r3, #2
 800852c:	e02d      	b.n	800858a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2201      	movs	r2, #1
 8008532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2224      	movs	r2, #36	@ 0x24
 800853a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f022 0201 	bic.w	r2, r2, #1
 8008554:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	430a      	orrs	r2, r1
 8008568:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f812 	bl	8008594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2220      	movs	r2, #32
 800857c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d108      	bne.n	80085b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085b4:	e031      	b.n	800861a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085b6:	2308      	movs	r3, #8
 80085b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085ba:	2308      	movs	r3, #8
 80085bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	0e5b      	lsrs	r3, r3, #25
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	f003 0307 	and.w	r3, r3, #7
 80085cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	0f5b      	lsrs	r3, r3, #29
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	f003 0307 	and.w	r3, r3, #7
 80085dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085de:	7bbb      	ldrb	r3, [r7, #14]
 80085e0:	7b3a      	ldrb	r2, [r7, #12]
 80085e2:	4911      	ldr	r1, [pc, #68]	@ (8008628 <UARTEx_SetNbDataToProcess+0x94>)
 80085e4:	5c8a      	ldrb	r2, [r1, r2]
 80085e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80085ea:	7b3a      	ldrb	r2, [r7, #12]
 80085ec:	490f      	ldr	r1, [pc, #60]	@ (800862c <UARTEx_SetNbDataToProcess+0x98>)
 80085ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
 80085fe:	7b7a      	ldrb	r2, [r7, #13]
 8008600:	4909      	ldr	r1, [pc, #36]	@ (8008628 <UARTEx_SetNbDataToProcess+0x94>)
 8008602:	5c8a      	ldrb	r2, [r1, r2]
 8008604:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008608:	7b7a      	ldrb	r2, [r7, #13]
 800860a:	4908      	ldr	r1, [pc, #32]	@ (800862c <UARTEx_SetNbDataToProcess+0x98>)
 800860c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800860e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008612:	b29a      	uxth	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800861a:	bf00      	nop
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	0800d1d4 	.word	0x0800d1d4
 800862c:	0800d1dc 	.word	0x0800d1dc

08008630 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b08a      	sub	sp, #40	@ 0x28
 8008634:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8008636:	2300      	movs	r3, #0
 8008638:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800863a:	4b7e      	ldr	r3, [pc, #504]	@ (8008834 <xTaskIncrementTick+0x204>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	f040 80ed 	bne.w	800881e <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008644:	4b7c      	ldr	r3, [pc, #496]	@ (8008838 <xTaskIncrementTick+0x208>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3301      	adds	r3, #1
 800864a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800864c:	4a7a      	ldr	r2, [pc, #488]	@ (8008838 <xTaskIncrementTick+0x208>)
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d121      	bne.n	800869c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8008658:	4b78      	ldr	r3, [pc, #480]	@ (800883c <xTaskIncrementTick+0x20c>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00b      	beq.n	800867a <xTaskIncrementTick+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	e7fd      	b.n	8008676 <xTaskIncrementTick+0x46>
 800867a:	4b70      	ldr	r3, [pc, #448]	@ (800883c <xTaskIncrementTick+0x20c>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	61fb      	str	r3, [r7, #28]
 8008680:	4b6f      	ldr	r3, [pc, #444]	@ (8008840 <xTaskIncrementTick+0x210>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a6d      	ldr	r2, [pc, #436]	@ (800883c <xTaskIncrementTick+0x20c>)
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	4a6d      	ldr	r2, [pc, #436]	@ (8008840 <xTaskIncrementTick+0x210>)
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	6013      	str	r3, [r2, #0]
 800868e:	4b6d      	ldr	r3, [pc, #436]	@ (8008844 <xTaskIncrementTick+0x214>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	3301      	adds	r3, #1
 8008694:	4a6b      	ldr	r2, [pc, #428]	@ (8008844 <xTaskIncrementTick+0x214>)
 8008696:	6013      	str	r3, [r2, #0]
 8008698:	f000 f93e 	bl	8008918 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800869c:	4b6a      	ldr	r3, [pc, #424]	@ (8008848 <xTaskIncrementTick+0x218>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	6a3a      	ldr	r2, [r7, #32]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	f0c0 80a6 	bcc.w	80087f4 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086a8:	4b64      	ldr	r3, [pc, #400]	@ (800883c <xTaskIncrementTick+0x20c>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d104      	bne.n	80086bc <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086b2:	4b65      	ldr	r3, [pc, #404]	@ (8008848 <xTaskIncrementTick+0x218>)
 80086b4:	f04f 32ff 	mov.w	r2, #4294967295
 80086b8:	601a      	str	r2, [r3, #0]
                    break;
 80086ba:	e09b      	b.n	80087f4 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086bc:	4b5f      	ldr	r3, [pc, #380]	@ (800883c <xTaskIncrementTick+0x20c>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80086cc:	6a3a      	ldr	r2, [r7, #32]
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d203      	bcs.n	80086dc <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80086d4:	4a5c      	ldr	r2, [pc, #368]	@ (8008848 <xTaskIncrementTick+0x218>)
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80086da:	e08b      	b.n	80087f4 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	613b      	str	r3, [r7, #16]
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	69ba      	ldr	r2, [r7, #24]
 80086e8:	68d2      	ldr	r2, [r2, #12]
 80086ea:	609a      	str	r2, [r3, #8]
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	69ba      	ldr	r2, [r7, #24]
 80086f2:	6892      	ldr	r2, [r2, #8]
 80086f4:	605a      	str	r2, [r3, #4]
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	3304      	adds	r3, #4
 80086fe:	429a      	cmp	r2, r3
 8008700:	d103      	bne.n	800870a <xTaskIncrementTick+0xda>
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	68da      	ldr	r2, [r3, #12]
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	605a      	str	r2, [r3, #4]
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	2200      	movs	r2, #0
 800870e:	615a      	str	r2, [r3, #20]
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	1e5a      	subs	r2, r3, #1
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800871e:	2b00      	cmp	r3, #0
 8008720:	d01e      	beq.n	8008760 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	69db      	ldr	r3, [r3, #28]
 800872c:	69ba      	ldr	r2, [r7, #24]
 800872e:	6a12      	ldr	r2, [r2, #32]
 8008730:	609a      	str	r2, [r3, #8]
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	69ba      	ldr	r2, [r7, #24]
 8008738:	69d2      	ldr	r2, [r2, #28]
 800873a:	605a      	str	r2, [r3, #4]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	685a      	ldr	r2, [r3, #4]
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	3318      	adds	r3, #24
 8008744:	429a      	cmp	r2, r3
 8008746:	d103      	bne.n	8008750 <xTaskIncrementTick+0x120>
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	6a1a      	ldr	r2, [r3, #32]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	605a      	str	r2, [r3, #4]
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	2200      	movs	r2, #0
 8008754:	629a      	str	r2, [r3, #40]	@ 0x28
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	1e5a      	subs	r2, r3, #1
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008764:	2201      	movs	r2, #1
 8008766:	409a      	lsls	r2, r3
 8008768:	4b38      	ldr	r3, [pc, #224]	@ (800884c <xTaskIncrementTick+0x21c>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4313      	orrs	r3, r2
 800876e:	4a37      	ldr	r2, [pc, #220]	@ (800884c <xTaskIncrementTick+0x21c>)
 8008770:	6013      	str	r3, [r2, #0]
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008776:	4936      	ldr	r1, [pc, #216]	@ (8008850 <xTaskIncrementTick+0x220>)
 8008778:	4613      	mov	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	4413      	add	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	440b      	add	r3, r1
 8008782:	3304      	adds	r3, #4
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	60bb      	str	r3, [r7, #8]
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	609a      	str	r2, [r3, #8]
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	689a      	ldr	r2, [r3, #8]
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	60da      	str	r2, [r3, #12]
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	69ba      	ldr	r2, [r7, #24]
 800879c:	3204      	adds	r2, #4
 800879e:	605a      	str	r2, [r3, #4]
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	1d1a      	adds	r2, r3, #4
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	609a      	str	r2, [r3, #8]
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ac:	4613      	mov	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4a26      	ldr	r2, [pc, #152]	@ (8008850 <xTaskIncrementTick+0x220>)
 80087b6:	441a      	add	r2, r3
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	615a      	str	r2, [r3, #20]
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087c0:	4923      	ldr	r1, [pc, #140]	@ (8008850 <xTaskIncrementTick+0x220>)
 80087c2:	4613      	mov	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	440b      	add	r3, r1
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	1c59      	adds	r1, r3, #1
 80087d0:	481f      	ldr	r0, [pc, #124]	@ (8008850 <xTaskIncrementTick+0x220>)
 80087d2:	4613      	mov	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4403      	add	r3, r0
 80087dc:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087e2:	4b1c      	ldr	r3, [pc, #112]	@ (8008854 <xTaskIncrementTick+0x224>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e8:	429a      	cmp	r2, r3
 80087ea:	f67f af5d 	bls.w	80086a8 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 80087ee:	2301      	movs	r3, #1
 80087f0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087f2:	e759      	b.n	80086a8 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087f4:	4b17      	ldr	r3, [pc, #92]	@ (8008854 <xTaskIncrementTick+0x224>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087fa:	4915      	ldr	r1, [pc, #84]	@ (8008850 <xTaskIncrementTick+0x220>)
 80087fc:	4613      	mov	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	440b      	add	r3, r1
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d901      	bls.n	8008810 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 800880c:	2301      	movs	r3, #1
 800880e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8008810:	4b11      	ldr	r3, [pc, #68]	@ (8008858 <xTaskIncrementTick+0x228>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d007      	beq.n	8008828 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8008818:	2301      	movs	r3, #1
 800881a:	627b      	str	r3, [r7, #36]	@ 0x24
 800881c:	e004      	b.n	8008828 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800881e:	4b0f      	ldr	r3, [pc, #60]	@ (800885c <xTaskIncrementTick+0x22c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	3301      	adds	r3, #1
 8008824:	4a0d      	ldr	r2, [pc, #52]	@ (800885c <xTaskIncrementTick+0x22c>)
 8008826:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8008828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800882a:	4618      	mov	r0, r3
 800882c:	3728      	adds	r7, #40	@ 0x28
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	200007a4 	.word	0x200007a4
 8008838:	2000078c 	.word	0x2000078c
 800883c:	20000784 	.word	0x20000784
 8008840:	20000788 	.word	0x20000788
 8008844:	2000079c 	.word	0x2000079c
 8008848:	200007a0 	.word	0x200007a0
 800884c:	20000790 	.word	0x20000790
 8008850:	20000720 	.word	0x20000720
 8008854:	2000071c 	.word	0x2000071c
 8008858:	20000798 	.word	0x20000798
 800885c:	20000794 	.word	0x20000794

08008860 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008860:	b480      	push	{r7}
 8008862:	b087      	sub	sp, #28
 8008864:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008866:	4b27      	ldr	r3, [pc, #156]	@ (8008904 <vTaskSwitchContext+0xa4>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800886e:	4b26      	ldr	r3, [pc, #152]	@ (8008908 <vTaskSwitchContext+0xa8>)
 8008870:	2201      	movs	r2, #1
 8008872:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8008874:	e040      	b.n	80088f8 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8008876:	4b24      	ldr	r3, [pc, #144]	@ (8008908 <vTaskSwitchContext+0xa8>)
 8008878:	2200      	movs	r2, #0
 800887a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800887c:	4b23      	ldr	r3, [pc, #140]	@ (800890c <vTaskSwitchContext+0xac>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	fab3 f383 	clz	r3, r3
 8008888:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800888a:	7afb      	ldrb	r3, [r7, #11]
 800888c:	f1c3 031f 	rsb	r3, r3, #31
 8008890:	617b      	str	r3, [r7, #20]
 8008892:	491f      	ldr	r1, [pc, #124]	@ (8008910 <vTaskSwitchContext+0xb0>)
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	4613      	mov	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	440b      	add	r3, r1
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d10b      	bne.n	80088be <vTaskSwitchContext+0x5e>
        __asm volatile
 80088a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	607b      	str	r3, [r7, #4]
    }
 80088b8:	bf00      	nop
 80088ba:	bf00      	nop
 80088bc:	e7fd      	b.n	80088ba <vTaskSwitchContext+0x5a>
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	4613      	mov	r3, r2
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4413      	add	r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4a11      	ldr	r2, [pc, #68]	@ (8008910 <vTaskSwitchContext+0xb0>)
 80088ca:	4413      	add	r3, r2
 80088cc:	613b      	str	r3, [r7, #16]
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	605a      	str	r2, [r3, #4]
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	3308      	adds	r3, #8
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d104      	bne.n	80088ee <vTaskSwitchContext+0x8e>
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	685a      	ldr	r2, [r3, #4]
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	605a      	str	r2, [r3, #4]
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	4a07      	ldr	r2, [pc, #28]	@ (8008914 <vTaskSwitchContext+0xb4>)
 80088f6:	6013      	str	r3, [r2, #0]
}
 80088f8:	bf00      	nop
 80088fa:	371c      	adds	r7, #28
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr
 8008904:	200007a4 	.word	0x200007a4
 8008908:	20000798 	.word	0x20000798
 800890c:	20000790 	.word	0x20000790
 8008910:	20000720 	.word	0x20000720
 8008914:	2000071c 	.word	0x2000071c

08008918 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008918:	b480      	push	{r7}
 800891a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800891c:	4b0a      	ldr	r3, [pc, #40]	@ (8008948 <prvResetNextTaskUnblockTime+0x30>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d104      	bne.n	8008930 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8008926:	4b09      	ldr	r3, [pc, #36]	@ (800894c <prvResetNextTaskUnblockTime+0x34>)
 8008928:	f04f 32ff 	mov.w	r2, #4294967295
 800892c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800892e:	e005      	b.n	800893c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008930:	4b05      	ldr	r3, [pc, #20]	@ (8008948 <prvResetNextTaskUnblockTime+0x30>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a04      	ldr	r2, [pc, #16]	@ (800894c <prvResetNextTaskUnblockTime+0x34>)
 800893a:	6013      	str	r3, [r2, #0]
}
 800893c:	bf00      	nop
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	20000784 	.word	0x20000784
 800894c:	200007a0 	.word	0x200007a0

08008950 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008950:	4b07      	ldr	r3, [pc, #28]	@ (8008970 <pxCurrentTCBConst2>)
 8008952:	6819      	ldr	r1, [r3, #0]
 8008954:	6808      	ldr	r0, [r1, #0]
 8008956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895a:	f380 8809 	msr	PSP, r0
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f04f 0000 	mov.w	r0, #0
 8008966:	f380 8811 	msr	BASEPRI, r0
 800896a:	4770      	bx	lr
 800896c:	f3af 8000 	nop.w

08008970 <pxCurrentTCBConst2>:
 8008970:	2000071c 	.word	0x2000071c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008974:	bf00      	nop
 8008976:	bf00      	nop
	...

08008980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008980:	f3ef 8009 	mrs	r0, PSP
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	4b15      	ldr	r3, [pc, #84]	@ (80089e0 <pxCurrentTCBConst>)
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	f01e 0f10 	tst.w	lr, #16
 8008990:	bf08      	it	eq
 8008992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899a:	6010      	str	r0, [r2, #0]
 800899c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80089a4:	f380 8811 	msr	BASEPRI, r0
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f7ff ff56 	bl	8008860 <vTaskSwitchContext>
 80089b4:	f04f 0000 	mov.w	r0, #0
 80089b8:	f380 8811 	msr	BASEPRI, r0
 80089bc:	bc09      	pop	{r0, r3}
 80089be:	6819      	ldr	r1, [r3, #0]
 80089c0:	6808      	ldr	r0, [r1, #0]
 80089c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c6:	f01e 0f10 	tst.w	lr, #16
 80089ca:	bf08      	it	eq
 80089cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089d0:	f380 8809 	msr	PSP, r0
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	f3af 8000 	nop.w

080089e0 <pxCurrentTCBConst>:
 80089e0:	2000071c 	.word	0x2000071c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop

080089e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
        __asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	607b      	str	r3, [r7, #4]
    }
 8008a00:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008a02:	f7ff fe15 	bl	8008630 <xTaskIncrementTick>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d003      	beq.n	8008a14 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a0c:	4b06      	ldr	r3, [pc, #24]	@ (8008a28 <SysTick_Handler+0x40>)
 8008a0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	2300      	movs	r3, #0
 8008a16:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8008a1e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8008a20:	bf00      	nop
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	e000ed04 	.word	0xe000ed04

08008a2c <__cvt>:
 8008a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a30:	ec57 6b10 	vmov	r6, r7, d0
 8008a34:	2f00      	cmp	r7, #0
 8008a36:	460c      	mov	r4, r1
 8008a38:	4619      	mov	r1, r3
 8008a3a:	463b      	mov	r3, r7
 8008a3c:	bfbb      	ittet	lt
 8008a3e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008a42:	461f      	movlt	r7, r3
 8008a44:	2300      	movge	r3, #0
 8008a46:	232d      	movlt	r3, #45	@ 0x2d
 8008a48:	700b      	strb	r3, [r1, #0]
 8008a4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a4c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008a50:	4691      	mov	r9, r2
 8008a52:	f023 0820 	bic.w	r8, r3, #32
 8008a56:	bfbc      	itt	lt
 8008a58:	4632      	movlt	r2, r6
 8008a5a:	4616      	movlt	r6, r2
 8008a5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008a60:	d005      	beq.n	8008a6e <__cvt+0x42>
 8008a62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008a66:	d100      	bne.n	8008a6a <__cvt+0x3e>
 8008a68:	3401      	adds	r4, #1
 8008a6a:	2102      	movs	r1, #2
 8008a6c:	e000      	b.n	8008a70 <__cvt+0x44>
 8008a6e:	2103      	movs	r1, #3
 8008a70:	ab03      	add	r3, sp, #12
 8008a72:	9301      	str	r3, [sp, #4]
 8008a74:	ab02      	add	r3, sp, #8
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	ec47 6b10 	vmov	d0, r6, r7
 8008a7c:	4653      	mov	r3, sl
 8008a7e:	4622      	mov	r2, r4
 8008a80:	f001 f892 	bl	8009ba8 <_dtoa_r>
 8008a84:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008a88:	4605      	mov	r5, r0
 8008a8a:	d119      	bne.n	8008ac0 <__cvt+0x94>
 8008a8c:	f019 0f01 	tst.w	r9, #1
 8008a90:	d00e      	beq.n	8008ab0 <__cvt+0x84>
 8008a92:	eb00 0904 	add.w	r9, r0, r4
 8008a96:	2200      	movs	r2, #0
 8008a98:	2300      	movs	r3, #0
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	4639      	mov	r1, r7
 8008a9e:	f7f8 f83b 	bl	8000b18 <__aeabi_dcmpeq>
 8008aa2:	b108      	cbz	r0, 8008aa8 <__cvt+0x7c>
 8008aa4:	f8cd 900c 	str.w	r9, [sp, #12]
 8008aa8:	2230      	movs	r2, #48	@ 0x30
 8008aaa:	9b03      	ldr	r3, [sp, #12]
 8008aac:	454b      	cmp	r3, r9
 8008aae:	d31e      	bcc.n	8008aee <__cvt+0xc2>
 8008ab0:	9b03      	ldr	r3, [sp, #12]
 8008ab2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ab4:	1b5b      	subs	r3, r3, r5
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	6013      	str	r3, [r2, #0]
 8008aba:	b004      	add	sp, #16
 8008abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ac0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008ac4:	eb00 0904 	add.w	r9, r0, r4
 8008ac8:	d1e5      	bne.n	8008a96 <__cvt+0x6a>
 8008aca:	7803      	ldrb	r3, [r0, #0]
 8008acc:	2b30      	cmp	r3, #48	@ 0x30
 8008ace:	d10a      	bne.n	8008ae6 <__cvt+0xba>
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	4639      	mov	r1, r7
 8008ad8:	f7f8 f81e 	bl	8000b18 <__aeabi_dcmpeq>
 8008adc:	b918      	cbnz	r0, 8008ae6 <__cvt+0xba>
 8008ade:	f1c4 0401 	rsb	r4, r4, #1
 8008ae2:	f8ca 4000 	str.w	r4, [sl]
 8008ae6:	f8da 3000 	ldr.w	r3, [sl]
 8008aea:	4499      	add	r9, r3
 8008aec:	e7d3      	b.n	8008a96 <__cvt+0x6a>
 8008aee:	1c59      	adds	r1, r3, #1
 8008af0:	9103      	str	r1, [sp, #12]
 8008af2:	701a      	strb	r2, [r3, #0]
 8008af4:	e7d9      	b.n	8008aaa <__cvt+0x7e>

08008af6 <__exponent>:
 8008af6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008af8:	2900      	cmp	r1, #0
 8008afa:	bfba      	itte	lt
 8008afc:	4249      	neglt	r1, r1
 8008afe:	232d      	movlt	r3, #45	@ 0x2d
 8008b00:	232b      	movge	r3, #43	@ 0x2b
 8008b02:	2909      	cmp	r1, #9
 8008b04:	7002      	strb	r2, [r0, #0]
 8008b06:	7043      	strb	r3, [r0, #1]
 8008b08:	dd29      	ble.n	8008b5e <__exponent+0x68>
 8008b0a:	f10d 0307 	add.w	r3, sp, #7
 8008b0e:	461d      	mov	r5, r3
 8008b10:	270a      	movs	r7, #10
 8008b12:	461a      	mov	r2, r3
 8008b14:	fbb1 f6f7 	udiv	r6, r1, r7
 8008b18:	fb07 1416 	mls	r4, r7, r6, r1
 8008b1c:	3430      	adds	r4, #48	@ 0x30
 8008b1e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008b22:	460c      	mov	r4, r1
 8008b24:	2c63      	cmp	r4, #99	@ 0x63
 8008b26:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b2a:	4631      	mov	r1, r6
 8008b2c:	dcf1      	bgt.n	8008b12 <__exponent+0x1c>
 8008b2e:	3130      	adds	r1, #48	@ 0x30
 8008b30:	1e94      	subs	r4, r2, #2
 8008b32:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008b36:	1c41      	adds	r1, r0, #1
 8008b38:	4623      	mov	r3, r4
 8008b3a:	42ab      	cmp	r3, r5
 8008b3c:	d30a      	bcc.n	8008b54 <__exponent+0x5e>
 8008b3e:	f10d 0309 	add.w	r3, sp, #9
 8008b42:	1a9b      	subs	r3, r3, r2
 8008b44:	42ac      	cmp	r4, r5
 8008b46:	bf88      	it	hi
 8008b48:	2300      	movhi	r3, #0
 8008b4a:	3302      	adds	r3, #2
 8008b4c:	4403      	add	r3, r0
 8008b4e:	1a18      	subs	r0, r3, r0
 8008b50:	b003      	add	sp, #12
 8008b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b54:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008b58:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008b5c:	e7ed      	b.n	8008b3a <__exponent+0x44>
 8008b5e:	2330      	movs	r3, #48	@ 0x30
 8008b60:	3130      	adds	r1, #48	@ 0x30
 8008b62:	7083      	strb	r3, [r0, #2]
 8008b64:	70c1      	strb	r1, [r0, #3]
 8008b66:	1d03      	adds	r3, r0, #4
 8008b68:	e7f1      	b.n	8008b4e <__exponent+0x58>
	...

08008b6c <_printf_float>:
 8008b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b70:	b08d      	sub	sp, #52	@ 0x34
 8008b72:	460c      	mov	r4, r1
 8008b74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008b78:	4616      	mov	r6, r2
 8008b7a:	461f      	mov	r7, r3
 8008b7c:	4605      	mov	r5, r0
 8008b7e:	f000 fefd 	bl	800997c <_localeconv_r>
 8008b82:	6803      	ldr	r3, [r0, #0]
 8008b84:	9304      	str	r3, [sp, #16]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7f7 fb9a 	bl	80002c0 <strlen>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b90:	f8d8 3000 	ldr.w	r3, [r8]
 8008b94:	9005      	str	r0, [sp, #20]
 8008b96:	3307      	adds	r3, #7
 8008b98:	f023 0307 	bic.w	r3, r3, #7
 8008b9c:	f103 0208 	add.w	r2, r3, #8
 8008ba0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008ba4:	f8d4 b000 	ldr.w	fp, [r4]
 8008ba8:	f8c8 2000 	str.w	r2, [r8]
 8008bac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008bb0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008bb4:	9307      	str	r3, [sp, #28]
 8008bb6:	f8cd 8018 	str.w	r8, [sp, #24]
 8008bba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008bbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bc2:	4b9c      	ldr	r3, [pc, #624]	@ (8008e34 <_printf_float+0x2c8>)
 8008bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bc8:	f7f7 ffd8 	bl	8000b7c <__aeabi_dcmpun>
 8008bcc:	bb70      	cbnz	r0, 8008c2c <_printf_float+0xc0>
 8008bce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bd2:	4b98      	ldr	r3, [pc, #608]	@ (8008e34 <_printf_float+0x2c8>)
 8008bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd8:	f7f7 ffb2 	bl	8000b40 <__aeabi_dcmple>
 8008bdc:	bb30      	cbnz	r0, 8008c2c <_printf_float+0xc0>
 8008bde:	2200      	movs	r2, #0
 8008be0:	2300      	movs	r3, #0
 8008be2:	4640      	mov	r0, r8
 8008be4:	4649      	mov	r1, r9
 8008be6:	f7f7 ffa1 	bl	8000b2c <__aeabi_dcmplt>
 8008bea:	b110      	cbz	r0, 8008bf2 <_printf_float+0x86>
 8008bec:	232d      	movs	r3, #45	@ 0x2d
 8008bee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bf2:	4a91      	ldr	r2, [pc, #580]	@ (8008e38 <_printf_float+0x2cc>)
 8008bf4:	4b91      	ldr	r3, [pc, #580]	@ (8008e3c <_printf_float+0x2d0>)
 8008bf6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008bfa:	bf94      	ite	ls
 8008bfc:	4690      	movls	r8, r2
 8008bfe:	4698      	movhi	r8, r3
 8008c00:	2303      	movs	r3, #3
 8008c02:	6123      	str	r3, [r4, #16]
 8008c04:	f02b 0304 	bic.w	r3, fp, #4
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	f04f 0900 	mov.w	r9, #0
 8008c0e:	9700      	str	r7, [sp, #0]
 8008c10:	4633      	mov	r3, r6
 8008c12:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008c14:	4621      	mov	r1, r4
 8008c16:	4628      	mov	r0, r5
 8008c18:	f000 f9d2 	bl	8008fc0 <_printf_common>
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	f040 808d 	bne.w	8008d3c <_printf_float+0x1d0>
 8008c22:	f04f 30ff 	mov.w	r0, #4294967295
 8008c26:	b00d      	add	sp, #52	@ 0x34
 8008c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2c:	4642      	mov	r2, r8
 8008c2e:	464b      	mov	r3, r9
 8008c30:	4640      	mov	r0, r8
 8008c32:	4649      	mov	r1, r9
 8008c34:	f7f7 ffa2 	bl	8000b7c <__aeabi_dcmpun>
 8008c38:	b140      	cbz	r0, 8008c4c <_printf_float+0xe0>
 8008c3a:	464b      	mov	r3, r9
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	bfbc      	itt	lt
 8008c40:	232d      	movlt	r3, #45	@ 0x2d
 8008c42:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008c46:	4a7e      	ldr	r2, [pc, #504]	@ (8008e40 <_printf_float+0x2d4>)
 8008c48:	4b7e      	ldr	r3, [pc, #504]	@ (8008e44 <_printf_float+0x2d8>)
 8008c4a:	e7d4      	b.n	8008bf6 <_printf_float+0x8a>
 8008c4c:	6863      	ldr	r3, [r4, #4]
 8008c4e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008c52:	9206      	str	r2, [sp, #24]
 8008c54:	1c5a      	adds	r2, r3, #1
 8008c56:	d13b      	bne.n	8008cd0 <_printf_float+0x164>
 8008c58:	2306      	movs	r3, #6
 8008c5a:	6063      	str	r3, [r4, #4]
 8008c5c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008c60:	2300      	movs	r3, #0
 8008c62:	6022      	str	r2, [r4, #0]
 8008c64:	9303      	str	r3, [sp, #12]
 8008c66:	ab0a      	add	r3, sp, #40	@ 0x28
 8008c68:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008c6c:	ab09      	add	r3, sp, #36	@ 0x24
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	6861      	ldr	r1, [r4, #4]
 8008c72:	ec49 8b10 	vmov	d0, r8, r9
 8008c76:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	f7ff fed6 	bl	8008a2c <__cvt>
 8008c80:	9b06      	ldr	r3, [sp, #24]
 8008c82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c84:	2b47      	cmp	r3, #71	@ 0x47
 8008c86:	4680      	mov	r8, r0
 8008c88:	d129      	bne.n	8008cde <_printf_float+0x172>
 8008c8a:	1cc8      	adds	r0, r1, #3
 8008c8c:	db02      	blt.n	8008c94 <_printf_float+0x128>
 8008c8e:	6863      	ldr	r3, [r4, #4]
 8008c90:	4299      	cmp	r1, r3
 8008c92:	dd41      	ble.n	8008d18 <_printf_float+0x1ac>
 8008c94:	f1aa 0a02 	sub.w	sl, sl, #2
 8008c98:	fa5f fa8a 	uxtb.w	sl, sl
 8008c9c:	3901      	subs	r1, #1
 8008c9e:	4652      	mov	r2, sl
 8008ca0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008ca4:	9109      	str	r1, [sp, #36]	@ 0x24
 8008ca6:	f7ff ff26 	bl	8008af6 <__exponent>
 8008caa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008cac:	1813      	adds	r3, r2, r0
 8008cae:	2a01      	cmp	r2, #1
 8008cb0:	4681      	mov	r9, r0
 8008cb2:	6123      	str	r3, [r4, #16]
 8008cb4:	dc02      	bgt.n	8008cbc <_printf_float+0x150>
 8008cb6:	6822      	ldr	r2, [r4, #0]
 8008cb8:	07d2      	lsls	r2, r2, #31
 8008cba:	d501      	bpl.n	8008cc0 <_printf_float+0x154>
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	6123      	str	r3, [r4, #16]
 8008cc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d0a2      	beq.n	8008c0e <_printf_float+0xa2>
 8008cc8:	232d      	movs	r3, #45	@ 0x2d
 8008cca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cce:	e79e      	b.n	8008c0e <_printf_float+0xa2>
 8008cd0:	9a06      	ldr	r2, [sp, #24]
 8008cd2:	2a47      	cmp	r2, #71	@ 0x47
 8008cd4:	d1c2      	bne.n	8008c5c <_printf_float+0xf0>
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1c0      	bne.n	8008c5c <_printf_float+0xf0>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e7bd      	b.n	8008c5a <_printf_float+0xee>
 8008cde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008ce2:	d9db      	bls.n	8008c9c <_printf_float+0x130>
 8008ce4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008ce8:	d118      	bne.n	8008d1c <_printf_float+0x1b0>
 8008cea:	2900      	cmp	r1, #0
 8008cec:	6863      	ldr	r3, [r4, #4]
 8008cee:	dd0b      	ble.n	8008d08 <_printf_float+0x19c>
 8008cf0:	6121      	str	r1, [r4, #16]
 8008cf2:	b913      	cbnz	r3, 8008cfa <_printf_float+0x18e>
 8008cf4:	6822      	ldr	r2, [r4, #0]
 8008cf6:	07d0      	lsls	r0, r2, #31
 8008cf8:	d502      	bpl.n	8008d00 <_printf_float+0x194>
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	440b      	add	r3, r1
 8008cfe:	6123      	str	r3, [r4, #16]
 8008d00:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008d02:	f04f 0900 	mov.w	r9, #0
 8008d06:	e7db      	b.n	8008cc0 <_printf_float+0x154>
 8008d08:	b913      	cbnz	r3, 8008d10 <_printf_float+0x1a4>
 8008d0a:	6822      	ldr	r2, [r4, #0]
 8008d0c:	07d2      	lsls	r2, r2, #31
 8008d0e:	d501      	bpl.n	8008d14 <_printf_float+0x1a8>
 8008d10:	3302      	adds	r3, #2
 8008d12:	e7f4      	b.n	8008cfe <_printf_float+0x192>
 8008d14:	2301      	movs	r3, #1
 8008d16:	e7f2      	b.n	8008cfe <_printf_float+0x192>
 8008d18:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008d1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d1e:	4299      	cmp	r1, r3
 8008d20:	db05      	blt.n	8008d2e <_printf_float+0x1c2>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	6121      	str	r1, [r4, #16]
 8008d26:	07d8      	lsls	r0, r3, #31
 8008d28:	d5ea      	bpl.n	8008d00 <_printf_float+0x194>
 8008d2a:	1c4b      	adds	r3, r1, #1
 8008d2c:	e7e7      	b.n	8008cfe <_printf_float+0x192>
 8008d2e:	2900      	cmp	r1, #0
 8008d30:	bfd4      	ite	le
 8008d32:	f1c1 0202 	rsble	r2, r1, #2
 8008d36:	2201      	movgt	r2, #1
 8008d38:	4413      	add	r3, r2
 8008d3a:	e7e0      	b.n	8008cfe <_printf_float+0x192>
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	055a      	lsls	r2, r3, #21
 8008d40:	d407      	bmi.n	8008d52 <_printf_float+0x1e6>
 8008d42:	6923      	ldr	r3, [r4, #16]
 8008d44:	4642      	mov	r2, r8
 8008d46:	4631      	mov	r1, r6
 8008d48:	4628      	mov	r0, r5
 8008d4a:	47b8      	blx	r7
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	d12b      	bne.n	8008da8 <_printf_float+0x23c>
 8008d50:	e767      	b.n	8008c22 <_printf_float+0xb6>
 8008d52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008d56:	f240 80dd 	bls.w	8008f14 <_printf_float+0x3a8>
 8008d5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008d5e:	2200      	movs	r2, #0
 8008d60:	2300      	movs	r3, #0
 8008d62:	f7f7 fed9 	bl	8000b18 <__aeabi_dcmpeq>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	d033      	beq.n	8008dd2 <_printf_float+0x266>
 8008d6a:	4a37      	ldr	r2, [pc, #220]	@ (8008e48 <_printf_float+0x2dc>)
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	4631      	mov	r1, r6
 8008d70:	4628      	mov	r0, r5
 8008d72:	47b8      	blx	r7
 8008d74:	3001      	adds	r0, #1
 8008d76:	f43f af54 	beq.w	8008c22 <_printf_float+0xb6>
 8008d7a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008d7e:	4543      	cmp	r3, r8
 8008d80:	db02      	blt.n	8008d88 <_printf_float+0x21c>
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	07d8      	lsls	r0, r3, #31
 8008d86:	d50f      	bpl.n	8008da8 <_printf_float+0x23c>
 8008d88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d8c:	4631      	mov	r1, r6
 8008d8e:	4628      	mov	r0, r5
 8008d90:	47b8      	blx	r7
 8008d92:	3001      	adds	r0, #1
 8008d94:	f43f af45 	beq.w	8008c22 <_printf_float+0xb6>
 8008d98:	f04f 0900 	mov.w	r9, #0
 8008d9c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008da0:	f104 0a1a 	add.w	sl, r4, #26
 8008da4:	45c8      	cmp	r8, r9
 8008da6:	dc09      	bgt.n	8008dbc <_printf_float+0x250>
 8008da8:	6823      	ldr	r3, [r4, #0]
 8008daa:	079b      	lsls	r3, r3, #30
 8008dac:	f100 8103 	bmi.w	8008fb6 <_printf_float+0x44a>
 8008db0:	68e0      	ldr	r0, [r4, #12]
 8008db2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008db4:	4298      	cmp	r0, r3
 8008db6:	bfb8      	it	lt
 8008db8:	4618      	movlt	r0, r3
 8008dba:	e734      	b.n	8008c26 <_printf_float+0xba>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	4652      	mov	r2, sl
 8008dc0:	4631      	mov	r1, r6
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	47b8      	blx	r7
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	f43f af2b 	beq.w	8008c22 <_printf_float+0xb6>
 8008dcc:	f109 0901 	add.w	r9, r9, #1
 8008dd0:	e7e8      	b.n	8008da4 <_printf_float+0x238>
 8008dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	dc39      	bgt.n	8008e4c <_printf_float+0x2e0>
 8008dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8008e48 <_printf_float+0x2dc>)
 8008dda:	2301      	movs	r3, #1
 8008ddc:	4631      	mov	r1, r6
 8008dde:	4628      	mov	r0, r5
 8008de0:	47b8      	blx	r7
 8008de2:	3001      	adds	r0, #1
 8008de4:	f43f af1d 	beq.w	8008c22 <_printf_float+0xb6>
 8008de8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008dec:	ea59 0303 	orrs.w	r3, r9, r3
 8008df0:	d102      	bne.n	8008df8 <_printf_float+0x28c>
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	07d9      	lsls	r1, r3, #31
 8008df6:	d5d7      	bpl.n	8008da8 <_printf_float+0x23c>
 8008df8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dfc:	4631      	mov	r1, r6
 8008dfe:	4628      	mov	r0, r5
 8008e00:	47b8      	blx	r7
 8008e02:	3001      	adds	r0, #1
 8008e04:	f43f af0d 	beq.w	8008c22 <_printf_float+0xb6>
 8008e08:	f04f 0a00 	mov.w	sl, #0
 8008e0c:	f104 0b1a 	add.w	fp, r4, #26
 8008e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e12:	425b      	negs	r3, r3
 8008e14:	4553      	cmp	r3, sl
 8008e16:	dc01      	bgt.n	8008e1c <_printf_float+0x2b0>
 8008e18:	464b      	mov	r3, r9
 8008e1a:	e793      	b.n	8008d44 <_printf_float+0x1d8>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	465a      	mov	r2, fp
 8008e20:	4631      	mov	r1, r6
 8008e22:	4628      	mov	r0, r5
 8008e24:	47b8      	blx	r7
 8008e26:	3001      	adds	r0, #1
 8008e28:	f43f aefb 	beq.w	8008c22 <_printf_float+0xb6>
 8008e2c:	f10a 0a01 	add.w	sl, sl, #1
 8008e30:	e7ee      	b.n	8008e10 <_printf_float+0x2a4>
 8008e32:	bf00      	nop
 8008e34:	7fefffff 	.word	0x7fefffff
 8008e38:	0800d1e4 	.word	0x0800d1e4
 8008e3c:	0800d1e8 	.word	0x0800d1e8
 8008e40:	0800d1ec 	.word	0x0800d1ec
 8008e44:	0800d1f0 	.word	0x0800d1f0
 8008e48:	0800d1f4 	.word	0x0800d1f4
 8008e4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008e4e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008e52:	4553      	cmp	r3, sl
 8008e54:	bfa8      	it	ge
 8008e56:	4653      	movge	r3, sl
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	4699      	mov	r9, r3
 8008e5c:	dc36      	bgt.n	8008ecc <_printf_float+0x360>
 8008e5e:	f04f 0b00 	mov.w	fp, #0
 8008e62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e66:	f104 021a 	add.w	r2, r4, #26
 8008e6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008e6c:	9306      	str	r3, [sp, #24]
 8008e6e:	eba3 0309 	sub.w	r3, r3, r9
 8008e72:	455b      	cmp	r3, fp
 8008e74:	dc31      	bgt.n	8008eda <_printf_float+0x36e>
 8008e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e78:	459a      	cmp	sl, r3
 8008e7a:	dc3a      	bgt.n	8008ef2 <_printf_float+0x386>
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	07da      	lsls	r2, r3, #31
 8008e80:	d437      	bmi.n	8008ef2 <_printf_float+0x386>
 8008e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e84:	ebaa 0903 	sub.w	r9, sl, r3
 8008e88:	9b06      	ldr	r3, [sp, #24]
 8008e8a:	ebaa 0303 	sub.w	r3, sl, r3
 8008e8e:	4599      	cmp	r9, r3
 8008e90:	bfa8      	it	ge
 8008e92:	4699      	movge	r9, r3
 8008e94:	f1b9 0f00 	cmp.w	r9, #0
 8008e98:	dc33      	bgt.n	8008f02 <_printf_float+0x396>
 8008e9a:	f04f 0800 	mov.w	r8, #0
 8008e9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ea2:	f104 0b1a 	add.w	fp, r4, #26
 8008ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ea8:	ebaa 0303 	sub.w	r3, sl, r3
 8008eac:	eba3 0309 	sub.w	r3, r3, r9
 8008eb0:	4543      	cmp	r3, r8
 8008eb2:	f77f af79 	ble.w	8008da8 <_printf_float+0x23c>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	465a      	mov	r2, fp
 8008eba:	4631      	mov	r1, r6
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	47b8      	blx	r7
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	f43f aeae 	beq.w	8008c22 <_printf_float+0xb6>
 8008ec6:	f108 0801 	add.w	r8, r8, #1
 8008eca:	e7ec      	b.n	8008ea6 <_printf_float+0x33a>
 8008ecc:	4642      	mov	r2, r8
 8008ece:	4631      	mov	r1, r6
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	47b8      	blx	r7
 8008ed4:	3001      	adds	r0, #1
 8008ed6:	d1c2      	bne.n	8008e5e <_printf_float+0x2f2>
 8008ed8:	e6a3      	b.n	8008c22 <_printf_float+0xb6>
 8008eda:	2301      	movs	r3, #1
 8008edc:	4631      	mov	r1, r6
 8008ede:	4628      	mov	r0, r5
 8008ee0:	9206      	str	r2, [sp, #24]
 8008ee2:	47b8      	blx	r7
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	f43f ae9c 	beq.w	8008c22 <_printf_float+0xb6>
 8008eea:	9a06      	ldr	r2, [sp, #24]
 8008eec:	f10b 0b01 	add.w	fp, fp, #1
 8008ef0:	e7bb      	b.n	8008e6a <_printf_float+0x2fe>
 8008ef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	4628      	mov	r0, r5
 8008efa:	47b8      	blx	r7
 8008efc:	3001      	adds	r0, #1
 8008efe:	d1c0      	bne.n	8008e82 <_printf_float+0x316>
 8008f00:	e68f      	b.n	8008c22 <_printf_float+0xb6>
 8008f02:	9a06      	ldr	r2, [sp, #24]
 8008f04:	464b      	mov	r3, r9
 8008f06:	4442      	add	r2, r8
 8008f08:	4631      	mov	r1, r6
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	47b8      	blx	r7
 8008f0e:	3001      	adds	r0, #1
 8008f10:	d1c3      	bne.n	8008e9a <_printf_float+0x32e>
 8008f12:	e686      	b.n	8008c22 <_printf_float+0xb6>
 8008f14:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008f18:	f1ba 0f01 	cmp.w	sl, #1
 8008f1c:	dc01      	bgt.n	8008f22 <_printf_float+0x3b6>
 8008f1e:	07db      	lsls	r3, r3, #31
 8008f20:	d536      	bpl.n	8008f90 <_printf_float+0x424>
 8008f22:	2301      	movs	r3, #1
 8008f24:	4642      	mov	r2, r8
 8008f26:	4631      	mov	r1, r6
 8008f28:	4628      	mov	r0, r5
 8008f2a:	47b8      	blx	r7
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	f43f ae78 	beq.w	8008c22 <_printf_float+0xb6>
 8008f32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f36:	4631      	mov	r1, r6
 8008f38:	4628      	mov	r0, r5
 8008f3a:	47b8      	blx	r7
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	f43f ae70 	beq.w	8008c22 <_printf_float+0xb6>
 8008f42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008f46:	2200      	movs	r2, #0
 8008f48:	2300      	movs	r3, #0
 8008f4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f4e:	f7f7 fde3 	bl	8000b18 <__aeabi_dcmpeq>
 8008f52:	b9c0      	cbnz	r0, 8008f86 <_printf_float+0x41a>
 8008f54:	4653      	mov	r3, sl
 8008f56:	f108 0201 	add.w	r2, r8, #1
 8008f5a:	4631      	mov	r1, r6
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	47b8      	blx	r7
 8008f60:	3001      	adds	r0, #1
 8008f62:	d10c      	bne.n	8008f7e <_printf_float+0x412>
 8008f64:	e65d      	b.n	8008c22 <_printf_float+0xb6>
 8008f66:	2301      	movs	r3, #1
 8008f68:	465a      	mov	r2, fp
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	47b8      	blx	r7
 8008f70:	3001      	adds	r0, #1
 8008f72:	f43f ae56 	beq.w	8008c22 <_printf_float+0xb6>
 8008f76:	f108 0801 	add.w	r8, r8, #1
 8008f7a:	45d0      	cmp	r8, sl
 8008f7c:	dbf3      	blt.n	8008f66 <_printf_float+0x3fa>
 8008f7e:	464b      	mov	r3, r9
 8008f80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008f84:	e6df      	b.n	8008d46 <_printf_float+0x1da>
 8008f86:	f04f 0800 	mov.w	r8, #0
 8008f8a:	f104 0b1a 	add.w	fp, r4, #26
 8008f8e:	e7f4      	b.n	8008f7a <_printf_float+0x40e>
 8008f90:	2301      	movs	r3, #1
 8008f92:	4642      	mov	r2, r8
 8008f94:	e7e1      	b.n	8008f5a <_printf_float+0x3ee>
 8008f96:	2301      	movs	r3, #1
 8008f98:	464a      	mov	r2, r9
 8008f9a:	4631      	mov	r1, r6
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	47b8      	blx	r7
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	f43f ae3e 	beq.w	8008c22 <_printf_float+0xb6>
 8008fa6:	f108 0801 	add.w	r8, r8, #1
 8008faa:	68e3      	ldr	r3, [r4, #12]
 8008fac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008fae:	1a5b      	subs	r3, r3, r1
 8008fb0:	4543      	cmp	r3, r8
 8008fb2:	dcf0      	bgt.n	8008f96 <_printf_float+0x42a>
 8008fb4:	e6fc      	b.n	8008db0 <_printf_float+0x244>
 8008fb6:	f04f 0800 	mov.w	r8, #0
 8008fba:	f104 0919 	add.w	r9, r4, #25
 8008fbe:	e7f4      	b.n	8008faa <_printf_float+0x43e>

08008fc0 <_printf_common>:
 8008fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc4:	4616      	mov	r6, r2
 8008fc6:	4698      	mov	r8, r3
 8008fc8:	688a      	ldr	r2, [r1, #8]
 8008fca:	690b      	ldr	r3, [r1, #16]
 8008fcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	bfb8      	it	lt
 8008fd4:	4613      	movlt	r3, r2
 8008fd6:	6033      	str	r3, [r6, #0]
 8008fd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008fdc:	4607      	mov	r7, r0
 8008fde:	460c      	mov	r4, r1
 8008fe0:	b10a      	cbz	r2, 8008fe6 <_printf_common+0x26>
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	6033      	str	r3, [r6, #0]
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	0699      	lsls	r1, r3, #26
 8008fea:	bf42      	ittt	mi
 8008fec:	6833      	ldrmi	r3, [r6, #0]
 8008fee:	3302      	addmi	r3, #2
 8008ff0:	6033      	strmi	r3, [r6, #0]
 8008ff2:	6825      	ldr	r5, [r4, #0]
 8008ff4:	f015 0506 	ands.w	r5, r5, #6
 8008ff8:	d106      	bne.n	8009008 <_printf_common+0x48>
 8008ffa:	f104 0a19 	add.w	sl, r4, #25
 8008ffe:	68e3      	ldr	r3, [r4, #12]
 8009000:	6832      	ldr	r2, [r6, #0]
 8009002:	1a9b      	subs	r3, r3, r2
 8009004:	42ab      	cmp	r3, r5
 8009006:	dc26      	bgt.n	8009056 <_printf_common+0x96>
 8009008:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800900c:	6822      	ldr	r2, [r4, #0]
 800900e:	3b00      	subs	r3, #0
 8009010:	bf18      	it	ne
 8009012:	2301      	movne	r3, #1
 8009014:	0692      	lsls	r2, r2, #26
 8009016:	d42b      	bmi.n	8009070 <_printf_common+0xb0>
 8009018:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800901c:	4641      	mov	r1, r8
 800901e:	4638      	mov	r0, r7
 8009020:	47c8      	blx	r9
 8009022:	3001      	adds	r0, #1
 8009024:	d01e      	beq.n	8009064 <_printf_common+0xa4>
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	6922      	ldr	r2, [r4, #16]
 800902a:	f003 0306 	and.w	r3, r3, #6
 800902e:	2b04      	cmp	r3, #4
 8009030:	bf02      	ittt	eq
 8009032:	68e5      	ldreq	r5, [r4, #12]
 8009034:	6833      	ldreq	r3, [r6, #0]
 8009036:	1aed      	subeq	r5, r5, r3
 8009038:	68a3      	ldr	r3, [r4, #8]
 800903a:	bf0c      	ite	eq
 800903c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009040:	2500      	movne	r5, #0
 8009042:	4293      	cmp	r3, r2
 8009044:	bfc4      	itt	gt
 8009046:	1a9b      	subgt	r3, r3, r2
 8009048:	18ed      	addgt	r5, r5, r3
 800904a:	2600      	movs	r6, #0
 800904c:	341a      	adds	r4, #26
 800904e:	42b5      	cmp	r5, r6
 8009050:	d11a      	bne.n	8009088 <_printf_common+0xc8>
 8009052:	2000      	movs	r0, #0
 8009054:	e008      	b.n	8009068 <_printf_common+0xa8>
 8009056:	2301      	movs	r3, #1
 8009058:	4652      	mov	r2, sl
 800905a:	4641      	mov	r1, r8
 800905c:	4638      	mov	r0, r7
 800905e:	47c8      	blx	r9
 8009060:	3001      	adds	r0, #1
 8009062:	d103      	bne.n	800906c <_printf_common+0xac>
 8009064:	f04f 30ff 	mov.w	r0, #4294967295
 8009068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800906c:	3501      	adds	r5, #1
 800906e:	e7c6      	b.n	8008ffe <_printf_common+0x3e>
 8009070:	18e1      	adds	r1, r4, r3
 8009072:	1c5a      	adds	r2, r3, #1
 8009074:	2030      	movs	r0, #48	@ 0x30
 8009076:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800907a:	4422      	add	r2, r4
 800907c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009080:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009084:	3302      	adds	r3, #2
 8009086:	e7c7      	b.n	8009018 <_printf_common+0x58>
 8009088:	2301      	movs	r3, #1
 800908a:	4622      	mov	r2, r4
 800908c:	4641      	mov	r1, r8
 800908e:	4638      	mov	r0, r7
 8009090:	47c8      	blx	r9
 8009092:	3001      	adds	r0, #1
 8009094:	d0e6      	beq.n	8009064 <_printf_common+0xa4>
 8009096:	3601      	adds	r6, #1
 8009098:	e7d9      	b.n	800904e <_printf_common+0x8e>
	...

0800909c <_printf_i>:
 800909c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090a0:	7e0f      	ldrb	r7, [r1, #24]
 80090a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80090a4:	2f78      	cmp	r7, #120	@ 0x78
 80090a6:	4691      	mov	r9, r2
 80090a8:	4680      	mov	r8, r0
 80090aa:	460c      	mov	r4, r1
 80090ac:	469a      	mov	sl, r3
 80090ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80090b2:	d807      	bhi.n	80090c4 <_printf_i+0x28>
 80090b4:	2f62      	cmp	r7, #98	@ 0x62
 80090b6:	d80a      	bhi.n	80090ce <_printf_i+0x32>
 80090b8:	2f00      	cmp	r7, #0
 80090ba:	f000 80d2 	beq.w	8009262 <_printf_i+0x1c6>
 80090be:	2f58      	cmp	r7, #88	@ 0x58
 80090c0:	f000 80b9 	beq.w	8009236 <_printf_i+0x19a>
 80090c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80090cc:	e03a      	b.n	8009144 <_printf_i+0xa8>
 80090ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80090d2:	2b15      	cmp	r3, #21
 80090d4:	d8f6      	bhi.n	80090c4 <_printf_i+0x28>
 80090d6:	a101      	add	r1, pc, #4	@ (adr r1, 80090dc <_printf_i+0x40>)
 80090d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090dc:	08009135 	.word	0x08009135
 80090e0:	08009149 	.word	0x08009149
 80090e4:	080090c5 	.word	0x080090c5
 80090e8:	080090c5 	.word	0x080090c5
 80090ec:	080090c5 	.word	0x080090c5
 80090f0:	080090c5 	.word	0x080090c5
 80090f4:	08009149 	.word	0x08009149
 80090f8:	080090c5 	.word	0x080090c5
 80090fc:	080090c5 	.word	0x080090c5
 8009100:	080090c5 	.word	0x080090c5
 8009104:	080090c5 	.word	0x080090c5
 8009108:	08009249 	.word	0x08009249
 800910c:	08009173 	.word	0x08009173
 8009110:	08009203 	.word	0x08009203
 8009114:	080090c5 	.word	0x080090c5
 8009118:	080090c5 	.word	0x080090c5
 800911c:	0800926b 	.word	0x0800926b
 8009120:	080090c5 	.word	0x080090c5
 8009124:	08009173 	.word	0x08009173
 8009128:	080090c5 	.word	0x080090c5
 800912c:	080090c5 	.word	0x080090c5
 8009130:	0800920b 	.word	0x0800920b
 8009134:	6833      	ldr	r3, [r6, #0]
 8009136:	1d1a      	adds	r2, r3, #4
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	6032      	str	r2, [r6, #0]
 800913c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009140:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009144:	2301      	movs	r3, #1
 8009146:	e09d      	b.n	8009284 <_printf_i+0x1e8>
 8009148:	6833      	ldr	r3, [r6, #0]
 800914a:	6820      	ldr	r0, [r4, #0]
 800914c:	1d19      	adds	r1, r3, #4
 800914e:	6031      	str	r1, [r6, #0]
 8009150:	0606      	lsls	r6, r0, #24
 8009152:	d501      	bpl.n	8009158 <_printf_i+0xbc>
 8009154:	681d      	ldr	r5, [r3, #0]
 8009156:	e003      	b.n	8009160 <_printf_i+0xc4>
 8009158:	0645      	lsls	r5, r0, #25
 800915a:	d5fb      	bpl.n	8009154 <_printf_i+0xb8>
 800915c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009160:	2d00      	cmp	r5, #0
 8009162:	da03      	bge.n	800916c <_printf_i+0xd0>
 8009164:	232d      	movs	r3, #45	@ 0x2d
 8009166:	426d      	negs	r5, r5
 8009168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800916c:	4859      	ldr	r0, [pc, #356]	@ (80092d4 <_printf_i+0x238>)
 800916e:	230a      	movs	r3, #10
 8009170:	e011      	b.n	8009196 <_printf_i+0xfa>
 8009172:	6821      	ldr	r1, [r4, #0]
 8009174:	6833      	ldr	r3, [r6, #0]
 8009176:	0608      	lsls	r0, r1, #24
 8009178:	f853 5b04 	ldr.w	r5, [r3], #4
 800917c:	d402      	bmi.n	8009184 <_printf_i+0xe8>
 800917e:	0649      	lsls	r1, r1, #25
 8009180:	bf48      	it	mi
 8009182:	b2ad      	uxthmi	r5, r5
 8009184:	2f6f      	cmp	r7, #111	@ 0x6f
 8009186:	4853      	ldr	r0, [pc, #332]	@ (80092d4 <_printf_i+0x238>)
 8009188:	6033      	str	r3, [r6, #0]
 800918a:	bf14      	ite	ne
 800918c:	230a      	movne	r3, #10
 800918e:	2308      	moveq	r3, #8
 8009190:	2100      	movs	r1, #0
 8009192:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009196:	6866      	ldr	r6, [r4, #4]
 8009198:	60a6      	str	r6, [r4, #8]
 800919a:	2e00      	cmp	r6, #0
 800919c:	bfa2      	ittt	ge
 800919e:	6821      	ldrge	r1, [r4, #0]
 80091a0:	f021 0104 	bicge.w	r1, r1, #4
 80091a4:	6021      	strge	r1, [r4, #0]
 80091a6:	b90d      	cbnz	r5, 80091ac <_printf_i+0x110>
 80091a8:	2e00      	cmp	r6, #0
 80091aa:	d04b      	beq.n	8009244 <_printf_i+0x1a8>
 80091ac:	4616      	mov	r6, r2
 80091ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80091b2:	fb03 5711 	mls	r7, r3, r1, r5
 80091b6:	5dc7      	ldrb	r7, [r0, r7]
 80091b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80091bc:	462f      	mov	r7, r5
 80091be:	42bb      	cmp	r3, r7
 80091c0:	460d      	mov	r5, r1
 80091c2:	d9f4      	bls.n	80091ae <_printf_i+0x112>
 80091c4:	2b08      	cmp	r3, #8
 80091c6:	d10b      	bne.n	80091e0 <_printf_i+0x144>
 80091c8:	6823      	ldr	r3, [r4, #0]
 80091ca:	07df      	lsls	r7, r3, #31
 80091cc:	d508      	bpl.n	80091e0 <_printf_i+0x144>
 80091ce:	6923      	ldr	r3, [r4, #16]
 80091d0:	6861      	ldr	r1, [r4, #4]
 80091d2:	4299      	cmp	r1, r3
 80091d4:	bfde      	ittt	le
 80091d6:	2330      	movle	r3, #48	@ 0x30
 80091d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80091dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80091e0:	1b92      	subs	r2, r2, r6
 80091e2:	6122      	str	r2, [r4, #16]
 80091e4:	f8cd a000 	str.w	sl, [sp]
 80091e8:	464b      	mov	r3, r9
 80091ea:	aa03      	add	r2, sp, #12
 80091ec:	4621      	mov	r1, r4
 80091ee:	4640      	mov	r0, r8
 80091f0:	f7ff fee6 	bl	8008fc0 <_printf_common>
 80091f4:	3001      	adds	r0, #1
 80091f6:	d14a      	bne.n	800928e <_printf_i+0x1f2>
 80091f8:	f04f 30ff 	mov.w	r0, #4294967295
 80091fc:	b004      	add	sp, #16
 80091fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	f043 0320 	orr.w	r3, r3, #32
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	4833      	ldr	r0, [pc, #204]	@ (80092d8 <_printf_i+0x23c>)
 800920c:	2778      	movs	r7, #120	@ 0x78
 800920e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009212:	6823      	ldr	r3, [r4, #0]
 8009214:	6831      	ldr	r1, [r6, #0]
 8009216:	061f      	lsls	r7, r3, #24
 8009218:	f851 5b04 	ldr.w	r5, [r1], #4
 800921c:	d402      	bmi.n	8009224 <_printf_i+0x188>
 800921e:	065f      	lsls	r7, r3, #25
 8009220:	bf48      	it	mi
 8009222:	b2ad      	uxthmi	r5, r5
 8009224:	6031      	str	r1, [r6, #0]
 8009226:	07d9      	lsls	r1, r3, #31
 8009228:	bf44      	itt	mi
 800922a:	f043 0320 	orrmi.w	r3, r3, #32
 800922e:	6023      	strmi	r3, [r4, #0]
 8009230:	b11d      	cbz	r5, 800923a <_printf_i+0x19e>
 8009232:	2310      	movs	r3, #16
 8009234:	e7ac      	b.n	8009190 <_printf_i+0xf4>
 8009236:	4827      	ldr	r0, [pc, #156]	@ (80092d4 <_printf_i+0x238>)
 8009238:	e7e9      	b.n	800920e <_printf_i+0x172>
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	f023 0320 	bic.w	r3, r3, #32
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	e7f6      	b.n	8009232 <_printf_i+0x196>
 8009244:	4616      	mov	r6, r2
 8009246:	e7bd      	b.n	80091c4 <_printf_i+0x128>
 8009248:	6833      	ldr	r3, [r6, #0]
 800924a:	6825      	ldr	r5, [r4, #0]
 800924c:	6961      	ldr	r1, [r4, #20]
 800924e:	1d18      	adds	r0, r3, #4
 8009250:	6030      	str	r0, [r6, #0]
 8009252:	062e      	lsls	r6, r5, #24
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	d501      	bpl.n	800925c <_printf_i+0x1c0>
 8009258:	6019      	str	r1, [r3, #0]
 800925a:	e002      	b.n	8009262 <_printf_i+0x1c6>
 800925c:	0668      	lsls	r0, r5, #25
 800925e:	d5fb      	bpl.n	8009258 <_printf_i+0x1bc>
 8009260:	8019      	strh	r1, [r3, #0]
 8009262:	2300      	movs	r3, #0
 8009264:	6123      	str	r3, [r4, #16]
 8009266:	4616      	mov	r6, r2
 8009268:	e7bc      	b.n	80091e4 <_printf_i+0x148>
 800926a:	6833      	ldr	r3, [r6, #0]
 800926c:	1d1a      	adds	r2, r3, #4
 800926e:	6032      	str	r2, [r6, #0]
 8009270:	681e      	ldr	r6, [r3, #0]
 8009272:	6862      	ldr	r2, [r4, #4]
 8009274:	2100      	movs	r1, #0
 8009276:	4630      	mov	r0, r6
 8009278:	f7f6 ffd2 	bl	8000220 <memchr>
 800927c:	b108      	cbz	r0, 8009282 <_printf_i+0x1e6>
 800927e:	1b80      	subs	r0, r0, r6
 8009280:	6060      	str	r0, [r4, #4]
 8009282:	6863      	ldr	r3, [r4, #4]
 8009284:	6123      	str	r3, [r4, #16]
 8009286:	2300      	movs	r3, #0
 8009288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800928c:	e7aa      	b.n	80091e4 <_printf_i+0x148>
 800928e:	6923      	ldr	r3, [r4, #16]
 8009290:	4632      	mov	r2, r6
 8009292:	4649      	mov	r1, r9
 8009294:	4640      	mov	r0, r8
 8009296:	47d0      	blx	sl
 8009298:	3001      	adds	r0, #1
 800929a:	d0ad      	beq.n	80091f8 <_printf_i+0x15c>
 800929c:	6823      	ldr	r3, [r4, #0]
 800929e:	079b      	lsls	r3, r3, #30
 80092a0:	d413      	bmi.n	80092ca <_printf_i+0x22e>
 80092a2:	68e0      	ldr	r0, [r4, #12]
 80092a4:	9b03      	ldr	r3, [sp, #12]
 80092a6:	4298      	cmp	r0, r3
 80092a8:	bfb8      	it	lt
 80092aa:	4618      	movlt	r0, r3
 80092ac:	e7a6      	b.n	80091fc <_printf_i+0x160>
 80092ae:	2301      	movs	r3, #1
 80092b0:	4632      	mov	r2, r6
 80092b2:	4649      	mov	r1, r9
 80092b4:	4640      	mov	r0, r8
 80092b6:	47d0      	blx	sl
 80092b8:	3001      	adds	r0, #1
 80092ba:	d09d      	beq.n	80091f8 <_printf_i+0x15c>
 80092bc:	3501      	adds	r5, #1
 80092be:	68e3      	ldr	r3, [r4, #12]
 80092c0:	9903      	ldr	r1, [sp, #12]
 80092c2:	1a5b      	subs	r3, r3, r1
 80092c4:	42ab      	cmp	r3, r5
 80092c6:	dcf2      	bgt.n	80092ae <_printf_i+0x212>
 80092c8:	e7eb      	b.n	80092a2 <_printf_i+0x206>
 80092ca:	2500      	movs	r5, #0
 80092cc:	f104 0619 	add.w	r6, r4, #25
 80092d0:	e7f5      	b.n	80092be <_printf_i+0x222>
 80092d2:	bf00      	nop
 80092d4:	0800d1f6 	.word	0x0800d1f6
 80092d8:	0800d207 	.word	0x0800d207

080092dc <_scanf_float>:
 80092dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e0:	b087      	sub	sp, #28
 80092e2:	4617      	mov	r7, r2
 80092e4:	9303      	str	r3, [sp, #12]
 80092e6:	688b      	ldr	r3, [r1, #8]
 80092e8:	1e5a      	subs	r2, r3, #1
 80092ea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80092ee:	bf81      	itttt	hi
 80092f0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80092f4:	eb03 0b05 	addhi.w	fp, r3, r5
 80092f8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80092fc:	608b      	strhi	r3, [r1, #8]
 80092fe:	680b      	ldr	r3, [r1, #0]
 8009300:	460a      	mov	r2, r1
 8009302:	f04f 0500 	mov.w	r5, #0
 8009306:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800930a:	f842 3b1c 	str.w	r3, [r2], #28
 800930e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009312:	4680      	mov	r8, r0
 8009314:	460c      	mov	r4, r1
 8009316:	bf98      	it	ls
 8009318:	f04f 0b00 	movls.w	fp, #0
 800931c:	9201      	str	r2, [sp, #4]
 800931e:	4616      	mov	r6, r2
 8009320:	46aa      	mov	sl, r5
 8009322:	46a9      	mov	r9, r5
 8009324:	9502      	str	r5, [sp, #8]
 8009326:	68a2      	ldr	r2, [r4, #8]
 8009328:	b152      	cbz	r2, 8009340 <_scanf_float+0x64>
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	2b4e      	cmp	r3, #78	@ 0x4e
 8009330:	d864      	bhi.n	80093fc <_scanf_float+0x120>
 8009332:	2b40      	cmp	r3, #64	@ 0x40
 8009334:	d83c      	bhi.n	80093b0 <_scanf_float+0xd4>
 8009336:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800933a:	b2c8      	uxtb	r0, r1
 800933c:	280e      	cmp	r0, #14
 800933e:	d93a      	bls.n	80093b6 <_scanf_float+0xda>
 8009340:	f1b9 0f00 	cmp.w	r9, #0
 8009344:	d003      	beq.n	800934e <_scanf_float+0x72>
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800934c:	6023      	str	r3, [r4, #0]
 800934e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009352:	f1ba 0f01 	cmp.w	sl, #1
 8009356:	f200 8117 	bhi.w	8009588 <_scanf_float+0x2ac>
 800935a:	9b01      	ldr	r3, [sp, #4]
 800935c:	429e      	cmp	r6, r3
 800935e:	f200 8108 	bhi.w	8009572 <_scanf_float+0x296>
 8009362:	2001      	movs	r0, #1
 8009364:	b007      	add	sp, #28
 8009366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800936e:	2a0d      	cmp	r2, #13
 8009370:	d8e6      	bhi.n	8009340 <_scanf_float+0x64>
 8009372:	a101      	add	r1, pc, #4	@ (adr r1, 8009378 <_scanf_float+0x9c>)
 8009374:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009378:	080094bf 	.word	0x080094bf
 800937c:	08009341 	.word	0x08009341
 8009380:	08009341 	.word	0x08009341
 8009384:	08009341 	.word	0x08009341
 8009388:	0800951f 	.word	0x0800951f
 800938c:	080094f7 	.word	0x080094f7
 8009390:	08009341 	.word	0x08009341
 8009394:	08009341 	.word	0x08009341
 8009398:	080094cd 	.word	0x080094cd
 800939c:	08009341 	.word	0x08009341
 80093a0:	08009341 	.word	0x08009341
 80093a4:	08009341 	.word	0x08009341
 80093a8:	08009341 	.word	0x08009341
 80093ac:	08009485 	.word	0x08009485
 80093b0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80093b4:	e7db      	b.n	800936e <_scanf_float+0x92>
 80093b6:	290e      	cmp	r1, #14
 80093b8:	d8c2      	bhi.n	8009340 <_scanf_float+0x64>
 80093ba:	a001      	add	r0, pc, #4	@ (adr r0, 80093c0 <_scanf_float+0xe4>)
 80093bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80093c0:	08009475 	.word	0x08009475
 80093c4:	08009341 	.word	0x08009341
 80093c8:	08009475 	.word	0x08009475
 80093cc:	0800950b 	.word	0x0800950b
 80093d0:	08009341 	.word	0x08009341
 80093d4:	0800941d 	.word	0x0800941d
 80093d8:	0800945b 	.word	0x0800945b
 80093dc:	0800945b 	.word	0x0800945b
 80093e0:	0800945b 	.word	0x0800945b
 80093e4:	0800945b 	.word	0x0800945b
 80093e8:	0800945b 	.word	0x0800945b
 80093ec:	0800945b 	.word	0x0800945b
 80093f0:	0800945b 	.word	0x0800945b
 80093f4:	0800945b 	.word	0x0800945b
 80093f8:	0800945b 	.word	0x0800945b
 80093fc:	2b6e      	cmp	r3, #110	@ 0x6e
 80093fe:	d809      	bhi.n	8009414 <_scanf_float+0x138>
 8009400:	2b60      	cmp	r3, #96	@ 0x60
 8009402:	d8b2      	bhi.n	800936a <_scanf_float+0x8e>
 8009404:	2b54      	cmp	r3, #84	@ 0x54
 8009406:	d07b      	beq.n	8009500 <_scanf_float+0x224>
 8009408:	2b59      	cmp	r3, #89	@ 0x59
 800940a:	d199      	bne.n	8009340 <_scanf_float+0x64>
 800940c:	2d07      	cmp	r5, #7
 800940e:	d197      	bne.n	8009340 <_scanf_float+0x64>
 8009410:	2508      	movs	r5, #8
 8009412:	e02c      	b.n	800946e <_scanf_float+0x192>
 8009414:	2b74      	cmp	r3, #116	@ 0x74
 8009416:	d073      	beq.n	8009500 <_scanf_float+0x224>
 8009418:	2b79      	cmp	r3, #121	@ 0x79
 800941a:	e7f6      	b.n	800940a <_scanf_float+0x12e>
 800941c:	6821      	ldr	r1, [r4, #0]
 800941e:	05c8      	lsls	r0, r1, #23
 8009420:	d51b      	bpl.n	800945a <_scanf_float+0x17e>
 8009422:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009426:	6021      	str	r1, [r4, #0]
 8009428:	f109 0901 	add.w	r9, r9, #1
 800942c:	f1bb 0f00 	cmp.w	fp, #0
 8009430:	d003      	beq.n	800943a <_scanf_float+0x15e>
 8009432:	3201      	adds	r2, #1
 8009434:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009438:	60a2      	str	r2, [r4, #8]
 800943a:	68a3      	ldr	r3, [r4, #8]
 800943c:	3b01      	subs	r3, #1
 800943e:	60a3      	str	r3, [r4, #8]
 8009440:	6923      	ldr	r3, [r4, #16]
 8009442:	3301      	adds	r3, #1
 8009444:	6123      	str	r3, [r4, #16]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	3b01      	subs	r3, #1
 800944a:	2b00      	cmp	r3, #0
 800944c:	607b      	str	r3, [r7, #4]
 800944e:	f340 8087 	ble.w	8009560 <_scanf_float+0x284>
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	3301      	adds	r3, #1
 8009456:	603b      	str	r3, [r7, #0]
 8009458:	e765      	b.n	8009326 <_scanf_float+0x4a>
 800945a:	eb1a 0105 	adds.w	r1, sl, r5
 800945e:	f47f af6f 	bne.w	8009340 <_scanf_float+0x64>
 8009462:	6822      	ldr	r2, [r4, #0]
 8009464:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009468:	6022      	str	r2, [r4, #0]
 800946a:	460d      	mov	r5, r1
 800946c:	468a      	mov	sl, r1
 800946e:	f806 3b01 	strb.w	r3, [r6], #1
 8009472:	e7e2      	b.n	800943a <_scanf_float+0x15e>
 8009474:	6822      	ldr	r2, [r4, #0]
 8009476:	0610      	lsls	r0, r2, #24
 8009478:	f57f af62 	bpl.w	8009340 <_scanf_float+0x64>
 800947c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009480:	6022      	str	r2, [r4, #0]
 8009482:	e7f4      	b.n	800946e <_scanf_float+0x192>
 8009484:	f1ba 0f00 	cmp.w	sl, #0
 8009488:	d10e      	bne.n	80094a8 <_scanf_float+0x1cc>
 800948a:	f1b9 0f00 	cmp.w	r9, #0
 800948e:	d10e      	bne.n	80094ae <_scanf_float+0x1d2>
 8009490:	6822      	ldr	r2, [r4, #0]
 8009492:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009496:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800949a:	d108      	bne.n	80094ae <_scanf_float+0x1d2>
 800949c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80094a0:	6022      	str	r2, [r4, #0]
 80094a2:	f04f 0a01 	mov.w	sl, #1
 80094a6:	e7e2      	b.n	800946e <_scanf_float+0x192>
 80094a8:	f1ba 0f02 	cmp.w	sl, #2
 80094ac:	d055      	beq.n	800955a <_scanf_float+0x27e>
 80094ae:	2d01      	cmp	r5, #1
 80094b0:	d002      	beq.n	80094b8 <_scanf_float+0x1dc>
 80094b2:	2d04      	cmp	r5, #4
 80094b4:	f47f af44 	bne.w	8009340 <_scanf_float+0x64>
 80094b8:	3501      	adds	r5, #1
 80094ba:	b2ed      	uxtb	r5, r5
 80094bc:	e7d7      	b.n	800946e <_scanf_float+0x192>
 80094be:	f1ba 0f01 	cmp.w	sl, #1
 80094c2:	f47f af3d 	bne.w	8009340 <_scanf_float+0x64>
 80094c6:	f04f 0a02 	mov.w	sl, #2
 80094ca:	e7d0      	b.n	800946e <_scanf_float+0x192>
 80094cc:	b97d      	cbnz	r5, 80094ee <_scanf_float+0x212>
 80094ce:	f1b9 0f00 	cmp.w	r9, #0
 80094d2:	f47f af38 	bne.w	8009346 <_scanf_float+0x6a>
 80094d6:	6822      	ldr	r2, [r4, #0]
 80094d8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80094dc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80094e0:	f040 8108 	bne.w	80096f4 <_scanf_float+0x418>
 80094e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80094e8:	6022      	str	r2, [r4, #0]
 80094ea:	2501      	movs	r5, #1
 80094ec:	e7bf      	b.n	800946e <_scanf_float+0x192>
 80094ee:	2d03      	cmp	r5, #3
 80094f0:	d0e2      	beq.n	80094b8 <_scanf_float+0x1dc>
 80094f2:	2d05      	cmp	r5, #5
 80094f4:	e7de      	b.n	80094b4 <_scanf_float+0x1d8>
 80094f6:	2d02      	cmp	r5, #2
 80094f8:	f47f af22 	bne.w	8009340 <_scanf_float+0x64>
 80094fc:	2503      	movs	r5, #3
 80094fe:	e7b6      	b.n	800946e <_scanf_float+0x192>
 8009500:	2d06      	cmp	r5, #6
 8009502:	f47f af1d 	bne.w	8009340 <_scanf_float+0x64>
 8009506:	2507      	movs	r5, #7
 8009508:	e7b1      	b.n	800946e <_scanf_float+0x192>
 800950a:	6822      	ldr	r2, [r4, #0]
 800950c:	0591      	lsls	r1, r2, #22
 800950e:	f57f af17 	bpl.w	8009340 <_scanf_float+0x64>
 8009512:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009516:	6022      	str	r2, [r4, #0]
 8009518:	f8cd 9008 	str.w	r9, [sp, #8]
 800951c:	e7a7      	b.n	800946e <_scanf_float+0x192>
 800951e:	6822      	ldr	r2, [r4, #0]
 8009520:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009524:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009528:	d006      	beq.n	8009538 <_scanf_float+0x25c>
 800952a:	0550      	lsls	r0, r2, #21
 800952c:	f57f af08 	bpl.w	8009340 <_scanf_float+0x64>
 8009530:	f1b9 0f00 	cmp.w	r9, #0
 8009534:	f000 80de 	beq.w	80096f4 <_scanf_float+0x418>
 8009538:	0591      	lsls	r1, r2, #22
 800953a:	bf58      	it	pl
 800953c:	9902      	ldrpl	r1, [sp, #8]
 800953e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009542:	bf58      	it	pl
 8009544:	eba9 0101 	subpl.w	r1, r9, r1
 8009548:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800954c:	bf58      	it	pl
 800954e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009552:	6022      	str	r2, [r4, #0]
 8009554:	f04f 0900 	mov.w	r9, #0
 8009558:	e789      	b.n	800946e <_scanf_float+0x192>
 800955a:	f04f 0a03 	mov.w	sl, #3
 800955e:	e786      	b.n	800946e <_scanf_float+0x192>
 8009560:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009564:	4639      	mov	r1, r7
 8009566:	4640      	mov	r0, r8
 8009568:	4798      	blx	r3
 800956a:	2800      	cmp	r0, #0
 800956c:	f43f aedb 	beq.w	8009326 <_scanf_float+0x4a>
 8009570:	e6e6      	b.n	8009340 <_scanf_float+0x64>
 8009572:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009576:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800957a:	463a      	mov	r2, r7
 800957c:	4640      	mov	r0, r8
 800957e:	4798      	blx	r3
 8009580:	6923      	ldr	r3, [r4, #16]
 8009582:	3b01      	subs	r3, #1
 8009584:	6123      	str	r3, [r4, #16]
 8009586:	e6e8      	b.n	800935a <_scanf_float+0x7e>
 8009588:	1e6b      	subs	r3, r5, #1
 800958a:	2b06      	cmp	r3, #6
 800958c:	d824      	bhi.n	80095d8 <_scanf_float+0x2fc>
 800958e:	2d02      	cmp	r5, #2
 8009590:	d836      	bhi.n	8009600 <_scanf_float+0x324>
 8009592:	9b01      	ldr	r3, [sp, #4]
 8009594:	429e      	cmp	r6, r3
 8009596:	f67f aee4 	bls.w	8009362 <_scanf_float+0x86>
 800959a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800959e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80095a2:	463a      	mov	r2, r7
 80095a4:	4640      	mov	r0, r8
 80095a6:	4798      	blx	r3
 80095a8:	6923      	ldr	r3, [r4, #16]
 80095aa:	3b01      	subs	r3, #1
 80095ac:	6123      	str	r3, [r4, #16]
 80095ae:	e7f0      	b.n	8009592 <_scanf_float+0x2b6>
 80095b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80095b4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80095b8:	463a      	mov	r2, r7
 80095ba:	4640      	mov	r0, r8
 80095bc:	4798      	blx	r3
 80095be:	6923      	ldr	r3, [r4, #16]
 80095c0:	3b01      	subs	r3, #1
 80095c2:	6123      	str	r3, [r4, #16]
 80095c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095c8:	fa5f fa8a 	uxtb.w	sl, sl
 80095cc:	f1ba 0f02 	cmp.w	sl, #2
 80095d0:	d1ee      	bne.n	80095b0 <_scanf_float+0x2d4>
 80095d2:	3d03      	subs	r5, #3
 80095d4:	b2ed      	uxtb	r5, r5
 80095d6:	1b76      	subs	r6, r6, r5
 80095d8:	6823      	ldr	r3, [r4, #0]
 80095da:	05da      	lsls	r2, r3, #23
 80095dc:	d530      	bpl.n	8009640 <_scanf_float+0x364>
 80095de:	055b      	lsls	r3, r3, #21
 80095e0:	d511      	bpl.n	8009606 <_scanf_float+0x32a>
 80095e2:	9b01      	ldr	r3, [sp, #4]
 80095e4:	429e      	cmp	r6, r3
 80095e6:	f67f aebc 	bls.w	8009362 <_scanf_float+0x86>
 80095ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80095ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80095f2:	463a      	mov	r2, r7
 80095f4:	4640      	mov	r0, r8
 80095f6:	4798      	blx	r3
 80095f8:	6923      	ldr	r3, [r4, #16]
 80095fa:	3b01      	subs	r3, #1
 80095fc:	6123      	str	r3, [r4, #16]
 80095fe:	e7f0      	b.n	80095e2 <_scanf_float+0x306>
 8009600:	46aa      	mov	sl, r5
 8009602:	46b3      	mov	fp, r6
 8009604:	e7de      	b.n	80095c4 <_scanf_float+0x2e8>
 8009606:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800960a:	6923      	ldr	r3, [r4, #16]
 800960c:	2965      	cmp	r1, #101	@ 0x65
 800960e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009612:	f106 35ff 	add.w	r5, r6, #4294967295
 8009616:	6123      	str	r3, [r4, #16]
 8009618:	d00c      	beq.n	8009634 <_scanf_float+0x358>
 800961a:	2945      	cmp	r1, #69	@ 0x45
 800961c:	d00a      	beq.n	8009634 <_scanf_float+0x358>
 800961e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009622:	463a      	mov	r2, r7
 8009624:	4640      	mov	r0, r8
 8009626:	4798      	blx	r3
 8009628:	6923      	ldr	r3, [r4, #16]
 800962a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800962e:	3b01      	subs	r3, #1
 8009630:	1eb5      	subs	r5, r6, #2
 8009632:	6123      	str	r3, [r4, #16]
 8009634:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009638:	463a      	mov	r2, r7
 800963a:	4640      	mov	r0, r8
 800963c:	4798      	blx	r3
 800963e:	462e      	mov	r6, r5
 8009640:	6822      	ldr	r2, [r4, #0]
 8009642:	f012 0210 	ands.w	r2, r2, #16
 8009646:	d001      	beq.n	800964c <_scanf_float+0x370>
 8009648:	2000      	movs	r0, #0
 800964a:	e68b      	b.n	8009364 <_scanf_float+0x88>
 800964c:	7032      	strb	r2, [r6, #0]
 800964e:	6823      	ldr	r3, [r4, #0]
 8009650:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009658:	d11c      	bne.n	8009694 <_scanf_float+0x3b8>
 800965a:	9b02      	ldr	r3, [sp, #8]
 800965c:	454b      	cmp	r3, r9
 800965e:	eba3 0209 	sub.w	r2, r3, r9
 8009662:	d123      	bne.n	80096ac <_scanf_float+0x3d0>
 8009664:	9901      	ldr	r1, [sp, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	4640      	mov	r0, r8
 800966a:	f002 fc15 	bl	800be98 <_strtod_r>
 800966e:	9b03      	ldr	r3, [sp, #12]
 8009670:	6821      	ldr	r1, [r4, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f011 0f02 	tst.w	r1, #2
 8009678:	ec57 6b10 	vmov	r6, r7, d0
 800967c:	f103 0204 	add.w	r2, r3, #4
 8009680:	d01f      	beq.n	80096c2 <_scanf_float+0x3e6>
 8009682:	9903      	ldr	r1, [sp, #12]
 8009684:	600a      	str	r2, [r1, #0]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	e9c3 6700 	strd	r6, r7, [r3]
 800968c:	68e3      	ldr	r3, [r4, #12]
 800968e:	3301      	adds	r3, #1
 8009690:	60e3      	str	r3, [r4, #12]
 8009692:	e7d9      	b.n	8009648 <_scanf_float+0x36c>
 8009694:	9b04      	ldr	r3, [sp, #16]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d0e4      	beq.n	8009664 <_scanf_float+0x388>
 800969a:	9905      	ldr	r1, [sp, #20]
 800969c:	230a      	movs	r3, #10
 800969e:	3101      	adds	r1, #1
 80096a0:	4640      	mov	r0, r8
 80096a2:	f002 fc79 	bl	800bf98 <_strtol_r>
 80096a6:	9b04      	ldr	r3, [sp, #16]
 80096a8:	9e05      	ldr	r6, [sp, #20]
 80096aa:	1ac2      	subs	r2, r0, r3
 80096ac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80096b0:	429e      	cmp	r6, r3
 80096b2:	bf28      	it	cs
 80096b4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80096b8:	4910      	ldr	r1, [pc, #64]	@ (80096fc <_scanf_float+0x420>)
 80096ba:	4630      	mov	r0, r6
 80096bc:	f000 f8e4 	bl	8009888 <siprintf>
 80096c0:	e7d0      	b.n	8009664 <_scanf_float+0x388>
 80096c2:	f011 0f04 	tst.w	r1, #4
 80096c6:	9903      	ldr	r1, [sp, #12]
 80096c8:	600a      	str	r2, [r1, #0]
 80096ca:	d1dc      	bne.n	8009686 <_scanf_float+0x3aa>
 80096cc:	681d      	ldr	r5, [r3, #0]
 80096ce:	4632      	mov	r2, r6
 80096d0:	463b      	mov	r3, r7
 80096d2:	4630      	mov	r0, r6
 80096d4:	4639      	mov	r1, r7
 80096d6:	f7f7 fa51 	bl	8000b7c <__aeabi_dcmpun>
 80096da:	b128      	cbz	r0, 80096e8 <_scanf_float+0x40c>
 80096dc:	4808      	ldr	r0, [pc, #32]	@ (8009700 <_scanf_float+0x424>)
 80096de:	f000 f9d3 	bl	8009a88 <nanf>
 80096e2:	ed85 0a00 	vstr	s0, [r5]
 80096e6:	e7d1      	b.n	800968c <_scanf_float+0x3b0>
 80096e8:	4630      	mov	r0, r6
 80096ea:	4639      	mov	r1, r7
 80096ec:	f7f7 faa4 	bl	8000c38 <__aeabi_d2f>
 80096f0:	6028      	str	r0, [r5, #0]
 80096f2:	e7cb      	b.n	800968c <_scanf_float+0x3b0>
 80096f4:	f04f 0900 	mov.w	r9, #0
 80096f8:	e629      	b.n	800934e <_scanf_float+0x72>
 80096fa:	bf00      	nop
 80096fc:	0800d218 	.word	0x0800d218
 8009700:	0800d5ad 	.word	0x0800d5ad

08009704 <std>:
 8009704:	2300      	movs	r3, #0
 8009706:	b510      	push	{r4, lr}
 8009708:	4604      	mov	r4, r0
 800970a:	e9c0 3300 	strd	r3, r3, [r0]
 800970e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009712:	6083      	str	r3, [r0, #8]
 8009714:	8181      	strh	r1, [r0, #12]
 8009716:	6643      	str	r3, [r0, #100]	@ 0x64
 8009718:	81c2      	strh	r2, [r0, #14]
 800971a:	6183      	str	r3, [r0, #24]
 800971c:	4619      	mov	r1, r3
 800971e:	2208      	movs	r2, #8
 8009720:	305c      	adds	r0, #92	@ 0x5c
 8009722:	f000 f914 	bl	800994e <memset>
 8009726:	4b0d      	ldr	r3, [pc, #52]	@ (800975c <std+0x58>)
 8009728:	6263      	str	r3, [r4, #36]	@ 0x24
 800972a:	4b0d      	ldr	r3, [pc, #52]	@ (8009760 <std+0x5c>)
 800972c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800972e:	4b0d      	ldr	r3, [pc, #52]	@ (8009764 <std+0x60>)
 8009730:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009732:	4b0d      	ldr	r3, [pc, #52]	@ (8009768 <std+0x64>)
 8009734:	6323      	str	r3, [r4, #48]	@ 0x30
 8009736:	4b0d      	ldr	r3, [pc, #52]	@ (800976c <std+0x68>)
 8009738:	6224      	str	r4, [r4, #32]
 800973a:	429c      	cmp	r4, r3
 800973c:	d006      	beq.n	800974c <std+0x48>
 800973e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009742:	4294      	cmp	r4, r2
 8009744:	d002      	beq.n	800974c <std+0x48>
 8009746:	33d0      	adds	r3, #208	@ 0xd0
 8009748:	429c      	cmp	r4, r3
 800974a:	d105      	bne.n	8009758 <std+0x54>
 800974c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009754:	f000 b986 	b.w	8009a64 <__retarget_lock_init_recursive>
 8009758:	bd10      	pop	{r4, pc}
 800975a:	bf00      	nop
 800975c:	080098c9 	.word	0x080098c9
 8009760:	080098eb 	.word	0x080098eb
 8009764:	08009923 	.word	0x08009923
 8009768:	08009947 	.word	0x08009947
 800976c:	200007a8 	.word	0x200007a8

08009770 <stdio_exit_handler>:
 8009770:	4a02      	ldr	r2, [pc, #8]	@ (800977c <stdio_exit_handler+0xc>)
 8009772:	4903      	ldr	r1, [pc, #12]	@ (8009780 <stdio_exit_handler+0x10>)
 8009774:	4803      	ldr	r0, [pc, #12]	@ (8009784 <stdio_exit_handler+0x14>)
 8009776:	f000 b869 	b.w	800984c <_fwalk_sglue>
 800977a:	bf00      	nop
 800977c:	20000008 	.word	0x20000008
 8009780:	0800c355 	.word	0x0800c355
 8009784:	20000018 	.word	0x20000018

08009788 <cleanup_stdio>:
 8009788:	6841      	ldr	r1, [r0, #4]
 800978a:	4b0c      	ldr	r3, [pc, #48]	@ (80097bc <cleanup_stdio+0x34>)
 800978c:	4299      	cmp	r1, r3
 800978e:	b510      	push	{r4, lr}
 8009790:	4604      	mov	r4, r0
 8009792:	d001      	beq.n	8009798 <cleanup_stdio+0x10>
 8009794:	f002 fdde 	bl	800c354 <_fflush_r>
 8009798:	68a1      	ldr	r1, [r4, #8]
 800979a:	4b09      	ldr	r3, [pc, #36]	@ (80097c0 <cleanup_stdio+0x38>)
 800979c:	4299      	cmp	r1, r3
 800979e:	d002      	beq.n	80097a6 <cleanup_stdio+0x1e>
 80097a0:	4620      	mov	r0, r4
 80097a2:	f002 fdd7 	bl	800c354 <_fflush_r>
 80097a6:	68e1      	ldr	r1, [r4, #12]
 80097a8:	4b06      	ldr	r3, [pc, #24]	@ (80097c4 <cleanup_stdio+0x3c>)
 80097aa:	4299      	cmp	r1, r3
 80097ac:	d004      	beq.n	80097b8 <cleanup_stdio+0x30>
 80097ae:	4620      	mov	r0, r4
 80097b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097b4:	f002 bdce 	b.w	800c354 <_fflush_r>
 80097b8:	bd10      	pop	{r4, pc}
 80097ba:	bf00      	nop
 80097bc:	200007a8 	.word	0x200007a8
 80097c0:	20000810 	.word	0x20000810
 80097c4:	20000878 	.word	0x20000878

080097c8 <global_stdio_init.part.0>:
 80097c8:	b510      	push	{r4, lr}
 80097ca:	4b0b      	ldr	r3, [pc, #44]	@ (80097f8 <global_stdio_init.part.0+0x30>)
 80097cc:	4c0b      	ldr	r4, [pc, #44]	@ (80097fc <global_stdio_init.part.0+0x34>)
 80097ce:	4a0c      	ldr	r2, [pc, #48]	@ (8009800 <global_stdio_init.part.0+0x38>)
 80097d0:	601a      	str	r2, [r3, #0]
 80097d2:	4620      	mov	r0, r4
 80097d4:	2200      	movs	r2, #0
 80097d6:	2104      	movs	r1, #4
 80097d8:	f7ff ff94 	bl	8009704 <std>
 80097dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80097e0:	2201      	movs	r2, #1
 80097e2:	2109      	movs	r1, #9
 80097e4:	f7ff ff8e 	bl	8009704 <std>
 80097e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80097ec:	2202      	movs	r2, #2
 80097ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097f2:	2112      	movs	r1, #18
 80097f4:	f7ff bf86 	b.w	8009704 <std>
 80097f8:	200008e0 	.word	0x200008e0
 80097fc:	200007a8 	.word	0x200007a8
 8009800:	08009771 	.word	0x08009771

08009804 <__sfp_lock_acquire>:
 8009804:	4801      	ldr	r0, [pc, #4]	@ (800980c <__sfp_lock_acquire+0x8>)
 8009806:	f000 b92e 	b.w	8009a66 <__retarget_lock_acquire_recursive>
 800980a:	bf00      	nop
 800980c:	200008e9 	.word	0x200008e9

08009810 <__sfp_lock_release>:
 8009810:	4801      	ldr	r0, [pc, #4]	@ (8009818 <__sfp_lock_release+0x8>)
 8009812:	f000 b929 	b.w	8009a68 <__retarget_lock_release_recursive>
 8009816:	bf00      	nop
 8009818:	200008e9 	.word	0x200008e9

0800981c <__sinit>:
 800981c:	b510      	push	{r4, lr}
 800981e:	4604      	mov	r4, r0
 8009820:	f7ff fff0 	bl	8009804 <__sfp_lock_acquire>
 8009824:	6a23      	ldr	r3, [r4, #32]
 8009826:	b11b      	cbz	r3, 8009830 <__sinit+0x14>
 8009828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800982c:	f7ff bff0 	b.w	8009810 <__sfp_lock_release>
 8009830:	4b04      	ldr	r3, [pc, #16]	@ (8009844 <__sinit+0x28>)
 8009832:	6223      	str	r3, [r4, #32]
 8009834:	4b04      	ldr	r3, [pc, #16]	@ (8009848 <__sinit+0x2c>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1f5      	bne.n	8009828 <__sinit+0xc>
 800983c:	f7ff ffc4 	bl	80097c8 <global_stdio_init.part.0>
 8009840:	e7f2      	b.n	8009828 <__sinit+0xc>
 8009842:	bf00      	nop
 8009844:	08009789 	.word	0x08009789
 8009848:	200008e0 	.word	0x200008e0

0800984c <_fwalk_sglue>:
 800984c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009850:	4607      	mov	r7, r0
 8009852:	4688      	mov	r8, r1
 8009854:	4614      	mov	r4, r2
 8009856:	2600      	movs	r6, #0
 8009858:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800985c:	f1b9 0901 	subs.w	r9, r9, #1
 8009860:	d505      	bpl.n	800986e <_fwalk_sglue+0x22>
 8009862:	6824      	ldr	r4, [r4, #0]
 8009864:	2c00      	cmp	r4, #0
 8009866:	d1f7      	bne.n	8009858 <_fwalk_sglue+0xc>
 8009868:	4630      	mov	r0, r6
 800986a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800986e:	89ab      	ldrh	r3, [r5, #12]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d907      	bls.n	8009884 <_fwalk_sglue+0x38>
 8009874:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009878:	3301      	adds	r3, #1
 800987a:	d003      	beq.n	8009884 <_fwalk_sglue+0x38>
 800987c:	4629      	mov	r1, r5
 800987e:	4638      	mov	r0, r7
 8009880:	47c0      	blx	r8
 8009882:	4306      	orrs	r6, r0
 8009884:	3568      	adds	r5, #104	@ 0x68
 8009886:	e7e9      	b.n	800985c <_fwalk_sglue+0x10>

08009888 <siprintf>:
 8009888:	b40e      	push	{r1, r2, r3}
 800988a:	b500      	push	{lr}
 800988c:	b09c      	sub	sp, #112	@ 0x70
 800988e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009890:	9002      	str	r0, [sp, #8]
 8009892:	9006      	str	r0, [sp, #24]
 8009894:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009898:	4809      	ldr	r0, [pc, #36]	@ (80098c0 <siprintf+0x38>)
 800989a:	9107      	str	r1, [sp, #28]
 800989c:	9104      	str	r1, [sp, #16]
 800989e:	4909      	ldr	r1, [pc, #36]	@ (80098c4 <siprintf+0x3c>)
 80098a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80098a4:	9105      	str	r1, [sp, #20]
 80098a6:	6800      	ldr	r0, [r0, #0]
 80098a8:	9301      	str	r3, [sp, #4]
 80098aa:	a902      	add	r1, sp, #8
 80098ac:	f002 fbd2 	bl	800c054 <_svfiprintf_r>
 80098b0:	9b02      	ldr	r3, [sp, #8]
 80098b2:	2200      	movs	r2, #0
 80098b4:	701a      	strb	r2, [r3, #0]
 80098b6:	b01c      	add	sp, #112	@ 0x70
 80098b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80098bc:	b003      	add	sp, #12
 80098be:	4770      	bx	lr
 80098c0:	20000014 	.word	0x20000014
 80098c4:	ffff0208 	.word	0xffff0208

080098c8 <__sread>:
 80098c8:	b510      	push	{r4, lr}
 80098ca:	460c      	mov	r4, r1
 80098cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d0:	f000 f87a 	bl	80099c8 <_read_r>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	bfab      	itete	ge
 80098d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80098da:	89a3      	ldrhlt	r3, [r4, #12]
 80098dc:	181b      	addge	r3, r3, r0
 80098de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80098e2:	bfac      	ite	ge
 80098e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80098e6:	81a3      	strhlt	r3, [r4, #12]
 80098e8:	bd10      	pop	{r4, pc}

080098ea <__swrite>:
 80098ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ee:	461f      	mov	r7, r3
 80098f0:	898b      	ldrh	r3, [r1, #12]
 80098f2:	05db      	lsls	r3, r3, #23
 80098f4:	4605      	mov	r5, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	4616      	mov	r6, r2
 80098fa:	d505      	bpl.n	8009908 <__swrite+0x1e>
 80098fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009900:	2302      	movs	r3, #2
 8009902:	2200      	movs	r2, #0
 8009904:	f000 f84e 	bl	80099a4 <_lseek_r>
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800990e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009912:	81a3      	strh	r3, [r4, #12]
 8009914:	4632      	mov	r2, r6
 8009916:	463b      	mov	r3, r7
 8009918:	4628      	mov	r0, r5
 800991a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800991e:	f000 b865 	b.w	80099ec <_write_r>

08009922 <__sseek>:
 8009922:	b510      	push	{r4, lr}
 8009924:	460c      	mov	r4, r1
 8009926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800992a:	f000 f83b 	bl	80099a4 <_lseek_r>
 800992e:	1c43      	adds	r3, r0, #1
 8009930:	89a3      	ldrh	r3, [r4, #12]
 8009932:	bf15      	itete	ne
 8009934:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009936:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800993a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800993e:	81a3      	strheq	r3, [r4, #12]
 8009940:	bf18      	it	ne
 8009942:	81a3      	strhne	r3, [r4, #12]
 8009944:	bd10      	pop	{r4, pc}

08009946 <__sclose>:
 8009946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800994a:	f000 b81b 	b.w	8009984 <_close_r>

0800994e <memset>:
 800994e:	4402      	add	r2, r0
 8009950:	4603      	mov	r3, r0
 8009952:	4293      	cmp	r3, r2
 8009954:	d100      	bne.n	8009958 <memset+0xa>
 8009956:	4770      	bx	lr
 8009958:	f803 1b01 	strb.w	r1, [r3], #1
 800995c:	e7f9      	b.n	8009952 <memset+0x4>

0800995e <strcat>:
 800995e:	b510      	push	{r4, lr}
 8009960:	4602      	mov	r2, r0
 8009962:	7814      	ldrb	r4, [r2, #0]
 8009964:	4613      	mov	r3, r2
 8009966:	3201      	adds	r2, #1
 8009968:	2c00      	cmp	r4, #0
 800996a:	d1fa      	bne.n	8009962 <strcat+0x4>
 800996c:	3b01      	subs	r3, #1
 800996e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009972:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009976:	2a00      	cmp	r2, #0
 8009978:	d1f9      	bne.n	800996e <strcat+0x10>
 800997a:	bd10      	pop	{r4, pc}

0800997c <_localeconv_r>:
 800997c:	4800      	ldr	r0, [pc, #0]	@ (8009980 <_localeconv_r+0x4>)
 800997e:	4770      	bx	lr
 8009980:	20000154 	.word	0x20000154

08009984 <_close_r>:
 8009984:	b538      	push	{r3, r4, r5, lr}
 8009986:	4d06      	ldr	r5, [pc, #24]	@ (80099a0 <_close_r+0x1c>)
 8009988:	2300      	movs	r3, #0
 800998a:	4604      	mov	r4, r0
 800998c:	4608      	mov	r0, r1
 800998e:	602b      	str	r3, [r5, #0]
 8009990:	f7f9 fb92 	bl	80030b8 <_close>
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d102      	bne.n	800999e <_close_r+0x1a>
 8009998:	682b      	ldr	r3, [r5, #0]
 800999a:	b103      	cbz	r3, 800999e <_close_r+0x1a>
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	bd38      	pop	{r3, r4, r5, pc}
 80099a0:	200008e4 	.word	0x200008e4

080099a4 <_lseek_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	4d07      	ldr	r5, [pc, #28]	@ (80099c4 <_lseek_r+0x20>)
 80099a8:	4604      	mov	r4, r0
 80099aa:	4608      	mov	r0, r1
 80099ac:	4611      	mov	r1, r2
 80099ae:	2200      	movs	r2, #0
 80099b0:	602a      	str	r2, [r5, #0]
 80099b2:	461a      	mov	r2, r3
 80099b4:	f7f9 fba7 	bl	8003106 <_lseek>
 80099b8:	1c43      	adds	r3, r0, #1
 80099ba:	d102      	bne.n	80099c2 <_lseek_r+0x1e>
 80099bc:	682b      	ldr	r3, [r5, #0]
 80099be:	b103      	cbz	r3, 80099c2 <_lseek_r+0x1e>
 80099c0:	6023      	str	r3, [r4, #0]
 80099c2:	bd38      	pop	{r3, r4, r5, pc}
 80099c4:	200008e4 	.word	0x200008e4

080099c8 <_read_r>:
 80099c8:	b538      	push	{r3, r4, r5, lr}
 80099ca:	4d07      	ldr	r5, [pc, #28]	@ (80099e8 <_read_r+0x20>)
 80099cc:	4604      	mov	r4, r0
 80099ce:	4608      	mov	r0, r1
 80099d0:	4611      	mov	r1, r2
 80099d2:	2200      	movs	r2, #0
 80099d4:	602a      	str	r2, [r5, #0]
 80099d6:	461a      	mov	r2, r3
 80099d8:	f7f9 fb35 	bl	8003046 <_read>
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	d102      	bne.n	80099e6 <_read_r+0x1e>
 80099e0:	682b      	ldr	r3, [r5, #0]
 80099e2:	b103      	cbz	r3, 80099e6 <_read_r+0x1e>
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	200008e4 	.word	0x200008e4

080099ec <_write_r>:
 80099ec:	b538      	push	{r3, r4, r5, lr}
 80099ee:	4d07      	ldr	r5, [pc, #28]	@ (8009a0c <_write_r+0x20>)
 80099f0:	4604      	mov	r4, r0
 80099f2:	4608      	mov	r0, r1
 80099f4:	4611      	mov	r1, r2
 80099f6:	2200      	movs	r2, #0
 80099f8:	602a      	str	r2, [r5, #0]
 80099fa:	461a      	mov	r2, r3
 80099fc:	f7f9 fb40 	bl	8003080 <_write>
 8009a00:	1c43      	adds	r3, r0, #1
 8009a02:	d102      	bne.n	8009a0a <_write_r+0x1e>
 8009a04:	682b      	ldr	r3, [r5, #0]
 8009a06:	b103      	cbz	r3, 8009a0a <_write_r+0x1e>
 8009a08:	6023      	str	r3, [r4, #0]
 8009a0a:	bd38      	pop	{r3, r4, r5, pc}
 8009a0c:	200008e4 	.word	0x200008e4

08009a10 <__errno>:
 8009a10:	4b01      	ldr	r3, [pc, #4]	@ (8009a18 <__errno+0x8>)
 8009a12:	6818      	ldr	r0, [r3, #0]
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	20000014 	.word	0x20000014

08009a1c <__libc_init_array>:
 8009a1c:	b570      	push	{r4, r5, r6, lr}
 8009a1e:	4d0d      	ldr	r5, [pc, #52]	@ (8009a54 <__libc_init_array+0x38>)
 8009a20:	4c0d      	ldr	r4, [pc, #52]	@ (8009a58 <__libc_init_array+0x3c>)
 8009a22:	1b64      	subs	r4, r4, r5
 8009a24:	10a4      	asrs	r4, r4, #2
 8009a26:	2600      	movs	r6, #0
 8009a28:	42a6      	cmp	r6, r4
 8009a2a:	d109      	bne.n	8009a40 <__libc_init_array+0x24>
 8009a2c:	4d0b      	ldr	r5, [pc, #44]	@ (8009a5c <__libc_init_array+0x40>)
 8009a2e:	4c0c      	ldr	r4, [pc, #48]	@ (8009a60 <__libc_init_array+0x44>)
 8009a30:	f003 fb74 	bl	800d11c <_init>
 8009a34:	1b64      	subs	r4, r4, r5
 8009a36:	10a4      	asrs	r4, r4, #2
 8009a38:	2600      	movs	r6, #0
 8009a3a:	42a6      	cmp	r6, r4
 8009a3c:	d105      	bne.n	8009a4a <__libc_init_array+0x2e>
 8009a3e:	bd70      	pop	{r4, r5, r6, pc}
 8009a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a44:	4798      	blx	r3
 8009a46:	3601      	adds	r6, #1
 8009a48:	e7ee      	b.n	8009a28 <__libc_init_array+0xc>
 8009a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a4e:	4798      	blx	r3
 8009a50:	3601      	adds	r6, #1
 8009a52:	e7f2      	b.n	8009a3a <__libc_init_array+0x1e>
 8009a54:	0800d618 	.word	0x0800d618
 8009a58:	0800d618 	.word	0x0800d618
 8009a5c:	0800d618 	.word	0x0800d618
 8009a60:	0800d61c 	.word	0x0800d61c

08009a64 <__retarget_lock_init_recursive>:
 8009a64:	4770      	bx	lr

08009a66 <__retarget_lock_acquire_recursive>:
 8009a66:	4770      	bx	lr

08009a68 <__retarget_lock_release_recursive>:
 8009a68:	4770      	bx	lr

08009a6a <memcpy>:
 8009a6a:	440a      	add	r2, r1
 8009a6c:	4291      	cmp	r1, r2
 8009a6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a72:	d100      	bne.n	8009a76 <memcpy+0xc>
 8009a74:	4770      	bx	lr
 8009a76:	b510      	push	{r4, lr}
 8009a78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a80:	4291      	cmp	r1, r2
 8009a82:	d1f9      	bne.n	8009a78 <memcpy+0xe>
 8009a84:	bd10      	pop	{r4, pc}
	...

08009a88 <nanf>:
 8009a88:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009a90 <nanf+0x8>
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	7fc00000 	.word	0x7fc00000

08009a94 <quorem>:
 8009a94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a98:	6903      	ldr	r3, [r0, #16]
 8009a9a:	690c      	ldr	r4, [r1, #16]
 8009a9c:	42a3      	cmp	r3, r4
 8009a9e:	4607      	mov	r7, r0
 8009aa0:	db7e      	blt.n	8009ba0 <quorem+0x10c>
 8009aa2:	3c01      	subs	r4, #1
 8009aa4:	f101 0814 	add.w	r8, r1, #20
 8009aa8:	00a3      	lsls	r3, r4, #2
 8009aaa:	f100 0514 	add.w	r5, r0, #20
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ab4:	9301      	str	r3, [sp, #4]
 8009ab6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009aba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ac6:	fbb2 f6f3 	udiv	r6, r2, r3
 8009aca:	d32e      	bcc.n	8009b2a <quorem+0x96>
 8009acc:	f04f 0a00 	mov.w	sl, #0
 8009ad0:	46c4      	mov	ip, r8
 8009ad2:	46ae      	mov	lr, r5
 8009ad4:	46d3      	mov	fp, sl
 8009ad6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009ada:	b298      	uxth	r0, r3
 8009adc:	fb06 a000 	mla	r0, r6, r0, sl
 8009ae0:	0c02      	lsrs	r2, r0, #16
 8009ae2:	0c1b      	lsrs	r3, r3, #16
 8009ae4:	fb06 2303 	mla	r3, r6, r3, r2
 8009ae8:	f8de 2000 	ldr.w	r2, [lr]
 8009aec:	b280      	uxth	r0, r0
 8009aee:	b292      	uxth	r2, r2
 8009af0:	1a12      	subs	r2, r2, r0
 8009af2:	445a      	add	r2, fp
 8009af4:	f8de 0000 	ldr.w	r0, [lr]
 8009af8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009b02:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009b06:	b292      	uxth	r2, r2
 8009b08:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009b0c:	45e1      	cmp	r9, ip
 8009b0e:	f84e 2b04 	str.w	r2, [lr], #4
 8009b12:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009b16:	d2de      	bcs.n	8009ad6 <quorem+0x42>
 8009b18:	9b00      	ldr	r3, [sp, #0]
 8009b1a:	58eb      	ldr	r3, [r5, r3]
 8009b1c:	b92b      	cbnz	r3, 8009b2a <quorem+0x96>
 8009b1e:	9b01      	ldr	r3, [sp, #4]
 8009b20:	3b04      	subs	r3, #4
 8009b22:	429d      	cmp	r5, r3
 8009b24:	461a      	mov	r2, r3
 8009b26:	d32f      	bcc.n	8009b88 <quorem+0xf4>
 8009b28:	613c      	str	r4, [r7, #16]
 8009b2a:	4638      	mov	r0, r7
 8009b2c:	f001 f9c4 	bl	800aeb8 <__mcmp>
 8009b30:	2800      	cmp	r0, #0
 8009b32:	db25      	blt.n	8009b80 <quorem+0xec>
 8009b34:	4629      	mov	r1, r5
 8009b36:	2000      	movs	r0, #0
 8009b38:	f858 2b04 	ldr.w	r2, [r8], #4
 8009b3c:	f8d1 c000 	ldr.w	ip, [r1]
 8009b40:	fa1f fe82 	uxth.w	lr, r2
 8009b44:	fa1f f38c 	uxth.w	r3, ip
 8009b48:	eba3 030e 	sub.w	r3, r3, lr
 8009b4c:	4403      	add	r3, r0
 8009b4e:	0c12      	lsrs	r2, r2, #16
 8009b50:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009b54:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b5e:	45c1      	cmp	r9, r8
 8009b60:	f841 3b04 	str.w	r3, [r1], #4
 8009b64:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009b68:	d2e6      	bcs.n	8009b38 <quorem+0xa4>
 8009b6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b72:	b922      	cbnz	r2, 8009b7e <quorem+0xea>
 8009b74:	3b04      	subs	r3, #4
 8009b76:	429d      	cmp	r5, r3
 8009b78:	461a      	mov	r2, r3
 8009b7a:	d30b      	bcc.n	8009b94 <quorem+0x100>
 8009b7c:	613c      	str	r4, [r7, #16]
 8009b7e:	3601      	adds	r6, #1
 8009b80:	4630      	mov	r0, r6
 8009b82:	b003      	add	sp, #12
 8009b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b88:	6812      	ldr	r2, [r2, #0]
 8009b8a:	3b04      	subs	r3, #4
 8009b8c:	2a00      	cmp	r2, #0
 8009b8e:	d1cb      	bne.n	8009b28 <quorem+0x94>
 8009b90:	3c01      	subs	r4, #1
 8009b92:	e7c6      	b.n	8009b22 <quorem+0x8e>
 8009b94:	6812      	ldr	r2, [r2, #0]
 8009b96:	3b04      	subs	r3, #4
 8009b98:	2a00      	cmp	r2, #0
 8009b9a:	d1ef      	bne.n	8009b7c <quorem+0xe8>
 8009b9c:	3c01      	subs	r4, #1
 8009b9e:	e7ea      	b.n	8009b76 <quorem+0xe2>
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	e7ee      	b.n	8009b82 <quorem+0xee>
 8009ba4:	0000      	movs	r0, r0
	...

08009ba8 <_dtoa_r>:
 8009ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bac:	69c7      	ldr	r7, [r0, #28]
 8009bae:	b099      	sub	sp, #100	@ 0x64
 8009bb0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009bb4:	ec55 4b10 	vmov	r4, r5, d0
 8009bb8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009bba:	9109      	str	r1, [sp, #36]	@ 0x24
 8009bbc:	4683      	mov	fp, r0
 8009bbe:	920e      	str	r2, [sp, #56]	@ 0x38
 8009bc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009bc2:	b97f      	cbnz	r7, 8009be4 <_dtoa_r+0x3c>
 8009bc4:	2010      	movs	r0, #16
 8009bc6:	f000 fdfd 	bl	800a7c4 <malloc>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	f8cb 001c 	str.w	r0, [fp, #28]
 8009bd0:	b920      	cbnz	r0, 8009bdc <_dtoa_r+0x34>
 8009bd2:	4ba7      	ldr	r3, [pc, #668]	@ (8009e70 <_dtoa_r+0x2c8>)
 8009bd4:	21ef      	movs	r1, #239	@ 0xef
 8009bd6:	48a7      	ldr	r0, [pc, #668]	@ (8009e74 <_dtoa_r+0x2cc>)
 8009bd8:	f002 fc2a 	bl	800c430 <__assert_func>
 8009bdc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009be0:	6007      	str	r7, [r0, #0]
 8009be2:	60c7      	str	r7, [r0, #12]
 8009be4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009be8:	6819      	ldr	r1, [r3, #0]
 8009bea:	b159      	cbz	r1, 8009c04 <_dtoa_r+0x5c>
 8009bec:	685a      	ldr	r2, [r3, #4]
 8009bee:	604a      	str	r2, [r1, #4]
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	4093      	lsls	r3, r2
 8009bf4:	608b      	str	r3, [r1, #8]
 8009bf6:	4658      	mov	r0, fp
 8009bf8:	f000 feda 	bl	800a9b0 <_Bfree>
 8009bfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009c00:	2200      	movs	r2, #0
 8009c02:	601a      	str	r2, [r3, #0]
 8009c04:	1e2b      	subs	r3, r5, #0
 8009c06:	bfb9      	ittee	lt
 8009c08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009c0c:	9303      	strlt	r3, [sp, #12]
 8009c0e:	2300      	movge	r3, #0
 8009c10:	6033      	strge	r3, [r6, #0]
 8009c12:	9f03      	ldr	r7, [sp, #12]
 8009c14:	4b98      	ldr	r3, [pc, #608]	@ (8009e78 <_dtoa_r+0x2d0>)
 8009c16:	bfbc      	itt	lt
 8009c18:	2201      	movlt	r2, #1
 8009c1a:	6032      	strlt	r2, [r6, #0]
 8009c1c:	43bb      	bics	r3, r7
 8009c1e:	d112      	bne.n	8009c46 <_dtoa_r+0x9e>
 8009c20:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009c22:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c2c:	4323      	orrs	r3, r4
 8009c2e:	f000 854d 	beq.w	800a6cc <_dtoa_r+0xb24>
 8009c32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c34:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009e8c <_dtoa_r+0x2e4>
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f000 854f 	beq.w	800a6dc <_dtoa_r+0xb34>
 8009c3e:	f10a 0303 	add.w	r3, sl, #3
 8009c42:	f000 bd49 	b.w	800a6d8 <_dtoa_r+0xb30>
 8009c46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	ec51 0b17 	vmov	r0, r1, d7
 8009c50:	2300      	movs	r3, #0
 8009c52:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009c56:	f7f6 ff5f 	bl	8000b18 <__aeabi_dcmpeq>
 8009c5a:	4680      	mov	r8, r0
 8009c5c:	b158      	cbz	r0, 8009c76 <_dtoa_r+0xce>
 8009c5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009c60:	2301      	movs	r3, #1
 8009c62:	6013      	str	r3, [r2, #0]
 8009c64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c66:	b113      	cbz	r3, 8009c6e <_dtoa_r+0xc6>
 8009c68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009c6a:	4b84      	ldr	r3, [pc, #528]	@ (8009e7c <_dtoa_r+0x2d4>)
 8009c6c:	6013      	str	r3, [r2, #0]
 8009c6e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009e90 <_dtoa_r+0x2e8>
 8009c72:	f000 bd33 	b.w	800a6dc <_dtoa_r+0xb34>
 8009c76:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009c7a:	aa16      	add	r2, sp, #88	@ 0x58
 8009c7c:	a917      	add	r1, sp, #92	@ 0x5c
 8009c7e:	4658      	mov	r0, fp
 8009c80:	f001 fa3a 	bl	800b0f8 <__d2b>
 8009c84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009c88:	4681      	mov	r9, r0
 8009c8a:	2e00      	cmp	r6, #0
 8009c8c:	d077      	beq.n	8009d7e <_dtoa_r+0x1d6>
 8009c8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c90:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009ca0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009ca4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009ca8:	4619      	mov	r1, r3
 8009caa:	2200      	movs	r2, #0
 8009cac:	4b74      	ldr	r3, [pc, #464]	@ (8009e80 <_dtoa_r+0x2d8>)
 8009cae:	f7f6 fb13 	bl	80002d8 <__aeabi_dsub>
 8009cb2:	a369      	add	r3, pc, #420	@ (adr r3, 8009e58 <_dtoa_r+0x2b0>)
 8009cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb8:	f7f6 fcc6 	bl	8000648 <__aeabi_dmul>
 8009cbc:	a368      	add	r3, pc, #416	@ (adr r3, 8009e60 <_dtoa_r+0x2b8>)
 8009cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc2:	f7f6 fb0b 	bl	80002dc <__adddf3>
 8009cc6:	4604      	mov	r4, r0
 8009cc8:	4630      	mov	r0, r6
 8009cca:	460d      	mov	r5, r1
 8009ccc:	f7f6 fc52 	bl	8000574 <__aeabi_i2d>
 8009cd0:	a365      	add	r3, pc, #404	@ (adr r3, 8009e68 <_dtoa_r+0x2c0>)
 8009cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd6:	f7f6 fcb7 	bl	8000648 <__aeabi_dmul>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	460b      	mov	r3, r1
 8009cde:	4620      	mov	r0, r4
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	f7f6 fafb 	bl	80002dc <__adddf3>
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	460d      	mov	r5, r1
 8009cea:	f7f6 ff5d 	bl	8000ba8 <__aeabi_d2iz>
 8009cee:	2200      	movs	r2, #0
 8009cf0:	4607      	mov	r7, r0
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	f7f6 ff18 	bl	8000b2c <__aeabi_dcmplt>
 8009cfc:	b140      	cbz	r0, 8009d10 <_dtoa_r+0x168>
 8009cfe:	4638      	mov	r0, r7
 8009d00:	f7f6 fc38 	bl	8000574 <__aeabi_i2d>
 8009d04:	4622      	mov	r2, r4
 8009d06:	462b      	mov	r3, r5
 8009d08:	f7f6 ff06 	bl	8000b18 <__aeabi_dcmpeq>
 8009d0c:	b900      	cbnz	r0, 8009d10 <_dtoa_r+0x168>
 8009d0e:	3f01      	subs	r7, #1
 8009d10:	2f16      	cmp	r7, #22
 8009d12:	d851      	bhi.n	8009db8 <_dtoa_r+0x210>
 8009d14:	4b5b      	ldr	r3, [pc, #364]	@ (8009e84 <_dtoa_r+0x2dc>)
 8009d16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d22:	f7f6 ff03 	bl	8000b2c <__aeabi_dcmplt>
 8009d26:	2800      	cmp	r0, #0
 8009d28:	d048      	beq.n	8009dbc <_dtoa_r+0x214>
 8009d2a:	3f01      	subs	r7, #1
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009d30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009d32:	1b9b      	subs	r3, r3, r6
 8009d34:	1e5a      	subs	r2, r3, #1
 8009d36:	bf44      	itt	mi
 8009d38:	f1c3 0801 	rsbmi	r8, r3, #1
 8009d3c:	2300      	movmi	r3, #0
 8009d3e:	9208      	str	r2, [sp, #32]
 8009d40:	bf54      	ite	pl
 8009d42:	f04f 0800 	movpl.w	r8, #0
 8009d46:	9308      	strmi	r3, [sp, #32]
 8009d48:	2f00      	cmp	r7, #0
 8009d4a:	db39      	blt.n	8009dc0 <_dtoa_r+0x218>
 8009d4c:	9b08      	ldr	r3, [sp, #32]
 8009d4e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009d50:	443b      	add	r3, r7
 8009d52:	9308      	str	r3, [sp, #32]
 8009d54:	2300      	movs	r3, #0
 8009d56:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d5a:	2b09      	cmp	r3, #9
 8009d5c:	d864      	bhi.n	8009e28 <_dtoa_r+0x280>
 8009d5e:	2b05      	cmp	r3, #5
 8009d60:	bfc4      	itt	gt
 8009d62:	3b04      	subgt	r3, #4
 8009d64:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d68:	f1a3 0302 	sub.w	r3, r3, #2
 8009d6c:	bfcc      	ite	gt
 8009d6e:	2400      	movgt	r4, #0
 8009d70:	2401      	movle	r4, #1
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d863      	bhi.n	8009e3e <_dtoa_r+0x296>
 8009d76:	e8df f003 	tbb	[pc, r3]
 8009d7a:	372a      	.short	0x372a
 8009d7c:	5535      	.short	0x5535
 8009d7e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009d82:	441e      	add	r6, r3
 8009d84:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009d88:	2b20      	cmp	r3, #32
 8009d8a:	bfc1      	itttt	gt
 8009d8c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009d90:	409f      	lslgt	r7, r3
 8009d92:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009d96:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009d9a:	bfd6      	itet	le
 8009d9c:	f1c3 0320 	rsble	r3, r3, #32
 8009da0:	ea47 0003 	orrgt.w	r0, r7, r3
 8009da4:	fa04 f003 	lslle.w	r0, r4, r3
 8009da8:	f7f6 fbd4 	bl	8000554 <__aeabi_ui2d>
 8009dac:	2201      	movs	r2, #1
 8009dae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009db2:	3e01      	subs	r6, #1
 8009db4:	9214      	str	r2, [sp, #80]	@ 0x50
 8009db6:	e777      	b.n	8009ca8 <_dtoa_r+0x100>
 8009db8:	2301      	movs	r3, #1
 8009dba:	e7b8      	b.n	8009d2e <_dtoa_r+0x186>
 8009dbc:	9012      	str	r0, [sp, #72]	@ 0x48
 8009dbe:	e7b7      	b.n	8009d30 <_dtoa_r+0x188>
 8009dc0:	427b      	negs	r3, r7
 8009dc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	eba8 0807 	sub.w	r8, r8, r7
 8009dca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009dcc:	e7c4      	b.n	8009d58 <_dtoa_r+0x1b0>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	dc35      	bgt.n	8009e44 <_dtoa_r+0x29c>
 8009dd8:	2301      	movs	r3, #1
 8009dda:	9300      	str	r3, [sp, #0]
 8009ddc:	9307      	str	r3, [sp, #28]
 8009dde:	461a      	mov	r2, r3
 8009de0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009de2:	e00b      	b.n	8009dfc <_dtoa_r+0x254>
 8009de4:	2301      	movs	r3, #1
 8009de6:	e7f3      	b.n	8009dd0 <_dtoa_r+0x228>
 8009de8:	2300      	movs	r3, #0
 8009dea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dee:	18fb      	adds	r3, r7, r3
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	3301      	adds	r3, #1
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	9307      	str	r3, [sp, #28]
 8009df8:	bfb8      	it	lt
 8009dfa:	2301      	movlt	r3, #1
 8009dfc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009e00:	2100      	movs	r1, #0
 8009e02:	2204      	movs	r2, #4
 8009e04:	f102 0514 	add.w	r5, r2, #20
 8009e08:	429d      	cmp	r5, r3
 8009e0a:	d91f      	bls.n	8009e4c <_dtoa_r+0x2a4>
 8009e0c:	6041      	str	r1, [r0, #4]
 8009e0e:	4658      	mov	r0, fp
 8009e10:	f000 fd8e 	bl	800a930 <_Balloc>
 8009e14:	4682      	mov	sl, r0
 8009e16:	2800      	cmp	r0, #0
 8009e18:	d13c      	bne.n	8009e94 <_dtoa_r+0x2ec>
 8009e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8009e88 <_dtoa_r+0x2e0>)
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009e22:	e6d8      	b.n	8009bd6 <_dtoa_r+0x2e>
 8009e24:	2301      	movs	r3, #1
 8009e26:	e7e0      	b.n	8009dea <_dtoa_r+0x242>
 8009e28:	2401      	movs	r4, #1
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e2e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009e30:	f04f 33ff 	mov.w	r3, #4294967295
 8009e34:	9300      	str	r3, [sp, #0]
 8009e36:	9307      	str	r3, [sp, #28]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	2312      	movs	r3, #18
 8009e3c:	e7d0      	b.n	8009de0 <_dtoa_r+0x238>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e42:	e7f5      	b.n	8009e30 <_dtoa_r+0x288>
 8009e44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e46:	9300      	str	r3, [sp, #0]
 8009e48:	9307      	str	r3, [sp, #28]
 8009e4a:	e7d7      	b.n	8009dfc <_dtoa_r+0x254>
 8009e4c:	3101      	adds	r1, #1
 8009e4e:	0052      	lsls	r2, r2, #1
 8009e50:	e7d8      	b.n	8009e04 <_dtoa_r+0x25c>
 8009e52:	bf00      	nop
 8009e54:	f3af 8000 	nop.w
 8009e58:	636f4361 	.word	0x636f4361
 8009e5c:	3fd287a7 	.word	0x3fd287a7
 8009e60:	8b60c8b3 	.word	0x8b60c8b3
 8009e64:	3fc68a28 	.word	0x3fc68a28
 8009e68:	509f79fb 	.word	0x509f79fb
 8009e6c:	3fd34413 	.word	0x3fd34413
 8009e70:	0800d22a 	.word	0x0800d22a
 8009e74:	0800d241 	.word	0x0800d241
 8009e78:	7ff00000 	.word	0x7ff00000
 8009e7c:	0800d1f5 	.word	0x0800d1f5
 8009e80:	3ff80000 	.word	0x3ff80000
 8009e84:	0800d338 	.word	0x0800d338
 8009e88:	0800d299 	.word	0x0800d299
 8009e8c:	0800d226 	.word	0x0800d226
 8009e90:	0800d1f4 	.word	0x0800d1f4
 8009e94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e98:	6018      	str	r0, [r3, #0]
 8009e9a:	9b07      	ldr	r3, [sp, #28]
 8009e9c:	2b0e      	cmp	r3, #14
 8009e9e:	f200 80a4 	bhi.w	8009fea <_dtoa_r+0x442>
 8009ea2:	2c00      	cmp	r4, #0
 8009ea4:	f000 80a1 	beq.w	8009fea <_dtoa_r+0x442>
 8009ea8:	2f00      	cmp	r7, #0
 8009eaa:	dd33      	ble.n	8009f14 <_dtoa_r+0x36c>
 8009eac:	4bad      	ldr	r3, [pc, #692]	@ (800a164 <_dtoa_r+0x5bc>)
 8009eae:	f007 020f 	and.w	r2, r7, #15
 8009eb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009eb6:	ed93 7b00 	vldr	d7, [r3]
 8009eba:	05f8      	lsls	r0, r7, #23
 8009ebc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009ec0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009ec4:	d516      	bpl.n	8009ef4 <_dtoa_r+0x34c>
 8009ec6:	4ba8      	ldr	r3, [pc, #672]	@ (800a168 <_dtoa_r+0x5c0>)
 8009ec8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ecc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ed0:	f7f6 fce4 	bl	800089c <__aeabi_ddiv>
 8009ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ed8:	f004 040f 	and.w	r4, r4, #15
 8009edc:	2603      	movs	r6, #3
 8009ede:	4da2      	ldr	r5, [pc, #648]	@ (800a168 <_dtoa_r+0x5c0>)
 8009ee0:	b954      	cbnz	r4, 8009ef8 <_dtoa_r+0x350>
 8009ee2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eea:	f7f6 fcd7 	bl	800089c <__aeabi_ddiv>
 8009eee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ef2:	e028      	b.n	8009f46 <_dtoa_r+0x39e>
 8009ef4:	2602      	movs	r6, #2
 8009ef6:	e7f2      	b.n	8009ede <_dtoa_r+0x336>
 8009ef8:	07e1      	lsls	r1, r4, #31
 8009efa:	d508      	bpl.n	8009f0e <_dtoa_r+0x366>
 8009efc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f04:	f7f6 fba0 	bl	8000648 <__aeabi_dmul>
 8009f08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f0c:	3601      	adds	r6, #1
 8009f0e:	1064      	asrs	r4, r4, #1
 8009f10:	3508      	adds	r5, #8
 8009f12:	e7e5      	b.n	8009ee0 <_dtoa_r+0x338>
 8009f14:	f000 80d2 	beq.w	800a0bc <_dtoa_r+0x514>
 8009f18:	427c      	negs	r4, r7
 8009f1a:	4b92      	ldr	r3, [pc, #584]	@ (800a164 <_dtoa_r+0x5bc>)
 8009f1c:	4d92      	ldr	r5, [pc, #584]	@ (800a168 <_dtoa_r+0x5c0>)
 8009f1e:	f004 020f 	and.w	r2, r4, #15
 8009f22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f2e:	f7f6 fb8b 	bl	8000648 <__aeabi_dmul>
 8009f32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f36:	1124      	asrs	r4, r4, #4
 8009f38:	2300      	movs	r3, #0
 8009f3a:	2602      	movs	r6, #2
 8009f3c:	2c00      	cmp	r4, #0
 8009f3e:	f040 80b2 	bne.w	800a0a6 <_dtoa_r+0x4fe>
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1d3      	bne.n	8009eee <_dtoa_r+0x346>
 8009f46:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f48:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f000 80b7 	beq.w	800a0c0 <_dtoa_r+0x518>
 8009f52:	4b86      	ldr	r3, [pc, #536]	@ (800a16c <_dtoa_r+0x5c4>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	4620      	mov	r0, r4
 8009f58:	4629      	mov	r1, r5
 8009f5a:	f7f6 fde7 	bl	8000b2c <__aeabi_dcmplt>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	f000 80ae 	beq.w	800a0c0 <_dtoa_r+0x518>
 8009f64:	9b07      	ldr	r3, [sp, #28]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f000 80aa 	beq.w	800a0c0 <_dtoa_r+0x518>
 8009f6c:	9b00      	ldr	r3, [sp, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	dd37      	ble.n	8009fe2 <_dtoa_r+0x43a>
 8009f72:	1e7b      	subs	r3, r7, #1
 8009f74:	9304      	str	r3, [sp, #16]
 8009f76:	4620      	mov	r0, r4
 8009f78:	4b7d      	ldr	r3, [pc, #500]	@ (800a170 <_dtoa_r+0x5c8>)
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	4629      	mov	r1, r5
 8009f7e:	f7f6 fb63 	bl	8000648 <__aeabi_dmul>
 8009f82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f86:	9c00      	ldr	r4, [sp, #0]
 8009f88:	3601      	adds	r6, #1
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f7f6 faf2 	bl	8000574 <__aeabi_i2d>
 8009f90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f94:	f7f6 fb58 	bl	8000648 <__aeabi_dmul>
 8009f98:	4b76      	ldr	r3, [pc, #472]	@ (800a174 <_dtoa_r+0x5cc>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f7f6 f99e 	bl	80002dc <__adddf3>
 8009fa0:	4605      	mov	r5, r0
 8009fa2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009fa6:	2c00      	cmp	r4, #0
 8009fa8:	f040 808d 	bne.w	800a0c6 <_dtoa_r+0x51e>
 8009fac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fb0:	4b71      	ldr	r3, [pc, #452]	@ (800a178 <_dtoa_r+0x5d0>)
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f7f6 f990 	bl	80002d8 <__aeabi_dsub>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	460b      	mov	r3, r1
 8009fbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009fc0:	462a      	mov	r2, r5
 8009fc2:	4633      	mov	r3, r6
 8009fc4:	f7f6 fdd0 	bl	8000b68 <__aeabi_dcmpgt>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	f040 828b 	bne.w	800a4e4 <_dtoa_r+0x93c>
 8009fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fd2:	462a      	mov	r2, r5
 8009fd4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009fd8:	f7f6 fda8 	bl	8000b2c <__aeabi_dcmplt>
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	f040 8128 	bne.w	800a232 <_dtoa_r+0x68a>
 8009fe2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009fe6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009fea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f2c0 815a 	blt.w	800a2a6 <_dtoa_r+0x6fe>
 8009ff2:	2f0e      	cmp	r7, #14
 8009ff4:	f300 8157 	bgt.w	800a2a6 <_dtoa_r+0x6fe>
 8009ff8:	4b5a      	ldr	r3, [pc, #360]	@ (800a164 <_dtoa_r+0x5bc>)
 8009ffa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009ffe:	ed93 7b00 	vldr	d7, [r3]
 800a002:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a004:	2b00      	cmp	r3, #0
 800a006:	ed8d 7b00 	vstr	d7, [sp]
 800a00a:	da03      	bge.n	800a014 <_dtoa_r+0x46c>
 800a00c:	9b07      	ldr	r3, [sp, #28]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f340 8101 	ble.w	800a216 <_dtoa_r+0x66e>
 800a014:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a018:	4656      	mov	r6, sl
 800a01a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a01e:	4620      	mov	r0, r4
 800a020:	4629      	mov	r1, r5
 800a022:	f7f6 fc3b 	bl	800089c <__aeabi_ddiv>
 800a026:	f7f6 fdbf 	bl	8000ba8 <__aeabi_d2iz>
 800a02a:	4680      	mov	r8, r0
 800a02c:	f7f6 faa2 	bl	8000574 <__aeabi_i2d>
 800a030:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a034:	f7f6 fb08 	bl	8000648 <__aeabi_dmul>
 800a038:	4602      	mov	r2, r0
 800a03a:	460b      	mov	r3, r1
 800a03c:	4620      	mov	r0, r4
 800a03e:	4629      	mov	r1, r5
 800a040:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a044:	f7f6 f948 	bl	80002d8 <__aeabi_dsub>
 800a048:	f806 4b01 	strb.w	r4, [r6], #1
 800a04c:	9d07      	ldr	r5, [sp, #28]
 800a04e:	eba6 040a 	sub.w	r4, r6, sl
 800a052:	42a5      	cmp	r5, r4
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	f040 8117 	bne.w	800a28a <_dtoa_r+0x6e2>
 800a05c:	f7f6 f93e 	bl	80002dc <__adddf3>
 800a060:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a064:	4604      	mov	r4, r0
 800a066:	460d      	mov	r5, r1
 800a068:	f7f6 fd7e 	bl	8000b68 <__aeabi_dcmpgt>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	f040 80f9 	bne.w	800a264 <_dtoa_r+0x6bc>
 800a072:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a076:	4620      	mov	r0, r4
 800a078:	4629      	mov	r1, r5
 800a07a:	f7f6 fd4d 	bl	8000b18 <__aeabi_dcmpeq>
 800a07e:	b118      	cbz	r0, 800a088 <_dtoa_r+0x4e0>
 800a080:	f018 0f01 	tst.w	r8, #1
 800a084:	f040 80ee 	bne.w	800a264 <_dtoa_r+0x6bc>
 800a088:	4649      	mov	r1, r9
 800a08a:	4658      	mov	r0, fp
 800a08c:	f000 fc90 	bl	800a9b0 <_Bfree>
 800a090:	2300      	movs	r3, #0
 800a092:	7033      	strb	r3, [r6, #0]
 800a094:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a096:	3701      	adds	r7, #1
 800a098:	601f      	str	r7, [r3, #0]
 800a09a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f000 831d 	beq.w	800a6dc <_dtoa_r+0xb34>
 800a0a2:	601e      	str	r6, [r3, #0]
 800a0a4:	e31a      	b.n	800a6dc <_dtoa_r+0xb34>
 800a0a6:	07e2      	lsls	r2, r4, #31
 800a0a8:	d505      	bpl.n	800a0b6 <_dtoa_r+0x50e>
 800a0aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a0ae:	f7f6 facb 	bl	8000648 <__aeabi_dmul>
 800a0b2:	3601      	adds	r6, #1
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	1064      	asrs	r4, r4, #1
 800a0b8:	3508      	adds	r5, #8
 800a0ba:	e73f      	b.n	8009f3c <_dtoa_r+0x394>
 800a0bc:	2602      	movs	r6, #2
 800a0be:	e742      	b.n	8009f46 <_dtoa_r+0x39e>
 800a0c0:	9c07      	ldr	r4, [sp, #28]
 800a0c2:	9704      	str	r7, [sp, #16]
 800a0c4:	e761      	b.n	8009f8a <_dtoa_r+0x3e2>
 800a0c6:	4b27      	ldr	r3, [pc, #156]	@ (800a164 <_dtoa_r+0x5bc>)
 800a0c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a0ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a0ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a0d2:	4454      	add	r4, sl
 800a0d4:	2900      	cmp	r1, #0
 800a0d6:	d053      	beq.n	800a180 <_dtoa_r+0x5d8>
 800a0d8:	4928      	ldr	r1, [pc, #160]	@ (800a17c <_dtoa_r+0x5d4>)
 800a0da:	2000      	movs	r0, #0
 800a0dc:	f7f6 fbde 	bl	800089c <__aeabi_ddiv>
 800a0e0:	4633      	mov	r3, r6
 800a0e2:	462a      	mov	r2, r5
 800a0e4:	f7f6 f8f8 	bl	80002d8 <__aeabi_dsub>
 800a0e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a0ec:	4656      	mov	r6, sl
 800a0ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0f2:	f7f6 fd59 	bl	8000ba8 <__aeabi_d2iz>
 800a0f6:	4605      	mov	r5, r0
 800a0f8:	f7f6 fa3c 	bl	8000574 <__aeabi_i2d>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	460b      	mov	r3, r1
 800a100:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a104:	f7f6 f8e8 	bl	80002d8 <__aeabi_dsub>
 800a108:	3530      	adds	r5, #48	@ 0x30
 800a10a:	4602      	mov	r2, r0
 800a10c:	460b      	mov	r3, r1
 800a10e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a112:	f806 5b01 	strb.w	r5, [r6], #1
 800a116:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a11a:	f7f6 fd07 	bl	8000b2c <__aeabi_dcmplt>
 800a11e:	2800      	cmp	r0, #0
 800a120:	d171      	bne.n	800a206 <_dtoa_r+0x65e>
 800a122:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a126:	4911      	ldr	r1, [pc, #68]	@ (800a16c <_dtoa_r+0x5c4>)
 800a128:	2000      	movs	r0, #0
 800a12a:	f7f6 f8d5 	bl	80002d8 <__aeabi_dsub>
 800a12e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a132:	f7f6 fcfb 	bl	8000b2c <__aeabi_dcmplt>
 800a136:	2800      	cmp	r0, #0
 800a138:	f040 8095 	bne.w	800a266 <_dtoa_r+0x6be>
 800a13c:	42a6      	cmp	r6, r4
 800a13e:	f43f af50 	beq.w	8009fe2 <_dtoa_r+0x43a>
 800a142:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a146:	4b0a      	ldr	r3, [pc, #40]	@ (800a170 <_dtoa_r+0x5c8>)
 800a148:	2200      	movs	r2, #0
 800a14a:	f7f6 fa7d 	bl	8000648 <__aeabi_dmul>
 800a14e:	4b08      	ldr	r3, [pc, #32]	@ (800a170 <_dtoa_r+0x5c8>)
 800a150:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a154:	2200      	movs	r2, #0
 800a156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a15a:	f7f6 fa75 	bl	8000648 <__aeabi_dmul>
 800a15e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a162:	e7c4      	b.n	800a0ee <_dtoa_r+0x546>
 800a164:	0800d338 	.word	0x0800d338
 800a168:	0800d310 	.word	0x0800d310
 800a16c:	3ff00000 	.word	0x3ff00000
 800a170:	40240000 	.word	0x40240000
 800a174:	401c0000 	.word	0x401c0000
 800a178:	40140000 	.word	0x40140000
 800a17c:	3fe00000 	.word	0x3fe00000
 800a180:	4631      	mov	r1, r6
 800a182:	4628      	mov	r0, r5
 800a184:	f7f6 fa60 	bl	8000648 <__aeabi_dmul>
 800a188:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a18c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a18e:	4656      	mov	r6, sl
 800a190:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a194:	f7f6 fd08 	bl	8000ba8 <__aeabi_d2iz>
 800a198:	4605      	mov	r5, r0
 800a19a:	f7f6 f9eb 	bl	8000574 <__aeabi_i2d>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1a6:	f7f6 f897 	bl	80002d8 <__aeabi_dsub>
 800a1aa:	3530      	adds	r5, #48	@ 0x30
 800a1ac:	f806 5b01 	strb.w	r5, [r6], #1
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	42a6      	cmp	r6, r4
 800a1b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a1ba:	f04f 0200 	mov.w	r2, #0
 800a1be:	d124      	bne.n	800a20a <_dtoa_r+0x662>
 800a1c0:	4bac      	ldr	r3, [pc, #688]	@ (800a474 <_dtoa_r+0x8cc>)
 800a1c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a1c6:	f7f6 f889 	bl	80002dc <__adddf3>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1d2:	f7f6 fcc9 	bl	8000b68 <__aeabi_dcmpgt>
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	d145      	bne.n	800a266 <_dtoa_r+0x6be>
 800a1da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a1de:	49a5      	ldr	r1, [pc, #660]	@ (800a474 <_dtoa_r+0x8cc>)
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	f7f6 f879 	bl	80002d8 <__aeabi_dsub>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1ee:	f7f6 fc9d 	bl	8000b2c <__aeabi_dcmplt>
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	f43f aef5 	beq.w	8009fe2 <_dtoa_r+0x43a>
 800a1f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a1fa:	1e73      	subs	r3, r6, #1
 800a1fc:	9315      	str	r3, [sp, #84]	@ 0x54
 800a1fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a202:	2b30      	cmp	r3, #48	@ 0x30
 800a204:	d0f8      	beq.n	800a1f8 <_dtoa_r+0x650>
 800a206:	9f04      	ldr	r7, [sp, #16]
 800a208:	e73e      	b.n	800a088 <_dtoa_r+0x4e0>
 800a20a:	4b9b      	ldr	r3, [pc, #620]	@ (800a478 <_dtoa_r+0x8d0>)
 800a20c:	f7f6 fa1c 	bl	8000648 <__aeabi_dmul>
 800a210:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a214:	e7bc      	b.n	800a190 <_dtoa_r+0x5e8>
 800a216:	d10c      	bne.n	800a232 <_dtoa_r+0x68a>
 800a218:	4b98      	ldr	r3, [pc, #608]	@ (800a47c <_dtoa_r+0x8d4>)
 800a21a:	2200      	movs	r2, #0
 800a21c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a220:	f7f6 fa12 	bl	8000648 <__aeabi_dmul>
 800a224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a228:	f7f6 fc94 	bl	8000b54 <__aeabi_dcmpge>
 800a22c:	2800      	cmp	r0, #0
 800a22e:	f000 8157 	beq.w	800a4e0 <_dtoa_r+0x938>
 800a232:	2400      	movs	r4, #0
 800a234:	4625      	mov	r5, r4
 800a236:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a238:	43db      	mvns	r3, r3
 800a23a:	9304      	str	r3, [sp, #16]
 800a23c:	4656      	mov	r6, sl
 800a23e:	2700      	movs	r7, #0
 800a240:	4621      	mov	r1, r4
 800a242:	4658      	mov	r0, fp
 800a244:	f000 fbb4 	bl	800a9b0 <_Bfree>
 800a248:	2d00      	cmp	r5, #0
 800a24a:	d0dc      	beq.n	800a206 <_dtoa_r+0x65e>
 800a24c:	b12f      	cbz	r7, 800a25a <_dtoa_r+0x6b2>
 800a24e:	42af      	cmp	r7, r5
 800a250:	d003      	beq.n	800a25a <_dtoa_r+0x6b2>
 800a252:	4639      	mov	r1, r7
 800a254:	4658      	mov	r0, fp
 800a256:	f000 fbab 	bl	800a9b0 <_Bfree>
 800a25a:	4629      	mov	r1, r5
 800a25c:	4658      	mov	r0, fp
 800a25e:	f000 fba7 	bl	800a9b0 <_Bfree>
 800a262:	e7d0      	b.n	800a206 <_dtoa_r+0x65e>
 800a264:	9704      	str	r7, [sp, #16]
 800a266:	4633      	mov	r3, r6
 800a268:	461e      	mov	r6, r3
 800a26a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a26e:	2a39      	cmp	r2, #57	@ 0x39
 800a270:	d107      	bne.n	800a282 <_dtoa_r+0x6da>
 800a272:	459a      	cmp	sl, r3
 800a274:	d1f8      	bne.n	800a268 <_dtoa_r+0x6c0>
 800a276:	9a04      	ldr	r2, [sp, #16]
 800a278:	3201      	adds	r2, #1
 800a27a:	9204      	str	r2, [sp, #16]
 800a27c:	2230      	movs	r2, #48	@ 0x30
 800a27e:	f88a 2000 	strb.w	r2, [sl]
 800a282:	781a      	ldrb	r2, [r3, #0]
 800a284:	3201      	adds	r2, #1
 800a286:	701a      	strb	r2, [r3, #0]
 800a288:	e7bd      	b.n	800a206 <_dtoa_r+0x65e>
 800a28a:	4b7b      	ldr	r3, [pc, #492]	@ (800a478 <_dtoa_r+0x8d0>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	f7f6 f9db 	bl	8000648 <__aeabi_dmul>
 800a292:	2200      	movs	r2, #0
 800a294:	2300      	movs	r3, #0
 800a296:	4604      	mov	r4, r0
 800a298:	460d      	mov	r5, r1
 800a29a:	f7f6 fc3d 	bl	8000b18 <__aeabi_dcmpeq>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	f43f aebb 	beq.w	800a01a <_dtoa_r+0x472>
 800a2a4:	e6f0      	b.n	800a088 <_dtoa_r+0x4e0>
 800a2a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a2a8:	2a00      	cmp	r2, #0
 800a2aa:	f000 80db 	beq.w	800a464 <_dtoa_r+0x8bc>
 800a2ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2b0:	2a01      	cmp	r2, #1
 800a2b2:	f300 80bf 	bgt.w	800a434 <_dtoa_r+0x88c>
 800a2b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a2b8:	2a00      	cmp	r2, #0
 800a2ba:	f000 80b7 	beq.w	800a42c <_dtoa_r+0x884>
 800a2be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a2c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a2c4:	4646      	mov	r6, r8
 800a2c6:	9a08      	ldr	r2, [sp, #32]
 800a2c8:	2101      	movs	r1, #1
 800a2ca:	441a      	add	r2, r3
 800a2cc:	4658      	mov	r0, fp
 800a2ce:	4498      	add	r8, r3
 800a2d0:	9208      	str	r2, [sp, #32]
 800a2d2:	f000 fc6b 	bl	800abac <__i2b>
 800a2d6:	4605      	mov	r5, r0
 800a2d8:	b15e      	cbz	r6, 800a2f2 <_dtoa_r+0x74a>
 800a2da:	9b08      	ldr	r3, [sp, #32]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	dd08      	ble.n	800a2f2 <_dtoa_r+0x74a>
 800a2e0:	42b3      	cmp	r3, r6
 800a2e2:	9a08      	ldr	r2, [sp, #32]
 800a2e4:	bfa8      	it	ge
 800a2e6:	4633      	movge	r3, r6
 800a2e8:	eba8 0803 	sub.w	r8, r8, r3
 800a2ec:	1af6      	subs	r6, r6, r3
 800a2ee:	1ad3      	subs	r3, r2, r3
 800a2f0:	9308      	str	r3, [sp, #32]
 800a2f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2f4:	b1f3      	cbz	r3, 800a334 <_dtoa_r+0x78c>
 800a2f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	f000 80b7 	beq.w	800a46c <_dtoa_r+0x8c4>
 800a2fe:	b18c      	cbz	r4, 800a324 <_dtoa_r+0x77c>
 800a300:	4629      	mov	r1, r5
 800a302:	4622      	mov	r2, r4
 800a304:	4658      	mov	r0, fp
 800a306:	f000 fd11 	bl	800ad2c <__pow5mult>
 800a30a:	464a      	mov	r2, r9
 800a30c:	4601      	mov	r1, r0
 800a30e:	4605      	mov	r5, r0
 800a310:	4658      	mov	r0, fp
 800a312:	f000 fc61 	bl	800abd8 <__multiply>
 800a316:	4649      	mov	r1, r9
 800a318:	9004      	str	r0, [sp, #16]
 800a31a:	4658      	mov	r0, fp
 800a31c:	f000 fb48 	bl	800a9b0 <_Bfree>
 800a320:	9b04      	ldr	r3, [sp, #16]
 800a322:	4699      	mov	r9, r3
 800a324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a326:	1b1a      	subs	r2, r3, r4
 800a328:	d004      	beq.n	800a334 <_dtoa_r+0x78c>
 800a32a:	4649      	mov	r1, r9
 800a32c:	4658      	mov	r0, fp
 800a32e:	f000 fcfd 	bl	800ad2c <__pow5mult>
 800a332:	4681      	mov	r9, r0
 800a334:	2101      	movs	r1, #1
 800a336:	4658      	mov	r0, fp
 800a338:	f000 fc38 	bl	800abac <__i2b>
 800a33c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a33e:	4604      	mov	r4, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	f000 81cf 	beq.w	800a6e4 <_dtoa_r+0xb3c>
 800a346:	461a      	mov	r2, r3
 800a348:	4601      	mov	r1, r0
 800a34a:	4658      	mov	r0, fp
 800a34c:	f000 fcee 	bl	800ad2c <__pow5mult>
 800a350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a352:	2b01      	cmp	r3, #1
 800a354:	4604      	mov	r4, r0
 800a356:	f300 8095 	bgt.w	800a484 <_dtoa_r+0x8dc>
 800a35a:	9b02      	ldr	r3, [sp, #8]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f040 8087 	bne.w	800a470 <_dtoa_r+0x8c8>
 800a362:	9b03      	ldr	r3, [sp, #12]
 800a364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a368:	2b00      	cmp	r3, #0
 800a36a:	f040 8089 	bne.w	800a480 <_dtoa_r+0x8d8>
 800a36e:	9b03      	ldr	r3, [sp, #12]
 800a370:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a374:	0d1b      	lsrs	r3, r3, #20
 800a376:	051b      	lsls	r3, r3, #20
 800a378:	b12b      	cbz	r3, 800a386 <_dtoa_r+0x7de>
 800a37a:	9b08      	ldr	r3, [sp, #32]
 800a37c:	3301      	adds	r3, #1
 800a37e:	9308      	str	r3, [sp, #32]
 800a380:	f108 0801 	add.w	r8, r8, #1
 800a384:	2301      	movs	r3, #1
 800a386:	930a      	str	r3, [sp, #40]	@ 0x28
 800a388:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f000 81b0 	beq.w	800a6f0 <_dtoa_r+0xb48>
 800a390:	6923      	ldr	r3, [r4, #16]
 800a392:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a396:	6918      	ldr	r0, [r3, #16]
 800a398:	f000 fbbc 	bl	800ab14 <__hi0bits>
 800a39c:	f1c0 0020 	rsb	r0, r0, #32
 800a3a0:	9b08      	ldr	r3, [sp, #32]
 800a3a2:	4418      	add	r0, r3
 800a3a4:	f010 001f 	ands.w	r0, r0, #31
 800a3a8:	d077      	beq.n	800a49a <_dtoa_r+0x8f2>
 800a3aa:	f1c0 0320 	rsb	r3, r0, #32
 800a3ae:	2b04      	cmp	r3, #4
 800a3b0:	dd6b      	ble.n	800a48a <_dtoa_r+0x8e2>
 800a3b2:	9b08      	ldr	r3, [sp, #32]
 800a3b4:	f1c0 001c 	rsb	r0, r0, #28
 800a3b8:	4403      	add	r3, r0
 800a3ba:	4480      	add	r8, r0
 800a3bc:	4406      	add	r6, r0
 800a3be:	9308      	str	r3, [sp, #32]
 800a3c0:	f1b8 0f00 	cmp.w	r8, #0
 800a3c4:	dd05      	ble.n	800a3d2 <_dtoa_r+0x82a>
 800a3c6:	4649      	mov	r1, r9
 800a3c8:	4642      	mov	r2, r8
 800a3ca:	4658      	mov	r0, fp
 800a3cc:	f000 fd08 	bl	800ade0 <__lshift>
 800a3d0:	4681      	mov	r9, r0
 800a3d2:	9b08      	ldr	r3, [sp, #32]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	dd05      	ble.n	800a3e4 <_dtoa_r+0x83c>
 800a3d8:	4621      	mov	r1, r4
 800a3da:	461a      	mov	r2, r3
 800a3dc:	4658      	mov	r0, fp
 800a3de:	f000 fcff 	bl	800ade0 <__lshift>
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d059      	beq.n	800a49e <_dtoa_r+0x8f6>
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	4648      	mov	r0, r9
 800a3ee:	f000 fd63 	bl	800aeb8 <__mcmp>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	da53      	bge.n	800a49e <_dtoa_r+0x8f6>
 800a3f6:	1e7b      	subs	r3, r7, #1
 800a3f8:	9304      	str	r3, [sp, #16]
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	220a      	movs	r2, #10
 800a400:	4658      	mov	r0, fp
 800a402:	f000 faf7 	bl	800a9f4 <__multadd>
 800a406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a408:	4681      	mov	r9, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	f000 8172 	beq.w	800a6f4 <_dtoa_r+0xb4c>
 800a410:	2300      	movs	r3, #0
 800a412:	4629      	mov	r1, r5
 800a414:	220a      	movs	r2, #10
 800a416:	4658      	mov	r0, fp
 800a418:	f000 faec 	bl	800a9f4 <__multadd>
 800a41c:	9b00      	ldr	r3, [sp, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	4605      	mov	r5, r0
 800a422:	dc67      	bgt.n	800a4f4 <_dtoa_r+0x94c>
 800a424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a426:	2b02      	cmp	r3, #2
 800a428:	dc41      	bgt.n	800a4ae <_dtoa_r+0x906>
 800a42a:	e063      	b.n	800a4f4 <_dtoa_r+0x94c>
 800a42c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a42e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a432:	e746      	b.n	800a2c2 <_dtoa_r+0x71a>
 800a434:	9b07      	ldr	r3, [sp, #28]
 800a436:	1e5c      	subs	r4, r3, #1
 800a438:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a43a:	42a3      	cmp	r3, r4
 800a43c:	bfbf      	itttt	lt
 800a43e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a440:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a442:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a444:	1ae3      	sublt	r3, r4, r3
 800a446:	bfb4      	ite	lt
 800a448:	18d2      	addlt	r2, r2, r3
 800a44a:	1b1c      	subge	r4, r3, r4
 800a44c:	9b07      	ldr	r3, [sp, #28]
 800a44e:	bfbc      	itt	lt
 800a450:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a452:	2400      	movlt	r4, #0
 800a454:	2b00      	cmp	r3, #0
 800a456:	bfb5      	itete	lt
 800a458:	eba8 0603 	sublt.w	r6, r8, r3
 800a45c:	9b07      	ldrge	r3, [sp, #28]
 800a45e:	2300      	movlt	r3, #0
 800a460:	4646      	movge	r6, r8
 800a462:	e730      	b.n	800a2c6 <_dtoa_r+0x71e>
 800a464:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a466:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a468:	4646      	mov	r6, r8
 800a46a:	e735      	b.n	800a2d8 <_dtoa_r+0x730>
 800a46c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a46e:	e75c      	b.n	800a32a <_dtoa_r+0x782>
 800a470:	2300      	movs	r3, #0
 800a472:	e788      	b.n	800a386 <_dtoa_r+0x7de>
 800a474:	3fe00000 	.word	0x3fe00000
 800a478:	40240000 	.word	0x40240000
 800a47c:	40140000 	.word	0x40140000
 800a480:	9b02      	ldr	r3, [sp, #8]
 800a482:	e780      	b.n	800a386 <_dtoa_r+0x7de>
 800a484:	2300      	movs	r3, #0
 800a486:	930a      	str	r3, [sp, #40]	@ 0x28
 800a488:	e782      	b.n	800a390 <_dtoa_r+0x7e8>
 800a48a:	d099      	beq.n	800a3c0 <_dtoa_r+0x818>
 800a48c:	9a08      	ldr	r2, [sp, #32]
 800a48e:	331c      	adds	r3, #28
 800a490:	441a      	add	r2, r3
 800a492:	4498      	add	r8, r3
 800a494:	441e      	add	r6, r3
 800a496:	9208      	str	r2, [sp, #32]
 800a498:	e792      	b.n	800a3c0 <_dtoa_r+0x818>
 800a49a:	4603      	mov	r3, r0
 800a49c:	e7f6      	b.n	800a48c <_dtoa_r+0x8e4>
 800a49e:	9b07      	ldr	r3, [sp, #28]
 800a4a0:	9704      	str	r7, [sp, #16]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	dc20      	bgt.n	800a4e8 <_dtoa_r+0x940>
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	dd1e      	ble.n	800a4ec <_dtoa_r+0x944>
 800a4ae:	9b00      	ldr	r3, [sp, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f47f aec0 	bne.w	800a236 <_dtoa_r+0x68e>
 800a4b6:	4621      	mov	r1, r4
 800a4b8:	2205      	movs	r2, #5
 800a4ba:	4658      	mov	r0, fp
 800a4bc:	f000 fa9a 	bl	800a9f4 <__multadd>
 800a4c0:	4601      	mov	r1, r0
 800a4c2:	4604      	mov	r4, r0
 800a4c4:	4648      	mov	r0, r9
 800a4c6:	f000 fcf7 	bl	800aeb8 <__mcmp>
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	f77f aeb3 	ble.w	800a236 <_dtoa_r+0x68e>
 800a4d0:	4656      	mov	r6, sl
 800a4d2:	2331      	movs	r3, #49	@ 0x31
 800a4d4:	f806 3b01 	strb.w	r3, [r6], #1
 800a4d8:	9b04      	ldr	r3, [sp, #16]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	9304      	str	r3, [sp, #16]
 800a4de:	e6ae      	b.n	800a23e <_dtoa_r+0x696>
 800a4e0:	9c07      	ldr	r4, [sp, #28]
 800a4e2:	9704      	str	r7, [sp, #16]
 800a4e4:	4625      	mov	r5, r4
 800a4e6:	e7f3      	b.n	800a4d0 <_dtoa_r+0x928>
 800a4e8:	9b07      	ldr	r3, [sp, #28]
 800a4ea:	9300      	str	r3, [sp, #0]
 800a4ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	f000 8104 	beq.w	800a6fc <_dtoa_r+0xb54>
 800a4f4:	2e00      	cmp	r6, #0
 800a4f6:	dd05      	ble.n	800a504 <_dtoa_r+0x95c>
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	4632      	mov	r2, r6
 800a4fc:	4658      	mov	r0, fp
 800a4fe:	f000 fc6f 	bl	800ade0 <__lshift>
 800a502:	4605      	mov	r5, r0
 800a504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a506:	2b00      	cmp	r3, #0
 800a508:	d05a      	beq.n	800a5c0 <_dtoa_r+0xa18>
 800a50a:	6869      	ldr	r1, [r5, #4]
 800a50c:	4658      	mov	r0, fp
 800a50e:	f000 fa0f 	bl	800a930 <_Balloc>
 800a512:	4606      	mov	r6, r0
 800a514:	b928      	cbnz	r0, 800a522 <_dtoa_r+0x97a>
 800a516:	4b84      	ldr	r3, [pc, #528]	@ (800a728 <_dtoa_r+0xb80>)
 800a518:	4602      	mov	r2, r0
 800a51a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a51e:	f7ff bb5a 	b.w	8009bd6 <_dtoa_r+0x2e>
 800a522:	692a      	ldr	r2, [r5, #16]
 800a524:	3202      	adds	r2, #2
 800a526:	0092      	lsls	r2, r2, #2
 800a528:	f105 010c 	add.w	r1, r5, #12
 800a52c:	300c      	adds	r0, #12
 800a52e:	f7ff fa9c 	bl	8009a6a <memcpy>
 800a532:	2201      	movs	r2, #1
 800a534:	4631      	mov	r1, r6
 800a536:	4658      	mov	r0, fp
 800a538:	f000 fc52 	bl	800ade0 <__lshift>
 800a53c:	f10a 0301 	add.w	r3, sl, #1
 800a540:	9307      	str	r3, [sp, #28]
 800a542:	9b00      	ldr	r3, [sp, #0]
 800a544:	4453      	add	r3, sl
 800a546:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a548:	9b02      	ldr	r3, [sp, #8]
 800a54a:	f003 0301 	and.w	r3, r3, #1
 800a54e:	462f      	mov	r7, r5
 800a550:	930a      	str	r3, [sp, #40]	@ 0x28
 800a552:	4605      	mov	r5, r0
 800a554:	9b07      	ldr	r3, [sp, #28]
 800a556:	4621      	mov	r1, r4
 800a558:	3b01      	subs	r3, #1
 800a55a:	4648      	mov	r0, r9
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	f7ff fa99 	bl	8009a94 <quorem>
 800a562:	4639      	mov	r1, r7
 800a564:	9002      	str	r0, [sp, #8]
 800a566:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a56a:	4648      	mov	r0, r9
 800a56c:	f000 fca4 	bl	800aeb8 <__mcmp>
 800a570:	462a      	mov	r2, r5
 800a572:	9008      	str	r0, [sp, #32]
 800a574:	4621      	mov	r1, r4
 800a576:	4658      	mov	r0, fp
 800a578:	f000 fcba 	bl	800aef0 <__mdiff>
 800a57c:	68c2      	ldr	r2, [r0, #12]
 800a57e:	4606      	mov	r6, r0
 800a580:	bb02      	cbnz	r2, 800a5c4 <_dtoa_r+0xa1c>
 800a582:	4601      	mov	r1, r0
 800a584:	4648      	mov	r0, r9
 800a586:	f000 fc97 	bl	800aeb8 <__mcmp>
 800a58a:	4602      	mov	r2, r0
 800a58c:	4631      	mov	r1, r6
 800a58e:	4658      	mov	r0, fp
 800a590:	920e      	str	r2, [sp, #56]	@ 0x38
 800a592:	f000 fa0d 	bl	800a9b0 <_Bfree>
 800a596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a598:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a59a:	9e07      	ldr	r6, [sp, #28]
 800a59c:	ea43 0102 	orr.w	r1, r3, r2
 800a5a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5a2:	4319      	orrs	r1, r3
 800a5a4:	d110      	bne.n	800a5c8 <_dtoa_r+0xa20>
 800a5a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a5aa:	d029      	beq.n	800a600 <_dtoa_r+0xa58>
 800a5ac:	9b08      	ldr	r3, [sp, #32]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	dd02      	ble.n	800a5b8 <_dtoa_r+0xa10>
 800a5b2:	9b02      	ldr	r3, [sp, #8]
 800a5b4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a5b8:	9b00      	ldr	r3, [sp, #0]
 800a5ba:	f883 8000 	strb.w	r8, [r3]
 800a5be:	e63f      	b.n	800a240 <_dtoa_r+0x698>
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	e7bb      	b.n	800a53c <_dtoa_r+0x994>
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	e7e1      	b.n	800a58c <_dtoa_r+0x9e4>
 800a5c8:	9b08      	ldr	r3, [sp, #32]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	db04      	blt.n	800a5d8 <_dtoa_r+0xa30>
 800a5ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a5d0:	430b      	orrs	r3, r1
 800a5d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a5d4:	430b      	orrs	r3, r1
 800a5d6:	d120      	bne.n	800a61a <_dtoa_r+0xa72>
 800a5d8:	2a00      	cmp	r2, #0
 800a5da:	dded      	ble.n	800a5b8 <_dtoa_r+0xa10>
 800a5dc:	4649      	mov	r1, r9
 800a5de:	2201      	movs	r2, #1
 800a5e0:	4658      	mov	r0, fp
 800a5e2:	f000 fbfd 	bl	800ade0 <__lshift>
 800a5e6:	4621      	mov	r1, r4
 800a5e8:	4681      	mov	r9, r0
 800a5ea:	f000 fc65 	bl	800aeb8 <__mcmp>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	dc03      	bgt.n	800a5fa <_dtoa_r+0xa52>
 800a5f2:	d1e1      	bne.n	800a5b8 <_dtoa_r+0xa10>
 800a5f4:	f018 0f01 	tst.w	r8, #1
 800a5f8:	d0de      	beq.n	800a5b8 <_dtoa_r+0xa10>
 800a5fa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a5fe:	d1d8      	bne.n	800a5b2 <_dtoa_r+0xa0a>
 800a600:	9a00      	ldr	r2, [sp, #0]
 800a602:	2339      	movs	r3, #57	@ 0x39
 800a604:	7013      	strb	r3, [r2, #0]
 800a606:	4633      	mov	r3, r6
 800a608:	461e      	mov	r6, r3
 800a60a:	3b01      	subs	r3, #1
 800a60c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a610:	2a39      	cmp	r2, #57	@ 0x39
 800a612:	d052      	beq.n	800a6ba <_dtoa_r+0xb12>
 800a614:	3201      	adds	r2, #1
 800a616:	701a      	strb	r2, [r3, #0]
 800a618:	e612      	b.n	800a240 <_dtoa_r+0x698>
 800a61a:	2a00      	cmp	r2, #0
 800a61c:	dd07      	ble.n	800a62e <_dtoa_r+0xa86>
 800a61e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a622:	d0ed      	beq.n	800a600 <_dtoa_r+0xa58>
 800a624:	9a00      	ldr	r2, [sp, #0]
 800a626:	f108 0301 	add.w	r3, r8, #1
 800a62a:	7013      	strb	r3, [r2, #0]
 800a62c:	e608      	b.n	800a240 <_dtoa_r+0x698>
 800a62e:	9b07      	ldr	r3, [sp, #28]
 800a630:	9a07      	ldr	r2, [sp, #28]
 800a632:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a636:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a638:	4293      	cmp	r3, r2
 800a63a:	d028      	beq.n	800a68e <_dtoa_r+0xae6>
 800a63c:	4649      	mov	r1, r9
 800a63e:	2300      	movs	r3, #0
 800a640:	220a      	movs	r2, #10
 800a642:	4658      	mov	r0, fp
 800a644:	f000 f9d6 	bl	800a9f4 <__multadd>
 800a648:	42af      	cmp	r7, r5
 800a64a:	4681      	mov	r9, r0
 800a64c:	f04f 0300 	mov.w	r3, #0
 800a650:	f04f 020a 	mov.w	r2, #10
 800a654:	4639      	mov	r1, r7
 800a656:	4658      	mov	r0, fp
 800a658:	d107      	bne.n	800a66a <_dtoa_r+0xac2>
 800a65a:	f000 f9cb 	bl	800a9f4 <__multadd>
 800a65e:	4607      	mov	r7, r0
 800a660:	4605      	mov	r5, r0
 800a662:	9b07      	ldr	r3, [sp, #28]
 800a664:	3301      	adds	r3, #1
 800a666:	9307      	str	r3, [sp, #28]
 800a668:	e774      	b.n	800a554 <_dtoa_r+0x9ac>
 800a66a:	f000 f9c3 	bl	800a9f4 <__multadd>
 800a66e:	4629      	mov	r1, r5
 800a670:	4607      	mov	r7, r0
 800a672:	2300      	movs	r3, #0
 800a674:	220a      	movs	r2, #10
 800a676:	4658      	mov	r0, fp
 800a678:	f000 f9bc 	bl	800a9f4 <__multadd>
 800a67c:	4605      	mov	r5, r0
 800a67e:	e7f0      	b.n	800a662 <_dtoa_r+0xaba>
 800a680:	9b00      	ldr	r3, [sp, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	bfcc      	ite	gt
 800a686:	461e      	movgt	r6, r3
 800a688:	2601      	movle	r6, #1
 800a68a:	4456      	add	r6, sl
 800a68c:	2700      	movs	r7, #0
 800a68e:	4649      	mov	r1, r9
 800a690:	2201      	movs	r2, #1
 800a692:	4658      	mov	r0, fp
 800a694:	f000 fba4 	bl	800ade0 <__lshift>
 800a698:	4621      	mov	r1, r4
 800a69a:	4681      	mov	r9, r0
 800a69c:	f000 fc0c 	bl	800aeb8 <__mcmp>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	dcb0      	bgt.n	800a606 <_dtoa_r+0xa5e>
 800a6a4:	d102      	bne.n	800a6ac <_dtoa_r+0xb04>
 800a6a6:	f018 0f01 	tst.w	r8, #1
 800a6aa:	d1ac      	bne.n	800a606 <_dtoa_r+0xa5e>
 800a6ac:	4633      	mov	r3, r6
 800a6ae:	461e      	mov	r6, r3
 800a6b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6b4:	2a30      	cmp	r2, #48	@ 0x30
 800a6b6:	d0fa      	beq.n	800a6ae <_dtoa_r+0xb06>
 800a6b8:	e5c2      	b.n	800a240 <_dtoa_r+0x698>
 800a6ba:	459a      	cmp	sl, r3
 800a6bc:	d1a4      	bne.n	800a608 <_dtoa_r+0xa60>
 800a6be:	9b04      	ldr	r3, [sp, #16]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	9304      	str	r3, [sp, #16]
 800a6c4:	2331      	movs	r3, #49	@ 0x31
 800a6c6:	f88a 3000 	strb.w	r3, [sl]
 800a6ca:	e5b9      	b.n	800a240 <_dtoa_r+0x698>
 800a6cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a6ce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a72c <_dtoa_r+0xb84>
 800a6d2:	b11b      	cbz	r3, 800a6dc <_dtoa_r+0xb34>
 800a6d4:	f10a 0308 	add.w	r3, sl, #8
 800a6d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a6da:	6013      	str	r3, [r2, #0]
 800a6dc:	4650      	mov	r0, sl
 800a6de:	b019      	add	sp, #100	@ 0x64
 800a6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	f77f ae37 	ble.w	800a35a <_dtoa_r+0x7b2>
 800a6ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6f0:	2001      	movs	r0, #1
 800a6f2:	e655      	b.n	800a3a0 <_dtoa_r+0x7f8>
 800a6f4:	9b00      	ldr	r3, [sp, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f77f aed6 	ble.w	800a4a8 <_dtoa_r+0x900>
 800a6fc:	4656      	mov	r6, sl
 800a6fe:	4621      	mov	r1, r4
 800a700:	4648      	mov	r0, r9
 800a702:	f7ff f9c7 	bl	8009a94 <quorem>
 800a706:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a70a:	f806 8b01 	strb.w	r8, [r6], #1
 800a70e:	9b00      	ldr	r3, [sp, #0]
 800a710:	eba6 020a 	sub.w	r2, r6, sl
 800a714:	4293      	cmp	r3, r2
 800a716:	ddb3      	ble.n	800a680 <_dtoa_r+0xad8>
 800a718:	4649      	mov	r1, r9
 800a71a:	2300      	movs	r3, #0
 800a71c:	220a      	movs	r2, #10
 800a71e:	4658      	mov	r0, fp
 800a720:	f000 f968 	bl	800a9f4 <__multadd>
 800a724:	4681      	mov	r9, r0
 800a726:	e7ea      	b.n	800a6fe <_dtoa_r+0xb56>
 800a728:	0800d299 	.word	0x0800d299
 800a72c:	0800d21d 	.word	0x0800d21d

0800a730 <_free_r>:
 800a730:	b538      	push	{r3, r4, r5, lr}
 800a732:	4605      	mov	r5, r0
 800a734:	2900      	cmp	r1, #0
 800a736:	d041      	beq.n	800a7bc <_free_r+0x8c>
 800a738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a73c:	1f0c      	subs	r4, r1, #4
 800a73e:	2b00      	cmp	r3, #0
 800a740:	bfb8      	it	lt
 800a742:	18e4      	addlt	r4, r4, r3
 800a744:	f000 f8e8 	bl	800a918 <__malloc_lock>
 800a748:	4a1d      	ldr	r2, [pc, #116]	@ (800a7c0 <_free_r+0x90>)
 800a74a:	6813      	ldr	r3, [r2, #0]
 800a74c:	b933      	cbnz	r3, 800a75c <_free_r+0x2c>
 800a74e:	6063      	str	r3, [r4, #4]
 800a750:	6014      	str	r4, [r2, #0]
 800a752:	4628      	mov	r0, r5
 800a754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a758:	f000 b8e4 	b.w	800a924 <__malloc_unlock>
 800a75c:	42a3      	cmp	r3, r4
 800a75e:	d908      	bls.n	800a772 <_free_r+0x42>
 800a760:	6820      	ldr	r0, [r4, #0]
 800a762:	1821      	adds	r1, r4, r0
 800a764:	428b      	cmp	r3, r1
 800a766:	bf01      	itttt	eq
 800a768:	6819      	ldreq	r1, [r3, #0]
 800a76a:	685b      	ldreq	r3, [r3, #4]
 800a76c:	1809      	addeq	r1, r1, r0
 800a76e:	6021      	streq	r1, [r4, #0]
 800a770:	e7ed      	b.n	800a74e <_free_r+0x1e>
 800a772:	461a      	mov	r2, r3
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	b10b      	cbz	r3, 800a77c <_free_r+0x4c>
 800a778:	42a3      	cmp	r3, r4
 800a77a:	d9fa      	bls.n	800a772 <_free_r+0x42>
 800a77c:	6811      	ldr	r1, [r2, #0]
 800a77e:	1850      	adds	r0, r2, r1
 800a780:	42a0      	cmp	r0, r4
 800a782:	d10b      	bne.n	800a79c <_free_r+0x6c>
 800a784:	6820      	ldr	r0, [r4, #0]
 800a786:	4401      	add	r1, r0
 800a788:	1850      	adds	r0, r2, r1
 800a78a:	4283      	cmp	r3, r0
 800a78c:	6011      	str	r1, [r2, #0]
 800a78e:	d1e0      	bne.n	800a752 <_free_r+0x22>
 800a790:	6818      	ldr	r0, [r3, #0]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	6053      	str	r3, [r2, #4]
 800a796:	4408      	add	r0, r1
 800a798:	6010      	str	r0, [r2, #0]
 800a79a:	e7da      	b.n	800a752 <_free_r+0x22>
 800a79c:	d902      	bls.n	800a7a4 <_free_r+0x74>
 800a79e:	230c      	movs	r3, #12
 800a7a0:	602b      	str	r3, [r5, #0]
 800a7a2:	e7d6      	b.n	800a752 <_free_r+0x22>
 800a7a4:	6820      	ldr	r0, [r4, #0]
 800a7a6:	1821      	adds	r1, r4, r0
 800a7a8:	428b      	cmp	r3, r1
 800a7aa:	bf04      	itt	eq
 800a7ac:	6819      	ldreq	r1, [r3, #0]
 800a7ae:	685b      	ldreq	r3, [r3, #4]
 800a7b0:	6063      	str	r3, [r4, #4]
 800a7b2:	bf04      	itt	eq
 800a7b4:	1809      	addeq	r1, r1, r0
 800a7b6:	6021      	streq	r1, [r4, #0]
 800a7b8:	6054      	str	r4, [r2, #4]
 800a7ba:	e7ca      	b.n	800a752 <_free_r+0x22>
 800a7bc:	bd38      	pop	{r3, r4, r5, pc}
 800a7be:	bf00      	nop
 800a7c0:	200008f0 	.word	0x200008f0

0800a7c4 <malloc>:
 800a7c4:	4b02      	ldr	r3, [pc, #8]	@ (800a7d0 <malloc+0xc>)
 800a7c6:	4601      	mov	r1, r0
 800a7c8:	6818      	ldr	r0, [r3, #0]
 800a7ca:	f000 b825 	b.w	800a818 <_malloc_r>
 800a7ce:	bf00      	nop
 800a7d0:	20000014 	.word	0x20000014

0800a7d4 <sbrk_aligned>:
 800a7d4:	b570      	push	{r4, r5, r6, lr}
 800a7d6:	4e0f      	ldr	r6, [pc, #60]	@ (800a814 <sbrk_aligned+0x40>)
 800a7d8:	460c      	mov	r4, r1
 800a7da:	6831      	ldr	r1, [r6, #0]
 800a7dc:	4605      	mov	r5, r0
 800a7de:	b911      	cbnz	r1, 800a7e6 <sbrk_aligned+0x12>
 800a7e0:	f001 fe0c 	bl	800c3fc <_sbrk_r>
 800a7e4:	6030      	str	r0, [r6, #0]
 800a7e6:	4621      	mov	r1, r4
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	f001 fe07 	bl	800c3fc <_sbrk_r>
 800a7ee:	1c43      	adds	r3, r0, #1
 800a7f0:	d103      	bne.n	800a7fa <sbrk_aligned+0x26>
 800a7f2:	f04f 34ff 	mov.w	r4, #4294967295
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	bd70      	pop	{r4, r5, r6, pc}
 800a7fa:	1cc4      	adds	r4, r0, #3
 800a7fc:	f024 0403 	bic.w	r4, r4, #3
 800a800:	42a0      	cmp	r0, r4
 800a802:	d0f8      	beq.n	800a7f6 <sbrk_aligned+0x22>
 800a804:	1a21      	subs	r1, r4, r0
 800a806:	4628      	mov	r0, r5
 800a808:	f001 fdf8 	bl	800c3fc <_sbrk_r>
 800a80c:	3001      	adds	r0, #1
 800a80e:	d1f2      	bne.n	800a7f6 <sbrk_aligned+0x22>
 800a810:	e7ef      	b.n	800a7f2 <sbrk_aligned+0x1e>
 800a812:	bf00      	nop
 800a814:	200008ec 	.word	0x200008ec

0800a818 <_malloc_r>:
 800a818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a81c:	1ccd      	adds	r5, r1, #3
 800a81e:	f025 0503 	bic.w	r5, r5, #3
 800a822:	3508      	adds	r5, #8
 800a824:	2d0c      	cmp	r5, #12
 800a826:	bf38      	it	cc
 800a828:	250c      	movcc	r5, #12
 800a82a:	2d00      	cmp	r5, #0
 800a82c:	4606      	mov	r6, r0
 800a82e:	db01      	blt.n	800a834 <_malloc_r+0x1c>
 800a830:	42a9      	cmp	r1, r5
 800a832:	d904      	bls.n	800a83e <_malloc_r+0x26>
 800a834:	230c      	movs	r3, #12
 800a836:	6033      	str	r3, [r6, #0]
 800a838:	2000      	movs	r0, #0
 800a83a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a83e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a914 <_malloc_r+0xfc>
 800a842:	f000 f869 	bl	800a918 <__malloc_lock>
 800a846:	f8d8 3000 	ldr.w	r3, [r8]
 800a84a:	461c      	mov	r4, r3
 800a84c:	bb44      	cbnz	r4, 800a8a0 <_malloc_r+0x88>
 800a84e:	4629      	mov	r1, r5
 800a850:	4630      	mov	r0, r6
 800a852:	f7ff ffbf 	bl	800a7d4 <sbrk_aligned>
 800a856:	1c43      	adds	r3, r0, #1
 800a858:	4604      	mov	r4, r0
 800a85a:	d158      	bne.n	800a90e <_malloc_r+0xf6>
 800a85c:	f8d8 4000 	ldr.w	r4, [r8]
 800a860:	4627      	mov	r7, r4
 800a862:	2f00      	cmp	r7, #0
 800a864:	d143      	bne.n	800a8ee <_malloc_r+0xd6>
 800a866:	2c00      	cmp	r4, #0
 800a868:	d04b      	beq.n	800a902 <_malloc_r+0xea>
 800a86a:	6823      	ldr	r3, [r4, #0]
 800a86c:	4639      	mov	r1, r7
 800a86e:	4630      	mov	r0, r6
 800a870:	eb04 0903 	add.w	r9, r4, r3
 800a874:	f001 fdc2 	bl	800c3fc <_sbrk_r>
 800a878:	4581      	cmp	r9, r0
 800a87a:	d142      	bne.n	800a902 <_malloc_r+0xea>
 800a87c:	6821      	ldr	r1, [r4, #0]
 800a87e:	1a6d      	subs	r5, r5, r1
 800a880:	4629      	mov	r1, r5
 800a882:	4630      	mov	r0, r6
 800a884:	f7ff ffa6 	bl	800a7d4 <sbrk_aligned>
 800a888:	3001      	adds	r0, #1
 800a88a:	d03a      	beq.n	800a902 <_malloc_r+0xea>
 800a88c:	6823      	ldr	r3, [r4, #0]
 800a88e:	442b      	add	r3, r5
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	f8d8 3000 	ldr.w	r3, [r8]
 800a896:	685a      	ldr	r2, [r3, #4]
 800a898:	bb62      	cbnz	r2, 800a8f4 <_malloc_r+0xdc>
 800a89a:	f8c8 7000 	str.w	r7, [r8]
 800a89e:	e00f      	b.n	800a8c0 <_malloc_r+0xa8>
 800a8a0:	6822      	ldr	r2, [r4, #0]
 800a8a2:	1b52      	subs	r2, r2, r5
 800a8a4:	d420      	bmi.n	800a8e8 <_malloc_r+0xd0>
 800a8a6:	2a0b      	cmp	r2, #11
 800a8a8:	d917      	bls.n	800a8da <_malloc_r+0xc2>
 800a8aa:	1961      	adds	r1, r4, r5
 800a8ac:	42a3      	cmp	r3, r4
 800a8ae:	6025      	str	r5, [r4, #0]
 800a8b0:	bf18      	it	ne
 800a8b2:	6059      	strne	r1, [r3, #4]
 800a8b4:	6863      	ldr	r3, [r4, #4]
 800a8b6:	bf08      	it	eq
 800a8b8:	f8c8 1000 	streq.w	r1, [r8]
 800a8bc:	5162      	str	r2, [r4, r5]
 800a8be:	604b      	str	r3, [r1, #4]
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	f000 f82f 	bl	800a924 <__malloc_unlock>
 800a8c6:	f104 000b 	add.w	r0, r4, #11
 800a8ca:	1d23      	adds	r3, r4, #4
 800a8cc:	f020 0007 	bic.w	r0, r0, #7
 800a8d0:	1ac2      	subs	r2, r0, r3
 800a8d2:	bf1c      	itt	ne
 800a8d4:	1a1b      	subne	r3, r3, r0
 800a8d6:	50a3      	strne	r3, [r4, r2]
 800a8d8:	e7af      	b.n	800a83a <_malloc_r+0x22>
 800a8da:	6862      	ldr	r2, [r4, #4]
 800a8dc:	42a3      	cmp	r3, r4
 800a8de:	bf0c      	ite	eq
 800a8e0:	f8c8 2000 	streq.w	r2, [r8]
 800a8e4:	605a      	strne	r2, [r3, #4]
 800a8e6:	e7eb      	b.n	800a8c0 <_malloc_r+0xa8>
 800a8e8:	4623      	mov	r3, r4
 800a8ea:	6864      	ldr	r4, [r4, #4]
 800a8ec:	e7ae      	b.n	800a84c <_malloc_r+0x34>
 800a8ee:	463c      	mov	r4, r7
 800a8f0:	687f      	ldr	r7, [r7, #4]
 800a8f2:	e7b6      	b.n	800a862 <_malloc_r+0x4a>
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	42a3      	cmp	r3, r4
 800a8fa:	d1fb      	bne.n	800a8f4 <_malloc_r+0xdc>
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	6053      	str	r3, [r2, #4]
 800a900:	e7de      	b.n	800a8c0 <_malloc_r+0xa8>
 800a902:	230c      	movs	r3, #12
 800a904:	6033      	str	r3, [r6, #0]
 800a906:	4630      	mov	r0, r6
 800a908:	f000 f80c 	bl	800a924 <__malloc_unlock>
 800a90c:	e794      	b.n	800a838 <_malloc_r+0x20>
 800a90e:	6005      	str	r5, [r0, #0]
 800a910:	e7d6      	b.n	800a8c0 <_malloc_r+0xa8>
 800a912:	bf00      	nop
 800a914:	200008f0 	.word	0x200008f0

0800a918 <__malloc_lock>:
 800a918:	4801      	ldr	r0, [pc, #4]	@ (800a920 <__malloc_lock+0x8>)
 800a91a:	f7ff b8a4 	b.w	8009a66 <__retarget_lock_acquire_recursive>
 800a91e:	bf00      	nop
 800a920:	200008e8 	.word	0x200008e8

0800a924 <__malloc_unlock>:
 800a924:	4801      	ldr	r0, [pc, #4]	@ (800a92c <__malloc_unlock+0x8>)
 800a926:	f7ff b89f 	b.w	8009a68 <__retarget_lock_release_recursive>
 800a92a:	bf00      	nop
 800a92c:	200008e8 	.word	0x200008e8

0800a930 <_Balloc>:
 800a930:	b570      	push	{r4, r5, r6, lr}
 800a932:	69c6      	ldr	r6, [r0, #28]
 800a934:	4604      	mov	r4, r0
 800a936:	460d      	mov	r5, r1
 800a938:	b976      	cbnz	r6, 800a958 <_Balloc+0x28>
 800a93a:	2010      	movs	r0, #16
 800a93c:	f7ff ff42 	bl	800a7c4 <malloc>
 800a940:	4602      	mov	r2, r0
 800a942:	61e0      	str	r0, [r4, #28]
 800a944:	b920      	cbnz	r0, 800a950 <_Balloc+0x20>
 800a946:	4b18      	ldr	r3, [pc, #96]	@ (800a9a8 <_Balloc+0x78>)
 800a948:	4818      	ldr	r0, [pc, #96]	@ (800a9ac <_Balloc+0x7c>)
 800a94a:	216b      	movs	r1, #107	@ 0x6b
 800a94c:	f001 fd70 	bl	800c430 <__assert_func>
 800a950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a954:	6006      	str	r6, [r0, #0]
 800a956:	60c6      	str	r6, [r0, #12]
 800a958:	69e6      	ldr	r6, [r4, #28]
 800a95a:	68f3      	ldr	r3, [r6, #12]
 800a95c:	b183      	cbz	r3, 800a980 <_Balloc+0x50>
 800a95e:	69e3      	ldr	r3, [r4, #28]
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a966:	b9b8      	cbnz	r0, 800a998 <_Balloc+0x68>
 800a968:	2101      	movs	r1, #1
 800a96a:	fa01 f605 	lsl.w	r6, r1, r5
 800a96e:	1d72      	adds	r2, r6, #5
 800a970:	0092      	lsls	r2, r2, #2
 800a972:	4620      	mov	r0, r4
 800a974:	f001 fd7a 	bl	800c46c <_calloc_r>
 800a978:	b160      	cbz	r0, 800a994 <_Balloc+0x64>
 800a97a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a97e:	e00e      	b.n	800a99e <_Balloc+0x6e>
 800a980:	2221      	movs	r2, #33	@ 0x21
 800a982:	2104      	movs	r1, #4
 800a984:	4620      	mov	r0, r4
 800a986:	f001 fd71 	bl	800c46c <_calloc_r>
 800a98a:	69e3      	ldr	r3, [r4, #28]
 800a98c:	60f0      	str	r0, [r6, #12]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d1e4      	bne.n	800a95e <_Balloc+0x2e>
 800a994:	2000      	movs	r0, #0
 800a996:	bd70      	pop	{r4, r5, r6, pc}
 800a998:	6802      	ldr	r2, [r0, #0]
 800a99a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a99e:	2300      	movs	r3, #0
 800a9a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a9a4:	e7f7      	b.n	800a996 <_Balloc+0x66>
 800a9a6:	bf00      	nop
 800a9a8:	0800d22a 	.word	0x0800d22a
 800a9ac:	0800d2aa 	.word	0x0800d2aa

0800a9b0 <_Bfree>:
 800a9b0:	b570      	push	{r4, r5, r6, lr}
 800a9b2:	69c6      	ldr	r6, [r0, #28]
 800a9b4:	4605      	mov	r5, r0
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	b976      	cbnz	r6, 800a9d8 <_Bfree+0x28>
 800a9ba:	2010      	movs	r0, #16
 800a9bc:	f7ff ff02 	bl	800a7c4 <malloc>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	61e8      	str	r0, [r5, #28]
 800a9c4:	b920      	cbnz	r0, 800a9d0 <_Bfree+0x20>
 800a9c6:	4b09      	ldr	r3, [pc, #36]	@ (800a9ec <_Bfree+0x3c>)
 800a9c8:	4809      	ldr	r0, [pc, #36]	@ (800a9f0 <_Bfree+0x40>)
 800a9ca:	218f      	movs	r1, #143	@ 0x8f
 800a9cc:	f001 fd30 	bl	800c430 <__assert_func>
 800a9d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9d4:	6006      	str	r6, [r0, #0]
 800a9d6:	60c6      	str	r6, [r0, #12]
 800a9d8:	b13c      	cbz	r4, 800a9ea <_Bfree+0x3a>
 800a9da:	69eb      	ldr	r3, [r5, #28]
 800a9dc:	6862      	ldr	r2, [r4, #4]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9e4:	6021      	str	r1, [r4, #0]
 800a9e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9ea:	bd70      	pop	{r4, r5, r6, pc}
 800a9ec:	0800d22a 	.word	0x0800d22a
 800a9f0:	0800d2aa 	.word	0x0800d2aa

0800a9f4 <__multadd>:
 800a9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f8:	690d      	ldr	r5, [r1, #16]
 800a9fa:	4607      	mov	r7, r0
 800a9fc:	460c      	mov	r4, r1
 800a9fe:	461e      	mov	r6, r3
 800aa00:	f101 0c14 	add.w	ip, r1, #20
 800aa04:	2000      	movs	r0, #0
 800aa06:	f8dc 3000 	ldr.w	r3, [ip]
 800aa0a:	b299      	uxth	r1, r3
 800aa0c:	fb02 6101 	mla	r1, r2, r1, r6
 800aa10:	0c1e      	lsrs	r6, r3, #16
 800aa12:	0c0b      	lsrs	r3, r1, #16
 800aa14:	fb02 3306 	mla	r3, r2, r6, r3
 800aa18:	b289      	uxth	r1, r1
 800aa1a:	3001      	adds	r0, #1
 800aa1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa20:	4285      	cmp	r5, r0
 800aa22:	f84c 1b04 	str.w	r1, [ip], #4
 800aa26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa2a:	dcec      	bgt.n	800aa06 <__multadd+0x12>
 800aa2c:	b30e      	cbz	r6, 800aa72 <__multadd+0x7e>
 800aa2e:	68a3      	ldr	r3, [r4, #8]
 800aa30:	42ab      	cmp	r3, r5
 800aa32:	dc19      	bgt.n	800aa68 <__multadd+0x74>
 800aa34:	6861      	ldr	r1, [r4, #4]
 800aa36:	4638      	mov	r0, r7
 800aa38:	3101      	adds	r1, #1
 800aa3a:	f7ff ff79 	bl	800a930 <_Balloc>
 800aa3e:	4680      	mov	r8, r0
 800aa40:	b928      	cbnz	r0, 800aa4e <__multadd+0x5a>
 800aa42:	4602      	mov	r2, r0
 800aa44:	4b0c      	ldr	r3, [pc, #48]	@ (800aa78 <__multadd+0x84>)
 800aa46:	480d      	ldr	r0, [pc, #52]	@ (800aa7c <__multadd+0x88>)
 800aa48:	21ba      	movs	r1, #186	@ 0xba
 800aa4a:	f001 fcf1 	bl	800c430 <__assert_func>
 800aa4e:	6922      	ldr	r2, [r4, #16]
 800aa50:	3202      	adds	r2, #2
 800aa52:	f104 010c 	add.w	r1, r4, #12
 800aa56:	0092      	lsls	r2, r2, #2
 800aa58:	300c      	adds	r0, #12
 800aa5a:	f7ff f806 	bl	8009a6a <memcpy>
 800aa5e:	4621      	mov	r1, r4
 800aa60:	4638      	mov	r0, r7
 800aa62:	f7ff ffa5 	bl	800a9b0 <_Bfree>
 800aa66:	4644      	mov	r4, r8
 800aa68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa6c:	3501      	adds	r5, #1
 800aa6e:	615e      	str	r6, [r3, #20]
 800aa70:	6125      	str	r5, [r4, #16]
 800aa72:	4620      	mov	r0, r4
 800aa74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa78:	0800d299 	.word	0x0800d299
 800aa7c:	0800d2aa 	.word	0x0800d2aa

0800aa80 <__s2b>:
 800aa80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa84:	460c      	mov	r4, r1
 800aa86:	4615      	mov	r5, r2
 800aa88:	461f      	mov	r7, r3
 800aa8a:	2209      	movs	r2, #9
 800aa8c:	3308      	adds	r3, #8
 800aa8e:	4606      	mov	r6, r0
 800aa90:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa94:	2100      	movs	r1, #0
 800aa96:	2201      	movs	r2, #1
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	db09      	blt.n	800aab0 <__s2b+0x30>
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	f7ff ff47 	bl	800a930 <_Balloc>
 800aaa2:	b940      	cbnz	r0, 800aab6 <__s2b+0x36>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	4b19      	ldr	r3, [pc, #100]	@ (800ab0c <__s2b+0x8c>)
 800aaa8:	4819      	ldr	r0, [pc, #100]	@ (800ab10 <__s2b+0x90>)
 800aaaa:	21d3      	movs	r1, #211	@ 0xd3
 800aaac:	f001 fcc0 	bl	800c430 <__assert_func>
 800aab0:	0052      	lsls	r2, r2, #1
 800aab2:	3101      	adds	r1, #1
 800aab4:	e7f0      	b.n	800aa98 <__s2b+0x18>
 800aab6:	9b08      	ldr	r3, [sp, #32]
 800aab8:	6143      	str	r3, [r0, #20]
 800aaba:	2d09      	cmp	r5, #9
 800aabc:	f04f 0301 	mov.w	r3, #1
 800aac0:	6103      	str	r3, [r0, #16]
 800aac2:	dd16      	ble.n	800aaf2 <__s2b+0x72>
 800aac4:	f104 0909 	add.w	r9, r4, #9
 800aac8:	46c8      	mov	r8, r9
 800aaca:	442c      	add	r4, r5
 800aacc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aad0:	4601      	mov	r1, r0
 800aad2:	3b30      	subs	r3, #48	@ 0x30
 800aad4:	220a      	movs	r2, #10
 800aad6:	4630      	mov	r0, r6
 800aad8:	f7ff ff8c 	bl	800a9f4 <__multadd>
 800aadc:	45a0      	cmp	r8, r4
 800aade:	d1f5      	bne.n	800aacc <__s2b+0x4c>
 800aae0:	f1a5 0408 	sub.w	r4, r5, #8
 800aae4:	444c      	add	r4, r9
 800aae6:	1b2d      	subs	r5, r5, r4
 800aae8:	1963      	adds	r3, r4, r5
 800aaea:	42bb      	cmp	r3, r7
 800aaec:	db04      	blt.n	800aaf8 <__s2b+0x78>
 800aaee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaf2:	340a      	adds	r4, #10
 800aaf4:	2509      	movs	r5, #9
 800aaf6:	e7f6      	b.n	800aae6 <__s2b+0x66>
 800aaf8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aafc:	4601      	mov	r1, r0
 800aafe:	3b30      	subs	r3, #48	@ 0x30
 800ab00:	220a      	movs	r2, #10
 800ab02:	4630      	mov	r0, r6
 800ab04:	f7ff ff76 	bl	800a9f4 <__multadd>
 800ab08:	e7ee      	b.n	800aae8 <__s2b+0x68>
 800ab0a:	bf00      	nop
 800ab0c:	0800d299 	.word	0x0800d299
 800ab10:	0800d2aa 	.word	0x0800d2aa

0800ab14 <__hi0bits>:
 800ab14:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ab18:	4603      	mov	r3, r0
 800ab1a:	bf36      	itet	cc
 800ab1c:	0403      	lslcc	r3, r0, #16
 800ab1e:	2000      	movcs	r0, #0
 800ab20:	2010      	movcc	r0, #16
 800ab22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab26:	bf3c      	itt	cc
 800ab28:	021b      	lslcc	r3, r3, #8
 800ab2a:	3008      	addcc	r0, #8
 800ab2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab30:	bf3c      	itt	cc
 800ab32:	011b      	lslcc	r3, r3, #4
 800ab34:	3004      	addcc	r0, #4
 800ab36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab3a:	bf3c      	itt	cc
 800ab3c:	009b      	lslcc	r3, r3, #2
 800ab3e:	3002      	addcc	r0, #2
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	db05      	blt.n	800ab50 <__hi0bits+0x3c>
 800ab44:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ab48:	f100 0001 	add.w	r0, r0, #1
 800ab4c:	bf08      	it	eq
 800ab4e:	2020      	moveq	r0, #32
 800ab50:	4770      	bx	lr

0800ab52 <__lo0bits>:
 800ab52:	6803      	ldr	r3, [r0, #0]
 800ab54:	4602      	mov	r2, r0
 800ab56:	f013 0007 	ands.w	r0, r3, #7
 800ab5a:	d00b      	beq.n	800ab74 <__lo0bits+0x22>
 800ab5c:	07d9      	lsls	r1, r3, #31
 800ab5e:	d421      	bmi.n	800aba4 <__lo0bits+0x52>
 800ab60:	0798      	lsls	r0, r3, #30
 800ab62:	bf49      	itett	mi
 800ab64:	085b      	lsrmi	r3, r3, #1
 800ab66:	089b      	lsrpl	r3, r3, #2
 800ab68:	2001      	movmi	r0, #1
 800ab6a:	6013      	strmi	r3, [r2, #0]
 800ab6c:	bf5c      	itt	pl
 800ab6e:	6013      	strpl	r3, [r2, #0]
 800ab70:	2002      	movpl	r0, #2
 800ab72:	4770      	bx	lr
 800ab74:	b299      	uxth	r1, r3
 800ab76:	b909      	cbnz	r1, 800ab7c <__lo0bits+0x2a>
 800ab78:	0c1b      	lsrs	r3, r3, #16
 800ab7a:	2010      	movs	r0, #16
 800ab7c:	b2d9      	uxtb	r1, r3
 800ab7e:	b909      	cbnz	r1, 800ab84 <__lo0bits+0x32>
 800ab80:	3008      	adds	r0, #8
 800ab82:	0a1b      	lsrs	r3, r3, #8
 800ab84:	0719      	lsls	r1, r3, #28
 800ab86:	bf04      	itt	eq
 800ab88:	091b      	lsreq	r3, r3, #4
 800ab8a:	3004      	addeq	r0, #4
 800ab8c:	0799      	lsls	r1, r3, #30
 800ab8e:	bf04      	itt	eq
 800ab90:	089b      	lsreq	r3, r3, #2
 800ab92:	3002      	addeq	r0, #2
 800ab94:	07d9      	lsls	r1, r3, #31
 800ab96:	d403      	bmi.n	800aba0 <__lo0bits+0x4e>
 800ab98:	085b      	lsrs	r3, r3, #1
 800ab9a:	f100 0001 	add.w	r0, r0, #1
 800ab9e:	d003      	beq.n	800aba8 <__lo0bits+0x56>
 800aba0:	6013      	str	r3, [r2, #0]
 800aba2:	4770      	bx	lr
 800aba4:	2000      	movs	r0, #0
 800aba6:	4770      	bx	lr
 800aba8:	2020      	movs	r0, #32
 800abaa:	4770      	bx	lr

0800abac <__i2b>:
 800abac:	b510      	push	{r4, lr}
 800abae:	460c      	mov	r4, r1
 800abb0:	2101      	movs	r1, #1
 800abb2:	f7ff febd 	bl	800a930 <_Balloc>
 800abb6:	4602      	mov	r2, r0
 800abb8:	b928      	cbnz	r0, 800abc6 <__i2b+0x1a>
 800abba:	4b05      	ldr	r3, [pc, #20]	@ (800abd0 <__i2b+0x24>)
 800abbc:	4805      	ldr	r0, [pc, #20]	@ (800abd4 <__i2b+0x28>)
 800abbe:	f240 1145 	movw	r1, #325	@ 0x145
 800abc2:	f001 fc35 	bl	800c430 <__assert_func>
 800abc6:	2301      	movs	r3, #1
 800abc8:	6144      	str	r4, [r0, #20]
 800abca:	6103      	str	r3, [r0, #16]
 800abcc:	bd10      	pop	{r4, pc}
 800abce:	bf00      	nop
 800abd0:	0800d299 	.word	0x0800d299
 800abd4:	0800d2aa 	.word	0x0800d2aa

0800abd8 <__multiply>:
 800abd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abdc:	4614      	mov	r4, r2
 800abde:	690a      	ldr	r2, [r1, #16]
 800abe0:	6923      	ldr	r3, [r4, #16]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	bfa8      	it	ge
 800abe6:	4623      	movge	r3, r4
 800abe8:	460f      	mov	r7, r1
 800abea:	bfa4      	itt	ge
 800abec:	460c      	movge	r4, r1
 800abee:	461f      	movge	r7, r3
 800abf0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800abf4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800abf8:	68a3      	ldr	r3, [r4, #8]
 800abfa:	6861      	ldr	r1, [r4, #4]
 800abfc:	eb0a 0609 	add.w	r6, sl, r9
 800ac00:	42b3      	cmp	r3, r6
 800ac02:	b085      	sub	sp, #20
 800ac04:	bfb8      	it	lt
 800ac06:	3101      	addlt	r1, #1
 800ac08:	f7ff fe92 	bl	800a930 <_Balloc>
 800ac0c:	b930      	cbnz	r0, 800ac1c <__multiply+0x44>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	4b44      	ldr	r3, [pc, #272]	@ (800ad24 <__multiply+0x14c>)
 800ac12:	4845      	ldr	r0, [pc, #276]	@ (800ad28 <__multiply+0x150>)
 800ac14:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ac18:	f001 fc0a 	bl	800c430 <__assert_func>
 800ac1c:	f100 0514 	add.w	r5, r0, #20
 800ac20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac24:	462b      	mov	r3, r5
 800ac26:	2200      	movs	r2, #0
 800ac28:	4543      	cmp	r3, r8
 800ac2a:	d321      	bcc.n	800ac70 <__multiply+0x98>
 800ac2c:	f107 0114 	add.w	r1, r7, #20
 800ac30:	f104 0214 	add.w	r2, r4, #20
 800ac34:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ac38:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ac3c:	9302      	str	r3, [sp, #8]
 800ac3e:	1b13      	subs	r3, r2, r4
 800ac40:	3b15      	subs	r3, #21
 800ac42:	f023 0303 	bic.w	r3, r3, #3
 800ac46:	3304      	adds	r3, #4
 800ac48:	f104 0715 	add.w	r7, r4, #21
 800ac4c:	42ba      	cmp	r2, r7
 800ac4e:	bf38      	it	cc
 800ac50:	2304      	movcc	r3, #4
 800ac52:	9301      	str	r3, [sp, #4]
 800ac54:	9b02      	ldr	r3, [sp, #8]
 800ac56:	9103      	str	r1, [sp, #12]
 800ac58:	428b      	cmp	r3, r1
 800ac5a:	d80c      	bhi.n	800ac76 <__multiply+0x9e>
 800ac5c:	2e00      	cmp	r6, #0
 800ac5e:	dd03      	ble.n	800ac68 <__multiply+0x90>
 800ac60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d05b      	beq.n	800ad20 <__multiply+0x148>
 800ac68:	6106      	str	r6, [r0, #16]
 800ac6a:	b005      	add	sp, #20
 800ac6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac70:	f843 2b04 	str.w	r2, [r3], #4
 800ac74:	e7d8      	b.n	800ac28 <__multiply+0x50>
 800ac76:	f8b1 a000 	ldrh.w	sl, [r1]
 800ac7a:	f1ba 0f00 	cmp.w	sl, #0
 800ac7e:	d024      	beq.n	800acca <__multiply+0xf2>
 800ac80:	f104 0e14 	add.w	lr, r4, #20
 800ac84:	46a9      	mov	r9, r5
 800ac86:	f04f 0c00 	mov.w	ip, #0
 800ac8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac8e:	f8d9 3000 	ldr.w	r3, [r9]
 800ac92:	fa1f fb87 	uxth.w	fp, r7
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	fb0a 330b 	mla	r3, sl, fp, r3
 800ac9c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800aca0:	f8d9 7000 	ldr.w	r7, [r9]
 800aca4:	4463      	add	r3, ip
 800aca6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800acaa:	fb0a c70b 	mla	r7, sl, fp, ip
 800acae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800acb8:	4572      	cmp	r2, lr
 800acba:	f849 3b04 	str.w	r3, [r9], #4
 800acbe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800acc2:	d8e2      	bhi.n	800ac8a <__multiply+0xb2>
 800acc4:	9b01      	ldr	r3, [sp, #4]
 800acc6:	f845 c003 	str.w	ip, [r5, r3]
 800acca:	9b03      	ldr	r3, [sp, #12]
 800accc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800acd0:	3104      	adds	r1, #4
 800acd2:	f1b9 0f00 	cmp.w	r9, #0
 800acd6:	d021      	beq.n	800ad1c <__multiply+0x144>
 800acd8:	682b      	ldr	r3, [r5, #0]
 800acda:	f104 0c14 	add.w	ip, r4, #20
 800acde:	46ae      	mov	lr, r5
 800ace0:	f04f 0a00 	mov.w	sl, #0
 800ace4:	f8bc b000 	ldrh.w	fp, [ip]
 800ace8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800acec:	fb09 770b 	mla	r7, r9, fp, r7
 800acf0:	4457      	add	r7, sl
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800acf8:	f84e 3b04 	str.w	r3, [lr], #4
 800acfc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad04:	f8be 3000 	ldrh.w	r3, [lr]
 800ad08:	fb09 330a 	mla	r3, r9, sl, r3
 800ad0c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ad10:	4562      	cmp	r2, ip
 800ad12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad16:	d8e5      	bhi.n	800ace4 <__multiply+0x10c>
 800ad18:	9f01      	ldr	r7, [sp, #4]
 800ad1a:	51eb      	str	r3, [r5, r7]
 800ad1c:	3504      	adds	r5, #4
 800ad1e:	e799      	b.n	800ac54 <__multiply+0x7c>
 800ad20:	3e01      	subs	r6, #1
 800ad22:	e79b      	b.n	800ac5c <__multiply+0x84>
 800ad24:	0800d299 	.word	0x0800d299
 800ad28:	0800d2aa 	.word	0x0800d2aa

0800ad2c <__pow5mult>:
 800ad2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad30:	4615      	mov	r5, r2
 800ad32:	f012 0203 	ands.w	r2, r2, #3
 800ad36:	4607      	mov	r7, r0
 800ad38:	460e      	mov	r6, r1
 800ad3a:	d007      	beq.n	800ad4c <__pow5mult+0x20>
 800ad3c:	4c25      	ldr	r4, [pc, #148]	@ (800add4 <__pow5mult+0xa8>)
 800ad3e:	3a01      	subs	r2, #1
 800ad40:	2300      	movs	r3, #0
 800ad42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad46:	f7ff fe55 	bl	800a9f4 <__multadd>
 800ad4a:	4606      	mov	r6, r0
 800ad4c:	10ad      	asrs	r5, r5, #2
 800ad4e:	d03d      	beq.n	800adcc <__pow5mult+0xa0>
 800ad50:	69fc      	ldr	r4, [r7, #28]
 800ad52:	b97c      	cbnz	r4, 800ad74 <__pow5mult+0x48>
 800ad54:	2010      	movs	r0, #16
 800ad56:	f7ff fd35 	bl	800a7c4 <malloc>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	61f8      	str	r0, [r7, #28]
 800ad5e:	b928      	cbnz	r0, 800ad6c <__pow5mult+0x40>
 800ad60:	4b1d      	ldr	r3, [pc, #116]	@ (800add8 <__pow5mult+0xac>)
 800ad62:	481e      	ldr	r0, [pc, #120]	@ (800addc <__pow5mult+0xb0>)
 800ad64:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ad68:	f001 fb62 	bl	800c430 <__assert_func>
 800ad6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad70:	6004      	str	r4, [r0, #0]
 800ad72:	60c4      	str	r4, [r0, #12]
 800ad74:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ad78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad7c:	b94c      	cbnz	r4, 800ad92 <__pow5mult+0x66>
 800ad7e:	f240 2171 	movw	r1, #625	@ 0x271
 800ad82:	4638      	mov	r0, r7
 800ad84:	f7ff ff12 	bl	800abac <__i2b>
 800ad88:	2300      	movs	r3, #0
 800ad8a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad8e:	4604      	mov	r4, r0
 800ad90:	6003      	str	r3, [r0, #0]
 800ad92:	f04f 0900 	mov.w	r9, #0
 800ad96:	07eb      	lsls	r3, r5, #31
 800ad98:	d50a      	bpl.n	800adb0 <__pow5mult+0x84>
 800ad9a:	4631      	mov	r1, r6
 800ad9c:	4622      	mov	r2, r4
 800ad9e:	4638      	mov	r0, r7
 800ada0:	f7ff ff1a 	bl	800abd8 <__multiply>
 800ada4:	4631      	mov	r1, r6
 800ada6:	4680      	mov	r8, r0
 800ada8:	4638      	mov	r0, r7
 800adaa:	f7ff fe01 	bl	800a9b0 <_Bfree>
 800adae:	4646      	mov	r6, r8
 800adb0:	106d      	asrs	r5, r5, #1
 800adb2:	d00b      	beq.n	800adcc <__pow5mult+0xa0>
 800adb4:	6820      	ldr	r0, [r4, #0]
 800adb6:	b938      	cbnz	r0, 800adc8 <__pow5mult+0x9c>
 800adb8:	4622      	mov	r2, r4
 800adba:	4621      	mov	r1, r4
 800adbc:	4638      	mov	r0, r7
 800adbe:	f7ff ff0b 	bl	800abd8 <__multiply>
 800adc2:	6020      	str	r0, [r4, #0]
 800adc4:	f8c0 9000 	str.w	r9, [r0]
 800adc8:	4604      	mov	r4, r0
 800adca:	e7e4      	b.n	800ad96 <__pow5mult+0x6a>
 800adcc:	4630      	mov	r0, r6
 800adce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800add2:	bf00      	nop
 800add4:	0800d304 	.word	0x0800d304
 800add8:	0800d22a 	.word	0x0800d22a
 800addc:	0800d2aa 	.word	0x0800d2aa

0800ade0 <__lshift>:
 800ade0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ade4:	460c      	mov	r4, r1
 800ade6:	6849      	ldr	r1, [r1, #4]
 800ade8:	6923      	ldr	r3, [r4, #16]
 800adea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800adee:	68a3      	ldr	r3, [r4, #8]
 800adf0:	4607      	mov	r7, r0
 800adf2:	4691      	mov	r9, r2
 800adf4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800adf8:	f108 0601 	add.w	r6, r8, #1
 800adfc:	42b3      	cmp	r3, r6
 800adfe:	db0b      	blt.n	800ae18 <__lshift+0x38>
 800ae00:	4638      	mov	r0, r7
 800ae02:	f7ff fd95 	bl	800a930 <_Balloc>
 800ae06:	4605      	mov	r5, r0
 800ae08:	b948      	cbnz	r0, 800ae1e <__lshift+0x3e>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	4b28      	ldr	r3, [pc, #160]	@ (800aeb0 <__lshift+0xd0>)
 800ae0e:	4829      	ldr	r0, [pc, #164]	@ (800aeb4 <__lshift+0xd4>)
 800ae10:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ae14:	f001 fb0c 	bl	800c430 <__assert_func>
 800ae18:	3101      	adds	r1, #1
 800ae1a:	005b      	lsls	r3, r3, #1
 800ae1c:	e7ee      	b.n	800adfc <__lshift+0x1c>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	f100 0114 	add.w	r1, r0, #20
 800ae24:	f100 0210 	add.w	r2, r0, #16
 800ae28:	4618      	mov	r0, r3
 800ae2a:	4553      	cmp	r3, sl
 800ae2c:	db33      	blt.n	800ae96 <__lshift+0xb6>
 800ae2e:	6920      	ldr	r0, [r4, #16]
 800ae30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae34:	f104 0314 	add.w	r3, r4, #20
 800ae38:	f019 091f 	ands.w	r9, r9, #31
 800ae3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae44:	d02b      	beq.n	800ae9e <__lshift+0xbe>
 800ae46:	f1c9 0e20 	rsb	lr, r9, #32
 800ae4a:	468a      	mov	sl, r1
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	6818      	ldr	r0, [r3, #0]
 800ae50:	fa00 f009 	lsl.w	r0, r0, r9
 800ae54:	4310      	orrs	r0, r2
 800ae56:	f84a 0b04 	str.w	r0, [sl], #4
 800ae5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae5e:	459c      	cmp	ip, r3
 800ae60:	fa22 f20e 	lsr.w	r2, r2, lr
 800ae64:	d8f3      	bhi.n	800ae4e <__lshift+0x6e>
 800ae66:	ebac 0304 	sub.w	r3, ip, r4
 800ae6a:	3b15      	subs	r3, #21
 800ae6c:	f023 0303 	bic.w	r3, r3, #3
 800ae70:	3304      	adds	r3, #4
 800ae72:	f104 0015 	add.w	r0, r4, #21
 800ae76:	4584      	cmp	ip, r0
 800ae78:	bf38      	it	cc
 800ae7a:	2304      	movcc	r3, #4
 800ae7c:	50ca      	str	r2, [r1, r3]
 800ae7e:	b10a      	cbz	r2, 800ae84 <__lshift+0xa4>
 800ae80:	f108 0602 	add.w	r6, r8, #2
 800ae84:	3e01      	subs	r6, #1
 800ae86:	4638      	mov	r0, r7
 800ae88:	612e      	str	r6, [r5, #16]
 800ae8a:	4621      	mov	r1, r4
 800ae8c:	f7ff fd90 	bl	800a9b0 <_Bfree>
 800ae90:	4628      	mov	r0, r5
 800ae92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae96:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	e7c5      	b.n	800ae2a <__lshift+0x4a>
 800ae9e:	3904      	subs	r1, #4
 800aea0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aea4:	f841 2f04 	str.w	r2, [r1, #4]!
 800aea8:	459c      	cmp	ip, r3
 800aeaa:	d8f9      	bhi.n	800aea0 <__lshift+0xc0>
 800aeac:	e7ea      	b.n	800ae84 <__lshift+0xa4>
 800aeae:	bf00      	nop
 800aeb0:	0800d299 	.word	0x0800d299
 800aeb4:	0800d2aa 	.word	0x0800d2aa

0800aeb8 <__mcmp>:
 800aeb8:	690a      	ldr	r2, [r1, #16]
 800aeba:	4603      	mov	r3, r0
 800aebc:	6900      	ldr	r0, [r0, #16]
 800aebe:	1a80      	subs	r0, r0, r2
 800aec0:	b530      	push	{r4, r5, lr}
 800aec2:	d10e      	bne.n	800aee2 <__mcmp+0x2a>
 800aec4:	3314      	adds	r3, #20
 800aec6:	3114      	adds	r1, #20
 800aec8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aecc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aed0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aed4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aed8:	4295      	cmp	r5, r2
 800aeda:	d003      	beq.n	800aee4 <__mcmp+0x2c>
 800aedc:	d205      	bcs.n	800aeea <__mcmp+0x32>
 800aede:	f04f 30ff 	mov.w	r0, #4294967295
 800aee2:	bd30      	pop	{r4, r5, pc}
 800aee4:	42a3      	cmp	r3, r4
 800aee6:	d3f3      	bcc.n	800aed0 <__mcmp+0x18>
 800aee8:	e7fb      	b.n	800aee2 <__mcmp+0x2a>
 800aeea:	2001      	movs	r0, #1
 800aeec:	e7f9      	b.n	800aee2 <__mcmp+0x2a>
	...

0800aef0 <__mdiff>:
 800aef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef4:	4689      	mov	r9, r1
 800aef6:	4606      	mov	r6, r0
 800aef8:	4611      	mov	r1, r2
 800aefa:	4648      	mov	r0, r9
 800aefc:	4614      	mov	r4, r2
 800aefe:	f7ff ffdb 	bl	800aeb8 <__mcmp>
 800af02:	1e05      	subs	r5, r0, #0
 800af04:	d112      	bne.n	800af2c <__mdiff+0x3c>
 800af06:	4629      	mov	r1, r5
 800af08:	4630      	mov	r0, r6
 800af0a:	f7ff fd11 	bl	800a930 <_Balloc>
 800af0e:	4602      	mov	r2, r0
 800af10:	b928      	cbnz	r0, 800af1e <__mdiff+0x2e>
 800af12:	4b3f      	ldr	r3, [pc, #252]	@ (800b010 <__mdiff+0x120>)
 800af14:	f240 2137 	movw	r1, #567	@ 0x237
 800af18:	483e      	ldr	r0, [pc, #248]	@ (800b014 <__mdiff+0x124>)
 800af1a:	f001 fa89 	bl	800c430 <__assert_func>
 800af1e:	2301      	movs	r3, #1
 800af20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af24:	4610      	mov	r0, r2
 800af26:	b003      	add	sp, #12
 800af28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af2c:	bfbc      	itt	lt
 800af2e:	464b      	movlt	r3, r9
 800af30:	46a1      	movlt	r9, r4
 800af32:	4630      	mov	r0, r6
 800af34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800af38:	bfba      	itte	lt
 800af3a:	461c      	movlt	r4, r3
 800af3c:	2501      	movlt	r5, #1
 800af3e:	2500      	movge	r5, #0
 800af40:	f7ff fcf6 	bl	800a930 <_Balloc>
 800af44:	4602      	mov	r2, r0
 800af46:	b918      	cbnz	r0, 800af50 <__mdiff+0x60>
 800af48:	4b31      	ldr	r3, [pc, #196]	@ (800b010 <__mdiff+0x120>)
 800af4a:	f240 2145 	movw	r1, #581	@ 0x245
 800af4e:	e7e3      	b.n	800af18 <__mdiff+0x28>
 800af50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800af54:	6926      	ldr	r6, [r4, #16]
 800af56:	60c5      	str	r5, [r0, #12]
 800af58:	f109 0310 	add.w	r3, r9, #16
 800af5c:	f109 0514 	add.w	r5, r9, #20
 800af60:	f104 0e14 	add.w	lr, r4, #20
 800af64:	f100 0b14 	add.w	fp, r0, #20
 800af68:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800af6c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800af70:	9301      	str	r3, [sp, #4]
 800af72:	46d9      	mov	r9, fp
 800af74:	f04f 0c00 	mov.w	ip, #0
 800af78:	9b01      	ldr	r3, [sp, #4]
 800af7a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800af7e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800af82:	9301      	str	r3, [sp, #4]
 800af84:	fa1f f38a 	uxth.w	r3, sl
 800af88:	4619      	mov	r1, r3
 800af8a:	b283      	uxth	r3, r0
 800af8c:	1acb      	subs	r3, r1, r3
 800af8e:	0c00      	lsrs	r0, r0, #16
 800af90:	4463      	add	r3, ip
 800af92:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800af96:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800afa0:	4576      	cmp	r6, lr
 800afa2:	f849 3b04 	str.w	r3, [r9], #4
 800afa6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800afaa:	d8e5      	bhi.n	800af78 <__mdiff+0x88>
 800afac:	1b33      	subs	r3, r6, r4
 800afae:	3b15      	subs	r3, #21
 800afb0:	f023 0303 	bic.w	r3, r3, #3
 800afb4:	3415      	adds	r4, #21
 800afb6:	3304      	adds	r3, #4
 800afb8:	42a6      	cmp	r6, r4
 800afba:	bf38      	it	cc
 800afbc:	2304      	movcc	r3, #4
 800afbe:	441d      	add	r5, r3
 800afc0:	445b      	add	r3, fp
 800afc2:	461e      	mov	r6, r3
 800afc4:	462c      	mov	r4, r5
 800afc6:	4544      	cmp	r4, r8
 800afc8:	d30e      	bcc.n	800afe8 <__mdiff+0xf8>
 800afca:	f108 0103 	add.w	r1, r8, #3
 800afce:	1b49      	subs	r1, r1, r5
 800afd0:	f021 0103 	bic.w	r1, r1, #3
 800afd4:	3d03      	subs	r5, #3
 800afd6:	45a8      	cmp	r8, r5
 800afd8:	bf38      	it	cc
 800afda:	2100      	movcc	r1, #0
 800afdc:	440b      	add	r3, r1
 800afde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800afe2:	b191      	cbz	r1, 800b00a <__mdiff+0x11a>
 800afe4:	6117      	str	r7, [r2, #16]
 800afe6:	e79d      	b.n	800af24 <__mdiff+0x34>
 800afe8:	f854 1b04 	ldr.w	r1, [r4], #4
 800afec:	46e6      	mov	lr, ip
 800afee:	0c08      	lsrs	r0, r1, #16
 800aff0:	fa1c fc81 	uxtah	ip, ip, r1
 800aff4:	4471      	add	r1, lr
 800aff6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800affa:	b289      	uxth	r1, r1
 800affc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b000:	f846 1b04 	str.w	r1, [r6], #4
 800b004:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b008:	e7dd      	b.n	800afc6 <__mdiff+0xd6>
 800b00a:	3f01      	subs	r7, #1
 800b00c:	e7e7      	b.n	800afde <__mdiff+0xee>
 800b00e:	bf00      	nop
 800b010:	0800d299 	.word	0x0800d299
 800b014:	0800d2aa 	.word	0x0800d2aa

0800b018 <__ulp>:
 800b018:	b082      	sub	sp, #8
 800b01a:	ed8d 0b00 	vstr	d0, [sp]
 800b01e:	9a01      	ldr	r2, [sp, #4]
 800b020:	4b0f      	ldr	r3, [pc, #60]	@ (800b060 <__ulp+0x48>)
 800b022:	4013      	ands	r3, r2
 800b024:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b028:	2b00      	cmp	r3, #0
 800b02a:	dc08      	bgt.n	800b03e <__ulp+0x26>
 800b02c:	425b      	negs	r3, r3
 800b02e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b032:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b036:	da04      	bge.n	800b042 <__ulp+0x2a>
 800b038:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b03c:	4113      	asrs	r3, r2
 800b03e:	2200      	movs	r2, #0
 800b040:	e008      	b.n	800b054 <__ulp+0x3c>
 800b042:	f1a2 0314 	sub.w	r3, r2, #20
 800b046:	2b1e      	cmp	r3, #30
 800b048:	bfda      	itte	le
 800b04a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b04e:	40da      	lsrle	r2, r3
 800b050:	2201      	movgt	r2, #1
 800b052:	2300      	movs	r3, #0
 800b054:	4619      	mov	r1, r3
 800b056:	4610      	mov	r0, r2
 800b058:	ec41 0b10 	vmov	d0, r0, r1
 800b05c:	b002      	add	sp, #8
 800b05e:	4770      	bx	lr
 800b060:	7ff00000 	.word	0x7ff00000

0800b064 <__b2d>:
 800b064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b068:	6906      	ldr	r6, [r0, #16]
 800b06a:	f100 0814 	add.w	r8, r0, #20
 800b06e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b072:	1f37      	subs	r7, r6, #4
 800b074:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b078:	4610      	mov	r0, r2
 800b07a:	f7ff fd4b 	bl	800ab14 <__hi0bits>
 800b07e:	f1c0 0320 	rsb	r3, r0, #32
 800b082:	280a      	cmp	r0, #10
 800b084:	600b      	str	r3, [r1, #0]
 800b086:	491b      	ldr	r1, [pc, #108]	@ (800b0f4 <__b2d+0x90>)
 800b088:	dc15      	bgt.n	800b0b6 <__b2d+0x52>
 800b08a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b08e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b092:	45b8      	cmp	r8, r7
 800b094:	ea43 0501 	orr.w	r5, r3, r1
 800b098:	bf34      	ite	cc
 800b09a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b09e:	2300      	movcs	r3, #0
 800b0a0:	3015      	adds	r0, #21
 800b0a2:	fa02 f000 	lsl.w	r0, r2, r0
 800b0a6:	fa23 f30c 	lsr.w	r3, r3, ip
 800b0aa:	4303      	orrs	r3, r0
 800b0ac:	461c      	mov	r4, r3
 800b0ae:	ec45 4b10 	vmov	d0, r4, r5
 800b0b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0b6:	45b8      	cmp	r8, r7
 800b0b8:	bf3a      	itte	cc
 800b0ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b0be:	f1a6 0708 	subcc.w	r7, r6, #8
 800b0c2:	2300      	movcs	r3, #0
 800b0c4:	380b      	subs	r0, #11
 800b0c6:	d012      	beq.n	800b0ee <__b2d+0x8a>
 800b0c8:	f1c0 0120 	rsb	r1, r0, #32
 800b0cc:	fa23 f401 	lsr.w	r4, r3, r1
 800b0d0:	4082      	lsls	r2, r0
 800b0d2:	4322      	orrs	r2, r4
 800b0d4:	4547      	cmp	r7, r8
 800b0d6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b0da:	bf8c      	ite	hi
 800b0dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b0e0:	2200      	movls	r2, #0
 800b0e2:	4083      	lsls	r3, r0
 800b0e4:	40ca      	lsrs	r2, r1
 800b0e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	e7de      	b.n	800b0ac <__b2d+0x48>
 800b0ee:	ea42 0501 	orr.w	r5, r2, r1
 800b0f2:	e7db      	b.n	800b0ac <__b2d+0x48>
 800b0f4:	3ff00000 	.word	0x3ff00000

0800b0f8 <__d2b>:
 800b0f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0fc:	460f      	mov	r7, r1
 800b0fe:	2101      	movs	r1, #1
 800b100:	ec59 8b10 	vmov	r8, r9, d0
 800b104:	4616      	mov	r6, r2
 800b106:	f7ff fc13 	bl	800a930 <_Balloc>
 800b10a:	4604      	mov	r4, r0
 800b10c:	b930      	cbnz	r0, 800b11c <__d2b+0x24>
 800b10e:	4602      	mov	r2, r0
 800b110:	4b23      	ldr	r3, [pc, #140]	@ (800b1a0 <__d2b+0xa8>)
 800b112:	4824      	ldr	r0, [pc, #144]	@ (800b1a4 <__d2b+0xac>)
 800b114:	f240 310f 	movw	r1, #783	@ 0x30f
 800b118:	f001 f98a 	bl	800c430 <__assert_func>
 800b11c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b120:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b124:	b10d      	cbz	r5, 800b12a <__d2b+0x32>
 800b126:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b12a:	9301      	str	r3, [sp, #4]
 800b12c:	f1b8 0300 	subs.w	r3, r8, #0
 800b130:	d023      	beq.n	800b17a <__d2b+0x82>
 800b132:	4668      	mov	r0, sp
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	f7ff fd0c 	bl	800ab52 <__lo0bits>
 800b13a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b13e:	b1d0      	cbz	r0, 800b176 <__d2b+0x7e>
 800b140:	f1c0 0320 	rsb	r3, r0, #32
 800b144:	fa02 f303 	lsl.w	r3, r2, r3
 800b148:	430b      	orrs	r3, r1
 800b14a:	40c2      	lsrs	r2, r0
 800b14c:	6163      	str	r3, [r4, #20]
 800b14e:	9201      	str	r2, [sp, #4]
 800b150:	9b01      	ldr	r3, [sp, #4]
 800b152:	61a3      	str	r3, [r4, #24]
 800b154:	2b00      	cmp	r3, #0
 800b156:	bf0c      	ite	eq
 800b158:	2201      	moveq	r2, #1
 800b15a:	2202      	movne	r2, #2
 800b15c:	6122      	str	r2, [r4, #16]
 800b15e:	b1a5      	cbz	r5, 800b18a <__d2b+0x92>
 800b160:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b164:	4405      	add	r5, r0
 800b166:	603d      	str	r5, [r7, #0]
 800b168:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b16c:	6030      	str	r0, [r6, #0]
 800b16e:	4620      	mov	r0, r4
 800b170:	b003      	add	sp, #12
 800b172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b176:	6161      	str	r1, [r4, #20]
 800b178:	e7ea      	b.n	800b150 <__d2b+0x58>
 800b17a:	a801      	add	r0, sp, #4
 800b17c:	f7ff fce9 	bl	800ab52 <__lo0bits>
 800b180:	9b01      	ldr	r3, [sp, #4]
 800b182:	6163      	str	r3, [r4, #20]
 800b184:	3020      	adds	r0, #32
 800b186:	2201      	movs	r2, #1
 800b188:	e7e8      	b.n	800b15c <__d2b+0x64>
 800b18a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b18e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b192:	6038      	str	r0, [r7, #0]
 800b194:	6918      	ldr	r0, [r3, #16]
 800b196:	f7ff fcbd 	bl	800ab14 <__hi0bits>
 800b19a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b19e:	e7e5      	b.n	800b16c <__d2b+0x74>
 800b1a0:	0800d299 	.word	0x0800d299
 800b1a4:	0800d2aa 	.word	0x0800d2aa

0800b1a8 <__ratio>:
 800b1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ac:	b085      	sub	sp, #20
 800b1ae:	e9cd 1000 	strd	r1, r0, [sp]
 800b1b2:	a902      	add	r1, sp, #8
 800b1b4:	f7ff ff56 	bl	800b064 <__b2d>
 800b1b8:	9800      	ldr	r0, [sp, #0]
 800b1ba:	a903      	add	r1, sp, #12
 800b1bc:	ec55 4b10 	vmov	r4, r5, d0
 800b1c0:	f7ff ff50 	bl	800b064 <__b2d>
 800b1c4:	9b01      	ldr	r3, [sp, #4]
 800b1c6:	6919      	ldr	r1, [r3, #16]
 800b1c8:	9b00      	ldr	r3, [sp, #0]
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	1ac9      	subs	r1, r1, r3
 800b1ce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b1d2:	1a9b      	subs	r3, r3, r2
 800b1d4:	ec5b ab10 	vmov	sl, fp, d0
 800b1d8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	bfce      	itee	gt
 800b1e0:	462a      	movgt	r2, r5
 800b1e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b1e6:	465a      	movle	r2, fp
 800b1e8:	462f      	mov	r7, r5
 800b1ea:	46d9      	mov	r9, fp
 800b1ec:	bfcc      	ite	gt
 800b1ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b1f2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b1f6:	464b      	mov	r3, r9
 800b1f8:	4652      	mov	r2, sl
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	4639      	mov	r1, r7
 800b1fe:	f7f5 fb4d 	bl	800089c <__aeabi_ddiv>
 800b202:	ec41 0b10 	vmov	d0, r0, r1
 800b206:	b005      	add	sp, #20
 800b208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b20c <__copybits>:
 800b20c:	3901      	subs	r1, #1
 800b20e:	b570      	push	{r4, r5, r6, lr}
 800b210:	1149      	asrs	r1, r1, #5
 800b212:	6914      	ldr	r4, [r2, #16]
 800b214:	3101      	adds	r1, #1
 800b216:	f102 0314 	add.w	r3, r2, #20
 800b21a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b21e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b222:	1f05      	subs	r5, r0, #4
 800b224:	42a3      	cmp	r3, r4
 800b226:	d30c      	bcc.n	800b242 <__copybits+0x36>
 800b228:	1aa3      	subs	r3, r4, r2
 800b22a:	3b11      	subs	r3, #17
 800b22c:	f023 0303 	bic.w	r3, r3, #3
 800b230:	3211      	adds	r2, #17
 800b232:	42a2      	cmp	r2, r4
 800b234:	bf88      	it	hi
 800b236:	2300      	movhi	r3, #0
 800b238:	4418      	add	r0, r3
 800b23a:	2300      	movs	r3, #0
 800b23c:	4288      	cmp	r0, r1
 800b23e:	d305      	bcc.n	800b24c <__copybits+0x40>
 800b240:	bd70      	pop	{r4, r5, r6, pc}
 800b242:	f853 6b04 	ldr.w	r6, [r3], #4
 800b246:	f845 6f04 	str.w	r6, [r5, #4]!
 800b24a:	e7eb      	b.n	800b224 <__copybits+0x18>
 800b24c:	f840 3b04 	str.w	r3, [r0], #4
 800b250:	e7f4      	b.n	800b23c <__copybits+0x30>

0800b252 <__any_on>:
 800b252:	f100 0214 	add.w	r2, r0, #20
 800b256:	6900      	ldr	r0, [r0, #16]
 800b258:	114b      	asrs	r3, r1, #5
 800b25a:	4298      	cmp	r0, r3
 800b25c:	b510      	push	{r4, lr}
 800b25e:	db11      	blt.n	800b284 <__any_on+0x32>
 800b260:	dd0a      	ble.n	800b278 <__any_on+0x26>
 800b262:	f011 011f 	ands.w	r1, r1, #31
 800b266:	d007      	beq.n	800b278 <__any_on+0x26>
 800b268:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b26c:	fa24 f001 	lsr.w	r0, r4, r1
 800b270:	fa00 f101 	lsl.w	r1, r0, r1
 800b274:	428c      	cmp	r4, r1
 800b276:	d10b      	bne.n	800b290 <__any_on+0x3e>
 800b278:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d803      	bhi.n	800b288 <__any_on+0x36>
 800b280:	2000      	movs	r0, #0
 800b282:	bd10      	pop	{r4, pc}
 800b284:	4603      	mov	r3, r0
 800b286:	e7f7      	b.n	800b278 <__any_on+0x26>
 800b288:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b28c:	2900      	cmp	r1, #0
 800b28e:	d0f5      	beq.n	800b27c <__any_on+0x2a>
 800b290:	2001      	movs	r0, #1
 800b292:	e7f6      	b.n	800b282 <__any_on+0x30>

0800b294 <sulp>:
 800b294:	b570      	push	{r4, r5, r6, lr}
 800b296:	4604      	mov	r4, r0
 800b298:	460d      	mov	r5, r1
 800b29a:	ec45 4b10 	vmov	d0, r4, r5
 800b29e:	4616      	mov	r6, r2
 800b2a0:	f7ff feba 	bl	800b018 <__ulp>
 800b2a4:	ec51 0b10 	vmov	r0, r1, d0
 800b2a8:	b17e      	cbz	r6, 800b2ca <sulp+0x36>
 800b2aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b2ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	dd09      	ble.n	800b2ca <sulp+0x36>
 800b2b6:	051b      	lsls	r3, r3, #20
 800b2b8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b2bc:	2400      	movs	r4, #0
 800b2be:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b2c2:	4622      	mov	r2, r4
 800b2c4:	462b      	mov	r3, r5
 800b2c6:	f7f5 f9bf 	bl	8000648 <__aeabi_dmul>
 800b2ca:	ec41 0b10 	vmov	d0, r0, r1
 800b2ce:	bd70      	pop	{r4, r5, r6, pc}

0800b2d0 <_strtod_l>:
 800b2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2d4:	b09f      	sub	sp, #124	@ 0x7c
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b2da:	2200      	movs	r2, #0
 800b2dc:	921a      	str	r2, [sp, #104]	@ 0x68
 800b2de:	9005      	str	r0, [sp, #20]
 800b2e0:	f04f 0a00 	mov.w	sl, #0
 800b2e4:	f04f 0b00 	mov.w	fp, #0
 800b2e8:	460a      	mov	r2, r1
 800b2ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800b2ec:	7811      	ldrb	r1, [r2, #0]
 800b2ee:	292b      	cmp	r1, #43	@ 0x2b
 800b2f0:	d04a      	beq.n	800b388 <_strtod_l+0xb8>
 800b2f2:	d838      	bhi.n	800b366 <_strtod_l+0x96>
 800b2f4:	290d      	cmp	r1, #13
 800b2f6:	d832      	bhi.n	800b35e <_strtod_l+0x8e>
 800b2f8:	2908      	cmp	r1, #8
 800b2fa:	d832      	bhi.n	800b362 <_strtod_l+0x92>
 800b2fc:	2900      	cmp	r1, #0
 800b2fe:	d03b      	beq.n	800b378 <_strtod_l+0xa8>
 800b300:	2200      	movs	r2, #0
 800b302:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b304:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b306:	782a      	ldrb	r2, [r5, #0]
 800b308:	2a30      	cmp	r2, #48	@ 0x30
 800b30a:	f040 80b3 	bne.w	800b474 <_strtod_l+0x1a4>
 800b30e:	786a      	ldrb	r2, [r5, #1]
 800b310:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b314:	2a58      	cmp	r2, #88	@ 0x58
 800b316:	d16e      	bne.n	800b3f6 <_strtod_l+0x126>
 800b318:	9302      	str	r3, [sp, #8]
 800b31a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b31c:	9301      	str	r3, [sp, #4]
 800b31e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	4a8e      	ldr	r2, [pc, #568]	@ (800b55c <_strtod_l+0x28c>)
 800b324:	9805      	ldr	r0, [sp, #20]
 800b326:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b328:	a919      	add	r1, sp, #100	@ 0x64
 800b32a:	f001 f91b 	bl	800c564 <__gethex>
 800b32e:	f010 060f 	ands.w	r6, r0, #15
 800b332:	4604      	mov	r4, r0
 800b334:	d005      	beq.n	800b342 <_strtod_l+0x72>
 800b336:	2e06      	cmp	r6, #6
 800b338:	d128      	bne.n	800b38c <_strtod_l+0xbc>
 800b33a:	3501      	adds	r5, #1
 800b33c:	2300      	movs	r3, #0
 800b33e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b340:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b342:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b344:	2b00      	cmp	r3, #0
 800b346:	f040 858e 	bne.w	800be66 <_strtod_l+0xb96>
 800b34a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b34c:	b1cb      	cbz	r3, 800b382 <_strtod_l+0xb2>
 800b34e:	4652      	mov	r2, sl
 800b350:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b354:	ec43 2b10 	vmov	d0, r2, r3
 800b358:	b01f      	add	sp, #124	@ 0x7c
 800b35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b35e:	2920      	cmp	r1, #32
 800b360:	d1ce      	bne.n	800b300 <_strtod_l+0x30>
 800b362:	3201      	adds	r2, #1
 800b364:	e7c1      	b.n	800b2ea <_strtod_l+0x1a>
 800b366:	292d      	cmp	r1, #45	@ 0x2d
 800b368:	d1ca      	bne.n	800b300 <_strtod_l+0x30>
 800b36a:	2101      	movs	r1, #1
 800b36c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b36e:	1c51      	adds	r1, r2, #1
 800b370:	9119      	str	r1, [sp, #100]	@ 0x64
 800b372:	7852      	ldrb	r2, [r2, #1]
 800b374:	2a00      	cmp	r2, #0
 800b376:	d1c5      	bne.n	800b304 <_strtod_l+0x34>
 800b378:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b37a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	f040 8570 	bne.w	800be62 <_strtod_l+0xb92>
 800b382:	4652      	mov	r2, sl
 800b384:	465b      	mov	r3, fp
 800b386:	e7e5      	b.n	800b354 <_strtod_l+0x84>
 800b388:	2100      	movs	r1, #0
 800b38a:	e7ef      	b.n	800b36c <_strtod_l+0x9c>
 800b38c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b38e:	b13a      	cbz	r2, 800b3a0 <_strtod_l+0xd0>
 800b390:	2135      	movs	r1, #53	@ 0x35
 800b392:	a81c      	add	r0, sp, #112	@ 0x70
 800b394:	f7ff ff3a 	bl	800b20c <__copybits>
 800b398:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b39a:	9805      	ldr	r0, [sp, #20]
 800b39c:	f7ff fb08 	bl	800a9b0 <_Bfree>
 800b3a0:	3e01      	subs	r6, #1
 800b3a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b3a4:	2e04      	cmp	r6, #4
 800b3a6:	d806      	bhi.n	800b3b6 <_strtod_l+0xe6>
 800b3a8:	e8df f006 	tbb	[pc, r6]
 800b3ac:	201d0314 	.word	0x201d0314
 800b3b0:	14          	.byte	0x14
 800b3b1:	00          	.byte	0x00
 800b3b2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b3b6:	05e1      	lsls	r1, r4, #23
 800b3b8:	bf48      	it	mi
 800b3ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b3be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b3c2:	0d1b      	lsrs	r3, r3, #20
 800b3c4:	051b      	lsls	r3, r3, #20
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d1bb      	bne.n	800b342 <_strtod_l+0x72>
 800b3ca:	f7fe fb21 	bl	8009a10 <__errno>
 800b3ce:	2322      	movs	r3, #34	@ 0x22
 800b3d0:	6003      	str	r3, [r0, #0]
 800b3d2:	e7b6      	b.n	800b342 <_strtod_l+0x72>
 800b3d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b3d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b3dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b3e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b3e4:	e7e7      	b.n	800b3b6 <_strtod_l+0xe6>
 800b3e6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b564 <_strtod_l+0x294>
 800b3ea:	e7e4      	b.n	800b3b6 <_strtod_l+0xe6>
 800b3ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b3f0:	f04f 3aff 	mov.w	sl, #4294967295
 800b3f4:	e7df      	b.n	800b3b6 <_strtod_l+0xe6>
 800b3f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3f8:	1c5a      	adds	r2, r3, #1
 800b3fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800b3fc:	785b      	ldrb	r3, [r3, #1]
 800b3fe:	2b30      	cmp	r3, #48	@ 0x30
 800b400:	d0f9      	beq.n	800b3f6 <_strtod_l+0x126>
 800b402:	2b00      	cmp	r3, #0
 800b404:	d09d      	beq.n	800b342 <_strtod_l+0x72>
 800b406:	2301      	movs	r3, #1
 800b408:	9309      	str	r3, [sp, #36]	@ 0x24
 800b40a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b40c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b40e:	2300      	movs	r3, #0
 800b410:	9308      	str	r3, [sp, #32]
 800b412:	930a      	str	r3, [sp, #40]	@ 0x28
 800b414:	461f      	mov	r7, r3
 800b416:	220a      	movs	r2, #10
 800b418:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b41a:	7805      	ldrb	r5, [r0, #0]
 800b41c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b420:	b2d9      	uxtb	r1, r3
 800b422:	2909      	cmp	r1, #9
 800b424:	d928      	bls.n	800b478 <_strtod_l+0x1a8>
 800b426:	494e      	ldr	r1, [pc, #312]	@ (800b560 <_strtod_l+0x290>)
 800b428:	2201      	movs	r2, #1
 800b42a:	f000 ffd5 	bl	800c3d8 <strncmp>
 800b42e:	2800      	cmp	r0, #0
 800b430:	d032      	beq.n	800b498 <_strtod_l+0x1c8>
 800b432:	2000      	movs	r0, #0
 800b434:	462a      	mov	r2, r5
 800b436:	4681      	mov	r9, r0
 800b438:	463d      	mov	r5, r7
 800b43a:	4603      	mov	r3, r0
 800b43c:	2a65      	cmp	r2, #101	@ 0x65
 800b43e:	d001      	beq.n	800b444 <_strtod_l+0x174>
 800b440:	2a45      	cmp	r2, #69	@ 0x45
 800b442:	d114      	bne.n	800b46e <_strtod_l+0x19e>
 800b444:	b91d      	cbnz	r5, 800b44e <_strtod_l+0x17e>
 800b446:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b448:	4302      	orrs	r2, r0
 800b44a:	d095      	beq.n	800b378 <_strtod_l+0xa8>
 800b44c:	2500      	movs	r5, #0
 800b44e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b450:	1c62      	adds	r2, r4, #1
 800b452:	9219      	str	r2, [sp, #100]	@ 0x64
 800b454:	7862      	ldrb	r2, [r4, #1]
 800b456:	2a2b      	cmp	r2, #43	@ 0x2b
 800b458:	d077      	beq.n	800b54a <_strtod_l+0x27a>
 800b45a:	2a2d      	cmp	r2, #45	@ 0x2d
 800b45c:	d07b      	beq.n	800b556 <_strtod_l+0x286>
 800b45e:	f04f 0c00 	mov.w	ip, #0
 800b462:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b466:	2909      	cmp	r1, #9
 800b468:	f240 8082 	bls.w	800b570 <_strtod_l+0x2a0>
 800b46c:	9419      	str	r4, [sp, #100]	@ 0x64
 800b46e:	f04f 0800 	mov.w	r8, #0
 800b472:	e0a2      	b.n	800b5ba <_strtod_l+0x2ea>
 800b474:	2300      	movs	r3, #0
 800b476:	e7c7      	b.n	800b408 <_strtod_l+0x138>
 800b478:	2f08      	cmp	r7, #8
 800b47a:	bfd5      	itete	le
 800b47c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b47e:	9908      	ldrgt	r1, [sp, #32]
 800b480:	fb02 3301 	mlale	r3, r2, r1, r3
 800b484:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b488:	f100 0001 	add.w	r0, r0, #1
 800b48c:	bfd4      	ite	le
 800b48e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b490:	9308      	strgt	r3, [sp, #32]
 800b492:	3701      	adds	r7, #1
 800b494:	9019      	str	r0, [sp, #100]	@ 0x64
 800b496:	e7bf      	b.n	800b418 <_strtod_l+0x148>
 800b498:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b49a:	1c5a      	adds	r2, r3, #1
 800b49c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b49e:	785a      	ldrb	r2, [r3, #1]
 800b4a0:	b37f      	cbz	r7, 800b502 <_strtod_l+0x232>
 800b4a2:	4681      	mov	r9, r0
 800b4a4:	463d      	mov	r5, r7
 800b4a6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b4aa:	2b09      	cmp	r3, #9
 800b4ac:	d912      	bls.n	800b4d4 <_strtod_l+0x204>
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e7c4      	b.n	800b43c <_strtod_l+0x16c>
 800b4b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4b4:	1c5a      	adds	r2, r3, #1
 800b4b6:	9219      	str	r2, [sp, #100]	@ 0x64
 800b4b8:	785a      	ldrb	r2, [r3, #1]
 800b4ba:	3001      	adds	r0, #1
 800b4bc:	2a30      	cmp	r2, #48	@ 0x30
 800b4be:	d0f8      	beq.n	800b4b2 <_strtod_l+0x1e2>
 800b4c0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b4c4:	2b08      	cmp	r3, #8
 800b4c6:	f200 84d3 	bhi.w	800be70 <_strtod_l+0xba0>
 800b4ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4cc:	930c      	str	r3, [sp, #48]	@ 0x30
 800b4ce:	4681      	mov	r9, r0
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	4605      	mov	r5, r0
 800b4d4:	3a30      	subs	r2, #48	@ 0x30
 800b4d6:	f100 0301 	add.w	r3, r0, #1
 800b4da:	d02a      	beq.n	800b532 <_strtod_l+0x262>
 800b4dc:	4499      	add	r9, r3
 800b4de:	eb00 0c05 	add.w	ip, r0, r5
 800b4e2:	462b      	mov	r3, r5
 800b4e4:	210a      	movs	r1, #10
 800b4e6:	4563      	cmp	r3, ip
 800b4e8:	d10d      	bne.n	800b506 <_strtod_l+0x236>
 800b4ea:	1c69      	adds	r1, r5, #1
 800b4ec:	4401      	add	r1, r0
 800b4ee:	4428      	add	r0, r5
 800b4f0:	2808      	cmp	r0, #8
 800b4f2:	dc16      	bgt.n	800b522 <_strtod_l+0x252>
 800b4f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b4f6:	230a      	movs	r3, #10
 800b4f8:	fb03 2300 	mla	r3, r3, r0, r2
 800b4fc:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4fe:	2300      	movs	r3, #0
 800b500:	e018      	b.n	800b534 <_strtod_l+0x264>
 800b502:	4638      	mov	r0, r7
 800b504:	e7da      	b.n	800b4bc <_strtod_l+0x1ec>
 800b506:	2b08      	cmp	r3, #8
 800b508:	f103 0301 	add.w	r3, r3, #1
 800b50c:	dc03      	bgt.n	800b516 <_strtod_l+0x246>
 800b50e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b510:	434e      	muls	r6, r1
 800b512:	960a      	str	r6, [sp, #40]	@ 0x28
 800b514:	e7e7      	b.n	800b4e6 <_strtod_l+0x216>
 800b516:	2b10      	cmp	r3, #16
 800b518:	bfde      	ittt	le
 800b51a:	9e08      	ldrle	r6, [sp, #32]
 800b51c:	434e      	mulle	r6, r1
 800b51e:	9608      	strle	r6, [sp, #32]
 800b520:	e7e1      	b.n	800b4e6 <_strtod_l+0x216>
 800b522:	280f      	cmp	r0, #15
 800b524:	dceb      	bgt.n	800b4fe <_strtod_l+0x22e>
 800b526:	9808      	ldr	r0, [sp, #32]
 800b528:	230a      	movs	r3, #10
 800b52a:	fb03 2300 	mla	r3, r3, r0, r2
 800b52e:	9308      	str	r3, [sp, #32]
 800b530:	e7e5      	b.n	800b4fe <_strtod_l+0x22e>
 800b532:	4629      	mov	r1, r5
 800b534:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b536:	1c50      	adds	r0, r2, #1
 800b538:	9019      	str	r0, [sp, #100]	@ 0x64
 800b53a:	7852      	ldrb	r2, [r2, #1]
 800b53c:	4618      	mov	r0, r3
 800b53e:	460d      	mov	r5, r1
 800b540:	e7b1      	b.n	800b4a6 <_strtod_l+0x1d6>
 800b542:	f04f 0900 	mov.w	r9, #0
 800b546:	2301      	movs	r3, #1
 800b548:	e77d      	b.n	800b446 <_strtod_l+0x176>
 800b54a:	f04f 0c00 	mov.w	ip, #0
 800b54e:	1ca2      	adds	r2, r4, #2
 800b550:	9219      	str	r2, [sp, #100]	@ 0x64
 800b552:	78a2      	ldrb	r2, [r4, #2]
 800b554:	e785      	b.n	800b462 <_strtod_l+0x192>
 800b556:	f04f 0c01 	mov.w	ip, #1
 800b55a:	e7f8      	b.n	800b54e <_strtod_l+0x27e>
 800b55c:	0800d418 	.word	0x0800d418
 800b560:	0800d400 	.word	0x0800d400
 800b564:	7ff00000 	.word	0x7ff00000
 800b568:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b56a:	1c51      	adds	r1, r2, #1
 800b56c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b56e:	7852      	ldrb	r2, [r2, #1]
 800b570:	2a30      	cmp	r2, #48	@ 0x30
 800b572:	d0f9      	beq.n	800b568 <_strtod_l+0x298>
 800b574:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b578:	2908      	cmp	r1, #8
 800b57a:	f63f af78 	bhi.w	800b46e <_strtod_l+0x19e>
 800b57e:	3a30      	subs	r2, #48	@ 0x30
 800b580:	920e      	str	r2, [sp, #56]	@ 0x38
 800b582:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b584:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b586:	f04f 080a 	mov.w	r8, #10
 800b58a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b58c:	1c56      	adds	r6, r2, #1
 800b58e:	9619      	str	r6, [sp, #100]	@ 0x64
 800b590:	7852      	ldrb	r2, [r2, #1]
 800b592:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b596:	f1be 0f09 	cmp.w	lr, #9
 800b59a:	d939      	bls.n	800b610 <_strtod_l+0x340>
 800b59c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b59e:	1a76      	subs	r6, r6, r1
 800b5a0:	2e08      	cmp	r6, #8
 800b5a2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b5a6:	dc03      	bgt.n	800b5b0 <_strtod_l+0x2e0>
 800b5a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b5aa:	4588      	cmp	r8, r1
 800b5ac:	bfa8      	it	ge
 800b5ae:	4688      	movge	r8, r1
 800b5b0:	f1bc 0f00 	cmp.w	ip, #0
 800b5b4:	d001      	beq.n	800b5ba <_strtod_l+0x2ea>
 800b5b6:	f1c8 0800 	rsb	r8, r8, #0
 800b5ba:	2d00      	cmp	r5, #0
 800b5bc:	d14e      	bne.n	800b65c <_strtod_l+0x38c>
 800b5be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b5c0:	4308      	orrs	r0, r1
 800b5c2:	f47f aebe 	bne.w	800b342 <_strtod_l+0x72>
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	f47f aed6 	bne.w	800b378 <_strtod_l+0xa8>
 800b5cc:	2a69      	cmp	r2, #105	@ 0x69
 800b5ce:	d028      	beq.n	800b622 <_strtod_l+0x352>
 800b5d0:	dc25      	bgt.n	800b61e <_strtod_l+0x34e>
 800b5d2:	2a49      	cmp	r2, #73	@ 0x49
 800b5d4:	d025      	beq.n	800b622 <_strtod_l+0x352>
 800b5d6:	2a4e      	cmp	r2, #78	@ 0x4e
 800b5d8:	f47f aece 	bne.w	800b378 <_strtod_l+0xa8>
 800b5dc:	499b      	ldr	r1, [pc, #620]	@ (800b84c <_strtod_l+0x57c>)
 800b5de:	a819      	add	r0, sp, #100	@ 0x64
 800b5e0:	f001 f9e2 	bl	800c9a8 <__match>
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	f43f aec7 	beq.w	800b378 <_strtod_l+0xa8>
 800b5ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	2b28      	cmp	r3, #40	@ 0x28
 800b5f0:	d12e      	bne.n	800b650 <_strtod_l+0x380>
 800b5f2:	4997      	ldr	r1, [pc, #604]	@ (800b850 <_strtod_l+0x580>)
 800b5f4:	aa1c      	add	r2, sp, #112	@ 0x70
 800b5f6:	a819      	add	r0, sp, #100	@ 0x64
 800b5f8:	f001 f9ea 	bl	800c9d0 <__hexnan>
 800b5fc:	2805      	cmp	r0, #5
 800b5fe:	d127      	bne.n	800b650 <_strtod_l+0x380>
 800b600:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b602:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b606:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b60a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b60e:	e698      	b.n	800b342 <_strtod_l+0x72>
 800b610:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b612:	fb08 2101 	mla	r1, r8, r1, r2
 800b616:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b61a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b61c:	e7b5      	b.n	800b58a <_strtod_l+0x2ba>
 800b61e:	2a6e      	cmp	r2, #110	@ 0x6e
 800b620:	e7da      	b.n	800b5d8 <_strtod_l+0x308>
 800b622:	498c      	ldr	r1, [pc, #560]	@ (800b854 <_strtod_l+0x584>)
 800b624:	a819      	add	r0, sp, #100	@ 0x64
 800b626:	f001 f9bf 	bl	800c9a8 <__match>
 800b62a:	2800      	cmp	r0, #0
 800b62c:	f43f aea4 	beq.w	800b378 <_strtod_l+0xa8>
 800b630:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b632:	4989      	ldr	r1, [pc, #548]	@ (800b858 <_strtod_l+0x588>)
 800b634:	3b01      	subs	r3, #1
 800b636:	a819      	add	r0, sp, #100	@ 0x64
 800b638:	9319      	str	r3, [sp, #100]	@ 0x64
 800b63a:	f001 f9b5 	bl	800c9a8 <__match>
 800b63e:	b910      	cbnz	r0, 800b646 <_strtod_l+0x376>
 800b640:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b642:	3301      	adds	r3, #1
 800b644:	9319      	str	r3, [sp, #100]	@ 0x64
 800b646:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b868 <_strtod_l+0x598>
 800b64a:	f04f 0a00 	mov.w	sl, #0
 800b64e:	e678      	b.n	800b342 <_strtod_l+0x72>
 800b650:	4882      	ldr	r0, [pc, #520]	@ (800b85c <_strtod_l+0x58c>)
 800b652:	f000 fee5 	bl	800c420 <nan>
 800b656:	ec5b ab10 	vmov	sl, fp, d0
 800b65a:	e672      	b.n	800b342 <_strtod_l+0x72>
 800b65c:	eba8 0309 	sub.w	r3, r8, r9
 800b660:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b662:	9309      	str	r3, [sp, #36]	@ 0x24
 800b664:	2f00      	cmp	r7, #0
 800b666:	bf08      	it	eq
 800b668:	462f      	moveq	r7, r5
 800b66a:	2d10      	cmp	r5, #16
 800b66c:	462c      	mov	r4, r5
 800b66e:	bfa8      	it	ge
 800b670:	2410      	movge	r4, #16
 800b672:	f7f4 ff6f 	bl	8000554 <__aeabi_ui2d>
 800b676:	2d09      	cmp	r5, #9
 800b678:	4682      	mov	sl, r0
 800b67a:	468b      	mov	fp, r1
 800b67c:	dc13      	bgt.n	800b6a6 <_strtod_l+0x3d6>
 800b67e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b680:	2b00      	cmp	r3, #0
 800b682:	f43f ae5e 	beq.w	800b342 <_strtod_l+0x72>
 800b686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b688:	dd78      	ble.n	800b77c <_strtod_l+0x4ac>
 800b68a:	2b16      	cmp	r3, #22
 800b68c:	dc5f      	bgt.n	800b74e <_strtod_l+0x47e>
 800b68e:	4974      	ldr	r1, [pc, #464]	@ (800b860 <_strtod_l+0x590>)
 800b690:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b694:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b698:	4652      	mov	r2, sl
 800b69a:	465b      	mov	r3, fp
 800b69c:	f7f4 ffd4 	bl	8000648 <__aeabi_dmul>
 800b6a0:	4682      	mov	sl, r0
 800b6a2:	468b      	mov	fp, r1
 800b6a4:	e64d      	b.n	800b342 <_strtod_l+0x72>
 800b6a6:	4b6e      	ldr	r3, [pc, #440]	@ (800b860 <_strtod_l+0x590>)
 800b6a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b6ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b6b0:	f7f4 ffca 	bl	8000648 <__aeabi_dmul>
 800b6b4:	4682      	mov	sl, r0
 800b6b6:	9808      	ldr	r0, [sp, #32]
 800b6b8:	468b      	mov	fp, r1
 800b6ba:	f7f4 ff4b 	bl	8000554 <__aeabi_ui2d>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	4650      	mov	r0, sl
 800b6c4:	4659      	mov	r1, fp
 800b6c6:	f7f4 fe09 	bl	80002dc <__adddf3>
 800b6ca:	2d0f      	cmp	r5, #15
 800b6cc:	4682      	mov	sl, r0
 800b6ce:	468b      	mov	fp, r1
 800b6d0:	ddd5      	ble.n	800b67e <_strtod_l+0x3ae>
 800b6d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6d4:	1b2c      	subs	r4, r5, r4
 800b6d6:	441c      	add	r4, r3
 800b6d8:	2c00      	cmp	r4, #0
 800b6da:	f340 8096 	ble.w	800b80a <_strtod_l+0x53a>
 800b6de:	f014 030f 	ands.w	r3, r4, #15
 800b6e2:	d00a      	beq.n	800b6fa <_strtod_l+0x42a>
 800b6e4:	495e      	ldr	r1, [pc, #376]	@ (800b860 <_strtod_l+0x590>)
 800b6e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b6ea:	4652      	mov	r2, sl
 800b6ec:	465b      	mov	r3, fp
 800b6ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6f2:	f7f4 ffa9 	bl	8000648 <__aeabi_dmul>
 800b6f6:	4682      	mov	sl, r0
 800b6f8:	468b      	mov	fp, r1
 800b6fa:	f034 040f 	bics.w	r4, r4, #15
 800b6fe:	d073      	beq.n	800b7e8 <_strtod_l+0x518>
 800b700:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b704:	dd48      	ble.n	800b798 <_strtod_l+0x4c8>
 800b706:	2400      	movs	r4, #0
 800b708:	46a0      	mov	r8, r4
 800b70a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b70c:	46a1      	mov	r9, r4
 800b70e:	9a05      	ldr	r2, [sp, #20]
 800b710:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b868 <_strtod_l+0x598>
 800b714:	2322      	movs	r3, #34	@ 0x22
 800b716:	6013      	str	r3, [r2, #0]
 800b718:	f04f 0a00 	mov.w	sl, #0
 800b71c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b71e:	2b00      	cmp	r3, #0
 800b720:	f43f ae0f 	beq.w	800b342 <_strtod_l+0x72>
 800b724:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b726:	9805      	ldr	r0, [sp, #20]
 800b728:	f7ff f942 	bl	800a9b0 <_Bfree>
 800b72c:	9805      	ldr	r0, [sp, #20]
 800b72e:	4649      	mov	r1, r9
 800b730:	f7ff f93e 	bl	800a9b0 <_Bfree>
 800b734:	9805      	ldr	r0, [sp, #20]
 800b736:	4641      	mov	r1, r8
 800b738:	f7ff f93a 	bl	800a9b0 <_Bfree>
 800b73c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b73e:	9805      	ldr	r0, [sp, #20]
 800b740:	f7ff f936 	bl	800a9b0 <_Bfree>
 800b744:	9805      	ldr	r0, [sp, #20]
 800b746:	4621      	mov	r1, r4
 800b748:	f7ff f932 	bl	800a9b0 <_Bfree>
 800b74c:	e5f9      	b.n	800b342 <_strtod_l+0x72>
 800b74e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b750:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b754:	4293      	cmp	r3, r2
 800b756:	dbbc      	blt.n	800b6d2 <_strtod_l+0x402>
 800b758:	4c41      	ldr	r4, [pc, #260]	@ (800b860 <_strtod_l+0x590>)
 800b75a:	f1c5 050f 	rsb	r5, r5, #15
 800b75e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b762:	4652      	mov	r2, sl
 800b764:	465b      	mov	r3, fp
 800b766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b76a:	f7f4 ff6d 	bl	8000648 <__aeabi_dmul>
 800b76e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b770:	1b5d      	subs	r5, r3, r5
 800b772:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b776:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b77a:	e78f      	b.n	800b69c <_strtod_l+0x3cc>
 800b77c:	3316      	adds	r3, #22
 800b77e:	dba8      	blt.n	800b6d2 <_strtod_l+0x402>
 800b780:	4b37      	ldr	r3, [pc, #220]	@ (800b860 <_strtod_l+0x590>)
 800b782:	eba9 0808 	sub.w	r8, r9, r8
 800b786:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b78a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b78e:	4650      	mov	r0, sl
 800b790:	4659      	mov	r1, fp
 800b792:	f7f5 f883 	bl	800089c <__aeabi_ddiv>
 800b796:	e783      	b.n	800b6a0 <_strtod_l+0x3d0>
 800b798:	4b32      	ldr	r3, [pc, #200]	@ (800b864 <_strtod_l+0x594>)
 800b79a:	9308      	str	r3, [sp, #32]
 800b79c:	2300      	movs	r3, #0
 800b79e:	1124      	asrs	r4, r4, #4
 800b7a0:	4650      	mov	r0, sl
 800b7a2:	4659      	mov	r1, fp
 800b7a4:	461e      	mov	r6, r3
 800b7a6:	2c01      	cmp	r4, #1
 800b7a8:	dc21      	bgt.n	800b7ee <_strtod_l+0x51e>
 800b7aa:	b10b      	cbz	r3, 800b7b0 <_strtod_l+0x4e0>
 800b7ac:	4682      	mov	sl, r0
 800b7ae:	468b      	mov	fp, r1
 800b7b0:	492c      	ldr	r1, [pc, #176]	@ (800b864 <_strtod_l+0x594>)
 800b7b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b7b6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b7ba:	4652      	mov	r2, sl
 800b7bc:	465b      	mov	r3, fp
 800b7be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7c2:	f7f4 ff41 	bl	8000648 <__aeabi_dmul>
 800b7c6:	4b28      	ldr	r3, [pc, #160]	@ (800b868 <_strtod_l+0x598>)
 800b7c8:	460a      	mov	r2, r1
 800b7ca:	400b      	ands	r3, r1
 800b7cc:	4927      	ldr	r1, [pc, #156]	@ (800b86c <_strtod_l+0x59c>)
 800b7ce:	428b      	cmp	r3, r1
 800b7d0:	4682      	mov	sl, r0
 800b7d2:	d898      	bhi.n	800b706 <_strtod_l+0x436>
 800b7d4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b7d8:	428b      	cmp	r3, r1
 800b7da:	bf86      	itte	hi
 800b7dc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b870 <_strtod_l+0x5a0>
 800b7e0:	f04f 3aff 	movhi.w	sl, #4294967295
 800b7e4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	9308      	str	r3, [sp, #32]
 800b7ec:	e07a      	b.n	800b8e4 <_strtod_l+0x614>
 800b7ee:	07e2      	lsls	r2, r4, #31
 800b7f0:	d505      	bpl.n	800b7fe <_strtod_l+0x52e>
 800b7f2:	9b08      	ldr	r3, [sp, #32]
 800b7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f8:	f7f4 ff26 	bl	8000648 <__aeabi_dmul>
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	9a08      	ldr	r2, [sp, #32]
 800b800:	3208      	adds	r2, #8
 800b802:	3601      	adds	r6, #1
 800b804:	1064      	asrs	r4, r4, #1
 800b806:	9208      	str	r2, [sp, #32]
 800b808:	e7cd      	b.n	800b7a6 <_strtod_l+0x4d6>
 800b80a:	d0ed      	beq.n	800b7e8 <_strtod_l+0x518>
 800b80c:	4264      	negs	r4, r4
 800b80e:	f014 020f 	ands.w	r2, r4, #15
 800b812:	d00a      	beq.n	800b82a <_strtod_l+0x55a>
 800b814:	4b12      	ldr	r3, [pc, #72]	@ (800b860 <_strtod_l+0x590>)
 800b816:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b81a:	4650      	mov	r0, sl
 800b81c:	4659      	mov	r1, fp
 800b81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b822:	f7f5 f83b 	bl	800089c <__aeabi_ddiv>
 800b826:	4682      	mov	sl, r0
 800b828:	468b      	mov	fp, r1
 800b82a:	1124      	asrs	r4, r4, #4
 800b82c:	d0dc      	beq.n	800b7e8 <_strtod_l+0x518>
 800b82e:	2c1f      	cmp	r4, #31
 800b830:	dd20      	ble.n	800b874 <_strtod_l+0x5a4>
 800b832:	2400      	movs	r4, #0
 800b834:	46a0      	mov	r8, r4
 800b836:	940a      	str	r4, [sp, #40]	@ 0x28
 800b838:	46a1      	mov	r9, r4
 800b83a:	9a05      	ldr	r2, [sp, #20]
 800b83c:	2322      	movs	r3, #34	@ 0x22
 800b83e:	f04f 0a00 	mov.w	sl, #0
 800b842:	f04f 0b00 	mov.w	fp, #0
 800b846:	6013      	str	r3, [r2, #0]
 800b848:	e768      	b.n	800b71c <_strtod_l+0x44c>
 800b84a:	bf00      	nop
 800b84c:	0800d1f1 	.word	0x0800d1f1
 800b850:	0800d404 	.word	0x0800d404
 800b854:	0800d1e9 	.word	0x0800d1e9
 800b858:	0800d220 	.word	0x0800d220
 800b85c:	0800d5ad 	.word	0x0800d5ad
 800b860:	0800d338 	.word	0x0800d338
 800b864:	0800d310 	.word	0x0800d310
 800b868:	7ff00000 	.word	0x7ff00000
 800b86c:	7ca00000 	.word	0x7ca00000
 800b870:	7fefffff 	.word	0x7fefffff
 800b874:	f014 0310 	ands.w	r3, r4, #16
 800b878:	bf18      	it	ne
 800b87a:	236a      	movne	r3, #106	@ 0x6a
 800b87c:	4ea9      	ldr	r6, [pc, #676]	@ (800bb24 <_strtod_l+0x854>)
 800b87e:	9308      	str	r3, [sp, #32]
 800b880:	4650      	mov	r0, sl
 800b882:	4659      	mov	r1, fp
 800b884:	2300      	movs	r3, #0
 800b886:	07e2      	lsls	r2, r4, #31
 800b888:	d504      	bpl.n	800b894 <_strtod_l+0x5c4>
 800b88a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b88e:	f7f4 fedb 	bl	8000648 <__aeabi_dmul>
 800b892:	2301      	movs	r3, #1
 800b894:	1064      	asrs	r4, r4, #1
 800b896:	f106 0608 	add.w	r6, r6, #8
 800b89a:	d1f4      	bne.n	800b886 <_strtod_l+0x5b6>
 800b89c:	b10b      	cbz	r3, 800b8a2 <_strtod_l+0x5d2>
 800b89e:	4682      	mov	sl, r0
 800b8a0:	468b      	mov	fp, r1
 800b8a2:	9b08      	ldr	r3, [sp, #32]
 800b8a4:	b1b3      	cbz	r3, 800b8d4 <_strtod_l+0x604>
 800b8a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b8aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	4659      	mov	r1, fp
 800b8b2:	dd0f      	ble.n	800b8d4 <_strtod_l+0x604>
 800b8b4:	2b1f      	cmp	r3, #31
 800b8b6:	dd55      	ble.n	800b964 <_strtod_l+0x694>
 800b8b8:	2b34      	cmp	r3, #52	@ 0x34
 800b8ba:	bfde      	ittt	le
 800b8bc:	f04f 33ff 	movle.w	r3, #4294967295
 800b8c0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b8c4:	4093      	lslle	r3, r2
 800b8c6:	f04f 0a00 	mov.w	sl, #0
 800b8ca:	bfcc      	ite	gt
 800b8cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b8d0:	ea03 0b01 	andle.w	fp, r3, r1
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	4650      	mov	r0, sl
 800b8da:	4659      	mov	r1, fp
 800b8dc:	f7f5 f91c 	bl	8000b18 <__aeabi_dcmpeq>
 800b8e0:	2800      	cmp	r0, #0
 800b8e2:	d1a6      	bne.n	800b832 <_strtod_l+0x562>
 800b8e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8e6:	9300      	str	r3, [sp, #0]
 800b8e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b8ea:	9805      	ldr	r0, [sp, #20]
 800b8ec:	462b      	mov	r3, r5
 800b8ee:	463a      	mov	r2, r7
 800b8f0:	f7ff f8c6 	bl	800aa80 <__s2b>
 800b8f4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	f43f af05 	beq.w	800b706 <_strtod_l+0x436>
 800b8fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8fe:	2a00      	cmp	r2, #0
 800b900:	eba9 0308 	sub.w	r3, r9, r8
 800b904:	bfa8      	it	ge
 800b906:	2300      	movge	r3, #0
 800b908:	9312      	str	r3, [sp, #72]	@ 0x48
 800b90a:	2400      	movs	r4, #0
 800b90c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b910:	9316      	str	r3, [sp, #88]	@ 0x58
 800b912:	46a0      	mov	r8, r4
 800b914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b916:	9805      	ldr	r0, [sp, #20]
 800b918:	6859      	ldr	r1, [r3, #4]
 800b91a:	f7ff f809 	bl	800a930 <_Balloc>
 800b91e:	4681      	mov	r9, r0
 800b920:	2800      	cmp	r0, #0
 800b922:	f43f aef4 	beq.w	800b70e <_strtod_l+0x43e>
 800b926:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b928:	691a      	ldr	r2, [r3, #16]
 800b92a:	3202      	adds	r2, #2
 800b92c:	f103 010c 	add.w	r1, r3, #12
 800b930:	0092      	lsls	r2, r2, #2
 800b932:	300c      	adds	r0, #12
 800b934:	f7fe f899 	bl	8009a6a <memcpy>
 800b938:	ec4b ab10 	vmov	d0, sl, fp
 800b93c:	9805      	ldr	r0, [sp, #20]
 800b93e:	aa1c      	add	r2, sp, #112	@ 0x70
 800b940:	a91b      	add	r1, sp, #108	@ 0x6c
 800b942:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b946:	f7ff fbd7 	bl	800b0f8 <__d2b>
 800b94a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b94c:	2800      	cmp	r0, #0
 800b94e:	f43f aede 	beq.w	800b70e <_strtod_l+0x43e>
 800b952:	9805      	ldr	r0, [sp, #20]
 800b954:	2101      	movs	r1, #1
 800b956:	f7ff f929 	bl	800abac <__i2b>
 800b95a:	4680      	mov	r8, r0
 800b95c:	b948      	cbnz	r0, 800b972 <_strtod_l+0x6a2>
 800b95e:	f04f 0800 	mov.w	r8, #0
 800b962:	e6d4      	b.n	800b70e <_strtod_l+0x43e>
 800b964:	f04f 32ff 	mov.w	r2, #4294967295
 800b968:	fa02 f303 	lsl.w	r3, r2, r3
 800b96c:	ea03 0a0a 	and.w	sl, r3, sl
 800b970:	e7b0      	b.n	800b8d4 <_strtod_l+0x604>
 800b972:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b974:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b976:	2d00      	cmp	r5, #0
 800b978:	bfab      	itete	ge
 800b97a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b97c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b97e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b980:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b982:	bfac      	ite	ge
 800b984:	18ef      	addge	r7, r5, r3
 800b986:	1b5e      	sublt	r6, r3, r5
 800b988:	9b08      	ldr	r3, [sp, #32]
 800b98a:	1aed      	subs	r5, r5, r3
 800b98c:	4415      	add	r5, r2
 800b98e:	4b66      	ldr	r3, [pc, #408]	@ (800bb28 <_strtod_l+0x858>)
 800b990:	3d01      	subs	r5, #1
 800b992:	429d      	cmp	r5, r3
 800b994:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b998:	da50      	bge.n	800ba3c <_strtod_l+0x76c>
 800b99a:	1b5b      	subs	r3, r3, r5
 800b99c:	2b1f      	cmp	r3, #31
 800b99e:	eba2 0203 	sub.w	r2, r2, r3
 800b9a2:	f04f 0101 	mov.w	r1, #1
 800b9a6:	dc3d      	bgt.n	800ba24 <_strtod_l+0x754>
 800b9a8:	fa01 f303 	lsl.w	r3, r1, r3
 800b9ac:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b9b2:	18bd      	adds	r5, r7, r2
 800b9b4:	9b08      	ldr	r3, [sp, #32]
 800b9b6:	42af      	cmp	r7, r5
 800b9b8:	4416      	add	r6, r2
 800b9ba:	441e      	add	r6, r3
 800b9bc:	463b      	mov	r3, r7
 800b9be:	bfa8      	it	ge
 800b9c0:	462b      	movge	r3, r5
 800b9c2:	42b3      	cmp	r3, r6
 800b9c4:	bfa8      	it	ge
 800b9c6:	4633      	movge	r3, r6
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	bfc2      	ittt	gt
 800b9cc:	1aed      	subgt	r5, r5, r3
 800b9ce:	1af6      	subgt	r6, r6, r3
 800b9d0:	1aff      	subgt	r7, r7, r3
 800b9d2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	dd16      	ble.n	800ba06 <_strtod_l+0x736>
 800b9d8:	4641      	mov	r1, r8
 800b9da:	9805      	ldr	r0, [sp, #20]
 800b9dc:	461a      	mov	r2, r3
 800b9de:	f7ff f9a5 	bl	800ad2c <__pow5mult>
 800b9e2:	4680      	mov	r8, r0
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	d0ba      	beq.n	800b95e <_strtod_l+0x68e>
 800b9e8:	4601      	mov	r1, r0
 800b9ea:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b9ec:	9805      	ldr	r0, [sp, #20]
 800b9ee:	f7ff f8f3 	bl	800abd8 <__multiply>
 800b9f2:	900e      	str	r0, [sp, #56]	@ 0x38
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	f43f ae8a 	beq.w	800b70e <_strtod_l+0x43e>
 800b9fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b9fc:	9805      	ldr	r0, [sp, #20]
 800b9fe:	f7fe ffd7 	bl	800a9b0 <_Bfree>
 800ba02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba04:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba06:	2d00      	cmp	r5, #0
 800ba08:	dc1d      	bgt.n	800ba46 <_strtod_l+0x776>
 800ba0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	dd23      	ble.n	800ba58 <_strtod_l+0x788>
 800ba10:	4649      	mov	r1, r9
 800ba12:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ba14:	9805      	ldr	r0, [sp, #20]
 800ba16:	f7ff f989 	bl	800ad2c <__pow5mult>
 800ba1a:	4681      	mov	r9, r0
 800ba1c:	b9e0      	cbnz	r0, 800ba58 <_strtod_l+0x788>
 800ba1e:	f04f 0900 	mov.w	r9, #0
 800ba22:	e674      	b.n	800b70e <_strtod_l+0x43e>
 800ba24:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ba28:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ba2c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ba30:	35e2      	adds	r5, #226	@ 0xe2
 800ba32:	fa01 f305 	lsl.w	r3, r1, r5
 800ba36:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba38:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ba3a:	e7ba      	b.n	800b9b2 <_strtod_l+0x6e2>
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba40:	2301      	movs	r3, #1
 800ba42:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba44:	e7b5      	b.n	800b9b2 <_strtod_l+0x6e2>
 800ba46:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba48:	9805      	ldr	r0, [sp, #20]
 800ba4a:	462a      	mov	r2, r5
 800ba4c:	f7ff f9c8 	bl	800ade0 <__lshift>
 800ba50:	901a      	str	r0, [sp, #104]	@ 0x68
 800ba52:	2800      	cmp	r0, #0
 800ba54:	d1d9      	bne.n	800ba0a <_strtod_l+0x73a>
 800ba56:	e65a      	b.n	800b70e <_strtod_l+0x43e>
 800ba58:	2e00      	cmp	r6, #0
 800ba5a:	dd07      	ble.n	800ba6c <_strtod_l+0x79c>
 800ba5c:	4649      	mov	r1, r9
 800ba5e:	9805      	ldr	r0, [sp, #20]
 800ba60:	4632      	mov	r2, r6
 800ba62:	f7ff f9bd 	bl	800ade0 <__lshift>
 800ba66:	4681      	mov	r9, r0
 800ba68:	2800      	cmp	r0, #0
 800ba6a:	d0d8      	beq.n	800ba1e <_strtod_l+0x74e>
 800ba6c:	2f00      	cmp	r7, #0
 800ba6e:	dd08      	ble.n	800ba82 <_strtod_l+0x7b2>
 800ba70:	4641      	mov	r1, r8
 800ba72:	9805      	ldr	r0, [sp, #20]
 800ba74:	463a      	mov	r2, r7
 800ba76:	f7ff f9b3 	bl	800ade0 <__lshift>
 800ba7a:	4680      	mov	r8, r0
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	f43f ae46 	beq.w	800b70e <_strtod_l+0x43e>
 800ba82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba84:	9805      	ldr	r0, [sp, #20]
 800ba86:	464a      	mov	r2, r9
 800ba88:	f7ff fa32 	bl	800aef0 <__mdiff>
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	f43f ae3d 	beq.w	800b70e <_strtod_l+0x43e>
 800ba94:	68c3      	ldr	r3, [r0, #12]
 800ba96:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba98:	2300      	movs	r3, #0
 800ba9a:	60c3      	str	r3, [r0, #12]
 800ba9c:	4641      	mov	r1, r8
 800ba9e:	f7ff fa0b 	bl	800aeb8 <__mcmp>
 800baa2:	2800      	cmp	r0, #0
 800baa4:	da46      	bge.n	800bb34 <_strtod_l+0x864>
 800baa6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800baa8:	ea53 030a 	orrs.w	r3, r3, sl
 800baac:	d16c      	bne.n	800bb88 <_strtod_l+0x8b8>
 800baae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d168      	bne.n	800bb88 <_strtod_l+0x8b8>
 800bab6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800baba:	0d1b      	lsrs	r3, r3, #20
 800babc:	051b      	lsls	r3, r3, #20
 800babe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bac2:	d961      	bls.n	800bb88 <_strtod_l+0x8b8>
 800bac4:	6963      	ldr	r3, [r4, #20]
 800bac6:	b913      	cbnz	r3, 800bace <_strtod_l+0x7fe>
 800bac8:	6923      	ldr	r3, [r4, #16]
 800baca:	2b01      	cmp	r3, #1
 800bacc:	dd5c      	ble.n	800bb88 <_strtod_l+0x8b8>
 800bace:	4621      	mov	r1, r4
 800bad0:	2201      	movs	r2, #1
 800bad2:	9805      	ldr	r0, [sp, #20]
 800bad4:	f7ff f984 	bl	800ade0 <__lshift>
 800bad8:	4641      	mov	r1, r8
 800bada:	4604      	mov	r4, r0
 800badc:	f7ff f9ec 	bl	800aeb8 <__mcmp>
 800bae0:	2800      	cmp	r0, #0
 800bae2:	dd51      	ble.n	800bb88 <_strtod_l+0x8b8>
 800bae4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bae8:	9a08      	ldr	r2, [sp, #32]
 800baea:	0d1b      	lsrs	r3, r3, #20
 800baec:	051b      	lsls	r3, r3, #20
 800baee:	2a00      	cmp	r2, #0
 800baf0:	d06b      	beq.n	800bbca <_strtod_l+0x8fa>
 800baf2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800baf6:	d868      	bhi.n	800bbca <_strtod_l+0x8fa>
 800baf8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bafc:	f67f ae9d 	bls.w	800b83a <_strtod_l+0x56a>
 800bb00:	4b0a      	ldr	r3, [pc, #40]	@ (800bb2c <_strtod_l+0x85c>)
 800bb02:	4650      	mov	r0, sl
 800bb04:	4659      	mov	r1, fp
 800bb06:	2200      	movs	r2, #0
 800bb08:	f7f4 fd9e 	bl	8000648 <__aeabi_dmul>
 800bb0c:	4b08      	ldr	r3, [pc, #32]	@ (800bb30 <_strtod_l+0x860>)
 800bb0e:	400b      	ands	r3, r1
 800bb10:	4682      	mov	sl, r0
 800bb12:	468b      	mov	fp, r1
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	f47f ae05 	bne.w	800b724 <_strtod_l+0x454>
 800bb1a:	9a05      	ldr	r2, [sp, #20]
 800bb1c:	2322      	movs	r3, #34	@ 0x22
 800bb1e:	6013      	str	r3, [r2, #0]
 800bb20:	e600      	b.n	800b724 <_strtod_l+0x454>
 800bb22:	bf00      	nop
 800bb24:	0800d430 	.word	0x0800d430
 800bb28:	fffffc02 	.word	0xfffffc02
 800bb2c:	39500000 	.word	0x39500000
 800bb30:	7ff00000 	.word	0x7ff00000
 800bb34:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bb38:	d165      	bne.n	800bc06 <_strtod_l+0x936>
 800bb3a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bb3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb40:	b35a      	cbz	r2, 800bb9a <_strtod_l+0x8ca>
 800bb42:	4a9f      	ldr	r2, [pc, #636]	@ (800bdc0 <_strtod_l+0xaf0>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d12b      	bne.n	800bba0 <_strtod_l+0x8d0>
 800bb48:	9b08      	ldr	r3, [sp, #32]
 800bb4a:	4651      	mov	r1, sl
 800bb4c:	b303      	cbz	r3, 800bb90 <_strtod_l+0x8c0>
 800bb4e:	4b9d      	ldr	r3, [pc, #628]	@ (800bdc4 <_strtod_l+0xaf4>)
 800bb50:	465a      	mov	r2, fp
 800bb52:	4013      	ands	r3, r2
 800bb54:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bb58:	f04f 32ff 	mov.w	r2, #4294967295
 800bb5c:	d81b      	bhi.n	800bb96 <_strtod_l+0x8c6>
 800bb5e:	0d1b      	lsrs	r3, r3, #20
 800bb60:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bb64:	fa02 f303 	lsl.w	r3, r2, r3
 800bb68:	4299      	cmp	r1, r3
 800bb6a:	d119      	bne.n	800bba0 <_strtod_l+0x8d0>
 800bb6c:	4b96      	ldr	r3, [pc, #600]	@ (800bdc8 <_strtod_l+0xaf8>)
 800bb6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d102      	bne.n	800bb7a <_strtod_l+0x8aa>
 800bb74:	3101      	adds	r1, #1
 800bb76:	f43f adca 	beq.w	800b70e <_strtod_l+0x43e>
 800bb7a:	4b92      	ldr	r3, [pc, #584]	@ (800bdc4 <_strtod_l+0xaf4>)
 800bb7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb7e:	401a      	ands	r2, r3
 800bb80:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bb84:	f04f 0a00 	mov.w	sl, #0
 800bb88:	9b08      	ldr	r3, [sp, #32]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d1b8      	bne.n	800bb00 <_strtod_l+0x830>
 800bb8e:	e5c9      	b.n	800b724 <_strtod_l+0x454>
 800bb90:	f04f 33ff 	mov.w	r3, #4294967295
 800bb94:	e7e8      	b.n	800bb68 <_strtod_l+0x898>
 800bb96:	4613      	mov	r3, r2
 800bb98:	e7e6      	b.n	800bb68 <_strtod_l+0x898>
 800bb9a:	ea53 030a 	orrs.w	r3, r3, sl
 800bb9e:	d0a1      	beq.n	800bae4 <_strtod_l+0x814>
 800bba0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bba2:	b1db      	cbz	r3, 800bbdc <_strtod_l+0x90c>
 800bba4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bba6:	4213      	tst	r3, r2
 800bba8:	d0ee      	beq.n	800bb88 <_strtod_l+0x8b8>
 800bbaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbac:	9a08      	ldr	r2, [sp, #32]
 800bbae:	4650      	mov	r0, sl
 800bbb0:	4659      	mov	r1, fp
 800bbb2:	b1bb      	cbz	r3, 800bbe4 <_strtod_l+0x914>
 800bbb4:	f7ff fb6e 	bl	800b294 <sulp>
 800bbb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbbc:	ec53 2b10 	vmov	r2, r3, d0
 800bbc0:	f7f4 fb8c 	bl	80002dc <__adddf3>
 800bbc4:	4682      	mov	sl, r0
 800bbc6:	468b      	mov	fp, r1
 800bbc8:	e7de      	b.n	800bb88 <_strtod_l+0x8b8>
 800bbca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bbce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bbd2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bbd6:	f04f 3aff 	mov.w	sl, #4294967295
 800bbda:	e7d5      	b.n	800bb88 <_strtod_l+0x8b8>
 800bbdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bbde:	ea13 0f0a 	tst.w	r3, sl
 800bbe2:	e7e1      	b.n	800bba8 <_strtod_l+0x8d8>
 800bbe4:	f7ff fb56 	bl	800b294 <sulp>
 800bbe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbec:	ec53 2b10 	vmov	r2, r3, d0
 800bbf0:	f7f4 fb72 	bl	80002d8 <__aeabi_dsub>
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	4682      	mov	sl, r0
 800bbfa:	468b      	mov	fp, r1
 800bbfc:	f7f4 ff8c 	bl	8000b18 <__aeabi_dcmpeq>
 800bc00:	2800      	cmp	r0, #0
 800bc02:	d0c1      	beq.n	800bb88 <_strtod_l+0x8b8>
 800bc04:	e619      	b.n	800b83a <_strtod_l+0x56a>
 800bc06:	4641      	mov	r1, r8
 800bc08:	4620      	mov	r0, r4
 800bc0a:	f7ff facd 	bl	800b1a8 <__ratio>
 800bc0e:	ec57 6b10 	vmov	r6, r7, d0
 800bc12:	2200      	movs	r2, #0
 800bc14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bc18:	4630      	mov	r0, r6
 800bc1a:	4639      	mov	r1, r7
 800bc1c:	f7f4 ff90 	bl	8000b40 <__aeabi_dcmple>
 800bc20:	2800      	cmp	r0, #0
 800bc22:	d06f      	beq.n	800bd04 <_strtod_l+0xa34>
 800bc24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d17a      	bne.n	800bd20 <_strtod_l+0xa50>
 800bc2a:	f1ba 0f00 	cmp.w	sl, #0
 800bc2e:	d158      	bne.n	800bce2 <_strtod_l+0xa12>
 800bc30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d15a      	bne.n	800bcf0 <_strtod_l+0xa20>
 800bc3a:	4b64      	ldr	r3, [pc, #400]	@ (800bdcc <_strtod_l+0xafc>)
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	4630      	mov	r0, r6
 800bc40:	4639      	mov	r1, r7
 800bc42:	f7f4 ff73 	bl	8000b2c <__aeabi_dcmplt>
 800bc46:	2800      	cmp	r0, #0
 800bc48:	d159      	bne.n	800bcfe <_strtod_l+0xa2e>
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	4639      	mov	r1, r7
 800bc4e:	4b60      	ldr	r3, [pc, #384]	@ (800bdd0 <_strtod_l+0xb00>)
 800bc50:	2200      	movs	r2, #0
 800bc52:	f7f4 fcf9 	bl	8000648 <__aeabi_dmul>
 800bc56:	4606      	mov	r6, r0
 800bc58:	460f      	mov	r7, r1
 800bc5a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bc5e:	9606      	str	r6, [sp, #24]
 800bc60:	9307      	str	r3, [sp, #28]
 800bc62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc66:	4d57      	ldr	r5, [pc, #348]	@ (800bdc4 <_strtod_l+0xaf4>)
 800bc68:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bc6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc6e:	401d      	ands	r5, r3
 800bc70:	4b58      	ldr	r3, [pc, #352]	@ (800bdd4 <_strtod_l+0xb04>)
 800bc72:	429d      	cmp	r5, r3
 800bc74:	f040 80b2 	bne.w	800bddc <_strtod_l+0xb0c>
 800bc78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc7a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bc7e:	ec4b ab10 	vmov	d0, sl, fp
 800bc82:	f7ff f9c9 	bl	800b018 <__ulp>
 800bc86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc8a:	ec51 0b10 	vmov	r0, r1, d0
 800bc8e:	f7f4 fcdb 	bl	8000648 <__aeabi_dmul>
 800bc92:	4652      	mov	r2, sl
 800bc94:	465b      	mov	r3, fp
 800bc96:	f7f4 fb21 	bl	80002dc <__adddf3>
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	4949      	ldr	r1, [pc, #292]	@ (800bdc4 <_strtod_l+0xaf4>)
 800bc9e:	4a4e      	ldr	r2, [pc, #312]	@ (800bdd8 <_strtod_l+0xb08>)
 800bca0:	4019      	ands	r1, r3
 800bca2:	4291      	cmp	r1, r2
 800bca4:	4682      	mov	sl, r0
 800bca6:	d942      	bls.n	800bd2e <_strtod_l+0xa5e>
 800bca8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bcaa:	4b47      	ldr	r3, [pc, #284]	@ (800bdc8 <_strtod_l+0xaf8>)
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d103      	bne.n	800bcb8 <_strtod_l+0x9e8>
 800bcb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	f43f ad2b 	beq.w	800b70e <_strtod_l+0x43e>
 800bcb8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bdc8 <_strtod_l+0xaf8>
 800bcbc:	f04f 3aff 	mov.w	sl, #4294967295
 800bcc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bcc2:	9805      	ldr	r0, [sp, #20]
 800bcc4:	f7fe fe74 	bl	800a9b0 <_Bfree>
 800bcc8:	9805      	ldr	r0, [sp, #20]
 800bcca:	4649      	mov	r1, r9
 800bccc:	f7fe fe70 	bl	800a9b0 <_Bfree>
 800bcd0:	9805      	ldr	r0, [sp, #20]
 800bcd2:	4641      	mov	r1, r8
 800bcd4:	f7fe fe6c 	bl	800a9b0 <_Bfree>
 800bcd8:	9805      	ldr	r0, [sp, #20]
 800bcda:	4621      	mov	r1, r4
 800bcdc:	f7fe fe68 	bl	800a9b0 <_Bfree>
 800bce0:	e618      	b.n	800b914 <_strtod_l+0x644>
 800bce2:	f1ba 0f01 	cmp.w	sl, #1
 800bce6:	d103      	bne.n	800bcf0 <_strtod_l+0xa20>
 800bce8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f43f ada5 	beq.w	800b83a <_strtod_l+0x56a>
 800bcf0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bda0 <_strtod_l+0xad0>
 800bcf4:	4f35      	ldr	r7, [pc, #212]	@ (800bdcc <_strtod_l+0xafc>)
 800bcf6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bcfa:	2600      	movs	r6, #0
 800bcfc:	e7b1      	b.n	800bc62 <_strtod_l+0x992>
 800bcfe:	4f34      	ldr	r7, [pc, #208]	@ (800bdd0 <_strtod_l+0xb00>)
 800bd00:	2600      	movs	r6, #0
 800bd02:	e7aa      	b.n	800bc5a <_strtod_l+0x98a>
 800bd04:	4b32      	ldr	r3, [pc, #200]	@ (800bdd0 <_strtod_l+0xb00>)
 800bd06:	4630      	mov	r0, r6
 800bd08:	4639      	mov	r1, r7
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f7f4 fc9c 	bl	8000648 <__aeabi_dmul>
 800bd10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd12:	4606      	mov	r6, r0
 800bd14:	460f      	mov	r7, r1
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d09f      	beq.n	800bc5a <_strtod_l+0x98a>
 800bd1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bd1e:	e7a0      	b.n	800bc62 <_strtod_l+0x992>
 800bd20:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bda8 <_strtod_l+0xad8>
 800bd24:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bd28:	ec57 6b17 	vmov	r6, r7, d7
 800bd2c:	e799      	b.n	800bc62 <_strtod_l+0x992>
 800bd2e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bd32:	9b08      	ldr	r3, [sp, #32]
 800bd34:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d1c1      	bne.n	800bcc0 <_strtod_l+0x9f0>
 800bd3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd40:	0d1b      	lsrs	r3, r3, #20
 800bd42:	051b      	lsls	r3, r3, #20
 800bd44:	429d      	cmp	r5, r3
 800bd46:	d1bb      	bne.n	800bcc0 <_strtod_l+0x9f0>
 800bd48:	4630      	mov	r0, r6
 800bd4a:	4639      	mov	r1, r7
 800bd4c:	f7f4 ffdc 	bl	8000d08 <__aeabi_d2lz>
 800bd50:	f7f4 fc4c 	bl	80005ec <__aeabi_l2d>
 800bd54:	4602      	mov	r2, r0
 800bd56:	460b      	mov	r3, r1
 800bd58:	4630      	mov	r0, r6
 800bd5a:	4639      	mov	r1, r7
 800bd5c:	f7f4 fabc 	bl	80002d8 <__aeabi_dsub>
 800bd60:	460b      	mov	r3, r1
 800bd62:	4602      	mov	r2, r0
 800bd64:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bd68:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bd6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd6e:	ea46 060a 	orr.w	r6, r6, sl
 800bd72:	431e      	orrs	r6, r3
 800bd74:	d06f      	beq.n	800be56 <_strtod_l+0xb86>
 800bd76:	a30e      	add	r3, pc, #56	@ (adr r3, 800bdb0 <_strtod_l+0xae0>)
 800bd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7c:	f7f4 fed6 	bl	8000b2c <__aeabi_dcmplt>
 800bd80:	2800      	cmp	r0, #0
 800bd82:	f47f accf 	bne.w	800b724 <_strtod_l+0x454>
 800bd86:	a30c      	add	r3, pc, #48	@ (adr r3, 800bdb8 <_strtod_l+0xae8>)
 800bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd90:	f7f4 feea 	bl	8000b68 <__aeabi_dcmpgt>
 800bd94:	2800      	cmp	r0, #0
 800bd96:	d093      	beq.n	800bcc0 <_strtod_l+0x9f0>
 800bd98:	e4c4      	b.n	800b724 <_strtod_l+0x454>
 800bd9a:	bf00      	nop
 800bd9c:	f3af 8000 	nop.w
 800bda0:	00000000 	.word	0x00000000
 800bda4:	bff00000 	.word	0xbff00000
 800bda8:	00000000 	.word	0x00000000
 800bdac:	3ff00000 	.word	0x3ff00000
 800bdb0:	94a03595 	.word	0x94a03595
 800bdb4:	3fdfffff 	.word	0x3fdfffff
 800bdb8:	35afe535 	.word	0x35afe535
 800bdbc:	3fe00000 	.word	0x3fe00000
 800bdc0:	000fffff 	.word	0x000fffff
 800bdc4:	7ff00000 	.word	0x7ff00000
 800bdc8:	7fefffff 	.word	0x7fefffff
 800bdcc:	3ff00000 	.word	0x3ff00000
 800bdd0:	3fe00000 	.word	0x3fe00000
 800bdd4:	7fe00000 	.word	0x7fe00000
 800bdd8:	7c9fffff 	.word	0x7c9fffff
 800bddc:	9b08      	ldr	r3, [sp, #32]
 800bdde:	b323      	cbz	r3, 800be2a <_strtod_l+0xb5a>
 800bde0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bde4:	d821      	bhi.n	800be2a <_strtod_l+0xb5a>
 800bde6:	a328      	add	r3, pc, #160	@ (adr r3, 800be88 <_strtod_l+0xbb8>)
 800bde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdec:	4630      	mov	r0, r6
 800bdee:	4639      	mov	r1, r7
 800bdf0:	f7f4 fea6 	bl	8000b40 <__aeabi_dcmple>
 800bdf4:	b1a0      	cbz	r0, 800be20 <_strtod_l+0xb50>
 800bdf6:	4639      	mov	r1, r7
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	f7f4 fefd 	bl	8000bf8 <__aeabi_d2uiz>
 800bdfe:	2801      	cmp	r0, #1
 800be00:	bf38      	it	cc
 800be02:	2001      	movcc	r0, #1
 800be04:	f7f4 fba6 	bl	8000554 <__aeabi_ui2d>
 800be08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be0a:	4606      	mov	r6, r0
 800be0c:	460f      	mov	r7, r1
 800be0e:	b9fb      	cbnz	r3, 800be50 <_strtod_l+0xb80>
 800be10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800be14:	9014      	str	r0, [sp, #80]	@ 0x50
 800be16:	9315      	str	r3, [sp, #84]	@ 0x54
 800be18:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800be1c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800be20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be22:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800be26:	1b5b      	subs	r3, r3, r5
 800be28:	9311      	str	r3, [sp, #68]	@ 0x44
 800be2a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800be2e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800be32:	f7ff f8f1 	bl	800b018 <__ulp>
 800be36:	4650      	mov	r0, sl
 800be38:	ec53 2b10 	vmov	r2, r3, d0
 800be3c:	4659      	mov	r1, fp
 800be3e:	f7f4 fc03 	bl	8000648 <__aeabi_dmul>
 800be42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800be46:	f7f4 fa49 	bl	80002dc <__adddf3>
 800be4a:	4682      	mov	sl, r0
 800be4c:	468b      	mov	fp, r1
 800be4e:	e770      	b.n	800bd32 <_strtod_l+0xa62>
 800be50:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800be54:	e7e0      	b.n	800be18 <_strtod_l+0xb48>
 800be56:	a30e      	add	r3, pc, #56	@ (adr r3, 800be90 <_strtod_l+0xbc0>)
 800be58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5c:	f7f4 fe66 	bl	8000b2c <__aeabi_dcmplt>
 800be60:	e798      	b.n	800bd94 <_strtod_l+0xac4>
 800be62:	2300      	movs	r3, #0
 800be64:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be66:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800be68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be6a:	6013      	str	r3, [r2, #0]
 800be6c:	f7ff ba6d 	b.w	800b34a <_strtod_l+0x7a>
 800be70:	2a65      	cmp	r2, #101	@ 0x65
 800be72:	f43f ab66 	beq.w	800b542 <_strtod_l+0x272>
 800be76:	2a45      	cmp	r2, #69	@ 0x45
 800be78:	f43f ab63 	beq.w	800b542 <_strtod_l+0x272>
 800be7c:	2301      	movs	r3, #1
 800be7e:	f7ff bb9e 	b.w	800b5be <_strtod_l+0x2ee>
 800be82:	bf00      	nop
 800be84:	f3af 8000 	nop.w
 800be88:	ffc00000 	.word	0xffc00000
 800be8c:	41dfffff 	.word	0x41dfffff
 800be90:	94a03595 	.word	0x94a03595
 800be94:	3fcfffff 	.word	0x3fcfffff

0800be98 <_strtod_r>:
 800be98:	4b01      	ldr	r3, [pc, #4]	@ (800bea0 <_strtod_r+0x8>)
 800be9a:	f7ff ba19 	b.w	800b2d0 <_strtod_l>
 800be9e:	bf00      	nop
 800bea0:	20000064 	.word	0x20000064

0800bea4 <_strtol_l.constprop.0>:
 800bea4:	2b24      	cmp	r3, #36	@ 0x24
 800bea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beaa:	4686      	mov	lr, r0
 800beac:	4690      	mov	r8, r2
 800beae:	d801      	bhi.n	800beb4 <_strtol_l.constprop.0+0x10>
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d106      	bne.n	800bec2 <_strtol_l.constprop.0+0x1e>
 800beb4:	f7fd fdac 	bl	8009a10 <__errno>
 800beb8:	2316      	movs	r3, #22
 800beba:	6003      	str	r3, [r0, #0]
 800bebc:	2000      	movs	r0, #0
 800bebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bec2:	4834      	ldr	r0, [pc, #208]	@ (800bf94 <_strtol_l.constprop.0+0xf0>)
 800bec4:	460d      	mov	r5, r1
 800bec6:	462a      	mov	r2, r5
 800bec8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800becc:	5d06      	ldrb	r6, [r0, r4]
 800bece:	f016 0608 	ands.w	r6, r6, #8
 800bed2:	d1f8      	bne.n	800bec6 <_strtol_l.constprop.0+0x22>
 800bed4:	2c2d      	cmp	r4, #45	@ 0x2d
 800bed6:	d12d      	bne.n	800bf34 <_strtol_l.constprop.0+0x90>
 800bed8:	782c      	ldrb	r4, [r5, #0]
 800beda:	2601      	movs	r6, #1
 800bedc:	1c95      	adds	r5, r2, #2
 800bede:	f033 0210 	bics.w	r2, r3, #16
 800bee2:	d109      	bne.n	800bef8 <_strtol_l.constprop.0+0x54>
 800bee4:	2c30      	cmp	r4, #48	@ 0x30
 800bee6:	d12a      	bne.n	800bf3e <_strtol_l.constprop.0+0x9a>
 800bee8:	782a      	ldrb	r2, [r5, #0]
 800beea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800beee:	2a58      	cmp	r2, #88	@ 0x58
 800bef0:	d125      	bne.n	800bf3e <_strtol_l.constprop.0+0x9a>
 800bef2:	786c      	ldrb	r4, [r5, #1]
 800bef4:	2310      	movs	r3, #16
 800bef6:	3502      	adds	r5, #2
 800bef8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800befc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bf00:	2200      	movs	r2, #0
 800bf02:	fbbc f9f3 	udiv	r9, ip, r3
 800bf06:	4610      	mov	r0, r2
 800bf08:	fb03 ca19 	mls	sl, r3, r9, ip
 800bf0c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bf10:	2f09      	cmp	r7, #9
 800bf12:	d81b      	bhi.n	800bf4c <_strtol_l.constprop.0+0xa8>
 800bf14:	463c      	mov	r4, r7
 800bf16:	42a3      	cmp	r3, r4
 800bf18:	dd27      	ble.n	800bf6a <_strtol_l.constprop.0+0xc6>
 800bf1a:	1c57      	adds	r7, r2, #1
 800bf1c:	d007      	beq.n	800bf2e <_strtol_l.constprop.0+0x8a>
 800bf1e:	4581      	cmp	r9, r0
 800bf20:	d320      	bcc.n	800bf64 <_strtol_l.constprop.0+0xc0>
 800bf22:	d101      	bne.n	800bf28 <_strtol_l.constprop.0+0x84>
 800bf24:	45a2      	cmp	sl, r4
 800bf26:	db1d      	blt.n	800bf64 <_strtol_l.constprop.0+0xc0>
 800bf28:	fb00 4003 	mla	r0, r0, r3, r4
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf32:	e7eb      	b.n	800bf0c <_strtol_l.constprop.0+0x68>
 800bf34:	2c2b      	cmp	r4, #43	@ 0x2b
 800bf36:	bf04      	itt	eq
 800bf38:	782c      	ldrbeq	r4, [r5, #0]
 800bf3a:	1c95      	addeq	r5, r2, #2
 800bf3c:	e7cf      	b.n	800bede <_strtol_l.constprop.0+0x3a>
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d1da      	bne.n	800bef8 <_strtol_l.constprop.0+0x54>
 800bf42:	2c30      	cmp	r4, #48	@ 0x30
 800bf44:	bf0c      	ite	eq
 800bf46:	2308      	moveq	r3, #8
 800bf48:	230a      	movne	r3, #10
 800bf4a:	e7d5      	b.n	800bef8 <_strtol_l.constprop.0+0x54>
 800bf4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bf50:	2f19      	cmp	r7, #25
 800bf52:	d801      	bhi.n	800bf58 <_strtol_l.constprop.0+0xb4>
 800bf54:	3c37      	subs	r4, #55	@ 0x37
 800bf56:	e7de      	b.n	800bf16 <_strtol_l.constprop.0+0x72>
 800bf58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bf5c:	2f19      	cmp	r7, #25
 800bf5e:	d804      	bhi.n	800bf6a <_strtol_l.constprop.0+0xc6>
 800bf60:	3c57      	subs	r4, #87	@ 0x57
 800bf62:	e7d8      	b.n	800bf16 <_strtol_l.constprop.0+0x72>
 800bf64:	f04f 32ff 	mov.w	r2, #4294967295
 800bf68:	e7e1      	b.n	800bf2e <_strtol_l.constprop.0+0x8a>
 800bf6a:	1c53      	adds	r3, r2, #1
 800bf6c:	d108      	bne.n	800bf80 <_strtol_l.constprop.0+0xdc>
 800bf6e:	2322      	movs	r3, #34	@ 0x22
 800bf70:	f8ce 3000 	str.w	r3, [lr]
 800bf74:	4660      	mov	r0, ip
 800bf76:	f1b8 0f00 	cmp.w	r8, #0
 800bf7a:	d0a0      	beq.n	800bebe <_strtol_l.constprop.0+0x1a>
 800bf7c:	1e69      	subs	r1, r5, #1
 800bf7e:	e006      	b.n	800bf8e <_strtol_l.constprop.0+0xea>
 800bf80:	b106      	cbz	r6, 800bf84 <_strtol_l.constprop.0+0xe0>
 800bf82:	4240      	negs	r0, r0
 800bf84:	f1b8 0f00 	cmp.w	r8, #0
 800bf88:	d099      	beq.n	800bebe <_strtol_l.constprop.0+0x1a>
 800bf8a:	2a00      	cmp	r2, #0
 800bf8c:	d1f6      	bne.n	800bf7c <_strtol_l.constprop.0+0xd8>
 800bf8e:	f8c8 1000 	str.w	r1, [r8]
 800bf92:	e794      	b.n	800bebe <_strtol_l.constprop.0+0x1a>
 800bf94:	0800d459 	.word	0x0800d459

0800bf98 <_strtol_r>:
 800bf98:	f7ff bf84 	b.w	800bea4 <_strtol_l.constprop.0>

0800bf9c <__ssputs_r>:
 800bf9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfa0:	688e      	ldr	r6, [r1, #8]
 800bfa2:	461f      	mov	r7, r3
 800bfa4:	42be      	cmp	r6, r7
 800bfa6:	680b      	ldr	r3, [r1, #0]
 800bfa8:	4682      	mov	sl, r0
 800bfaa:	460c      	mov	r4, r1
 800bfac:	4690      	mov	r8, r2
 800bfae:	d82d      	bhi.n	800c00c <__ssputs_r+0x70>
 800bfb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bfb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bfb8:	d026      	beq.n	800c008 <__ssputs_r+0x6c>
 800bfba:	6965      	ldr	r5, [r4, #20]
 800bfbc:	6909      	ldr	r1, [r1, #16]
 800bfbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bfc2:	eba3 0901 	sub.w	r9, r3, r1
 800bfc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bfca:	1c7b      	adds	r3, r7, #1
 800bfcc:	444b      	add	r3, r9
 800bfce:	106d      	asrs	r5, r5, #1
 800bfd0:	429d      	cmp	r5, r3
 800bfd2:	bf38      	it	cc
 800bfd4:	461d      	movcc	r5, r3
 800bfd6:	0553      	lsls	r3, r2, #21
 800bfd8:	d527      	bpl.n	800c02a <__ssputs_r+0x8e>
 800bfda:	4629      	mov	r1, r5
 800bfdc:	f7fe fc1c 	bl	800a818 <_malloc_r>
 800bfe0:	4606      	mov	r6, r0
 800bfe2:	b360      	cbz	r0, 800c03e <__ssputs_r+0xa2>
 800bfe4:	6921      	ldr	r1, [r4, #16]
 800bfe6:	464a      	mov	r2, r9
 800bfe8:	f7fd fd3f 	bl	8009a6a <memcpy>
 800bfec:	89a3      	ldrh	r3, [r4, #12]
 800bfee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bff6:	81a3      	strh	r3, [r4, #12]
 800bff8:	6126      	str	r6, [r4, #16]
 800bffa:	6165      	str	r5, [r4, #20]
 800bffc:	444e      	add	r6, r9
 800bffe:	eba5 0509 	sub.w	r5, r5, r9
 800c002:	6026      	str	r6, [r4, #0]
 800c004:	60a5      	str	r5, [r4, #8]
 800c006:	463e      	mov	r6, r7
 800c008:	42be      	cmp	r6, r7
 800c00a:	d900      	bls.n	800c00e <__ssputs_r+0x72>
 800c00c:	463e      	mov	r6, r7
 800c00e:	6820      	ldr	r0, [r4, #0]
 800c010:	4632      	mov	r2, r6
 800c012:	4641      	mov	r1, r8
 800c014:	f000 f9c6 	bl	800c3a4 <memmove>
 800c018:	68a3      	ldr	r3, [r4, #8]
 800c01a:	1b9b      	subs	r3, r3, r6
 800c01c:	60a3      	str	r3, [r4, #8]
 800c01e:	6823      	ldr	r3, [r4, #0]
 800c020:	4433      	add	r3, r6
 800c022:	6023      	str	r3, [r4, #0]
 800c024:	2000      	movs	r0, #0
 800c026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c02a:	462a      	mov	r2, r5
 800c02c:	f000 fd7d 	bl	800cb2a <_realloc_r>
 800c030:	4606      	mov	r6, r0
 800c032:	2800      	cmp	r0, #0
 800c034:	d1e0      	bne.n	800bff8 <__ssputs_r+0x5c>
 800c036:	6921      	ldr	r1, [r4, #16]
 800c038:	4650      	mov	r0, sl
 800c03a:	f7fe fb79 	bl	800a730 <_free_r>
 800c03e:	230c      	movs	r3, #12
 800c040:	f8ca 3000 	str.w	r3, [sl]
 800c044:	89a3      	ldrh	r3, [r4, #12]
 800c046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c04a:	81a3      	strh	r3, [r4, #12]
 800c04c:	f04f 30ff 	mov.w	r0, #4294967295
 800c050:	e7e9      	b.n	800c026 <__ssputs_r+0x8a>
	...

0800c054 <_svfiprintf_r>:
 800c054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c058:	4698      	mov	r8, r3
 800c05a:	898b      	ldrh	r3, [r1, #12]
 800c05c:	061b      	lsls	r3, r3, #24
 800c05e:	b09d      	sub	sp, #116	@ 0x74
 800c060:	4607      	mov	r7, r0
 800c062:	460d      	mov	r5, r1
 800c064:	4614      	mov	r4, r2
 800c066:	d510      	bpl.n	800c08a <_svfiprintf_r+0x36>
 800c068:	690b      	ldr	r3, [r1, #16]
 800c06a:	b973      	cbnz	r3, 800c08a <_svfiprintf_r+0x36>
 800c06c:	2140      	movs	r1, #64	@ 0x40
 800c06e:	f7fe fbd3 	bl	800a818 <_malloc_r>
 800c072:	6028      	str	r0, [r5, #0]
 800c074:	6128      	str	r0, [r5, #16]
 800c076:	b930      	cbnz	r0, 800c086 <_svfiprintf_r+0x32>
 800c078:	230c      	movs	r3, #12
 800c07a:	603b      	str	r3, [r7, #0]
 800c07c:	f04f 30ff 	mov.w	r0, #4294967295
 800c080:	b01d      	add	sp, #116	@ 0x74
 800c082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c086:	2340      	movs	r3, #64	@ 0x40
 800c088:	616b      	str	r3, [r5, #20]
 800c08a:	2300      	movs	r3, #0
 800c08c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c08e:	2320      	movs	r3, #32
 800c090:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c094:	f8cd 800c 	str.w	r8, [sp, #12]
 800c098:	2330      	movs	r3, #48	@ 0x30
 800c09a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c238 <_svfiprintf_r+0x1e4>
 800c09e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c0a2:	f04f 0901 	mov.w	r9, #1
 800c0a6:	4623      	mov	r3, r4
 800c0a8:	469a      	mov	sl, r3
 800c0aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0ae:	b10a      	cbz	r2, 800c0b4 <_svfiprintf_r+0x60>
 800c0b0:	2a25      	cmp	r2, #37	@ 0x25
 800c0b2:	d1f9      	bne.n	800c0a8 <_svfiprintf_r+0x54>
 800c0b4:	ebba 0b04 	subs.w	fp, sl, r4
 800c0b8:	d00b      	beq.n	800c0d2 <_svfiprintf_r+0x7e>
 800c0ba:	465b      	mov	r3, fp
 800c0bc:	4622      	mov	r2, r4
 800c0be:	4629      	mov	r1, r5
 800c0c0:	4638      	mov	r0, r7
 800c0c2:	f7ff ff6b 	bl	800bf9c <__ssputs_r>
 800c0c6:	3001      	adds	r0, #1
 800c0c8:	f000 80a7 	beq.w	800c21a <_svfiprintf_r+0x1c6>
 800c0cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0ce:	445a      	add	r2, fp
 800c0d0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f000 809f 	beq.w	800c21a <_svfiprintf_r+0x1c6>
 800c0dc:	2300      	movs	r3, #0
 800c0de:	f04f 32ff 	mov.w	r2, #4294967295
 800c0e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0e6:	f10a 0a01 	add.w	sl, sl, #1
 800c0ea:	9304      	str	r3, [sp, #16]
 800c0ec:	9307      	str	r3, [sp, #28]
 800c0ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c0f2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0f4:	4654      	mov	r4, sl
 800c0f6:	2205      	movs	r2, #5
 800c0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0fc:	484e      	ldr	r0, [pc, #312]	@ (800c238 <_svfiprintf_r+0x1e4>)
 800c0fe:	f7f4 f88f 	bl	8000220 <memchr>
 800c102:	9a04      	ldr	r2, [sp, #16]
 800c104:	b9d8      	cbnz	r0, 800c13e <_svfiprintf_r+0xea>
 800c106:	06d0      	lsls	r0, r2, #27
 800c108:	bf44      	itt	mi
 800c10a:	2320      	movmi	r3, #32
 800c10c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c110:	0711      	lsls	r1, r2, #28
 800c112:	bf44      	itt	mi
 800c114:	232b      	movmi	r3, #43	@ 0x2b
 800c116:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c11a:	f89a 3000 	ldrb.w	r3, [sl]
 800c11e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c120:	d015      	beq.n	800c14e <_svfiprintf_r+0xfa>
 800c122:	9a07      	ldr	r2, [sp, #28]
 800c124:	4654      	mov	r4, sl
 800c126:	2000      	movs	r0, #0
 800c128:	f04f 0c0a 	mov.w	ip, #10
 800c12c:	4621      	mov	r1, r4
 800c12e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c132:	3b30      	subs	r3, #48	@ 0x30
 800c134:	2b09      	cmp	r3, #9
 800c136:	d94b      	bls.n	800c1d0 <_svfiprintf_r+0x17c>
 800c138:	b1b0      	cbz	r0, 800c168 <_svfiprintf_r+0x114>
 800c13a:	9207      	str	r2, [sp, #28]
 800c13c:	e014      	b.n	800c168 <_svfiprintf_r+0x114>
 800c13e:	eba0 0308 	sub.w	r3, r0, r8
 800c142:	fa09 f303 	lsl.w	r3, r9, r3
 800c146:	4313      	orrs	r3, r2
 800c148:	9304      	str	r3, [sp, #16]
 800c14a:	46a2      	mov	sl, r4
 800c14c:	e7d2      	b.n	800c0f4 <_svfiprintf_r+0xa0>
 800c14e:	9b03      	ldr	r3, [sp, #12]
 800c150:	1d19      	adds	r1, r3, #4
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	9103      	str	r1, [sp, #12]
 800c156:	2b00      	cmp	r3, #0
 800c158:	bfbb      	ittet	lt
 800c15a:	425b      	neglt	r3, r3
 800c15c:	f042 0202 	orrlt.w	r2, r2, #2
 800c160:	9307      	strge	r3, [sp, #28]
 800c162:	9307      	strlt	r3, [sp, #28]
 800c164:	bfb8      	it	lt
 800c166:	9204      	strlt	r2, [sp, #16]
 800c168:	7823      	ldrb	r3, [r4, #0]
 800c16a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c16c:	d10a      	bne.n	800c184 <_svfiprintf_r+0x130>
 800c16e:	7863      	ldrb	r3, [r4, #1]
 800c170:	2b2a      	cmp	r3, #42	@ 0x2a
 800c172:	d132      	bne.n	800c1da <_svfiprintf_r+0x186>
 800c174:	9b03      	ldr	r3, [sp, #12]
 800c176:	1d1a      	adds	r2, r3, #4
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	9203      	str	r2, [sp, #12]
 800c17c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c180:	3402      	adds	r4, #2
 800c182:	9305      	str	r3, [sp, #20]
 800c184:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c248 <_svfiprintf_r+0x1f4>
 800c188:	7821      	ldrb	r1, [r4, #0]
 800c18a:	2203      	movs	r2, #3
 800c18c:	4650      	mov	r0, sl
 800c18e:	f7f4 f847 	bl	8000220 <memchr>
 800c192:	b138      	cbz	r0, 800c1a4 <_svfiprintf_r+0x150>
 800c194:	9b04      	ldr	r3, [sp, #16]
 800c196:	eba0 000a 	sub.w	r0, r0, sl
 800c19a:	2240      	movs	r2, #64	@ 0x40
 800c19c:	4082      	lsls	r2, r0
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	3401      	adds	r4, #1
 800c1a2:	9304      	str	r3, [sp, #16]
 800c1a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1a8:	4824      	ldr	r0, [pc, #144]	@ (800c23c <_svfiprintf_r+0x1e8>)
 800c1aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c1ae:	2206      	movs	r2, #6
 800c1b0:	f7f4 f836 	bl	8000220 <memchr>
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	d036      	beq.n	800c226 <_svfiprintf_r+0x1d2>
 800c1b8:	4b21      	ldr	r3, [pc, #132]	@ (800c240 <_svfiprintf_r+0x1ec>)
 800c1ba:	bb1b      	cbnz	r3, 800c204 <_svfiprintf_r+0x1b0>
 800c1bc:	9b03      	ldr	r3, [sp, #12]
 800c1be:	3307      	adds	r3, #7
 800c1c0:	f023 0307 	bic.w	r3, r3, #7
 800c1c4:	3308      	adds	r3, #8
 800c1c6:	9303      	str	r3, [sp, #12]
 800c1c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1ca:	4433      	add	r3, r6
 800c1cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1ce:	e76a      	b.n	800c0a6 <_svfiprintf_r+0x52>
 800c1d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1d4:	460c      	mov	r4, r1
 800c1d6:	2001      	movs	r0, #1
 800c1d8:	e7a8      	b.n	800c12c <_svfiprintf_r+0xd8>
 800c1da:	2300      	movs	r3, #0
 800c1dc:	3401      	adds	r4, #1
 800c1de:	9305      	str	r3, [sp, #20]
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	f04f 0c0a 	mov.w	ip, #10
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1ec:	3a30      	subs	r2, #48	@ 0x30
 800c1ee:	2a09      	cmp	r2, #9
 800c1f0:	d903      	bls.n	800c1fa <_svfiprintf_r+0x1a6>
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d0c6      	beq.n	800c184 <_svfiprintf_r+0x130>
 800c1f6:	9105      	str	r1, [sp, #20]
 800c1f8:	e7c4      	b.n	800c184 <_svfiprintf_r+0x130>
 800c1fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1fe:	4604      	mov	r4, r0
 800c200:	2301      	movs	r3, #1
 800c202:	e7f0      	b.n	800c1e6 <_svfiprintf_r+0x192>
 800c204:	ab03      	add	r3, sp, #12
 800c206:	9300      	str	r3, [sp, #0]
 800c208:	462a      	mov	r2, r5
 800c20a:	4b0e      	ldr	r3, [pc, #56]	@ (800c244 <_svfiprintf_r+0x1f0>)
 800c20c:	a904      	add	r1, sp, #16
 800c20e:	4638      	mov	r0, r7
 800c210:	f7fc fcac 	bl	8008b6c <_printf_float>
 800c214:	1c42      	adds	r2, r0, #1
 800c216:	4606      	mov	r6, r0
 800c218:	d1d6      	bne.n	800c1c8 <_svfiprintf_r+0x174>
 800c21a:	89ab      	ldrh	r3, [r5, #12]
 800c21c:	065b      	lsls	r3, r3, #25
 800c21e:	f53f af2d 	bmi.w	800c07c <_svfiprintf_r+0x28>
 800c222:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c224:	e72c      	b.n	800c080 <_svfiprintf_r+0x2c>
 800c226:	ab03      	add	r3, sp, #12
 800c228:	9300      	str	r3, [sp, #0]
 800c22a:	462a      	mov	r2, r5
 800c22c:	4b05      	ldr	r3, [pc, #20]	@ (800c244 <_svfiprintf_r+0x1f0>)
 800c22e:	a904      	add	r1, sp, #16
 800c230:	4638      	mov	r0, r7
 800c232:	f7fc ff33 	bl	800909c <_printf_i>
 800c236:	e7ed      	b.n	800c214 <_svfiprintf_r+0x1c0>
 800c238:	0800d559 	.word	0x0800d559
 800c23c:	0800d563 	.word	0x0800d563
 800c240:	08008b6d 	.word	0x08008b6d
 800c244:	0800bf9d 	.word	0x0800bf9d
 800c248:	0800d55f 	.word	0x0800d55f

0800c24c <__sflush_r>:
 800c24c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c254:	0716      	lsls	r6, r2, #28
 800c256:	4605      	mov	r5, r0
 800c258:	460c      	mov	r4, r1
 800c25a:	d454      	bmi.n	800c306 <__sflush_r+0xba>
 800c25c:	684b      	ldr	r3, [r1, #4]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	dc02      	bgt.n	800c268 <__sflush_r+0x1c>
 800c262:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c264:	2b00      	cmp	r3, #0
 800c266:	dd48      	ble.n	800c2fa <__sflush_r+0xae>
 800c268:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c26a:	2e00      	cmp	r6, #0
 800c26c:	d045      	beq.n	800c2fa <__sflush_r+0xae>
 800c26e:	2300      	movs	r3, #0
 800c270:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c274:	682f      	ldr	r7, [r5, #0]
 800c276:	6a21      	ldr	r1, [r4, #32]
 800c278:	602b      	str	r3, [r5, #0]
 800c27a:	d030      	beq.n	800c2de <__sflush_r+0x92>
 800c27c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c27e:	89a3      	ldrh	r3, [r4, #12]
 800c280:	0759      	lsls	r1, r3, #29
 800c282:	d505      	bpl.n	800c290 <__sflush_r+0x44>
 800c284:	6863      	ldr	r3, [r4, #4]
 800c286:	1ad2      	subs	r2, r2, r3
 800c288:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c28a:	b10b      	cbz	r3, 800c290 <__sflush_r+0x44>
 800c28c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c28e:	1ad2      	subs	r2, r2, r3
 800c290:	2300      	movs	r3, #0
 800c292:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c294:	6a21      	ldr	r1, [r4, #32]
 800c296:	4628      	mov	r0, r5
 800c298:	47b0      	blx	r6
 800c29a:	1c43      	adds	r3, r0, #1
 800c29c:	89a3      	ldrh	r3, [r4, #12]
 800c29e:	d106      	bne.n	800c2ae <__sflush_r+0x62>
 800c2a0:	6829      	ldr	r1, [r5, #0]
 800c2a2:	291d      	cmp	r1, #29
 800c2a4:	d82b      	bhi.n	800c2fe <__sflush_r+0xb2>
 800c2a6:	4a2a      	ldr	r2, [pc, #168]	@ (800c350 <__sflush_r+0x104>)
 800c2a8:	410a      	asrs	r2, r1
 800c2aa:	07d6      	lsls	r6, r2, #31
 800c2ac:	d427      	bmi.n	800c2fe <__sflush_r+0xb2>
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	6062      	str	r2, [r4, #4]
 800c2b2:	04d9      	lsls	r1, r3, #19
 800c2b4:	6922      	ldr	r2, [r4, #16]
 800c2b6:	6022      	str	r2, [r4, #0]
 800c2b8:	d504      	bpl.n	800c2c4 <__sflush_r+0x78>
 800c2ba:	1c42      	adds	r2, r0, #1
 800c2bc:	d101      	bne.n	800c2c2 <__sflush_r+0x76>
 800c2be:	682b      	ldr	r3, [r5, #0]
 800c2c0:	b903      	cbnz	r3, 800c2c4 <__sflush_r+0x78>
 800c2c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c2c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2c6:	602f      	str	r7, [r5, #0]
 800c2c8:	b1b9      	cbz	r1, 800c2fa <__sflush_r+0xae>
 800c2ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2ce:	4299      	cmp	r1, r3
 800c2d0:	d002      	beq.n	800c2d8 <__sflush_r+0x8c>
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	f7fe fa2c 	bl	800a730 <_free_r>
 800c2d8:	2300      	movs	r3, #0
 800c2da:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2dc:	e00d      	b.n	800c2fa <__sflush_r+0xae>
 800c2de:	2301      	movs	r3, #1
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	47b0      	blx	r6
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	1c50      	adds	r0, r2, #1
 800c2e8:	d1c9      	bne.n	800c27e <__sflush_r+0x32>
 800c2ea:	682b      	ldr	r3, [r5, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d0c6      	beq.n	800c27e <__sflush_r+0x32>
 800c2f0:	2b1d      	cmp	r3, #29
 800c2f2:	d001      	beq.n	800c2f8 <__sflush_r+0xac>
 800c2f4:	2b16      	cmp	r3, #22
 800c2f6:	d11e      	bne.n	800c336 <__sflush_r+0xea>
 800c2f8:	602f      	str	r7, [r5, #0]
 800c2fa:	2000      	movs	r0, #0
 800c2fc:	e022      	b.n	800c344 <__sflush_r+0xf8>
 800c2fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c302:	b21b      	sxth	r3, r3
 800c304:	e01b      	b.n	800c33e <__sflush_r+0xf2>
 800c306:	690f      	ldr	r7, [r1, #16]
 800c308:	2f00      	cmp	r7, #0
 800c30a:	d0f6      	beq.n	800c2fa <__sflush_r+0xae>
 800c30c:	0793      	lsls	r3, r2, #30
 800c30e:	680e      	ldr	r6, [r1, #0]
 800c310:	bf08      	it	eq
 800c312:	694b      	ldreq	r3, [r1, #20]
 800c314:	600f      	str	r7, [r1, #0]
 800c316:	bf18      	it	ne
 800c318:	2300      	movne	r3, #0
 800c31a:	eba6 0807 	sub.w	r8, r6, r7
 800c31e:	608b      	str	r3, [r1, #8]
 800c320:	f1b8 0f00 	cmp.w	r8, #0
 800c324:	dde9      	ble.n	800c2fa <__sflush_r+0xae>
 800c326:	6a21      	ldr	r1, [r4, #32]
 800c328:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c32a:	4643      	mov	r3, r8
 800c32c:	463a      	mov	r2, r7
 800c32e:	4628      	mov	r0, r5
 800c330:	47b0      	blx	r6
 800c332:	2800      	cmp	r0, #0
 800c334:	dc08      	bgt.n	800c348 <__sflush_r+0xfc>
 800c336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c33a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c33e:	81a3      	strh	r3, [r4, #12]
 800c340:	f04f 30ff 	mov.w	r0, #4294967295
 800c344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c348:	4407      	add	r7, r0
 800c34a:	eba8 0800 	sub.w	r8, r8, r0
 800c34e:	e7e7      	b.n	800c320 <__sflush_r+0xd4>
 800c350:	dfbffffe 	.word	0xdfbffffe

0800c354 <_fflush_r>:
 800c354:	b538      	push	{r3, r4, r5, lr}
 800c356:	690b      	ldr	r3, [r1, #16]
 800c358:	4605      	mov	r5, r0
 800c35a:	460c      	mov	r4, r1
 800c35c:	b913      	cbnz	r3, 800c364 <_fflush_r+0x10>
 800c35e:	2500      	movs	r5, #0
 800c360:	4628      	mov	r0, r5
 800c362:	bd38      	pop	{r3, r4, r5, pc}
 800c364:	b118      	cbz	r0, 800c36e <_fflush_r+0x1a>
 800c366:	6a03      	ldr	r3, [r0, #32]
 800c368:	b90b      	cbnz	r3, 800c36e <_fflush_r+0x1a>
 800c36a:	f7fd fa57 	bl	800981c <__sinit>
 800c36e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d0f3      	beq.n	800c35e <_fflush_r+0xa>
 800c376:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c378:	07d0      	lsls	r0, r2, #31
 800c37a:	d404      	bmi.n	800c386 <_fflush_r+0x32>
 800c37c:	0599      	lsls	r1, r3, #22
 800c37e:	d402      	bmi.n	800c386 <_fflush_r+0x32>
 800c380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c382:	f7fd fb70 	bl	8009a66 <__retarget_lock_acquire_recursive>
 800c386:	4628      	mov	r0, r5
 800c388:	4621      	mov	r1, r4
 800c38a:	f7ff ff5f 	bl	800c24c <__sflush_r>
 800c38e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c390:	07da      	lsls	r2, r3, #31
 800c392:	4605      	mov	r5, r0
 800c394:	d4e4      	bmi.n	800c360 <_fflush_r+0xc>
 800c396:	89a3      	ldrh	r3, [r4, #12]
 800c398:	059b      	lsls	r3, r3, #22
 800c39a:	d4e1      	bmi.n	800c360 <_fflush_r+0xc>
 800c39c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c39e:	f7fd fb63 	bl	8009a68 <__retarget_lock_release_recursive>
 800c3a2:	e7dd      	b.n	800c360 <_fflush_r+0xc>

0800c3a4 <memmove>:
 800c3a4:	4288      	cmp	r0, r1
 800c3a6:	b510      	push	{r4, lr}
 800c3a8:	eb01 0402 	add.w	r4, r1, r2
 800c3ac:	d902      	bls.n	800c3b4 <memmove+0x10>
 800c3ae:	4284      	cmp	r4, r0
 800c3b0:	4623      	mov	r3, r4
 800c3b2:	d807      	bhi.n	800c3c4 <memmove+0x20>
 800c3b4:	1e43      	subs	r3, r0, #1
 800c3b6:	42a1      	cmp	r1, r4
 800c3b8:	d008      	beq.n	800c3cc <memmove+0x28>
 800c3ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3c2:	e7f8      	b.n	800c3b6 <memmove+0x12>
 800c3c4:	4402      	add	r2, r0
 800c3c6:	4601      	mov	r1, r0
 800c3c8:	428a      	cmp	r2, r1
 800c3ca:	d100      	bne.n	800c3ce <memmove+0x2a>
 800c3cc:	bd10      	pop	{r4, pc}
 800c3ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3d6:	e7f7      	b.n	800c3c8 <memmove+0x24>

0800c3d8 <strncmp>:
 800c3d8:	b510      	push	{r4, lr}
 800c3da:	b16a      	cbz	r2, 800c3f8 <strncmp+0x20>
 800c3dc:	3901      	subs	r1, #1
 800c3de:	1884      	adds	r4, r0, r2
 800c3e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d103      	bne.n	800c3f4 <strncmp+0x1c>
 800c3ec:	42a0      	cmp	r0, r4
 800c3ee:	d001      	beq.n	800c3f4 <strncmp+0x1c>
 800c3f0:	2a00      	cmp	r2, #0
 800c3f2:	d1f5      	bne.n	800c3e0 <strncmp+0x8>
 800c3f4:	1ad0      	subs	r0, r2, r3
 800c3f6:	bd10      	pop	{r4, pc}
 800c3f8:	4610      	mov	r0, r2
 800c3fa:	e7fc      	b.n	800c3f6 <strncmp+0x1e>

0800c3fc <_sbrk_r>:
 800c3fc:	b538      	push	{r3, r4, r5, lr}
 800c3fe:	4d06      	ldr	r5, [pc, #24]	@ (800c418 <_sbrk_r+0x1c>)
 800c400:	2300      	movs	r3, #0
 800c402:	4604      	mov	r4, r0
 800c404:	4608      	mov	r0, r1
 800c406:	602b      	str	r3, [r5, #0]
 800c408:	f7f6 fe8a 	bl	8003120 <_sbrk>
 800c40c:	1c43      	adds	r3, r0, #1
 800c40e:	d102      	bne.n	800c416 <_sbrk_r+0x1a>
 800c410:	682b      	ldr	r3, [r5, #0]
 800c412:	b103      	cbz	r3, 800c416 <_sbrk_r+0x1a>
 800c414:	6023      	str	r3, [r4, #0]
 800c416:	bd38      	pop	{r3, r4, r5, pc}
 800c418:	200008e4 	.word	0x200008e4
 800c41c:	00000000 	.word	0x00000000

0800c420 <nan>:
 800c420:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c428 <nan+0x8>
 800c424:	4770      	bx	lr
 800c426:	bf00      	nop
 800c428:	00000000 	.word	0x00000000
 800c42c:	7ff80000 	.word	0x7ff80000

0800c430 <__assert_func>:
 800c430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c432:	4614      	mov	r4, r2
 800c434:	461a      	mov	r2, r3
 800c436:	4b09      	ldr	r3, [pc, #36]	@ (800c45c <__assert_func+0x2c>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4605      	mov	r5, r0
 800c43c:	68d8      	ldr	r0, [r3, #12]
 800c43e:	b954      	cbnz	r4, 800c456 <__assert_func+0x26>
 800c440:	4b07      	ldr	r3, [pc, #28]	@ (800c460 <__assert_func+0x30>)
 800c442:	461c      	mov	r4, r3
 800c444:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c448:	9100      	str	r1, [sp, #0]
 800c44a:	462b      	mov	r3, r5
 800c44c:	4905      	ldr	r1, [pc, #20]	@ (800c464 <__assert_func+0x34>)
 800c44e:	f000 fba7 	bl	800cba0 <fiprintf>
 800c452:	f000 fbb7 	bl	800cbc4 <abort>
 800c456:	4b04      	ldr	r3, [pc, #16]	@ (800c468 <__assert_func+0x38>)
 800c458:	e7f4      	b.n	800c444 <__assert_func+0x14>
 800c45a:	bf00      	nop
 800c45c:	20000014 	.word	0x20000014
 800c460:	0800d5ad 	.word	0x0800d5ad
 800c464:	0800d57f 	.word	0x0800d57f
 800c468:	0800d572 	.word	0x0800d572

0800c46c <_calloc_r>:
 800c46c:	b570      	push	{r4, r5, r6, lr}
 800c46e:	fba1 5402 	umull	r5, r4, r1, r2
 800c472:	b93c      	cbnz	r4, 800c484 <_calloc_r+0x18>
 800c474:	4629      	mov	r1, r5
 800c476:	f7fe f9cf 	bl	800a818 <_malloc_r>
 800c47a:	4606      	mov	r6, r0
 800c47c:	b928      	cbnz	r0, 800c48a <_calloc_r+0x1e>
 800c47e:	2600      	movs	r6, #0
 800c480:	4630      	mov	r0, r6
 800c482:	bd70      	pop	{r4, r5, r6, pc}
 800c484:	220c      	movs	r2, #12
 800c486:	6002      	str	r2, [r0, #0]
 800c488:	e7f9      	b.n	800c47e <_calloc_r+0x12>
 800c48a:	462a      	mov	r2, r5
 800c48c:	4621      	mov	r1, r4
 800c48e:	f7fd fa5e 	bl	800994e <memset>
 800c492:	e7f5      	b.n	800c480 <_calloc_r+0x14>

0800c494 <rshift>:
 800c494:	6903      	ldr	r3, [r0, #16]
 800c496:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c49a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c49e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c4a2:	f100 0414 	add.w	r4, r0, #20
 800c4a6:	dd45      	ble.n	800c534 <rshift+0xa0>
 800c4a8:	f011 011f 	ands.w	r1, r1, #31
 800c4ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c4b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c4b4:	d10c      	bne.n	800c4d0 <rshift+0x3c>
 800c4b6:	f100 0710 	add.w	r7, r0, #16
 800c4ba:	4629      	mov	r1, r5
 800c4bc:	42b1      	cmp	r1, r6
 800c4be:	d334      	bcc.n	800c52a <rshift+0x96>
 800c4c0:	1a9b      	subs	r3, r3, r2
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	1eea      	subs	r2, r5, #3
 800c4c6:	4296      	cmp	r6, r2
 800c4c8:	bf38      	it	cc
 800c4ca:	2300      	movcc	r3, #0
 800c4cc:	4423      	add	r3, r4
 800c4ce:	e015      	b.n	800c4fc <rshift+0x68>
 800c4d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c4d4:	f1c1 0820 	rsb	r8, r1, #32
 800c4d8:	40cf      	lsrs	r7, r1
 800c4da:	f105 0e04 	add.w	lr, r5, #4
 800c4de:	46a1      	mov	r9, r4
 800c4e0:	4576      	cmp	r6, lr
 800c4e2:	46f4      	mov	ip, lr
 800c4e4:	d815      	bhi.n	800c512 <rshift+0x7e>
 800c4e6:	1a9a      	subs	r2, r3, r2
 800c4e8:	0092      	lsls	r2, r2, #2
 800c4ea:	3a04      	subs	r2, #4
 800c4ec:	3501      	adds	r5, #1
 800c4ee:	42ae      	cmp	r6, r5
 800c4f0:	bf38      	it	cc
 800c4f2:	2200      	movcc	r2, #0
 800c4f4:	18a3      	adds	r3, r4, r2
 800c4f6:	50a7      	str	r7, [r4, r2]
 800c4f8:	b107      	cbz	r7, 800c4fc <rshift+0x68>
 800c4fa:	3304      	adds	r3, #4
 800c4fc:	1b1a      	subs	r2, r3, r4
 800c4fe:	42a3      	cmp	r3, r4
 800c500:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c504:	bf08      	it	eq
 800c506:	2300      	moveq	r3, #0
 800c508:	6102      	str	r2, [r0, #16]
 800c50a:	bf08      	it	eq
 800c50c:	6143      	streq	r3, [r0, #20]
 800c50e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c512:	f8dc c000 	ldr.w	ip, [ip]
 800c516:	fa0c fc08 	lsl.w	ip, ip, r8
 800c51a:	ea4c 0707 	orr.w	r7, ip, r7
 800c51e:	f849 7b04 	str.w	r7, [r9], #4
 800c522:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c526:	40cf      	lsrs	r7, r1
 800c528:	e7da      	b.n	800c4e0 <rshift+0x4c>
 800c52a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c52e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c532:	e7c3      	b.n	800c4bc <rshift+0x28>
 800c534:	4623      	mov	r3, r4
 800c536:	e7e1      	b.n	800c4fc <rshift+0x68>

0800c538 <__hexdig_fun>:
 800c538:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c53c:	2b09      	cmp	r3, #9
 800c53e:	d802      	bhi.n	800c546 <__hexdig_fun+0xe>
 800c540:	3820      	subs	r0, #32
 800c542:	b2c0      	uxtb	r0, r0
 800c544:	4770      	bx	lr
 800c546:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c54a:	2b05      	cmp	r3, #5
 800c54c:	d801      	bhi.n	800c552 <__hexdig_fun+0x1a>
 800c54e:	3847      	subs	r0, #71	@ 0x47
 800c550:	e7f7      	b.n	800c542 <__hexdig_fun+0xa>
 800c552:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c556:	2b05      	cmp	r3, #5
 800c558:	d801      	bhi.n	800c55e <__hexdig_fun+0x26>
 800c55a:	3827      	subs	r0, #39	@ 0x27
 800c55c:	e7f1      	b.n	800c542 <__hexdig_fun+0xa>
 800c55e:	2000      	movs	r0, #0
 800c560:	4770      	bx	lr
	...

0800c564 <__gethex>:
 800c564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c568:	b085      	sub	sp, #20
 800c56a:	468a      	mov	sl, r1
 800c56c:	9302      	str	r3, [sp, #8]
 800c56e:	680b      	ldr	r3, [r1, #0]
 800c570:	9001      	str	r0, [sp, #4]
 800c572:	4690      	mov	r8, r2
 800c574:	1c9c      	adds	r4, r3, #2
 800c576:	46a1      	mov	r9, r4
 800c578:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c57c:	2830      	cmp	r0, #48	@ 0x30
 800c57e:	d0fa      	beq.n	800c576 <__gethex+0x12>
 800c580:	eba9 0303 	sub.w	r3, r9, r3
 800c584:	f1a3 0b02 	sub.w	fp, r3, #2
 800c588:	f7ff ffd6 	bl	800c538 <__hexdig_fun>
 800c58c:	4605      	mov	r5, r0
 800c58e:	2800      	cmp	r0, #0
 800c590:	d168      	bne.n	800c664 <__gethex+0x100>
 800c592:	49a0      	ldr	r1, [pc, #640]	@ (800c814 <__gethex+0x2b0>)
 800c594:	2201      	movs	r2, #1
 800c596:	4648      	mov	r0, r9
 800c598:	f7ff ff1e 	bl	800c3d8 <strncmp>
 800c59c:	4607      	mov	r7, r0
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	d167      	bne.n	800c672 <__gethex+0x10e>
 800c5a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c5a6:	4626      	mov	r6, r4
 800c5a8:	f7ff ffc6 	bl	800c538 <__hexdig_fun>
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	d062      	beq.n	800c676 <__gethex+0x112>
 800c5b0:	4623      	mov	r3, r4
 800c5b2:	7818      	ldrb	r0, [r3, #0]
 800c5b4:	2830      	cmp	r0, #48	@ 0x30
 800c5b6:	4699      	mov	r9, r3
 800c5b8:	f103 0301 	add.w	r3, r3, #1
 800c5bc:	d0f9      	beq.n	800c5b2 <__gethex+0x4e>
 800c5be:	f7ff ffbb 	bl	800c538 <__hexdig_fun>
 800c5c2:	fab0 f580 	clz	r5, r0
 800c5c6:	096d      	lsrs	r5, r5, #5
 800c5c8:	f04f 0b01 	mov.w	fp, #1
 800c5cc:	464a      	mov	r2, r9
 800c5ce:	4616      	mov	r6, r2
 800c5d0:	3201      	adds	r2, #1
 800c5d2:	7830      	ldrb	r0, [r6, #0]
 800c5d4:	f7ff ffb0 	bl	800c538 <__hexdig_fun>
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	d1f8      	bne.n	800c5ce <__gethex+0x6a>
 800c5dc:	498d      	ldr	r1, [pc, #564]	@ (800c814 <__gethex+0x2b0>)
 800c5de:	2201      	movs	r2, #1
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	f7ff fef9 	bl	800c3d8 <strncmp>
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	d13f      	bne.n	800c66a <__gethex+0x106>
 800c5ea:	b944      	cbnz	r4, 800c5fe <__gethex+0x9a>
 800c5ec:	1c74      	adds	r4, r6, #1
 800c5ee:	4622      	mov	r2, r4
 800c5f0:	4616      	mov	r6, r2
 800c5f2:	3201      	adds	r2, #1
 800c5f4:	7830      	ldrb	r0, [r6, #0]
 800c5f6:	f7ff ff9f 	bl	800c538 <__hexdig_fun>
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	d1f8      	bne.n	800c5f0 <__gethex+0x8c>
 800c5fe:	1ba4      	subs	r4, r4, r6
 800c600:	00a7      	lsls	r7, r4, #2
 800c602:	7833      	ldrb	r3, [r6, #0]
 800c604:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c608:	2b50      	cmp	r3, #80	@ 0x50
 800c60a:	d13e      	bne.n	800c68a <__gethex+0x126>
 800c60c:	7873      	ldrb	r3, [r6, #1]
 800c60e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c610:	d033      	beq.n	800c67a <__gethex+0x116>
 800c612:	2b2d      	cmp	r3, #45	@ 0x2d
 800c614:	d034      	beq.n	800c680 <__gethex+0x11c>
 800c616:	1c71      	adds	r1, r6, #1
 800c618:	2400      	movs	r4, #0
 800c61a:	7808      	ldrb	r0, [r1, #0]
 800c61c:	f7ff ff8c 	bl	800c538 <__hexdig_fun>
 800c620:	1e43      	subs	r3, r0, #1
 800c622:	b2db      	uxtb	r3, r3
 800c624:	2b18      	cmp	r3, #24
 800c626:	d830      	bhi.n	800c68a <__gethex+0x126>
 800c628:	f1a0 0210 	sub.w	r2, r0, #16
 800c62c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c630:	f7ff ff82 	bl	800c538 <__hexdig_fun>
 800c634:	f100 3cff 	add.w	ip, r0, #4294967295
 800c638:	fa5f fc8c 	uxtb.w	ip, ip
 800c63c:	f1bc 0f18 	cmp.w	ip, #24
 800c640:	f04f 030a 	mov.w	r3, #10
 800c644:	d91e      	bls.n	800c684 <__gethex+0x120>
 800c646:	b104      	cbz	r4, 800c64a <__gethex+0xe6>
 800c648:	4252      	negs	r2, r2
 800c64a:	4417      	add	r7, r2
 800c64c:	f8ca 1000 	str.w	r1, [sl]
 800c650:	b1ed      	cbz	r5, 800c68e <__gethex+0x12a>
 800c652:	f1bb 0f00 	cmp.w	fp, #0
 800c656:	bf0c      	ite	eq
 800c658:	2506      	moveq	r5, #6
 800c65a:	2500      	movne	r5, #0
 800c65c:	4628      	mov	r0, r5
 800c65e:	b005      	add	sp, #20
 800c660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c664:	2500      	movs	r5, #0
 800c666:	462c      	mov	r4, r5
 800c668:	e7b0      	b.n	800c5cc <__gethex+0x68>
 800c66a:	2c00      	cmp	r4, #0
 800c66c:	d1c7      	bne.n	800c5fe <__gethex+0x9a>
 800c66e:	4627      	mov	r7, r4
 800c670:	e7c7      	b.n	800c602 <__gethex+0x9e>
 800c672:	464e      	mov	r6, r9
 800c674:	462f      	mov	r7, r5
 800c676:	2501      	movs	r5, #1
 800c678:	e7c3      	b.n	800c602 <__gethex+0x9e>
 800c67a:	2400      	movs	r4, #0
 800c67c:	1cb1      	adds	r1, r6, #2
 800c67e:	e7cc      	b.n	800c61a <__gethex+0xb6>
 800c680:	2401      	movs	r4, #1
 800c682:	e7fb      	b.n	800c67c <__gethex+0x118>
 800c684:	fb03 0002 	mla	r0, r3, r2, r0
 800c688:	e7ce      	b.n	800c628 <__gethex+0xc4>
 800c68a:	4631      	mov	r1, r6
 800c68c:	e7de      	b.n	800c64c <__gethex+0xe8>
 800c68e:	eba6 0309 	sub.w	r3, r6, r9
 800c692:	3b01      	subs	r3, #1
 800c694:	4629      	mov	r1, r5
 800c696:	2b07      	cmp	r3, #7
 800c698:	dc0a      	bgt.n	800c6b0 <__gethex+0x14c>
 800c69a:	9801      	ldr	r0, [sp, #4]
 800c69c:	f7fe f948 	bl	800a930 <_Balloc>
 800c6a0:	4604      	mov	r4, r0
 800c6a2:	b940      	cbnz	r0, 800c6b6 <__gethex+0x152>
 800c6a4:	4b5c      	ldr	r3, [pc, #368]	@ (800c818 <__gethex+0x2b4>)
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	21e4      	movs	r1, #228	@ 0xe4
 800c6aa:	485c      	ldr	r0, [pc, #368]	@ (800c81c <__gethex+0x2b8>)
 800c6ac:	f7ff fec0 	bl	800c430 <__assert_func>
 800c6b0:	3101      	adds	r1, #1
 800c6b2:	105b      	asrs	r3, r3, #1
 800c6b4:	e7ef      	b.n	800c696 <__gethex+0x132>
 800c6b6:	f100 0a14 	add.w	sl, r0, #20
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	4655      	mov	r5, sl
 800c6be:	469b      	mov	fp, r3
 800c6c0:	45b1      	cmp	r9, r6
 800c6c2:	d337      	bcc.n	800c734 <__gethex+0x1d0>
 800c6c4:	f845 bb04 	str.w	fp, [r5], #4
 800c6c8:	eba5 050a 	sub.w	r5, r5, sl
 800c6cc:	10ad      	asrs	r5, r5, #2
 800c6ce:	6125      	str	r5, [r4, #16]
 800c6d0:	4658      	mov	r0, fp
 800c6d2:	f7fe fa1f 	bl	800ab14 <__hi0bits>
 800c6d6:	016d      	lsls	r5, r5, #5
 800c6d8:	f8d8 6000 	ldr.w	r6, [r8]
 800c6dc:	1a2d      	subs	r5, r5, r0
 800c6de:	42b5      	cmp	r5, r6
 800c6e0:	dd54      	ble.n	800c78c <__gethex+0x228>
 800c6e2:	1bad      	subs	r5, r5, r6
 800c6e4:	4629      	mov	r1, r5
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	f7fe fdb3 	bl	800b252 <__any_on>
 800c6ec:	4681      	mov	r9, r0
 800c6ee:	b178      	cbz	r0, 800c710 <__gethex+0x1ac>
 800c6f0:	1e6b      	subs	r3, r5, #1
 800c6f2:	1159      	asrs	r1, r3, #5
 800c6f4:	f003 021f 	and.w	r2, r3, #31
 800c6f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c6fc:	f04f 0901 	mov.w	r9, #1
 800c700:	fa09 f202 	lsl.w	r2, r9, r2
 800c704:	420a      	tst	r2, r1
 800c706:	d003      	beq.n	800c710 <__gethex+0x1ac>
 800c708:	454b      	cmp	r3, r9
 800c70a:	dc36      	bgt.n	800c77a <__gethex+0x216>
 800c70c:	f04f 0902 	mov.w	r9, #2
 800c710:	4629      	mov	r1, r5
 800c712:	4620      	mov	r0, r4
 800c714:	f7ff febe 	bl	800c494 <rshift>
 800c718:	442f      	add	r7, r5
 800c71a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c71e:	42bb      	cmp	r3, r7
 800c720:	da42      	bge.n	800c7a8 <__gethex+0x244>
 800c722:	9801      	ldr	r0, [sp, #4]
 800c724:	4621      	mov	r1, r4
 800c726:	f7fe f943 	bl	800a9b0 <_Bfree>
 800c72a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c72c:	2300      	movs	r3, #0
 800c72e:	6013      	str	r3, [r2, #0]
 800c730:	25a3      	movs	r5, #163	@ 0xa3
 800c732:	e793      	b.n	800c65c <__gethex+0xf8>
 800c734:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c738:	2a2e      	cmp	r2, #46	@ 0x2e
 800c73a:	d012      	beq.n	800c762 <__gethex+0x1fe>
 800c73c:	2b20      	cmp	r3, #32
 800c73e:	d104      	bne.n	800c74a <__gethex+0x1e6>
 800c740:	f845 bb04 	str.w	fp, [r5], #4
 800c744:	f04f 0b00 	mov.w	fp, #0
 800c748:	465b      	mov	r3, fp
 800c74a:	7830      	ldrb	r0, [r6, #0]
 800c74c:	9303      	str	r3, [sp, #12]
 800c74e:	f7ff fef3 	bl	800c538 <__hexdig_fun>
 800c752:	9b03      	ldr	r3, [sp, #12]
 800c754:	f000 000f 	and.w	r0, r0, #15
 800c758:	4098      	lsls	r0, r3
 800c75a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c75e:	3304      	adds	r3, #4
 800c760:	e7ae      	b.n	800c6c0 <__gethex+0x15c>
 800c762:	45b1      	cmp	r9, r6
 800c764:	d8ea      	bhi.n	800c73c <__gethex+0x1d8>
 800c766:	492b      	ldr	r1, [pc, #172]	@ (800c814 <__gethex+0x2b0>)
 800c768:	9303      	str	r3, [sp, #12]
 800c76a:	2201      	movs	r2, #1
 800c76c:	4630      	mov	r0, r6
 800c76e:	f7ff fe33 	bl	800c3d8 <strncmp>
 800c772:	9b03      	ldr	r3, [sp, #12]
 800c774:	2800      	cmp	r0, #0
 800c776:	d1e1      	bne.n	800c73c <__gethex+0x1d8>
 800c778:	e7a2      	b.n	800c6c0 <__gethex+0x15c>
 800c77a:	1ea9      	subs	r1, r5, #2
 800c77c:	4620      	mov	r0, r4
 800c77e:	f7fe fd68 	bl	800b252 <__any_on>
 800c782:	2800      	cmp	r0, #0
 800c784:	d0c2      	beq.n	800c70c <__gethex+0x1a8>
 800c786:	f04f 0903 	mov.w	r9, #3
 800c78a:	e7c1      	b.n	800c710 <__gethex+0x1ac>
 800c78c:	da09      	bge.n	800c7a2 <__gethex+0x23e>
 800c78e:	1b75      	subs	r5, r6, r5
 800c790:	4621      	mov	r1, r4
 800c792:	9801      	ldr	r0, [sp, #4]
 800c794:	462a      	mov	r2, r5
 800c796:	f7fe fb23 	bl	800ade0 <__lshift>
 800c79a:	1b7f      	subs	r7, r7, r5
 800c79c:	4604      	mov	r4, r0
 800c79e:	f100 0a14 	add.w	sl, r0, #20
 800c7a2:	f04f 0900 	mov.w	r9, #0
 800c7a6:	e7b8      	b.n	800c71a <__gethex+0x1b6>
 800c7a8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c7ac:	42bd      	cmp	r5, r7
 800c7ae:	dd6f      	ble.n	800c890 <__gethex+0x32c>
 800c7b0:	1bed      	subs	r5, r5, r7
 800c7b2:	42ae      	cmp	r6, r5
 800c7b4:	dc34      	bgt.n	800c820 <__gethex+0x2bc>
 800c7b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c7ba:	2b02      	cmp	r3, #2
 800c7bc:	d022      	beq.n	800c804 <__gethex+0x2a0>
 800c7be:	2b03      	cmp	r3, #3
 800c7c0:	d024      	beq.n	800c80c <__gethex+0x2a8>
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d115      	bne.n	800c7f2 <__gethex+0x28e>
 800c7c6:	42ae      	cmp	r6, r5
 800c7c8:	d113      	bne.n	800c7f2 <__gethex+0x28e>
 800c7ca:	2e01      	cmp	r6, #1
 800c7cc:	d10b      	bne.n	800c7e6 <__gethex+0x282>
 800c7ce:	9a02      	ldr	r2, [sp, #8]
 800c7d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7d4:	6013      	str	r3, [r2, #0]
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	6123      	str	r3, [r4, #16]
 800c7da:	f8ca 3000 	str.w	r3, [sl]
 800c7de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7e0:	2562      	movs	r5, #98	@ 0x62
 800c7e2:	601c      	str	r4, [r3, #0]
 800c7e4:	e73a      	b.n	800c65c <__gethex+0xf8>
 800c7e6:	1e71      	subs	r1, r6, #1
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	f7fe fd32 	bl	800b252 <__any_on>
 800c7ee:	2800      	cmp	r0, #0
 800c7f0:	d1ed      	bne.n	800c7ce <__gethex+0x26a>
 800c7f2:	9801      	ldr	r0, [sp, #4]
 800c7f4:	4621      	mov	r1, r4
 800c7f6:	f7fe f8db 	bl	800a9b0 <_Bfree>
 800c7fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	6013      	str	r3, [r2, #0]
 800c800:	2550      	movs	r5, #80	@ 0x50
 800c802:	e72b      	b.n	800c65c <__gethex+0xf8>
 800c804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1f3      	bne.n	800c7f2 <__gethex+0x28e>
 800c80a:	e7e0      	b.n	800c7ce <__gethex+0x26a>
 800c80c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1dd      	bne.n	800c7ce <__gethex+0x26a>
 800c812:	e7ee      	b.n	800c7f2 <__gethex+0x28e>
 800c814:	0800d400 	.word	0x0800d400
 800c818:	0800d299 	.word	0x0800d299
 800c81c:	0800d5ae 	.word	0x0800d5ae
 800c820:	1e6f      	subs	r7, r5, #1
 800c822:	f1b9 0f00 	cmp.w	r9, #0
 800c826:	d130      	bne.n	800c88a <__gethex+0x326>
 800c828:	b127      	cbz	r7, 800c834 <__gethex+0x2d0>
 800c82a:	4639      	mov	r1, r7
 800c82c:	4620      	mov	r0, r4
 800c82e:	f7fe fd10 	bl	800b252 <__any_on>
 800c832:	4681      	mov	r9, r0
 800c834:	117a      	asrs	r2, r7, #5
 800c836:	2301      	movs	r3, #1
 800c838:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c83c:	f007 071f 	and.w	r7, r7, #31
 800c840:	40bb      	lsls	r3, r7
 800c842:	4213      	tst	r3, r2
 800c844:	4629      	mov	r1, r5
 800c846:	4620      	mov	r0, r4
 800c848:	bf18      	it	ne
 800c84a:	f049 0902 	orrne.w	r9, r9, #2
 800c84e:	f7ff fe21 	bl	800c494 <rshift>
 800c852:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c856:	1b76      	subs	r6, r6, r5
 800c858:	2502      	movs	r5, #2
 800c85a:	f1b9 0f00 	cmp.w	r9, #0
 800c85e:	d047      	beq.n	800c8f0 <__gethex+0x38c>
 800c860:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c864:	2b02      	cmp	r3, #2
 800c866:	d015      	beq.n	800c894 <__gethex+0x330>
 800c868:	2b03      	cmp	r3, #3
 800c86a:	d017      	beq.n	800c89c <__gethex+0x338>
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d109      	bne.n	800c884 <__gethex+0x320>
 800c870:	f019 0f02 	tst.w	r9, #2
 800c874:	d006      	beq.n	800c884 <__gethex+0x320>
 800c876:	f8da 3000 	ldr.w	r3, [sl]
 800c87a:	ea49 0903 	orr.w	r9, r9, r3
 800c87e:	f019 0f01 	tst.w	r9, #1
 800c882:	d10e      	bne.n	800c8a2 <__gethex+0x33e>
 800c884:	f045 0510 	orr.w	r5, r5, #16
 800c888:	e032      	b.n	800c8f0 <__gethex+0x38c>
 800c88a:	f04f 0901 	mov.w	r9, #1
 800c88e:	e7d1      	b.n	800c834 <__gethex+0x2d0>
 800c890:	2501      	movs	r5, #1
 800c892:	e7e2      	b.n	800c85a <__gethex+0x2f6>
 800c894:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c896:	f1c3 0301 	rsb	r3, r3, #1
 800c89a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c89c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d0f0      	beq.n	800c884 <__gethex+0x320>
 800c8a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c8a6:	f104 0314 	add.w	r3, r4, #20
 800c8aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c8ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c8b2:	f04f 0c00 	mov.w	ip, #0
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c8c0:	d01b      	beq.n	800c8fa <__gethex+0x396>
 800c8c2:	3201      	adds	r2, #1
 800c8c4:	6002      	str	r2, [r0, #0]
 800c8c6:	2d02      	cmp	r5, #2
 800c8c8:	f104 0314 	add.w	r3, r4, #20
 800c8cc:	d13c      	bne.n	800c948 <__gethex+0x3e4>
 800c8ce:	f8d8 2000 	ldr.w	r2, [r8]
 800c8d2:	3a01      	subs	r2, #1
 800c8d4:	42b2      	cmp	r2, r6
 800c8d6:	d109      	bne.n	800c8ec <__gethex+0x388>
 800c8d8:	1171      	asrs	r1, r6, #5
 800c8da:	2201      	movs	r2, #1
 800c8dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c8e0:	f006 061f 	and.w	r6, r6, #31
 800c8e4:	fa02 f606 	lsl.w	r6, r2, r6
 800c8e8:	421e      	tst	r6, r3
 800c8ea:	d13a      	bne.n	800c962 <__gethex+0x3fe>
 800c8ec:	f045 0520 	orr.w	r5, r5, #32
 800c8f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8f2:	601c      	str	r4, [r3, #0]
 800c8f4:	9b02      	ldr	r3, [sp, #8]
 800c8f6:	601f      	str	r7, [r3, #0]
 800c8f8:	e6b0      	b.n	800c65c <__gethex+0xf8>
 800c8fa:	4299      	cmp	r1, r3
 800c8fc:	f843 cc04 	str.w	ip, [r3, #-4]
 800c900:	d8d9      	bhi.n	800c8b6 <__gethex+0x352>
 800c902:	68a3      	ldr	r3, [r4, #8]
 800c904:	459b      	cmp	fp, r3
 800c906:	db17      	blt.n	800c938 <__gethex+0x3d4>
 800c908:	6861      	ldr	r1, [r4, #4]
 800c90a:	9801      	ldr	r0, [sp, #4]
 800c90c:	3101      	adds	r1, #1
 800c90e:	f7fe f80f 	bl	800a930 <_Balloc>
 800c912:	4681      	mov	r9, r0
 800c914:	b918      	cbnz	r0, 800c91e <__gethex+0x3ba>
 800c916:	4b1a      	ldr	r3, [pc, #104]	@ (800c980 <__gethex+0x41c>)
 800c918:	4602      	mov	r2, r0
 800c91a:	2184      	movs	r1, #132	@ 0x84
 800c91c:	e6c5      	b.n	800c6aa <__gethex+0x146>
 800c91e:	6922      	ldr	r2, [r4, #16]
 800c920:	3202      	adds	r2, #2
 800c922:	f104 010c 	add.w	r1, r4, #12
 800c926:	0092      	lsls	r2, r2, #2
 800c928:	300c      	adds	r0, #12
 800c92a:	f7fd f89e 	bl	8009a6a <memcpy>
 800c92e:	4621      	mov	r1, r4
 800c930:	9801      	ldr	r0, [sp, #4]
 800c932:	f7fe f83d 	bl	800a9b0 <_Bfree>
 800c936:	464c      	mov	r4, r9
 800c938:	6923      	ldr	r3, [r4, #16]
 800c93a:	1c5a      	adds	r2, r3, #1
 800c93c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c940:	6122      	str	r2, [r4, #16]
 800c942:	2201      	movs	r2, #1
 800c944:	615a      	str	r2, [r3, #20]
 800c946:	e7be      	b.n	800c8c6 <__gethex+0x362>
 800c948:	6922      	ldr	r2, [r4, #16]
 800c94a:	455a      	cmp	r2, fp
 800c94c:	dd0b      	ble.n	800c966 <__gethex+0x402>
 800c94e:	2101      	movs	r1, #1
 800c950:	4620      	mov	r0, r4
 800c952:	f7ff fd9f 	bl	800c494 <rshift>
 800c956:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c95a:	3701      	adds	r7, #1
 800c95c:	42bb      	cmp	r3, r7
 800c95e:	f6ff aee0 	blt.w	800c722 <__gethex+0x1be>
 800c962:	2501      	movs	r5, #1
 800c964:	e7c2      	b.n	800c8ec <__gethex+0x388>
 800c966:	f016 061f 	ands.w	r6, r6, #31
 800c96a:	d0fa      	beq.n	800c962 <__gethex+0x3fe>
 800c96c:	4453      	add	r3, sl
 800c96e:	f1c6 0620 	rsb	r6, r6, #32
 800c972:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c976:	f7fe f8cd 	bl	800ab14 <__hi0bits>
 800c97a:	42b0      	cmp	r0, r6
 800c97c:	dbe7      	blt.n	800c94e <__gethex+0x3ea>
 800c97e:	e7f0      	b.n	800c962 <__gethex+0x3fe>
 800c980:	0800d299 	.word	0x0800d299

0800c984 <L_shift>:
 800c984:	f1c2 0208 	rsb	r2, r2, #8
 800c988:	0092      	lsls	r2, r2, #2
 800c98a:	b570      	push	{r4, r5, r6, lr}
 800c98c:	f1c2 0620 	rsb	r6, r2, #32
 800c990:	6843      	ldr	r3, [r0, #4]
 800c992:	6804      	ldr	r4, [r0, #0]
 800c994:	fa03 f506 	lsl.w	r5, r3, r6
 800c998:	432c      	orrs	r4, r5
 800c99a:	40d3      	lsrs	r3, r2
 800c99c:	6004      	str	r4, [r0, #0]
 800c99e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c9a2:	4288      	cmp	r0, r1
 800c9a4:	d3f4      	bcc.n	800c990 <L_shift+0xc>
 800c9a6:	bd70      	pop	{r4, r5, r6, pc}

0800c9a8 <__match>:
 800c9a8:	b530      	push	{r4, r5, lr}
 800c9aa:	6803      	ldr	r3, [r0, #0]
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9b2:	b914      	cbnz	r4, 800c9ba <__match+0x12>
 800c9b4:	6003      	str	r3, [r0, #0]
 800c9b6:	2001      	movs	r0, #1
 800c9b8:	bd30      	pop	{r4, r5, pc}
 800c9ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c9c2:	2d19      	cmp	r5, #25
 800c9c4:	bf98      	it	ls
 800c9c6:	3220      	addls	r2, #32
 800c9c8:	42a2      	cmp	r2, r4
 800c9ca:	d0f0      	beq.n	800c9ae <__match+0x6>
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	e7f3      	b.n	800c9b8 <__match+0x10>

0800c9d0 <__hexnan>:
 800c9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d4:	680b      	ldr	r3, [r1, #0]
 800c9d6:	6801      	ldr	r1, [r0, #0]
 800c9d8:	115e      	asrs	r6, r3, #5
 800c9da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c9de:	f013 031f 	ands.w	r3, r3, #31
 800c9e2:	b087      	sub	sp, #28
 800c9e4:	bf18      	it	ne
 800c9e6:	3604      	addne	r6, #4
 800c9e8:	2500      	movs	r5, #0
 800c9ea:	1f37      	subs	r7, r6, #4
 800c9ec:	4682      	mov	sl, r0
 800c9ee:	4690      	mov	r8, r2
 800c9f0:	9301      	str	r3, [sp, #4]
 800c9f2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c9f6:	46b9      	mov	r9, r7
 800c9f8:	463c      	mov	r4, r7
 800c9fa:	9502      	str	r5, [sp, #8]
 800c9fc:	46ab      	mov	fp, r5
 800c9fe:	784a      	ldrb	r2, [r1, #1]
 800ca00:	1c4b      	adds	r3, r1, #1
 800ca02:	9303      	str	r3, [sp, #12]
 800ca04:	b342      	cbz	r2, 800ca58 <__hexnan+0x88>
 800ca06:	4610      	mov	r0, r2
 800ca08:	9105      	str	r1, [sp, #20]
 800ca0a:	9204      	str	r2, [sp, #16]
 800ca0c:	f7ff fd94 	bl	800c538 <__hexdig_fun>
 800ca10:	2800      	cmp	r0, #0
 800ca12:	d151      	bne.n	800cab8 <__hexnan+0xe8>
 800ca14:	9a04      	ldr	r2, [sp, #16]
 800ca16:	9905      	ldr	r1, [sp, #20]
 800ca18:	2a20      	cmp	r2, #32
 800ca1a:	d818      	bhi.n	800ca4e <__hexnan+0x7e>
 800ca1c:	9b02      	ldr	r3, [sp, #8]
 800ca1e:	459b      	cmp	fp, r3
 800ca20:	dd13      	ble.n	800ca4a <__hexnan+0x7a>
 800ca22:	454c      	cmp	r4, r9
 800ca24:	d206      	bcs.n	800ca34 <__hexnan+0x64>
 800ca26:	2d07      	cmp	r5, #7
 800ca28:	dc04      	bgt.n	800ca34 <__hexnan+0x64>
 800ca2a:	462a      	mov	r2, r5
 800ca2c:	4649      	mov	r1, r9
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f7ff ffa8 	bl	800c984 <L_shift>
 800ca34:	4544      	cmp	r4, r8
 800ca36:	d952      	bls.n	800cade <__hexnan+0x10e>
 800ca38:	2300      	movs	r3, #0
 800ca3a:	f1a4 0904 	sub.w	r9, r4, #4
 800ca3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca42:	f8cd b008 	str.w	fp, [sp, #8]
 800ca46:	464c      	mov	r4, r9
 800ca48:	461d      	mov	r5, r3
 800ca4a:	9903      	ldr	r1, [sp, #12]
 800ca4c:	e7d7      	b.n	800c9fe <__hexnan+0x2e>
 800ca4e:	2a29      	cmp	r2, #41	@ 0x29
 800ca50:	d157      	bne.n	800cb02 <__hexnan+0x132>
 800ca52:	3102      	adds	r1, #2
 800ca54:	f8ca 1000 	str.w	r1, [sl]
 800ca58:	f1bb 0f00 	cmp.w	fp, #0
 800ca5c:	d051      	beq.n	800cb02 <__hexnan+0x132>
 800ca5e:	454c      	cmp	r4, r9
 800ca60:	d206      	bcs.n	800ca70 <__hexnan+0xa0>
 800ca62:	2d07      	cmp	r5, #7
 800ca64:	dc04      	bgt.n	800ca70 <__hexnan+0xa0>
 800ca66:	462a      	mov	r2, r5
 800ca68:	4649      	mov	r1, r9
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	f7ff ff8a 	bl	800c984 <L_shift>
 800ca70:	4544      	cmp	r4, r8
 800ca72:	d936      	bls.n	800cae2 <__hexnan+0x112>
 800ca74:	f1a8 0204 	sub.w	r2, r8, #4
 800ca78:	4623      	mov	r3, r4
 800ca7a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ca7e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ca82:	429f      	cmp	r7, r3
 800ca84:	d2f9      	bcs.n	800ca7a <__hexnan+0xaa>
 800ca86:	1b3b      	subs	r3, r7, r4
 800ca88:	f023 0303 	bic.w	r3, r3, #3
 800ca8c:	3304      	adds	r3, #4
 800ca8e:	3401      	adds	r4, #1
 800ca90:	3e03      	subs	r6, #3
 800ca92:	42b4      	cmp	r4, r6
 800ca94:	bf88      	it	hi
 800ca96:	2304      	movhi	r3, #4
 800ca98:	4443      	add	r3, r8
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f843 2b04 	str.w	r2, [r3], #4
 800caa0:	429f      	cmp	r7, r3
 800caa2:	d2fb      	bcs.n	800ca9c <__hexnan+0xcc>
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	b91b      	cbnz	r3, 800cab0 <__hexnan+0xe0>
 800caa8:	4547      	cmp	r7, r8
 800caaa:	d128      	bne.n	800cafe <__hexnan+0x12e>
 800caac:	2301      	movs	r3, #1
 800caae:	603b      	str	r3, [r7, #0]
 800cab0:	2005      	movs	r0, #5
 800cab2:	b007      	add	sp, #28
 800cab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab8:	3501      	adds	r5, #1
 800caba:	2d08      	cmp	r5, #8
 800cabc:	f10b 0b01 	add.w	fp, fp, #1
 800cac0:	dd06      	ble.n	800cad0 <__hexnan+0x100>
 800cac2:	4544      	cmp	r4, r8
 800cac4:	d9c1      	bls.n	800ca4a <__hexnan+0x7a>
 800cac6:	2300      	movs	r3, #0
 800cac8:	f844 3c04 	str.w	r3, [r4, #-4]
 800cacc:	2501      	movs	r5, #1
 800cace:	3c04      	subs	r4, #4
 800cad0:	6822      	ldr	r2, [r4, #0]
 800cad2:	f000 000f 	and.w	r0, r0, #15
 800cad6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cada:	6020      	str	r0, [r4, #0]
 800cadc:	e7b5      	b.n	800ca4a <__hexnan+0x7a>
 800cade:	2508      	movs	r5, #8
 800cae0:	e7b3      	b.n	800ca4a <__hexnan+0x7a>
 800cae2:	9b01      	ldr	r3, [sp, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d0dd      	beq.n	800caa4 <__hexnan+0xd4>
 800cae8:	f1c3 0320 	rsb	r3, r3, #32
 800caec:	f04f 32ff 	mov.w	r2, #4294967295
 800caf0:	40da      	lsrs	r2, r3
 800caf2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800caf6:	4013      	ands	r3, r2
 800caf8:	f846 3c04 	str.w	r3, [r6, #-4]
 800cafc:	e7d2      	b.n	800caa4 <__hexnan+0xd4>
 800cafe:	3f04      	subs	r7, #4
 800cb00:	e7d0      	b.n	800caa4 <__hexnan+0xd4>
 800cb02:	2004      	movs	r0, #4
 800cb04:	e7d5      	b.n	800cab2 <__hexnan+0xe2>

0800cb06 <__ascii_mbtowc>:
 800cb06:	b082      	sub	sp, #8
 800cb08:	b901      	cbnz	r1, 800cb0c <__ascii_mbtowc+0x6>
 800cb0a:	a901      	add	r1, sp, #4
 800cb0c:	b142      	cbz	r2, 800cb20 <__ascii_mbtowc+0x1a>
 800cb0e:	b14b      	cbz	r3, 800cb24 <__ascii_mbtowc+0x1e>
 800cb10:	7813      	ldrb	r3, [r2, #0]
 800cb12:	600b      	str	r3, [r1, #0]
 800cb14:	7812      	ldrb	r2, [r2, #0]
 800cb16:	1e10      	subs	r0, r2, #0
 800cb18:	bf18      	it	ne
 800cb1a:	2001      	movne	r0, #1
 800cb1c:	b002      	add	sp, #8
 800cb1e:	4770      	bx	lr
 800cb20:	4610      	mov	r0, r2
 800cb22:	e7fb      	b.n	800cb1c <__ascii_mbtowc+0x16>
 800cb24:	f06f 0001 	mvn.w	r0, #1
 800cb28:	e7f8      	b.n	800cb1c <__ascii_mbtowc+0x16>

0800cb2a <_realloc_r>:
 800cb2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb2e:	4680      	mov	r8, r0
 800cb30:	4615      	mov	r5, r2
 800cb32:	460c      	mov	r4, r1
 800cb34:	b921      	cbnz	r1, 800cb40 <_realloc_r+0x16>
 800cb36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb3a:	4611      	mov	r1, r2
 800cb3c:	f7fd be6c 	b.w	800a818 <_malloc_r>
 800cb40:	b92a      	cbnz	r2, 800cb4e <_realloc_r+0x24>
 800cb42:	f7fd fdf5 	bl	800a730 <_free_r>
 800cb46:	2400      	movs	r4, #0
 800cb48:	4620      	mov	r0, r4
 800cb4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb4e:	f000 f840 	bl	800cbd2 <_malloc_usable_size_r>
 800cb52:	4285      	cmp	r5, r0
 800cb54:	4606      	mov	r6, r0
 800cb56:	d802      	bhi.n	800cb5e <_realloc_r+0x34>
 800cb58:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cb5c:	d8f4      	bhi.n	800cb48 <_realloc_r+0x1e>
 800cb5e:	4629      	mov	r1, r5
 800cb60:	4640      	mov	r0, r8
 800cb62:	f7fd fe59 	bl	800a818 <_malloc_r>
 800cb66:	4607      	mov	r7, r0
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	d0ec      	beq.n	800cb46 <_realloc_r+0x1c>
 800cb6c:	42b5      	cmp	r5, r6
 800cb6e:	462a      	mov	r2, r5
 800cb70:	4621      	mov	r1, r4
 800cb72:	bf28      	it	cs
 800cb74:	4632      	movcs	r2, r6
 800cb76:	f7fc ff78 	bl	8009a6a <memcpy>
 800cb7a:	4621      	mov	r1, r4
 800cb7c:	4640      	mov	r0, r8
 800cb7e:	f7fd fdd7 	bl	800a730 <_free_r>
 800cb82:	463c      	mov	r4, r7
 800cb84:	e7e0      	b.n	800cb48 <_realloc_r+0x1e>

0800cb86 <__ascii_wctomb>:
 800cb86:	4603      	mov	r3, r0
 800cb88:	4608      	mov	r0, r1
 800cb8a:	b141      	cbz	r1, 800cb9e <__ascii_wctomb+0x18>
 800cb8c:	2aff      	cmp	r2, #255	@ 0xff
 800cb8e:	d904      	bls.n	800cb9a <__ascii_wctomb+0x14>
 800cb90:	228a      	movs	r2, #138	@ 0x8a
 800cb92:	601a      	str	r2, [r3, #0]
 800cb94:	f04f 30ff 	mov.w	r0, #4294967295
 800cb98:	4770      	bx	lr
 800cb9a:	700a      	strb	r2, [r1, #0]
 800cb9c:	2001      	movs	r0, #1
 800cb9e:	4770      	bx	lr

0800cba0 <fiprintf>:
 800cba0:	b40e      	push	{r1, r2, r3}
 800cba2:	b503      	push	{r0, r1, lr}
 800cba4:	4601      	mov	r1, r0
 800cba6:	ab03      	add	r3, sp, #12
 800cba8:	4805      	ldr	r0, [pc, #20]	@ (800cbc0 <fiprintf+0x20>)
 800cbaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbae:	6800      	ldr	r0, [r0, #0]
 800cbb0:	9301      	str	r3, [sp, #4]
 800cbb2:	f000 f83f 	bl	800cc34 <_vfiprintf_r>
 800cbb6:	b002      	add	sp, #8
 800cbb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbbc:	b003      	add	sp, #12
 800cbbe:	4770      	bx	lr
 800cbc0:	20000014 	.word	0x20000014

0800cbc4 <abort>:
 800cbc4:	b508      	push	{r3, lr}
 800cbc6:	2006      	movs	r0, #6
 800cbc8:	f000 fa08 	bl	800cfdc <raise>
 800cbcc:	2001      	movs	r0, #1
 800cbce:	f7f6 fa2f 	bl	8003030 <_exit>

0800cbd2 <_malloc_usable_size_r>:
 800cbd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbd6:	1f18      	subs	r0, r3, #4
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	bfbc      	itt	lt
 800cbdc:	580b      	ldrlt	r3, [r1, r0]
 800cbde:	18c0      	addlt	r0, r0, r3
 800cbe0:	4770      	bx	lr

0800cbe2 <__sfputc_r>:
 800cbe2:	6893      	ldr	r3, [r2, #8]
 800cbe4:	3b01      	subs	r3, #1
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	b410      	push	{r4}
 800cbea:	6093      	str	r3, [r2, #8]
 800cbec:	da08      	bge.n	800cc00 <__sfputc_r+0x1e>
 800cbee:	6994      	ldr	r4, [r2, #24]
 800cbf0:	42a3      	cmp	r3, r4
 800cbf2:	db01      	blt.n	800cbf8 <__sfputc_r+0x16>
 800cbf4:	290a      	cmp	r1, #10
 800cbf6:	d103      	bne.n	800cc00 <__sfputc_r+0x1e>
 800cbf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbfc:	f000 b932 	b.w	800ce64 <__swbuf_r>
 800cc00:	6813      	ldr	r3, [r2, #0]
 800cc02:	1c58      	adds	r0, r3, #1
 800cc04:	6010      	str	r0, [r2, #0]
 800cc06:	7019      	strb	r1, [r3, #0]
 800cc08:	4608      	mov	r0, r1
 800cc0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <__sfputs_r>:
 800cc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc12:	4606      	mov	r6, r0
 800cc14:	460f      	mov	r7, r1
 800cc16:	4614      	mov	r4, r2
 800cc18:	18d5      	adds	r5, r2, r3
 800cc1a:	42ac      	cmp	r4, r5
 800cc1c:	d101      	bne.n	800cc22 <__sfputs_r+0x12>
 800cc1e:	2000      	movs	r0, #0
 800cc20:	e007      	b.n	800cc32 <__sfputs_r+0x22>
 800cc22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc26:	463a      	mov	r2, r7
 800cc28:	4630      	mov	r0, r6
 800cc2a:	f7ff ffda 	bl	800cbe2 <__sfputc_r>
 800cc2e:	1c43      	adds	r3, r0, #1
 800cc30:	d1f3      	bne.n	800cc1a <__sfputs_r+0xa>
 800cc32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc34 <_vfiprintf_r>:
 800cc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc38:	460d      	mov	r5, r1
 800cc3a:	b09d      	sub	sp, #116	@ 0x74
 800cc3c:	4614      	mov	r4, r2
 800cc3e:	4698      	mov	r8, r3
 800cc40:	4606      	mov	r6, r0
 800cc42:	b118      	cbz	r0, 800cc4c <_vfiprintf_r+0x18>
 800cc44:	6a03      	ldr	r3, [r0, #32]
 800cc46:	b90b      	cbnz	r3, 800cc4c <_vfiprintf_r+0x18>
 800cc48:	f7fc fde8 	bl	800981c <__sinit>
 800cc4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc4e:	07d9      	lsls	r1, r3, #31
 800cc50:	d405      	bmi.n	800cc5e <_vfiprintf_r+0x2a>
 800cc52:	89ab      	ldrh	r3, [r5, #12]
 800cc54:	059a      	lsls	r2, r3, #22
 800cc56:	d402      	bmi.n	800cc5e <_vfiprintf_r+0x2a>
 800cc58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc5a:	f7fc ff04 	bl	8009a66 <__retarget_lock_acquire_recursive>
 800cc5e:	89ab      	ldrh	r3, [r5, #12]
 800cc60:	071b      	lsls	r3, r3, #28
 800cc62:	d501      	bpl.n	800cc68 <_vfiprintf_r+0x34>
 800cc64:	692b      	ldr	r3, [r5, #16]
 800cc66:	b99b      	cbnz	r3, 800cc90 <_vfiprintf_r+0x5c>
 800cc68:	4629      	mov	r1, r5
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	f000 f938 	bl	800cee0 <__swsetup_r>
 800cc70:	b170      	cbz	r0, 800cc90 <_vfiprintf_r+0x5c>
 800cc72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc74:	07dc      	lsls	r4, r3, #31
 800cc76:	d504      	bpl.n	800cc82 <_vfiprintf_r+0x4e>
 800cc78:	f04f 30ff 	mov.w	r0, #4294967295
 800cc7c:	b01d      	add	sp, #116	@ 0x74
 800cc7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc82:	89ab      	ldrh	r3, [r5, #12]
 800cc84:	0598      	lsls	r0, r3, #22
 800cc86:	d4f7      	bmi.n	800cc78 <_vfiprintf_r+0x44>
 800cc88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc8a:	f7fc feed 	bl	8009a68 <__retarget_lock_release_recursive>
 800cc8e:	e7f3      	b.n	800cc78 <_vfiprintf_r+0x44>
 800cc90:	2300      	movs	r3, #0
 800cc92:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc94:	2320      	movs	r3, #32
 800cc96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc9e:	2330      	movs	r3, #48	@ 0x30
 800cca0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ce50 <_vfiprintf_r+0x21c>
 800cca4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cca8:	f04f 0901 	mov.w	r9, #1
 800ccac:	4623      	mov	r3, r4
 800ccae:	469a      	mov	sl, r3
 800ccb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccb4:	b10a      	cbz	r2, 800ccba <_vfiprintf_r+0x86>
 800ccb6:	2a25      	cmp	r2, #37	@ 0x25
 800ccb8:	d1f9      	bne.n	800ccae <_vfiprintf_r+0x7a>
 800ccba:	ebba 0b04 	subs.w	fp, sl, r4
 800ccbe:	d00b      	beq.n	800ccd8 <_vfiprintf_r+0xa4>
 800ccc0:	465b      	mov	r3, fp
 800ccc2:	4622      	mov	r2, r4
 800ccc4:	4629      	mov	r1, r5
 800ccc6:	4630      	mov	r0, r6
 800ccc8:	f7ff ffa2 	bl	800cc10 <__sfputs_r>
 800cccc:	3001      	adds	r0, #1
 800ccce:	f000 80a7 	beq.w	800ce20 <_vfiprintf_r+0x1ec>
 800ccd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccd4:	445a      	add	r2, fp
 800ccd6:	9209      	str	r2, [sp, #36]	@ 0x24
 800ccd8:	f89a 3000 	ldrb.w	r3, [sl]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	f000 809f 	beq.w	800ce20 <_vfiprintf_r+0x1ec>
 800cce2:	2300      	movs	r3, #0
 800cce4:	f04f 32ff 	mov.w	r2, #4294967295
 800cce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccec:	f10a 0a01 	add.w	sl, sl, #1
 800ccf0:	9304      	str	r3, [sp, #16]
 800ccf2:	9307      	str	r3, [sp, #28]
 800ccf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ccf8:	931a      	str	r3, [sp, #104]	@ 0x68
 800ccfa:	4654      	mov	r4, sl
 800ccfc:	2205      	movs	r2, #5
 800ccfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd02:	4853      	ldr	r0, [pc, #332]	@ (800ce50 <_vfiprintf_r+0x21c>)
 800cd04:	f7f3 fa8c 	bl	8000220 <memchr>
 800cd08:	9a04      	ldr	r2, [sp, #16]
 800cd0a:	b9d8      	cbnz	r0, 800cd44 <_vfiprintf_r+0x110>
 800cd0c:	06d1      	lsls	r1, r2, #27
 800cd0e:	bf44      	itt	mi
 800cd10:	2320      	movmi	r3, #32
 800cd12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd16:	0713      	lsls	r3, r2, #28
 800cd18:	bf44      	itt	mi
 800cd1a:	232b      	movmi	r3, #43	@ 0x2b
 800cd1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd20:	f89a 3000 	ldrb.w	r3, [sl]
 800cd24:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd26:	d015      	beq.n	800cd54 <_vfiprintf_r+0x120>
 800cd28:	9a07      	ldr	r2, [sp, #28]
 800cd2a:	4654      	mov	r4, sl
 800cd2c:	2000      	movs	r0, #0
 800cd2e:	f04f 0c0a 	mov.w	ip, #10
 800cd32:	4621      	mov	r1, r4
 800cd34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd38:	3b30      	subs	r3, #48	@ 0x30
 800cd3a:	2b09      	cmp	r3, #9
 800cd3c:	d94b      	bls.n	800cdd6 <_vfiprintf_r+0x1a2>
 800cd3e:	b1b0      	cbz	r0, 800cd6e <_vfiprintf_r+0x13a>
 800cd40:	9207      	str	r2, [sp, #28]
 800cd42:	e014      	b.n	800cd6e <_vfiprintf_r+0x13a>
 800cd44:	eba0 0308 	sub.w	r3, r0, r8
 800cd48:	fa09 f303 	lsl.w	r3, r9, r3
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	9304      	str	r3, [sp, #16]
 800cd50:	46a2      	mov	sl, r4
 800cd52:	e7d2      	b.n	800ccfa <_vfiprintf_r+0xc6>
 800cd54:	9b03      	ldr	r3, [sp, #12]
 800cd56:	1d19      	adds	r1, r3, #4
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	9103      	str	r1, [sp, #12]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	bfbb      	ittet	lt
 800cd60:	425b      	neglt	r3, r3
 800cd62:	f042 0202 	orrlt.w	r2, r2, #2
 800cd66:	9307      	strge	r3, [sp, #28]
 800cd68:	9307      	strlt	r3, [sp, #28]
 800cd6a:	bfb8      	it	lt
 800cd6c:	9204      	strlt	r2, [sp, #16]
 800cd6e:	7823      	ldrb	r3, [r4, #0]
 800cd70:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd72:	d10a      	bne.n	800cd8a <_vfiprintf_r+0x156>
 800cd74:	7863      	ldrb	r3, [r4, #1]
 800cd76:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd78:	d132      	bne.n	800cde0 <_vfiprintf_r+0x1ac>
 800cd7a:	9b03      	ldr	r3, [sp, #12]
 800cd7c:	1d1a      	adds	r2, r3, #4
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	9203      	str	r2, [sp, #12]
 800cd82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd86:	3402      	adds	r4, #2
 800cd88:	9305      	str	r3, [sp, #20]
 800cd8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ce60 <_vfiprintf_r+0x22c>
 800cd8e:	7821      	ldrb	r1, [r4, #0]
 800cd90:	2203      	movs	r2, #3
 800cd92:	4650      	mov	r0, sl
 800cd94:	f7f3 fa44 	bl	8000220 <memchr>
 800cd98:	b138      	cbz	r0, 800cdaa <_vfiprintf_r+0x176>
 800cd9a:	9b04      	ldr	r3, [sp, #16]
 800cd9c:	eba0 000a 	sub.w	r0, r0, sl
 800cda0:	2240      	movs	r2, #64	@ 0x40
 800cda2:	4082      	lsls	r2, r0
 800cda4:	4313      	orrs	r3, r2
 800cda6:	3401      	adds	r4, #1
 800cda8:	9304      	str	r3, [sp, #16]
 800cdaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdae:	4829      	ldr	r0, [pc, #164]	@ (800ce54 <_vfiprintf_r+0x220>)
 800cdb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cdb4:	2206      	movs	r2, #6
 800cdb6:	f7f3 fa33 	bl	8000220 <memchr>
 800cdba:	2800      	cmp	r0, #0
 800cdbc:	d03f      	beq.n	800ce3e <_vfiprintf_r+0x20a>
 800cdbe:	4b26      	ldr	r3, [pc, #152]	@ (800ce58 <_vfiprintf_r+0x224>)
 800cdc0:	bb1b      	cbnz	r3, 800ce0a <_vfiprintf_r+0x1d6>
 800cdc2:	9b03      	ldr	r3, [sp, #12]
 800cdc4:	3307      	adds	r3, #7
 800cdc6:	f023 0307 	bic.w	r3, r3, #7
 800cdca:	3308      	adds	r3, #8
 800cdcc:	9303      	str	r3, [sp, #12]
 800cdce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdd0:	443b      	add	r3, r7
 800cdd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdd4:	e76a      	b.n	800ccac <_vfiprintf_r+0x78>
 800cdd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdda:	460c      	mov	r4, r1
 800cddc:	2001      	movs	r0, #1
 800cdde:	e7a8      	b.n	800cd32 <_vfiprintf_r+0xfe>
 800cde0:	2300      	movs	r3, #0
 800cde2:	3401      	adds	r4, #1
 800cde4:	9305      	str	r3, [sp, #20]
 800cde6:	4619      	mov	r1, r3
 800cde8:	f04f 0c0a 	mov.w	ip, #10
 800cdec:	4620      	mov	r0, r4
 800cdee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdf2:	3a30      	subs	r2, #48	@ 0x30
 800cdf4:	2a09      	cmp	r2, #9
 800cdf6:	d903      	bls.n	800ce00 <_vfiprintf_r+0x1cc>
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d0c6      	beq.n	800cd8a <_vfiprintf_r+0x156>
 800cdfc:	9105      	str	r1, [sp, #20]
 800cdfe:	e7c4      	b.n	800cd8a <_vfiprintf_r+0x156>
 800ce00:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce04:	4604      	mov	r4, r0
 800ce06:	2301      	movs	r3, #1
 800ce08:	e7f0      	b.n	800cdec <_vfiprintf_r+0x1b8>
 800ce0a:	ab03      	add	r3, sp, #12
 800ce0c:	9300      	str	r3, [sp, #0]
 800ce0e:	462a      	mov	r2, r5
 800ce10:	4b12      	ldr	r3, [pc, #72]	@ (800ce5c <_vfiprintf_r+0x228>)
 800ce12:	a904      	add	r1, sp, #16
 800ce14:	4630      	mov	r0, r6
 800ce16:	f7fb fea9 	bl	8008b6c <_printf_float>
 800ce1a:	4607      	mov	r7, r0
 800ce1c:	1c78      	adds	r0, r7, #1
 800ce1e:	d1d6      	bne.n	800cdce <_vfiprintf_r+0x19a>
 800ce20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce22:	07d9      	lsls	r1, r3, #31
 800ce24:	d405      	bmi.n	800ce32 <_vfiprintf_r+0x1fe>
 800ce26:	89ab      	ldrh	r3, [r5, #12]
 800ce28:	059a      	lsls	r2, r3, #22
 800ce2a:	d402      	bmi.n	800ce32 <_vfiprintf_r+0x1fe>
 800ce2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce2e:	f7fc fe1b 	bl	8009a68 <__retarget_lock_release_recursive>
 800ce32:	89ab      	ldrh	r3, [r5, #12]
 800ce34:	065b      	lsls	r3, r3, #25
 800ce36:	f53f af1f 	bmi.w	800cc78 <_vfiprintf_r+0x44>
 800ce3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce3c:	e71e      	b.n	800cc7c <_vfiprintf_r+0x48>
 800ce3e:	ab03      	add	r3, sp, #12
 800ce40:	9300      	str	r3, [sp, #0]
 800ce42:	462a      	mov	r2, r5
 800ce44:	4b05      	ldr	r3, [pc, #20]	@ (800ce5c <_vfiprintf_r+0x228>)
 800ce46:	a904      	add	r1, sp, #16
 800ce48:	4630      	mov	r0, r6
 800ce4a:	f7fc f927 	bl	800909c <_printf_i>
 800ce4e:	e7e4      	b.n	800ce1a <_vfiprintf_r+0x1e6>
 800ce50:	0800d559 	.word	0x0800d559
 800ce54:	0800d563 	.word	0x0800d563
 800ce58:	08008b6d 	.word	0x08008b6d
 800ce5c:	0800cc11 	.word	0x0800cc11
 800ce60:	0800d55f 	.word	0x0800d55f

0800ce64 <__swbuf_r>:
 800ce64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce66:	460e      	mov	r6, r1
 800ce68:	4614      	mov	r4, r2
 800ce6a:	4605      	mov	r5, r0
 800ce6c:	b118      	cbz	r0, 800ce76 <__swbuf_r+0x12>
 800ce6e:	6a03      	ldr	r3, [r0, #32]
 800ce70:	b90b      	cbnz	r3, 800ce76 <__swbuf_r+0x12>
 800ce72:	f7fc fcd3 	bl	800981c <__sinit>
 800ce76:	69a3      	ldr	r3, [r4, #24]
 800ce78:	60a3      	str	r3, [r4, #8]
 800ce7a:	89a3      	ldrh	r3, [r4, #12]
 800ce7c:	071a      	lsls	r2, r3, #28
 800ce7e:	d501      	bpl.n	800ce84 <__swbuf_r+0x20>
 800ce80:	6923      	ldr	r3, [r4, #16]
 800ce82:	b943      	cbnz	r3, 800ce96 <__swbuf_r+0x32>
 800ce84:	4621      	mov	r1, r4
 800ce86:	4628      	mov	r0, r5
 800ce88:	f000 f82a 	bl	800cee0 <__swsetup_r>
 800ce8c:	b118      	cbz	r0, 800ce96 <__swbuf_r+0x32>
 800ce8e:	f04f 37ff 	mov.w	r7, #4294967295
 800ce92:	4638      	mov	r0, r7
 800ce94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce96:	6823      	ldr	r3, [r4, #0]
 800ce98:	6922      	ldr	r2, [r4, #16]
 800ce9a:	1a98      	subs	r0, r3, r2
 800ce9c:	6963      	ldr	r3, [r4, #20]
 800ce9e:	b2f6      	uxtb	r6, r6
 800cea0:	4283      	cmp	r3, r0
 800cea2:	4637      	mov	r7, r6
 800cea4:	dc05      	bgt.n	800ceb2 <__swbuf_r+0x4e>
 800cea6:	4621      	mov	r1, r4
 800cea8:	4628      	mov	r0, r5
 800ceaa:	f7ff fa53 	bl	800c354 <_fflush_r>
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	d1ed      	bne.n	800ce8e <__swbuf_r+0x2a>
 800ceb2:	68a3      	ldr	r3, [r4, #8]
 800ceb4:	3b01      	subs	r3, #1
 800ceb6:	60a3      	str	r3, [r4, #8]
 800ceb8:	6823      	ldr	r3, [r4, #0]
 800ceba:	1c5a      	adds	r2, r3, #1
 800cebc:	6022      	str	r2, [r4, #0]
 800cebe:	701e      	strb	r6, [r3, #0]
 800cec0:	6962      	ldr	r2, [r4, #20]
 800cec2:	1c43      	adds	r3, r0, #1
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d004      	beq.n	800ced2 <__swbuf_r+0x6e>
 800cec8:	89a3      	ldrh	r3, [r4, #12]
 800ceca:	07db      	lsls	r3, r3, #31
 800cecc:	d5e1      	bpl.n	800ce92 <__swbuf_r+0x2e>
 800cece:	2e0a      	cmp	r6, #10
 800ced0:	d1df      	bne.n	800ce92 <__swbuf_r+0x2e>
 800ced2:	4621      	mov	r1, r4
 800ced4:	4628      	mov	r0, r5
 800ced6:	f7ff fa3d 	bl	800c354 <_fflush_r>
 800ceda:	2800      	cmp	r0, #0
 800cedc:	d0d9      	beq.n	800ce92 <__swbuf_r+0x2e>
 800cede:	e7d6      	b.n	800ce8e <__swbuf_r+0x2a>

0800cee0 <__swsetup_r>:
 800cee0:	b538      	push	{r3, r4, r5, lr}
 800cee2:	4b29      	ldr	r3, [pc, #164]	@ (800cf88 <__swsetup_r+0xa8>)
 800cee4:	4605      	mov	r5, r0
 800cee6:	6818      	ldr	r0, [r3, #0]
 800cee8:	460c      	mov	r4, r1
 800ceea:	b118      	cbz	r0, 800cef4 <__swsetup_r+0x14>
 800ceec:	6a03      	ldr	r3, [r0, #32]
 800ceee:	b90b      	cbnz	r3, 800cef4 <__swsetup_r+0x14>
 800cef0:	f7fc fc94 	bl	800981c <__sinit>
 800cef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cef8:	0719      	lsls	r1, r3, #28
 800cefa:	d422      	bmi.n	800cf42 <__swsetup_r+0x62>
 800cefc:	06da      	lsls	r2, r3, #27
 800cefe:	d407      	bmi.n	800cf10 <__swsetup_r+0x30>
 800cf00:	2209      	movs	r2, #9
 800cf02:	602a      	str	r2, [r5, #0]
 800cf04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf08:	81a3      	strh	r3, [r4, #12]
 800cf0a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf0e:	e033      	b.n	800cf78 <__swsetup_r+0x98>
 800cf10:	0758      	lsls	r0, r3, #29
 800cf12:	d512      	bpl.n	800cf3a <__swsetup_r+0x5a>
 800cf14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf16:	b141      	cbz	r1, 800cf2a <__swsetup_r+0x4a>
 800cf18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf1c:	4299      	cmp	r1, r3
 800cf1e:	d002      	beq.n	800cf26 <__swsetup_r+0x46>
 800cf20:	4628      	mov	r0, r5
 800cf22:	f7fd fc05 	bl	800a730 <_free_r>
 800cf26:	2300      	movs	r3, #0
 800cf28:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf2a:	89a3      	ldrh	r3, [r4, #12]
 800cf2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cf30:	81a3      	strh	r3, [r4, #12]
 800cf32:	2300      	movs	r3, #0
 800cf34:	6063      	str	r3, [r4, #4]
 800cf36:	6923      	ldr	r3, [r4, #16]
 800cf38:	6023      	str	r3, [r4, #0]
 800cf3a:	89a3      	ldrh	r3, [r4, #12]
 800cf3c:	f043 0308 	orr.w	r3, r3, #8
 800cf40:	81a3      	strh	r3, [r4, #12]
 800cf42:	6923      	ldr	r3, [r4, #16]
 800cf44:	b94b      	cbnz	r3, 800cf5a <__swsetup_r+0x7a>
 800cf46:	89a3      	ldrh	r3, [r4, #12]
 800cf48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cf4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf50:	d003      	beq.n	800cf5a <__swsetup_r+0x7a>
 800cf52:	4621      	mov	r1, r4
 800cf54:	4628      	mov	r0, r5
 800cf56:	f000 f883 	bl	800d060 <__smakebuf_r>
 800cf5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf5e:	f013 0201 	ands.w	r2, r3, #1
 800cf62:	d00a      	beq.n	800cf7a <__swsetup_r+0x9a>
 800cf64:	2200      	movs	r2, #0
 800cf66:	60a2      	str	r2, [r4, #8]
 800cf68:	6962      	ldr	r2, [r4, #20]
 800cf6a:	4252      	negs	r2, r2
 800cf6c:	61a2      	str	r2, [r4, #24]
 800cf6e:	6922      	ldr	r2, [r4, #16]
 800cf70:	b942      	cbnz	r2, 800cf84 <__swsetup_r+0xa4>
 800cf72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cf76:	d1c5      	bne.n	800cf04 <__swsetup_r+0x24>
 800cf78:	bd38      	pop	{r3, r4, r5, pc}
 800cf7a:	0799      	lsls	r1, r3, #30
 800cf7c:	bf58      	it	pl
 800cf7e:	6962      	ldrpl	r2, [r4, #20]
 800cf80:	60a2      	str	r2, [r4, #8]
 800cf82:	e7f4      	b.n	800cf6e <__swsetup_r+0x8e>
 800cf84:	2000      	movs	r0, #0
 800cf86:	e7f7      	b.n	800cf78 <__swsetup_r+0x98>
 800cf88:	20000014 	.word	0x20000014

0800cf8c <_raise_r>:
 800cf8c:	291f      	cmp	r1, #31
 800cf8e:	b538      	push	{r3, r4, r5, lr}
 800cf90:	4605      	mov	r5, r0
 800cf92:	460c      	mov	r4, r1
 800cf94:	d904      	bls.n	800cfa0 <_raise_r+0x14>
 800cf96:	2316      	movs	r3, #22
 800cf98:	6003      	str	r3, [r0, #0]
 800cf9a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf9e:	bd38      	pop	{r3, r4, r5, pc}
 800cfa0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cfa2:	b112      	cbz	r2, 800cfaa <_raise_r+0x1e>
 800cfa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfa8:	b94b      	cbnz	r3, 800cfbe <_raise_r+0x32>
 800cfaa:	4628      	mov	r0, r5
 800cfac:	f000 f830 	bl	800d010 <_getpid_r>
 800cfb0:	4622      	mov	r2, r4
 800cfb2:	4601      	mov	r1, r0
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfba:	f000 b817 	b.w	800cfec <_kill_r>
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d00a      	beq.n	800cfd8 <_raise_r+0x4c>
 800cfc2:	1c59      	adds	r1, r3, #1
 800cfc4:	d103      	bne.n	800cfce <_raise_r+0x42>
 800cfc6:	2316      	movs	r3, #22
 800cfc8:	6003      	str	r3, [r0, #0]
 800cfca:	2001      	movs	r0, #1
 800cfcc:	e7e7      	b.n	800cf9e <_raise_r+0x12>
 800cfce:	2100      	movs	r1, #0
 800cfd0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	4798      	blx	r3
 800cfd8:	2000      	movs	r0, #0
 800cfda:	e7e0      	b.n	800cf9e <_raise_r+0x12>

0800cfdc <raise>:
 800cfdc:	4b02      	ldr	r3, [pc, #8]	@ (800cfe8 <raise+0xc>)
 800cfde:	4601      	mov	r1, r0
 800cfe0:	6818      	ldr	r0, [r3, #0]
 800cfe2:	f7ff bfd3 	b.w	800cf8c <_raise_r>
 800cfe6:	bf00      	nop
 800cfe8:	20000014 	.word	0x20000014

0800cfec <_kill_r>:
 800cfec:	b538      	push	{r3, r4, r5, lr}
 800cfee:	4d07      	ldr	r5, [pc, #28]	@ (800d00c <_kill_r+0x20>)
 800cff0:	2300      	movs	r3, #0
 800cff2:	4604      	mov	r4, r0
 800cff4:	4608      	mov	r0, r1
 800cff6:	4611      	mov	r1, r2
 800cff8:	602b      	str	r3, [r5, #0]
 800cffa:	f7f6 f809 	bl	8003010 <_kill>
 800cffe:	1c43      	adds	r3, r0, #1
 800d000:	d102      	bne.n	800d008 <_kill_r+0x1c>
 800d002:	682b      	ldr	r3, [r5, #0]
 800d004:	b103      	cbz	r3, 800d008 <_kill_r+0x1c>
 800d006:	6023      	str	r3, [r4, #0]
 800d008:	bd38      	pop	{r3, r4, r5, pc}
 800d00a:	bf00      	nop
 800d00c:	200008e4 	.word	0x200008e4

0800d010 <_getpid_r>:
 800d010:	f7f5 bff6 	b.w	8003000 <_getpid>

0800d014 <__swhatbuf_r>:
 800d014:	b570      	push	{r4, r5, r6, lr}
 800d016:	460c      	mov	r4, r1
 800d018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d01c:	2900      	cmp	r1, #0
 800d01e:	b096      	sub	sp, #88	@ 0x58
 800d020:	4615      	mov	r5, r2
 800d022:	461e      	mov	r6, r3
 800d024:	da0d      	bge.n	800d042 <__swhatbuf_r+0x2e>
 800d026:	89a3      	ldrh	r3, [r4, #12]
 800d028:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d02c:	f04f 0100 	mov.w	r1, #0
 800d030:	bf14      	ite	ne
 800d032:	2340      	movne	r3, #64	@ 0x40
 800d034:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d038:	2000      	movs	r0, #0
 800d03a:	6031      	str	r1, [r6, #0]
 800d03c:	602b      	str	r3, [r5, #0]
 800d03e:	b016      	add	sp, #88	@ 0x58
 800d040:	bd70      	pop	{r4, r5, r6, pc}
 800d042:	466a      	mov	r2, sp
 800d044:	f000 f848 	bl	800d0d8 <_fstat_r>
 800d048:	2800      	cmp	r0, #0
 800d04a:	dbec      	blt.n	800d026 <__swhatbuf_r+0x12>
 800d04c:	9901      	ldr	r1, [sp, #4]
 800d04e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d052:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d056:	4259      	negs	r1, r3
 800d058:	4159      	adcs	r1, r3
 800d05a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d05e:	e7eb      	b.n	800d038 <__swhatbuf_r+0x24>

0800d060 <__smakebuf_r>:
 800d060:	898b      	ldrh	r3, [r1, #12]
 800d062:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d064:	079d      	lsls	r5, r3, #30
 800d066:	4606      	mov	r6, r0
 800d068:	460c      	mov	r4, r1
 800d06a:	d507      	bpl.n	800d07c <__smakebuf_r+0x1c>
 800d06c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d070:	6023      	str	r3, [r4, #0]
 800d072:	6123      	str	r3, [r4, #16]
 800d074:	2301      	movs	r3, #1
 800d076:	6163      	str	r3, [r4, #20]
 800d078:	b003      	add	sp, #12
 800d07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d07c:	ab01      	add	r3, sp, #4
 800d07e:	466a      	mov	r2, sp
 800d080:	f7ff ffc8 	bl	800d014 <__swhatbuf_r>
 800d084:	9f00      	ldr	r7, [sp, #0]
 800d086:	4605      	mov	r5, r0
 800d088:	4639      	mov	r1, r7
 800d08a:	4630      	mov	r0, r6
 800d08c:	f7fd fbc4 	bl	800a818 <_malloc_r>
 800d090:	b948      	cbnz	r0, 800d0a6 <__smakebuf_r+0x46>
 800d092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d096:	059a      	lsls	r2, r3, #22
 800d098:	d4ee      	bmi.n	800d078 <__smakebuf_r+0x18>
 800d09a:	f023 0303 	bic.w	r3, r3, #3
 800d09e:	f043 0302 	orr.w	r3, r3, #2
 800d0a2:	81a3      	strh	r3, [r4, #12]
 800d0a4:	e7e2      	b.n	800d06c <__smakebuf_r+0xc>
 800d0a6:	89a3      	ldrh	r3, [r4, #12]
 800d0a8:	6020      	str	r0, [r4, #0]
 800d0aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0ae:	81a3      	strh	r3, [r4, #12]
 800d0b0:	9b01      	ldr	r3, [sp, #4]
 800d0b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d0b6:	b15b      	cbz	r3, 800d0d0 <__smakebuf_r+0x70>
 800d0b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0bc:	4630      	mov	r0, r6
 800d0be:	f000 f81d 	bl	800d0fc <_isatty_r>
 800d0c2:	b128      	cbz	r0, 800d0d0 <__smakebuf_r+0x70>
 800d0c4:	89a3      	ldrh	r3, [r4, #12]
 800d0c6:	f023 0303 	bic.w	r3, r3, #3
 800d0ca:	f043 0301 	orr.w	r3, r3, #1
 800d0ce:	81a3      	strh	r3, [r4, #12]
 800d0d0:	89a3      	ldrh	r3, [r4, #12]
 800d0d2:	431d      	orrs	r5, r3
 800d0d4:	81a5      	strh	r5, [r4, #12]
 800d0d6:	e7cf      	b.n	800d078 <__smakebuf_r+0x18>

0800d0d8 <_fstat_r>:
 800d0d8:	b538      	push	{r3, r4, r5, lr}
 800d0da:	4d07      	ldr	r5, [pc, #28]	@ (800d0f8 <_fstat_r+0x20>)
 800d0dc:	2300      	movs	r3, #0
 800d0de:	4604      	mov	r4, r0
 800d0e0:	4608      	mov	r0, r1
 800d0e2:	4611      	mov	r1, r2
 800d0e4:	602b      	str	r3, [r5, #0]
 800d0e6:	f7f5 fff3 	bl	80030d0 <_fstat>
 800d0ea:	1c43      	adds	r3, r0, #1
 800d0ec:	d102      	bne.n	800d0f4 <_fstat_r+0x1c>
 800d0ee:	682b      	ldr	r3, [r5, #0]
 800d0f0:	b103      	cbz	r3, 800d0f4 <_fstat_r+0x1c>
 800d0f2:	6023      	str	r3, [r4, #0]
 800d0f4:	bd38      	pop	{r3, r4, r5, pc}
 800d0f6:	bf00      	nop
 800d0f8:	200008e4 	.word	0x200008e4

0800d0fc <_isatty_r>:
 800d0fc:	b538      	push	{r3, r4, r5, lr}
 800d0fe:	4d06      	ldr	r5, [pc, #24]	@ (800d118 <_isatty_r+0x1c>)
 800d100:	2300      	movs	r3, #0
 800d102:	4604      	mov	r4, r0
 800d104:	4608      	mov	r0, r1
 800d106:	602b      	str	r3, [r5, #0]
 800d108:	f7f5 fff2 	bl	80030f0 <_isatty>
 800d10c:	1c43      	adds	r3, r0, #1
 800d10e:	d102      	bne.n	800d116 <_isatty_r+0x1a>
 800d110:	682b      	ldr	r3, [r5, #0]
 800d112:	b103      	cbz	r3, 800d116 <_isatty_r+0x1a>
 800d114:	6023      	str	r3, [r4, #0]
 800d116:	bd38      	pop	{r3, r4, r5, pc}
 800d118:	200008e4 	.word	0x200008e4

0800d11c <_init>:
 800d11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d11e:	bf00      	nop
 800d120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d122:	bc08      	pop	{r3}
 800d124:	469e      	mov	lr, r3
 800d126:	4770      	bx	lr

0800d128 <_fini>:
 800d128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d12a:	bf00      	nop
 800d12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d12e:	bc08      	pop	{r3}
 800d130:	469e      	mov	lr, r3
 800d132:	4770      	bx	lr
