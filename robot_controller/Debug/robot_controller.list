
robot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6a4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  0800a888  0800a888  0000b888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac40  0800ac40  0000c1d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac40  0800ac40  0000bc40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac48  0800ac48  0000c1d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac48  0800ac48  0000bc48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac4c  0800ac4c  0000bc4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800ac50  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ac  200001d0  0800ae20  0000c1d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000077c  0800ae20  0000c77c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b2e3  00000000  00000000  0000c200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d93  00000000  00000000  000274e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  0002b278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001073  00000000  00000000  0002c7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c3d  00000000  00000000  0002d843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be84  00000000  00000000  00056480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105b6b  00000000  00000000  00072304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00177e6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066f0  00000000  00000000  00177eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0017e5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d0 	.word	0x200001d0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a86c 	.word	0x0800a86c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d4 	.word	0x200001d4
 800021c:	0800a86c 	.word	0x0800a86c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b094      	sub	sp, #80	@ 0x50
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 0318 	add.w	r3, r7, #24
 8000f92:	2238      	movs	r2, #56	@ 0x38
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f007 fd45 	bl	8008a26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f001 feb4 	bl	8002d18 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fba:	2340      	movs	r3, #64	@ 0x40
 8000fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fca:	2355      	movs	r3, #85	@ 0x55
 8000fcc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f001 ff4e 	bl	8002e80 <HAL_RCC_OscConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fea:	f000 ff5d 	bl	8001ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fee:	230f      	movs	r3, #15
 8000ff0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2104      	movs	r1, #4
 8001006:	4618      	mov	r0, r3
 8001008:	f002 fa4c 	bl	80034a4 <HAL_RCC_ClockConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001012:	f000 ff49 	bl	8001ea8 <Error_Handler>
  }
}
 8001016:	bf00      	nop
 8001018:	3750      	adds	r7, #80	@ 0x50
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <MX_GPIO_Init>:

#include "gpio_configuration.h"


void MX_GPIO_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	@ 0x28
 8001024:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	4b2f      	ldr	r3, [pc, #188]	@ (80010f4 <MX_GPIO_Init+0xd4>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	4a2e      	ldr	r2, [pc, #184]	@ (80010f4 <MX_GPIO_Init+0xd4>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001042:	4b2c      	ldr	r3, [pc, #176]	@ (80010f4 <MX_GPIO_Init+0xd4>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800104e:	4b29      	ldr	r3, [pc, #164]	@ (80010f4 <MX_GPIO_Init+0xd4>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001052:	4a28      	ldr	r2, [pc, #160]	@ (80010f4 <MX_GPIO_Init+0xd4>)
 8001054:	f043 0320 	orr.w	r3, r3, #32
 8001058:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105a:	4b26      	ldr	r3, [pc, #152]	@ (80010f4 <MX_GPIO_Init+0xd4>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105e:	f003 0320 	and.w	r3, r3, #32
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b23      	ldr	r3, [pc, #140]	@ (80010f4 <MX_GPIO_Init+0xd4>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106a:	4a22      	ldr	r2, [pc, #136]	@ (80010f4 <MX_GPIO_Init+0xd4>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001072:	4b20      	ldr	r3, [pc, #128]	@ (80010f4 <MX_GPIO_Init+0xd4>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <MX_GPIO_Init+0xd4>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001082:	4a1c      	ldr	r2, [pc, #112]	@ (80010f4 <MX_GPIO_Init+0xd4>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108a:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <MX_GPIO_Init+0xd4>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	2123      	movs	r1, #35	@ 0x23
 800109a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800109e:	f001 fe23 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	480f      	ldr	r0, [pc, #60]	@ (80010f8 <MX_GPIO_Init+0xd8>)
 80010ba:	f001 fc93 	bl	80029e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin;
 80010be:	2323      	movs	r3, #35	@ 0x23
 80010c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d8:	f001 fc84 	bl	80029e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2100      	movs	r1, #0
 80010e0:	2028      	movs	r0, #40	@ 0x28
 80010e2:	f001 fb97 	bl	8002814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010e6:	2028      	movs	r0, #40	@ 0x28
 80010e8:	f001 fbae 	bl	8002848 <HAL_NVIC_EnableIRQ>

}
 80010ec:	bf00      	nop
 80010ee:	3728      	adds	r7, #40	@ 0x28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40021000 	.word	0x40021000
 80010f8:	48000800 	.word	0x48000800

080010fc <MX_TIM1_Init>:




void MX_TIM1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b09c      	sub	sp, #112	@ 0x70
 8001100:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
 800112c:	615a      	str	r2, [r3, #20]
 800112e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2234      	movs	r2, #52	@ 0x34
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f007 fc75 	bl	8008a26 <memset>

  htim1.Instance = TIM1;
 800113c:	4b57      	ldr	r3, [pc, #348]	@ (800129c <MX_TIM1_Init+0x1a0>)
 800113e:	4a58      	ldr	r2, [pc, #352]	@ (80012a0 <MX_TIM1_Init+0x1a4>)
 8001140:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170000-1;
 8001142:	4b56      	ldr	r3, [pc, #344]	@ (800129c <MX_TIM1_Init+0x1a0>)
 8001144:	4a57      	ldr	r2, [pc, #348]	@ (80012a4 <MX_TIM1_Init+0x1a8>)
 8001146:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001148:	4b54      	ldr	r3, [pc, #336]	@ (800129c <MX_TIM1_Init+0x1a0>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800114e:	4b53      	ldr	r3, [pc, #332]	@ (800129c <MX_TIM1_Init+0x1a0>)
 8001150:	2263      	movs	r2, #99	@ 0x63
 8001152:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001154:	4b51      	ldr	r3, [pc, #324]	@ (800129c <MX_TIM1_Init+0x1a0>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800115a:	4b50      	ldr	r3, [pc, #320]	@ (800129c <MX_TIM1_Init+0x1a0>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001160:	4b4e      	ldr	r3, [pc, #312]	@ (800129c <MX_TIM1_Init+0x1a0>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001166:	484d      	ldr	r0, [pc, #308]	@ (800129c <MX_TIM1_Init+0x1a0>)
 8001168:	f002 fe38 	bl	8003ddc <HAL_TIM_Base_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001172:	f000 fe99 	bl	8001ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001176:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800117a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800117c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001180:	4619      	mov	r1, r3
 8001182:	4846      	ldr	r0, [pc, #280]	@ (800129c <MX_TIM1_Init+0x1a0>)
 8001184:	f003 fc76 	bl	8004a74 <HAL_TIM_ConfigClockSource>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800118e:	f000 fe8b 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001192:	4842      	ldr	r0, [pc, #264]	@ (800129c <MX_TIM1_Init+0x1a0>)
 8001194:	f002 ff62 	bl	800405c <HAL_TIM_PWM_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800119e:	f000 fe83 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b2:	4619      	mov	r1, r3
 80011b4:	4839      	ldr	r0, [pc, #228]	@ (800129c <MX_TIM1_Init+0x1a0>)
 80011b6:	f004 fa3b 	bl	8005630 <HAL_TIMEx_MasterConfigSynchronization>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80011c0:	f000 fe72 	bl	8001ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c4:	2360      	movs	r3, #96	@ 0x60
 80011c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011cc:	2300      	movs	r3, #0
 80011ce:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011d0:	2300      	movs	r3, #0
 80011d2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	482c      	ldr	r0, [pc, #176]	@ (800129c <MX_TIM1_Init+0x1a0>)
 80011ea:	f003 fb2f 	bl	800484c <HAL_TIM_PWM_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80011f4:	f000 fe58 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011fc:	2204      	movs	r2, #4
 80011fe:	4619      	mov	r1, r3
 8001200:	4826      	ldr	r0, [pc, #152]	@ (800129c <MX_TIM1_Init+0x1a0>)
 8001202:	f003 fb23 	bl	800484c <HAL_TIM_PWM_ConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800120c:	f000 fe4c 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001210:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001214:	2208      	movs	r2, #8
 8001216:	4619      	mov	r1, r3
 8001218:	4820      	ldr	r0, [pc, #128]	@ (800129c <MX_TIM1_Init+0x1a0>)
 800121a:	f003 fb17 	bl	800484c <HAL_TIM_PWM_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001224:	f000 fe40 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001228:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800122c:	220c      	movs	r2, #12
 800122e:	4619      	mov	r1, r3
 8001230:	481a      	ldr	r0, [pc, #104]	@ (800129c <MX_TIM1_Init+0x1a0>)
 8001232:	f003 fb0b 	bl	800484c <HAL_TIM_PWM_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800123c:	f000 fe34 	bl	8001ea8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001254:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001258:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001266:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800126a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001270:	2300      	movs	r3, #0
 8001272:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	4619      	mov	r1, r3
 800127c:	4807      	ldr	r0, [pc, #28]	@ (800129c <MX_TIM1_Init+0x1a0>)
 800127e:	f004 fa6d 	bl	800575c <HAL_TIMEx_ConfigBreakDeadTime>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8001288:	f000 fe0e 	bl	8001ea8 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 800128c:	4803      	ldr	r0, [pc, #12]	@ (800129c <MX_TIM1_Init+0x1a0>)
 800128e:	f001 f805 	bl	800229c <HAL_TIM_MspPostInit>

}
 8001292:	bf00      	nop
 8001294:	3770      	adds	r7, #112	@ 0x70
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200001ec 	.word	0x200001ec
 80012a0:	40012c00 	.word	0x40012c00
 80012a4:	0002980f 	.word	0x0002980f

080012a8 <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	@ 0x30
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	2224      	movs	r2, #36	@ 0x24
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f007 fbb5 	bl	8008a26 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	463b      	mov	r3, r7
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012c6:	4b21      	ldr	r3, [pc, #132]	@ (800134c <MX_TIM3_Init+0xa4>)
 80012c8:	4a21      	ldr	r2, [pc, #132]	@ (8001350 <MX_TIM3_Init+0xa8>)
 80012ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012cc:	4b1f      	ldr	r3, [pc, #124]	@ (800134c <MX_TIM3_Init+0xa4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b1e      	ldr	r3, [pc, #120]	@ (800134c <MX_TIM3_Init+0xa4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012d8:	4b1c      	ldr	r3, [pc, #112]	@ (800134c <MX_TIM3_Init+0xa4>)
 80012da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <MX_TIM3_Init+0xa4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e6:	4b19      	ldr	r3, [pc, #100]	@ (800134c <MX_TIM3_Init+0xa4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012ec:	2303      	movs	r3, #3
 80012ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012f4:	2301      	movs	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001304:	2301      	movs	r3, #1
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	4619      	mov	r1, r3
 8001316:	480d      	ldr	r0, [pc, #52]	@ (800134c <MX_TIM3_Init+0xa4>)
 8001318:	f003 f814 	bl	8004344 <HAL_TIM_Encoder_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001322:	f000 fdc1 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001326:	2300      	movs	r3, #0
 8001328:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800132e:	463b      	mov	r3, r7
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	@ (800134c <MX_TIM3_Init+0xa4>)
 8001334:	f004 f97c 	bl	8005630 <HAL_TIMEx_MasterConfigSynchronization>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800133e:	f000 fdb3 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	3730      	adds	r7, #48	@ 0x30
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000238 	.word	0x20000238
 8001350:	40000400 	.word	0x40000400

08001354 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08c      	sub	sp, #48	@ 0x30
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	2224      	movs	r2, #36	@ 0x24
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f007 fb5f 	bl	8008a26 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	463b      	mov	r3, r7
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001372:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <MX_TIM4_Init+0xa4>)
 8001374:	4a21      	ldr	r2, [pc, #132]	@ (80013fc <MX_TIM4_Init+0xa8>)
 8001376:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001378:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <MX_TIM4_Init+0xa4>)
 800137a:	2200      	movs	r2, #0
 800137c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137e:	4b1e      	ldr	r3, [pc, #120]	@ (80013f8 <MX_TIM4_Init+0xa4>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001384:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <MX_TIM4_Init+0xa4>)
 8001386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800138a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138c:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <MX_TIM4_Init+0xa4>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <MX_TIM4_Init+0xa4>)
 8001394:	2280      	movs	r2, #128	@ 0x80
 8001396:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001398:	2303      	movs	r3, #3
 800139a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800139c:	2300      	movs	r3, #0
 800139e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013a0:	2301      	movs	r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80013a8:	230a      	movs	r3, #10
 80013aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013b0:	2301      	movs	r3, #1
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	4619      	mov	r1, r3
 80013c2:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <MX_TIM4_Init+0xa4>)
 80013c4:	f002 ffbe 	bl	8004344 <HAL_TIM_Encoder_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80013ce:	f000 fd6b 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013da:	463b      	mov	r3, r7
 80013dc:	4619      	mov	r1, r3
 80013de:	4806      	ldr	r0, [pc, #24]	@ (80013f8 <MX_TIM4_Init+0xa4>)
 80013e0:	f004 f926 	bl	8005630 <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80013ea:	f000 fd5d 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	3730      	adds	r7, #48	@ 0x30
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000284 	.word	0x20000284
 80013fc:	40000800 	.word	0x40000800

08001400 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	@ 0x30
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	2224      	movs	r2, #36	@ 0x24
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f007 fb09 	bl	8008a26 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001414:	463b      	mov	r3, r7
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800141e:	4b21      	ldr	r3, [pc, #132]	@ (80014a4 <MX_TIM5_Init+0xa4>)
 8001420:	4a21      	ldr	r2, [pc, #132]	@ (80014a8 <MX_TIM5_Init+0xa8>)
 8001422:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001424:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <MX_TIM5_Init+0xa4>)
 8001426:	2200      	movs	r2, #0
 8001428:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142a:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <MX_TIM5_Init+0xa4>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8001430:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <MX_TIM5_Init+0xa4>)
 8001432:	f04f 32ff 	mov.w	r2, #4294967295
 8001436:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001438:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <MX_TIM5_Init+0xa4>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143e:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <MX_TIM5_Init+0xa4>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001444:	2303      	movs	r3, #3
 8001446:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800144c:	2301      	movs	r3, #1
 800144e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800145c:	2301      	movs	r3, #1
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	@ (80014a4 <MX_TIM5_Init+0xa4>)
 8001470:	f002 ff68 	bl	8004344 <HAL_TIM_Encoder_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800147a:	f000 fd15 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001486:	463b      	mov	r3, r7
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	@ (80014a4 <MX_TIM5_Init+0xa4>)
 800148c:	f004 f8d0 	bl	8005630 <HAL_TIMEx_MasterConfigSynchronization>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001496:	f000 fd07 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	3730      	adds	r7, #48	@ 0x30
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200002d0 	.word	0x200002d0
 80014a8:	40000c00 	.word	0x40000c00

080014ac <MX_TIM7_Init>:

void MX_TIM7_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80014bc:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <MX_TIM7_Init+0x64>)
 80014be:	4a15      	ldr	r2, [pc, #84]	@ (8001514 <MX_TIM7_Init+0x68>)
 80014c0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170-1;
 80014c2:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <MX_TIM7_Init+0x64>)
 80014c4:	22a9      	movs	r2, #169	@ 0xa9
 80014c6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <MX_TIM7_Init+0x64>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50000;
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <MX_TIM7_Init+0x64>)
 80014d0:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80014d4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <MX_TIM7_Init+0x64>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80014dc:	480c      	ldr	r0, [pc, #48]	@ (8001510 <MX_TIM7_Init+0x64>)
 80014de:	f002 fc7d 	bl	8003ddc <HAL_TIM_Base_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80014e8:	f000 fcde 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ec:	2300      	movs	r3, #0
 80014ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	@ (8001510 <MX_TIM7_Init+0x64>)
 80014fa:	f004 f899 	bl	8005630 <HAL_TIMEx_MasterConfigSynchronization>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001504:	f000 fcd0 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	2000031c 	.word	0x2000031c
 8001514:	40001400 	.word	0x40001400

08001518 <MX_TIM8_Init>:

void MX_TIM8_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08c      	sub	sp, #48	@ 0x30
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800151e:	f107 030c 	add.w	r3, r7, #12
 8001522:	2224      	movs	r2, #36	@ 0x24
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f007 fa7d 	bl	8008a26 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152c:	463b      	mov	r3, r7
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001536:	4b23      	ldr	r3, [pc, #140]	@ (80015c4 <MX_TIM8_Init+0xac>)
 8001538:	4a23      	ldr	r2, [pc, #140]	@ (80015c8 <MX_TIM8_Init+0xb0>)
 800153a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800153c:	4b21      	ldr	r3, [pc, #132]	@ (80015c4 <MX_TIM8_Init+0xac>)
 800153e:	2200      	movs	r2, #0
 8001540:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001542:	4b20      	ldr	r3, [pc, #128]	@ (80015c4 <MX_TIM8_Init+0xac>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001548:	4b1e      	ldr	r3, [pc, #120]	@ (80015c4 <MX_TIM8_Init+0xac>)
 800154a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800154e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001550:	4b1c      	ldr	r3, [pc, #112]	@ (80015c4 <MX_TIM8_Init+0xac>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001556:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <MX_TIM8_Init+0xac>)
 8001558:	2200      	movs	r2, #0
 800155a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155c:	4b19      	ldr	r3, [pc, #100]	@ (80015c4 <MX_TIM8_Init+0xac>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001562:	2303      	movs	r3, #3
 8001564:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800156a:	2301      	movs	r3, #1
 800156c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800157a:	2301      	movs	r3, #1
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	4619      	mov	r1, r3
 800158c:	480d      	ldr	r0, [pc, #52]	@ (80015c4 <MX_TIM8_Init+0xac>)
 800158e:	f002 fed9 	bl	8004344 <HAL_TIM_Encoder_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001598:	f000 fc86 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015a0:	2300      	movs	r3, #0
 80015a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015a8:	463b      	mov	r3, r7
 80015aa:	4619      	mov	r1, r3
 80015ac:	4805      	ldr	r0, [pc, #20]	@ (80015c4 <MX_TIM8_Init+0xac>)
 80015ae:	f004 f83f 	bl	8005630 <HAL_TIMEx_MasterConfigSynchronization>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80015b8:	f000 fc76 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	3730      	adds	r7, #48	@ 0x30
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000368 	.word	0x20000368
 80015c8:	40013400 	.word	0x40013400

080015cc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80015d0:	4b21      	ldr	r3, [pc, #132]	@ (8001658 <MX_LPUART1_UART_Init+0x8c>)
 80015d2:	4a22      	ldr	r2, [pc, #136]	@ (800165c <MX_LPUART1_UART_Init+0x90>)
 80015d4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80015d6:	4b20      	ldr	r3, [pc, #128]	@ (8001658 <MX_LPUART1_UART_Init+0x8c>)
 80015d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015dc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015de:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <MX_LPUART1_UART_Init+0x8c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80015e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001658 <MX_LPUART1_UART_Init+0x8c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80015ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <MX_LPUART1_UART_Init+0x8c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80015f0:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <MX_LPUART1_UART_Init+0x8c>)
 80015f2:	220c      	movs	r2, #12
 80015f4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f6:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <MX_LPUART1_UART_Init+0x8c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015fc:	4b16      	ldr	r3, [pc, #88]	@ (8001658 <MX_LPUART1_UART_Init+0x8c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <MX_LPUART1_UART_Init+0x8c>)
 8001604:	2200      	movs	r2, #0
 8001606:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001608:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <MX_LPUART1_UART_Init+0x8c>)
 800160a:	2200      	movs	r2, #0
 800160c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800160e:	4812      	ldr	r0, [pc, #72]	@ (8001658 <MX_LPUART1_UART_Init+0x8c>)
 8001610:	f004 f97e 	bl	8005910 <HAL_UART_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800161a:	f000 fc45 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800161e:	2100      	movs	r1, #0
 8001620:	480d      	ldr	r0, [pc, #52]	@ (8001658 <MX_LPUART1_UART_Init+0x8c>)
 8001622:	f006 f9d6 	bl	80079d2 <HAL_UARTEx_SetTxFifoThreshold>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800162c:	f000 fc3c 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001630:	2100      	movs	r1, #0
 8001632:	4809      	ldr	r0, [pc, #36]	@ (8001658 <MX_LPUART1_UART_Init+0x8c>)
 8001634:	f006 fa0b 	bl	8007a4e <HAL_UARTEx_SetRxFifoThreshold>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800163e:	f000 fc33 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001642:	4805      	ldr	r0, [pc, #20]	@ (8001658 <MX_LPUART1_UART_Init+0x8c>)
 8001644:	f006 f98c 	bl	8007960 <HAL_UARTEx_DisableFifoMode>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800164e:	f000 fc2b 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000448 	.word	0x20000448
 800165c:	40008000 	.word	0x40008000

08001660 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001664:	4b22      	ldr	r3, [pc, #136]	@ (80016f0 <MX_USART1_UART_Init+0x90>)
 8001666:	4a23      	ldr	r2, [pc, #140]	@ (80016f4 <MX_USART1_UART_Init+0x94>)
 8001668:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800166a:	4b21      	ldr	r3, [pc, #132]	@ (80016f0 <MX_USART1_UART_Init+0x90>)
 800166c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001670:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b1f      	ldr	r3, [pc, #124]	@ (80016f0 <MX_USART1_UART_Init+0x90>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <MX_USART1_UART_Init+0x90>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800167e:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <MX_USART1_UART_Init+0x90>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b1a      	ldr	r3, [pc, #104]	@ (80016f0 <MX_USART1_UART_Init+0x90>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b19      	ldr	r3, [pc, #100]	@ (80016f0 <MX_USART1_UART_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <MX_USART1_UART_Init+0x90>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001696:	4b16      	ldr	r3, [pc, #88]	@ (80016f0 <MX_USART1_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800169c:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <MX_USART1_UART_Init+0x90>)
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a2:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <MX_USART1_UART_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a8:	4811      	ldr	r0, [pc, #68]	@ (80016f0 <MX_USART1_UART_Init+0x90>)
 80016aa:	f004 f931 	bl	8005910 <HAL_UART_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016b4:	f000 fbf8 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b8:	2100      	movs	r1, #0
 80016ba:	480d      	ldr	r0, [pc, #52]	@ (80016f0 <MX_USART1_UART_Init+0x90>)
 80016bc:	f006 f989 	bl	80079d2 <HAL_UARTEx_SetTxFifoThreshold>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016c6:	f000 fbef 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ca:	2100      	movs	r1, #0
 80016cc:	4808      	ldr	r0, [pc, #32]	@ (80016f0 <MX_USART1_UART_Init+0x90>)
 80016ce:	f006 f9be 	bl	8007a4e <HAL_UARTEx_SetRxFifoThreshold>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016d8:	f000 fbe6 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016dc:	4804      	ldr	r0, [pc, #16]	@ (80016f0 <MX_USART1_UART_Init+0x90>)
 80016de:	f006 f93f 	bl	8007960 <HAL_UARTEx_DisableFifoMode>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016e8:	f000 fbde 	bl	8001ea8 <Error_Handler>
  }

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200003b4 	.word	0x200003b4
 80016f4:	40013800 	.word	0x40013800

080016f8 <L298N_init>:
				TIM_HandleTypeDef* pwm_timer_,
				GPIO_TypeDef* GPIOx_1_,
				uint16_t GPIO_Pin_1_,
				GPIO_TypeDef* GPIOx_2_,
				uint16_t GPIO_Pin_2_)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	603b      	str	r3, [r7, #0]
	L298N_driver->current_PWM = 0;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	721a      	strb	r2, [r3, #8]
	L298N_driver->pwm_timer = pwm_timer_;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	605a      	str	r2, [r3, #4]
	L298N_driver->pwm_channel=pwm_channel_;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	601a      	str	r2, [r3, #0]
	L298N_driver->GPIOx_1 =GPIOx_1_;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	60da      	str	r2, [r3, #12]
	L298N_driver->GPIO_Pin_1 = GPIO_Pin_1_;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8b3a      	ldrh	r2, [r7, #24]
 8001722:	821a      	strh	r2, [r3, #16]
	L298N_driver->GPIOx_2 = GPIOx_2_;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	615a      	str	r2, [r3, #20]
	L298N_driver->GPIO_Pin_2 = GPIO_Pin_2_;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8c3a      	ldrh	r2, [r7, #32]
 800172e:	831a      	strh	r2, [r3, #24]

}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <L298N_update_pwm>:


void L298N_update_pwm(L298N_driver* L298_driver, uint8_t new_pwm_count)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	70fb      	strb	r3, [r7, #3]
	L298_driver->current_PWM = new_pwm_count;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	78fa      	ldrb	r2, [r7, #3]
 800174c:	721a      	strb	r2, [r3, #8]
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d106      	bne.n	8001764 <L298N_update_pwm+0x28>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7a1a      	ldrb	r2, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001762:	e036      	b.n	80017d2 <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b04      	cmp	r3, #4
 800176a:	d107      	bne.n	800177c <L298N_update_pwm+0x40>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	7a19      	ldrb	r1, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	460b      	mov	r3, r1
 8001778:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800177a:	e02a      	b.n	80017d2 <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b08      	cmp	r3, #8
 8001782:	d107      	bne.n	8001794 <L298N_update_pwm+0x58>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7a19      	ldrb	r1, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	460b      	mov	r3, r1
 8001790:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001792:	e01e      	b.n	80017d2 <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b0c      	cmp	r3, #12
 800179a:	d107      	bne.n	80017ac <L298N_update_pwm+0x70>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7a19      	ldrb	r1, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	460b      	mov	r3, r1
 80017a8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80017aa:	e012      	b.n	80017d2 <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b10      	cmp	r3, #16
 80017b2:	d107      	bne.n	80017c4 <L298N_update_pwm+0x88>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	7a19      	ldrb	r1, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	460b      	mov	r3, r1
 80017c0:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80017c2:	e006      	b.n	80017d2 <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	7a19      	ldrb	r1, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	460b      	mov	r3, r1
 80017d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <L298N_set_input_configuration>:


void L298N_set_input_configuration(L298N_driver* L298_driver, E_L298N_MODE l298n_mode)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	460b      	mov	r3, r1
 80017e8:	70fb      	strb	r3, [r7, #3]

	if(l298n_mode == BACKWARD)
 80017ea:	78fb      	ldrb	r3, [r7, #3]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d110      	bne.n	8001812 <L298N_set_input_configuration+0x34>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_SET);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68d8      	ldr	r0, [r3, #12]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	8a1b      	ldrh	r3, [r3, #16]
 80017f8:	2201      	movs	r2, #1
 80017fa:	4619      	mov	r1, r3
 80017fc:	f001 fa74 	bl	8002ce8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6958      	ldr	r0, [r3, #20]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	8b1b      	ldrh	r3, [r3, #24]
 8001808:	2200      	movs	r2, #0
 800180a:	4619      	mov	r1, r3
 800180c:	f001 fa6c 	bl	8002ce8 <HAL_GPIO_WritePin>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
	}

}
 8001810:	e026      	b.n	8001860 <L298N_set_input_configuration+0x82>
	}else if(l298n_mode == FORWARD)
 8001812:	78fb      	ldrb	r3, [r7, #3]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d110      	bne.n	800183a <L298N_set_input_configuration+0x5c>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68d8      	ldr	r0, [r3, #12]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	8a1b      	ldrh	r3, [r3, #16]
 8001820:	2200      	movs	r2, #0
 8001822:	4619      	mov	r1, r3
 8001824:	f001 fa60 	bl	8002ce8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_SET);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6958      	ldr	r0, [r3, #20]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	8b1b      	ldrh	r3, [r3, #24]
 8001830:	2201      	movs	r2, #1
 8001832:	4619      	mov	r1, r3
 8001834:	f001 fa58 	bl	8002ce8 <HAL_GPIO_WritePin>
}
 8001838:	e012      	b.n	8001860 <L298N_set_input_configuration+0x82>
	else if(l298n_mode == STOP)
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d10f      	bne.n	8001860 <L298N_set_input_configuration+0x82>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68d8      	ldr	r0, [r3, #12]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	8a1b      	ldrh	r3, [r3, #16]
 8001848:	2200      	movs	r2, #0
 800184a:	4619      	mov	r1, r3
 800184c:	f001 fa4c 	bl	8002ce8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6958      	ldr	r0, [r3, #20]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	8b1b      	ldrh	r3, [r3, #24]
 8001858:	2200      	movs	r2, #0
 800185a:	4619      	mov	r1, r3
 800185c:	f001 fa44 	bl	8002ce8 <HAL_GPIO_WritePin>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <init_encoder_info>:
 */

#include "encoder_driver.h"

void init_encoder_info(EncoderInfo* encoder_info, TIM_HandleTypeDef* encoder_timer_)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
	encoder_info->encoder_timer=encoder_timer_;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	601a      	str	r2, [r3, #0]

}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <update_encoder_info>:

void update_encoder_info(EncoderInfo* encoder_info)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]

	encoder_info->last_counter_value = encoder_info->counter_value;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	889a      	ldrh	r2, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	80da      	strh	r2, [r3, #6]
	encoder_info->counter_value = __HAL_TIM_GET_COUNTER(encoder_info->encoder_timer);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189c:	b29a      	uxth	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	809a      	strh	r2, [r3, #4]

}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <init_motor>:
		MotorState *motor_state_,
		TIM_HandleTypeDef *updater_tim_,
		EncoderInfo *enc_inf_param_,
		PIDController *pid_controller_,
		L298N_driver *L298N_)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b085      	sub	sp, #20
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	603b      	str	r3, [r7, #0]
	motor_struct->motor_state = motor_state_;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	601a      	str	r2, [r3, #0]
	motor_struct->motor_updater_tim = updater_tim_;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	60da      	str	r2, [r3, #12]
	motor_struct->encoder_info = enc_inf_param_;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	609a      	str	r2, [r3, #8]
	motor_struct->L298N_driver = L298N_;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	611a      	str	r2, [r3, #16]
	motor_struct->pid_controller = pid_controller_;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	605a      	str	r2, [r3, #4]

}
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <regulate_velocity>:


void regulate_velocity(MotorStruct *motor_struct)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b084      	sub	sp, #16
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]

	MotorState* current_motor_state = motor_struct->motor_state;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	60fb      	str	r3, [r7, #12]
	uint16_t pwm_value = pid_calculate(	motor_struct->pid_controller,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	ed93 7a00 	vldr	s14, [r3]
 8001904:	eef0 0a47 	vmov.f32	s1, s14
 8001908:	eeb0 0a67 	vmov.f32	s0, s15
 800190c:	4610      	mov	r0, r2
 800190e:	f000 f8df 	bl	8001ad0 <pid_calculate>
 8001912:	4603      	mov	r3, r0
 8001914:	817b      	strh	r3, [r7, #10]
										current_motor_state->set_velocity,
										current_motor_state->measured_velocity);
	uint8_t saturated_pwm_value = saturate_pwm(pwm_value);
 8001916:	897b      	ldrh	r3, [r7, #10]
 8001918:	4618      	mov	r0, r3
 800191a:	f000 f99d 	bl	8001c58 <saturate_pwm>
 800191e:	4603      	mov	r3, r0
 8001920:	727b      	strb	r3, [r7, #9]
	L298N_update_pwm(motor_struct->L298N_driver, saturated_pwm_value);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	7a7a      	ldrb	r2, [r7, #9]
 8001928:	4611      	mov	r1, r2
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff06 	bl	800173c <L298N_update_pwm>

}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <update_motor_position>:



void update_motor_position(MotorState* motor_state, EncoderInfo* encoder_info)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]

	motor_state->last_position = motor_state->position;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	60da      	str	r2, [r3, #12]
	update_encoder_info(encoder_info);
 800194a:	6838      	ldr	r0, [r7, #0]
 800194c:	f7ff ff9a 	bl	8001884 <update_encoder_info>
	int16_t encoder_diff = encoder_info->counter_value - encoder_info->last_counter_value;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	889a      	ldrh	r2, [r3, #4]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	88db      	ldrh	r3, [r3, #6]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	b29b      	uxth	r3, r3
 800195c:	82bb      	strh	r3, [r7, #20]
	int16_t position_change = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	82fb      	strh	r3, [r7, #22]
	//encoder increase
	if (encoder_diff > 0){
 8001962:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001966:	2b00      	cmp	r3, #0
 8001968:	dd1f      	ble.n	80019aa <update_motor_position+0x72>

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	2b10      	cmp	r3, #16
 8001978:	d114      	bne.n	80019a4 <update_motor_position+0x6c>

			uint16_t postreload_count = abs(encoder_info->counter_value - __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	889b      	ldrh	r3, [r3, #4]
 800197e:	461a      	mov	r2, r3
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	bfb8      	it	lt
 800198e:	425b      	neglt	r3, r3
 8001990:	81fb      	strh	r3, [r7, #14]
			position_change = -(encoder_info->last_counter_value + postreload_count); //- because its decreasing
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	88da      	ldrh	r2, [r3, #6]
 8001996:	89fb      	ldrh	r3, [r7, #14]
 8001998:	4413      	add	r3, r2
 800199a:	b29b      	uxth	r3, r3
 800199c:	425b      	negs	r3, r3
 800199e:	b29b      	uxth	r3, r3
 80019a0:	82fb      	strh	r3, [r7, #22]
 80019a2:	e023      	b.n	80019ec <update_motor_position+0xb4>

		}else{
			position_change = encoder_diff;
 80019a4:	8abb      	ldrh	r3, [r7, #20]
 80019a6:	82fb      	strh	r3, [r7, #22]
 80019a8:	e020      	b.n	80019ec <update_motor_position+0xb4>
		}
	}else if(encoder_diff < 0) //encoder decrease
 80019aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	da1c      	bge.n	80019ec <update_motor_position+0xb4>
	{
		if (!__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0310 	and.w	r3, r3, #16
 80019be:	2b10      	cmp	r3, #16
 80019c0:	d012      	beq.n	80019e8 <update_motor_position+0xb0>

			int16_t postreload_count = encoder_info->counter_value;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	889b      	ldrh	r3, [r3, #4]
 80019c6:	827b      	strh	r3, [r7, #18]
			int16_t prereload_count = __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer) - encoder_info->last_counter_value;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	88db      	ldrh	r3, [r3, #6]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	b29b      	uxth	r3, r3
 80019da:	823b      	strh	r3, [r7, #16]
			position_change = postreload_count + prereload_count;
 80019dc:	8a7a      	ldrh	r2, [r7, #18]
 80019de:	8a3b      	ldrh	r3, [r7, #16]
 80019e0:	4413      	add	r3, r2
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	82fb      	strh	r3, [r7, #22]
 80019e6:	e001      	b.n	80019ec <update_motor_position+0xb4>

		}else{
			position_change = encoder_diff;
 80019e8:	8abb      	ldrh	r3, [r7, #20]
 80019ea:	82fb      	strh	r3, [r7, #22]
		}
	}

	float position_change_rad = convert_to_radians(position_change);
 80019ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 f8fd 	bl	8001bf0 <convert_to_radians>
 80019f6:	ed87 0a02 	vstr	s0, [r7, #8]
	motor_state->position = motor_state->last_position - position_change_rad;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a00:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <set_velocity>:

void set_velocity(MotorState *motor_state, float velocity)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	ed87 0a00 	vstr	s0, [r7]
	motor_state->set_velocity = velocity;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	605a      	str	r2, [r3, #4]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <update_measured_velocity>:

void update_measured_velocity(MotorState* motor_state, float updater_timer_periods)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	ed87 0a00 	vstr	s0, [r7]

	float rotary_displacement_ = rotary_displacement(motor_state);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f80f 	bl	8001a64 <rotary_displacement>
 8001a46:	ed87 0a03 	vstr	s0, [r7, #12]
	motor_state->measured_velocity = (float)rotary_displacement_ /updater_timer_periods;
 8001a4a:	edd7 6a03 	vldr	s13, [r7, #12]
 8001a4e:	ed97 7a00 	vldr	s14, [r7]
 8001a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	edc3 7a00 	vstr	s15, [r3]

}
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <rotary_displacement>:

float rotary_displacement(MotorState *motor_state){
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

	return motor_state->position - motor_state->last_position;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a78:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <pid_init>:


#include "pid_controller.h"

void pid_init(PIDController *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b087      	sub	sp, #28
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6178      	str	r0, [r7, #20]
 8001a92:	ed87 0a04 	vstr	s0, [r7, #16]
 8001a96:	edc7 0a03 	vstr	s1, [r7, #12]
 8001a9a:	ed87 1a02 	vstr	s2, [r7, #8]
 8001a9e:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	615a      	str	r2, [r3, #20]
}
 8001ac4:	bf00      	nop
 8001ac6:	371c      	adds	r7, #28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <pid_calculate>:
	pid_data->previous_error = 0;
}


int pid_calculate(PIDController *pid_data, float setpoint, float process_variable)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	@ 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001adc:	edc7 0a01 	vstr	s1, [r7, #4]
	float error;
	float p_term, i_term, d_term;


	error = setpoint - process_variable;
 8001ae0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ae4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ae8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aec:	edc7 7a06 	vstr	s15, [r7, #24]
	pid_data->total_error += error;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001afc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b08:	ee17 2a90 	vmov	r2, s15
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b16:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1e:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	ee07 3a90 	vmov	s15, r3
 8001b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b38:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b4e:	edd7 6a06 	vldr	s13, [r7, #24]
 8001b52:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b5a:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	ee07 3a90 	vmov	s15, r3
 8001b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b6a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b76:	db08      	blt.n	8001b8a <pid_calculate+0xba>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	ee07 3a90 	vmov	s15, r3
 8001b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b84:	edc7 7a07 	vstr	s15, [r7, #28]
 8001b88:	e016      	b.n	8001bb8 <pid_calculate+0xe8>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	425b      	negs	r3, r3
 8001b90:	ee07 3a90 	vmov	s15, r3
 8001b94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b98:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba4:	d808      	bhi.n	8001bb8 <pid_calculate+0xe8>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	425b      	negs	r3, r3
 8001bac:	ee07 3a90 	vmov	s15, r3
 8001bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb4:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;
 8001bb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc0:	ee17 2a90 	vmov	r2, s15
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);
 8001bc8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bcc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001be0:	ee17 3a90 	vmov	r3, s15
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3724      	adds	r7, #36	@ 0x24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <convert_to_radians>:
 *      Author: pawel
 */

#include "motor_features.h"

float convert_to_radians(int32_t enc_position){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

	return 2* M_PI * (float)enc_position / (float) ONE_ROTATION_TICKS;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	ee07 3a90 	vmov	s15, r3
 8001bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c02:	ee17 0a90 	vmov	r0, s15
 8001c06:	f7fe fcc7 	bl	8000598 <__aeabi_f2d>
 8001c0a:	a30f      	add	r3, pc, #60	@ (adr r3, 8001c48 <convert_to_radians+0x58>)
 8001c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c10:	f7fe fd1a 	bl	8000648 <__aeabi_dmul>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	a30c      	add	r3, pc, #48	@ (adr r3, 8001c50 <convert_to_radians+0x60>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	f7fe fe3b 	bl	800089c <__aeabi_ddiv>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f7fe ffe3 	bl	8000bf8 <__aeabi_d2f>
 8001c32:	4603      	mov	r3, r0
 8001c34:	ee07 3a90 	vmov	s15, r3

}
 8001c38:	eeb0 0a67 	vmov.f32	s0, s15
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	f3af 8000 	nop.w
 8001c48:	54442d18 	.word	0x54442d18
 8001c4c:	401921fb 	.word	0x401921fb
 8001c50:	00000000 	.word	0x00000000
 8001c54:	40ae6400 	.word	0x40ae6400

08001c58 <saturate_pwm>:


uint8_t saturate_pwm(int pwm_value){
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]


	if (pwm_value < 0){
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	da02      	bge.n	8001c6c <saturate_pwm+0x14>
		pwm_value = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	e004      	b.n	8001c76 <saturate_pwm+0x1e>
	}else if(pwm_value > 100){
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b64      	cmp	r3, #100	@ 0x64
 8001c70:	dd01      	ble.n	8001c76 <saturate_pwm+0x1e>
		pwm_value = 100;
 8001c72:	2364      	movs	r3, #100	@ 0x64
 8001c74:	607b      	str	r3, [r7, #4]
	}
	return (uint8_t)pwm_value;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	b2db      	uxtb	r3, r3

}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <CountPeriodS>:
 */

#include "timers_feature.h"

// Funkcja obliczająca okres w sekundach
float CountPeriodS(TIM_HandleTypeDef *htim) {
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b086      	sub	sp, #24
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
    uint32_t prescaler = htim->Init.Prescaler;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	617b      	str	r3, [r7, #20]
    uint32_t period = htim->Init.Period;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	613b      	str	r3, [r7, #16]
    uint32_t clock_freq = HAL_RCC_GetHCLKFreq();
 8001c9a:	f001 fda1 	bl	80037e0 <HAL_RCC_GetHCLKFreq>
 8001c9e:	60f8      	str	r0, [r7, #12]

    float period_seconds = (float)(prescaler * period) / (float)clock_freq;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	fb02 f303 	mul.w	r3, r2, r3
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	ee07 3a90 	vmov	s15, r3
 8001cb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cbe:	edc7 7a02 	vstr	s15, [r7, #8]

    return period_seconds;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	ee07 3a90 	vmov	s15, r3
}
 8001cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <main>:
uint8_t cmd_data[10];



int main(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af04      	add	r7, sp, #16

  HAL_Init();
 8001cda:	f000 fcbe 	bl	800265a <HAL_Init>
  SystemClock_Config();
 8001cde:	f7ff f953 	bl	8000f88 <SystemClock_Config>
  MX_GPIO_Init();
 8001ce2:	f7ff f99d 	bl	8001020 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001ce6:	f7ff fc71 	bl	80015cc <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8001cea:	f7ff fcb9 	bl	8001660 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001cee:	f7ff fa05 	bl	80010fc <MX_TIM1_Init>
  MX_TIM3_Init();
 8001cf2:	f7ff fad9 	bl	80012a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001cf6:	f7ff fb2d 	bl	8001354 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001cfa:	f7ff fb81 	bl	8001400 <MX_TIM5_Init>
  MX_TIM7_Init();
 8001cfe:	f7ff fbd5 	bl	80014ac <MX_TIM7_Init>
  MX_TIM8_Init();
 8001d02:	f7ff fc09 	bl	8001518 <MX_TIM8_Init>

  init_encoder_info(&encoder_info, &htim4);
 8001d06:	4934      	ldr	r1, [pc, #208]	@ (8001dd8 <main+0x104>)
 8001d08:	4834      	ldr	r0, [pc, #208]	@ (8001ddc <main+0x108>)
 8001d0a:	f7ff fdad 	bl	8001868 <init_encoder_info>
  L298N_init(&L298N_lb, TIM_CHANNEL_1, &htim1, GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_1);
 8001d0e:	2302      	movs	r3, #2
 8001d10:	9302      	str	r3, [sp, #8]
 8001d12:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	2301      	movs	r3, #1
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001d20:	4a2f      	ldr	r2, [pc, #188]	@ (8001de0 <main+0x10c>)
 8001d22:	2100      	movs	r1, #0
 8001d24:	482f      	ldr	r0, [pc, #188]	@ (8001de4 <main+0x110>)
 8001d26:	f7ff fce7 	bl	80016f8 <L298N_init>
  pid_init(&pid_controller, MOTOR_Kp , MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 8001d2a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d2e:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001d32:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8001de8 <main+0x114>
 8001d36:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8001dec <main+0x118>
 8001d3a:	482d      	ldr	r0, [pc, #180]	@ (8001df0 <main+0x11c>)
 8001d3c:	f7ff fea5 	bl	8001a8a <pid_init>
  init_motor(&motor, &lb_motor_state, &htim7, &encoder_info, &pid_controller, &L298N_lb);
 8001d40:	4b28      	ldr	r3, [pc, #160]	@ (8001de4 <main+0x110>)
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	4b2a      	ldr	r3, [pc, #168]	@ (8001df0 <main+0x11c>)
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	4b24      	ldr	r3, [pc, #144]	@ (8001ddc <main+0x108>)
 8001d4a:	4a2a      	ldr	r2, [pc, #168]	@ (8001df4 <main+0x120>)
 8001d4c:	492a      	ldr	r1, [pc, #168]	@ (8001df8 <main+0x124>)
 8001d4e:	482b      	ldr	r0, [pc, #172]	@ (8001dfc <main+0x128>)
 8001d50:	f7ff fdad 	bl	80018ae <init_motor>


  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8001d54:	4827      	ldr	r0, [pc, #156]	@ (8001df4 <main+0x120>)
 8001d56:	f002 f909 	bl	8003f6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim8);
 8001d5a:	4829      	ldr	r0, [pc, #164]	@ (8001e00 <main+0x12c>)
 8001d5c:	f002 f896 	bl	8003e8c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d60:	2100      	movs	r1, #0
 8001d62:	481f      	ldr	r0, [pc, #124]	@ (8001de0 <main+0x10c>)
 8001d64:	f002 f9dc 	bl	8004120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001d68:	2104      	movs	r1, #4
 8001d6a:	481d      	ldr	r0, [pc, #116]	@ (8001de0 <main+0x10c>)
 8001d6c:	f002 f9d8 	bl	8004120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001d70:	2108      	movs	r1, #8
 8001d72:	481b      	ldr	r0, [pc, #108]	@ (8001de0 <main+0x10c>)
 8001d74:	f002 f9d4 	bl	8004120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001d78:	210c      	movs	r1, #12
 8001d7a:	4819      	ldr	r0, [pc, #100]	@ (8001de0 <main+0x10c>)
 8001d7c:	f002 f9d0 	bl	8004120 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001d80:	213c      	movs	r1, #60	@ 0x3c
 8001d82:	4815      	ldr	r0, [pc, #84]	@ (8001dd8 <main+0x104>)
 8001d84:	f002 fb84 	bl	8004490 <HAL_TIM_Encoder_Start>

  updater_timer_periods = CountPeriodS(motor.motor_updater_tim);
 8001d88:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <main+0x128>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff7a 	bl	8001c86 <CountPeriodS>
 8001d92:	eef0 7a40 	vmov.f32	s15, s0
 8001d96:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <main+0x130>)
 8001d98:	edc3 7a00 	vstr	s15, [r3]
  L298N_set_input_configuration(&L298N_lb, FORWARD);
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	4811      	ldr	r0, [pc, #68]	@ (8001de4 <main+0x110>)
 8001da0:	f7ff fd1d 	bl	80017de <L298N_set_input_configuration>
  set_velocity(motor.motor_state, 4);
 8001da4:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <main+0x128>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fe32 	bl	8001a16 <set_velocity>

  /* USER CODE END 2 */
  HAL_UART_Receive_IT(&hlpuart1, cmd_data, 4);
 8001db2:	2204      	movs	r2, #4
 8001db4:	4914      	ldr	r1, [pc, #80]	@ (8001e08 <main+0x134>)
 8001db6:	4815      	ldr	r0, [pc, #84]	@ (8001e0c <main+0x138>)
 8001db8:	f003 fe88 	bl	8005acc <HAL_UART_Receive_IT>


  period = CountPeriodS(&htim7);
 8001dbc:	480d      	ldr	r0, [pc, #52]	@ (8001df4 <main+0x120>)
 8001dbe:	f7ff ff62 	bl	8001c86 <CountPeriodS>
 8001dc2:	eef0 7a40 	vmov.f32	s15, s0
 8001dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dca:	ee17 3a90 	vmov	r3, s15
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e10 <main+0x13c>)
 8001dd2:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8001dd4:	bf00      	nop
 8001dd6:	e7fd      	b.n	8001dd4 <main+0x100>
 8001dd8:	20000284 	.word	0x20000284
 8001ddc:	200004dc 	.word	0x200004dc
 8001de0:	200001ec 	.word	0x200001ec
 8001de4:	20000510 	.word	0x20000510
 8001de8:	40533333 	.word	0x40533333
 8001dec:	3d75c28f 	.word	0x3d75c28f
 8001df0:	200004f8 	.word	0x200004f8
 8001df4:	2000031c 	.word	0x2000031c
 8001df8:	2000052c 	.word	0x2000052c
 8001dfc:	200004e4 	.word	0x200004e4
 8001e00:	20000368 	.word	0x20000368
 8001e04:	20000540 	.word	0x20000540
 8001e08:	20000544 	.word	0x20000544
 8001e0c:	20000448 	.word	0x20000448
 8001e10:	2000053c 	.word	0x2000053c

08001e14 <HAL_UART_RxCpltCallback>:
  }

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&hlpuart1, cmd_data, 4);
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	490b      	ldr	r1, [pc, #44]	@ (8001e4c <HAL_UART_RxCpltCallback+0x38>)
 8001e20:	480b      	ldr	r0, [pc, #44]	@ (8001e50 <HAL_UART_RxCpltCallback+0x3c>)
 8001e22:	f003 fe53 	bl	8005acc <HAL_UART_Receive_IT>
  uint8_t my_data[] = "my_char";
 8001e26:	4a0b      	ldr	r2, [pc, #44]	@ (8001e54 <HAL_UART_RxCpltCallback+0x40>)
 8001e28:	f107 0308 	add.w	r3, r7, #8
 8001e2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e30:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_UART_Transmit(&hlpuart1,my_data, sizeof(my_data),10);// Sending in normal mode
 8001e34:	f107 0108 	add.w	r1, r7, #8
 8001e38:	230a      	movs	r3, #10
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	4804      	ldr	r0, [pc, #16]	@ (8001e50 <HAL_UART_RxCpltCallback+0x3c>)
 8001e3e:	f003 fdb7 	bl	80059b0 <HAL_UART_Transmit>

}
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000544 	.word	0x20000544
 8001e50:	20000448 	.word	0x20000448
 8001e54:	0800a888 	.word	0x0800a888

08001e58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

    if (htim->Instance == (TIM_TypeDef *)motor.motor_updater_tim->Instance) {
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d114      	bne.n	8001e98 <HAL_TIM_PeriodElapsedCallback+0x40>

    	update_motor_position(motor.motor_state, motor.encoder_info);
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a0b      	ldr	r2, [pc, #44]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e74:	6892      	ldr	r2, [r2, #8]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fd5d 	bl	8001938 <update_motor_position>

    	update_measured_velocity(motor.motor_state, updater_timer_periods);
 8001e7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a08      	ldr	r2, [pc, #32]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001e84:	edd2 7a00 	vldr	s15, [r2]
 8001e88:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fdd1 	bl	8001a34 <update_measured_velocity>
    	regulate_velocity(&motor);
 8001e92:	4803      	ldr	r0, [pc, #12]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e94:	f7ff fd27 	bl	80018e6 <regulate_velocity>
    }



//  /* USER CODE END Callback 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	200004e4 	.word	0x200004e4
 8001ea4:	20000540 	.word	0x20000540

08001ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eac:	b672      	cpsid	i
}
 8001eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb0:	bf00      	nop
 8001eb2:	e7fd      	b.n	8001eb0 <Error_Handler+0x8>

08001eb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eba:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed6:	4a08      	ldr	r2, [pc, #32]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001edc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ede:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001eea:	f000 ffb9 	bl	8002e60 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000

08001efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b0a0      	sub	sp, #128	@ 0x80
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f14:	f107 0318 	add.w	r3, r7, #24
 8001f18:	2254      	movs	r2, #84	@ 0x54
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f006 fd82 	bl	8008a26 <memset>
  if(huart->Instance==LPUART1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a41      	ldr	r2, [pc, #260]	@ (800202c <HAL_UART_MspInit+0x130>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d13f      	bne.n	8001fac <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001f30:	2300      	movs	r3, #0
 8001f32:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f34:	f107 0318 	add.w	r3, r7, #24
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f001 fd01 	bl	8003940 <HAL_RCCEx_PeriphCLKConfig>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f44:	f7ff ffb0 	bl	8001ea8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001f48:	4b39      	ldr	r3, [pc, #228]	@ (8002030 <HAL_UART_MspInit+0x134>)
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4c:	4a38      	ldr	r2, [pc, #224]	@ (8002030 <HAL_UART_MspInit+0x134>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001f54:	4b36      	ldr	r3, [pc, #216]	@ (8002030 <HAL_UART_MspInit+0x134>)
 8001f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f60:	4b33      	ldr	r3, [pc, #204]	@ (8002030 <HAL_UART_MspInit+0x134>)
 8001f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f64:	4a32      	ldr	r2, [pc, #200]	@ (8002030 <HAL_UART_MspInit+0x134>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f6c:	4b30      	ldr	r3, [pc, #192]	@ (8002030 <HAL_UART_MspInit+0x134>)
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f78:	230c      	movs	r3, #12
 8001f7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f84:	2300      	movs	r3, #0
 8001f86:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001f88:	230c      	movs	r3, #12
 8001f8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f90:	4619      	mov	r1, r3
 8001f92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f96:	f000 fd25 	bl	80029e4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	205b      	movs	r0, #91	@ 0x5b
 8001fa0:	f000 fc38 	bl	8002814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001fa4:	205b      	movs	r0, #91	@ 0x5b
 8001fa6:	f000 fc4f 	bl	8002848 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001faa:	e03a      	b.n	8002022 <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a20      	ldr	r2, [pc, #128]	@ (8002034 <HAL_UART_MspInit+0x138>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d135      	bne.n	8002022 <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fbe:	f107 0318 	add.w	r3, r7, #24
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f001 fcbc 	bl	8003940 <HAL_RCCEx_PeriphCLKConfig>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001fce:	f7ff ff6b 	bl	8001ea8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fd2:	4b17      	ldr	r3, [pc, #92]	@ (8002030 <HAL_UART_MspInit+0x134>)
 8001fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd6:	4a16      	ldr	r2, [pc, #88]	@ (8002030 <HAL_UART_MspInit+0x134>)
 8001fd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fde:	4b14      	ldr	r3, [pc, #80]	@ (8002030 <HAL_UART_MspInit+0x134>)
 8001fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fea:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <HAL_UART_MspInit+0x134>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fee:	4a10      	ldr	r2, [pc, #64]	@ (8002030 <HAL_UART_MspInit+0x134>)
 8001ff0:	f043 0304 	orr.w	r3, r3, #4
 8001ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <HAL_UART_MspInit+0x134>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002002:	2330      	movs	r3, #48	@ 0x30
 8002004:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200e:	2300      	movs	r3, #0
 8002010:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002012:	2307      	movs	r3, #7
 8002014:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002016:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800201a:	4619      	mov	r1, r3
 800201c:	4806      	ldr	r0, [pc, #24]	@ (8002038 <HAL_UART_MspInit+0x13c>)
 800201e:	f000 fce1 	bl	80029e4 <HAL_GPIO_Init>
}
 8002022:	bf00      	nop
 8002024:	3780      	adds	r7, #128	@ 0x80
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40008000 	.word	0x40008000
 8002030:	40021000 	.word	0x40021000
 8002034:	40013800 	.word	0x40013800
 8002038:	48000800 	.word	0x48000800

0800203c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a16      	ldr	r2, [pc, #88]	@ (80020a4 <HAL_TIM_Base_MspInit+0x68>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d10c      	bne.n	8002068 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800204e:	4b16      	ldr	r3, [pc, #88]	@ (80020a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002052:	4a15      	ldr	r2, [pc, #84]	@ (80020a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002054:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002058:	6613      	str	r3, [r2, #96]	@ 0x60
 800205a:	4b13      	ldr	r3, [pc, #76]	@ (80020a8 <HAL_TIM_Base_MspInit+0x6c>)
 800205c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002066:	e018      	b.n	800209a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0f      	ldr	r2, [pc, #60]	@ (80020ac <HAL_TIM_Base_MspInit+0x70>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d113      	bne.n	800209a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002072:	4b0d      	ldr	r3, [pc, #52]	@ (80020a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002076:	4a0c      	ldr	r2, [pc, #48]	@ (80020a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002078:	f043 0320 	orr.w	r3, r3, #32
 800207c:	6593      	str	r3, [r2, #88]	@ 0x58
 800207e:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2100      	movs	r1, #0
 800208e:	2037      	movs	r0, #55	@ 0x37
 8002090:	f000 fbc0 	bl	8002814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8002094:	2037      	movs	r0, #55	@ 0x37
 8002096:	f000 fbd7 	bl	8002848 <HAL_NVIC_EnableIRQ>
}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40012c00 	.word	0x40012c00
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40001400 	.word	0x40001400

080020b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b090      	sub	sp, #64	@ 0x40
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a6c      	ldr	r2, [pc, #432]	@ (8002280 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d129      	bne.n	8002126 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020d2:	4b6c      	ldr	r3, [pc, #432]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d6:	4a6b      	ldr	r2, [pc, #428]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80020de:	4b69      	ldr	r3, [pc, #420]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ea:	4b66      	ldr	r3, [pc, #408]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ee:	4a65      	ldr	r2, [pc, #404]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020f6:	4b63      	ldr	r3, [pc, #396]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002102:	2350      	movs	r3, #80	@ 0x50
 8002104:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002112:	2302      	movs	r3, #2
 8002114:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002116:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800211a:	4619      	mov	r1, r3
 800211c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002120:	f000 fc60 	bl	80029e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002124:	e0a7      	b.n	8002276 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM4)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a57      	ldr	r2, [pc, #348]	@ (8002288 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d12a      	bne.n	8002186 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002130:	4b54      	ldr	r3, [pc, #336]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002134:	4a53      	ldr	r2, [pc, #332]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	6593      	str	r3, [r2, #88]	@ 0x58
 800213c:	4b51      	ldr	r3, [pc, #324]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	623b      	str	r3, [r7, #32]
 8002146:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002148:	4b4e      	ldr	r3, [pc, #312]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800214a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214c:	4a4d      	ldr	r2, [pc, #308]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002154:	4b4b      	ldr	r3, [pc, #300]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002160:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002164:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002172:	230a      	movs	r3, #10
 8002174:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002176:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800217a:	4619      	mov	r1, r3
 800217c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002180:	f000 fc30 	bl	80029e4 <HAL_GPIO_Init>
}
 8002184:	e077      	b.n	8002276 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM5)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a40      	ldr	r2, [pc, #256]	@ (800228c <HAL_TIM_Encoder_MspInit+0x1dc>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d145      	bne.n	800221c <HAL_TIM_Encoder_MspInit+0x16c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002190:	4b3c      	ldr	r3, [pc, #240]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002194:	4a3b      	ldr	r2, [pc, #236]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002196:	f043 0308 	orr.w	r3, r3, #8
 800219a:	6593      	str	r3, [r2, #88]	@ 0x58
 800219c:	4b39      	ldr	r3, [pc, #228]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800219e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	61bb      	str	r3, [r7, #24]
 80021a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a8:	4b36      	ldr	r3, [pc, #216]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80021aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ac:	4a35      	ldr	r2, [pc, #212]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80021ae:	f043 0302 	orr.w	r3, r3, #2
 80021b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021b4:	4b33      	ldr	r3, [pc, #204]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80021b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c0:	4b30      	ldr	r3, [pc, #192]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80021c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80021c6:	f043 0304 	orr.w	r3, r3, #4
 80021ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80021ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021d8:	2304      	movs	r3, #4
 80021da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021e8:	2302      	movs	r3, #2
 80021ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021f0:	4619      	mov	r1, r3
 80021f2:	4827      	ldr	r0, [pc, #156]	@ (8002290 <HAL_TIM_Encoder_MspInit+0x1e0>)
 80021f4:	f000 fbf6 	bl	80029e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 800220a:	2301      	movs	r3, #1
 800220c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800220e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002212:	4619      	mov	r1, r3
 8002214:	481f      	ldr	r0, [pc, #124]	@ (8002294 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8002216:	f000 fbe5 	bl	80029e4 <HAL_GPIO_Init>
}
 800221a:	e02c      	b.n	8002276 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM8)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1d      	ldr	r2, [pc, #116]	@ (8002298 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d127      	bne.n	8002276 <HAL_TIM_Encoder_MspInit+0x1c6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002226:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800222a:	4a16      	ldr	r2, [pc, #88]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800222c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002230:	6613      	str	r3, [r2, #96]	@ 0x60
 8002232:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002236:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800223e:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002242:	4a10      	ldr	r2, [pc, #64]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800224a:	4b0e      	ldr	r3, [pc, #56]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800224c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002256:	23c0      	movs	r3, #192	@ 0xc0
 8002258:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002262:	2300      	movs	r3, #0
 8002264:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002266:	2304      	movs	r3, #4
 8002268:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800226a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800226e:	4619      	mov	r1, r3
 8002270:	4808      	ldr	r0, [pc, #32]	@ (8002294 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8002272:	f000 fbb7 	bl	80029e4 <HAL_GPIO_Init>
}
 8002276:	bf00      	nop
 8002278:	3740      	adds	r7, #64	@ 0x40
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40000400 	.word	0x40000400
 8002284:	40021000 	.word	0x40021000
 8002288:	40000800 	.word	0x40000800
 800228c:	40000c00 	.word	0x40000c00
 8002290:	48000400 	.word	0x48000400
 8002294:	48000800 	.word	0x48000800
 8002298:	40013400 	.word	0x40013400

0800229c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 030c 	add.w	r3, r7, #12
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a11      	ldr	r2, [pc, #68]	@ (8002300 <HAL_TIM_MspPostInit+0x64>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d11b      	bne.n	80022f6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022be:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <HAL_TIM_MspPostInit+0x68>)
 80022c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c2:	4a10      	ldr	r2, [pc, #64]	@ (8002304 <HAL_TIM_MspPostInit+0x68>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002304 <HAL_TIM_MspPostInit+0x68>)
 80022cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80022d6:	230f      	movs	r3, #15
 80022d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80022e6:	2302      	movs	r3, #2
 80022e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ea:	f107 030c 	add.w	r3, r7, #12
 80022ee:	4619      	mov	r1, r3
 80022f0:	4805      	ldr	r0, [pc, #20]	@ (8002308 <HAL_TIM_MspPostInit+0x6c>)
 80022f2:	f000 fb77 	bl	80029e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022f6:	bf00      	nop
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40012c00 	.word	0x40012c00
 8002304:	40021000 	.word	0x40021000
 8002308:	48000800 	.word	0x48000800

0800230c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08c      	sub	sp, #48	@ 0x30
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800231c:	4b2c      	ldr	r3, [pc, #176]	@ (80023d0 <HAL_InitTick+0xc4>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002320:	4a2b      	ldr	r2, [pc, #172]	@ (80023d0 <HAL_InitTick+0xc4>)
 8002322:	f043 0310 	orr.w	r3, r3, #16
 8002326:	6593      	str	r3, [r2, #88]	@ 0x58
 8002328:	4b29      	ldr	r3, [pc, #164]	@ (80023d0 <HAL_InitTick+0xc4>)
 800232a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002334:	f107 020c 	add.w	r2, r7, #12
 8002338:	f107 0310 	add.w	r3, r7, #16
 800233c:	4611      	mov	r1, r2
 800233e:	4618      	mov	r0, r3
 8002340:	f001 fa86 	bl	8003850 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002344:	f001 fa58 	bl	80037f8 <HAL_RCC_GetPCLK1Freq>
 8002348:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800234a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800234c:	4a21      	ldr	r2, [pc, #132]	@ (80023d4 <HAL_InitTick+0xc8>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0c9b      	lsrs	r3, r3, #18
 8002354:	3b01      	subs	r3, #1
 8002356:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002358:	4b1f      	ldr	r3, [pc, #124]	@ (80023d8 <HAL_InitTick+0xcc>)
 800235a:	4a20      	ldr	r2, [pc, #128]	@ (80023dc <HAL_InitTick+0xd0>)
 800235c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800235e:	4b1e      	ldr	r3, [pc, #120]	@ (80023d8 <HAL_InitTick+0xcc>)
 8002360:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002364:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002366:	4a1c      	ldr	r2, [pc, #112]	@ (80023d8 <HAL_InitTick+0xcc>)
 8002368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800236c:	4b1a      	ldr	r3, [pc, #104]	@ (80023d8 <HAL_InitTick+0xcc>)
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002372:	4b19      	ldr	r3, [pc, #100]	@ (80023d8 <HAL_InitTick+0xcc>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002378:	4817      	ldr	r0, [pc, #92]	@ (80023d8 <HAL_InitTick+0xcc>)
 800237a:	f001 fd2f 	bl	8003ddc <HAL_TIM_Base_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002384:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002388:	2b00      	cmp	r3, #0
 800238a:	d11b      	bne.n	80023c4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800238c:	4812      	ldr	r0, [pc, #72]	@ (80023d8 <HAL_InitTick+0xcc>)
 800238e:	f001 fded 	bl	8003f6c <HAL_TIM_Base_Start_IT>
 8002392:	4603      	mov	r3, r0
 8002394:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002398:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800239c:	2b00      	cmp	r3, #0
 800239e:	d111      	bne.n	80023c4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023a0:	2036      	movs	r0, #54	@ 0x36
 80023a2:	f000 fa51 	bl	8002848 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b0f      	cmp	r3, #15
 80023aa:	d808      	bhi.n	80023be <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80023ac:	2200      	movs	r2, #0
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	2036      	movs	r0, #54	@ 0x36
 80023b2:	f000 fa2f 	bl	8002814 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023b6:	4a0a      	ldr	r2, [pc, #40]	@ (80023e0 <HAL_InitTick+0xd4>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	e002      	b.n	80023c4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80023c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3730      	adds	r7, #48	@ 0x30
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	431bde83 	.word	0x431bde83
 80023d8:	20000550 	.word	0x20000550
 80023dc:	40001000 	.word	0x40001000
 80023e0:	20000004 	.word	0x20000004

080023e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <NMI_Handler+0x4>

080023ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <HardFault_Handler+0x4>

080023f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <MemManage_Handler+0x4>

080023fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <BusFault_Handler+0x4>

08002404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <UsageFault_Handler+0x4>

0800240c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002420:	4802      	ldr	r0, [pc, #8]	@ (800242c <TIM6_DAC_IRQHandler+0x10>)
 8002422:	f002 f8c3 	bl	80045ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000550 	.word	0x20000550

08002430 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002434:	4802      	ldr	r0, [pc, #8]	@ (8002440 <TIM7_DAC_IRQHandler+0x10>)
 8002436:	f002 f8b9 	bl	80045ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	2000031c 	.word	0x2000031c

08002444 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002448:	4802      	ldr	r0, [pc, #8]	@ (8002454 <LPUART1_IRQHandler+0x10>)
 800244a:	f003 fb8b 	bl	8005b64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000448 	.word	0x20000448

08002458 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
	return 1;
 800245c:	2301      	movs	r3, #1
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <_kill>:

int _kill(int pid, int sig)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002472:	f006 fb2b 	bl	8008acc <__errno>
 8002476:	4603      	mov	r3, r0
 8002478:	2216      	movs	r2, #22
 800247a:	601a      	str	r2, [r3, #0]
	return -1;
 800247c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_exit>:

void _exit (int status)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002490:	f04f 31ff 	mov.w	r1, #4294967295
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ffe7 	bl	8002468 <_kill>
	while (1) {}		/* Make sure we hang here */
 800249a:	bf00      	nop
 800249c:	e7fd      	b.n	800249a <_exit+0x12>

0800249e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b086      	sub	sp, #24
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	e00a      	b.n	80024c6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024b0:	f3af 8000 	nop.w
 80024b4:	4601      	mov	r1, r0
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	60ba      	str	r2, [r7, #8]
 80024bc:	b2ca      	uxtb	r2, r1
 80024be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	3301      	adds	r3, #1
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	dbf0      	blt.n	80024b0 <_read+0x12>
	}

return len;
 80024ce:	687b      	ldr	r3, [r7, #4]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	e009      	b.n	80024fe <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	60ba      	str	r2, [r7, #8]
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	3301      	adds	r3, #1
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	429a      	cmp	r2, r3
 8002504:	dbf1      	blt.n	80024ea <_write+0x12>
	}
	return len;
 8002506:	687b      	ldr	r3, [r7, #4]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <_close>:

int _close(int file)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
	return -1;
 8002518:	f04f 33ff 	mov.w	r3, #4294967295
}
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002538:	605a      	str	r2, [r3, #4]
	return 0;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <_isatty>:

int _isatty(int file)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	return 1;
 8002550:	2301      	movs	r3, #1
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800255e:	b480      	push	{r7}
 8002560:	b085      	sub	sp, #20
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
	return 0;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002580:	4a14      	ldr	r2, [pc, #80]	@ (80025d4 <_sbrk+0x5c>)
 8002582:	4b15      	ldr	r3, [pc, #84]	@ (80025d8 <_sbrk+0x60>)
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800258c:	4b13      	ldr	r3, [pc, #76]	@ (80025dc <_sbrk+0x64>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002594:	4b11      	ldr	r3, [pc, #68]	@ (80025dc <_sbrk+0x64>)
 8002596:	4a12      	ldr	r2, [pc, #72]	@ (80025e0 <_sbrk+0x68>)
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800259a:	4b10      	ldr	r3, [pc, #64]	@ (80025dc <_sbrk+0x64>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d207      	bcs.n	80025b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a8:	f006 fa90 	bl	8008acc <__errno>
 80025ac:	4603      	mov	r3, r0
 80025ae:	220c      	movs	r2, #12
 80025b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
 80025b6:	e009      	b.n	80025cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b8:	4b08      	ldr	r3, [pc, #32]	@ (80025dc <_sbrk+0x64>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025be:	4b07      	ldr	r3, [pc, #28]	@ (80025dc <_sbrk+0x64>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	4a05      	ldr	r2, [pc, #20]	@ (80025dc <_sbrk+0x64>)
 80025c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ca:	68fb      	ldr	r3, [r7, #12]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20020000 	.word	0x20020000
 80025d8:	00000400 	.word	0x00000400
 80025dc:	2000059c 	.word	0x2000059c
 80025e0:	20000780 	.word	0x20000780

080025e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025e8:	4b06      	ldr	r3, [pc, #24]	@ (8002604 <SystemInit+0x20>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ee:	4a05      	ldr	r2, [pc, #20]	@ (8002604 <SystemInit+0x20>)
 80025f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002608:	480d      	ldr	r0, [pc, #52]	@ (8002640 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800260a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800260c:	f7ff ffea 	bl	80025e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002610:	480c      	ldr	r0, [pc, #48]	@ (8002644 <LoopForever+0x6>)
  ldr r1, =_edata
 8002612:	490d      	ldr	r1, [pc, #52]	@ (8002648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002614:	4a0d      	ldr	r2, [pc, #52]	@ (800264c <LoopForever+0xe>)
  movs r3, #0
 8002616:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002618:	e002      	b.n	8002620 <LoopCopyDataInit>

0800261a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800261a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800261c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261e:	3304      	adds	r3, #4

08002620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002624:	d3f9      	bcc.n	800261a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002626:	4a0a      	ldr	r2, [pc, #40]	@ (8002650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002628:	4c0a      	ldr	r4, [pc, #40]	@ (8002654 <LoopForever+0x16>)
  movs r3, #0
 800262a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800262c:	e001      	b.n	8002632 <LoopFillZerobss>

0800262e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002630:	3204      	adds	r2, #4

08002632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002634:	d3fb      	bcc.n	800262e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002636:	f006 fa4f 	bl	8008ad8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800263a:	f7ff fb4b 	bl	8001cd4 <main>

0800263e <LoopForever>:

LoopForever:
    b LoopForever
 800263e:	e7fe      	b.n	800263e <LoopForever>
  ldr   r0, =_estack
 8002640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002648:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 800264c:	0800ac50 	.word	0x0800ac50
  ldr r2, =_sbss
 8002650:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8002654:	2000077c 	.word	0x2000077c

08002658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002658:	e7fe      	b.n	8002658 <ADC1_2_IRQHandler>

0800265a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002664:	2003      	movs	r0, #3
 8002666:	f000 f8ca 	bl	80027fe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800266a:	200f      	movs	r0, #15
 800266c:	f7ff fe4e 	bl	800230c <HAL_InitTick>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	71fb      	strb	r3, [r7, #7]
 800267a:	e001      	b.n	8002680 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800267c:	f7ff fc1a 	bl	8001eb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002680:	79fb      	ldrb	r3, [r7, #7]

}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return uwTick;
 8002690:	4b03      	ldr	r3, [pc, #12]	@ (80026a0 <HAL_GetTick+0x14>)
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	200005a0 	.word	0x200005a0

080026a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b4:	4b0c      	ldr	r3, [pc, #48]	@ (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026c0:	4013      	ands	r3, r2
 80026c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d6:	4a04      	ldr	r2, [pc, #16]	@ (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	60d3      	str	r3, [r2, #12]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f0:	4b04      	ldr	r3, [pc, #16]	@ (8002704 <__NVIC_GetPriorityGrouping+0x18>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	f003 0307 	and.w	r3, r3, #7
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	2b00      	cmp	r3, #0
 8002718:	db0b      	blt.n	8002732 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	f003 021f 	and.w	r2, r3, #31
 8002720:	4907      	ldr	r1, [pc, #28]	@ (8002740 <__NVIC_EnableIRQ+0x38>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	2001      	movs	r0, #1
 800272a:	fa00 f202 	lsl.w	r2, r0, r2
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000e100 	.word	0xe000e100

08002744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	db0a      	blt.n	800276e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	b2da      	uxtb	r2, r3
 800275c:	490c      	ldr	r1, [pc, #48]	@ (8002790 <__NVIC_SetPriority+0x4c>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	0112      	lsls	r2, r2, #4
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	440b      	add	r3, r1
 8002768:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800276c:	e00a      	b.n	8002784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4908      	ldr	r1, [pc, #32]	@ (8002794 <__NVIC_SetPriority+0x50>)
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	3b04      	subs	r3, #4
 800277c:	0112      	lsls	r2, r2, #4
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	440b      	add	r3, r1
 8002782:	761a      	strb	r2, [r3, #24]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000e100 	.word	0xe000e100
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	@ 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f1c3 0307 	rsb	r3, r3, #7
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	bf28      	it	cs
 80027b6:	2304      	movcs	r3, #4
 80027b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3304      	adds	r3, #4
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d902      	bls.n	80027c8 <NVIC_EncodePriority+0x30>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3b03      	subs	r3, #3
 80027c6:	e000      	b.n	80027ca <NVIC_EncodePriority+0x32>
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	f04f 32ff 	mov.w	r2, #4294967295
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	401a      	ands	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e0:	f04f 31ff 	mov.w	r1, #4294967295
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	43d9      	mvns	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f0:	4313      	orrs	r3, r2
         );
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3724      	adds	r7, #36	@ 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff ff4c 	bl	80026a4 <__NVIC_SetPriorityGrouping>
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002822:	f7ff ff63 	bl	80026ec <__NVIC_GetPriorityGrouping>
 8002826:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	68b9      	ldr	r1, [r7, #8]
 800282c:	6978      	ldr	r0, [r7, #20]
 800282e:	f7ff ffb3 	bl	8002798 <NVIC_EncodePriority>
 8002832:	4602      	mov	r2, r0
 8002834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ff82 	bl	8002744 <__NVIC_SetPriority>
}
 8002840:	bf00      	nop
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff ff56 	bl	8002708 <__NVIC_EnableIRQ>
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d005      	beq.n	8002888 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2204      	movs	r2, #4
 8002880:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
 8002886:	e037      	b.n	80028f8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 020e 	bic.w	r2, r2, #14
 8002896:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028a6:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0201 	bic.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028bc:	f003 021f 	and.w	r2, r3, #31
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	2101      	movs	r1, #1
 80028c6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ca:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028d4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00c      	beq.n	80028f8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028ec:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80028f6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002908:	7bfb      	ldrb	r3, [r7, #15]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d00d      	beq.n	800294a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2204      	movs	r2, #4
 8002932:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
 8002948:	e047      	b.n	80029da <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 020e 	bic.w	r2, r2, #14
 8002958:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0201 	bic.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002974:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002978:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297e:	f003 021f 	and.w	r2, r3, #31
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	2101      	movs	r1, #1
 8002988:	fa01 f202 	lsl.w	r2, r1, r2
 800298c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002996:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00c      	beq.n	80029ba <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029b8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4798      	blx	r3
    }
  }
  return status;
 80029da:	7bfb      	ldrb	r3, [r7, #15]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029f2:	e15a      	b.n	8002caa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2101      	movs	r1, #1
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002a00:	4013      	ands	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 814c 	beq.w	8002ca4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d005      	beq.n	8002a24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d130      	bne.n	8002a86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	2203      	movs	r2, #3
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	091b      	lsrs	r3, r3, #4
 8002a70:	f003 0201 	and.w	r2, r3, #1
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d017      	beq.n	8002ac2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d123      	bne.n	8002b16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	08da      	lsrs	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3208      	adds	r2, #8
 8002ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ada:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	220f      	movs	r2, #15
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	08da      	lsrs	r2, r3, #3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3208      	adds	r2, #8
 8002b10:	6939      	ldr	r1, [r7, #16]
 8002b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	2203      	movs	r2, #3
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0203 	and.w	r2, r3, #3
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 80a6 	beq.w	8002ca4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b58:	4b5b      	ldr	r3, [pc, #364]	@ (8002cc8 <HAL_GPIO_Init+0x2e4>)
 8002b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b5c:	4a5a      	ldr	r2, [pc, #360]	@ (8002cc8 <HAL_GPIO_Init+0x2e4>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b64:	4b58      	ldr	r3, [pc, #352]	@ (8002cc8 <HAL_GPIO_Init+0x2e4>)
 8002b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b70:	4a56      	ldr	r2, [pc, #344]	@ (8002ccc <HAL_GPIO_Init+0x2e8>)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	3302      	adds	r3, #2
 8002b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	220f      	movs	r2, #15
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b9a:	d01f      	beq.n	8002bdc <HAL_GPIO_Init+0x1f8>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a4c      	ldr	r2, [pc, #304]	@ (8002cd0 <HAL_GPIO_Init+0x2ec>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d019      	beq.n	8002bd8 <HAL_GPIO_Init+0x1f4>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a4b      	ldr	r2, [pc, #300]	@ (8002cd4 <HAL_GPIO_Init+0x2f0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d013      	beq.n	8002bd4 <HAL_GPIO_Init+0x1f0>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a4a      	ldr	r2, [pc, #296]	@ (8002cd8 <HAL_GPIO_Init+0x2f4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d00d      	beq.n	8002bd0 <HAL_GPIO_Init+0x1ec>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a49      	ldr	r2, [pc, #292]	@ (8002cdc <HAL_GPIO_Init+0x2f8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d007      	beq.n	8002bcc <HAL_GPIO_Init+0x1e8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a48      	ldr	r2, [pc, #288]	@ (8002ce0 <HAL_GPIO_Init+0x2fc>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d101      	bne.n	8002bc8 <HAL_GPIO_Init+0x1e4>
 8002bc4:	2305      	movs	r3, #5
 8002bc6:	e00a      	b.n	8002bde <HAL_GPIO_Init+0x1fa>
 8002bc8:	2306      	movs	r3, #6
 8002bca:	e008      	b.n	8002bde <HAL_GPIO_Init+0x1fa>
 8002bcc:	2304      	movs	r3, #4
 8002bce:	e006      	b.n	8002bde <HAL_GPIO_Init+0x1fa>
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e004      	b.n	8002bde <HAL_GPIO_Init+0x1fa>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e002      	b.n	8002bde <HAL_GPIO_Init+0x1fa>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <HAL_GPIO_Init+0x1fa>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	f002 0203 	and.w	r2, r2, #3
 8002be4:	0092      	lsls	r2, r2, #2
 8002be6:	4093      	lsls	r3, r2
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bee:	4937      	ldr	r1, [pc, #220]	@ (8002ccc <HAL_GPIO_Init+0x2e8>)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	089b      	lsrs	r3, r3, #2
 8002bf4:	3302      	adds	r3, #2
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bfc:	4b39      	ldr	r3, [pc, #228]	@ (8002ce4 <HAL_GPIO_Init+0x300>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c20:	4a30      	ldr	r2, [pc, #192]	@ (8002ce4 <HAL_GPIO_Init+0x300>)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c26:	4b2f      	ldr	r3, [pc, #188]	@ (8002ce4 <HAL_GPIO_Init+0x300>)
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4013      	ands	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c4a:	4a26      	ldr	r2, [pc, #152]	@ (8002ce4 <HAL_GPIO_Init+0x300>)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002c50:	4b24      	ldr	r3, [pc, #144]	@ (8002ce4 <HAL_GPIO_Init+0x300>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c74:	4a1b      	ldr	r2, [pc, #108]	@ (8002ce4 <HAL_GPIO_Init+0x300>)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce4 <HAL_GPIO_Init+0x300>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4013      	ands	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c9e:	4a11      	ldr	r2, [pc, #68]	@ (8002ce4 <HAL_GPIO_Init+0x300>)
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f47f ae9d 	bne.w	80029f4 <HAL_GPIO_Init+0x10>
  }
}
 8002cba:	bf00      	nop
 8002cbc:	bf00      	nop
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40010000 	.word	0x40010000
 8002cd0:	48000400 	.word	0x48000400
 8002cd4:	48000800 	.word	0x48000800
 8002cd8:	48000c00 	.word	0x48000c00
 8002cdc:	48001000 	.word	0x48001000
 8002ce0:	48001400 	.word	0x48001400
 8002ce4:	40010400 	.word	0x40010400

08002ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	807b      	strh	r3, [r7, #2]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cf8:	787b      	ldrb	r3, [r7, #1]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cfe:	887a      	ldrh	r2, [r7, #2]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d04:	e002      	b.n	8002d0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d06:	887a      	ldrh	r2, [r7, #2]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d141      	bne.n	8002daa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d26:	4b4b      	ldr	r3, [pc, #300]	@ (8002e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d32:	d131      	bne.n	8002d98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d34:	4b47      	ldr	r3, [pc, #284]	@ (8002e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d3a:	4a46      	ldr	r2, [pc, #280]	@ (8002e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d44:	4b43      	ldr	r3, [pc, #268]	@ (8002e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d4c:	4a41      	ldr	r2, [pc, #260]	@ (8002e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d54:	4b40      	ldr	r3, [pc, #256]	@ (8002e58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2232      	movs	r2, #50	@ 0x32
 8002d5a:	fb02 f303 	mul.w	r3, r2, r3
 8002d5e:	4a3f      	ldr	r2, [pc, #252]	@ (8002e5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d60:	fba2 2303 	umull	r2, r3, r2, r3
 8002d64:	0c9b      	lsrs	r3, r3, #18
 8002d66:	3301      	adds	r3, #1
 8002d68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d6a:	e002      	b.n	8002d72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d72:	4b38      	ldr	r3, [pc, #224]	@ (8002e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d7e:	d102      	bne.n	8002d86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f2      	bne.n	8002d6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d86:	4b33      	ldr	r3, [pc, #204]	@ (8002e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d92:	d158      	bne.n	8002e46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e057      	b.n	8002e48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d98:	4b2e      	ldr	r3, [pc, #184]	@ (8002e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d9e:	4a2d      	ldr	r2, [pc, #180]	@ (8002e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002da4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002da8:	e04d      	b.n	8002e46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002db0:	d141      	bne.n	8002e36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002db2:	4b28      	ldr	r3, [pc, #160]	@ (8002e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dbe:	d131      	bne.n	8002e24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dc0:	4b24      	ldr	r3, [pc, #144]	@ (8002e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dc6:	4a23      	ldr	r2, [pc, #140]	@ (8002e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dcc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dd0:	4b20      	ldr	r3, [pc, #128]	@ (8002e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002dd8:	4a1e      	ldr	r2, [pc, #120]	@ (8002e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002de0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2232      	movs	r2, #50	@ 0x32
 8002de6:	fb02 f303 	mul.w	r3, r2, r3
 8002dea:	4a1c      	ldr	r2, [pc, #112]	@ (8002e5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002dec:	fba2 2303 	umull	r2, r3, r2, r3
 8002df0:	0c9b      	lsrs	r3, r3, #18
 8002df2:	3301      	adds	r3, #1
 8002df4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002df6:	e002      	b.n	8002dfe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dfe:	4b15      	ldr	r3, [pc, #84]	@ (8002e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e0a:	d102      	bne.n	8002e12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f2      	bne.n	8002df8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e12:	4b10      	ldr	r3, [pc, #64]	@ (8002e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e1e:	d112      	bne.n	8002e46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e011      	b.n	8002e48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e24:	4b0b      	ldr	r3, [pc, #44]	@ (8002e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002e34:	e007      	b.n	8002e46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e36:	4b07      	ldr	r3, [pc, #28]	@ (8002e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e3e:	4a05      	ldr	r2, [pc, #20]	@ (8002e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e44:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	40007000 	.word	0x40007000
 8002e58:	20000000 	.word	0x20000000
 8002e5c:	431bde83 	.word	0x431bde83

08002e60 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002e64:	4b05      	ldr	r3, [pc, #20]	@ (8002e7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4a04      	ldr	r2, [pc, #16]	@ (8002e7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e6e:	6093      	str	r3, [r2, #8]
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40007000 	.word	0x40007000

08002e80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e2fe      	b.n	8003490 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d075      	beq.n	8002f8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e9e:	4b97      	ldr	r3, [pc, #604]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ea8:	4b94      	ldr	r3, [pc, #592]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b0c      	cmp	r3, #12
 8002eb6:	d102      	bne.n	8002ebe <HAL_RCC_OscConfig+0x3e>
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d002      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x44>
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d10b      	bne.n	8002edc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec4:	4b8d      	ldr	r3, [pc, #564]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d05b      	beq.n	8002f88 <HAL_RCC_OscConfig+0x108>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d157      	bne.n	8002f88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e2d9      	b.n	8003490 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee4:	d106      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x74>
 8002ee6:	4b85      	ldr	r3, [pc, #532]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a84      	ldr	r2, [pc, #528]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e01d      	b.n	8002f30 <HAL_RCC_OscConfig+0xb0>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x98>
 8002efe:	4b7f      	ldr	r3, [pc, #508]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a7e      	ldr	r2, [pc, #504]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8002f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	4b7c      	ldr	r3, [pc, #496]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a7b      	ldr	r2, [pc, #492]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8002f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	e00b      	b.n	8002f30 <HAL_RCC_OscConfig+0xb0>
 8002f18:	4b78      	ldr	r3, [pc, #480]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a77      	ldr	r2, [pc, #476]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8002f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	4b75      	ldr	r3, [pc, #468]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a74      	ldr	r2, [pc, #464]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8002f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d013      	beq.n	8002f60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7ff fba8 	bl	800268c <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f40:	f7ff fba4 	bl	800268c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	@ 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e29e      	b.n	8003490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f52:	4b6a      	ldr	r3, [pc, #424]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0xc0>
 8002f5e:	e014      	b.n	8002f8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7ff fb94 	bl	800268c <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f68:	f7ff fb90 	bl	800268c <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	@ 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e28a      	b.n	8003490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f7a:	4b60      	ldr	r3, [pc, #384]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0xe8>
 8002f86:	e000      	b.n	8002f8a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d075      	beq.n	8003082 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f96:	4b59      	ldr	r3, [pc, #356]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fa0:	4b56      	ldr	r3, [pc, #344]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b0c      	cmp	r3, #12
 8002fae:	d102      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x136>
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d002      	beq.n	8002fbc <HAL_RCC_OscConfig+0x13c>
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d11f      	bne.n	8002ffc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fbc:	4b4f      	ldr	r3, [pc, #316]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x154>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e25d      	b.n	8003490 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd4:	4b49      	ldr	r3, [pc, #292]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	4946      	ldr	r1, [pc, #280]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002fe8:	4b45      	ldr	r3, [pc, #276]	@ (8003100 <HAL_RCC_OscConfig+0x280>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff f98d 	bl	800230c <HAL_InitTick>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d043      	beq.n	8003080 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e249      	b.n	8003490 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d023      	beq.n	800304c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003004:	4b3d      	ldr	r3, [pc, #244]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a3c      	ldr	r2, [pc, #240]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 800300a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800300e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7ff fb3c 	bl	800268c <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003018:	f7ff fb38 	bl	800268c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e232      	b.n	8003490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800302a:	4b34      	ldr	r3, [pc, #208]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003036:	4b31      	ldr	r3, [pc, #196]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	061b      	lsls	r3, r3, #24
 8003044:	492d      	ldr	r1, [pc, #180]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8003046:	4313      	orrs	r3, r2
 8003048:	604b      	str	r3, [r1, #4]
 800304a:	e01a      	b.n	8003082 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304c:	4b2b      	ldr	r3, [pc, #172]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a2a      	ldr	r2, [pc, #168]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8003052:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7ff fb18 	bl	800268c <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003060:	f7ff fb14 	bl	800268c <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e20e      	b.n	8003490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003072:	4b22      	ldr	r3, [pc, #136]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x1e0>
 800307e:	e000      	b.n	8003082 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003080:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d041      	beq.n	8003112 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d01c      	beq.n	80030d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003096:	4b19      	ldr	r3, [pc, #100]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 8003098:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800309c:	4a17      	ldr	r2, [pc, #92]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a6:	f7ff faf1 	bl	800268c <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ae:	f7ff faed 	bl	800268c <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e1e7      	b.n	8003490 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030c0:	4b0e      	ldr	r3, [pc, #56]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 80030c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0ef      	beq.n	80030ae <HAL_RCC_OscConfig+0x22e>
 80030ce:	e020      	b.n	8003112 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d0:	4b0a      	ldr	r3, [pc, #40]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 80030d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030d6:	4a09      	ldr	r2, [pc, #36]	@ (80030fc <HAL_RCC_OscConfig+0x27c>)
 80030d8:	f023 0301 	bic.w	r3, r3, #1
 80030dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e0:	f7ff fad4 	bl	800268c <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030e6:	e00d      	b.n	8003104 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e8:	f7ff fad0 	bl	800268c <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d906      	bls.n	8003104 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e1ca      	b.n	8003490 <HAL_RCC_OscConfig+0x610>
 80030fa:	bf00      	nop
 80030fc:	40021000 	.word	0x40021000
 8003100:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003104:	4b8c      	ldr	r3, [pc, #560]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 8003106:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1ea      	bne.n	80030e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 80a6 	beq.w	800326c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003120:	2300      	movs	r3, #0
 8003122:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003124:	4b84      	ldr	r3, [pc, #528]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003128:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_RCC_OscConfig+0x2b4>
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <HAL_RCC_OscConfig+0x2b6>
 8003134:	2300      	movs	r3, #0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00d      	beq.n	8003156 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313a:	4b7f      	ldr	r3, [pc, #508]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 800313c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313e:	4a7e      	ldr	r2, [pc, #504]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 8003140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003144:	6593      	str	r3, [r2, #88]	@ 0x58
 8003146:	4b7c      	ldr	r3, [pc, #496]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 8003148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003152:	2301      	movs	r3, #1
 8003154:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003156:	4b79      	ldr	r3, [pc, #484]	@ (800333c <HAL_RCC_OscConfig+0x4bc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d118      	bne.n	8003194 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003162:	4b76      	ldr	r3, [pc, #472]	@ (800333c <HAL_RCC_OscConfig+0x4bc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a75      	ldr	r2, [pc, #468]	@ (800333c <HAL_RCC_OscConfig+0x4bc>)
 8003168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800316c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800316e:	f7ff fa8d 	bl	800268c <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003176:	f7ff fa89 	bl	800268c <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e183      	b.n	8003490 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003188:	4b6c      	ldr	r3, [pc, #432]	@ (800333c <HAL_RCC_OscConfig+0x4bc>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d108      	bne.n	80031ae <HAL_RCC_OscConfig+0x32e>
 800319c:	4b66      	ldr	r3, [pc, #408]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a2:	4a65      	ldr	r2, [pc, #404]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031ac:	e024      	b.n	80031f8 <HAL_RCC_OscConfig+0x378>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	2b05      	cmp	r3, #5
 80031b4:	d110      	bne.n	80031d8 <HAL_RCC_OscConfig+0x358>
 80031b6:	4b60      	ldr	r3, [pc, #384]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 80031b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031bc:	4a5e      	ldr	r2, [pc, #376]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 80031be:	f043 0304 	orr.w	r3, r3, #4
 80031c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031cc:	4a5a      	ldr	r2, [pc, #360]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031d6:	e00f      	b.n	80031f8 <HAL_RCC_OscConfig+0x378>
 80031d8:	4b57      	ldr	r3, [pc, #348]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031de:	4a56      	ldr	r2, [pc, #344]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031e8:	4b53      	ldr	r3, [pc, #332]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ee:	4a52      	ldr	r2, [pc, #328]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d016      	beq.n	800322e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003200:	f7ff fa44 	bl	800268c <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003206:	e00a      	b.n	800321e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003208:	f7ff fa40 	bl	800268c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e138      	b.n	8003490 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800321e:	4b46      	ldr	r3, [pc, #280]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0ed      	beq.n	8003208 <HAL_RCC_OscConfig+0x388>
 800322c:	e015      	b.n	800325a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322e:	f7ff fa2d 	bl	800268c <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003234:	e00a      	b.n	800324c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003236:	f7ff fa29 	bl	800268c <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003244:	4293      	cmp	r3, r2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e121      	b.n	8003490 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800324c:	4b3a      	ldr	r3, [pc, #232]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1ed      	bne.n	8003236 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800325a:	7ffb      	ldrb	r3, [r7, #31]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d105      	bne.n	800326c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003260:	4b35      	ldr	r3, [pc, #212]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 8003262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003264:	4a34      	ldr	r2, [pc, #208]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 8003266:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800326a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d03c      	beq.n	80032f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01c      	beq.n	80032ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003280:	4b2d      	ldr	r3, [pc, #180]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 8003282:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003286:	4a2c      	ldr	r2, [pc, #176]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003290:	f7ff f9fc 	bl	800268c <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003298:	f7ff f9f8 	bl	800268c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e0f2      	b.n	8003490 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032aa:	4b23      	ldr	r3, [pc, #140]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 80032ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0ef      	beq.n	8003298 <HAL_RCC_OscConfig+0x418>
 80032b8:	e01b      	b.n	80032f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 80032bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 80032c2:	f023 0301 	bic.w	r3, r3, #1
 80032c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ca:	f7ff f9df 	bl	800268c <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032d2:	f7ff f9db 	bl	800268c <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e0d5      	b.n	8003490 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032e4:	4b14      	ldr	r3, [pc, #80]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 80032e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1ef      	bne.n	80032d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 80c9 	beq.w	800348e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b0c      	cmp	r3, #12
 8003306:	f000 8083 	beq.w	8003410 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d15e      	bne.n	80033d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003312:	4b09      	ldr	r3, [pc, #36]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a08      	ldr	r2, [pc, #32]	@ (8003338 <HAL_RCC_OscConfig+0x4b8>)
 8003318:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800331c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331e:	f7ff f9b5 	bl	800268c <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003324:	e00c      	b.n	8003340 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003326:	f7ff f9b1 	bl	800268c <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d905      	bls.n	8003340 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e0ab      	b.n	8003490 <HAL_RCC_OscConfig+0x610>
 8003338:	40021000 	.word	0x40021000
 800333c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003340:	4b55      	ldr	r3, [pc, #340]	@ (8003498 <HAL_RCC_OscConfig+0x618>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1ec      	bne.n	8003326 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800334c:	4b52      	ldr	r3, [pc, #328]	@ (8003498 <HAL_RCC_OscConfig+0x618>)
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	4b52      	ldr	r3, [pc, #328]	@ (800349c <HAL_RCC_OscConfig+0x61c>)
 8003352:	4013      	ands	r3, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6a11      	ldr	r1, [r2, #32]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800335c:	3a01      	subs	r2, #1
 800335e:	0112      	lsls	r2, r2, #4
 8003360:	4311      	orrs	r1, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003366:	0212      	lsls	r2, r2, #8
 8003368:	4311      	orrs	r1, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800336e:	0852      	lsrs	r2, r2, #1
 8003370:	3a01      	subs	r2, #1
 8003372:	0552      	lsls	r2, r2, #21
 8003374:	4311      	orrs	r1, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800337a:	0852      	lsrs	r2, r2, #1
 800337c:	3a01      	subs	r2, #1
 800337e:	0652      	lsls	r2, r2, #25
 8003380:	4311      	orrs	r1, r2
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003386:	06d2      	lsls	r2, r2, #27
 8003388:	430a      	orrs	r2, r1
 800338a:	4943      	ldr	r1, [pc, #268]	@ (8003498 <HAL_RCC_OscConfig+0x618>)
 800338c:	4313      	orrs	r3, r2
 800338e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003390:	4b41      	ldr	r3, [pc, #260]	@ (8003498 <HAL_RCC_OscConfig+0x618>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a40      	ldr	r2, [pc, #256]	@ (8003498 <HAL_RCC_OscConfig+0x618>)
 8003396:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800339a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800339c:	4b3e      	ldr	r3, [pc, #248]	@ (8003498 <HAL_RCC_OscConfig+0x618>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4a3d      	ldr	r2, [pc, #244]	@ (8003498 <HAL_RCC_OscConfig+0x618>)
 80033a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7ff f970 	bl	800268c <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b0:	f7ff f96c 	bl	800268c <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e066      	b.n	8003490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c2:	4b35      	ldr	r3, [pc, #212]	@ (8003498 <HAL_RCC_OscConfig+0x618>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0x530>
 80033ce:	e05e      	b.n	800348e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d0:	4b31      	ldr	r3, [pc, #196]	@ (8003498 <HAL_RCC_OscConfig+0x618>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a30      	ldr	r2, [pc, #192]	@ (8003498 <HAL_RCC_OscConfig+0x618>)
 80033d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7ff f956 	bl	800268c <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e4:	f7ff f952 	bl	800268c <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e04c      	b.n	8003490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f6:	4b28      	ldr	r3, [pc, #160]	@ (8003498 <HAL_RCC_OscConfig+0x618>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003402:	4b25      	ldr	r3, [pc, #148]	@ (8003498 <HAL_RCC_OscConfig+0x618>)
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	4924      	ldr	r1, [pc, #144]	@ (8003498 <HAL_RCC_OscConfig+0x618>)
 8003408:	4b25      	ldr	r3, [pc, #148]	@ (80034a0 <HAL_RCC_OscConfig+0x620>)
 800340a:	4013      	ands	r3, r2
 800340c:	60cb      	str	r3, [r1, #12]
 800340e:	e03e      	b.n	800348e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e039      	b.n	8003490 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800341c:	4b1e      	ldr	r3, [pc, #120]	@ (8003498 <HAL_RCC_OscConfig+0x618>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f003 0203 	and.w	r2, r3, #3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	429a      	cmp	r2, r3
 800342e:	d12c      	bne.n	800348a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343a:	3b01      	subs	r3, #1
 800343c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343e:	429a      	cmp	r2, r3
 8003440:	d123      	bne.n	800348a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d11b      	bne.n	800348a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800345e:	429a      	cmp	r2, r3
 8003460:	d113      	bne.n	800348a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346c:	085b      	lsrs	r3, r3, #1
 800346e:	3b01      	subs	r3, #1
 8003470:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003472:	429a      	cmp	r2, r3
 8003474:	d109      	bne.n	800348a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003480:	085b      	lsrs	r3, r3, #1
 8003482:	3b01      	subs	r3, #1
 8003484:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003486:	429a      	cmp	r2, r3
 8003488:	d001      	beq.n	800348e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3720      	adds	r7, #32
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40021000 	.word	0x40021000
 800349c:	019f800c 	.word	0x019f800c
 80034a0:	feeefffc 	.word	0xfeeefffc

080034a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e11e      	b.n	80036fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034bc:	4b91      	ldr	r3, [pc, #580]	@ (8003704 <HAL_RCC_ClockConfig+0x260>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d910      	bls.n	80034ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ca:	4b8e      	ldr	r3, [pc, #568]	@ (8003704 <HAL_RCC_ClockConfig+0x260>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 020f 	bic.w	r2, r3, #15
 80034d2:	498c      	ldr	r1, [pc, #560]	@ (8003704 <HAL_RCC_ClockConfig+0x260>)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b8a      	ldr	r3, [pc, #552]	@ (8003704 <HAL_RCC_ClockConfig+0x260>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e106      	b.n	80036fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d073      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d129      	bne.n	8003554 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003500:	4b81      	ldr	r3, [pc, #516]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0f4      	b.n	80036fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003510:	f000 f9d0 	bl	80038b4 <RCC_GetSysClockFreqFromPLLSource>
 8003514:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4a7c      	ldr	r2, [pc, #496]	@ (800370c <HAL_RCC_ClockConfig+0x268>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d93f      	bls.n	800359e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800351e:	4b7a      	ldr	r3, [pc, #488]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003532:	2b00      	cmp	r3, #0
 8003534:	d033      	beq.n	800359e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800353a:	2b00      	cmp	r3, #0
 800353c:	d12f      	bne.n	800359e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800353e:	4b72      	ldr	r3, [pc, #456]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003546:	4a70      	ldr	r2, [pc, #448]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 8003548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800354c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800354e:	2380      	movs	r3, #128	@ 0x80
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	e024      	b.n	800359e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b02      	cmp	r3, #2
 800355a:	d107      	bne.n	800356c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800355c:	4b6a      	ldr	r3, [pc, #424]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d109      	bne.n	800357c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0c6      	b.n	80036fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800356c:	4b66      	ldr	r3, [pc, #408]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0be      	b.n	80036fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800357c:	f000 f8ce 	bl	800371c <HAL_RCC_GetSysClockFreq>
 8003580:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	4a61      	ldr	r2, [pc, #388]	@ (800370c <HAL_RCC_ClockConfig+0x268>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d909      	bls.n	800359e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800358a:	4b5f      	ldr	r3, [pc, #380]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003592:	4a5d      	ldr	r2, [pc, #372]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 8003594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003598:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800359a:	2380      	movs	r3, #128	@ 0x80
 800359c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800359e:	4b5a      	ldr	r3, [pc, #360]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f023 0203 	bic.w	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	4957      	ldr	r1, [pc, #348]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b0:	f7ff f86c 	bl	800268c <HAL_GetTick>
 80035b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b8:	f7ff f868 	bl	800268c <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e095      	b.n	80036fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ce:	4b4e      	ldr	r3, [pc, #312]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 020c 	and.w	r2, r3, #12
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	429a      	cmp	r2, r3
 80035de:	d1eb      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d023      	beq.n	8003634 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f8:	4b43      	ldr	r3, [pc, #268]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4a42      	ldr	r2, [pc, #264]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 80035fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003602:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d007      	beq.n	8003620 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003610:	4b3d      	ldr	r3, [pc, #244]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003618:	4a3b      	ldr	r2, [pc, #236]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 800361a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800361e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003620:	4b39      	ldr	r3, [pc, #228]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4936      	ldr	r1, [pc, #216]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
 8003632:	e008      	b.n	8003646 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2b80      	cmp	r3, #128	@ 0x80
 8003638:	d105      	bne.n	8003646 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800363a:	4b33      	ldr	r3, [pc, #204]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	4a32      	ldr	r2, [pc, #200]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 8003640:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003644:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003646:	4b2f      	ldr	r3, [pc, #188]	@ (8003704 <HAL_RCC_ClockConfig+0x260>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d21d      	bcs.n	8003690 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003654:	4b2b      	ldr	r3, [pc, #172]	@ (8003704 <HAL_RCC_ClockConfig+0x260>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f023 020f 	bic.w	r2, r3, #15
 800365c:	4929      	ldr	r1, [pc, #164]	@ (8003704 <HAL_RCC_ClockConfig+0x260>)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	4313      	orrs	r3, r2
 8003662:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003664:	f7ff f812 	bl	800268c <HAL_GetTick>
 8003668:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366a:	e00a      	b.n	8003682 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800366c:	f7ff f80e 	bl	800268c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e03b      	b.n	80036fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b20      	ldr	r3, [pc, #128]	@ (8003704 <HAL_RCC_ClockConfig+0x260>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d1ed      	bne.n	800366c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800369c:	4b1a      	ldr	r3, [pc, #104]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	4917      	ldr	r1, [pc, #92]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d009      	beq.n	80036ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ba:	4b13      	ldr	r3, [pc, #76]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	490f      	ldr	r1, [pc, #60]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036ce:	f000 f825 	bl	800371c <HAL_RCC_GetSysClockFreq>
 80036d2:	4602      	mov	r2, r0
 80036d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003708 <HAL_RCC_ClockConfig+0x264>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	490c      	ldr	r1, [pc, #48]	@ (8003710 <HAL_RCC_ClockConfig+0x26c>)
 80036e0:	5ccb      	ldrb	r3, [r1, r3]
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003714 <HAL_RCC_ClockConfig+0x270>)
 80036ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80036ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003718 <HAL_RCC_ClockConfig+0x274>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe fe0a 	bl	800230c <HAL_InitTick>
 80036f8:	4603      	mov	r3, r0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40022000 	.word	0x40022000
 8003708:	40021000 	.word	0x40021000
 800370c:	04c4b400 	.word	0x04c4b400
 8003710:	0800a890 	.word	0x0800a890
 8003714:	20000000 	.word	0x20000000
 8003718:	20000004 	.word	0x20000004

0800371c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003722:	4b2c      	ldr	r3, [pc, #176]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b04      	cmp	r3, #4
 800372c:	d102      	bne.n	8003734 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800372e:	4b2a      	ldr	r3, [pc, #168]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	e047      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003734:	4b27      	ldr	r3, [pc, #156]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 030c 	and.w	r3, r3, #12
 800373c:	2b08      	cmp	r3, #8
 800373e:	d102      	bne.n	8003746 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003740:	4b26      	ldr	r3, [pc, #152]	@ (80037dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	e03e      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003746:	4b23      	ldr	r3, [pc, #140]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b0c      	cmp	r3, #12
 8003750:	d136      	bne.n	80037c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003752:	4b20      	ldr	r3, [pc, #128]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800375c:	4b1d      	ldr	r3, [pc, #116]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	3301      	adds	r3, #1
 8003768:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b03      	cmp	r3, #3
 800376e:	d10c      	bne.n	800378a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003770:	4a1a      	ldr	r2, [pc, #104]	@ (80037dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	fbb2 f3f3 	udiv	r3, r2, r3
 8003778:	4a16      	ldr	r2, [pc, #88]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800377a:	68d2      	ldr	r2, [r2, #12]
 800377c:	0a12      	lsrs	r2, r2, #8
 800377e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003782:	fb02 f303 	mul.w	r3, r2, r3
 8003786:	617b      	str	r3, [r7, #20]
      break;
 8003788:	e00c      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800378a:	4a13      	ldr	r2, [pc, #76]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003792:	4a10      	ldr	r2, [pc, #64]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003794:	68d2      	ldr	r2, [r2, #12]
 8003796:	0a12      	lsrs	r2, r2, #8
 8003798:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800379c:	fb02 f303 	mul.w	r3, r2, r3
 80037a0:	617b      	str	r3, [r7, #20]
      break;
 80037a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037a4:	4b0b      	ldr	r3, [pc, #44]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	0e5b      	lsrs	r3, r3, #25
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	3301      	adds	r3, #1
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	e001      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80037c4:	693b      	ldr	r3, [r7, #16]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40021000 	.word	0x40021000
 80037d8:	00f42400 	.word	0x00f42400
 80037dc:	016e3600 	.word	0x016e3600

080037e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e4:	4b03      	ldr	r3, [pc, #12]	@ (80037f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037e6:	681b      	ldr	r3, [r3, #0]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20000000 	.word	0x20000000

080037f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037fc:	f7ff fff0 	bl	80037e0 <HAL_RCC_GetHCLKFreq>
 8003800:	4602      	mov	r2, r0
 8003802:	4b06      	ldr	r3, [pc, #24]	@ (800381c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	0a1b      	lsrs	r3, r3, #8
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	4904      	ldr	r1, [pc, #16]	@ (8003820 <HAL_RCC_GetPCLK1Freq+0x28>)
 800380e:	5ccb      	ldrb	r3, [r1, r3]
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003818:	4618      	mov	r0, r3
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40021000 	.word	0x40021000
 8003820:	0800a8a0 	.word	0x0800a8a0

08003824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003828:	f7ff ffda 	bl	80037e0 <HAL_RCC_GetHCLKFreq>
 800382c:	4602      	mov	r2, r0
 800382e:	4b06      	ldr	r3, [pc, #24]	@ (8003848 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	0adb      	lsrs	r3, r3, #11
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	4904      	ldr	r1, [pc, #16]	@ (800384c <HAL_RCC_GetPCLK2Freq+0x28>)
 800383a:	5ccb      	ldrb	r3, [r1, r3]
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003844:	4618      	mov	r0, r3
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000
 800384c:	0800a8a0 	.word	0x0800a8a0

08003850 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	220f      	movs	r2, #15
 800385e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003860:	4b12      	ldr	r3, [pc, #72]	@ (80038ac <HAL_RCC_GetClockConfig+0x5c>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 0203 	and.w	r2, r3, #3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800386c:	4b0f      	ldr	r3, [pc, #60]	@ (80038ac <HAL_RCC_GetClockConfig+0x5c>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003878:	4b0c      	ldr	r3, [pc, #48]	@ (80038ac <HAL_RCC_GetClockConfig+0x5c>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003884:	4b09      	ldr	r3, [pc, #36]	@ (80038ac <HAL_RCC_GetClockConfig+0x5c>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	08db      	lsrs	r3, r3, #3
 800388a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003892:	4b07      	ldr	r3, [pc, #28]	@ (80038b0 <HAL_RCC_GetClockConfig+0x60>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 020f 	and.w	r2, r3, #15
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	601a      	str	r2, [r3, #0]
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40022000 	.word	0x40022000

080038b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003934 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003934 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	3301      	adds	r3, #1
 80038d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d10c      	bne.n	80038f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038d8:	4a17      	ldr	r2, [pc, #92]	@ (8003938 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e0:	4a14      	ldr	r2, [pc, #80]	@ (8003934 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038e2:	68d2      	ldr	r2, [r2, #12]
 80038e4:	0a12      	lsrs	r2, r2, #8
 80038e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038ea:	fb02 f303 	mul.w	r3, r2, r3
 80038ee:	617b      	str	r3, [r7, #20]
    break;
 80038f0:	e00c      	b.n	800390c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038f2:	4a12      	ldr	r2, [pc, #72]	@ (800393c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003934 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038fc:	68d2      	ldr	r2, [r2, #12]
 80038fe:	0a12      	lsrs	r2, r2, #8
 8003900:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003904:	fb02 f303 	mul.w	r3, r2, r3
 8003908:	617b      	str	r3, [r7, #20]
    break;
 800390a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800390c:	4b09      	ldr	r3, [pc, #36]	@ (8003934 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	0e5b      	lsrs	r3, r3, #25
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	3301      	adds	r3, #1
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	fbb2 f3f3 	udiv	r3, r2, r3
 8003924:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003926:	687b      	ldr	r3, [r7, #4]
}
 8003928:	4618      	mov	r0, r3
 800392a:	371c      	adds	r7, #28
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	40021000 	.word	0x40021000
 8003938:	016e3600 	.word	0x016e3600
 800393c:	00f42400 	.word	0x00f42400

08003940 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003948:	2300      	movs	r3, #0
 800394a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800394c:	2300      	movs	r3, #0
 800394e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 8098 	beq.w	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800395e:	2300      	movs	r3, #0
 8003960:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003962:	4b43      	ldr	r3, [pc, #268]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10d      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800396e:	4b40      	ldr	r3, [pc, #256]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003972:	4a3f      	ldr	r2, [pc, #252]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003978:	6593      	str	r3, [r2, #88]	@ 0x58
 800397a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800397c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800397e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003982:	60bb      	str	r3, [r7, #8]
 8003984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003986:	2301      	movs	r3, #1
 8003988:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800398a:	4b3a      	ldr	r3, [pc, #232]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a39      	ldr	r2, [pc, #228]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003990:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003994:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003996:	f7fe fe79 	bl	800268c <HAL_GetTick>
 800399a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800399c:	e009      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800399e:	f7fe fe75 	bl	800268c <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d902      	bls.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	74fb      	strb	r3, [r7, #19]
        break;
 80039b0:	e005      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039b2:	4b30      	ldr	r3, [pc, #192]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0ef      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80039be:	7cfb      	ldrb	r3, [r7, #19]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d159      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01e      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d019      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039e0:	4b23      	ldr	r3, [pc, #140]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039ec:	4b20      	ldr	r3, [pc, #128]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a02:	4a1b      	ldr	r2, [pc, #108]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a0c:	4a18      	ldr	r2, [pc, #96]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d016      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1e:	f7fe fe35 	bl	800268c <HAL_GetTick>
 8003a22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a24:	e00b      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a26:	f7fe fe31 	bl	800268c <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d902      	bls.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	74fb      	strb	r3, [r7, #19]
            break;
 8003a3c:	e006      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0ec      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003a4c:	7cfb      	ldrb	r3, [r7, #19]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10b      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a52:	4b07      	ldr	r3, [pc, #28]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a60:	4903      	ldr	r1, [pc, #12]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003a68:	e008      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a6a:	7cfb      	ldrb	r3, [r7, #19]
 8003a6c:	74bb      	strb	r3, [r7, #18]
 8003a6e:	e005      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003a70:	40021000 	.word	0x40021000
 8003a74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a78:	7cfb      	ldrb	r3, [r7, #19]
 8003a7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a7c:	7c7b      	ldrb	r3, [r7, #17]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d105      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a82:	4ba7      	ldr	r3, [pc, #668]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a86:	4aa6      	ldr	r2, [pc, #664]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a8c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a9a:	4ba1      	ldr	r3, [pc, #644]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa0:	f023 0203 	bic.w	r2, r3, #3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	499d      	ldr	r1, [pc, #628]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00a      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003abc:	4b98      	ldr	r3, [pc, #608]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac2:	f023 020c 	bic.w	r2, r3, #12
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	4995      	ldr	r1, [pc, #596]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00a      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ade:	4b90      	ldr	r3, [pc, #576]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	498c      	ldr	r1, [pc, #560]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00a      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b00:	4b87      	ldr	r3, [pc, #540]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	4984      	ldr	r1, [pc, #528]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0310 	and.w	r3, r3, #16
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b22:	4b7f      	ldr	r3, [pc, #508]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	497b      	ldr	r1, [pc, #492]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b44:	4b76      	ldr	r3, [pc, #472]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	4973      	ldr	r1, [pc, #460]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b66:	4b6e      	ldr	r3, [pc, #440]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	496a      	ldr	r1, [pc, #424]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b88:	4b65      	ldr	r3, [pc, #404]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	4962      	ldr	r1, [pc, #392]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003baa:	4b5d      	ldr	r3, [pc, #372]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	4959      	ldr	r1, [pc, #356]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bcc:	4b54      	ldr	r3, [pc, #336]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bd2:	f023 0203 	bic.w	r2, r3, #3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bda:	4951      	ldr	r1, [pc, #324]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bee:	4b4c      	ldr	r3, [pc, #304]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfc:	4948      	ldr	r1, [pc, #288]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d015      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c10:	4b43      	ldr	r3, [pc, #268]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1e:	4940      	ldr	r1, [pc, #256]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c2e:	d105      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c30:	4b3b      	ldr	r3, [pc, #236]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	4a3a      	ldr	r2, [pc, #232]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c3a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d015      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c48:	4b35      	ldr	r3, [pc, #212]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c56:	4932      	ldr	r1, [pc, #200]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c66:	d105      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c68:	4b2d      	ldr	r3, [pc, #180]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4a2c      	ldr	r2, [pc, #176]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c72:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d015      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c80:	4b27      	ldr	r3, [pc, #156]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c86:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8e:	4924      	ldr	r1, [pc, #144]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c9e:	d105      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003caa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d015      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cb8:	4b19      	ldr	r3, [pc, #100]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cbe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc6:	4916      	ldr	r1, [pc, #88]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cd6:	d105      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cd8:	4b11      	ldr	r3, [pc, #68]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	4a10      	ldr	r2, [pc, #64]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ce2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d019      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfe:	4908      	ldr	r1, [pc, #32]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d0e:	d109      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d10:	4b03      	ldr	r3, [pc, #12]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	4a02      	ldr	r2, [pc, #8]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d1a:	60d3      	str	r3, [r2, #12]
 8003d1c:	e002      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003d1e:	bf00      	nop
 8003d20:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d015      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d30:	4b29      	ldr	r3, [pc, #164]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d36:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3e:	4926      	ldr	r1, [pc, #152]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d4e:	d105      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d50:	4b21      	ldr	r3, [pc, #132]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4a20      	ldr	r2, [pc, #128]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d5a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d015      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003d68:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d76:	4918      	ldr	r1, [pc, #96]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d86:	d105      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d88:	4b13      	ldr	r3, [pc, #76]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4a12      	ldr	r2, [pc, #72]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d92:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d015      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003da0:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003da2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003da6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dae:	490a      	ldr	r1, [pc, #40]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dbe:	d105      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dc0:	4b05      	ldr	r3, [pc, #20]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4a04      	ldr	r2, [pc, #16]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003dcc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40021000 	.word	0x40021000

08003ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e049      	b.n	8003e82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fe f91a 	bl	800203c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3304      	adds	r3, #4
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	f000 ff68 	bl	8004cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d001      	beq.n	8003ea4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e04c      	b.n	8003f3e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a26      	ldr	r2, [pc, #152]	@ (8003f4c <HAL_TIM_Base_Start+0xc0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d022      	beq.n	8003efc <HAL_TIM_Base_Start+0x70>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ebe:	d01d      	beq.n	8003efc <HAL_TIM_Base_Start+0x70>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a22      	ldr	r2, [pc, #136]	@ (8003f50 <HAL_TIM_Base_Start+0xc4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d018      	beq.n	8003efc <HAL_TIM_Base_Start+0x70>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a21      	ldr	r2, [pc, #132]	@ (8003f54 <HAL_TIM_Base_Start+0xc8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d013      	beq.n	8003efc <HAL_TIM_Base_Start+0x70>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f58 <HAL_TIM_Base_Start+0xcc>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00e      	beq.n	8003efc <HAL_TIM_Base_Start+0x70>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f5c <HAL_TIM_Base_Start+0xd0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d009      	beq.n	8003efc <HAL_TIM_Base_Start+0x70>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1c      	ldr	r2, [pc, #112]	@ (8003f60 <HAL_TIM_Base_Start+0xd4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_TIM_Base_Start+0x70>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f64 <HAL_TIM_Base_Start+0xd8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d115      	bne.n	8003f28 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	4b19      	ldr	r3, [pc, #100]	@ (8003f68 <HAL_TIM_Base_Start+0xdc>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b06      	cmp	r3, #6
 8003f0c:	d015      	beq.n	8003f3a <HAL_TIM_Base_Start+0xae>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f14:	d011      	beq.n	8003f3a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0201 	orr.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f26:	e008      	b.n	8003f3a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	e000      	b.n	8003f3c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40012c00 	.word	0x40012c00
 8003f50:	40000400 	.word	0x40000400
 8003f54:	40000800 	.word	0x40000800
 8003f58:	40000c00 	.word	0x40000c00
 8003f5c:	40013400 	.word	0x40013400
 8003f60:	40014000 	.word	0x40014000
 8003f64:	40015000 	.word	0x40015000
 8003f68:	00010007 	.word	0x00010007

08003f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d001      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e054      	b.n	800402e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a26      	ldr	r2, [pc, #152]	@ (800403c <HAL_TIM_Base_Start_IT+0xd0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d022      	beq.n	8003fec <HAL_TIM_Base_Start_IT+0x80>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fae:	d01d      	beq.n	8003fec <HAL_TIM_Base_Start_IT+0x80>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a22      	ldr	r2, [pc, #136]	@ (8004040 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d018      	beq.n	8003fec <HAL_TIM_Base_Start_IT+0x80>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a21      	ldr	r2, [pc, #132]	@ (8004044 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d013      	beq.n	8003fec <HAL_TIM_Base_Start_IT+0x80>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8004048 <HAL_TIM_Base_Start_IT+0xdc>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d00e      	beq.n	8003fec <HAL_TIM_Base_Start_IT+0x80>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800404c <HAL_TIM_Base_Start_IT+0xe0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d009      	beq.n	8003fec <HAL_TIM_Base_Start_IT+0x80>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a1c      	ldr	r2, [pc, #112]	@ (8004050 <HAL_TIM_Base_Start_IT+0xe4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d004      	beq.n	8003fec <HAL_TIM_Base_Start_IT+0x80>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8004054 <HAL_TIM_Base_Start_IT+0xe8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d115      	bne.n	8004018 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	4b19      	ldr	r3, [pc, #100]	@ (8004058 <HAL_TIM_Base_Start_IT+0xec>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b06      	cmp	r3, #6
 8003ffc:	d015      	beq.n	800402a <HAL_TIM_Base_Start_IT+0xbe>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004004:	d011      	beq.n	800402a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0201 	orr.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004016:	e008      	b.n	800402a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	e000      	b.n	800402c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40012c00 	.word	0x40012c00
 8004040:	40000400 	.word	0x40000400
 8004044:	40000800 	.word	0x40000800
 8004048:	40000c00 	.word	0x40000c00
 800404c:	40013400 	.word	0x40013400
 8004050:	40014000 	.word	0x40014000
 8004054:	40015000 	.word	0x40015000
 8004058:	00010007 	.word	0x00010007

0800405c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e049      	b.n	8004102 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f841 	bl	800410a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3304      	adds	r3, #4
 8004098:	4619      	mov	r1, r3
 800409a:	4610      	mov	r0, r2
 800409c:	f000 fe28 	bl	8004cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
	...

08004120 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d109      	bne.n	8004144 <HAL_TIM_PWM_Start+0x24>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b01      	cmp	r3, #1
 800413a:	bf14      	ite	ne
 800413c:	2301      	movne	r3, #1
 800413e:	2300      	moveq	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	e03c      	b.n	80041be <HAL_TIM_PWM_Start+0x9e>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b04      	cmp	r3, #4
 8004148:	d109      	bne.n	800415e <HAL_TIM_PWM_Start+0x3e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b01      	cmp	r3, #1
 8004154:	bf14      	ite	ne
 8004156:	2301      	movne	r3, #1
 8004158:	2300      	moveq	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	e02f      	b.n	80041be <HAL_TIM_PWM_Start+0x9e>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b08      	cmp	r3, #8
 8004162:	d109      	bne.n	8004178 <HAL_TIM_PWM_Start+0x58>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	bf14      	ite	ne
 8004170:	2301      	movne	r3, #1
 8004172:	2300      	moveq	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	e022      	b.n	80041be <HAL_TIM_PWM_Start+0x9e>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b0c      	cmp	r3, #12
 800417c:	d109      	bne.n	8004192 <HAL_TIM_PWM_Start+0x72>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b01      	cmp	r3, #1
 8004188:	bf14      	ite	ne
 800418a:	2301      	movne	r3, #1
 800418c:	2300      	moveq	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	e015      	b.n	80041be <HAL_TIM_PWM_Start+0x9e>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b10      	cmp	r3, #16
 8004196:	d109      	bne.n	80041ac <HAL_TIM_PWM_Start+0x8c>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	bf14      	ite	ne
 80041a4:	2301      	movne	r3, #1
 80041a6:	2300      	moveq	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	e008      	b.n	80041be <HAL_TIM_PWM_Start+0x9e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	bf14      	ite	ne
 80041b8:	2301      	movne	r3, #1
 80041ba:	2300      	moveq	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e0a6      	b.n	8004314 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d104      	bne.n	80041d6 <HAL_TIM_PWM_Start+0xb6>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041d4:	e023      	b.n	800421e <HAL_TIM_PWM_Start+0xfe>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d104      	bne.n	80041e6 <HAL_TIM_PWM_Start+0xc6>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041e4:	e01b      	b.n	800421e <HAL_TIM_PWM_Start+0xfe>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d104      	bne.n	80041f6 <HAL_TIM_PWM_Start+0xd6>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041f4:	e013      	b.n	800421e <HAL_TIM_PWM_Start+0xfe>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b0c      	cmp	r3, #12
 80041fa:	d104      	bne.n	8004206 <HAL_TIM_PWM_Start+0xe6>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004204:	e00b      	b.n	800421e <HAL_TIM_PWM_Start+0xfe>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b10      	cmp	r3, #16
 800420a:	d104      	bne.n	8004216 <HAL_TIM_PWM_Start+0xf6>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004214:	e003      	b.n	800421e <HAL_TIM_PWM_Start+0xfe>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2202      	movs	r2, #2
 800421a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2201      	movs	r2, #1
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f001 f9dc 	bl	80055e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a3a      	ldr	r2, [pc, #232]	@ (800431c <HAL_TIM_PWM_Start+0x1fc>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d018      	beq.n	8004268 <HAL_TIM_PWM_Start+0x148>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a39      	ldr	r2, [pc, #228]	@ (8004320 <HAL_TIM_PWM_Start+0x200>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d013      	beq.n	8004268 <HAL_TIM_PWM_Start+0x148>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a37      	ldr	r2, [pc, #220]	@ (8004324 <HAL_TIM_PWM_Start+0x204>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00e      	beq.n	8004268 <HAL_TIM_PWM_Start+0x148>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a36      	ldr	r2, [pc, #216]	@ (8004328 <HAL_TIM_PWM_Start+0x208>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d009      	beq.n	8004268 <HAL_TIM_PWM_Start+0x148>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a34      	ldr	r2, [pc, #208]	@ (800432c <HAL_TIM_PWM_Start+0x20c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d004      	beq.n	8004268 <HAL_TIM_PWM_Start+0x148>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a33      	ldr	r2, [pc, #204]	@ (8004330 <HAL_TIM_PWM_Start+0x210>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d101      	bne.n	800426c <HAL_TIM_PWM_Start+0x14c>
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <HAL_TIM_PWM_Start+0x14e>
 800426c:	2300      	movs	r3, #0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004280:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a25      	ldr	r2, [pc, #148]	@ (800431c <HAL_TIM_PWM_Start+0x1fc>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d022      	beq.n	80042d2 <HAL_TIM_PWM_Start+0x1b2>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004294:	d01d      	beq.n	80042d2 <HAL_TIM_PWM_Start+0x1b2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a26      	ldr	r2, [pc, #152]	@ (8004334 <HAL_TIM_PWM_Start+0x214>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d018      	beq.n	80042d2 <HAL_TIM_PWM_Start+0x1b2>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a24      	ldr	r2, [pc, #144]	@ (8004338 <HAL_TIM_PWM_Start+0x218>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d013      	beq.n	80042d2 <HAL_TIM_PWM_Start+0x1b2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a23      	ldr	r2, [pc, #140]	@ (800433c <HAL_TIM_PWM_Start+0x21c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00e      	beq.n	80042d2 <HAL_TIM_PWM_Start+0x1b2>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a19      	ldr	r2, [pc, #100]	@ (8004320 <HAL_TIM_PWM_Start+0x200>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d009      	beq.n	80042d2 <HAL_TIM_PWM_Start+0x1b2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a18      	ldr	r2, [pc, #96]	@ (8004324 <HAL_TIM_PWM_Start+0x204>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d004      	beq.n	80042d2 <HAL_TIM_PWM_Start+0x1b2>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a18      	ldr	r2, [pc, #96]	@ (8004330 <HAL_TIM_PWM_Start+0x210>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d115      	bne.n	80042fe <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	4b19      	ldr	r3, [pc, #100]	@ (8004340 <HAL_TIM_PWM_Start+0x220>)
 80042da:	4013      	ands	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b06      	cmp	r3, #6
 80042e2:	d015      	beq.n	8004310 <HAL_TIM_PWM_Start+0x1f0>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ea:	d011      	beq.n	8004310 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fc:	e008      	b.n	8004310 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0201 	orr.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	e000      	b.n	8004312 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004310:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40012c00 	.word	0x40012c00
 8004320:	40013400 	.word	0x40013400
 8004324:	40014000 	.word	0x40014000
 8004328:	40014400 	.word	0x40014400
 800432c:	40014800 	.word	0x40014800
 8004330:	40015000 	.word	0x40015000
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800
 800433c:	40000c00 	.word	0x40000c00
 8004340:	00010007 	.word	0x00010007

08004344 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e097      	b.n	8004488 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7fd fe9f 	bl	80020b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004388:	f023 0307 	bic.w	r3, r3, #7
 800438c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3304      	adds	r3, #4
 8004396:	4619      	mov	r1, r3
 8004398:	4610      	mov	r0, r2
 800439a:	f000 fca9 	bl	8004cf0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043c6:	f023 0303 	bic.w	r3, r3, #3
 80043ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	021b      	lsls	r3, r3, #8
 80043d6:	4313      	orrs	r3, r2
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80043e4:	f023 030c 	bic.w	r3, r3, #12
 80043e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	021b      	lsls	r3, r3, #8
 8004400:	4313      	orrs	r3, r2
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	011a      	lsls	r2, r3, #4
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	031b      	lsls	r3, r3, #12
 8004414:	4313      	orrs	r3, r2
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004422:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800442a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	4313      	orrs	r3, r2
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d110      	bne.n	80044e2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d102      	bne.n	80044cc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80044c6:	7b7b      	ldrb	r3, [r7, #13]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d001      	beq.n	80044d0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e069      	b.n	80045a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044e0:	e031      	b.n	8004546 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d110      	bne.n	800450a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044e8:	7bbb      	ldrb	r3, [r7, #14]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d102      	bne.n	80044f4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044ee:	7b3b      	ldrb	r3, [r7, #12]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d001      	beq.n	80044f8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e055      	b.n	80045a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004508:	e01d      	b.n	8004546 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800450a:	7bfb      	ldrb	r3, [r7, #15]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d108      	bne.n	8004522 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004510:	7bbb      	ldrb	r3, [r7, #14]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d105      	bne.n	8004522 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004516:	7b7b      	ldrb	r3, [r7, #13]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d102      	bne.n	8004522 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800451c:	7b3b      	ldrb	r3, [r7, #12]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d001      	beq.n	8004526 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e03e      	b.n	80045a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2202      	movs	r2, #2
 800452a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2202      	movs	r2, #2
 8004532:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2202      	movs	r2, #2
 800453a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2202      	movs	r2, #2
 8004542:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_TIM_Encoder_Start+0xc4>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2b04      	cmp	r3, #4
 8004550:	d008      	beq.n	8004564 <HAL_TIM_Encoder_Start+0xd4>
 8004552:	e00f      	b.n	8004574 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2201      	movs	r2, #1
 800455a:	2100      	movs	r1, #0
 800455c:	4618      	mov	r0, r3
 800455e:	f001 f841 	bl	80055e4 <TIM_CCxChannelCmd>
      break;
 8004562:	e016      	b.n	8004592 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2201      	movs	r2, #1
 800456a:	2104      	movs	r1, #4
 800456c:	4618      	mov	r0, r3
 800456e:	f001 f839 	bl	80055e4 <TIM_CCxChannelCmd>
      break;
 8004572:	e00e      	b.n	8004592 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2201      	movs	r2, #1
 800457a:	2100      	movs	r1, #0
 800457c:	4618      	mov	r0, r3
 800457e:	f001 f831 	bl	80055e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2201      	movs	r2, #1
 8004588:	2104      	movs	r1, #4
 800458a:	4618      	mov	r0, r3
 800458c:	f001 f82a 	bl	80055e4 <TIM_CCxChannelCmd>
      break;
 8004590:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0201 	orr.w	r2, r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d020      	beq.n	8004610 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01b      	beq.n	8004610 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0202 	mvn.w	r2, #2
 80045e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fb5c 	bl	8004cb4 <HAL_TIM_IC_CaptureCallback>
 80045fc:	e005      	b.n	800460a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fb4e 	bl	8004ca0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 fb5f 	bl	8004cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b00      	cmp	r3, #0
 8004618:	d020      	beq.n	800465c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01b      	beq.n	800465c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0204 	mvn.w	r2, #4
 800462c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2202      	movs	r2, #2
 8004632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fb36 	bl	8004cb4 <HAL_TIM_IC_CaptureCallback>
 8004648:	e005      	b.n	8004656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fb28 	bl	8004ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fb39 	bl	8004cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d020      	beq.n	80046a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01b      	beq.n	80046a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f06f 0208 	mvn.w	r2, #8
 8004678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2204      	movs	r2, #4
 800467e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fb10 	bl	8004cb4 <HAL_TIM_IC_CaptureCallback>
 8004694:	e005      	b.n	80046a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fb02 	bl	8004ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 fb13 	bl	8004cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f003 0310 	and.w	r3, r3, #16
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d020      	beq.n	80046f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f003 0310 	and.w	r3, r3, #16
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d01b      	beq.n	80046f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0210 	mvn.w	r2, #16
 80046c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2208      	movs	r2, #8
 80046ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 faea 	bl	8004cb4 <HAL_TIM_IC_CaptureCallback>
 80046e0:	e005      	b.n	80046ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fadc 	bl	8004ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 faed 	bl	8004cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00c      	beq.n	8004718 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b00      	cmp	r3, #0
 8004706:	d007      	beq.n	8004718 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0201 	mvn.w	r2, #1
 8004710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fd fba0 	bl	8001e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800471e:	2b00      	cmp	r3, #0
 8004720:	d104      	bne.n	800472c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00c      	beq.n	8004746 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800473e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f001 f8a9 	bl	8005898 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00c      	beq.n	800476a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004756:	2b00      	cmp	r3, #0
 8004758:	d007      	beq.n	800476a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f001 f8a1 	bl	80058ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00c      	beq.n	800478e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	d007      	beq.n	800478e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 faa7 	bl	8004cdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00c      	beq.n	80047b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d007      	beq.n	80047b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f06f 0220 	mvn.w	r2, #32
 80047aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f001 f869 	bl	8005884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00c      	beq.n	80047d6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80047ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f001 f875 	bl	80058c0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00c      	beq.n	80047fa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d007      	beq.n	80047fa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80047f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f001 f86d 	bl	80058d4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00c      	beq.n	800481e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d007      	beq.n	800481e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f001 f865 	bl	80058e8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00c      	beq.n	8004842 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d007      	beq.n	8004842 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800483a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f001 f85d 	bl	80058fc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004842:	bf00      	nop
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004866:	2302      	movs	r3, #2
 8004868:	e0ff      	b.n	8004a6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b14      	cmp	r3, #20
 8004876:	f200 80f0 	bhi.w	8004a5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800487a:	a201      	add	r2, pc, #4	@ (adr r2, 8004880 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800487c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004880:	080048d5 	.word	0x080048d5
 8004884:	08004a5b 	.word	0x08004a5b
 8004888:	08004a5b 	.word	0x08004a5b
 800488c:	08004a5b 	.word	0x08004a5b
 8004890:	08004915 	.word	0x08004915
 8004894:	08004a5b 	.word	0x08004a5b
 8004898:	08004a5b 	.word	0x08004a5b
 800489c:	08004a5b 	.word	0x08004a5b
 80048a0:	08004957 	.word	0x08004957
 80048a4:	08004a5b 	.word	0x08004a5b
 80048a8:	08004a5b 	.word	0x08004a5b
 80048ac:	08004a5b 	.word	0x08004a5b
 80048b0:	08004997 	.word	0x08004997
 80048b4:	08004a5b 	.word	0x08004a5b
 80048b8:	08004a5b 	.word	0x08004a5b
 80048bc:	08004a5b 	.word	0x08004a5b
 80048c0:	080049d9 	.word	0x080049d9
 80048c4:	08004a5b 	.word	0x08004a5b
 80048c8:	08004a5b 	.word	0x08004a5b
 80048cc:	08004a5b 	.word	0x08004a5b
 80048d0:	08004a19 	.word	0x08004a19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68b9      	ldr	r1, [r7, #8]
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fabc 	bl	8004e58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699a      	ldr	r2, [r3, #24]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0208 	orr.w	r2, r2, #8
 80048ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0204 	bic.w	r2, r2, #4
 80048fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6999      	ldr	r1, [r3, #24]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	691a      	ldr	r2, [r3, #16]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	619a      	str	r2, [r3, #24]
      break;
 8004912:	e0a5      	b.n	8004a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fb36 	bl	8004f8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699a      	ldr	r2, [r3, #24]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800492e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699a      	ldr	r2, [r3, #24]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800493e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6999      	ldr	r1, [r3, #24]
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	021a      	lsls	r2, r3, #8
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	619a      	str	r2, [r3, #24]
      break;
 8004954:	e084      	b.n	8004a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	4618      	mov	r0, r3
 800495e:	f000 fba9 	bl	80050b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69da      	ldr	r2, [r3, #28]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f042 0208 	orr.w	r2, r2, #8
 8004970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69da      	ldr	r2, [r3, #28]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0204 	bic.w	r2, r2, #4
 8004980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	69d9      	ldr	r1, [r3, #28]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	61da      	str	r2, [r3, #28]
      break;
 8004994:	e064      	b.n	8004a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68b9      	ldr	r1, [r7, #8]
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fc1b 	bl	80051d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69da      	ldr	r2, [r3, #28]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69d9      	ldr	r1, [r3, #28]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	021a      	lsls	r2, r3, #8
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	61da      	str	r2, [r3, #28]
      break;
 80049d6:	e043      	b.n	8004a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fc8e 	bl	8005300 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0208 	orr.w	r2, r2, #8
 80049f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0204 	bic.w	r2, r2, #4
 8004a02:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	691a      	ldr	r2, [r3, #16]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004a16:	e023      	b.n	8004a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68b9      	ldr	r1, [r7, #8]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fcd8 	bl	80053d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a42:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	021a      	lsls	r2, r3, #8
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004a58:	e002      	b.n	8004a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop

08004a74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_TIM_ConfigClockSource+0x1c>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e0f6      	b.n	8004c7e <HAL_TIM_ConfigClockSource+0x20a>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004aae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004aba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a6f      	ldr	r2, [pc, #444]	@ (8004c88 <HAL_TIM_ConfigClockSource+0x214>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	f000 80c1 	beq.w	8004c52 <HAL_TIM_ConfigClockSource+0x1de>
 8004ad0:	4a6d      	ldr	r2, [pc, #436]	@ (8004c88 <HAL_TIM_ConfigClockSource+0x214>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	f200 80c6 	bhi.w	8004c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ad8:	4a6c      	ldr	r2, [pc, #432]	@ (8004c8c <HAL_TIM_ConfigClockSource+0x218>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	f000 80b9 	beq.w	8004c52 <HAL_TIM_ConfigClockSource+0x1de>
 8004ae0:	4a6a      	ldr	r2, [pc, #424]	@ (8004c8c <HAL_TIM_ConfigClockSource+0x218>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	f200 80be 	bhi.w	8004c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ae8:	4a69      	ldr	r2, [pc, #420]	@ (8004c90 <HAL_TIM_ConfigClockSource+0x21c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	f000 80b1 	beq.w	8004c52 <HAL_TIM_ConfigClockSource+0x1de>
 8004af0:	4a67      	ldr	r2, [pc, #412]	@ (8004c90 <HAL_TIM_ConfigClockSource+0x21c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	f200 80b6 	bhi.w	8004c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8004af8:	4a66      	ldr	r2, [pc, #408]	@ (8004c94 <HAL_TIM_ConfigClockSource+0x220>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	f000 80a9 	beq.w	8004c52 <HAL_TIM_ConfigClockSource+0x1de>
 8004b00:	4a64      	ldr	r2, [pc, #400]	@ (8004c94 <HAL_TIM_ConfigClockSource+0x220>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	f200 80ae 	bhi.w	8004c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b08:	4a63      	ldr	r2, [pc, #396]	@ (8004c98 <HAL_TIM_ConfigClockSource+0x224>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	f000 80a1 	beq.w	8004c52 <HAL_TIM_ConfigClockSource+0x1de>
 8004b10:	4a61      	ldr	r2, [pc, #388]	@ (8004c98 <HAL_TIM_ConfigClockSource+0x224>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	f200 80a6 	bhi.w	8004c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b18:	4a60      	ldr	r2, [pc, #384]	@ (8004c9c <HAL_TIM_ConfigClockSource+0x228>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	f000 8099 	beq.w	8004c52 <HAL_TIM_ConfigClockSource+0x1de>
 8004b20:	4a5e      	ldr	r2, [pc, #376]	@ (8004c9c <HAL_TIM_ConfigClockSource+0x228>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	f200 809e 	bhi.w	8004c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b28:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004b2c:	f000 8091 	beq.w	8004c52 <HAL_TIM_ConfigClockSource+0x1de>
 8004b30:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004b34:	f200 8096 	bhi.w	8004c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b3c:	f000 8089 	beq.w	8004c52 <HAL_TIM_ConfigClockSource+0x1de>
 8004b40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b44:	f200 808e 	bhi.w	8004c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b4c:	d03e      	beq.n	8004bcc <HAL_TIM_ConfigClockSource+0x158>
 8004b4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b52:	f200 8087 	bhi.w	8004c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b5a:	f000 8086 	beq.w	8004c6a <HAL_TIM_ConfigClockSource+0x1f6>
 8004b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b62:	d87f      	bhi.n	8004c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b64:	2b70      	cmp	r3, #112	@ 0x70
 8004b66:	d01a      	beq.n	8004b9e <HAL_TIM_ConfigClockSource+0x12a>
 8004b68:	2b70      	cmp	r3, #112	@ 0x70
 8004b6a:	d87b      	bhi.n	8004c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b6c:	2b60      	cmp	r3, #96	@ 0x60
 8004b6e:	d050      	beq.n	8004c12 <HAL_TIM_ConfigClockSource+0x19e>
 8004b70:	2b60      	cmp	r3, #96	@ 0x60
 8004b72:	d877      	bhi.n	8004c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b74:	2b50      	cmp	r3, #80	@ 0x50
 8004b76:	d03c      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0x17e>
 8004b78:	2b50      	cmp	r3, #80	@ 0x50
 8004b7a:	d873      	bhi.n	8004c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b7c:	2b40      	cmp	r3, #64	@ 0x40
 8004b7e:	d058      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x1be>
 8004b80:	2b40      	cmp	r3, #64	@ 0x40
 8004b82:	d86f      	bhi.n	8004c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b84:	2b30      	cmp	r3, #48	@ 0x30
 8004b86:	d064      	beq.n	8004c52 <HAL_TIM_ConfigClockSource+0x1de>
 8004b88:	2b30      	cmp	r3, #48	@ 0x30
 8004b8a:	d86b      	bhi.n	8004c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b8c:	2b20      	cmp	r3, #32
 8004b8e:	d060      	beq.n	8004c52 <HAL_TIM_ConfigClockSource+0x1de>
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	d867      	bhi.n	8004c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d05c      	beq.n	8004c52 <HAL_TIM_ConfigClockSource+0x1de>
 8004b98:	2b10      	cmp	r3, #16
 8004b9a:	d05a      	beq.n	8004c52 <HAL_TIM_ConfigClockSource+0x1de>
 8004b9c:	e062      	b.n	8004c64 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bae:	f000 fcf9 	bl	80055a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	609a      	str	r2, [r3, #8]
      break;
 8004bca:	e04f      	b.n	8004c6c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bdc:	f000 fce2 	bl	80055a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bee:	609a      	str	r2, [r3, #8]
      break;
 8004bf0:	e03c      	b.n	8004c6c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f000 fc54 	bl	80054ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2150      	movs	r1, #80	@ 0x50
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fcad 	bl	800556a <TIM_ITRx_SetConfig>
      break;
 8004c10:	e02c      	b.n	8004c6c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f000 fc73 	bl	800550a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2160      	movs	r1, #96	@ 0x60
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fc9d 	bl	800556a <TIM_ITRx_SetConfig>
      break;
 8004c30:	e01c      	b.n	8004c6c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f000 fc34 	bl	80054ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2140      	movs	r1, #64	@ 0x40
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fc8d 	bl	800556a <TIM_ITRx_SetConfig>
      break;
 8004c50:	e00c      	b.n	8004c6c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	f000 fc84 	bl	800556a <TIM_ITRx_SetConfig>
      break;
 8004c62:	e003      	b.n	8004c6c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	73fb      	strb	r3, [r7, #15]
      break;
 8004c68:	e000      	b.n	8004c6c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004c6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	00100070 	.word	0x00100070
 8004c8c:	00100060 	.word	0x00100060
 8004c90:	00100050 	.word	0x00100050
 8004c94:	00100040 	.word	0x00100040
 8004c98:	00100030 	.word	0x00100030
 8004c9c:	00100020 	.word	0x00100020

08004ca0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a4c      	ldr	r2, [pc, #304]	@ (8004e34 <TIM_Base_SetConfig+0x144>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d017      	beq.n	8004d38 <TIM_Base_SetConfig+0x48>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d0e:	d013      	beq.n	8004d38 <TIM_Base_SetConfig+0x48>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a49      	ldr	r2, [pc, #292]	@ (8004e38 <TIM_Base_SetConfig+0x148>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00f      	beq.n	8004d38 <TIM_Base_SetConfig+0x48>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a48      	ldr	r2, [pc, #288]	@ (8004e3c <TIM_Base_SetConfig+0x14c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00b      	beq.n	8004d38 <TIM_Base_SetConfig+0x48>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a47      	ldr	r2, [pc, #284]	@ (8004e40 <TIM_Base_SetConfig+0x150>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d007      	beq.n	8004d38 <TIM_Base_SetConfig+0x48>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a46      	ldr	r2, [pc, #280]	@ (8004e44 <TIM_Base_SetConfig+0x154>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_Base_SetConfig+0x48>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a45      	ldr	r2, [pc, #276]	@ (8004e48 <TIM_Base_SetConfig+0x158>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d108      	bne.n	8004d4a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a39      	ldr	r2, [pc, #228]	@ (8004e34 <TIM_Base_SetConfig+0x144>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d023      	beq.n	8004d9a <TIM_Base_SetConfig+0xaa>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d58:	d01f      	beq.n	8004d9a <TIM_Base_SetConfig+0xaa>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a36      	ldr	r2, [pc, #216]	@ (8004e38 <TIM_Base_SetConfig+0x148>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d01b      	beq.n	8004d9a <TIM_Base_SetConfig+0xaa>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a35      	ldr	r2, [pc, #212]	@ (8004e3c <TIM_Base_SetConfig+0x14c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d017      	beq.n	8004d9a <TIM_Base_SetConfig+0xaa>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a34      	ldr	r2, [pc, #208]	@ (8004e40 <TIM_Base_SetConfig+0x150>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d013      	beq.n	8004d9a <TIM_Base_SetConfig+0xaa>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a33      	ldr	r2, [pc, #204]	@ (8004e44 <TIM_Base_SetConfig+0x154>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d00f      	beq.n	8004d9a <TIM_Base_SetConfig+0xaa>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a33      	ldr	r2, [pc, #204]	@ (8004e4c <TIM_Base_SetConfig+0x15c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00b      	beq.n	8004d9a <TIM_Base_SetConfig+0xaa>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a32      	ldr	r2, [pc, #200]	@ (8004e50 <TIM_Base_SetConfig+0x160>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d007      	beq.n	8004d9a <TIM_Base_SetConfig+0xaa>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a31      	ldr	r2, [pc, #196]	@ (8004e54 <TIM_Base_SetConfig+0x164>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d003      	beq.n	8004d9a <TIM_Base_SetConfig+0xaa>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a2c      	ldr	r2, [pc, #176]	@ (8004e48 <TIM_Base_SetConfig+0x158>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d108      	bne.n	8004dac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a18      	ldr	r2, [pc, #96]	@ (8004e34 <TIM_Base_SetConfig+0x144>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d013      	beq.n	8004e00 <TIM_Base_SetConfig+0x110>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a1a      	ldr	r2, [pc, #104]	@ (8004e44 <TIM_Base_SetConfig+0x154>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00f      	beq.n	8004e00 <TIM_Base_SetConfig+0x110>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a1a      	ldr	r2, [pc, #104]	@ (8004e4c <TIM_Base_SetConfig+0x15c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00b      	beq.n	8004e00 <TIM_Base_SetConfig+0x110>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a19      	ldr	r2, [pc, #100]	@ (8004e50 <TIM_Base_SetConfig+0x160>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d007      	beq.n	8004e00 <TIM_Base_SetConfig+0x110>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a18      	ldr	r2, [pc, #96]	@ (8004e54 <TIM_Base_SetConfig+0x164>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_Base_SetConfig+0x110>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a13      	ldr	r2, [pc, #76]	@ (8004e48 <TIM_Base_SetConfig+0x158>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d103      	bne.n	8004e08 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d105      	bne.n	8004e26 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f023 0201 	bic.w	r2, r3, #1
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	611a      	str	r2, [r3, #16]
  }
}
 8004e26:	bf00      	nop
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	40012c00 	.word	0x40012c00
 8004e38:	40000400 	.word	0x40000400
 8004e3c:	40000800 	.word	0x40000800
 8004e40:	40000c00 	.word	0x40000c00
 8004e44:	40013400 	.word	0x40013400
 8004e48:	40015000 	.word	0x40015000
 8004e4c:	40014000 	.word	0x40014000
 8004e50:	40014400 	.word	0x40014400
 8004e54:	40014800 	.word	0x40014800

08004e58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	f023 0201 	bic.w	r2, r3, #1
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0303 	bic.w	r3, r3, #3
 8004e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f023 0302 	bic.w	r3, r3, #2
 8004ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a30      	ldr	r2, [pc, #192]	@ (8004f74 <TIM_OC1_SetConfig+0x11c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d013      	beq.n	8004ee0 <TIM_OC1_SetConfig+0x88>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a2f      	ldr	r2, [pc, #188]	@ (8004f78 <TIM_OC1_SetConfig+0x120>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00f      	beq.n	8004ee0 <TIM_OC1_SetConfig+0x88>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a2e      	ldr	r2, [pc, #184]	@ (8004f7c <TIM_OC1_SetConfig+0x124>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d00b      	beq.n	8004ee0 <TIM_OC1_SetConfig+0x88>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a2d      	ldr	r2, [pc, #180]	@ (8004f80 <TIM_OC1_SetConfig+0x128>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d007      	beq.n	8004ee0 <TIM_OC1_SetConfig+0x88>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8004f84 <TIM_OC1_SetConfig+0x12c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d003      	beq.n	8004ee0 <TIM_OC1_SetConfig+0x88>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a2b      	ldr	r2, [pc, #172]	@ (8004f88 <TIM_OC1_SetConfig+0x130>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d10c      	bne.n	8004efa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f023 0308 	bic.w	r3, r3, #8
 8004ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f023 0304 	bic.w	r3, r3, #4
 8004ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a1d      	ldr	r2, [pc, #116]	@ (8004f74 <TIM_OC1_SetConfig+0x11c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d013      	beq.n	8004f2a <TIM_OC1_SetConfig+0xd2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a1c      	ldr	r2, [pc, #112]	@ (8004f78 <TIM_OC1_SetConfig+0x120>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00f      	beq.n	8004f2a <TIM_OC1_SetConfig+0xd2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8004f7c <TIM_OC1_SetConfig+0x124>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00b      	beq.n	8004f2a <TIM_OC1_SetConfig+0xd2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a1a      	ldr	r2, [pc, #104]	@ (8004f80 <TIM_OC1_SetConfig+0x128>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d007      	beq.n	8004f2a <TIM_OC1_SetConfig+0xd2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a19      	ldr	r2, [pc, #100]	@ (8004f84 <TIM_OC1_SetConfig+0x12c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d003      	beq.n	8004f2a <TIM_OC1_SetConfig+0xd2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a18      	ldr	r2, [pc, #96]	@ (8004f88 <TIM_OC1_SetConfig+0x130>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d111      	bne.n	8004f4e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	621a      	str	r2, [r3, #32]
}
 8004f68:	bf00      	nop
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	40012c00 	.word	0x40012c00
 8004f78:	40013400 	.word	0x40013400
 8004f7c:	40014000 	.word	0x40014000
 8004f80:	40014400 	.word	0x40014400
 8004f84:	40014800 	.word	0x40014800
 8004f88:	40015000 	.word	0x40015000

08004f8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	f023 0210 	bic.w	r2, r3, #16
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f023 0320 	bic.w	r3, r3, #32
 8004fda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a2c      	ldr	r2, [pc, #176]	@ (800509c <TIM_OC2_SetConfig+0x110>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d007      	beq.n	8005000 <TIM_OC2_SetConfig+0x74>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a2b      	ldr	r2, [pc, #172]	@ (80050a0 <TIM_OC2_SetConfig+0x114>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d003      	beq.n	8005000 <TIM_OC2_SetConfig+0x74>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a2a      	ldr	r2, [pc, #168]	@ (80050a4 <TIM_OC2_SetConfig+0x118>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d10d      	bne.n	800501c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800501a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a1f      	ldr	r2, [pc, #124]	@ (800509c <TIM_OC2_SetConfig+0x110>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d013      	beq.n	800504c <TIM_OC2_SetConfig+0xc0>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a1e      	ldr	r2, [pc, #120]	@ (80050a0 <TIM_OC2_SetConfig+0x114>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d00f      	beq.n	800504c <TIM_OC2_SetConfig+0xc0>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a1e      	ldr	r2, [pc, #120]	@ (80050a8 <TIM_OC2_SetConfig+0x11c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00b      	beq.n	800504c <TIM_OC2_SetConfig+0xc0>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a1d      	ldr	r2, [pc, #116]	@ (80050ac <TIM_OC2_SetConfig+0x120>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d007      	beq.n	800504c <TIM_OC2_SetConfig+0xc0>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a1c      	ldr	r2, [pc, #112]	@ (80050b0 <TIM_OC2_SetConfig+0x124>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d003      	beq.n	800504c <TIM_OC2_SetConfig+0xc0>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a17      	ldr	r2, [pc, #92]	@ (80050a4 <TIM_OC2_SetConfig+0x118>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d113      	bne.n	8005074 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005052:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800505a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	4313      	orrs	r3, r2
 8005072:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	621a      	str	r2, [r3, #32]
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40012c00 	.word	0x40012c00
 80050a0:	40013400 	.word	0x40013400
 80050a4:	40015000 	.word	0x40015000
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40014400 	.word	0x40014400
 80050b0:	40014800 	.word	0x40014800

080050b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 0303 	bic.w	r3, r3, #3
 80050ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	021b      	lsls	r3, r3, #8
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a2b      	ldr	r2, [pc, #172]	@ (80051c0 <TIM_OC3_SetConfig+0x10c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d007      	beq.n	8005126 <TIM_OC3_SetConfig+0x72>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a2a      	ldr	r2, [pc, #168]	@ (80051c4 <TIM_OC3_SetConfig+0x110>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d003      	beq.n	8005126 <TIM_OC3_SetConfig+0x72>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a29      	ldr	r2, [pc, #164]	@ (80051c8 <TIM_OC3_SetConfig+0x114>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d10d      	bne.n	8005142 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800512c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a1e      	ldr	r2, [pc, #120]	@ (80051c0 <TIM_OC3_SetConfig+0x10c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <TIM_OC3_SetConfig+0xbe>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a1d      	ldr	r2, [pc, #116]	@ (80051c4 <TIM_OC3_SetConfig+0x110>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00f      	beq.n	8005172 <TIM_OC3_SetConfig+0xbe>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a1d      	ldr	r2, [pc, #116]	@ (80051cc <TIM_OC3_SetConfig+0x118>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d00b      	beq.n	8005172 <TIM_OC3_SetConfig+0xbe>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a1c      	ldr	r2, [pc, #112]	@ (80051d0 <TIM_OC3_SetConfig+0x11c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d007      	beq.n	8005172 <TIM_OC3_SetConfig+0xbe>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a1b      	ldr	r2, [pc, #108]	@ (80051d4 <TIM_OC3_SetConfig+0x120>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d003      	beq.n	8005172 <TIM_OC3_SetConfig+0xbe>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a16      	ldr	r2, [pc, #88]	@ (80051c8 <TIM_OC3_SetConfig+0x114>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d113      	bne.n	800519a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	621a      	str	r2, [r3, #32]
}
 80051b4:	bf00      	nop
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	40012c00 	.word	0x40012c00
 80051c4:	40013400 	.word	0x40013400
 80051c8:	40015000 	.word	0x40015000
 80051cc:	40014000 	.word	0x40014000
 80051d0:	40014400 	.word	0x40014400
 80051d4:	40014800 	.word	0x40014800

080051d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800520a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	031b      	lsls	r3, r3, #12
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a2c      	ldr	r2, [pc, #176]	@ (80052e8 <TIM_OC4_SetConfig+0x110>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d007      	beq.n	800524c <TIM_OC4_SetConfig+0x74>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a2b      	ldr	r2, [pc, #172]	@ (80052ec <TIM_OC4_SetConfig+0x114>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d003      	beq.n	800524c <TIM_OC4_SetConfig+0x74>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a2a      	ldr	r2, [pc, #168]	@ (80052f0 <TIM_OC4_SetConfig+0x118>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d10d      	bne.n	8005268 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	031b      	lsls	r3, r3, #12
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	4313      	orrs	r3, r2
 800525e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005266:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a1f      	ldr	r2, [pc, #124]	@ (80052e8 <TIM_OC4_SetConfig+0x110>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d013      	beq.n	8005298 <TIM_OC4_SetConfig+0xc0>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a1e      	ldr	r2, [pc, #120]	@ (80052ec <TIM_OC4_SetConfig+0x114>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00f      	beq.n	8005298 <TIM_OC4_SetConfig+0xc0>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a1e      	ldr	r2, [pc, #120]	@ (80052f4 <TIM_OC4_SetConfig+0x11c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00b      	beq.n	8005298 <TIM_OC4_SetConfig+0xc0>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a1d      	ldr	r2, [pc, #116]	@ (80052f8 <TIM_OC4_SetConfig+0x120>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d007      	beq.n	8005298 <TIM_OC4_SetConfig+0xc0>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a1c      	ldr	r2, [pc, #112]	@ (80052fc <TIM_OC4_SetConfig+0x124>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d003      	beq.n	8005298 <TIM_OC4_SetConfig+0xc0>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a17      	ldr	r2, [pc, #92]	@ (80052f0 <TIM_OC4_SetConfig+0x118>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d113      	bne.n	80052c0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800529e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80052a6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	019b      	lsls	r3, r3, #6
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	019b      	lsls	r3, r3, #6
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	621a      	str	r2, [r3, #32]
}
 80052da:	bf00      	nop
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40012c00 	.word	0x40012c00
 80052ec:	40013400 	.word	0x40013400
 80052f0:	40015000 	.word	0x40015000
 80052f4:	40014000 	.word	0x40014000
 80052f8:	40014400 	.word	0x40014400
 80052fc:	40014800 	.word	0x40014800

08005300 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800532e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005344:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	041b      	lsls	r3, r3, #16
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	4313      	orrs	r3, r2
 8005350:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a19      	ldr	r2, [pc, #100]	@ (80053bc <TIM_OC5_SetConfig+0xbc>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d013      	beq.n	8005382 <TIM_OC5_SetConfig+0x82>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a18      	ldr	r2, [pc, #96]	@ (80053c0 <TIM_OC5_SetConfig+0xc0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00f      	beq.n	8005382 <TIM_OC5_SetConfig+0x82>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a17      	ldr	r2, [pc, #92]	@ (80053c4 <TIM_OC5_SetConfig+0xc4>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00b      	beq.n	8005382 <TIM_OC5_SetConfig+0x82>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a16      	ldr	r2, [pc, #88]	@ (80053c8 <TIM_OC5_SetConfig+0xc8>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d007      	beq.n	8005382 <TIM_OC5_SetConfig+0x82>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a15      	ldr	r2, [pc, #84]	@ (80053cc <TIM_OC5_SetConfig+0xcc>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d003      	beq.n	8005382 <TIM_OC5_SetConfig+0x82>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a14      	ldr	r2, [pc, #80]	@ (80053d0 <TIM_OC5_SetConfig+0xd0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d109      	bne.n	8005396 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005388:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	021b      	lsls	r3, r3, #8
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	621a      	str	r2, [r3, #32]
}
 80053b0:	bf00      	nop
 80053b2:	371c      	adds	r7, #28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	40012c00 	.word	0x40012c00
 80053c0:	40013400 	.word	0x40013400
 80053c4:	40014000 	.word	0x40014000
 80053c8:	40014400 	.word	0x40014400
 80053cc:	40014800 	.word	0x40014800
 80053d0:	40015000 	.word	0x40015000

080053d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005402:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800541a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	051b      	lsls	r3, r3, #20
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	4313      	orrs	r3, r2
 8005426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a1a      	ldr	r2, [pc, #104]	@ (8005494 <TIM_OC6_SetConfig+0xc0>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d013      	beq.n	8005458 <TIM_OC6_SetConfig+0x84>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a19      	ldr	r2, [pc, #100]	@ (8005498 <TIM_OC6_SetConfig+0xc4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00f      	beq.n	8005458 <TIM_OC6_SetConfig+0x84>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a18      	ldr	r2, [pc, #96]	@ (800549c <TIM_OC6_SetConfig+0xc8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d00b      	beq.n	8005458 <TIM_OC6_SetConfig+0x84>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a17      	ldr	r2, [pc, #92]	@ (80054a0 <TIM_OC6_SetConfig+0xcc>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d007      	beq.n	8005458 <TIM_OC6_SetConfig+0x84>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a16      	ldr	r2, [pc, #88]	@ (80054a4 <TIM_OC6_SetConfig+0xd0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d003      	beq.n	8005458 <TIM_OC6_SetConfig+0x84>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a15      	ldr	r2, [pc, #84]	@ (80054a8 <TIM_OC6_SetConfig+0xd4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d109      	bne.n	800546c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800545e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	029b      	lsls	r3, r3, #10
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	621a      	str	r2, [r3, #32]
}
 8005486:	bf00      	nop
 8005488:	371c      	adds	r7, #28
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40012c00 	.word	0x40012c00
 8005498:	40013400 	.word	0x40013400
 800549c:	40014000 	.word	0x40014000
 80054a0:	40014400 	.word	0x40014400
 80054a4:	40014800 	.word	0x40014800
 80054a8:	40015000 	.word	0x40015000

080054ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f023 0201 	bic.w	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f023 030a 	bic.w	r3, r3, #10
 80054e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	621a      	str	r2, [r3, #32]
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800550a:	b480      	push	{r7}
 800550c:	b087      	sub	sp, #28
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	f023 0210 	bic.w	r2, r3, #16
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005534:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	031b      	lsls	r3, r3, #12
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005546:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	621a      	str	r2, [r3, #32]
}
 800555e:	bf00      	nop
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800556a:	b480      	push	{r7}
 800556c:	b085      	sub	sp, #20
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4313      	orrs	r3, r2
 800558c:	f043 0307 	orr.w	r3, r3, #7
 8005590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	609a      	str	r2, [r3, #8]
}
 8005598:	bf00      	nop
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	021a      	lsls	r2, r3, #8
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	609a      	str	r2, [r3, #8]
}
 80055d8:	bf00      	nop
 80055da:	371c      	adds	r7, #28
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f003 031f 	and.w	r3, r3, #31
 80055f6:	2201      	movs	r2, #1
 80055f8:	fa02 f303 	lsl.w	r3, r2, r3
 80055fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a1a      	ldr	r2, [r3, #32]
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	43db      	mvns	r3, r3
 8005606:	401a      	ands	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a1a      	ldr	r2, [r3, #32]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 031f 	and.w	r3, r3, #31
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	fa01 f303 	lsl.w	r3, r1, r3
 800561c:	431a      	orrs	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	621a      	str	r2, [r3, #32]
}
 8005622:	bf00      	nop
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
	...

08005630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005640:	2b01      	cmp	r3, #1
 8005642:	d101      	bne.n	8005648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005644:	2302      	movs	r3, #2
 8005646:	e074      	b.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a34      	ldr	r2, [pc, #208]	@ (8005740 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d009      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a33      	ldr	r2, [pc, #204]	@ (8005744 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d004      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a31      	ldr	r2, [pc, #196]	@ (8005748 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d108      	bne.n	8005698 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800568c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	4313      	orrs	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800569e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a21      	ldr	r2, [pc, #132]	@ (8005740 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d022      	beq.n	8005706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056c8:	d01d      	beq.n	8005706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a1f      	ldr	r2, [pc, #124]	@ (800574c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d018      	beq.n	8005706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005750 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d013      	beq.n	8005706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005754 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d00e      	beq.n	8005706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a15      	ldr	r2, [pc, #84]	@ (8005744 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d009      	beq.n	8005706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a18      	ldr	r2, [pc, #96]	@ (8005758 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d004      	beq.n	8005706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a11      	ldr	r2, [pc, #68]	@ (8005748 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d10c      	bne.n	8005720 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800570c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	4313      	orrs	r3, r2
 8005716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	40012c00 	.word	0x40012c00
 8005744:	40013400 	.word	0x40013400
 8005748:	40015000 	.word	0x40015000
 800574c:	40000400 	.word	0x40000400
 8005750:	40000800 	.word	0x40000800
 8005754:	40000c00 	.word	0x40000c00
 8005758:	40014000 	.word	0x40014000

0800575c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005774:	2302      	movs	r3, #2
 8005776:	e078      	b.n	800586a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	041b      	lsls	r3, r3, #16
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a1c      	ldr	r2, [pc, #112]	@ (8005878 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d009      	beq.n	800581e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a1b      	ldr	r2, [pc, #108]	@ (800587c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d004      	beq.n	800581e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a19      	ldr	r2, [pc, #100]	@ (8005880 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d11c      	bne.n	8005858 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005828:	051b      	lsls	r3, r3, #20
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	40012c00 	.word	0x40012c00
 800587c:	40013400 	.word	0x40013400
 8005880:	40015000 	.word	0x40015000

08005884 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e042      	b.n	80059a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005928:	2b00      	cmp	r3, #0
 800592a:	d106      	bne.n	800593a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7fc fae1 	bl	8001efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2224      	movs	r2, #36	@ 0x24
 800593e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0201 	bic.w	r2, r2, #1
 8005950:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 ff42 	bl	80067e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 fc43 	bl	80061ec <UART_SetConfig>
 8005966:	4603      	mov	r3, r0
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e01b      	b.n	80059a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800597e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800598e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0201 	orr.w	r2, r2, #1
 800599e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 ffc1 	bl	8006928 <UART_CheckIdleState>
 80059a6:	4603      	mov	r3, r0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b08a      	sub	sp, #40	@ 0x28
 80059b4:	af02      	add	r7, sp, #8
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	603b      	str	r3, [r7, #0]
 80059bc:	4613      	mov	r3, r2
 80059be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d17b      	bne.n	8005ac2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <HAL_UART_Transmit+0x26>
 80059d0:	88fb      	ldrh	r3, [r7, #6]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e074      	b.n	8005ac4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2221      	movs	r2, #33	@ 0x21
 80059e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059ea:	f7fc fe4f 	bl	800268c <HAL_GetTick>
 80059ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	88fa      	ldrh	r2, [r7, #6]
 80059f4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	88fa      	ldrh	r2, [r7, #6]
 80059fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a08:	d108      	bne.n	8005a1c <HAL_UART_Transmit+0x6c>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d104      	bne.n	8005a1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a12:	2300      	movs	r3, #0
 8005a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	61bb      	str	r3, [r7, #24]
 8005a1a:	e003      	b.n	8005a24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a24:	e030      	b.n	8005a88 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2180      	movs	r1, #128	@ 0x80
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f001 f823 	bl	8006a7c <UART_WaitOnFlagUntilTimeout>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e03d      	b.n	8005ac4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10b      	bne.n	8005a66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a5c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	3302      	adds	r3, #2
 8005a62:	61bb      	str	r3, [r7, #24]
 8005a64:	e007      	b.n	8005a76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	781a      	ldrb	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	3301      	adds	r3, #1
 8005a74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1c8      	bne.n	8005a26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	2140      	movs	r1, #64	@ 0x40
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 ffec 	bl	8006a7c <UART_WaitOnFlagUntilTimeout>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d005      	beq.n	8005ab6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e006      	b.n	8005ac4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	e000      	b.n	8005ac4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005ac2:	2302      	movs	r3, #2
  }
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3720      	adds	r7, #32
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08a      	sub	sp, #40	@ 0x28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	d137      	bne.n	8005b54 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <HAL_UART_Receive_IT+0x24>
 8005aea:	88fb      	ldrh	r3, [r7, #6]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e030      	b.n	8005b56 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a18      	ldr	r2, [pc, #96]	@ (8005b60 <HAL_UART_Receive_IT+0x94>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d01f      	beq.n	8005b44 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d018      	beq.n	8005b44 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	e853 3f00 	ldrex	r3, [r3]
 8005b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b30:	623b      	str	r3, [r7, #32]
 8005b32:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b34:	69f9      	ldr	r1, [r7, #28]
 8005b36:	6a3a      	ldr	r2, [r7, #32]
 8005b38:	e841 2300 	strex	r3, r2, [r1]
 8005b3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e6      	bne.n	8005b12 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b44:	88fb      	ldrh	r3, [r7, #6]
 8005b46:	461a      	mov	r2, r3
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f001 f804 	bl	8006b58 <UART_Start_Receive_IT>
 8005b50:	4603      	mov	r3, r0
 8005b52:	e000      	b.n	8005b56 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b54:	2302      	movs	r3, #2
  }
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3728      	adds	r7, #40	@ 0x28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	40008000 	.word	0x40008000

08005b64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b0ba      	sub	sp, #232	@ 0xe8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005b8e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005b92:	4013      	ands	r3, r2
 8005b94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005b98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d11b      	bne.n	8005bd8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ba4:	f003 0320 	and.w	r3, r3, #32
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d015      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bb0:	f003 0320 	and.w	r3, r3, #32
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d105      	bne.n	8005bc4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d009      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 82e3 	beq.w	8006194 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	4798      	blx	r3
      }
      return;
 8005bd6:	e2dd      	b.n	8006194 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005bd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 8123 	beq.w	8005e28 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005be2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005be6:	4b8d      	ldr	r3, [pc, #564]	@ (8005e1c <HAL_UART_IRQHandler+0x2b8>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d106      	bne.n	8005bfc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005bee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005bf2:	4b8b      	ldr	r3, [pc, #556]	@ (8005e20 <HAL_UART_IRQHandler+0x2bc>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 8116 	beq.w	8005e28 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d011      	beq.n	8005c2c <HAL_UART_IRQHandler+0xc8>
 8005c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00b      	beq.n	8005c2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c22:	f043 0201 	orr.w	r2, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d011      	beq.n	8005c5c <HAL_UART_IRQHandler+0xf8>
 8005c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00b      	beq.n	8005c5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2202      	movs	r2, #2
 8005c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c52:	f043 0204 	orr.w	r2, r3, #4
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d011      	beq.n	8005c8c <HAL_UART_IRQHandler+0x128>
 8005c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00b      	beq.n	8005c8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2204      	movs	r2, #4
 8005c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c82:	f043 0202 	orr.w	r2, r3, #2
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c90:	f003 0308 	and.w	r3, r3, #8
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d017      	beq.n	8005cc8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c9c:	f003 0320 	and.w	r3, r3, #32
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d105      	bne.n	8005cb0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005ca4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005ca8:	4b5c      	ldr	r3, [pc, #368]	@ (8005e1c <HAL_UART_IRQHandler+0x2b8>)
 8005caa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00b      	beq.n	8005cc8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2208      	movs	r2, #8
 8005cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cbe:	f043 0208 	orr.w	r2, r3, #8
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ccc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d012      	beq.n	8005cfa <HAL_UART_IRQHandler+0x196>
 8005cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00c      	beq.n	8005cfa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ce8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf0:	f043 0220 	orr.w	r2, r3, #32
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 8249 	beq.w	8006198 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d0a:	f003 0320 	and.w	r3, r3, #32
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d013      	beq.n	8005d3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d16:	f003 0320 	and.w	r3, r3, #32
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d105      	bne.n	8005d2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d007      	beq.n	8005d3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4e:	2b40      	cmp	r3, #64	@ 0x40
 8005d50:	d005      	beq.n	8005d5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d054      	beq.n	8005e08 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f001 f81c 	bl	8006d9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d6e:	2b40      	cmp	r3, #64	@ 0x40
 8005d70:	d146      	bne.n	8005e00 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3308      	adds	r3, #8
 8005d78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d80:	e853 3f00 	ldrex	r3, [r3]
 8005d84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3308      	adds	r3, #8
 8005d9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005da2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005daa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005db6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1d9      	bne.n	8005d72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d017      	beq.n	8005df8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dce:	4a15      	ldr	r2, [pc, #84]	@ (8005e24 <HAL_UART_IRQHandler+0x2c0>)
 8005dd0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fc fd9c 	bl	8002916 <HAL_DMA_Abort_IT>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d019      	beq.n	8005e18 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005df2:	4610      	mov	r0, r2
 8005df4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df6:	e00f      	b.n	8005e18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f9e1 	bl	80061c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dfe:	e00b      	b.n	8005e18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f9dd 	bl	80061c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e06:	e007      	b.n	8005e18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f9d9 	bl	80061c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005e16:	e1bf      	b.n	8006198 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e18:	bf00      	nop
    return;
 8005e1a:	e1bd      	b.n	8006198 <HAL_UART_IRQHandler+0x634>
 8005e1c:	10000001 	.word	0x10000001
 8005e20:	04000120 	.word	0x04000120
 8005e24:	08006e69 	.word	0x08006e69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	f040 8153 	bne.w	80060d8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e36:	f003 0310 	and.w	r3, r3, #16
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 814c 	beq.w	80060d8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e44:	f003 0310 	and.w	r3, r3, #16
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 8145 	beq.w	80060d8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2210      	movs	r2, #16
 8005e54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e60:	2b40      	cmp	r3, #64	@ 0x40
 8005e62:	f040 80bb 	bne.w	8005fdc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 818f 	beq.w	800619c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	f080 8187 	bcs.w	800619c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f040 8087 	bne.w	8005fba <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005eb8:	e853 3f00 	ldrex	r3, [r3]
 8005ebc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ec0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ec4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005ed6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005eda:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005ee2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005ee6:	e841 2300 	strex	r3, r2, [r1]
 8005eea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1da      	bne.n	8005eac <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3308      	adds	r3, #8
 8005efc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f00:	e853 3f00 	ldrex	r3, [r3]
 8005f04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f08:	f023 0301 	bic.w	r3, r3, #1
 8005f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3308      	adds	r3, #8
 8005f16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f26:	e841 2300 	strex	r3, r2, [r1]
 8005f2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005f2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1e1      	bne.n	8005ef6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3308      	adds	r3, #8
 8005f38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f3c:	e853 3f00 	ldrex	r3, [r3]
 8005f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005f42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3308      	adds	r3, #8
 8005f52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f5e:	e841 2300 	strex	r3, r2, [r1]
 8005f62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1e3      	bne.n	8005f32 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f88:	f023 0310 	bic.w	r3, r3, #16
 8005f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f9c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005fa0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005fa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1e4      	bne.n	8005f78 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7fc fc55 	bl	8002864 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f8fd 	bl	80061d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fda:	e0df      	b.n	800619c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 80d1 	beq.w	80061a0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005ffe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 80cc 	beq.w	80061a0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006010:	e853 3f00 	ldrex	r3, [r3]
 8006014:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006018:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800601c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	461a      	mov	r2, r3
 8006026:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800602a:	647b      	str	r3, [r7, #68]	@ 0x44
 800602c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006030:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1e4      	bne.n	8006008 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3308      	adds	r3, #8
 8006044:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006048:	e853 3f00 	ldrex	r3, [r3]
 800604c:	623b      	str	r3, [r7, #32]
   return(result);
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006054:	f023 0301 	bic.w	r3, r3, #1
 8006058:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3308      	adds	r3, #8
 8006062:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006066:	633a      	str	r2, [r7, #48]	@ 0x30
 8006068:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800606c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1e1      	bne.n	800603e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	e853 3f00 	ldrex	r3, [r3]
 800609a:	60fb      	str	r3, [r7, #12]
   return(result);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 0310 	bic.w	r3, r3, #16
 80060a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	461a      	mov	r2, r3
 80060ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80060b0:	61fb      	str	r3, [r7, #28]
 80060b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b4:	69b9      	ldr	r1, [r7, #24]
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	e841 2300 	strex	r3, r2, [r1]
 80060bc:	617b      	str	r3, [r7, #20]
   return(result);
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1e4      	bne.n	800608e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060ce:	4619      	mov	r1, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f87f 	bl	80061d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060d6:	e063      	b.n	80061a0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00e      	beq.n	8006102 <HAL_UART_IRQHandler+0x59e>
 80060e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d008      	beq.n	8006102 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80060f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f001 fc12 	bl	8007924 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006100:	e051      	b.n	80061a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800610a:	2b00      	cmp	r3, #0
 800610c:	d014      	beq.n	8006138 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800610e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006116:	2b00      	cmp	r3, #0
 8006118:	d105      	bne.n	8006126 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800611a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800611e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d008      	beq.n	8006138 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800612a:	2b00      	cmp	r3, #0
 800612c:	d03a      	beq.n	80061a4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	4798      	blx	r3
    }
    return;
 8006136:	e035      	b.n	80061a4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800613c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006140:	2b00      	cmp	r3, #0
 8006142:	d009      	beq.n	8006158 <HAL_UART_IRQHandler+0x5f4>
 8006144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fe9f 	bl	8006e94 <UART_EndTransmit_IT>
    return;
 8006156:	e026      	b.n	80061a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800615c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d009      	beq.n	8006178 <HAL_UART_IRQHandler+0x614>
 8006164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006168:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f001 fbeb 	bl	800794c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006176:	e016      	b.n	80061a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800617c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d010      	beq.n	80061a6 <HAL_UART_IRQHandler+0x642>
 8006184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006188:	2b00      	cmp	r3, #0
 800618a:	da0c      	bge.n	80061a6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f001 fbd3 	bl	8007938 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006192:	e008      	b.n	80061a6 <HAL_UART_IRQHandler+0x642>
      return;
 8006194:	bf00      	nop
 8006196:	e006      	b.n	80061a6 <HAL_UART_IRQHandler+0x642>
    return;
 8006198:	bf00      	nop
 800619a:	e004      	b.n	80061a6 <HAL_UART_IRQHandler+0x642>
      return;
 800619c:	bf00      	nop
 800619e:	e002      	b.n	80061a6 <HAL_UART_IRQHandler+0x642>
      return;
 80061a0:	bf00      	nop
 80061a2:	e000      	b.n	80061a6 <HAL_UART_IRQHandler+0x642>
    return;
 80061a4:	bf00      	nop
  }
}
 80061a6:	37e8      	adds	r7, #232	@ 0xe8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061f0:	b08c      	sub	sp, #48	@ 0x30
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	431a      	orrs	r2, r3
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	431a      	orrs	r2, r3
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	4313      	orrs	r3, r2
 8006212:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	4baa      	ldr	r3, [pc, #680]	@ (80064c4 <UART_SetConfig+0x2d8>)
 800621c:	4013      	ands	r3, r2
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	6812      	ldr	r2, [r2, #0]
 8006222:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006224:	430b      	orrs	r3, r1
 8006226:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a9f      	ldr	r2, [pc, #636]	@ (80064c8 <UART_SetConfig+0x2dc>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d004      	beq.n	8006258 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006254:	4313      	orrs	r3, r2
 8006256:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006262:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	6812      	ldr	r2, [r2, #0]
 800626a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800626c:	430b      	orrs	r3, r1
 800626e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006276:	f023 010f 	bic.w	r1, r3, #15
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a90      	ldr	r2, [pc, #576]	@ (80064cc <UART_SetConfig+0x2e0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d125      	bne.n	80062dc <UART_SetConfig+0xf0>
 8006290:	4b8f      	ldr	r3, [pc, #572]	@ (80064d0 <UART_SetConfig+0x2e4>)
 8006292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	2b03      	cmp	r3, #3
 800629c:	d81a      	bhi.n	80062d4 <UART_SetConfig+0xe8>
 800629e:	a201      	add	r2, pc, #4	@ (adr r2, 80062a4 <UART_SetConfig+0xb8>)
 80062a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a4:	080062b5 	.word	0x080062b5
 80062a8:	080062c5 	.word	0x080062c5
 80062ac:	080062bd 	.word	0x080062bd
 80062b0:	080062cd 	.word	0x080062cd
 80062b4:	2301      	movs	r3, #1
 80062b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ba:	e116      	b.n	80064ea <UART_SetConfig+0x2fe>
 80062bc:	2302      	movs	r3, #2
 80062be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062c2:	e112      	b.n	80064ea <UART_SetConfig+0x2fe>
 80062c4:	2304      	movs	r3, #4
 80062c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ca:	e10e      	b.n	80064ea <UART_SetConfig+0x2fe>
 80062cc:	2308      	movs	r3, #8
 80062ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062d2:	e10a      	b.n	80064ea <UART_SetConfig+0x2fe>
 80062d4:	2310      	movs	r3, #16
 80062d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062da:	e106      	b.n	80064ea <UART_SetConfig+0x2fe>
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a7c      	ldr	r2, [pc, #496]	@ (80064d4 <UART_SetConfig+0x2e8>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d138      	bne.n	8006358 <UART_SetConfig+0x16c>
 80062e6:	4b7a      	ldr	r3, [pc, #488]	@ (80064d0 <UART_SetConfig+0x2e4>)
 80062e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ec:	f003 030c 	and.w	r3, r3, #12
 80062f0:	2b0c      	cmp	r3, #12
 80062f2:	d82d      	bhi.n	8006350 <UART_SetConfig+0x164>
 80062f4:	a201      	add	r2, pc, #4	@ (adr r2, 80062fc <UART_SetConfig+0x110>)
 80062f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fa:	bf00      	nop
 80062fc:	08006331 	.word	0x08006331
 8006300:	08006351 	.word	0x08006351
 8006304:	08006351 	.word	0x08006351
 8006308:	08006351 	.word	0x08006351
 800630c:	08006341 	.word	0x08006341
 8006310:	08006351 	.word	0x08006351
 8006314:	08006351 	.word	0x08006351
 8006318:	08006351 	.word	0x08006351
 800631c:	08006339 	.word	0x08006339
 8006320:	08006351 	.word	0x08006351
 8006324:	08006351 	.word	0x08006351
 8006328:	08006351 	.word	0x08006351
 800632c:	08006349 	.word	0x08006349
 8006330:	2300      	movs	r3, #0
 8006332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006336:	e0d8      	b.n	80064ea <UART_SetConfig+0x2fe>
 8006338:	2302      	movs	r3, #2
 800633a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800633e:	e0d4      	b.n	80064ea <UART_SetConfig+0x2fe>
 8006340:	2304      	movs	r3, #4
 8006342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006346:	e0d0      	b.n	80064ea <UART_SetConfig+0x2fe>
 8006348:	2308      	movs	r3, #8
 800634a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800634e:	e0cc      	b.n	80064ea <UART_SetConfig+0x2fe>
 8006350:	2310      	movs	r3, #16
 8006352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006356:	e0c8      	b.n	80064ea <UART_SetConfig+0x2fe>
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a5e      	ldr	r2, [pc, #376]	@ (80064d8 <UART_SetConfig+0x2ec>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d125      	bne.n	80063ae <UART_SetConfig+0x1c2>
 8006362:	4b5b      	ldr	r3, [pc, #364]	@ (80064d0 <UART_SetConfig+0x2e4>)
 8006364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006368:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800636c:	2b30      	cmp	r3, #48	@ 0x30
 800636e:	d016      	beq.n	800639e <UART_SetConfig+0x1b2>
 8006370:	2b30      	cmp	r3, #48	@ 0x30
 8006372:	d818      	bhi.n	80063a6 <UART_SetConfig+0x1ba>
 8006374:	2b20      	cmp	r3, #32
 8006376:	d00a      	beq.n	800638e <UART_SetConfig+0x1a2>
 8006378:	2b20      	cmp	r3, #32
 800637a:	d814      	bhi.n	80063a6 <UART_SetConfig+0x1ba>
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <UART_SetConfig+0x19a>
 8006380:	2b10      	cmp	r3, #16
 8006382:	d008      	beq.n	8006396 <UART_SetConfig+0x1aa>
 8006384:	e00f      	b.n	80063a6 <UART_SetConfig+0x1ba>
 8006386:	2300      	movs	r3, #0
 8006388:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800638c:	e0ad      	b.n	80064ea <UART_SetConfig+0x2fe>
 800638e:	2302      	movs	r3, #2
 8006390:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006394:	e0a9      	b.n	80064ea <UART_SetConfig+0x2fe>
 8006396:	2304      	movs	r3, #4
 8006398:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800639c:	e0a5      	b.n	80064ea <UART_SetConfig+0x2fe>
 800639e:	2308      	movs	r3, #8
 80063a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063a4:	e0a1      	b.n	80064ea <UART_SetConfig+0x2fe>
 80063a6:	2310      	movs	r3, #16
 80063a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ac:	e09d      	b.n	80064ea <UART_SetConfig+0x2fe>
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a4a      	ldr	r2, [pc, #296]	@ (80064dc <UART_SetConfig+0x2f0>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d125      	bne.n	8006404 <UART_SetConfig+0x218>
 80063b8:	4b45      	ldr	r3, [pc, #276]	@ (80064d0 <UART_SetConfig+0x2e4>)
 80063ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80063c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80063c4:	d016      	beq.n	80063f4 <UART_SetConfig+0x208>
 80063c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80063c8:	d818      	bhi.n	80063fc <UART_SetConfig+0x210>
 80063ca:	2b80      	cmp	r3, #128	@ 0x80
 80063cc:	d00a      	beq.n	80063e4 <UART_SetConfig+0x1f8>
 80063ce:	2b80      	cmp	r3, #128	@ 0x80
 80063d0:	d814      	bhi.n	80063fc <UART_SetConfig+0x210>
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <UART_SetConfig+0x1f0>
 80063d6:	2b40      	cmp	r3, #64	@ 0x40
 80063d8:	d008      	beq.n	80063ec <UART_SetConfig+0x200>
 80063da:	e00f      	b.n	80063fc <UART_SetConfig+0x210>
 80063dc:	2300      	movs	r3, #0
 80063de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063e2:	e082      	b.n	80064ea <UART_SetConfig+0x2fe>
 80063e4:	2302      	movs	r3, #2
 80063e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ea:	e07e      	b.n	80064ea <UART_SetConfig+0x2fe>
 80063ec:	2304      	movs	r3, #4
 80063ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063f2:	e07a      	b.n	80064ea <UART_SetConfig+0x2fe>
 80063f4:	2308      	movs	r3, #8
 80063f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063fa:	e076      	b.n	80064ea <UART_SetConfig+0x2fe>
 80063fc:	2310      	movs	r3, #16
 80063fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006402:	e072      	b.n	80064ea <UART_SetConfig+0x2fe>
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a35      	ldr	r2, [pc, #212]	@ (80064e0 <UART_SetConfig+0x2f4>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d12a      	bne.n	8006464 <UART_SetConfig+0x278>
 800640e:	4b30      	ldr	r3, [pc, #192]	@ (80064d0 <UART_SetConfig+0x2e4>)
 8006410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006414:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006418:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800641c:	d01a      	beq.n	8006454 <UART_SetConfig+0x268>
 800641e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006422:	d81b      	bhi.n	800645c <UART_SetConfig+0x270>
 8006424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006428:	d00c      	beq.n	8006444 <UART_SetConfig+0x258>
 800642a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800642e:	d815      	bhi.n	800645c <UART_SetConfig+0x270>
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <UART_SetConfig+0x250>
 8006434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006438:	d008      	beq.n	800644c <UART_SetConfig+0x260>
 800643a:	e00f      	b.n	800645c <UART_SetConfig+0x270>
 800643c:	2300      	movs	r3, #0
 800643e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006442:	e052      	b.n	80064ea <UART_SetConfig+0x2fe>
 8006444:	2302      	movs	r3, #2
 8006446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800644a:	e04e      	b.n	80064ea <UART_SetConfig+0x2fe>
 800644c:	2304      	movs	r3, #4
 800644e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006452:	e04a      	b.n	80064ea <UART_SetConfig+0x2fe>
 8006454:	2308      	movs	r3, #8
 8006456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800645a:	e046      	b.n	80064ea <UART_SetConfig+0x2fe>
 800645c:	2310      	movs	r3, #16
 800645e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006462:	e042      	b.n	80064ea <UART_SetConfig+0x2fe>
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a17      	ldr	r2, [pc, #92]	@ (80064c8 <UART_SetConfig+0x2dc>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d13a      	bne.n	80064e4 <UART_SetConfig+0x2f8>
 800646e:	4b18      	ldr	r3, [pc, #96]	@ (80064d0 <UART_SetConfig+0x2e4>)
 8006470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006474:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006478:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800647c:	d01a      	beq.n	80064b4 <UART_SetConfig+0x2c8>
 800647e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006482:	d81b      	bhi.n	80064bc <UART_SetConfig+0x2d0>
 8006484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006488:	d00c      	beq.n	80064a4 <UART_SetConfig+0x2b8>
 800648a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800648e:	d815      	bhi.n	80064bc <UART_SetConfig+0x2d0>
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <UART_SetConfig+0x2b0>
 8006494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006498:	d008      	beq.n	80064ac <UART_SetConfig+0x2c0>
 800649a:	e00f      	b.n	80064bc <UART_SetConfig+0x2d0>
 800649c:	2300      	movs	r3, #0
 800649e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064a2:	e022      	b.n	80064ea <UART_SetConfig+0x2fe>
 80064a4:	2302      	movs	r3, #2
 80064a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064aa:	e01e      	b.n	80064ea <UART_SetConfig+0x2fe>
 80064ac:	2304      	movs	r3, #4
 80064ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064b2:	e01a      	b.n	80064ea <UART_SetConfig+0x2fe>
 80064b4:	2308      	movs	r3, #8
 80064b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064ba:	e016      	b.n	80064ea <UART_SetConfig+0x2fe>
 80064bc:	2310      	movs	r3, #16
 80064be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064c2:	e012      	b.n	80064ea <UART_SetConfig+0x2fe>
 80064c4:	cfff69f3 	.word	0xcfff69f3
 80064c8:	40008000 	.word	0x40008000
 80064cc:	40013800 	.word	0x40013800
 80064d0:	40021000 	.word	0x40021000
 80064d4:	40004400 	.word	0x40004400
 80064d8:	40004800 	.word	0x40004800
 80064dc:	40004c00 	.word	0x40004c00
 80064e0:	40005000 	.word	0x40005000
 80064e4:	2310      	movs	r3, #16
 80064e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4aae      	ldr	r2, [pc, #696]	@ (80067a8 <UART_SetConfig+0x5bc>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	f040 8097 	bne.w	8006624 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064fa:	2b08      	cmp	r3, #8
 80064fc:	d823      	bhi.n	8006546 <UART_SetConfig+0x35a>
 80064fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006504 <UART_SetConfig+0x318>)
 8006500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006504:	08006529 	.word	0x08006529
 8006508:	08006547 	.word	0x08006547
 800650c:	08006531 	.word	0x08006531
 8006510:	08006547 	.word	0x08006547
 8006514:	08006537 	.word	0x08006537
 8006518:	08006547 	.word	0x08006547
 800651c:	08006547 	.word	0x08006547
 8006520:	08006547 	.word	0x08006547
 8006524:	0800653f 	.word	0x0800653f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006528:	f7fd f966 	bl	80037f8 <HAL_RCC_GetPCLK1Freq>
 800652c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800652e:	e010      	b.n	8006552 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006530:	4b9e      	ldr	r3, [pc, #632]	@ (80067ac <UART_SetConfig+0x5c0>)
 8006532:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006534:	e00d      	b.n	8006552 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006536:	f7fd f8f1 	bl	800371c <HAL_RCC_GetSysClockFreq>
 800653a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800653c:	e009      	b.n	8006552 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800653e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006542:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006544:	e005      	b.n	8006552 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006546:	2300      	movs	r3, #0
 8006548:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006550:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 8130 	beq.w	80067ba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655e:	4a94      	ldr	r2, [pc, #592]	@ (80067b0 <UART_SetConfig+0x5c4>)
 8006560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006564:	461a      	mov	r2, r3
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	fbb3 f3f2 	udiv	r3, r3, r2
 800656c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	4613      	mov	r3, r2
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	4413      	add	r3, r2
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	429a      	cmp	r2, r3
 800657c:	d305      	bcc.n	800658a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	429a      	cmp	r2, r3
 8006588:	d903      	bls.n	8006592 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006590:	e113      	b.n	80067ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006594:	2200      	movs	r2, #0
 8006596:	60bb      	str	r3, [r7, #8]
 8006598:	60fa      	str	r2, [r7, #12]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659e:	4a84      	ldr	r2, [pc, #528]	@ (80067b0 <UART_SetConfig+0x5c4>)
 80065a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2200      	movs	r2, #0
 80065a8:	603b      	str	r3, [r7, #0]
 80065aa:	607a      	str	r2, [r7, #4]
 80065ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80065b4:	f7fa fb70 	bl	8000c98 <__aeabi_uldivmod>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4610      	mov	r0, r2
 80065be:	4619      	mov	r1, r3
 80065c0:	f04f 0200 	mov.w	r2, #0
 80065c4:	f04f 0300 	mov.w	r3, #0
 80065c8:	020b      	lsls	r3, r1, #8
 80065ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065ce:	0202      	lsls	r2, r0, #8
 80065d0:	6979      	ldr	r1, [r7, #20]
 80065d2:	6849      	ldr	r1, [r1, #4]
 80065d4:	0849      	lsrs	r1, r1, #1
 80065d6:	2000      	movs	r0, #0
 80065d8:	460c      	mov	r4, r1
 80065da:	4605      	mov	r5, r0
 80065dc:	eb12 0804 	adds.w	r8, r2, r4
 80065e0:	eb43 0905 	adc.w	r9, r3, r5
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	469a      	mov	sl, r3
 80065ec:	4693      	mov	fp, r2
 80065ee:	4652      	mov	r2, sl
 80065f0:	465b      	mov	r3, fp
 80065f2:	4640      	mov	r0, r8
 80065f4:	4649      	mov	r1, r9
 80065f6:	f7fa fb4f 	bl	8000c98 <__aeabi_uldivmod>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4613      	mov	r3, r2
 8006600:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006608:	d308      	bcc.n	800661c <UART_SetConfig+0x430>
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006610:	d204      	bcs.n	800661c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6a3a      	ldr	r2, [r7, #32]
 8006618:	60da      	str	r2, [r3, #12]
 800661a:	e0ce      	b.n	80067ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006622:	e0ca      	b.n	80067ba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800662c:	d166      	bne.n	80066fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800662e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006632:	2b08      	cmp	r3, #8
 8006634:	d827      	bhi.n	8006686 <UART_SetConfig+0x49a>
 8006636:	a201      	add	r2, pc, #4	@ (adr r2, 800663c <UART_SetConfig+0x450>)
 8006638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663c:	08006661 	.word	0x08006661
 8006640:	08006669 	.word	0x08006669
 8006644:	08006671 	.word	0x08006671
 8006648:	08006687 	.word	0x08006687
 800664c:	08006677 	.word	0x08006677
 8006650:	08006687 	.word	0x08006687
 8006654:	08006687 	.word	0x08006687
 8006658:	08006687 	.word	0x08006687
 800665c:	0800667f 	.word	0x0800667f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006660:	f7fd f8ca 	bl	80037f8 <HAL_RCC_GetPCLK1Freq>
 8006664:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006666:	e014      	b.n	8006692 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006668:	f7fd f8dc 	bl	8003824 <HAL_RCC_GetPCLK2Freq>
 800666c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800666e:	e010      	b.n	8006692 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006670:	4b4e      	ldr	r3, [pc, #312]	@ (80067ac <UART_SetConfig+0x5c0>)
 8006672:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006674:	e00d      	b.n	8006692 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006676:	f7fd f851 	bl	800371c <HAL_RCC_GetSysClockFreq>
 800667a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800667c:	e009      	b.n	8006692 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800667e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006682:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006684:	e005      	b.n	8006692 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006690:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 8090 	beq.w	80067ba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800669e:	4a44      	ldr	r2, [pc, #272]	@ (80067b0 <UART_SetConfig+0x5c4>)
 80066a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066a4:	461a      	mov	r2, r3
 80066a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80066ac:	005a      	lsls	r2, r3, #1
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	085b      	lsrs	r3, r3, #1
 80066b4:	441a      	add	r2, r3
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80066be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	2b0f      	cmp	r3, #15
 80066c4:	d916      	bls.n	80066f4 <UART_SetConfig+0x508>
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066cc:	d212      	bcs.n	80066f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	f023 030f 	bic.w	r3, r3, #15
 80066d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	085b      	lsrs	r3, r3, #1
 80066dc:	b29b      	uxth	r3, r3
 80066de:	f003 0307 	and.w	r3, r3, #7
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	8bfb      	ldrh	r3, [r7, #30]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	8bfa      	ldrh	r2, [r7, #30]
 80066f0:	60da      	str	r2, [r3, #12]
 80066f2:	e062      	b.n	80067ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80066fa:	e05e      	b.n	80067ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006700:	2b08      	cmp	r3, #8
 8006702:	d828      	bhi.n	8006756 <UART_SetConfig+0x56a>
 8006704:	a201      	add	r2, pc, #4	@ (adr r2, 800670c <UART_SetConfig+0x520>)
 8006706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670a:	bf00      	nop
 800670c:	08006731 	.word	0x08006731
 8006710:	08006739 	.word	0x08006739
 8006714:	08006741 	.word	0x08006741
 8006718:	08006757 	.word	0x08006757
 800671c:	08006747 	.word	0x08006747
 8006720:	08006757 	.word	0x08006757
 8006724:	08006757 	.word	0x08006757
 8006728:	08006757 	.word	0x08006757
 800672c:	0800674f 	.word	0x0800674f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006730:	f7fd f862 	bl	80037f8 <HAL_RCC_GetPCLK1Freq>
 8006734:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006736:	e014      	b.n	8006762 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006738:	f7fd f874 	bl	8003824 <HAL_RCC_GetPCLK2Freq>
 800673c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800673e:	e010      	b.n	8006762 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006740:	4b1a      	ldr	r3, [pc, #104]	@ (80067ac <UART_SetConfig+0x5c0>)
 8006742:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006744:	e00d      	b.n	8006762 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006746:	f7fc ffe9 	bl	800371c <HAL_RCC_GetSysClockFreq>
 800674a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800674c:	e009      	b.n	8006762 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800674e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006752:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006754:	e005      	b.n	8006762 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006760:	bf00      	nop
    }

    if (pclk != 0U)
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006764:	2b00      	cmp	r3, #0
 8006766:	d028      	beq.n	80067ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676c:	4a10      	ldr	r2, [pc, #64]	@ (80067b0 <UART_SetConfig+0x5c4>)
 800676e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006772:	461a      	mov	r2, r3
 8006774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006776:	fbb3 f2f2 	udiv	r2, r3, r2
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	085b      	lsrs	r3, r3, #1
 8006780:	441a      	add	r2, r3
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	fbb2 f3f3 	udiv	r3, r2, r3
 800678a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	2b0f      	cmp	r3, #15
 8006790:	d910      	bls.n	80067b4 <UART_SetConfig+0x5c8>
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006798:	d20c      	bcs.n	80067b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	b29a      	uxth	r2, r3
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	60da      	str	r2, [r3, #12]
 80067a4:	e009      	b.n	80067ba <UART_SetConfig+0x5ce>
 80067a6:	bf00      	nop
 80067a8:	40008000 	.word	0x40008000
 80067ac:	00f42400 	.word	0x00f42400
 80067b0:	0800a8a8 	.word	0x0800a8a8
      }
      else
      {
        ret = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2201      	movs	r2, #1
 80067be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2200      	movs	r2, #0
 80067ce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	2200      	movs	r2, #0
 80067d4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80067d6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3730      	adds	r7, #48	@ 0x30
 80067de:	46bd      	mov	sp, r7
 80067e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080067e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f0:	f003 0308 	and.w	r3, r3, #8
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00a      	beq.n	8006852 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00a      	beq.n	8006874 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006878:	f003 0310 	and.w	r3, r3, #16
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00a      	beq.n	8006896 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	430a      	orrs	r2, r1
 8006894:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d01a      	beq.n	80068fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068e2:	d10a      	bne.n	80068fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00a      	beq.n	800691c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	605a      	str	r2, [r3, #4]
  }
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b098      	sub	sp, #96	@ 0x60
 800692c:	af02      	add	r7, sp, #8
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006938:	f7fb fea8 	bl	800268c <HAL_GetTick>
 800693c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0308 	and.w	r3, r3, #8
 8006948:	2b08      	cmp	r3, #8
 800694a:	d12f      	bne.n	80069ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800694c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006954:	2200      	movs	r2, #0
 8006956:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f88e 	bl	8006a7c <UART_WaitOnFlagUntilTimeout>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d022      	beq.n	80069ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696e:	e853 3f00 	ldrex	r3, [r3]
 8006972:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006976:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800697a:	653b      	str	r3, [r7, #80]	@ 0x50
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006984:	647b      	str	r3, [r7, #68]	@ 0x44
 8006986:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800698a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800698c:	e841 2300 	strex	r3, r2, [r1]
 8006990:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e6      	bne.n	8006966 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2220      	movs	r2, #32
 800699c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e063      	b.n	8006a74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0304 	and.w	r3, r3, #4
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	d149      	bne.n	8006a4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069c2:	2200      	movs	r2, #0
 80069c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f857 	bl	8006a7c <UART_WaitOnFlagUntilTimeout>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d03c      	beq.n	8006a4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	623b      	str	r3, [r7, #32]
   return(result);
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80069f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069fa:	e841 2300 	strex	r3, r2, [r1]
 80069fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1e6      	bne.n	80069d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f023 0301 	bic.w	r3, r3, #1
 8006a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3308      	adds	r3, #8
 8006a24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a26:	61fa      	str	r2, [r7, #28]
 8006a28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2a:	69b9      	ldr	r1, [r7, #24]
 8006a2c:	69fa      	ldr	r2, [r7, #28]
 8006a2e:	e841 2300 	strex	r3, r2, [r1]
 8006a32:	617b      	str	r3, [r7, #20]
   return(result);
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1e5      	bne.n	8006a06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e012      	b.n	8006a74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2220      	movs	r2, #32
 8006a52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3758      	adds	r7, #88	@ 0x58
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	603b      	str	r3, [r7, #0]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a8c:	e04f      	b.n	8006b2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a94:	d04b      	beq.n	8006b2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a96:	f7fb fdf9 	bl	800268c <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d302      	bcc.n	8006aac <UART_WaitOnFlagUntilTimeout+0x30>
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e04e      	b.n	8006b4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0304 	and.w	r3, r3, #4
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d037      	beq.n	8006b2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2b80      	cmp	r3, #128	@ 0x80
 8006ac2:	d034      	beq.n	8006b2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2b40      	cmp	r3, #64	@ 0x40
 8006ac8:	d031      	beq.n	8006b2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	2b08      	cmp	r3, #8
 8006ad6:	d110      	bne.n	8006afa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2208      	movs	r2, #8
 8006ade:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 f95b 	bl	8006d9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2208      	movs	r2, #8
 8006aea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e029      	b.n	8006b4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b08:	d111      	bne.n	8006b2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 f941 	bl	8006d9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e00f      	b.n	8006b4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	69da      	ldr	r2, [r3, #28]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	4013      	ands	r3, r2
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	bf0c      	ite	eq
 8006b3e:	2301      	moveq	r3, #1
 8006b40:	2300      	movne	r3, #0
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	461a      	mov	r2, r3
 8006b46:	79fb      	ldrb	r3, [r7, #7]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d0a0      	beq.n	8006a8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b0a3      	sub	sp, #140	@ 0x8c
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	4613      	mov	r3, r2
 8006b64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	88fa      	ldrh	r2, [r7, #6]
 8006b70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	88fa      	ldrh	r2, [r7, #6]
 8006b78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b8a:	d10e      	bne.n	8006baa <UART_Start_Receive_IT+0x52>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d105      	bne.n	8006ba0 <UART_Start_Receive_IT+0x48>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006b9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b9e:	e02d      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	22ff      	movs	r2, #255	@ 0xff
 8006ba4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ba8:	e028      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10d      	bne.n	8006bce <UART_Start_Receive_IT+0x76>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d104      	bne.n	8006bc4 <UART_Start_Receive_IT+0x6c>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	22ff      	movs	r2, #255	@ 0xff
 8006bbe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006bc2:	e01b      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	227f      	movs	r2, #127	@ 0x7f
 8006bc8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006bcc:	e016      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bd6:	d10d      	bne.n	8006bf4 <UART_Start_Receive_IT+0x9c>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d104      	bne.n	8006bea <UART_Start_Receive_IT+0x92>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	227f      	movs	r2, #127	@ 0x7f
 8006be4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006be8:	e008      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	223f      	movs	r2, #63	@ 0x3f
 8006bee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006bf2:	e003      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2222      	movs	r2, #34	@ 0x22
 8006c08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3308      	adds	r3, #8
 8006c12:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c16:	e853 3f00 	ldrex	r3, [r3]
 8006c1a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006c1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c1e:	f043 0301 	orr.w	r3, r3, #1
 8006c22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006c30:	673a      	str	r2, [r7, #112]	@ 0x70
 8006c32:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c34:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006c36:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006c38:	e841 2300 	strex	r3, r2, [r1]
 8006c3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006c3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1e3      	bne.n	8006c0c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c4c:	d14f      	bne.n	8006cee <UART_Start_Receive_IT+0x196>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006c54:	88fa      	ldrh	r2, [r7, #6]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d349      	bcc.n	8006cee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c62:	d107      	bne.n	8006c74 <UART_Start_Receive_IT+0x11c>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d103      	bne.n	8006c74 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4a47      	ldr	r2, [pc, #284]	@ (8006d8c <UART_Start_Receive_IT+0x234>)
 8006c70:	675a      	str	r2, [r3, #116]	@ 0x74
 8006c72:	e002      	b.n	8006c7a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4a46      	ldr	r2, [pc, #280]	@ (8006d90 <UART_Start_Receive_IT+0x238>)
 8006c78:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d01a      	beq.n	8006cb8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c8a:	e853 3f00 	ldrex	r3, [r3]
 8006c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006c90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ca6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006caa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006cac:	e841 2300 	strex	r3, r2, [r1]
 8006cb0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1e4      	bne.n	8006c82 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cc2:	e853 3f00 	ldrex	r3, [r3]
 8006cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3308      	adds	r3, #8
 8006cd6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006cd8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006cda:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cdc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006cde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ce0:	e841 2300 	strex	r3, r2, [r1]
 8006ce4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e5      	bne.n	8006cb8 <UART_Start_Receive_IT+0x160>
 8006cec:	e046      	b.n	8006d7c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cf6:	d107      	bne.n	8006d08 <UART_Start_Receive_IT+0x1b0>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d103      	bne.n	8006d08 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4a24      	ldr	r2, [pc, #144]	@ (8006d94 <UART_Start_Receive_IT+0x23c>)
 8006d04:	675a      	str	r2, [r3, #116]	@ 0x74
 8006d06:	e002      	b.n	8006d0e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	4a23      	ldr	r2, [pc, #140]	@ (8006d98 <UART_Start_Receive_IT+0x240>)
 8006d0c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d019      	beq.n	8006d4a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1e:	e853 3f00 	ldrex	r3, [r3]
 8006d22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d26:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006d2a:	677b      	str	r3, [r7, #116]	@ 0x74
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	461a      	mov	r2, r3
 8006d32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d36:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006d3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d3c:	e841 2300 	strex	r3, r2, [r1]
 8006d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e6      	bne.n	8006d16 <UART_Start_Receive_IT+0x1be>
 8006d48:	e018      	b.n	8006d7c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	e853 3f00 	ldrex	r3, [r3]
 8006d56:	613b      	str	r3, [r7, #16]
   return(result);
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	f043 0320 	orr.w	r3, r3, #32
 8006d5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	461a      	mov	r2, r3
 8006d66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d68:	623b      	str	r3, [r7, #32]
 8006d6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6c:	69f9      	ldr	r1, [r7, #28]
 8006d6e:	6a3a      	ldr	r2, [r7, #32]
 8006d70:	e841 2300 	strex	r3, r2, [r1]
 8006d74:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1e6      	bne.n	8006d4a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	378c      	adds	r7, #140	@ 0x8c
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	080075bd 	.word	0x080075bd
 8006d90:	0800725d 	.word	0x0800725d
 8006d94:	080070a5 	.word	0x080070a5
 8006d98:	08006eed 	.word	0x08006eed

08006d9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b095      	sub	sp, #84	@ 0x54
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dac:	e853 3f00 	ldrex	r3, [r3]
 8006db0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006db8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006dc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006dca:	e841 2300 	strex	r3, r2, [r1]
 8006dce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1e6      	bne.n	8006da4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3308      	adds	r3, #8
 8006ddc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	e853 3f00 	ldrex	r3, [r3]
 8006de4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dec:	f023 0301 	bic.w	r3, r3, #1
 8006df0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3308      	adds	r3, #8
 8006df8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006dfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e02:	e841 2300 	strex	r3, r2, [r1]
 8006e06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e3      	bne.n	8006dd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d118      	bne.n	8006e48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	e853 3f00 	ldrex	r3, [r3]
 8006e22:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f023 0310 	bic.w	r3, r3, #16
 8006e2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	461a      	mov	r2, r3
 8006e32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e34:	61bb      	str	r3, [r7, #24]
 8006e36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e38:	6979      	ldr	r1, [r7, #20]
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	e841 2300 	strex	r3, r2, [r1]
 8006e40:	613b      	str	r3, [r7, #16]
   return(result);
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e6      	bne.n	8006e16 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006e5c:	bf00      	nop
 8006e5e:	3754      	adds	r7, #84	@ 0x54
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f7ff f99a 	bl	80061c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e8c:	bf00      	nop
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b088      	sub	sp, #32
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eb0:	61fb      	str	r3, [r7, #28]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	61bb      	str	r3, [r7, #24]
 8006ebc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebe:	6979      	ldr	r1, [r7, #20]
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e6      	bne.n	8006e9c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7ff f965 	bl	80061ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ee2:	bf00      	nop
 8006ee4:	3720      	adds	r7, #32
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
	...

08006eec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b09c      	sub	sp, #112	@ 0x70
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006efa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f04:	2b22      	cmp	r3, #34	@ 0x22
 8006f06:	f040 80be 	bne.w	8007086 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f10:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006f18:	b2d9      	uxtb	r1, r3
 8006f1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f24:	400a      	ands	r2, r1
 8006f26:	b2d2      	uxtb	r2, r2
 8006f28:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f040 80a1 	bne.w	8007096 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1e6      	bne.n	8006f54 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f90:	e853 3f00 	ldrex	r3, [r3]
 8006f94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f98:	f023 0301 	bic.w	r3, r3, #1
 8006f9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006fa6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006fa8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006faa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1e5      	bne.n	8006f86 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a33      	ldr	r2, [pc, #204]	@ (80070a0 <UART_RxISR_8BIT+0x1b4>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d01f      	beq.n	8007018 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d018      	beq.n	8007018 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ffa:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	461a      	mov	r2, r3
 8007002:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007004:	633b      	str	r3, [r7, #48]	@ 0x30
 8007006:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800700a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e6      	bne.n	8006fe6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800701c:	2b01      	cmp	r3, #1
 800701e:	d12e      	bne.n	800707e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	e853 3f00 	ldrex	r3, [r3]
 8007032:	60fb      	str	r3, [r7, #12]
   return(result);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f023 0310 	bic.w	r3, r3, #16
 800703a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	461a      	mov	r2, r3
 8007042:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007044:	61fb      	str	r3, [r7, #28]
 8007046:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007048:	69b9      	ldr	r1, [r7, #24]
 800704a:	69fa      	ldr	r2, [r7, #28]
 800704c:	e841 2300 	strex	r3, r2, [r1]
 8007050:	617b      	str	r3, [r7, #20]
   return(result);
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e6      	bne.n	8007026 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	f003 0310 	and.w	r3, r3, #16
 8007062:	2b10      	cmp	r3, #16
 8007064:	d103      	bne.n	800706e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2210      	movs	r2, #16
 800706c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7ff f8ac 	bl	80061d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800707c:	e00b      	b.n	8007096 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7fa fec8 	bl	8001e14 <HAL_UART_RxCpltCallback>
}
 8007084:	e007      	b.n	8007096 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	699a      	ldr	r2, [r3, #24]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f042 0208 	orr.w	r2, r2, #8
 8007094:	619a      	str	r2, [r3, #24]
}
 8007096:	bf00      	nop
 8007098:	3770      	adds	r7, #112	@ 0x70
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	40008000 	.word	0x40008000

080070a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b09c      	sub	sp, #112	@ 0x70
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80070b2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070bc:	2b22      	cmp	r3, #34	@ 0x22
 80070be:	f040 80be 	bne.w	800723e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80070d2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80070d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80070da:	4013      	ands	r3, r2
 80070dc:	b29a      	uxth	r2, r3
 80070de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070e6:	1c9a      	adds	r2, r3, #2
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	3b01      	subs	r3, #1
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	f040 80a1 	bne.w	800724e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007114:	e853 3f00 	ldrex	r3, [r3]
 8007118:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800711a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800711c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007120:	667b      	str	r3, [r7, #100]	@ 0x64
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800712a:	657b      	str	r3, [r7, #84]	@ 0x54
 800712c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007130:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007132:	e841 2300 	strex	r3, r2, [r1]
 8007136:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1e6      	bne.n	800710c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3308      	adds	r3, #8
 8007144:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007148:	e853 3f00 	ldrex	r3, [r3]
 800714c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800714e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007150:	f023 0301 	bic.w	r3, r3, #1
 8007154:	663b      	str	r3, [r7, #96]	@ 0x60
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	3308      	adds	r3, #8
 800715c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800715e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007160:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007162:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007164:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007166:	e841 2300 	strex	r3, r2, [r1]
 800716a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800716c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1e5      	bne.n	800713e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2220      	movs	r2, #32
 8007176:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a33      	ldr	r2, [pc, #204]	@ (8007258 <UART_RxISR_16BIT+0x1b4>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d01f      	beq.n	80071d0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d018      	beq.n	80071d0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	e853 3f00 	ldrex	r3, [r3]
 80071aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80071b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	461a      	mov	r2, r3
 80071ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071be:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071c4:	e841 2300 	strex	r3, r2, [r1]
 80071c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1e6      	bne.n	800719e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d12e      	bne.n	8007236 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f023 0310 	bic.w	r3, r3, #16
 80071f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071fc:	61bb      	str	r3, [r7, #24]
 80071fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007200:	6979      	ldr	r1, [r7, #20]
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	613b      	str	r3, [r7, #16]
   return(result);
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e6      	bne.n	80071de <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	f003 0310 	and.w	r3, r3, #16
 800721a:	2b10      	cmp	r3, #16
 800721c:	d103      	bne.n	8007226 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2210      	movs	r2, #16
 8007224:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7fe ffd0 	bl	80061d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007234:	e00b      	b.n	800724e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7fa fdec 	bl	8001e14 <HAL_UART_RxCpltCallback>
}
 800723c:	e007      	b.n	800724e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	699a      	ldr	r2, [r3, #24]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f042 0208 	orr.w	r2, r2, #8
 800724c:	619a      	str	r2, [r3, #24]
}
 800724e:	bf00      	nop
 8007250:	3770      	adds	r7, #112	@ 0x70
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	40008000 	.word	0x40008000

0800725c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b0ac      	sub	sp, #176	@ 0xb0
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800726a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007292:	2b22      	cmp	r3, #34	@ 0x22
 8007294:	f040 8182 	bne.w	800759c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800729e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072a2:	e125      	b.n	80074f0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072aa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80072ae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80072b2:	b2d9      	uxtb	r1, r3
 80072b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072be:	400a      	ands	r2, r1
 80072c0:	b2d2      	uxtb	r2, r2
 80072c2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	3b01      	subs	r3, #1
 80072d8:	b29a      	uxth	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80072ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072ee:	f003 0307 	and.w	r3, r3, #7
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d053      	beq.n	800739e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d011      	beq.n	8007326 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007302:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00b      	beq.n	8007326 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2201      	movs	r2, #1
 8007314:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800731c:	f043 0201 	orr.w	r2, r3, #1
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d011      	beq.n	8007356 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00b      	beq.n	8007356 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2202      	movs	r2, #2
 8007344:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800734c:	f043 0204 	orr.w	r2, r3, #4
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800735a:	f003 0304 	and.w	r3, r3, #4
 800735e:	2b00      	cmp	r3, #0
 8007360:	d011      	beq.n	8007386 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007362:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00b      	beq.n	8007386 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2204      	movs	r2, #4
 8007374:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800737c:	f043 0202 	orr.w	r2, r3, #2
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800738c:	2b00      	cmp	r3, #0
 800738e:	d006      	beq.n	800739e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7fe ff15 	bl	80061c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f040 80a2 	bne.w	80074f0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073b4:	e853 3f00 	ldrex	r3, [r3]
 80073b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80073ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	461a      	mov	r2, r3
 80073ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80073d0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80073d4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80073dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1e4      	bne.n	80073ac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3308      	adds	r3, #8
 80073e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073ec:	e853 3f00 	ldrex	r3, [r3]
 80073f0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80073f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80073f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073f8:	f023 0301 	bic.w	r3, r3, #1
 80073fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3308      	adds	r3, #8
 8007406:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800740a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800740c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007410:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007412:	e841 2300 	strex	r3, r2, [r1]
 8007416:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007418:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1e1      	bne.n	80073e2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2220      	movs	r2, #32
 8007422:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a5f      	ldr	r2, [pc, #380]	@ (80075b4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d021      	beq.n	8007480 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d01a      	beq.n	8007480 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007458:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800745a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800745e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800746c:	657b      	str	r3, [r7, #84]	@ 0x54
 800746e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007472:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800747a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e4      	bne.n	800744a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007484:	2b01      	cmp	r3, #1
 8007486:	d130      	bne.n	80074ea <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800749c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749e:	f023 0310 	bic.w	r3, r3, #16
 80074a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80074b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e4      	bne.n	800748e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	f003 0310 	and.w	r3, r3, #16
 80074ce:	2b10      	cmp	r3, #16
 80074d0:	d103      	bne.n	80074da <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2210      	movs	r2, #16
 80074d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7fe fe76 	bl	80061d4 <HAL_UARTEx_RxEventCallback>
 80074e8:	e002      	b.n	80074f0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7fa fc92 	bl	8001e14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80074f0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d006      	beq.n	8007506 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80074f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074fc:	f003 0320 	and.w	r3, r3, #32
 8007500:	2b00      	cmp	r3, #0
 8007502:	f47f aecf 	bne.w	80072a4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800750c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007510:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007514:	2b00      	cmp	r3, #0
 8007516:	d049      	beq.n	80075ac <UART_RxISR_8BIT_FIFOEN+0x350>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800751e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007522:	429a      	cmp	r2, r3
 8007524:	d242      	bcs.n	80075ac <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3308      	adds	r3, #8
 800752c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	e853 3f00 	ldrex	r3, [r3]
 8007534:	61fb      	str	r3, [r7, #28]
   return(result);
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800753c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3308      	adds	r3, #8
 8007546:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800754a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800754c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007550:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007552:	e841 2300 	strex	r3, r2, [r1]
 8007556:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1e3      	bne.n	8007526 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a15      	ldr	r2, [pc, #84]	@ (80075b8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007562:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	e853 3f00 	ldrex	r3, [r3]
 8007570:	60bb      	str	r3, [r7, #8]
   return(result);
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	f043 0320 	orr.w	r3, r3, #32
 8007578:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	461a      	mov	r2, r3
 8007582:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007586:	61bb      	str	r3, [r7, #24]
 8007588:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758a:	6979      	ldr	r1, [r7, #20]
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	613b      	str	r3, [r7, #16]
   return(result);
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1e4      	bne.n	8007564 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800759a:	e007      	b.n	80075ac <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	699a      	ldr	r2, [r3, #24]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f042 0208 	orr.w	r2, r2, #8
 80075aa:	619a      	str	r2, [r3, #24]
}
 80075ac:	bf00      	nop
 80075ae:	37b0      	adds	r7, #176	@ 0xb0
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	40008000 	.word	0x40008000
 80075b8:	08006eed 	.word	0x08006eed

080075bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b0ae      	sub	sp, #184	@ 0xb8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80075ca:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075f2:	2b22      	cmp	r3, #34	@ 0x22
 80075f4:	f040 8186 	bne.w	8007904 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80075fe:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007602:	e129      	b.n	8007858 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800760a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007612:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007616:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800761a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800761e:	4013      	ands	r3, r2
 8007620:	b29a      	uxth	r2, r3
 8007622:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007626:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800762c:	1c9a      	adds	r2, r3, #2
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007638:	b29b      	uxth	r3, r3
 800763a:	3b01      	subs	r3, #1
 800763c:	b29a      	uxth	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800764e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007652:	f003 0307 	and.w	r3, r3, #7
 8007656:	2b00      	cmp	r3, #0
 8007658:	d053      	beq.n	8007702 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800765a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	d011      	beq.n	800768a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800766a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00b      	beq.n	800768a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2201      	movs	r2, #1
 8007678:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007680:	f043 0201 	orr.w	r2, r3, #1
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800768a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800768e:	f003 0302 	and.w	r3, r3, #2
 8007692:	2b00      	cmp	r3, #0
 8007694:	d011      	beq.n	80076ba <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007696:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00b      	beq.n	80076ba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2202      	movs	r2, #2
 80076a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076b0:	f043 0204 	orr.w	r2, r3, #4
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80076be:	f003 0304 	and.w	r3, r3, #4
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d011      	beq.n	80076ea <UART_RxISR_16BIT_FIFOEN+0x12e>
 80076c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00b      	beq.n	80076ea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2204      	movs	r2, #4
 80076d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076e0:	f043 0202 	orr.w	r2, r3, #2
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d006      	beq.n	8007702 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f7fe fd63 	bl	80061c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007708:	b29b      	uxth	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	f040 80a4 	bne.w	8007858 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007716:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007718:	e853 3f00 	ldrex	r3, [r3]
 800771c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800771e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007724:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	461a      	mov	r2, r3
 800772e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007732:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007736:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007738:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800773a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800773e:	e841 2300 	strex	r3, r2, [r1]
 8007742:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007744:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1e2      	bne.n	8007710 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	3308      	adds	r3, #8
 8007750:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007752:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007754:	e853 3f00 	ldrex	r3, [r3]
 8007758:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800775a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800775c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007760:	f023 0301 	bic.w	r3, r3, #1
 8007764:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3308      	adds	r3, #8
 800776e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007772:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007774:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007776:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007778:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800777a:	e841 2300 	strex	r3, r2, [r1]
 800777e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007780:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1e1      	bne.n	800774a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2220      	movs	r2, #32
 800778a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a5f      	ldr	r2, [pc, #380]	@ (800791c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d021      	beq.n	80077e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d01a      	beq.n	80077e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80077c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80077c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80077d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077d6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077dc:	e841 2300 	strex	r3, r2, [r1]
 80077e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80077e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1e4      	bne.n	80077b2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d130      	bne.n	8007852 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fe:	e853 3f00 	ldrex	r3, [r3]
 8007802:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007806:	f023 0310 	bic.w	r3, r3, #16
 800780a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007818:	647b      	str	r3, [r7, #68]	@ 0x44
 800781a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800781e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007820:	e841 2300 	strex	r3, r2, [r1]
 8007824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1e4      	bne.n	80077f6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	f003 0310 	and.w	r3, r3, #16
 8007836:	2b10      	cmp	r3, #16
 8007838:	d103      	bne.n	8007842 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2210      	movs	r2, #16
 8007840:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007848:	4619      	mov	r1, r3
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7fe fcc2 	bl	80061d4 <HAL_UARTEx_RxEventCallback>
 8007850:	e002      	b.n	8007858 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7fa fade 	bl	8001e14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007858:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800785c:	2b00      	cmp	r3, #0
 800785e:	d006      	beq.n	800786e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007860:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007864:	f003 0320 	and.w	r3, r3, #32
 8007868:	2b00      	cmp	r3, #0
 800786a:	f47f aecb 	bne.w	8007604 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007874:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007878:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800787c:	2b00      	cmp	r3, #0
 800787e:	d049      	beq.n	8007914 <UART_RxISR_16BIT_FIFOEN+0x358>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007886:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800788a:	429a      	cmp	r2, r3
 800788c:	d242      	bcs.n	8007914 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3308      	adds	r3, #8
 8007894:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	623b      	str	r3, [r7, #32]
   return(result);
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3308      	adds	r3, #8
 80078ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80078b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80078b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078ba:	e841 2300 	strex	r3, r2, [r1]
 80078be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1e3      	bne.n	800788e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a15      	ldr	r2, [pc, #84]	@ (8007920 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80078ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	e853 3f00 	ldrex	r3, [r3]
 80078d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f043 0320 	orr.w	r3, r3, #32
 80078e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	461a      	mov	r2, r3
 80078ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078ee:	61fb      	str	r3, [r7, #28]
 80078f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f2:	69b9      	ldr	r1, [r7, #24]
 80078f4:	69fa      	ldr	r2, [r7, #28]
 80078f6:	e841 2300 	strex	r3, r2, [r1]
 80078fa:	617b      	str	r3, [r7, #20]
   return(result);
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1e4      	bne.n	80078cc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007902:	e007      	b.n	8007914 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	699a      	ldr	r2, [r3, #24]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f042 0208 	orr.w	r2, r2, #8
 8007912:	619a      	str	r2, [r3, #24]
}
 8007914:	bf00      	nop
 8007916:	37b8      	adds	r7, #184	@ 0xb8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	40008000 	.word	0x40008000
 8007920:	080070a5 	.word	0x080070a5

08007924 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800796e:	2b01      	cmp	r3, #1
 8007970:	d101      	bne.n	8007976 <HAL_UARTEx_DisableFifoMode+0x16>
 8007972:	2302      	movs	r3, #2
 8007974:	e027      	b.n	80079c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2224      	movs	r2, #36	@ 0x24
 8007982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f022 0201 	bic.w	r2, r2, #1
 800799c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80079a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2220      	movs	r2, #32
 80079b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d101      	bne.n	80079ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079e6:	2302      	movs	r3, #2
 80079e8:	e02d      	b.n	8007a46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2224      	movs	r2, #36	@ 0x24
 80079f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 0201 	bic.w	r2, r2, #1
 8007a10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	683a      	ldr	r2, [r7, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f850 	bl	8007acc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2220      	movs	r2, #32
 8007a38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d101      	bne.n	8007a66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a62:	2302      	movs	r3, #2
 8007a64:	e02d      	b.n	8007ac2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2224      	movs	r2, #36	@ 0x24
 8007a72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 0201 	bic.w	r2, r2, #1
 8007a8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f812 	bl	8007acc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
	...

08007acc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d108      	bne.n	8007aee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007aec:	e031      	b.n	8007b52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007aee:	2308      	movs	r3, #8
 8007af0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007af2:	2308      	movs	r3, #8
 8007af4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	0e5b      	lsrs	r3, r3, #25
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	f003 0307 	and.w	r3, r3, #7
 8007b04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	0f5b      	lsrs	r3, r3, #29
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	f003 0307 	and.w	r3, r3, #7
 8007b14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	7b3a      	ldrb	r2, [r7, #12]
 8007b1a:	4911      	ldr	r1, [pc, #68]	@ (8007b60 <UARTEx_SetNbDataToProcess+0x94>)
 8007b1c:	5c8a      	ldrb	r2, [r1, r2]
 8007b1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b22:	7b3a      	ldrb	r2, [r7, #12]
 8007b24:	490f      	ldr	r1, [pc, #60]	@ (8007b64 <UARTEx_SetNbDataToProcess+0x98>)
 8007b26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b28:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
 8007b36:	7b7a      	ldrb	r2, [r7, #13]
 8007b38:	4909      	ldr	r1, [pc, #36]	@ (8007b60 <UARTEx_SetNbDataToProcess+0x94>)
 8007b3a:	5c8a      	ldrb	r2, [r1, r2]
 8007b3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b40:	7b7a      	ldrb	r2, [r7, #13]
 8007b42:	4908      	ldr	r1, [pc, #32]	@ (8007b64 <UARTEx_SetNbDataToProcess+0x98>)
 8007b44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b46:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007b52:	bf00      	nop
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	0800a8c0 	.word	0x0800a8c0
 8007b64:	0800a8c8 	.word	0x0800a8c8

08007b68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08a      	sub	sp, #40	@ 0x28
 8007b6c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b72:	4b7e      	ldr	r3, [pc, #504]	@ (8007d6c <xTaskIncrementTick+0x204>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f040 80ed 	bne.w	8007d56 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b7c:	4b7c      	ldr	r3, [pc, #496]	@ (8007d70 <xTaskIncrementTick+0x208>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3301      	adds	r3, #1
 8007b82:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007b84:	4a7a      	ldr	r2, [pc, #488]	@ (8007d70 <xTaskIncrementTick+0x208>)
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b8a:	6a3b      	ldr	r3, [r7, #32]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d121      	bne.n	8007bd4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8007b90:	4b78      	ldr	r3, [pc, #480]	@ (8007d74 <xTaskIncrementTick+0x20c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00b      	beq.n	8007bb2 <xTaskIncrementTick+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8007bac:	bf00      	nop
 8007bae:	bf00      	nop
 8007bb0:	e7fd      	b.n	8007bae <xTaskIncrementTick+0x46>
 8007bb2:	4b70      	ldr	r3, [pc, #448]	@ (8007d74 <xTaskIncrementTick+0x20c>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	61fb      	str	r3, [r7, #28]
 8007bb8:	4b6f      	ldr	r3, [pc, #444]	@ (8007d78 <xTaskIncrementTick+0x210>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a6d      	ldr	r2, [pc, #436]	@ (8007d74 <xTaskIncrementTick+0x20c>)
 8007bbe:	6013      	str	r3, [r2, #0]
 8007bc0:	4a6d      	ldr	r2, [pc, #436]	@ (8007d78 <xTaskIncrementTick+0x210>)
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	6013      	str	r3, [r2, #0]
 8007bc6:	4b6d      	ldr	r3, [pc, #436]	@ (8007d7c <xTaskIncrementTick+0x214>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	4a6b      	ldr	r2, [pc, #428]	@ (8007d7c <xTaskIncrementTick+0x214>)
 8007bce:	6013      	str	r3, [r2, #0]
 8007bd0:	f000 f93e 	bl	8007e50 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007bd4:	4b6a      	ldr	r3, [pc, #424]	@ (8007d80 <xTaskIncrementTick+0x218>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6a3a      	ldr	r2, [r7, #32]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	f0c0 80a6 	bcc.w	8007d2c <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007be0:	4b64      	ldr	r3, [pc, #400]	@ (8007d74 <xTaskIncrementTick+0x20c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d104      	bne.n	8007bf4 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bea:	4b65      	ldr	r3, [pc, #404]	@ (8007d80 <xTaskIncrementTick+0x218>)
 8007bec:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf0:	601a      	str	r2, [r3, #0]
                    break;
 8007bf2:	e09b      	b.n	8007d2c <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bf4:	4b5f      	ldr	r3, [pc, #380]	@ (8007d74 <xTaskIncrementTick+0x20c>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8007c04:	6a3a      	ldr	r2, [r7, #32]
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d203      	bcs.n	8007c14 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007c0c:	4a5c      	ldr	r2, [pc, #368]	@ (8007d80 <xTaskIncrementTick+0x218>)
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8007c12:	e08b      	b.n	8007d2c <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	695b      	ldr	r3, [r3, #20]
 8007c18:	613b      	str	r3, [r7, #16]
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	69ba      	ldr	r2, [r7, #24]
 8007c20:	68d2      	ldr	r2, [r2, #12]
 8007c22:	609a      	str	r2, [r3, #8]
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	6892      	ldr	r2, [r2, #8]
 8007c2c:	605a      	str	r2, [r3, #4]
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	3304      	adds	r3, #4
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d103      	bne.n	8007c42 <xTaskIncrementTick+0xda>
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	68da      	ldr	r2, [r3, #12]
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	605a      	str	r2, [r3, #4]
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	2200      	movs	r2, #0
 8007c46:	615a      	str	r2, [r3, #20]
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	1e5a      	subs	r2, r3, #1
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d01e      	beq.n	8007c98 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c5e:	60fb      	str	r3, [r7, #12]
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	69db      	ldr	r3, [r3, #28]
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	6a12      	ldr	r2, [r2, #32]
 8007c68:	609a      	str	r2, [r3, #8]
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	69d2      	ldr	r2, [r2, #28]
 8007c72:	605a      	str	r2, [r3, #4]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	3318      	adds	r3, #24
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d103      	bne.n	8007c88 <xTaskIncrementTick+0x120>
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	6a1a      	ldr	r2, [r3, #32]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	605a      	str	r2, [r3, #4]
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	1e5a      	subs	r2, r3, #1
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	409a      	lsls	r2, r3
 8007ca0:	4b38      	ldr	r3, [pc, #224]	@ (8007d84 <xTaskIncrementTick+0x21c>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	4a37      	ldr	r2, [pc, #220]	@ (8007d84 <xTaskIncrementTick+0x21c>)
 8007ca8:	6013      	str	r3, [r2, #0]
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cae:	4936      	ldr	r1, [pc, #216]	@ (8007d88 <xTaskIncrementTick+0x220>)
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	440b      	add	r3, r1
 8007cba:	3304      	adds	r3, #4
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	60bb      	str	r3, [r7, #8]
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	609a      	str	r2, [r3, #8]
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	689a      	ldr	r2, [r3, #8]
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	60da      	str	r2, [r3, #12]
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	69ba      	ldr	r2, [r7, #24]
 8007cd4:	3204      	adds	r2, #4
 8007cd6:	605a      	str	r2, [r3, #4]
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	1d1a      	adds	r2, r3, #4
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	609a      	str	r2, [r3, #8]
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4a26      	ldr	r2, [pc, #152]	@ (8007d88 <xTaskIncrementTick+0x220>)
 8007cee:	441a      	add	r2, r3
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	615a      	str	r2, [r3, #20]
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cf8:	4923      	ldr	r1, [pc, #140]	@ (8007d88 <xTaskIncrementTick+0x220>)
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	440b      	add	r3, r1
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	1c59      	adds	r1, r3, #1
 8007d08:	481f      	ldr	r0, [pc, #124]	@ (8007d88 <xTaskIncrementTick+0x220>)
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4413      	add	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	4403      	add	r3, r0
 8007d14:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8007d8c <xTaskIncrementTick+0x224>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d20:	429a      	cmp	r2, r3
 8007d22:	f67f af5d 	bls.w	8007be0 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8007d26:	2301      	movs	r3, #1
 8007d28:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d2a:	e759      	b.n	8007be0 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d2c:	4b17      	ldr	r3, [pc, #92]	@ (8007d8c <xTaskIncrementTick+0x224>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d32:	4915      	ldr	r1, [pc, #84]	@ (8007d88 <xTaskIncrementTick+0x220>)
 8007d34:	4613      	mov	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4413      	add	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	440b      	add	r3, r1
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d901      	bls.n	8007d48 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8007d44:	2301      	movs	r3, #1
 8007d46:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8007d48:	4b11      	ldr	r3, [pc, #68]	@ (8007d90 <xTaskIncrementTick+0x228>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d007      	beq.n	8007d60 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8007d50:	2301      	movs	r3, #1
 8007d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d54:	e004      	b.n	8007d60 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007d56:	4b0f      	ldr	r3, [pc, #60]	@ (8007d94 <xTaskIncrementTick+0x22c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8007d94 <xTaskIncrementTick+0x22c>)
 8007d5e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8007d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3728      	adds	r7, #40	@ 0x28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	2000062c 	.word	0x2000062c
 8007d70:	20000614 	.word	0x20000614
 8007d74:	2000060c 	.word	0x2000060c
 8007d78:	20000610 	.word	0x20000610
 8007d7c:	20000624 	.word	0x20000624
 8007d80:	20000628 	.word	0x20000628
 8007d84:	20000618 	.word	0x20000618
 8007d88:	200005a8 	.word	0x200005a8
 8007d8c:	200005a4 	.word	0x200005a4
 8007d90:	20000620 	.word	0x20000620
 8007d94:	2000061c 	.word	0x2000061c

08007d98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b087      	sub	sp, #28
 8007d9c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d9e:	4b27      	ldr	r3, [pc, #156]	@ (8007e3c <vTaskSwitchContext+0xa4>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007da6:	4b26      	ldr	r3, [pc, #152]	@ (8007e40 <vTaskSwitchContext+0xa8>)
 8007da8:	2201      	movs	r2, #1
 8007daa:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8007dac:	e040      	b.n	8007e30 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8007dae:	4b24      	ldr	r3, [pc, #144]	@ (8007e40 <vTaskSwitchContext+0xa8>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007db4:	4b23      	ldr	r3, [pc, #140]	@ (8007e44 <vTaskSwitchContext+0xac>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	fab3 f383 	clz	r3, r3
 8007dc0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8007dc2:	7afb      	ldrb	r3, [r7, #11]
 8007dc4:	f1c3 031f 	rsb	r3, r3, #31
 8007dc8:	617b      	str	r3, [r7, #20]
 8007dca:	491f      	ldr	r1, [pc, #124]	@ (8007e48 <vTaskSwitchContext+0xb0>)
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	440b      	add	r3, r1
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10b      	bne.n	8007df6 <vTaskSwitchContext+0x5e>
        __asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	607b      	str	r3, [r7, #4]
    }
 8007df0:	bf00      	nop
 8007df2:	bf00      	nop
 8007df4:	e7fd      	b.n	8007df2 <vTaskSwitchContext+0x5a>
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4a11      	ldr	r2, [pc, #68]	@ (8007e48 <vTaskSwitchContext+0xb0>)
 8007e02:	4413      	add	r3, r2
 8007e04:	613b      	str	r3, [r7, #16]
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	605a      	str	r2, [r3, #4]
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	685a      	ldr	r2, [r3, #4]
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	3308      	adds	r3, #8
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d104      	bne.n	8007e26 <vTaskSwitchContext+0x8e>
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	605a      	str	r2, [r3, #4]
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	4a07      	ldr	r2, [pc, #28]	@ (8007e4c <vTaskSwitchContext+0xb4>)
 8007e2e:	6013      	str	r3, [r2, #0]
}
 8007e30:	bf00      	nop
 8007e32:	371c      	adds	r7, #28
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	2000062c 	.word	0x2000062c
 8007e40:	20000620 	.word	0x20000620
 8007e44:	20000618 	.word	0x20000618
 8007e48:	200005a8 	.word	0x200005a8
 8007e4c:	200005a4 	.word	0x200005a4

08007e50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e50:	b480      	push	{r7}
 8007e52:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e54:	4b0a      	ldr	r3, [pc, #40]	@ (8007e80 <prvResetNextTaskUnblockTime+0x30>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d104      	bne.n	8007e68 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007e5e:	4b09      	ldr	r3, [pc, #36]	@ (8007e84 <prvResetNextTaskUnblockTime+0x34>)
 8007e60:	f04f 32ff 	mov.w	r2, #4294967295
 8007e64:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007e66:	e005      	b.n	8007e74 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007e68:	4b05      	ldr	r3, [pc, #20]	@ (8007e80 <prvResetNextTaskUnblockTime+0x30>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a04      	ldr	r2, [pc, #16]	@ (8007e84 <prvResetNextTaskUnblockTime+0x34>)
 8007e72:	6013      	str	r3, [r2, #0]
}
 8007e74:	bf00      	nop
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	2000060c 	.word	0x2000060c
 8007e84:	20000628 	.word	0x20000628
	...

08007e90 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007e90:	4b07      	ldr	r3, [pc, #28]	@ (8007eb0 <pxCurrentTCBConst2>)
 8007e92:	6819      	ldr	r1, [r3, #0]
 8007e94:	6808      	ldr	r0, [r1, #0]
 8007e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9a:	f380 8809 	msr	PSP, r0
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f04f 0000 	mov.w	r0, #0
 8007ea6:	f380 8811 	msr	BASEPRI, r0
 8007eaa:	4770      	bx	lr
 8007eac:	f3af 8000 	nop.w

08007eb0 <pxCurrentTCBConst2>:
 8007eb0:	200005a4 	.word	0x200005a4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007eb4:	bf00      	nop
 8007eb6:	bf00      	nop
	...

08007ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007ec0:	f3ef 8009 	mrs	r0, PSP
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	4b15      	ldr	r3, [pc, #84]	@ (8007f20 <pxCurrentTCBConst>)
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	f01e 0f10 	tst.w	lr, #16
 8007ed0:	bf08      	it	eq
 8007ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eda:	6010      	str	r0, [r2, #0]
 8007edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ee0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007ee4:	f380 8811 	msr	BASEPRI, r0
 8007ee8:	f3bf 8f4f 	dsb	sy
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f7ff ff52 	bl	8007d98 <vTaskSwitchContext>
 8007ef4:	f04f 0000 	mov.w	r0, #0
 8007ef8:	f380 8811 	msr	BASEPRI, r0
 8007efc:	bc09      	pop	{r0, r3}
 8007efe:	6819      	ldr	r1, [r3, #0]
 8007f00:	6808      	ldr	r0, [r1, #0]
 8007f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f06:	f01e 0f10 	tst.w	lr, #16
 8007f0a:	bf08      	it	eq
 8007f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f10:	f380 8809 	msr	PSP, r0
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	f3af 8000 	nop.w

08007f20 <pxCurrentTCBConst>:
 8007f20:	200005a4 	.word	0x200005a4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007f24:	bf00      	nop
 8007f26:	bf00      	nop

08007f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
        __asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	607b      	str	r3, [r7, #4]
    }
 8007f40:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007f42:	f7ff fe11 	bl	8007b68 <xTaskIncrementTick>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d003      	beq.n	8007f54 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f4c:	4b06      	ldr	r3, [pc, #24]	@ (8007f68 <SysTick_Handler+0x40>)
 8007f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	2300      	movs	r3, #0
 8007f56:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8007f5e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8007f60:	bf00      	nop
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	e000ed04 	.word	0xe000ed04

08007f6c <__cvt>:
 8007f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f70:	ec57 6b10 	vmov	r6, r7, d0
 8007f74:	2f00      	cmp	r7, #0
 8007f76:	460c      	mov	r4, r1
 8007f78:	4619      	mov	r1, r3
 8007f7a:	463b      	mov	r3, r7
 8007f7c:	bfbb      	ittet	lt
 8007f7e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007f82:	461f      	movlt	r7, r3
 8007f84:	2300      	movge	r3, #0
 8007f86:	232d      	movlt	r3, #45	@ 0x2d
 8007f88:	700b      	strb	r3, [r1, #0]
 8007f8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f8c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007f90:	4691      	mov	r9, r2
 8007f92:	f023 0820 	bic.w	r8, r3, #32
 8007f96:	bfbc      	itt	lt
 8007f98:	4632      	movlt	r2, r6
 8007f9a:	4616      	movlt	r6, r2
 8007f9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007fa0:	d005      	beq.n	8007fae <__cvt+0x42>
 8007fa2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007fa6:	d100      	bne.n	8007faa <__cvt+0x3e>
 8007fa8:	3401      	adds	r4, #1
 8007faa:	2102      	movs	r1, #2
 8007fac:	e000      	b.n	8007fb0 <__cvt+0x44>
 8007fae:	2103      	movs	r1, #3
 8007fb0:	ab03      	add	r3, sp, #12
 8007fb2:	9301      	str	r3, [sp, #4]
 8007fb4:	ab02      	add	r3, sp, #8
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	ec47 6b10 	vmov	d0, r6, r7
 8007fbc:	4653      	mov	r3, sl
 8007fbe:	4622      	mov	r2, r4
 8007fc0:	f000 fe4a 	bl	8008c58 <_dtoa_r>
 8007fc4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007fc8:	4605      	mov	r5, r0
 8007fca:	d119      	bne.n	8008000 <__cvt+0x94>
 8007fcc:	f019 0f01 	tst.w	r9, #1
 8007fd0:	d00e      	beq.n	8007ff0 <__cvt+0x84>
 8007fd2:	eb00 0904 	add.w	r9, r0, r4
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	2300      	movs	r3, #0
 8007fda:	4630      	mov	r0, r6
 8007fdc:	4639      	mov	r1, r7
 8007fde:	f7f8 fd9b 	bl	8000b18 <__aeabi_dcmpeq>
 8007fe2:	b108      	cbz	r0, 8007fe8 <__cvt+0x7c>
 8007fe4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007fe8:	2230      	movs	r2, #48	@ 0x30
 8007fea:	9b03      	ldr	r3, [sp, #12]
 8007fec:	454b      	cmp	r3, r9
 8007fee:	d31e      	bcc.n	800802e <__cvt+0xc2>
 8007ff0:	9b03      	ldr	r3, [sp, #12]
 8007ff2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ff4:	1b5b      	subs	r3, r3, r5
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	b004      	add	sp, #16
 8007ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008000:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008004:	eb00 0904 	add.w	r9, r0, r4
 8008008:	d1e5      	bne.n	8007fd6 <__cvt+0x6a>
 800800a:	7803      	ldrb	r3, [r0, #0]
 800800c:	2b30      	cmp	r3, #48	@ 0x30
 800800e:	d10a      	bne.n	8008026 <__cvt+0xba>
 8008010:	2200      	movs	r2, #0
 8008012:	2300      	movs	r3, #0
 8008014:	4630      	mov	r0, r6
 8008016:	4639      	mov	r1, r7
 8008018:	f7f8 fd7e 	bl	8000b18 <__aeabi_dcmpeq>
 800801c:	b918      	cbnz	r0, 8008026 <__cvt+0xba>
 800801e:	f1c4 0401 	rsb	r4, r4, #1
 8008022:	f8ca 4000 	str.w	r4, [sl]
 8008026:	f8da 3000 	ldr.w	r3, [sl]
 800802a:	4499      	add	r9, r3
 800802c:	e7d3      	b.n	8007fd6 <__cvt+0x6a>
 800802e:	1c59      	adds	r1, r3, #1
 8008030:	9103      	str	r1, [sp, #12]
 8008032:	701a      	strb	r2, [r3, #0]
 8008034:	e7d9      	b.n	8007fea <__cvt+0x7e>

08008036 <__exponent>:
 8008036:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008038:	2900      	cmp	r1, #0
 800803a:	bfba      	itte	lt
 800803c:	4249      	neglt	r1, r1
 800803e:	232d      	movlt	r3, #45	@ 0x2d
 8008040:	232b      	movge	r3, #43	@ 0x2b
 8008042:	2909      	cmp	r1, #9
 8008044:	7002      	strb	r2, [r0, #0]
 8008046:	7043      	strb	r3, [r0, #1]
 8008048:	dd29      	ble.n	800809e <__exponent+0x68>
 800804a:	f10d 0307 	add.w	r3, sp, #7
 800804e:	461d      	mov	r5, r3
 8008050:	270a      	movs	r7, #10
 8008052:	461a      	mov	r2, r3
 8008054:	fbb1 f6f7 	udiv	r6, r1, r7
 8008058:	fb07 1416 	mls	r4, r7, r6, r1
 800805c:	3430      	adds	r4, #48	@ 0x30
 800805e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008062:	460c      	mov	r4, r1
 8008064:	2c63      	cmp	r4, #99	@ 0x63
 8008066:	f103 33ff 	add.w	r3, r3, #4294967295
 800806a:	4631      	mov	r1, r6
 800806c:	dcf1      	bgt.n	8008052 <__exponent+0x1c>
 800806e:	3130      	adds	r1, #48	@ 0x30
 8008070:	1e94      	subs	r4, r2, #2
 8008072:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008076:	1c41      	adds	r1, r0, #1
 8008078:	4623      	mov	r3, r4
 800807a:	42ab      	cmp	r3, r5
 800807c:	d30a      	bcc.n	8008094 <__exponent+0x5e>
 800807e:	f10d 0309 	add.w	r3, sp, #9
 8008082:	1a9b      	subs	r3, r3, r2
 8008084:	42ac      	cmp	r4, r5
 8008086:	bf88      	it	hi
 8008088:	2300      	movhi	r3, #0
 800808a:	3302      	adds	r3, #2
 800808c:	4403      	add	r3, r0
 800808e:	1a18      	subs	r0, r3, r0
 8008090:	b003      	add	sp, #12
 8008092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008094:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008098:	f801 6f01 	strb.w	r6, [r1, #1]!
 800809c:	e7ed      	b.n	800807a <__exponent+0x44>
 800809e:	2330      	movs	r3, #48	@ 0x30
 80080a0:	3130      	adds	r1, #48	@ 0x30
 80080a2:	7083      	strb	r3, [r0, #2]
 80080a4:	70c1      	strb	r1, [r0, #3]
 80080a6:	1d03      	adds	r3, r0, #4
 80080a8:	e7f1      	b.n	800808e <__exponent+0x58>
	...

080080ac <_printf_float>:
 80080ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b0:	b08d      	sub	sp, #52	@ 0x34
 80080b2:	460c      	mov	r4, r1
 80080b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80080b8:	4616      	mov	r6, r2
 80080ba:	461f      	mov	r7, r3
 80080bc:	4605      	mov	r5, r0
 80080be:	f000 fcbb 	bl	8008a38 <_localeconv_r>
 80080c2:	6803      	ldr	r3, [r0, #0]
 80080c4:	9304      	str	r3, [sp, #16]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7f8 f8fa 	bl	80002c0 <strlen>
 80080cc:	2300      	movs	r3, #0
 80080ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80080d0:	f8d8 3000 	ldr.w	r3, [r8]
 80080d4:	9005      	str	r0, [sp, #20]
 80080d6:	3307      	adds	r3, #7
 80080d8:	f023 0307 	bic.w	r3, r3, #7
 80080dc:	f103 0208 	add.w	r2, r3, #8
 80080e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80080e4:	f8d4 b000 	ldr.w	fp, [r4]
 80080e8:	f8c8 2000 	str.w	r2, [r8]
 80080ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80080f4:	9307      	str	r3, [sp, #28]
 80080f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80080fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80080fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008102:	4b9c      	ldr	r3, [pc, #624]	@ (8008374 <_printf_float+0x2c8>)
 8008104:	f04f 32ff 	mov.w	r2, #4294967295
 8008108:	f7f8 fd38 	bl	8000b7c <__aeabi_dcmpun>
 800810c:	bb70      	cbnz	r0, 800816c <_printf_float+0xc0>
 800810e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008112:	4b98      	ldr	r3, [pc, #608]	@ (8008374 <_printf_float+0x2c8>)
 8008114:	f04f 32ff 	mov.w	r2, #4294967295
 8008118:	f7f8 fd12 	bl	8000b40 <__aeabi_dcmple>
 800811c:	bb30      	cbnz	r0, 800816c <_printf_float+0xc0>
 800811e:	2200      	movs	r2, #0
 8008120:	2300      	movs	r3, #0
 8008122:	4640      	mov	r0, r8
 8008124:	4649      	mov	r1, r9
 8008126:	f7f8 fd01 	bl	8000b2c <__aeabi_dcmplt>
 800812a:	b110      	cbz	r0, 8008132 <_printf_float+0x86>
 800812c:	232d      	movs	r3, #45	@ 0x2d
 800812e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008132:	4a91      	ldr	r2, [pc, #580]	@ (8008378 <_printf_float+0x2cc>)
 8008134:	4b91      	ldr	r3, [pc, #580]	@ (800837c <_printf_float+0x2d0>)
 8008136:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800813a:	bf94      	ite	ls
 800813c:	4690      	movls	r8, r2
 800813e:	4698      	movhi	r8, r3
 8008140:	2303      	movs	r3, #3
 8008142:	6123      	str	r3, [r4, #16]
 8008144:	f02b 0304 	bic.w	r3, fp, #4
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	f04f 0900 	mov.w	r9, #0
 800814e:	9700      	str	r7, [sp, #0]
 8008150:	4633      	mov	r3, r6
 8008152:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008154:	4621      	mov	r1, r4
 8008156:	4628      	mov	r0, r5
 8008158:	f000 f9d2 	bl	8008500 <_printf_common>
 800815c:	3001      	adds	r0, #1
 800815e:	f040 808d 	bne.w	800827c <_printf_float+0x1d0>
 8008162:	f04f 30ff 	mov.w	r0, #4294967295
 8008166:	b00d      	add	sp, #52	@ 0x34
 8008168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816c:	4642      	mov	r2, r8
 800816e:	464b      	mov	r3, r9
 8008170:	4640      	mov	r0, r8
 8008172:	4649      	mov	r1, r9
 8008174:	f7f8 fd02 	bl	8000b7c <__aeabi_dcmpun>
 8008178:	b140      	cbz	r0, 800818c <_printf_float+0xe0>
 800817a:	464b      	mov	r3, r9
 800817c:	2b00      	cmp	r3, #0
 800817e:	bfbc      	itt	lt
 8008180:	232d      	movlt	r3, #45	@ 0x2d
 8008182:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008186:	4a7e      	ldr	r2, [pc, #504]	@ (8008380 <_printf_float+0x2d4>)
 8008188:	4b7e      	ldr	r3, [pc, #504]	@ (8008384 <_printf_float+0x2d8>)
 800818a:	e7d4      	b.n	8008136 <_printf_float+0x8a>
 800818c:	6863      	ldr	r3, [r4, #4]
 800818e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008192:	9206      	str	r2, [sp, #24]
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	d13b      	bne.n	8008210 <_printf_float+0x164>
 8008198:	2306      	movs	r3, #6
 800819a:	6063      	str	r3, [r4, #4]
 800819c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80081a0:	2300      	movs	r3, #0
 80081a2:	6022      	str	r2, [r4, #0]
 80081a4:	9303      	str	r3, [sp, #12]
 80081a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80081a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80081ac:	ab09      	add	r3, sp, #36	@ 0x24
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	6861      	ldr	r1, [r4, #4]
 80081b2:	ec49 8b10 	vmov	d0, r8, r9
 80081b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80081ba:	4628      	mov	r0, r5
 80081bc:	f7ff fed6 	bl	8007f6c <__cvt>
 80081c0:	9b06      	ldr	r3, [sp, #24]
 80081c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80081c4:	2b47      	cmp	r3, #71	@ 0x47
 80081c6:	4680      	mov	r8, r0
 80081c8:	d129      	bne.n	800821e <_printf_float+0x172>
 80081ca:	1cc8      	adds	r0, r1, #3
 80081cc:	db02      	blt.n	80081d4 <_printf_float+0x128>
 80081ce:	6863      	ldr	r3, [r4, #4]
 80081d0:	4299      	cmp	r1, r3
 80081d2:	dd41      	ble.n	8008258 <_printf_float+0x1ac>
 80081d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80081d8:	fa5f fa8a 	uxtb.w	sl, sl
 80081dc:	3901      	subs	r1, #1
 80081de:	4652      	mov	r2, sl
 80081e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80081e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80081e6:	f7ff ff26 	bl	8008036 <__exponent>
 80081ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081ec:	1813      	adds	r3, r2, r0
 80081ee:	2a01      	cmp	r2, #1
 80081f0:	4681      	mov	r9, r0
 80081f2:	6123      	str	r3, [r4, #16]
 80081f4:	dc02      	bgt.n	80081fc <_printf_float+0x150>
 80081f6:	6822      	ldr	r2, [r4, #0]
 80081f8:	07d2      	lsls	r2, r2, #31
 80081fa:	d501      	bpl.n	8008200 <_printf_float+0x154>
 80081fc:	3301      	adds	r3, #1
 80081fe:	6123      	str	r3, [r4, #16]
 8008200:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008204:	2b00      	cmp	r3, #0
 8008206:	d0a2      	beq.n	800814e <_printf_float+0xa2>
 8008208:	232d      	movs	r3, #45	@ 0x2d
 800820a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800820e:	e79e      	b.n	800814e <_printf_float+0xa2>
 8008210:	9a06      	ldr	r2, [sp, #24]
 8008212:	2a47      	cmp	r2, #71	@ 0x47
 8008214:	d1c2      	bne.n	800819c <_printf_float+0xf0>
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1c0      	bne.n	800819c <_printf_float+0xf0>
 800821a:	2301      	movs	r3, #1
 800821c:	e7bd      	b.n	800819a <_printf_float+0xee>
 800821e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008222:	d9db      	bls.n	80081dc <_printf_float+0x130>
 8008224:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008228:	d118      	bne.n	800825c <_printf_float+0x1b0>
 800822a:	2900      	cmp	r1, #0
 800822c:	6863      	ldr	r3, [r4, #4]
 800822e:	dd0b      	ble.n	8008248 <_printf_float+0x19c>
 8008230:	6121      	str	r1, [r4, #16]
 8008232:	b913      	cbnz	r3, 800823a <_printf_float+0x18e>
 8008234:	6822      	ldr	r2, [r4, #0]
 8008236:	07d0      	lsls	r0, r2, #31
 8008238:	d502      	bpl.n	8008240 <_printf_float+0x194>
 800823a:	3301      	adds	r3, #1
 800823c:	440b      	add	r3, r1
 800823e:	6123      	str	r3, [r4, #16]
 8008240:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008242:	f04f 0900 	mov.w	r9, #0
 8008246:	e7db      	b.n	8008200 <_printf_float+0x154>
 8008248:	b913      	cbnz	r3, 8008250 <_printf_float+0x1a4>
 800824a:	6822      	ldr	r2, [r4, #0]
 800824c:	07d2      	lsls	r2, r2, #31
 800824e:	d501      	bpl.n	8008254 <_printf_float+0x1a8>
 8008250:	3302      	adds	r3, #2
 8008252:	e7f4      	b.n	800823e <_printf_float+0x192>
 8008254:	2301      	movs	r3, #1
 8008256:	e7f2      	b.n	800823e <_printf_float+0x192>
 8008258:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800825c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800825e:	4299      	cmp	r1, r3
 8008260:	db05      	blt.n	800826e <_printf_float+0x1c2>
 8008262:	6823      	ldr	r3, [r4, #0]
 8008264:	6121      	str	r1, [r4, #16]
 8008266:	07d8      	lsls	r0, r3, #31
 8008268:	d5ea      	bpl.n	8008240 <_printf_float+0x194>
 800826a:	1c4b      	adds	r3, r1, #1
 800826c:	e7e7      	b.n	800823e <_printf_float+0x192>
 800826e:	2900      	cmp	r1, #0
 8008270:	bfd4      	ite	le
 8008272:	f1c1 0202 	rsble	r2, r1, #2
 8008276:	2201      	movgt	r2, #1
 8008278:	4413      	add	r3, r2
 800827a:	e7e0      	b.n	800823e <_printf_float+0x192>
 800827c:	6823      	ldr	r3, [r4, #0]
 800827e:	055a      	lsls	r2, r3, #21
 8008280:	d407      	bmi.n	8008292 <_printf_float+0x1e6>
 8008282:	6923      	ldr	r3, [r4, #16]
 8008284:	4642      	mov	r2, r8
 8008286:	4631      	mov	r1, r6
 8008288:	4628      	mov	r0, r5
 800828a:	47b8      	blx	r7
 800828c:	3001      	adds	r0, #1
 800828e:	d12b      	bne.n	80082e8 <_printf_float+0x23c>
 8008290:	e767      	b.n	8008162 <_printf_float+0xb6>
 8008292:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008296:	f240 80dd 	bls.w	8008454 <_printf_float+0x3a8>
 800829a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800829e:	2200      	movs	r2, #0
 80082a0:	2300      	movs	r3, #0
 80082a2:	f7f8 fc39 	bl	8000b18 <__aeabi_dcmpeq>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d033      	beq.n	8008312 <_printf_float+0x266>
 80082aa:	4a37      	ldr	r2, [pc, #220]	@ (8008388 <_printf_float+0x2dc>)
 80082ac:	2301      	movs	r3, #1
 80082ae:	4631      	mov	r1, r6
 80082b0:	4628      	mov	r0, r5
 80082b2:	47b8      	blx	r7
 80082b4:	3001      	adds	r0, #1
 80082b6:	f43f af54 	beq.w	8008162 <_printf_float+0xb6>
 80082ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80082be:	4543      	cmp	r3, r8
 80082c0:	db02      	blt.n	80082c8 <_printf_float+0x21c>
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	07d8      	lsls	r0, r3, #31
 80082c6:	d50f      	bpl.n	80082e8 <_printf_float+0x23c>
 80082c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082cc:	4631      	mov	r1, r6
 80082ce:	4628      	mov	r0, r5
 80082d0:	47b8      	blx	r7
 80082d2:	3001      	adds	r0, #1
 80082d4:	f43f af45 	beq.w	8008162 <_printf_float+0xb6>
 80082d8:	f04f 0900 	mov.w	r9, #0
 80082dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80082e0:	f104 0a1a 	add.w	sl, r4, #26
 80082e4:	45c8      	cmp	r8, r9
 80082e6:	dc09      	bgt.n	80082fc <_printf_float+0x250>
 80082e8:	6823      	ldr	r3, [r4, #0]
 80082ea:	079b      	lsls	r3, r3, #30
 80082ec:	f100 8103 	bmi.w	80084f6 <_printf_float+0x44a>
 80082f0:	68e0      	ldr	r0, [r4, #12]
 80082f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082f4:	4298      	cmp	r0, r3
 80082f6:	bfb8      	it	lt
 80082f8:	4618      	movlt	r0, r3
 80082fa:	e734      	b.n	8008166 <_printf_float+0xba>
 80082fc:	2301      	movs	r3, #1
 80082fe:	4652      	mov	r2, sl
 8008300:	4631      	mov	r1, r6
 8008302:	4628      	mov	r0, r5
 8008304:	47b8      	blx	r7
 8008306:	3001      	adds	r0, #1
 8008308:	f43f af2b 	beq.w	8008162 <_printf_float+0xb6>
 800830c:	f109 0901 	add.w	r9, r9, #1
 8008310:	e7e8      	b.n	80082e4 <_printf_float+0x238>
 8008312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008314:	2b00      	cmp	r3, #0
 8008316:	dc39      	bgt.n	800838c <_printf_float+0x2e0>
 8008318:	4a1b      	ldr	r2, [pc, #108]	@ (8008388 <_printf_float+0x2dc>)
 800831a:	2301      	movs	r3, #1
 800831c:	4631      	mov	r1, r6
 800831e:	4628      	mov	r0, r5
 8008320:	47b8      	blx	r7
 8008322:	3001      	adds	r0, #1
 8008324:	f43f af1d 	beq.w	8008162 <_printf_float+0xb6>
 8008328:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800832c:	ea59 0303 	orrs.w	r3, r9, r3
 8008330:	d102      	bne.n	8008338 <_printf_float+0x28c>
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	07d9      	lsls	r1, r3, #31
 8008336:	d5d7      	bpl.n	80082e8 <_printf_float+0x23c>
 8008338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800833c:	4631      	mov	r1, r6
 800833e:	4628      	mov	r0, r5
 8008340:	47b8      	blx	r7
 8008342:	3001      	adds	r0, #1
 8008344:	f43f af0d 	beq.w	8008162 <_printf_float+0xb6>
 8008348:	f04f 0a00 	mov.w	sl, #0
 800834c:	f104 0b1a 	add.w	fp, r4, #26
 8008350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008352:	425b      	negs	r3, r3
 8008354:	4553      	cmp	r3, sl
 8008356:	dc01      	bgt.n	800835c <_printf_float+0x2b0>
 8008358:	464b      	mov	r3, r9
 800835a:	e793      	b.n	8008284 <_printf_float+0x1d8>
 800835c:	2301      	movs	r3, #1
 800835e:	465a      	mov	r2, fp
 8008360:	4631      	mov	r1, r6
 8008362:	4628      	mov	r0, r5
 8008364:	47b8      	blx	r7
 8008366:	3001      	adds	r0, #1
 8008368:	f43f aefb 	beq.w	8008162 <_printf_float+0xb6>
 800836c:	f10a 0a01 	add.w	sl, sl, #1
 8008370:	e7ee      	b.n	8008350 <_printf_float+0x2a4>
 8008372:	bf00      	nop
 8008374:	7fefffff 	.word	0x7fefffff
 8008378:	0800a8d0 	.word	0x0800a8d0
 800837c:	0800a8d4 	.word	0x0800a8d4
 8008380:	0800a8d8 	.word	0x0800a8d8
 8008384:	0800a8dc 	.word	0x0800a8dc
 8008388:	0800a8e0 	.word	0x0800a8e0
 800838c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800838e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008392:	4553      	cmp	r3, sl
 8008394:	bfa8      	it	ge
 8008396:	4653      	movge	r3, sl
 8008398:	2b00      	cmp	r3, #0
 800839a:	4699      	mov	r9, r3
 800839c:	dc36      	bgt.n	800840c <_printf_float+0x360>
 800839e:	f04f 0b00 	mov.w	fp, #0
 80083a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083a6:	f104 021a 	add.w	r2, r4, #26
 80083aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80083ac:	9306      	str	r3, [sp, #24]
 80083ae:	eba3 0309 	sub.w	r3, r3, r9
 80083b2:	455b      	cmp	r3, fp
 80083b4:	dc31      	bgt.n	800841a <_printf_float+0x36e>
 80083b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b8:	459a      	cmp	sl, r3
 80083ba:	dc3a      	bgt.n	8008432 <_printf_float+0x386>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	07da      	lsls	r2, r3, #31
 80083c0:	d437      	bmi.n	8008432 <_printf_float+0x386>
 80083c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083c4:	ebaa 0903 	sub.w	r9, sl, r3
 80083c8:	9b06      	ldr	r3, [sp, #24]
 80083ca:	ebaa 0303 	sub.w	r3, sl, r3
 80083ce:	4599      	cmp	r9, r3
 80083d0:	bfa8      	it	ge
 80083d2:	4699      	movge	r9, r3
 80083d4:	f1b9 0f00 	cmp.w	r9, #0
 80083d8:	dc33      	bgt.n	8008442 <_printf_float+0x396>
 80083da:	f04f 0800 	mov.w	r8, #0
 80083de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083e2:	f104 0b1a 	add.w	fp, r4, #26
 80083e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083e8:	ebaa 0303 	sub.w	r3, sl, r3
 80083ec:	eba3 0309 	sub.w	r3, r3, r9
 80083f0:	4543      	cmp	r3, r8
 80083f2:	f77f af79 	ble.w	80082e8 <_printf_float+0x23c>
 80083f6:	2301      	movs	r3, #1
 80083f8:	465a      	mov	r2, fp
 80083fa:	4631      	mov	r1, r6
 80083fc:	4628      	mov	r0, r5
 80083fe:	47b8      	blx	r7
 8008400:	3001      	adds	r0, #1
 8008402:	f43f aeae 	beq.w	8008162 <_printf_float+0xb6>
 8008406:	f108 0801 	add.w	r8, r8, #1
 800840a:	e7ec      	b.n	80083e6 <_printf_float+0x33a>
 800840c:	4642      	mov	r2, r8
 800840e:	4631      	mov	r1, r6
 8008410:	4628      	mov	r0, r5
 8008412:	47b8      	blx	r7
 8008414:	3001      	adds	r0, #1
 8008416:	d1c2      	bne.n	800839e <_printf_float+0x2f2>
 8008418:	e6a3      	b.n	8008162 <_printf_float+0xb6>
 800841a:	2301      	movs	r3, #1
 800841c:	4631      	mov	r1, r6
 800841e:	4628      	mov	r0, r5
 8008420:	9206      	str	r2, [sp, #24]
 8008422:	47b8      	blx	r7
 8008424:	3001      	adds	r0, #1
 8008426:	f43f ae9c 	beq.w	8008162 <_printf_float+0xb6>
 800842a:	9a06      	ldr	r2, [sp, #24]
 800842c:	f10b 0b01 	add.w	fp, fp, #1
 8008430:	e7bb      	b.n	80083aa <_printf_float+0x2fe>
 8008432:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008436:	4631      	mov	r1, r6
 8008438:	4628      	mov	r0, r5
 800843a:	47b8      	blx	r7
 800843c:	3001      	adds	r0, #1
 800843e:	d1c0      	bne.n	80083c2 <_printf_float+0x316>
 8008440:	e68f      	b.n	8008162 <_printf_float+0xb6>
 8008442:	9a06      	ldr	r2, [sp, #24]
 8008444:	464b      	mov	r3, r9
 8008446:	4442      	add	r2, r8
 8008448:	4631      	mov	r1, r6
 800844a:	4628      	mov	r0, r5
 800844c:	47b8      	blx	r7
 800844e:	3001      	adds	r0, #1
 8008450:	d1c3      	bne.n	80083da <_printf_float+0x32e>
 8008452:	e686      	b.n	8008162 <_printf_float+0xb6>
 8008454:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008458:	f1ba 0f01 	cmp.w	sl, #1
 800845c:	dc01      	bgt.n	8008462 <_printf_float+0x3b6>
 800845e:	07db      	lsls	r3, r3, #31
 8008460:	d536      	bpl.n	80084d0 <_printf_float+0x424>
 8008462:	2301      	movs	r3, #1
 8008464:	4642      	mov	r2, r8
 8008466:	4631      	mov	r1, r6
 8008468:	4628      	mov	r0, r5
 800846a:	47b8      	blx	r7
 800846c:	3001      	adds	r0, #1
 800846e:	f43f ae78 	beq.w	8008162 <_printf_float+0xb6>
 8008472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008476:	4631      	mov	r1, r6
 8008478:	4628      	mov	r0, r5
 800847a:	47b8      	blx	r7
 800847c:	3001      	adds	r0, #1
 800847e:	f43f ae70 	beq.w	8008162 <_printf_float+0xb6>
 8008482:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008486:	2200      	movs	r2, #0
 8008488:	2300      	movs	r3, #0
 800848a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800848e:	f7f8 fb43 	bl	8000b18 <__aeabi_dcmpeq>
 8008492:	b9c0      	cbnz	r0, 80084c6 <_printf_float+0x41a>
 8008494:	4653      	mov	r3, sl
 8008496:	f108 0201 	add.w	r2, r8, #1
 800849a:	4631      	mov	r1, r6
 800849c:	4628      	mov	r0, r5
 800849e:	47b8      	blx	r7
 80084a0:	3001      	adds	r0, #1
 80084a2:	d10c      	bne.n	80084be <_printf_float+0x412>
 80084a4:	e65d      	b.n	8008162 <_printf_float+0xb6>
 80084a6:	2301      	movs	r3, #1
 80084a8:	465a      	mov	r2, fp
 80084aa:	4631      	mov	r1, r6
 80084ac:	4628      	mov	r0, r5
 80084ae:	47b8      	blx	r7
 80084b0:	3001      	adds	r0, #1
 80084b2:	f43f ae56 	beq.w	8008162 <_printf_float+0xb6>
 80084b6:	f108 0801 	add.w	r8, r8, #1
 80084ba:	45d0      	cmp	r8, sl
 80084bc:	dbf3      	blt.n	80084a6 <_printf_float+0x3fa>
 80084be:	464b      	mov	r3, r9
 80084c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80084c4:	e6df      	b.n	8008286 <_printf_float+0x1da>
 80084c6:	f04f 0800 	mov.w	r8, #0
 80084ca:	f104 0b1a 	add.w	fp, r4, #26
 80084ce:	e7f4      	b.n	80084ba <_printf_float+0x40e>
 80084d0:	2301      	movs	r3, #1
 80084d2:	4642      	mov	r2, r8
 80084d4:	e7e1      	b.n	800849a <_printf_float+0x3ee>
 80084d6:	2301      	movs	r3, #1
 80084d8:	464a      	mov	r2, r9
 80084da:	4631      	mov	r1, r6
 80084dc:	4628      	mov	r0, r5
 80084de:	47b8      	blx	r7
 80084e0:	3001      	adds	r0, #1
 80084e2:	f43f ae3e 	beq.w	8008162 <_printf_float+0xb6>
 80084e6:	f108 0801 	add.w	r8, r8, #1
 80084ea:	68e3      	ldr	r3, [r4, #12]
 80084ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80084ee:	1a5b      	subs	r3, r3, r1
 80084f0:	4543      	cmp	r3, r8
 80084f2:	dcf0      	bgt.n	80084d6 <_printf_float+0x42a>
 80084f4:	e6fc      	b.n	80082f0 <_printf_float+0x244>
 80084f6:	f04f 0800 	mov.w	r8, #0
 80084fa:	f104 0919 	add.w	r9, r4, #25
 80084fe:	e7f4      	b.n	80084ea <_printf_float+0x43e>

08008500 <_printf_common>:
 8008500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008504:	4616      	mov	r6, r2
 8008506:	4698      	mov	r8, r3
 8008508:	688a      	ldr	r2, [r1, #8]
 800850a:	690b      	ldr	r3, [r1, #16]
 800850c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008510:	4293      	cmp	r3, r2
 8008512:	bfb8      	it	lt
 8008514:	4613      	movlt	r3, r2
 8008516:	6033      	str	r3, [r6, #0]
 8008518:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800851c:	4607      	mov	r7, r0
 800851e:	460c      	mov	r4, r1
 8008520:	b10a      	cbz	r2, 8008526 <_printf_common+0x26>
 8008522:	3301      	adds	r3, #1
 8008524:	6033      	str	r3, [r6, #0]
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	0699      	lsls	r1, r3, #26
 800852a:	bf42      	ittt	mi
 800852c:	6833      	ldrmi	r3, [r6, #0]
 800852e:	3302      	addmi	r3, #2
 8008530:	6033      	strmi	r3, [r6, #0]
 8008532:	6825      	ldr	r5, [r4, #0]
 8008534:	f015 0506 	ands.w	r5, r5, #6
 8008538:	d106      	bne.n	8008548 <_printf_common+0x48>
 800853a:	f104 0a19 	add.w	sl, r4, #25
 800853e:	68e3      	ldr	r3, [r4, #12]
 8008540:	6832      	ldr	r2, [r6, #0]
 8008542:	1a9b      	subs	r3, r3, r2
 8008544:	42ab      	cmp	r3, r5
 8008546:	dc26      	bgt.n	8008596 <_printf_common+0x96>
 8008548:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800854c:	6822      	ldr	r2, [r4, #0]
 800854e:	3b00      	subs	r3, #0
 8008550:	bf18      	it	ne
 8008552:	2301      	movne	r3, #1
 8008554:	0692      	lsls	r2, r2, #26
 8008556:	d42b      	bmi.n	80085b0 <_printf_common+0xb0>
 8008558:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800855c:	4641      	mov	r1, r8
 800855e:	4638      	mov	r0, r7
 8008560:	47c8      	blx	r9
 8008562:	3001      	adds	r0, #1
 8008564:	d01e      	beq.n	80085a4 <_printf_common+0xa4>
 8008566:	6823      	ldr	r3, [r4, #0]
 8008568:	6922      	ldr	r2, [r4, #16]
 800856a:	f003 0306 	and.w	r3, r3, #6
 800856e:	2b04      	cmp	r3, #4
 8008570:	bf02      	ittt	eq
 8008572:	68e5      	ldreq	r5, [r4, #12]
 8008574:	6833      	ldreq	r3, [r6, #0]
 8008576:	1aed      	subeq	r5, r5, r3
 8008578:	68a3      	ldr	r3, [r4, #8]
 800857a:	bf0c      	ite	eq
 800857c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008580:	2500      	movne	r5, #0
 8008582:	4293      	cmp	r3, r2
 8008584:	bfc4      	itt	gt
 8008586:	1a9b      	subgt	r3, r3, r2
 8008588:	18ed      	addgt	r5, r5, r3
 800858a:	2600      	movs	r6, #0
 800858c:	341a      	adds	r4, #26
 800858e:	42b5      	cmp	r5, r6
 8008590:	d11a      	bne.n	80085c8 <_printf_common+0xc8>
 8008592:	2000      	movs	r0, #0
 8008594:	e008      	b.n	80085a8 <_printf_common+0xa8>
 8008596:	2301      	movs	r3, #1
 8008598:	4652      	mov	r2, sl
 800859a:	4641      	mov	r1, r8
 800859c:	4638      	mov	r0, r7
 800859e:	47c8      	blx	r9
 80085a0:	3001      	adds	r0, #1
 80085a2:	d103      	bne.n	80085ac <_printf_common+0xac>
 80085a4:	f04f 30ff 	mov.w	r0, #4294967295
 80085a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ac:	3501      	adds	r5, #1
 80085ae:	e7c6      	b.n	800853e <_printf_common+0x3e>
 80085b0:	18e1      	adds	r1, r4, r3
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	2030      	movs	r0, #48	@ 0x30
 80085b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80085ba:	4422      	add	r2, r4
 80085bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085c4:	3302      	adds	r3, #2
 80085c6:	e7c7      	b.n	8008558 <_printf_common+0x58>
 80085c8:	2301      	movs	r3, #1
 80085ca:	4622      	mov	r2, r4
 80085cc:	4641      	mov	r1, r8
 80085ce:	4638      	mov	r0, r7
 80085d0:	47c8      	blx	r9
 80085d2:	3001      	adds	r0, #1
 80085d4:	d0e6      	beq.n	80085a4 <_printf_common+0xa4>
 80085d6:	3601      	adds	r6, #1
 80085d8:	e7d9      	b.n	800858e <_printf_common+0x8e>
	...

080085dc <_printf_i>:
 80085dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085e0:	7e0f      	ldrb	r7, [r1, #24]
 80085e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085e4:	2f78      	cmp	r7, #120	@ 0x78
 80085e6:	4691      	mov	r9, r2
 80085e8:	4680      	mov	r8, r0
 80085ea:	460c      	mov	r4, r1
 80085ec:	469a      	mov	sl, r3
 80085ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085f2:	d807      	bhi.n	8008604 <_printf_i+0x28>
 80085f4:	2f62      	cmp	r7, #98	@ 0x62
 80085f6:	d80a      	bhi.n	800860e <_printf_i+0x32>
 80085f8:	2f00      	cmp	r7, #0
 80085fa:	f000 80d2 	beq.w	80087a2 <_printf_i+0x1c6>
 80085fe:	2f58      	cmp	r7, #88	@ 0x58
 8008600:	f000 80b9 	beq.w	8008776 <_printf_i+0x19a>
 8008604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008608:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800860c:	e03a      	b.n	8008684 <_printf_i+0xa8>
 800860e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008612:	2b15      	cmp	r3, #21
 8008614:	d8f6      	bhi.n	8008604 <_printf_i+0x28>
 8008616:	a101      	add	r1, pc, #4	@ (adr r1, 800861c <_printf_i+0x40>)
 8008618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800861c:	08008675 	.word	0x08008675
 8008620:	08008689 	.word	0x08008689
 8008624:	08008605 	.word	0x08008605
 8008628:	08008605 	.word	0x08008605
 800862c:	08008605 	.word	0x08008605
 8008630:	08008605 	.word	0x08008605
 8008634:	08008689 	.word	0x08008689
 8008638:	08008605 	.word	0x08008605
 800863c:	08008605 	.word	0x08008605
 8008640:	08008605 	.word	0x08008605
 8008644:	08008605 	.word	0x08008605
 8008648:	08008789 	.word	0x08008789
 800864c:	080086b3 	.word	0x080086b3
 8008650:	08008743 	.word	0x08008743
 8008654:	08008605 	.word	0x08008605
 8008658:	08008605 	.word	0x08008605
 800865c:	080087ab 	.word	0x080087ab
 8008660:	08008605 	.word	0x08008605
 8008664:	080086b3 	.word	0x080086b3
 8008668:	08008605 	.word	0x08008605
 800866c:	08008605 	.word	0x08008605
 8008670:	0800874b 	.word	0x0800874b
 8008674:	6833      	ldr	r3, [r6, #0]
 8008676:	1d1a      	adds	r2, r3, #4
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6032      	str	r2, [r6, #0]
 800867c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008680:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008684:	2301      	movs	r3, #1
 8008686:	e09d      	b.n	80087c4 <_printf_i+0x1e8>
 8008688:	6833      	ldr	r3, [r6, #0]
 800868a:	6820      	ldr	r0, [r4, #0]
 800868c:	1d19      	adds	r1, r3, #4
 800868e:	6031      	str	r1, [r6, #0]
 8008690:	0606      	lsls	r6, r0, #24
 8008692:	d501      	bpl.n	8008698 <_printf_i+0xbc>
 8008694:	681d      	ldr	r5, [r3, #0]
 8008696:	e003      	b.n	80086a0 <_printf_i+0xc4>
 8008698:	0645      	lsls	r5, r0, #25
 800869a:	d5fb      	bpl.n	8008694 <_printf_i+0xb8>
 800869c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80086a0:	2d00      	cmp	r5, #0
 80086a2:	da03      	bge.n	80086ac <_printf_i+0xd0>
 80086a4:	232d      	movs	r3, #45	@ 0x2d
 80086a6:	426d      	negs	r5, r5
 80086a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086ac:	4859      	ldr	r0, [pc, #356]	@ (8008814 <_printf_i+0x238>)
 80086ae:	230a      	movs	r3, #10
 80086b0:	e011      	b.n	80086d6 <_printf_i+0xfa>
 80086b2:	6821      	ldr	r1, [r4, #0]
 80086b4:	6833      	ldr	r3, [r6, #0]
 80086b6:	0608      	lsls	r0, r1, #24
 80086b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80086bc:	d402      	bmi.n	80086c4 <_printf_i+0xe8>
 80086be:	0649      	lsls	r1, r1, #25
 80086c0:	bf48      	it	mi
 80086c2:	b2ad      	uxthmi	r5, r5
 80086c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80086c6:	4853      	ldr	r0, [pc, #332]	@ (8008814 <_printf_i+0x238>)
 80086c8:	6033      	str	r3, [r6, #0]
 80086ca:	bf14      	ite	ne
 80086cc:	230a      	movne	r3, #10
 80086ce:	2308      	moveq	r3, #8
 80086d0:	2100      	movs	r1, #0
 80086d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086d6:	6866      	ldr	r6, [r4, #4]
 80086d8:	60a6      	str	r6, [r4, #8]
 80086da:	2e00      	cmp	r6, #0
 80086dc:	bfa2      	ittt	ge
 80086de:	6821      	ldrge	r1, [r4, #0]
 80086e0:	f021 0104 	bicge.w	r1, r1, #4
 80086e4:	6021      	strge	r1, [r4, #0]
 80086e6:	b90d      	cbnz	r5, 80086ec <_printf_i+0x110>
 80086e8:	2e00      	cmp	r6, #0
 80086ea:	d04b      	beq.n	8008784 <_printf_i+0x1a8>
 80086ec:	4616      	mov	r6, r2
 80086ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80086f2:	fb03 5711 	mls	r7, r3, r1, r5
 80086f6:	5dc7      	ldrb	r7, [r0, r7]
 80086f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086fc:	462f      	mov	r7, r5
 80086fe:	42bb      	cmp	r3, r7
 8008700:	460d      	mov	r5, r1
 8008702:	d9f4      	bls.n	80086ee <_printf_i+0x112>
 8008704:	2b08      	cmp	r3, #8
 8008706:	d10b      	bne.n	8008720 <_printf_i+0x144>
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	07df      	lsls	r7, r3, #31
 800870c:	d508      	bpl.n	8008720 <_printf_i+0x144>
 800870e:	6923      	ldr	r3, [r4, #16]
 8008710:	6861      	ldr	r1, [r4, #4]
 8008712:	4299      	cmp	r1, r3
 8008714:	bfde      	ittt	le
 8008716:	2330      	movle	r3, #48	@ 0x30
 8008718:	f806 3c01 	strble.w	r3, [r6, #-1]
 800871c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008720:	1b92      	subs	r2, r2, r6
 8008722:	6122      	str	r2, [r4, #16]
 8008724:	f8cd a000 	str.w	sl, [sp]
 8008728:	464b      	mov	r3, r9
 800872a:	aa03      	add	r2, sp, #12
 800872c:	4621      	mov	r1, r4
 800872e:	4640      	mov	r0, r8
 8008730:	f7ff fee6 	bl	8008500 <_printf_common>
 8008734:	3001      	adds	r0, #1
 8008736:	d14a      	bne.n	80087ce <_printf_i+0x1f2>
 8008738:	f04f 30ff 	mov.w	r0, #4294967295
 800873c:	b004      	add	sp, #16
 800873e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	f043 0320 	orr.w	r3, r3, #32
 8008748:	6023      	str	r3, [r4, #0]
 800874a:	4833      	ldr	r0, [pc, #204]	@ (8008818 <_printf_i+0x23c>)
 800874c:	2778      	movs	r7, #120	@ 0x78
 800874e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	6831      	ldr	r1, [r6, #0]
 8008756:	061f      	lsls	r7, r3, #24
 8008758:	f851 5b04 	ldr.w	r5, [r1], #4
 800875c:	d402      	bmi.n	8008764 <_printf_i+0x188>
 800875e:	065f      	lsls	r7, r3, #25
 8008760:	bf48      	it	mi
 8008762:	b2ad      	uxthmi	r5, r5
 8008764:	6031      	str	r1, [r6, #0]
 8008766:	07d9      	lsls	r1, r3, #31
 8008768:	bf44      	itt	mi
 800876a:	f043 0320 	orrmi.w	r3, r3, #32
 800876e:	6023      	strmi	r3, [r4, #0]
 8008770:	b11d      	cbz	r5, 800877a <_printf_i+0x19e>
 8008772:	2310      	movs	r3, #16
 8008774:	e7ac      	b.n	80086d0 <_printf_i+0xf4>
 8008776:	4827      	ldr	r0, [pc, #156]	@ (8008814 <_printf_i+0x238>)
 8008778:	e7e9      	b.n	800874e <_printf_i+0x172>
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	f023 0320 	bic.w	r3, r3, #32
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	e7f6      	b.n	8008772 <_printf_i+0x196>
 8008784:	4616      	mov	r6, r2
 8008786:	e7bd      	b.n	8008704 <_printf_i+0x128>
 8008788:	6833      	ldr	r3, [r6, #0]
 800878a:	6825      	ldr	r5, [r4, #0]
 800878c:	6961      	ldr	r1, [r4, #20]
 800878e:	1d18      	adds	r0, r3, #4
 8008790:	6030      	str	r0, [r6, #0]
 8008792:	062e      	lsls	r6, r5, #24
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	d501      	bpl.n	800879c <_printf_i+0x1c0>
 8008798:	6019      	str	r1, [r3, #0]
 800879a:	e002      	b.n	80087a2 <_printf_i+0x1c6>
 800879c:	0668      	lsls	r0, r5, #25
 800879e:	d5fb      	bpl.n	8008798 <_printf_i+0x1bc>
 80087a0:	8019      	strh	r1, [r3, #0]
 80087a2:	2300      	movs	r3, #0
 80087a4:	6123      	str	r3, [r4, #16]
 80087a6:	4616      	mov	r6, r2
 80087a8:	e7bc      	b.n	8008724 <_printf_i+0x148>
 80087aa:	6833      	ldr	r3, [r6, #0]
 80087ac:	1d1a      	adds	r2, r3, #4
 80087ae:	6032      	str	r2, [r6, #0]
 80087b0:	681e      	ldr	r6, [r3, #0]
 80087b2:	6862      	ldr	r2, [r4, #4]
 80087b4:	2100      	movs	r1, #0
 80087b6:	4630      	mov	r0, r6
 80087b8:	f7f7 fd32 	bl	8000220 <memchr>
 80087bc:	b108      	cbz	r0, 80087c2 <_printf_i+0x1e6>
 80087be:	1b80      	subs	r0, r0, r6
 80087c0:	6060      	str	r0, [r4, #4]
 80087c2:	6863      	ldr	r3, [r4, #4]
 80087c4:	6123      	str	r3, [r4, #16]
 80087c6:	2300      	movs	r3, #0
 80087c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087cc:	e7aa      	b.n	8008724 <_printf_i+0x148>
 80087ce:	6923      	ldr	r3, [r4, #16]
 80087d0:	4632      	mov	r2, r6
 80087d2:	4649      	mov	r1, r9
 80087d4:	4640      	mov	r0, r8
 80087d6:	47d0      	blx	sl
 80087d8:	3001      	adds	r0, #1
 80087da:	d0ad      	beq.n	8008738 <_printf_i+0x15c>
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	079b      	lsls	r3, r3, #30
 80087e0:	d413      	bmi.n	800880a <_printf_i+0x22e>
 80087e2:	68e0      	ldr	r0, [r4, #12]
 80087e4:	9b03      	ldr	r3, [sp, #12]
 80087e6:	4298      	cmp	r0, r3
 80087e8:	bfb8      	it	lt
 80087ea:	4618      	movlt	r0, r3
 80087ec:	e7a6      	b.n	800873c <_printf_i+0x160>
 80087ee:	2301      	movs	r3, #1
 80087f0:	4632      	mov	r2, r6
 80087f2:	4649      	mov	r1, r9
 80087f4:	4640      	mov	r0, r8
 80087f6:	47d0      	blx	sl
 80087f8:	3001      	adds	r0, #1
 80087fa:	d09d      	beq.n	8008738 <_printf_i+0x15c>
 80087fc:	3501      	adds	r5, #1
 80087fe:	68e3      	ldr	r3, [r4, #12]
 8008800:	9903      	ldr	r1, [sp, #12]
 8008802:	1a5b      	subs	r3, r3, r1
 8008804:	42ab      	cmp	r3, r5
 8008806:	dcf2      	bgt.n	80087ee <_printf_i+0x212>
 8008808:	e7eb      	b.n	80087e2 <_printf_i+0x206>
 800880a:	2500      	movs	r5, #0
 800880c:	f104 0619 	add.w	r6, r4, #25
 8008810:	e7f5      	b.n	80087fe <_printf_i+0x222>
 8008812:	bf00      	nop
 8008814:	0800a8e2 	.word	0x0800a8e2
 8008818:	0800a8f3 	.word	0x0800a8f3

0800881c <std>:
 800881c:	2300      	movs	r3, #0
 800881e:	b510      	push	{r4, lr}
 8008820:	4604      	mov	r4, r0
 8008822:	e9c0 3300 	strd	r3, r3, [r0]
 8008826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800882a:	6083      	str	r3, [r0, #8]
 800882c:	8181      	strh	r1, [r0, #12]
 800882e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008830:	81c2      	strh	r2, [r0, #14]
 8008832:	6183      	str	r3, [r0, #24]
 8008834:	4619      	mov	r1, r3
 8008836:	2208      	movs	r2, #8
 8008838:	305c      	adds	r0, #92	@ 0x5c
 800883a:	f000 f8f4 	bl	8008a26 <memset>
 800883e:	4b0d      	ldr	r3, [pc, #52]	@ (8008874 <std+0x58>)
 8008840:	6263      	str	r3, [r4, #36]	@ 0x24
 8008842:	4b0d      	ldr	r3, [pc, #52]	@ (8008878 <std+0x5c>)
 8008844:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008846:	4b0d      	ldr	r3, [pc, #52]	@ (800887c <std+0x60>)
 8008848:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800884a:	4b0d      	ldr	r3, [pc, #52]	@ (8008880 <std+0x64>)
 800884c:	6323      	str	r3, [r4, #48]	@ 0x30
 800884e:	4b0d      	ldr	r3, [pc, #52]	@ (8008884 <std+0x68>)
 8008850:	6224      	str	r4, [r4, #32]
 8008852:	429c      	cmp	r4, r3
 8008854:	d006      	beq.n	8008864 <std+0x48>
 8008856:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800885a:	4294      	cmp	r4, r2
 800885c:	d002      	beq.n	8008864 <std+0x48>
 800885e:	33d0      	adds	r3, #208	@ 0xd0
 8008860:	429c      	cmp	r4, r3
 8008862:	d105      	bne.n	8008870 <std+0x54>
 8008864:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800886c:	f000 b958 	b.w	8008b20 <__retarget_lock_init_recursive>
 8008870:	bd10      	pop	{r4, pc}
 8008872:	bf00      	nop
 8008874:	080089a1 	.word	0x080089a1
 8008878:	080089c3 	.word	0x080089c3
 800887c:	080089fb 	.word	0x080089fb
 8008880:	08008a1f 	.word	0x08008a1f
 8008884:	20000630 	.word	0x20000630

08008888 <stdio_exit_handler>:
 8008888:	4a02      	ldr	r2, [pc, #8]	@ (8008894 <stdio_exit_handler+0xc>)
 800888a:	4903      	ldr	r1, [pc, #12]	@ (8008898 <stdio_exit_handler+0x10>)
 800888c:	4803      	ldr	r0, [pc, #12]	@ (800889c <stdio_exit_handler+0x14>)
 800888e:	f000 b869 	b.w	8008964 <_fwalk_sglue>
 8008892:	bf00      	nop
 8008894:	20000008 	.word	0x20000008
 8008898:	0800a1ed 	.word	0x0800a1ed
 800889c:	20000018 	.word	0x20000018

080088a0 <cleanup_stdio>:
 80088a0:	6841      	ldr	r1, [r0, #4]
 80088a2:	4b0c      	ldr	r3, [pc, #48]	@ (80088d4 <cleanup_stdio+0x34>)
 80088a4:	4299      	cmp	r1, r3
 80088a6:	b510      	push	{r4, lr}
 80088a8:	4604      	mov	r4, r0
 80088aa:	d001      	beq.n	80088b0 <cleanup_stdio+0x10>
 80088ac:	f001 fc9e 	bl	800a1ec <_fflush_r>
 80088b0:	68a1      	ldr	r1, [r4, #8]
 80088b2:	4b09      	ldr	r3, [pc, #36]	@ (80088d8 <cleanup_stdio+0x38>)
 80088b4:	4299      	cmp	r1, r3
 80088b6:	d002      	beq.n	80088be <cleanup_stdio+0x1e>
 80088b8:	4620      	mov	r0, r4
 80088ba:	f001 fc97 	bl	800a1ec <_fflush_r>
 80088be:	68e1      	ldr	r1, [r4, #12]
 80088c0:	4b06      	ldr	r3, [pc, #24]	@ (80088dc <cleanup_stdio+0x3c>)
 80088c2:	4299      	cmp	r1, r3
 80088c4:	d004      	beq.n	80088d0 <cleanup_stdio+0x30>
 80088c6:	4620      	mov	r0, r4
 80088c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088cc:	f001 bc8e 	b.w	800a1ec <_fflush_r>
 80088d0:	bd10      	pop	{r4, pc}
 80088d2:	bf00      	nop
 80088d4:	20000630 	.word	0x20000630
 80088d8:	20000698 	.word	0x20000698
 80088dc:	20000700 	.word	0x20000700

080088e0 <global_stdio_init.part.0>:
 80088e0:	b510      	push	{r4, lr}
 80088e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008910 <global_stdio_init.part.0+0x30>)
 80088e4:	4c0b      	ldr	r4, [pc, #44]	@ (8008914 <global_stdio_init.part.0+0x34>)
 80088e6:	4a0c      	ldr	r2, [pc, #48]	@ (8008918 <global_stdio_init.part.0+0x38>)
 80088e8:	601a      	str	r2, [r3, #0]
 80088ea:	4620      	mov	r0, r4
 80088ec:	2200      	movs	r2, #0
 80088ee:	2104      	movs	r1, #4
 80088f0:	f7ff ff94 	bl	800881c <std>
 80088f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80088f8:	2201      	movs	r2, #1
 80088fa:	2109      	movs	r1, #9
 80088fc:	f7ff ff8e 	bl	800881c <std>
 8008900:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008904:	2202      	movs	r2, #2
 8008906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800890a:	2112      	movs	r1, #18
 800890c:	f7ff bf86 	b.w	800881c <std>
 8008910:	20000768 	.word	0x20000768
 8008914:	20000630 	.word	0x20000630
 8008918:	08008889 	.word	0x08008889

0800891c <__sfp_lock_acquire>:
 800891c:	4801      	ldr	r0, [pc, #4]	@ (8008924 <__sfp_lock_acquire+0x8>)
 800891e:	f000 b900 	b.w	8008b22 <__retarget_lock_acquire_recursive>
 8008922:	bf00      	nop
 8008924:	20000771 	.word	0x20000771

08008928 <__sfp_lock_release>:
 8008928:	4801      	ldr	r0, [pc, #4]	@ (8008930 <__sfp_lock_release+0x8>)
 800892a:	f000 b8fb 	b.w	8008b24 <__retarget_lock_release_recursive>
 800892e:	bf00      	nop
 8008930:	20000771 	.word	0x20000771

08008934 <__sinit>:
 8008934:	b510      	push	{r4, lr}
 8008936:	4604      	mov	r4, r0
 8008938:	f7ff fff0 	bl	800891c <__sfp_lock_acquire>
 800893c:	6a23      	ldr	r3, [r4, #32]
 800893e:	b11b      	cbz	r3, 8008948 <__sinit+0x14>
 8008940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008944:	f7ff bff0 	b.w	8008928 <__sfp_lock_release>
 8008948:	4b04      	ldr	r3, [pc, #16]	@ (800895c <__sinit+0x28>)
 800894a:	6223      	str	r3, [r4, #32]
 800894c:	4b04      	ldr	r3, [pc, #16]	@ (8008960 <__sinit+0x2c>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1f5      	bne.n	8008940 <__sinit+0xc>
 8008954:	f7ff ffc4 	bl	80088e0 <global_stdio_init.part.0>
 8008958:	e7f2      	b.n	8008940 <__sinit+0xc>
 800895a:	bf00      	nop
 800895c:	080088a1 	.word	0x080088a1
 8008960:	20000768 	.word	0x20000768

08008964 <_fwalk_sglue>:
 8008964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008968:	4607      	mov	r7, r0
 800896a:	4688      	mov	r8, r1
 800896c:	4614      	mov	r4, r2
 800896e:	2600      	movs	r6, #0
 8008970:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008974:	f1b9 0901 	subs.w	r9, r9, #1
 8008978:	d505      	bpl.n	8008986 <_fwalk_sglue+0x22>
 800897a:	6824      	ldr	r4, [r4, #0]
 800897c:	2c00      	cmp	r4, #0
 800897e:	d1f7      	bne.n	8008970 <_fwalk_sglue+0xc>
 8008980:	4630      	mov	r0, r6
 8008982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008986:	89ab      	ldrh	r3, [r5, #12]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d907      	bls.n	800899c <_fwalk_sglue+0x38>
 800898c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008990:	3301      	adds	r3, #1
 8008992:	d003      	beq.n	800899c <_fwalk_sglue+0x38>
 8008994:	4629      	mov	r1, r5
 8008996:	4638      	mov	r0, r7
 8008998:	47c0      	blx	r8
 800899a:	4306      	orrs	r6, r0
 800899c:	3568      	adds	r5, #104	@ 0x68
 800899e:	e7e9      	b.n	8008974 <_fwalk_sglue+0x10>

080089a0 <__sread>:
 80089a0:	b510      	push	{r4, lr}
 80089a2:	460c      	mov	r4, r1
 80089a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a8:	f000 f86c 	bl	8008a84 <_read_r>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	bfab      	itete	ge
 80089b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80089b2:	89a3      	ldrhlt	r3, [r4, #12]
 80089b4:	181b      	addge	r3, r3, r0
 80089b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80089ba:	bfac      	ite	ge
 80089bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80089be:	81a3      	strhlt	r3, [r4, #12]
 80089c0:	bd10      	pop	{r4, pc}

080089c2 <__swrite>:
 80089c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c6:	461f      	mov	r7, r3
 80089c8:	898b      	ldrh	r3, [r1, #12]
 80089ca:	05db      	lsls	r3, r3, #23
 80089cc:	4605      	mov	r5, r0
 80089ce:	460c      	mov	r4, r1
 80089d0:	4616      	mov	r6, r2
 80089d2:	d505      	bpl.n	80089e0 <__swrite+0x1e>
 80089d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d8:	2302      	movs	r3, #2
 80089da:	2200      	movs	r2, #0
 80089dc:	f000 f840 	bl	8008a60 <_lseek_r>
 80089e0:	89a3      	ldrh	r3, [r4, #12]
 80089e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089ea:	81a3      	strh	r3, [r4, #12]
 80089ec:	4632      	mov	r2, r6
 80089ee:	463b      	mov	r3, r7
 80089f0:	4628      	mov	r0, r5
 80089f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089f6:	f000 b857 	b.w	8008aa8 <_write_r>

080089fa <__sseek>:
 80089fa:	b510      	push	{r4, lr}
 80089fc:	460c      	mov	r4, r1
 80089fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a02:	f000 f82d 	bl	8008a60 <_lseek_r>
 8008a06:	1c43      	adds	r3, r0, #1
 8008a08:	89a3      	ldrh	r3, [r4, #12]
 8008a0a:	bf15      	itete	ne
 8008a0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008a0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008a12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008a16:	81a3      	strheq	r3, [r4, #12]
 8008a18:	bf18      	it	ne
 8008a1a:	81a3      	strhne	r3, [r4, #12]
 8008a1c:	bd10      	pop	{r4, pc}

08008a1e <__sclose>:
 8008a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a22:	f000 b80d 	b.w	8008a40 <_close_r>

08008a26 <memset>:
 8008a26:	4402      	add	r2, r0
 8008a28:	4603      	mov	r3, r0
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d100      	bne.n	8008a30 <memset+0xa>
 8008a2e:	4770      	bx	lr
 8008a30:	f803 1b01 	strb.w	r1, [r3], #1
 8008a34:	e7f9      	b.n	8008a2a <memset+0x4>
	...

08008a38 <_localeconv_r>:
 8008a38:	4800      	ldr	r0, [pc, #0]	@ (8008a3c <_localeconv_r+0x4>)
 8008a3a:	4770      	bx	lr
 8008a3c:	20000154 	.word	0x20000154

08008a40 <_close_r>:
 8008a40:	b538      	push	{r3, r4, r5, lr}
 8008a42:	4d06      	ldr	r5, [pc, #24]	@ (8008a5c <_close_r+0x1c>)
 8008a44:	2300      	movs	r3, #0
 8008a46:	4604      	mov	r4, r0
 8008a48:	4608      	mov	r0, r1
 8008a4a:	602b      	str	r3, [r5, #0]
 8008a4c:	f7f9 fd60 	bl	8002510 <_close>
 8008a50:	1c43      	adds	r3, r0, #1
 8008a52:	d102      	bne.n	8008a5a <_close_r+0x1a>
 8008a54:	682b      	ldr	r3, [r5, #0]
 8008a56:	b103      	cbz	r3, 8008a5a <_close_r+0x1a>
 8008a58:	6023      	str	r3, [r4, #0]
 8008a5a:	bd38      	pop	{r3, r4, r5, pc}
 8008a5c:	2000076c 	.word	0x2000076c

08008a60 <_lseek_r>:
 8008a60:	b538      	push	{r3, r4, r5, lr}
 8008a62:	4d07      	ldr	r5, [pc, #28]	@ (8008a80 <_lseek_r+0x20>)
 8008a64:	4604      	mov	r4, r0
 8008a66:	4608      	mov	r0, r1
 8008a68:	4611      	mov	r1, r2
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	602a      	str	r2, [r5, #0]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	f7f9 fd75 	bl	800255e <_lseek>
 8008a74:	1c43      	adds	r3, r0, #1
 8008a76:	d102      	bne.n	8008a7e <_lseek_r+0x1e>
 8008a78:	682b      	ldr	r3, [r5, #0]
 8008a7a:	b103      	cbz	r3, 8008a7e <_lseek_r+0x1e>
 8008a7c:	6023      	str	r3, [r4, #0]
 8008a7e:	bd38      	pop	{r3, r4, r5, pc}
 8008a80:	2000076c 	.word	0x2000076c

08008a84 <_read_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	4d07      	ldr	r5, [pc, #28]	@ (8008aa4 <_read_r+0x20>)
 8008a88:	4604      	mov	r4, r0
 8008a8a:	4608      	mov	r0, r1
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	2200      	movs	r2, #0
 8008a90:	602a      	str	r2, [r5, #0]
 8008a92:	461a      	mov	r2, r3
 8008a94:	f7f9 fd03 	bl	800249e <_read>
 8008a98:	1c43      	adds	r3, r0, #1
 8008a9a:	d102      	bne.n	8008aa2 <_read_r+0x1e>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	b103      	cbz	r3, 8008aa2 <_read_r+0x1e>
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	bd38      	pop	{r3, r4, r5, pc}
 8008aa4:	2000076c 	.word	0x2000076c

08008aa8 <_write_r>:
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	4d07      	ldr	r5, [pc, #28]	@ (8008ac8 <_write_r+0x20>)
 8008aac:	4604      	mov	r4, r0
 8008aae:	4608      	mov	r0, r1
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	602a      	str	r2, [r5, #0]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	f7f9 fd0e 	bl	80024d8 <_write>
 8008abc:	1c43      	adds	r3, r0, #1
 8008abe:	d102      	bne.n	8008ac6 <_write_r+0x1e>
 8008ac0:	682b      	ldr	r3, [r5, #0]
 8008ac2:	b103      	cbz	r3, 8008ac6 <_write_r+0x1e>
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	bd38      	pop	{r3, r4, r5, pc}
 8008ac8:	2000076c 	.word	0x2000076c

08008acc <__errno>:
 8008acc:	4b01      	ldr	r3, [pc, #4]	@ (8008ad4 <__errno+0x8>)
 8008ace:	6818      	ldr	r0, [r3, #0]
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	20000014 	.word	0x20000014

08008ad8 <__libc_init_array>:
 8008ad8:	b570      	push	{r4, r5, r6, lr}
 8008ada:	4d0d      	ldr	r5, [pc, #52]	@ (8008b10 <__libc_init_array+0x38>)
 8008adc:	4c0d      	ldr	r4, [pc, #52]	@ (8008b14 <__libc_init_array+0x3c>)
 8008ade:	1b64      	subs	r4, r4, r5
 8008ae0:	10a4      	asrs	r4, r4, #2
 8008ae2:	2600      	movs	r6, #0
 8008ae4:	42a6      	cmp	r6, r4
 8008ae6:	d109      	bne.n	8008afc <__libc_init_array+0x24>
 8008ae8:	4d0b      	ldr	r5, [pc, #44]	@ (8008b18 <__libc_init_array+0x40>)
 8008aea:	4c0c      	ldr	r4, [pc, #48]	@ (8008b1c <__libc_init_array+0x44>)
 8008aec:	f001 febe 	bl	800a86c <_init>
 8008af0:	1b64      	subs	r4, r4, r5
 8008af2:	10a4      	asrs	r4, r4, #2
 8008af4:	2600      	movs	r6, #0
 8008af6:	42a6      	cmp	r6, r4
 8008af8:	d105      	bne.n	8008b06 <__libc_init_array+0x2e>
 8008afa:	bd70      	pop	{r4, r5, r6, pc}
 8008afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b00:	4798      	blx	r3
 8008b02:	3601      	adds	r6, #1
 8008b04:	e7ee      	b.n	8008ae4 <__libc_init_array+0xc>
 8008b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b0a:	4798      	blx	r3
 8008b0c:	3601      	adds	r6, #1
 8008b0e:	e7f2      	b.n	8008af6 <__libc_init_array+0x1e>
 8008b10:	0800ac48 	.word	0x0800ac48
 8008b14:	0800ac48 	.word	0x0800ac48
 8008b18:	0800ac48 	.word	0x0800ac48
 8008b1c:	0800ac4c 	.word	0x0800ac4c

08008b20 <__retarget_lock_init_recursive>:
 8008b20:	4770      	bx	lr

08008b22 <__retarget_lock_acquire_recursive>:
 8008b22:	4770      	bx	lr

08008b24 <__retarget_lock_release_recursive>:
 8008b24:	4770      	bx	lr

08008b26 <memcpy>:
 8008b26:	440a      	add	r2, r1
 8008b28:	4291      	cmp	r1, r2
 8008b2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b2e:	d100      	bne.n	8008b32 <memcpy+0xc>
 8008b30:	4770      	bx	lr
 8008b32:	b510      	push	{r4, lr}
 8008b34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b3c:	4291      	cmp	r1, r2
 8008b3e:	d1f9      	bne.n	8008b34 <memcpy+0xe>
 8008b40:	bd10      	pop	{r4, pc}

08008b42 <quorem>:
 8008b42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b46:	6903      	ldr	r3, [r0, #16]
 8008b48:	690c      	ldr	r4, [r1, #16]
 8008b4a:	42a3      	cmp	r3, r4
 8008b4c:	4607      	mov	r7, r0
 8008b4e:	db7e      	blt.n	8008c4e <quorem+0x10c>
 8008b50:	3c01      	subs	r4, #1
 8008b52:	f101 0814 	add.w	r8, r1, #20
 8008b56:	00a3      	lsls	r3, r4, #2
 8008b58:	f100 0514 	add.w	r5, r0, #20
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b62:	9301      	str	r3, [sp, #4]
 8008b64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b74:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b78:	d32e      	bcc.n	8008bd8 <quorem+0x96>
 8008b7a:	f04f 0a00 	mov.w	sl, #0
 8008b7e:	46c4      	mov	ip, r8
 8008b80:	46ae      	mov	lr, r5
 8008b82:	46d3      	mov	fp, sl
 8008b84:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008b88:	b298      	uxth	r0, r3
 8008b8a:	fb06 a000 	mla	r0, r6, r0, sl
 8008b8e:	0c02      	lsrs	r2, r0, #16
 8008b90:	0c1b      	lsrs	r3, r3, #16
 8008b92:	fb06 2303 	mla	r3, r6, r3, r2
 8008b96:	f8de 2000 	ldr.w	r2, [lr]
 8008b9a:	b280      	uxth	r0, r0
 8008b9c:	b292      	uxth	r2, r2
 8008b9e:	1a12      	subs	r2, r2, r0
 8008ba0:	445a      	add	r2, fp
 8008ba2:	f8de 0000 	ldr.w	r0, [lr]
 8008ba6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008bb0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008bb4:	b292      	uxth	r2, r2
 8008bb6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008bba:	45e1      	cmp	r9, ip
 8008bbc:	f84e 2b04 	str.w	r2, [lr], #4
 8008bc0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008bc4:	d2de      	bcs.n	8008b84 <quorem+0x42>
 8008bc6:	9b00      	ldr	r3, [sp, #0]
 8008bc8:	58eb      	ldr	r3, [r5, r3]
 8008bca:	b92b      	cbnz	r3, 8008bd8 <quorem+0x96>
 8008bcc:	9b01      	ldr	r3, [sp, #4]
 8008bce:	3b04      	subs	r3, #4
 8008bd0:	429d      	cmp	r5, r3
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	d32f      	bcc.n	8008c36 <quorem+0xf4>
 8008bd6:	613c      	str	r4, [r7, #16]
 8008bd8:	4638      	mov	r0, r7
 8008bda:	f001 f97b 	bl	8009ed4 <__mcmp>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	db25      	blt.n	8008c2e <quorem+0xec>
 8008be2:	4629      	mov	r1, r5
 8008be4:	2000      	movs	r0, #0
 8008be6:	f858 2b04 	ldr.w	r2, [r8], #4
 8008bea:	f8d1 c000 	ldr.w	ip, [r1]
 8008bee:	fa1f fe82 	uxth.w	lr, r2
 8008bf2:	fa1f f38c 	uxth.w	r3, ip
 8008bf6:	eba3 030e 	sub.w	r3, r3, lr
 8008bfa:	4403      	add	r3, r0
 8008bfc:	0c12      	lsrs	r2, r2, #16
 8008bfe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008c02:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c0c:	45c1      	cmp	r9, r8
 8008c0e:	f841 3b04 	str.w	r3, [r1], #4
 8008c12:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008c16:	d2e6      	bcs.n	8008be6 <quorem+0xa4>
 8008c18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c20:	b922      	cbnz	r2, 8008c2c <quorem+0xea>
 8008c22:	3b04      	subs	r3, #4
 8008c24:	429d      	cmp	r5, r3
 8008c26:	461a      	mov	r2, r3
 8008c28:	d30b      	bcc.n	8008c42 <quorem+0x100>
 8008c2a:	613c      	str	r4, [r7, #16]
 8008c2c:	3601      	adds	r6, #1
 8008c2e:	4630      	mov	r0, r6
 8008c30:	b003      	add	sp, #12
 8008c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c36:	6812      	ldr	r2, [r2, #0]
 8008c38:	3b04      	subs	r3, #4
 8008c3a:	2a00      	cmp	r2, #0
 8008c3c:	d1cb      	bne.n	8008bd6 <quorem+0x94>
 8008c3e:	3c01      	subs	r4, #1
 8008c40:	e7c6      	b.n	8008bd0 <quorem+0x8e>
 8008c42:	6812      	ldr	r2, [r2, #0]
 8008c44:	3b04      	subs	r3, #4
 8008c46:	2a00      	cmp	r2, #0
 8008c48:	d1ef      	bne.n	8008c2a <quorem+0xe8>
 8008c4a:	3c01      	subs	r4, #1
 8008c4c:	e7ea      	b.n	8008c24 <quorem+0xe2>
 8008c4e:	2000      	movs	r0, #0
 8008c50:	e7ee      	b.n	8008c30 <quorem+0xee>
 8008c52:	0000      	movs	r0, r0
 8008c54:	0000      	movs	r0, r0
	...

08008c58 <_dtoa_r>:
 8008c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c5c:	69c7      	ldr	r7, [r0, #28]
 8008c5e:	b099      	sub	sp, #100	@ 0x64
 8008c60:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008c64:	ec55 4b10 	vmov	r4, r5, d0
 8008c68:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008c6a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008c6c:	4683      	mov	fp, r0
 8008c6e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008c72:	b97f      	cbnz	r7, 8008c94 <_dtoa_r+0x3c>
 8008c74:	2010      	movs	r0, #16
 8008c76:	f000 fdfd 	bl	8009874 <malloc>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008c80:	b920      	cbnz	r0, 8008c8c <_dtoa_r+0x34>
 8008c82:	4ba7      	ldr	r3, [pc, #668]	@ (8008f20 <_dtoa_r+0x2c8>)
 8008c84:	21ef      	movs	r1, #239	@ 0xef
 8008c86:	48a7      	ldr	r0, [pc, #668]	@ (8008f24 <_dtoa_r+0x2cc>)
 8008c88:	f001 fae8 	bl	800a25c <__assert_func>
 8008c8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008c90:	6007      	str	r7, [r0, #0]
 8008c92:	60c7      	str	r7, [r0, #12]
 8008c94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008c98:	6819      	ldr	r1, [r3, #0]
 8008c9a:	b159      	cbz	r1, 8008cb4 <_dtoa_r+0x5c>
 8008c9c:	685a      	ldr	r2, [r3, #4]
 8008c9e:	604a      	str	r2, [r1, #4]
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	4093      	lsls	r3, r2
 8008ca4:	608b      	str	r3, [r1, #8]
 8008ca6:	4658      	mov	r0, fp
 8008ca8:	f000 feda 	bl	8009a60 <_Bfree>
 8008cac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	1e2b      	subs	r3, r5, #0
 8008cb6:	bfb9      	ittee	lt
 8008cb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008cbc:	9303      	strlt	r3, [sp, #12]
 8008cbe:	2300      	movge	r3, #0
 8008cc0:	6033      	strge	r3, [r6, #0]
 8008cc2:	9f03      	ldr	r7, [sp, #12]
 8008cc4:	4b98      	ldr	r3, [pc, #608]	@ (8008f28 <_dtoa_r+0x2d0>)
 8008cc6:	bfbc      	itt	lt
 8008cc8:	2201      	movlt	r2, #1
 8008cca:	6032      	strlt	r2, [r6, #0]
 8008ccc:	43bb      	bics	r3, r7
 8008cce:	d112      	bne.n	8008cf6 <_dtoa_r+0x9e>
 8008cd0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008cd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008cdc:	4323      	orrs	r3, r4
 8008cde:	f000 854d 	beq.w	800977c <_dtoa_r+0xb24>
 8008ce2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008ce4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008f3c <_dtoa_r+0x2e4>
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f000 854f 	beq.w	800978c <_dtoa_r+0xb34>
 8008cee:	f10a 0303 	add.w	r3, sl, #3
 8008cf2:	f000 bd49 	b.w	8009788 <_dtoa_r+0xb30>
 8008cf6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	ec51 0b17 	vmov	r0, r1, d7
 8008d00:	2300      	movs	r3, #0
 8008d02:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008d06:	f7f7 ff07 	bl	8000b18 <__aeabi_dcmpeq>
 8008d0a:	4680      	mov	r8, r0
 8008d0c:	b158      	cbz	r0, 8008d26 <_dtoa_r+0xce>
 8008d0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008d10:	2301      	movs	r3, #1
 8008d12:	6013      	str	r3, [r2, #0]
 8008d14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d16:	b113      	cbz	r3, 8008d1e <_dtoa_r+0xc6>
 8008d18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008d1a:	4b84      	ldr	r3, [pc, #528]	@ (8008f2c <_dtoa_r+0x2d4>)
 8008d1c:	6013      	str	r3, [r2, #0]
 8008d1e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008f40 <_dtoa_r+0x2e8>
 8008d22:	f000 bd33 	b.w	800978c <_dtoa_r+0xb34>
 8008d26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008d2a:	aa16      	add	r2, sp, #88	@ 0x58
 8008d2c:	a917      	add	r1, sp, #92	@ 0x5c
 8008d2e:	4658      	mov	r0, fp
 8008d30:	f001 f980 	bl	800a034 <__d2b>
 8008d34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008d38:	4681      	mov	r9, r0
 8008d3a:	2e00      	cmp	r6, #0
 8008d3c:	d077      	beq.n	8008e2e <_dtoa_r+0x1d6>
 8008d3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d40:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008d50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008d54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008d58:	4619      	mov	r1, r3
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	4b74      	ldr	r3, [pc, #464]	@ (8008f30 <_dtoa_r+0x2d8>)
 8008d5e:	f7f7 fabb 	bl	80002d8 <__aeabi_dsub>
 8008d62:	a369      	add	r3, pc, #420	@ (adr r3, 8008f08 <_dtoa_r+0x2b0>)
 8008d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d68:	f7f7 fc6e 	bl	8000648 <__aeabi_dmul>
 8008d6c:	a368      	add	r3, pc, #416	@ (adr r3, 8008f10 <_dtoa_r+0x2b8>)
 8008d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d72:	f7f7 fab3 	bl	80002dc <__adddf3>
 8008d76:	4604      	mov	r4, r0
 8008d78:	4630      	mov	r0, r6
 8008d7a:	460d      	mov	r5, r1
 8008d7c:	f7f7 fbfa 	bl	8000574 <__aeabi_i2d>
 8008d80:	a365      	add	r3, pc, #404	@ (adr r3, 8008f18 <_dtoa_r+0x2c0>)
 8008d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d86:	f7f7 fc5f 	bl	8000648 <__aeabi_dmul>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	4620      	mov	r0, r4
 8008d90:	4629      	mov	r1, r5
 8008d92:	f7f7 faa3 	bl	80002dc <__adddf3>
 8008d96:	4604      	mov	r4, r0
 8008d98:	460d      	mov	r5, r1
 8008d9a:	f7f7 ff05 	bl	8000ba8 <__aeabi_d2iz>
 8008d9e:	2200      	movs	r2, #0
 8008da0:	4607      	mov	r7, r0
 8008da2:	2300      	movs	r3, #0
 8008da4:	4620      	mov	r0, r4
 8008da6:	4629      	mov	r1, r5
 8008da8:	f7f7 fec0 	bl	8000b2c <__aeabi_dcmplt>
 8008dac:	b140      	cbz	r0, 8008dc0 <_dtoa_r+0x168>
 8008dae:	4638      	mov	r0, r7
 8008db0:	f7f7 fbe0 	bl	8000574 <__aeabi_i2d>
 8008db4:	4622      	mov	r2, r4
 8008db6:	462b      	mov	r3, r5
 8008db8:	f7f7 feae 	bl	8000b18 <__aeabi_dcmpeq>
 8008dbc:	b900      	cbnz	r0, 8008dc0 <_dtoa_r+0x168>
 8008dbe:	3f01      	subs	r7, #1
 8008dc0:	2f16      	cmp	r7, #22
 8008dc2:	d851      	bhi.n	8008e68 <_dtoa_r+0x210>
 8008dc4:	4b5b      	ldr	r3, [pc, #364]	@ (8008f34 <_dtoa_r+0x2dc>)
 8008dc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008dd2:	f7f7 feab 	bl	8000b2c <__aeabi_dcmplt>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d048      	beq.n	8008e6c <_dtoa_r+0x214>
 8008dda:	3f01      	subs	r7, #1
 8008ddc:	2300      	movs	r3, #0
 8008dde:	9312      	str	r3, [sp, #72]	@ 0x48
 8008de0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008de2:	1b9b      	subs	r3, r3, r6
 8008de4:	1e5a      	subs	r2, r3, #1
 8008de6:	bf44      	itt	mi
 8008de8:	f1c3 0801 	rsbmi	r8, r3, #1
 8008dec:	2300      	movmi	r3, #0
 8008dee:	9208      	str	r2, [sp, #32]
 8008df0:	bf54      	ite	pl
 8008df2:	f04f 0800 	movpl.w	r8, #0
 8008df6:	9308      	strmi	r3, [sp, #32]
 8008df8:	2f00      	cmp	r7, #0
 8008dfa:	db39      	blt.n	8008e70 <_dtoa_r+0x218>
 8008dfc:	9b08      	ldr	r3, [sp, #32]
 8008dfe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008e00:	443b      	add	r3, r7
 8008e02:	9308      	str	r3, [sp, #32]
 8008e04:	2300      	movs	r3, #0
 8008e06:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e0a:	2b09      	cmp	r3, #9
 8008e0c:	d864      	bhi.n	8008ed8 <_dtoa_r+0x280>
 8008e0e:	2b05      	cmp	r3, #5
 8008e10:	bfc4      	itt	gt
 8008e12:	3b04      	subgt	r3, #4
 8008e14:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e18:	f1a3 0302 	sub.w	r3, r3, #2
 8008e1c:	bfcc      	ite	gt
 8008e1e:	2400      	movgt	r4, #0
 8008e20:	2401      	movle	r4, #1
 8008e22:	2b03      	cmp	r3, #3
 8008e24:	d863      	bhi.n	8008eee <_dtoa_r+0x296>
 8008e26:	e8df f003 	tbb	[pc, r3]
 8008e2a:	372a      	.short	0x372a
 8008e2c:	5535      	.short	0x5535
 8008e2e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008e32:	441e      	add	r6, r3
 8008e34:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008e38:	2b20      	cmp	r3, #32
 8008e3a:	bfc1      	itttt	gt
 8008e3c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008e40:	409f      	lslgt	r7, r3
 8008e42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008e46:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008e4a:	bfd6      	itet	le
 8008e4c:	f1c3 0320 	rsble	r3, r3, #32
 8008e50:	ea47 0003 	orrgt.w	r0, r7, r3
 8008e54:	fa04 f003 	lslle.w	r0, r4, r3
 8008e58:	f7f7 fb7c 	bl	8000554 <__aeabi_ui2d>
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008e62:	3e01      	subs	r6, #1
 8008e64:	9214      	str	r2, [sp, #80]	@ 0x50
 8008e66:	e777      	b.n	8008d58 <_dtoa_r+0x100>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e7b8      	b.n	8008dde <_dtoa_r+0x186>
 8008e6c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008e6e:	e7b7      	b.n	8008de0 <_dtoa_r+0x188>
 8008e70:	427b      	negs	r3, r7
 8008e72:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e74:	2300      	movs	r3, #0
 8008e76:	eba8 0807 	sub.w	r8, r8, r7
 8008e7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e7c:	e7c4      	b.n	8008e08 <_dtoa_r+0x1b0>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	dc35      	bgt.n	8008ef4 <_dtoa_r+0x29c>
 8008e88:	2301      	movs	r3, #1
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	9307      	str	r3, [sp, #28]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e92:	e00b      	b.n	8008eac <_dtoa_r+0x254>
 8008e94:	2301      	movs	r3, #1
 8008e96:	e7f3      	b.n	8008e80 <_dtoa_r+0x228>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e9e:	18fb      	adds	r3, r7, r3
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	9307      	str	r3, [sp, #28]
 8008ea8:	bfb8      	it	lt
 8008eaa:	2301      	movlt	r3, #1
 8008eac:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	2204      	movs	r2, #4
 8008eb4:	f102 0514 	add.w	r5, r2, #20
 8008eb8:	429d      	cmp	r5, r3
 8008eba:	d91f      	bls.n	8008efc <_dtoa_r+0x2a4>
 8008ebc:	6041      	str	r1, [r0, #4]
 8008ebe:	4658      	mov	r0, fp
 8008ec0:	f000 fd8e 	bl	80099e0 <_Balloc>
 8008ec4:	4682      	mov	sl, r0
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d13c      	bne.n	8008f44 <_dtoa_r+0x2ec>
 8008eca:	4b1b      	ldr	r3, [pc, #108]	@ (8008f38 <_dtoa_r+0x2e0>)
 8008ecc:	4602      	mov	r2, r0
 8008ece:	f240 11af 	movw	r1, #431	@ 0x1af
 8008ed2:	e6d8      	b.n	8008c86 <_dtoa_r+0x2e>
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e7e0      	b.n	8008e9a <_dtoa_r+0x242>
 8008ed8:	2401      	movs	r4, #1
 8008eda:	2300      	movs	r3, #0
 8008edc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ede:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee4:	9300      	str	r3, [sp, #0]
 8008ee6:	9307      	str	r3, [sp, #28]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	2312      	movs	r3, #18
 8008eec:	e7d0      	b.n	8008e90 <_dtoa_r+0x238>
 8008eee:	2301      	movs	r3, #1
 8008ef0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ef2:	e7f5      	b.n	8008ee0 <_dtoa_r+0x288>
 8008ef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	9307      	str	r3, [sp, #28]
 8008efa:	e7d7      	b.n	8008eac <_dtoa_r+0x254>
 8008efc:	3101      	adds	r1, #1
 8008efe:	0052      	lsls	r2, r2, #1
 8008f00:	e7d8      	b.n	8008eb4 <_dtoa_r+0x25c>
 8008f02:	bf00      	nop
 8008f04:	f3af 8000 	nop.w
 8008f08:	636f4361 	.word	0x636f4361
 8008f0c:	3fd287a7 	.word	0x3fd287a7
 8008f10:	8b60c8b3 	.word	0x8b60c8b3
 8008f14:	3fc68a28 	.word	0x3fc68a28
 8008f18:	509f79fb 	.word	0x509f79fb
 8008f1c:	3fd34413 	.word	0x3fd34413
 8008f20:	0800a911 	.word	0x0800a911
 8008f24:	0800a928 	.word	0x0800a928
 8008f28:	7ff00000 	.word	0x7ff00000
 8008f2c:	0800a8e1 	.word	0x0800a8e1
 8008f30:	3ff80000 	.word	0x3ff80000
 8008f34:	0800aa20 	.word	0x0800aa20
 8008f38:	0800a980 	.word	0x0800a980
 8008f3c:	0800a90d 	.word	0x0800a90d
 8008f40:	0800a8e0 	.word	0x0800a8e0
 8008f44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008f48:	6018      	str	r0, [r3, #0]
 8008f4a:	9b07      	ldr	r3, [sp, #28]
 8008f4c:	2b0e      	cmp	r3, #14
 8008f4e:	f200 80a4 	bhi.w	800909a <_dtoa_r+0x442>
 8008f52:	2c00      	cmp	r4, #0
 8008f54:	f000 80a1 	beq.w	800909a <_dtoa_r+0x442>
 8008f58:	2f00      	cmp	r7, #0
 8008f5a:	dd33      	ble.n	8008fc4 <_dtoa_r+0x36c>
 8008f5c:	4bad      	ldr	r3, [pc, #692]	@ (8009214 <_dtoa_r+0x5bc>)
 8008f5e:	f007 020f 	and.w	r2, r7, #15
 8008f62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f66:	ed93 7b00 	vldr	d7, [r3]
 8008f6a:	05f8      	lsls	r0, r7, #23
 8008f6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008f70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008f74:	d516      	bpl.n	8008fa4 <_dtoa_r+0x34c>
 8008f76:	4ba8      	ldr	r3, [pc, #672]	@ (8009218 <_dtoa_r+0x5c0>)
 8008f78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f80:	f7f7 fc8c 	bl	800089c <__aeabi_ddiv>
 8008f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f88:	f004 040f 	and.w	r4, r4, #15
 8008f8c:	2603      	movs	r6, #3
 8008f8e:	4da2      	ldr	r5, [pc, #648]	@ (8009218 <_dtoa_r+0x5c0>)
 8008f90:	b954      	cbnz	r4, 8008fa8 <_dtoa_r+0x350>
 8008f92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f9a:	f7f7 fc7f 	bl	800089c <__aeabi_ddiv>
 8008f9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fa2:	e028      	b.n	8008ff6 <_dtoa_r+0x39e>
 8008fa4:	2602      	movs	r6, #2
 8008fa6:	e7f2      	b.n	8008f8e <_dtoa_r+0x336>
 8008fa8:	07e1      	lsls	r1, r4, #31
 8008faa:	d508      	bpl.n	8008fbe <_dtoa_r+0x366>
 8008fac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008fb4:	f7f7 fb48 	bl	8000648 <__aeabi_dmul>
 8008fb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fbc:	3601      	adds	r6, #1
 8008fbe:	1064      	asrs	r4, r4, #1
 8008fc0:	3508      	adds	r5, #8
 8008fc2:	e7e5      	b.n	8008f90 <_dtoa_r+0x338>
 8008fc4:	f000 80d2 	beq.w	800916c <_dtoa_r+0x514>
 8008fc8:	427c      	negs	r4, r7
 8008fca:	4b92      	ldr	r3, [pc, #584]	@ (8009214 <_dtoa_r+0x5bc>)
 8008fcc:	4d92      	ldr	r5, [pc, #584]	@ (8009218 <_dtoa_r+0x5c0>)
 8008fce:	f004 020f 	and.w	r2, r4, #15
 8008fd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008fde:	f7f7 fb33 	bl	8000648 <__aeabi_dmul>
 8008fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fe6:	1124      	asrs	r4, r4, #4
 8008fe8:	2300      	movs	r3, #0
 8008fea:	2602      	movs	r6, #2
 8008fec:	2c00      	cmp	r4, #0
 8008fee:	f040 80b2 	bne.w	8009156 <_dtoa_r+0x4fe>
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1d3      	bne.n	8008f9e <_dtoa_r+0x346>
 8008ff6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008ff8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 80b7 	beq.w	8009170 <_dtoa_r+0x518>
 8009002:	4b86      	ldr	r3, [pc, #536]	@ (800921c <_dtoa_r+0x5c4>)
 8009004:	2200      	movs	r2, #0
 8009006:	4620      	mov	r0, r4
 8009008:	4629      	mov	r1, r5
 800900a:	f7f7 fd8f 	bl	8000b2c <__aeabi_dcmplt>
 800900e:	2800      	cmp	r0, #0
 8009010:	f000 80ae 	beq.w	8009170 <_dtoa_r+0x518>
 8009014:	9b07      	ldr	r3, [sp, #28]
 8009016:	2b00      	cmp	r3, #0
 8009018:	f000 80aa 	beq.w	8009170 <_dtoa_r+0x518>
 800901c:	9b00      	ldr	r3, [sp, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	dd37      	ble.n	8009092 <_dtoa_r+0x43a>
 8009022:	1e7b      	subs	r3, r7, #1
 8009024:	9304      	str	r3, [sp, #16]
 8009026:	4620      	mov	r0, r4
 8009028:	4b7d      	ldr	r3, [pc, #500]	@ (8009220 <_dtoa_r+0x5c8>)
 800902a:	2200      	movs	r2, #0
 800902c:	4629      	mov	r1, r5
 800902e:	f7f7 fb0b 	bl	8000648 <__aeabi_dmul>
 8009032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009036:	9c00      	ldr	r4, [sp, #0]
 8009038:	3601      	adds	r6, #1
 800903a:	4630      	mov	r0, r6
 800903c:	f7f7 fa9a 	bl	8000574 <__aeabi_i2d>
 8009040:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009044:	f7f7 fb00 	bl	8000648 <__aeabi_dmul>
 8009048:	4b76      	ldr	r3, [pc, #472]	@ (8009224 <_dtoa_r+0x5cc>)
 800904a:	2200      	movs	r2, #0
 800904c:	f7f7 f946 	bl	80002dc <__adddf3>
 8009050:	4605      	mov	r5, r0
 8009052:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009056:	2c00      	cmp	r4, #0
 8009058:	f040 808d 	bne.w	8009176 <_dtoa_r+0x51e>
 800905c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009060:	4b71      	ldr	r3, [pc, #452]	@ (8009228 <_dtoa_r+0x5d0>)
 8009062:	2200      	movs	r2, #0
 8009064:	f7f7 f938 	bl	80002d8 <__aeabi_dsub>
 8009068:	4602      	mov	r2, r0
 800906a:	460b      	mov	r3, r1
 800906c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009070:	462a      	mov	r2, r5
 8009072:	4633      	mov	r3, r6
 8009074:	f7f7 fd78 	bl	8000b68 <__aeabi_dcmpgt>
 8009078:	2800      	cmp	r0, #0
 800907a:	f040 828b 	bne.w	8009594 <_dtoa_r+0x93c>
 800907e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009082:	462a      	mov	r2, r5
 8009084:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009088:	f7f7 fd50 	bl	8000b2c <__aeabi_dcmplt>
 800908c:	2800      	cmp	r0, #0
 800908e:	f040 8128 	bne.w	80092e2 <_dtoa_r+0x68a>
 8009092:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009096:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800909a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800909c:	2b00      	cmp	r3, #0
 800909e:	f2c0 815a 	blt.w	8009356 <_dtoa_r+0x6fe>
 80090a2:	2f0e      	cmp	r7, #14
 80090a4:	f300 8157 	bgt.w	8009356 <_dtoa_r+0x6fe>
 80090a8:	4b5a      	ldr	r3, [pc, #360]	@ (8009214 <_dtoa_r+0x5bc>)
 80090aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80090ae:	ed93 7b00 	vldr	d7, [r3]
 80090b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	ed8d 7b00 	vstr	d7, [sp]
 80090ba:	da03      	bge.n	80090c4 <_dtoa_r+0x46c>
 80090bc:	9b07      	ldr	r3, [sp, #28]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f340 8101 	ble.w	80092c6 <_dtoa_r+0x66e>
 80090c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80090c8:	4656      	mov	r6, sl
 80090ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090ce:	4620      	mov	r0, r4
 80090d0:	4629      	mov	r1, r5
 80090d2:	f7f7 fbe3 	bl	800089c <__aeabi_ddiv>
 80090d6:	f7f7 fd67 	bl	8000ba8 <__aeabi_d2iz>
 80090da:	4680      	mov	r8, r0
 80090dc:	f7f7 fa4a 	bl	8000574 <__aeabi_i2d>
 80090e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090e4:	f7f7 fab0 	bl	8000648 <__aeabi_dmul>
 80090e8:	4602      	mov	r2, r0
 80090ea:	460b      	mov	r3, r1
 80090ec:	4620      	mov	r0, r4
 80090ee:	4629      	mov	r1, r5
 80090f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80090f4:	f7f7 f8f0 	bl	80002d8 <__aeabi_dsub>
 80090f8:	f806 4b01 	strb.w	r4, [r6], #1
 80090fc:	9d07      	ldr	r5, [sp, #28]
 80090fe:	eba6 040a 	sub.w	r4, r6, sl
 8009102:	42a5      	cmp	r5, r4
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	f040 8117 	bne.w	800933a <_dtoa_r+0x6e2>
 800910c:	f7f7 f8e6 	bl	80002dc <__adddf3>
 8009110:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009114:	4604      	mov	r4, r0
 8009116:	460d      	mov	r5, r1
 8009118:	f7f7 fd26 	bl	8000b68 <__aeabi_dcmpgt>
 800911c:	2800      	cmp	r0, #0
 800911e:	f040 80f9 	bne.w	8009314 <_dtoa_r+0x6bc>
 8009122:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009126:	4620      	mov	r0, r4
 8009128:	4629      	mov	r1, r5
 800912a:	f7f7 fcf5 	bl	8000b18 <__aeabi_dcmpeq>
 800912e:	b118      	cbz	r0, 8009138 <_dtoa_r+0x4e0>
 8009130:	f018 0f01 	tst.w	r8, #1
 8009134:	f040 80ee 	bne.w	8009314 <_dtoa_r+0x6bc>
 8009138:	4649      	mov	r1, r9
 800913a:	4658      	mov	r0, fp
 800913c:	f000 fc90 	bl	8009a60 <_Bfree>
 8009140:	2300      	movs	r3, #0
 8009142:	7033      	strb	r3, [r6, #0]
 8009144:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009146:	3701      	adds	r7, #1
 8009148:	601f      	str	r7, [r3, #0]
 800914a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800914c:	2b00      	cmp	r3, #0
 800914e:	f000 831d 	beq.w	800978c <_dtoa_r+0xb34>
 8009152:	601e      	str	r6, [r3, #0]
 8009154:	e31a      	b.n	800978c <_dtoa_r+0xb34>
 8009156:	07e2      	lsls	r2, r4, #31
 8009158:	d505      	bpl.n	8009166 <_dtoa_r+0x50e>
 800915a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800915e:	f7f7 fa73 	bl	8000648 <__aeabi_dmul>
 8009162:	3601      	adds	r6, #1
 8009164:	2301      	movs	r3, #1
 8009166:	1064      	asrs	r4, r4, #1
 8009168:	3508      	adds	r5, #8
 800916a:	e73f      	b.n	8008fec <_dtoa_r+0x394>
 800916c:	2602      	movs	r6, #2
 800916e:	e742      	b.n	8008ff6 <_dtoa_r+0x39e>
 8009170:	9c07      	ldr	r4, [sp, #28]
 8009172:	9704      	str	r7, [sp, #16]
 8009174:	e761      	b.n	800903a <_dtoa_r+0x3e2>
 8009176:	4b27      	ldr	r3, [pc, #156]	@ (8009214 <_dtoa_r+0x5bc>)
 8009178:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800917a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800917e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009182:	4454      	add	r4, sl
 8009184:	2900      	cmp	r1, #0
 8009186:	d053      	beq.n	8009230 <_dtoa_r+0x5d8>
 8009188:	4928      	ldr	r1, [pc, #160]	@ (800922c <_dtoa_r+0x5d4>)
 800918a:	2000      	movs	r0, #0
 800918c:	f7f7 fb86 	bl	800089c <__aeabi_ddiv>
 8009190:	4633      	mov	r3, r6
 8009192:	462a      	mov	r2, r5
 8009194:	f7f7 f8a0 	bl	80002d8 <__aeabi_dsub>
 8009198:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800919c:	4656      	mov	r6, sl
 800919e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091a2:	f7f7 fd01 	bl	8000ba8 <__aeabi_d2iz>
 80091a6:	4605      	mov	r5, r0
 80091a8:	f7f7 f9e4 	bl	8000574 <__aeabi_i2d>
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091b4:	f7f7 f890 	bl	80002d8 <__aeabi_dsub>
 80091b8:	3530      	adds	r5, #48	@ 0x30
 80091ba:	4602      	mov	r2, r0
 80091bc:	460b      	mov	r3, r1
 80091be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091c2:	f806 5b01 	strb.w	r5, [r6], #1
 80091c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80091ca:	f7f7 fcaf 	bl	8000b2c <__aeabi_dcmplt>
 80091ce:	2800      	cmp	r0, #0
 80091d0:	d171      	bne.n	80092b6 <_dtoa_r+0x65e>
 80091d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091d6:	4911      	ldr	r1, [pc, #68]	@ (800921c <_dtoa_r+0x5c4>)
 80091d8:	2000      	movs	r0, #0
 80091da:	f7f7 f87d 	bl	80002d8 <__aeabi_dsub>
 80091de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80091e2:	f7f7 fca3 	bl	8000b2c <__aeabi_dcmplt>
 80091e6:	2800      	cmp	r0, #0
 80091e8:	f040 8095 	bne.w	8009316 <_dtoa_r+0x6be>
 80091ec:	42a6      	cmp	r6, r4
 80091ee:	f43f af50 	beq.w	8009092 <_dtoa_r+0x43a>
 80091f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80091f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009220 <_dtoa_r+0x5c8>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	f7f7 fa25 	bl	8000648 <__aeabi_dmul>
 80091fe:	4b08      	ldr	r3, [pc, #32]	@ (8009220 <_dtoa_r+0x5c8>)
 8009200:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009204:	2200      	movs	r2, #0
 8009206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800920a:	f7f7 fa1d 	bl	8000648 <__aeabi_dmul>
 800920e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009212:	e7c4      	b.n	800919e <_dtoa_r+0x546>
 8009214:	0800aa20 	.word	0x0800aa20
 8009218:	0800a9f8 	.word	0x0800a9f8
 800921c:	3ff00000 	.word	0x3ff00000
 8009220:	40240000 	.word	0x40240000
 8009224:	401c0000 	.word	0x401c0000
 8009228:	40140000 	.word	0x40140000
 800922c:	3fe00000 	.word	0x3fe00000
 8009230:	4631      	mov	r1, r6
 8009232:	4628      	mov	r0, r5
 8009234:	f7f7 fa08 	bl	8000648 <__aeabi_dmul>
 8009238:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800923c:	9415      	str	r4, [sp, #84]	@ 0x54
 800923e:	4656      	mov	r6, sl
 8009240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009244:	f7f7 fcb0 	bl	8000ba8 <__aeabi_d2iz>
 8009248:	4605      	mov	r5, r0
 800924a:	f7f7 f993 	bl	8000574 <__aeabi_i2d>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009256:	f7f7 f83f 	bl	80002d8 <__aeabi_dsub>
 800925a:	3530      	adds	r5, #48	@ 0x30
 800925c:	f806 5b01 	strb.w	r5, [r6], #1
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	42a6      	cmp	r6, r4
 8009266:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800926a:	f04f 0200 	mov.w	r2, #0
 800926e:	d124      	bne.n	80092ba <_dtoa_r+0x662>
 8009270:	4bac      	ldr	r3, [pc, #688]	@ (8009524 <_dtoa_r+0x8cc>)
 8009272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009276:	f7f7 f831 	bl	80002dc <__adddf3>
 800927a:	4602      	mov	r2, r0
 800927c:	460b      	mov	r3, r1
 800927e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009282:	f7f7 fc71 	bl	8000b68 <__aeabi_dcmpgt>
 8009286:	2800      	cmp	r0, #0
 8009288:	d145      	bne.n	8009316 <_dtoa_r+0x6be>
 800928a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800928e:	49a5      	ldr	r1, [pc, #660]	@ (8009524 <_dtoa_r+0x8cc>)
 8009290:	2000      	movs	r0, #0
 8009292:	f7f7 f821 	bl	80002d8 <__aeabi_dsub>
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800929e:	f7f7 fc45 	bl	8000b2c <__aeabi_dcmplt>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	f43f aef5 	beq.w	8009092 <_dtoa_r+0x43a>
 80092a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80092aa:	1e73      	subs	r3, r6, #1
 80092ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80092ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80092b2:	2b30      	cmp	r3, #48	@ 0x30
 80092b4:	d0f8      	beq.n	80092a8 <_dtoa_r+0x650>
 80092b6:	9f04      	ldr	r7, [sp, #16]
 80092b8:	e73e      	b.n	8009138 <_dtoa_r+0x4e0>
 80092ba:	4b9b      	ldr	r3, [pc, #620]	@ (8009528 <_dtoa_r+0x8d0>)
 80092bc:	f7f7 f9c4 	bl	8000648 <__aeabi_dmul>
 80092c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092c4:	e7bc      	b.n	8009240 <_dtoa_r+0x5e8>
 80092c6:	d10c      	bne.n	80092e2 <_dtoa_r+0x68a>
 80092c8:	4b98      	ldr	r3, [pc, #608]	@ (800952c <_dtoa_r+0x8d4>)
 80092ca:	2200      	movs	r2, #0
 80092cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092d0:	f7f7 f9ba 	bl	8000648 <__aeabi_dmul>
 80092d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092d8:	f7f7 fc3c 	bl	8000b54 <__aeabi_dcmpge>
 80092dc:	2800      	cmp	r0, #0
 80092de:	f000 8157 	beq.w	8009590 <_dtoa_r+0x938>
 80092e2:	2400      	movs	r4, #0
 80092e4:	4625      	mov	r5, r4
 80092e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092e8:	43db      	mvns	r3, r3
 80092ea:	9304      	str	r3, [sp, #16]
 80092ec:	4656      	mov	r6, sl
 80092ee:	2700      	movs	r7, #0
 80092f0:	4621      	mov	r1, r4
 80092f2:	4658      	mov	r0, fp
 80092f4:	f000 fbb4 	bl	8009a60 <_Bfree>
 80092f8:	2d00      	cmp	r5, #0
 80092fa:	d0dc      	beq.n	80092b6 <_dtoa_r+0x65e>
 80092fc:	b12f      	cbz	r7, 800930a <_dtoa_r+0x6b2>
 80092fe:	42af      	cmp	r7, r5
 8009300:	d003      	beq.n	800930a <_dtoa_r+0x6b2>
 8009302:	4639      	mov	r1, r7
 8009304:	4658      	mov	r0, fp
 8009306:	f000 fbab 	bl	8009a60 <_Bfree>
 800930a:	4629      	mov	r1, r5
 800930c:	4658      	mov	r0, fp
 800930e:	f000 fba7 	bl	8009a60 <_Bfree>
 8009312:	e7d0      	b.n	80092b6 <_dtoa_r+0x65e>
 8009314:	9704      	str	r7, [sp, #16]
 8009316:	4633      	mov	r3, r6
 8009318:	461e      	mov	r6, r3
 800931a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800931e:	2a39      	cmp	r2, #57	@ 0x39
 8009320:	d107      	bne.n	8009332 <_dtoa_r+0x6da>
 8009322:	459a      	cmp	sl, r3
 8009324:	d1f8      	bne.n	8009318 <_dtoa_r+0x6c0>
 8009326:	9a04      	ldr	r2, [sp, #16]
 8009328:	3201      	adds	r2, #1
 800932a:	9204      	str	r2, [sp, #16]
 800932c:	2230      	movs	r2, #48	@ 0x30
 800932e:	f88a 2000 	strb.w	r2, [sl]
 8009332:	781a      	ldrb	r2, [r3, #0]
 8009334:	3201      	adds	r2, #1
 8009336:	701a      	strb	r2, [r3, #0]
 8009338:	e7bd      	b.n	80092b6 <_dtoa_r+0x65e>
 800933a:	4b7b      	ldr	r3, [pc, #492]	@ (8009528 <_dtoa_r+0x8d0>)
 800933c:	2200      	movs	r2, #0
 800933e:	f7f7 f983 	bl	8000648 <__aeabi_dmul>
 8009342:	2200      	movs	r2, #0
 8009344:	2300      	movs	r3, #0
 8009346:	4604      	mov	r4, r0
 8009348:	460d      	mov	r5, r1
 800934a:	f7f7 fbe5 	bl	8000b18 <__aeabi_dcmpeq>
 800934e:	2800      	cmp	r0, #0
 8009350:	f43f aebb 	beq.w	80090ca <_dtoa_r+0x472>
 8009354:	e6f0      	b.n	8009138 <_dtoa_r+0x4e0>
 8009356:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009358:	2a00      	cmp	r2, #0
 800935a:	f000 80db 	beq.w	8009514 <_dtoa_r+0x8bc>
 800935e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009360:	2a01      	cmp	r2, #1
 8009362:	f300 80bf 	bgt.w	80094e4 <_dtoa_r+0x88c>
 8009366:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009368:	2a00      	cmp	r2, #0
 800936a:	f000 80b7 	beq.w	80094dc <_dtoa_r+0x884>
 800936e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009372:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009374:	4646      	mov	r6, r8
 8009376:	9a08      	ldr	r2, [sp, #32]
 8009378:	2101      	movs	r1, #1
 800937a:	441a      	add	r2, r3
 800937c:	4658      	mov	r0, fp
 800937e:	4498      	add	r8, r3
 8009380:	9208      	str	r2, [sp, #32]
 8009382:	f000 fc21 	bl	8009bc8 <__i2b>
 8009386:	4605      	mov	r5, r0
 8009388:	b15e      	cbz	r6, 80093a2 <_dtoa_r+0x74a>
 800938a:	9b08      	ldr	r3, [sp, #32]
 800938c:	2b00      	cmp	r3, #0
 800938e:	dd08      	ble.n	80093a2 <_dtoa_r+0x74a>
 8009390:	42b3      	cmp	r3, r6
 8009392:	9a08      	ldr	r2, [sp, #32]
 8009394:	bfa8      	it	ge
 8009396:	4633      	movge	r3, r6
 8009398:	eba8 0803 	sub.w	r8, r8, r3
 800939c:	1af6      	subs	r6, r6, r3
 800939e:	1ad3      	subs	r3, r2, r3
 80093a0:	9308      	str	r3, [sp, #32]
 80093a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093a4:	b1f3      	cbz	r3, 80093e4 <_dtoa_r+0x78c>
 80093a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f000 80b7 	beq.w	800951c <_dtoa_r+0x8c4>
 80093ae:	b18c      	cbz	r4, 80093d4 <_dtoa_r+0x77c>
 80093b0:	4629      	mov	r1, r5
 80093b2:	4622      	mov	r2, r4
 80093b4:	4658      	mov	r0, fp
 80093b6:	f000 fcc7 	bl	8009d48 <__pow5mult>
 80093ba:	464a      	mov	r2, r9
 80093bc:	4601      	mov	r1, r0
 80093be:	4605      	mov	r5, r0
 80093c0:	4658      	mov	r0, fp
 80093c2:	f000 fc17 	bl	8009bf4 <__multiply>
 80093c6:	4649      	mov	r1, r9
 80093c8:	9004      	str	r0, [sp, #16]
 80093ca:	4658      	mov	r0, fp
 80093cc:	f000 fb48 	bl	8009a60 <_Bfree>
 80093d0:	9b04      	ldr	r3, [sp, #16]
 80093d2:	4699      	mov	r9, r3
 80093d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093d6:	1b1a      	subs	r2, r3, r4
 80093d8:	d004      	beq.n	80093e4 <_dtoa_r+0x78c>
 80093da:	4649      	mov	r1, r9
 80093dc:	4658      	mov	r0, fp
 80093de:	f000 fcb3 	bl	8009d48 <__pow5mult>
 80093e2:	4681      	mov	r9, r0
 80093e4:	2101      	movs	r1, #1
 80093e6:	4658      	mov	r0, fp
 80093e8:	f000 fbee 	bl	8009bc8 <__i2b>
 80093ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093ee:	4604      	mov	r4, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f000 81cf 	beq.w	8009794 <_dtoa_r+0xb3c>
 80093f6:	461a      	mov	r2, r3
 80093f8:	4601      	mov	r1, r0
 80093fa:	4658      	mov	r0, fp
 80093fc:	f000 fca4 	bl	8009d48 <__pow5mult>
 8009400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009402:	2b01      	cmp	r3, #1
 8009404:	4604      	mov	r4, r0
 8009406:	f300 8095 	bgt.w	8009534 <_dtoa_r+0x8dc>
 800940a:	9b02      	ldr	r3, [sp, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	f040 8087 	bne.w	8009520 <_dtoa_r+0x8c8>
 8009412:	9b03      	ldr	r3, [sp, #12]
 8009414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009418:	2b00      	cmp	r3, #0
 800941a:	f040 8089 	bne.w	8009530 <_dtoa_r+0x8d8>
 800941e:	9b03      	ldr	r3, [sp, #12]
 8009420:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009424:	0d1b      	lsrs	r3, r3, #20
 8009426:	051b      	lsls	r3, r3, #20
 8009428:	b12b      	cbz	r3, 8009436 <_dtoa_r+0x7de>
 800942a:	9b08      	ldr	r3, [sp, #32]
 800942c:	3301      	adds	r3, #1
 800942e:	9308      	str	r3, [sp, #32]
 8009430:	f108 0801 	add.w	r8, r8, #1
 8009434:	2301      	movs	r3, #1
 8009436:	930a      	str	r3, [sp, #40]	@ 0x28
 8009438:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800943a:	2b00      	cmp	r3, #0
 800943c:	f000 81b0 	beq.w	80097a0 <_dtoa_r+0xb48>
 8009440:	6923      	ldr	r3, [r4, #16]
 8009442:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009446:	6918      	ldr	r0, [r3, #16]
 8009448:	f000 fb72 	bl	8009b30 <__hi0bits>
 800944c:	f1c0 0020 	rsb	r0, r0, #32
 8009450:	9b08      	ldr	r3, [sp, #32]
 8009452:	4418      	add	r0, r3
 8009454:	f010 001f 	ands.w	r0, r0, #31
 8009458:	d077      	beq.n	800954a <_dtoa_r+0x8f2>
 800945a:	f1c0 0320 	rsb	r3, r0, #32
 800945e:	2b04      	cmp	r3, #4
 8009460:	dd6b      	ble.n	800953a <_dtoa_r+0x8e2>
 8009462:	9b08      	ldr	r3, [sp, #32]
 8009464:	f1c0 001c 	rsb	r0, r0, #28
 8009468:	4403      	add	r3, r0
 800946a:	4480      	add	r8, r0
 800946c:	4406      	add	r6, r0
 800946e:	9308      	str	r3, [sp, #32]
 8009470:	f1b8 0f00 	cmp.w	r8, #0
 8009474:	dd05      	ble.n	8009482 <_dtoa_r+0x82a>
 8009476:	4649      	mov	r1, r9
 8009478:	4642      	mov	r2, r8
 800947a:	4658      	mov	r0, fp
 800947c:	f000 fcbe 	bl	8009dfc <__lshift>
 8009480:	4681      	mov	r9, r0
 8009482:	9b08      	ldr	r3, [sp, #32]
 8009484:	2b00      	cmp	r3, #0
 8009486:	dd05      	ble.n	8009494 <_dtoa_r+0x83c>
 8009488:	4621      	mov	r1, r4
 800948a:	461a      	mov	r2, r3
 800948c:	4658      	mov	r0, fp
 800948e:	f000 fcb5 	bl	8009dfc <__lshift>
 8009492:	4604      	mov	r4, r0
 8009494:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009496:	2b00      	cmp	r3, #0
 8009498:	d059      	beq.n	800954e <_dtoa_r+0x8f6>
 800949a:	4621      	mov	r1, r4
 800949c:	4648      	mov	r0, r9
 800949e:	f000 fd19 	bl	8009ed4 <__mcmp>
 80094a2:	2800      	cmp	r0, #0
 80094a4:	da53      	bge.n	800954e <_dtoa_r+0x8f6>
 80094a6:	1e7b      	subs	r3, r7, #1
 80094a8:	9304      	str	r3, [sp, #16]
 80094aa:	4649      	mov	r1, r9
 80094ac:	2300      	movs	r3, #0
 80094ae:	220a      	movs	r2, #10
 80094b0:	4658      	mov	r0, fp
 80094b2:	f000 faf7 	bl	8009aa4 <__multadd>
 80094b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094b8:	4681      	mov	r9, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f000 8172 	beq.w	80097a4 <_dtoa_r+0xb4c>
 80094c0:	2300      	movs	r3, #0
 80094c2:	4629      	mov	r1, r5
 80094c4:	220a      	movs	r2, #10
 80094c6:	4658      	mov	r0, fp
 80094c8:	f000 faec 	bl	8009aa4 <__multadd>
 80094cc:	9b00      	ldr	r3, [sp, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	4605      	mov	r5, r0
 80094d2:	dc67      	bgt.n	80095a4 <_dtoa_r+0x94c>
 80094d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	dc41      	bgt.n	800955e <_dtoa_r+0x906>
 80094da:	e063      	b.n	80095a4 <_dtoa_r+0x94c>
 80094dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80094de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80094e2:	e746      	b.n	8009372 <_dtoa_r+0x71a>
 80094e4:	9b07      	ldr	r3, [sp, #28]
 80094e6:	1e5c      	subs	r4, r3, #1
 80094e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094ea:	42a3      	cmp	r3, r4
 80094ec:	bfbf      	itttt	lt
 80094ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80094f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80094f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80094f4:	1ae3      	sublt	r3, r4, r3
 80094f6:	bfb4      	ite	lt
 80094f8:	18d2      	addlt	r2, r2, r3
 80094fa:	1b1c      	subge	r4, r3, r4
 80094fc:	9b07      	ldr	r3, [sp, #28]
 80094fe:	bfbc      	itt	lt
 8009500:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009502:	2400      	movlt	r4, #0
 8009504:	2b00      	cmp	r3, #0
 8009506:	bfb5      	itete	lt
 8009508:	eba8 0603 	sublt.w	r6, r8, r3
 800950c:	9b07      	ldrge	r3, [sp, #28]
 800950e:	2300      	movlt	r3, #0
 8009510:	4646      	movge	r6, r8
 8009512:	e730      	b.n	8009376 <_dtoa_r+0x71e>
 8009514:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009516:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009518:	4646      	mov	r6, r8
 800951a:	e735      	b.n	8009388 <_dtoa_r+0x730>
 800951c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800951e:	e75c      	b.n	80093da <_dtoa_r+0x782>
 8009520:	2300      	movs	r3, #0
 8009522:	e788      	b.n	8009436 <_dtoa_r+0x7de>
 8009524:	3fe00000 	.word	0x3fe00000
 8009528:	40240000 	.word	0x40240000
 800952c:	40140000 	.word	0x40140000
 8009530:	9b02      	ldr	r3, [sp, #8]
 8009532:	e780      	b.n	8009436 <_dtoa_r+0x7de>
 8009534:	2300      	movs	r3, #0
 8009536:	930a      	str	r3, [sp, #40]	@ 0x28
 8009538:	e782      	b.n	8009440 <_dtoa_r+0x7e8>
 800953a:	d099      	beq.n	8009470 <_dtoa_r+0x818>
 800953c:	9a08      	ldr	r2, [sp, #32]
 800953e:	331c      	adds	r3, #28
 8009540:	441a      	add	r2, r3
 8009542:	4498      	add	r8, r3
 8009544:	441e      	add	r6, r3
 8009546:	9208      	str	r2, [sp, #32]
 8009548:	e792      	b.n	8009470 <_dtoa_r+0x818>
 800954a:	4603      	mov	r3, r0
 800954c:	e7f6      	b.n	800953c <_dtoa_r+0x8e4>
 800954e:	9b07      	ldr	r3, [sp, #28]
 8009550:	9704      	str	r7, [sp, #16]
 8009552:	2b00      	cmp	r3, #0
 8009554:	dc20      	bgt.n	8009598 <_dtoa_r+0x940>
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800955a:	2b02      	cmp	r3, #2
 800955c:	dd1e      	ble.n	800959c <_dtoa_r+0x944>
 800955e:	9b00      	ldr	r3, [sp, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	f47f aec0 	bne.w	80092e6 <_dtoa_r+0x68e>
 8009566:	4621      	mov	r1, r4
 8009568:	2205      	movs	r2, #5
 800956a:	4658      	mov	r0, fp
 800956c:	f000 fa9a 	bl	8009aa4 <__multadd>
 8009570:	4601      	mov	r1, r0
 8009572:	4604      	mov	r4, r0
 8009574:	4648      	mov	r0, r9
 8009576:	f000 fcad 	bl	8009ed4 <__mcmp>
 800957a:	2800      	cmp	r0, #0
 800957c:	f77f aeb3 	ble.w	80092e6 <_dtoa_r+0x68e>
 8009580:	4656      	mov	r6, sl
 8009582:	2331      	movs	r3, #49	@ 0x31
 8009584:	f806 3b01 	strb.w	r3, [r6], #1
 8009588:	9b04      	ldr	r3, [sp, #16]
 800958a:	3301      	adds	r3, #1
 800958c:	9304      	str	r3, [sp, #16]
 800958e:	e6ae      	b.n	80092ee <_dtoa_r+0x696>
 8009590:	9c07      	ldr	r4, [sp, #28]
 8009592:	9704      	str	r7, [sp, #16]
 8009594:	4625      	mov	r5, r4
 8009596:	e7f3      	b.n	8009580 <_dtoa_r+0x928>
 8009598:	9b07      	ldr	r3, [sp, #28]
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800959e:	2b00      	cmp	r3, #0
 80095a0:	f000 8104 	beq.w	80097ac <_dtoa_r+0xb54>
 80095a4:	2e00      	cmp	r6, #0
 80095a6:	dd05      	ble.n	80095b4 <_dtoa_r+0x95c>
 80095a8:	4629      	mov	r1, r5
 80095aa:	4632      	mov	r2, r6
 80095ac:	4658      	mov	r0, fp
 80095ae:	f000 fc25 	bl	8009dfc <__lshift>
 80095b2:	4605      	mov	r5, r0
 80095b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d05a      	beq.n	8009670 <_dtoa_r+0xa18>
 80095ba:	6869      	ldr	r1, [r5, #4]
 80095bc:	4658      	mov	r0, fp
 80095be:	f000 fa0f 	bl	80099e0 <_Balloc>
 80095c2:	4606      	mov	r6, r0
 80095c4:	b928      	cbnz	r0, 80095d2 <_dtoa_r+0x97a>
 80095c6:	4b84      	ldr	r3, [pc, #528]	@ (80097d8 <_dtoa_r+0xb80>)
 80095c8:	4602      	mov	r2, r0
 80095ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80095ce:	f7ff bb5a 	b.w	8008c86 <_dtoa_r+0x2e>
 80095d2:	692a      	ldr	r2, [r5, #16]
 80095d4:	3202      	adds	r2, #2
 80095d6:	0092      	lsls	r2, r2, #2
 80095d8:	f105 010c 	add.w	r1, r5, #12
 80095dc:	300c      	adds	r0, #12
 80095de:	f7ff faa2 	bl	8008b26 <memcpy>
 80095e2:	2201      	movs	r2, #1
 80095e4:	4631      	mov	r1, r6
 80095e6:	4658      	mov	r0, fp
 80095e8:	f000 fc08 	bl	8009dfc <__lshift>
 80095ec:	f10a 0301 	add.w	r3, sl, #1
 80095f0:	9307      	str	r3, [sp, #28]
 80095f2:	9b00      	ldr	r3, [sp, #0]
 80095f4:	4453      	add	r3, sl
 80095f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095f8:	9b02      	ldr	r3, [sp, #8]
 80095fa:	f003 0301 	and.w	r3, r3, #1
 80095fe:	462f      	mov	r7, r5
 8009600:	930a      	str	r3, [sp, #40]	@ 0x28
 8009602:	4605      	mov	r5, r0
 8009604:	9b07      	ldr	r3, [sp, #28]
 8009606:	4621      	mov	r1, r4
 8009608:	3b01      	subs	r3, #1
 800960a:	4648      	mov	r0, r9
 800960c:	9300      	str	r3, [sp, #0]
 800960e:	f7ff fa98 	bl	8008b42 <quorem>
 8009612:	4639      	mov	r1, r7
 8009614:	9002      	str	r0, [sp, #8]
 8009616:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800961a:	4648      	mov	r0, r9
 800961c:	f000 fc5a 	bl	8009ed4 <__mcmp>
 8009620:	462a      	mov	r2, r5
 8009622:	9008      	str	r0, [sp, #32]
 8009624:	4621      	mov	r1, r4
 8009626:	4658      	mov	r0, fp
 8009628:	f000 fc70 	bl	8009f0c <__mdiff>
 800962c:	68c2      	ldr	r2, [r0, #12]
 800962e:	4606      	mov	r6, r0
 8009630:	bb02      	cbnz	r2, 8009674 <_dtoa_r+0xa1c>
 8009632:	4601      	mov	r1, r0
 8009634:	4648      	mov	r0, r9
 8009636:	f000 fc4d 	bl	8009ed4 <__mcmp>
 800963a:	4602      	mov	r2, r0
 800963c:	4631      	mov	r1, r6
 800963e:	4658      	mov	r0, fp
 8009640:	920e      	str	r2, [sp, #56]	@ 0x38
 8009642:	f000 fa0d 	bl	8009a60 <_Bfree>
 8009646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009648:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800964a:	9e07      	ldr	r6, [sp, #28]
 800964c:	ea43 0102 	orr.w	r1, r3, r2
 8009650:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009652:	4319      	orrs	r1, r3
 8009654:	d110      	bne.n	8009678 <_dtoa_r+0xa20>
 8009656:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800965a:	d029      	beq.n	80096b0 <_dtoa_r+0xa58>
 800965c:	9b08      	ldr	r3, [sp, #32]
 800965e:	2b00      	cmp	r3, #0
 8009660:	dd02      	ble.n	8009668 <_dtoa_r+0xa10>
 8009662:	9b02      	ldr	r3, [sp, #8]
 8009664:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009668:	9b00      	ldr	r3, [sp, #0]
 800966a:	f883 8000 	strb.w	r8, [r3]
 800966e:	e63f      	b.n	80092f0 <_dtoa_r+0x698>
 8009670:	4628      	mov	r0, r5
 8009672:	e7bb      	b.n	80095ec <_dtoa_r+0x994>
 8009674:	2201      	movs	r2, #1
 8009676:	e7e1      	b.n	800963c <_dtoa_r+0x9e4>
 8009678:	9b08      	ldr	r3, [sp, #32]
 800967a:	2b00      	cmp	r3, #0
 800967c:	db04      	blt.n	8009688 <_dtoa_r+0xa30>
 800967e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009680:	430b      	orrs	r3, r1
 8009682:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009684:	430b      	orrs	r3, r1
 8009686:	d120      	bne.n	80096ca <_dtoa_r+0xa72>
 8009688:	2a00      	cmp	r2, #0
 800968a:	dded      	ble.n	8009668 <_dtoa_r+0xa10>
 800968c:	4649      	mov	r1, r9
 800968e:	2201      	movs	r2, #1
 8009690:	4658      	mov	r0, fp
 8009692:	f000 fbb3 	bl	8009dfc <__lshift>
 8009696:	4621      	mov	r1, r4
 8009698:	4681      	mov	r9, r0
 800969a:	f000 fc1b 	bl	8009ed4 <__mcmp>
 800969e:	2800      	cmp	r0, #0
 80096a0:	dc03      	bgt.n	80096aa <_dtoa_r+0xa52>
 80096a2:	d1e1      	bne.n	8009668 <_dtoa_r+0xa10>
 80096a4:	f018 0f01 	tst.w	r8, #1
 80096a8:	d0de      	beq.n	8009668 <_dtoa_r+0xa10>
 80096aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80096ae:	d1d8      	bne.n	8009662 <_dtoa_r+0xa0a>
 80096b0:	9a00      	ldr	r2, [sp, #0]
 80096b2:	2339      	movs	r3, #57	@ 0x39
 80096b4:	7013      	strb	r3, [r2, #0]
 80096b6:	4633      	mov	r3, r6
 80096b8:	461e      	mov	r6, r3
 80096ba:	3b01      	subs	r3, #1
 80096bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80096c0:	2a39      	cmp	r2, #57	@ 0x39
 80096c2:	d052      	beq.n	800976a <_dtoa_r+0xb12>
 80096c4:	3201      	adds	r2, #1
 80096c6:	701a      	strb	r2, [r3, #0]
 80096c8:	e612      	b.n	80092f0 <_dtoa_r+0x698>
 80096ca:	2a00      	cmp	r2, #0
 80096cc:	dd07      	ble.n	80096de <_dtoa_r+0xa86>
 80096ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80096d2:	d0ed      	beq.n	80096b0 <_dtoa_r+0xa58>
 80096d4:	9a00      	ldr	r2, [sp, #0]
 80096d6:	f108 0301 	add.w	r3, r8, #1
 80096da:	7013      	strb	r3, [r2, #0]
 80096dc:	e608      	b.n	80092f0 <_dtoa_r+0x698>
 80096de:	9b07      	ldr	r3, [sp, #28]
 80096e0:	9a07      	ldr	r2, [sp, #28]
 80096e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80096e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d028      	beq.n	800973e <_dtoa_r+0xae6>
 80096ec:	4649      	mov	r1, r9
 80096ee:	2300      	movs	r3, #0
 80096f0:	220a      	movs	r2, #10
 80096f2:	4658      	mov	r0, fp
 80096f4:	f000 f9d6 	bl	8009aa4 <__multadd>
 80096f8:	42af      	cmp	r7, r5
 80096fa:	4681      	mov	r9, r0
 80096fc:	f04f 0300 	mov.w	r3, #0
 8009700:	f04f 020a 	mov.w	r2, #10
 8009704:	4639      	mov	r1, r7
 8009706:	4658      	mov	r0, fp
 8009708:	d107      	bne.n	800971a <_dtoa_r+0xac2>
 800970a:	f000 f9cb 	bl	8009aa4 <__multadd>
 800970e:	4607      	mov	r7, r0
 8009710:	4605      	mov	r5, r0
 8009712:	9b07      	ldr	r3, [sp, #28]
 8009714:	3301      	adds	r3, #1
 8009716:	9307      	str	r3, [sp, #28]
 8009718:	e774      	b.n	8009604 <_dtoa_r+0x9ac>
 800971a:	f000 f9c3 	bl	8009aa4 <__multadd>
 800971e:	4629      	mov	r1, r5
 8009720:	4607      	mov	r7, r0
 8009722:	2300      	movs	r3, #0
 8009724:	220a      	movs	r2, #10
 8009726:	4658      	mov	r0, fp
 8009728:	f000 f9bc 	bl	8009aa4 <__multadd>
 800972c:	4605      	mov	r5, r0
 800972e:	e7f0      	b.n	8009712 <_dtoa_r+0xaba>
 8009730:	9b00      	ldr	r3, [sp, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	bfcc      	ite	gt
 8009736:	461e      	movgt	r6, r3
 8009738:	2601      	movle	r6, #1
 800973a:	4456      	add	r6, sl
 800973c:	2700      	movs	r7, #0
 800973e:	4649      	mov	r1, r9
 8009740:	2201      	movs	r2, #1
 8009742:	4658      	mov	r0, fp
 8009744:	f000 fb5a 	bl	8009dfc <__lshift>
 8009748:	4621      	mov	r1, r4
 800974a:	4681      	mov	r9, r0
 800974c:	f000 fbc2 	bl	8009ed4 <__mcmp>
 8009750:	2800      	cmp	r0, #0
 8009752:	dcb0      	bgt.n	80096b6 <_dtoa_r+0xa5e>
 8009754:	d102      	bne.n	800975c <_dtoa_r+0xb04>
 8009756:	f018 0f01 	tst.w	r8, #1
 800975a:	d1ac      	bne.n	80096b6 <_dtoa_r+0xa5e>
 800975c:	4633      	mov	r3, r6
 800975e:	461e      	mov	r6, r3
 8009760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009764:	2a30      	cmp	r2, #48	@ 0x30
 8009766:	d0fa      	beq.n	800975e <_dtoa_r+0xb06>
 8009768:	e5c2      	b.n	80092f0 <_dtoa_r+0x698>
 800976a:	459a      	cmp	sl, r3
 800976c:	d1a4      	bne.n	80096b8 <_dtoa_r+0xa60>
 800976e:	9b04      	ldr	r3, [sp, #16]
 8009770:	3301      	adds	r3, #1
 8009772:	9304      	str	r3, [sp, #16]
 8009774:	2331      	movs	r3, #49	@ 0x31
 8009776:	f88a 3000 	strb.w	r3, [sl]
 800977a:	e5b9      	b.n	80092f0 <_dtoa_r+0x698>
 800977c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800977e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80097dc <_dtoa_r+0xb84>
 8009782:	b11b      	cbz	r3, 800978c <_dtoa_r+0xb34>
 8009784:	f10a 0308 	add.w	r3, sl, #8
 8009788:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800978a:	6013      	str	r3, [r2, #0]
 800978c:	4650      	mov	r0, sl
 800978e:	b019      	add	sp, #100	@ 0x64
 8009790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009796:	2b01      	cmp	r3, #1
 8009798:	f77f ae37 	ble.w	800940a <_dtoa_r+0x7b2>
 800979c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800979e:	930a      	str	r3, [sp, #40]	@ 0x28
 80097a0:	2001      	movs	r0, #1
 80097a2:	e655      	b.n	8009450 <_dtoa_r+0x7f8>
 80097a4:	9b00      	ldr	r3, [sp, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f77f aed6 	ble.w	8009558 <_dtoa_r+0x900>
 80097ac:	4656      	mov	r6, sl
 80097ae:	4621      	mov	r1, r4
 80097b0:	4648      	mov	r0, r9
 80097b2:	f7ff f9c6 	bl	8008b42 <quorem>
 80097b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80097ba:	f806 8b01 	strb.w	r8, [r6], #1
 80097be:	9b00      	ldr	r3, [sp, #0]
 80097c0:	eba6 020a 	sub.w	r2, r6, sl
 80097c4:	4293      	cmp	r3, r2
 80097c6:	ddb3      	ble.n	8009730 <_dtoa_r+0xad8>
 80097c8:	4649      	mov	r1, r9
 80097ca:	2300      	movs	r3, #0
 80097cc:	220a      	movs	r2, #10
 80097ce:	4658      	mov	r0, fp
 80097d0:	f000 f968 	bl	8009aa4 <__multadd>
 80097d4:	4681      	mov	r9, r0
 80097d6:	e7ea      	b.n	80097ae <_dtoa_r+0xb56>
 80097d8:	0800a980 	.word	0x0800a980
 80097dc:	0800a904 	.word	0x0800a904

080097e0 <_free_r>:
 80097e0:	b538      	push	{r3, r4, r5, lr}
 80097e2:	4605      	mov	r5, r0
 80097e4:	2900      	cmp	r1, #0
 80097e6:	d041      	beq.n	800986c <_free_r+0x8c>
 80097e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097ec:	1f0c      	subs	r4, r1, #4
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	bfb8      	it	lt
 80097f2:	18e4      	addlt	r4, r4, r3
 80097f4:	f000 f8e8 	bl	80099c8 <__malloc_lock>
 80097f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009870 <_free_r+0x90>)
 80097fa:	6813      	ldr	r3, [r2, #0]
 80097fc:	b933      	cbnz	r3, 800980c <_free_r+0x2c>
 80097fe:	6063      	str	r3, [r4, #4]
 8009800:	6014      	str	r4, [r2, #0]
 8009802:	4628      	mov	r0, r5
 8009804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009808:	f000 b8e4 	b.w	80099d4 <__malloc_unlock>
 800980c:	42a3      	cmp	r3, r4
 800980e:	d908      	bls.n	8009822 <_free_r+0x42>
 8009810:	6820      	ldr	r0, [r4, #0]
 8009812:	1821      	adds	r1, r4, r0
 8009814:	428b      	cmp	r3, r1
 8009816:	bf01      	itttt	eq
 8009818:	6819      	ldreq	r1, [r3, #0]
 800981a:	685b      	ldreq	r3, [r3, #4]
 800981c:	1809      	addeq	r1, r1, r0
 800981e:	6021      	streq	r1, [r4, #0]
 8009820:	e7ed      	b.n	80097fe <_free_r+0x1e>
 8009822:	461a      	mov	r2, r3
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	b10b      	cbz	r3, 800982c <_free_r+0x4c>
 8009828:	42a3      	cmp	r3, r4
 800982a:	d9fa      	bls.n	8009822 <_free_r+0x42>
 800982c:	6811      	ldr	r1, [r2, #0]
 800982e:	1850      	adds	r0, r2, r1
 8009830:	42a0      	cmp	r0, r4
 8009832:	d10b      	bne.n	800984c <_free_r+0x6c>
 8009834:	6820      	ldr	r0, [r4, #0]
 8009836:	4401      	add	r1, r0
 8009838:	1850      	adds	r0, r2, r1
 800983a:	4283      	cmp	r3, r0
 800983c:	6011      	str	r1, [r2, #0]
 800983e:	d1e0      	bne.n	8009802 <_free_r+0x22>
 8009840:	6818      	ldr	r0, [r3, #0]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	6053      	str	r3, [r2, #4]
 8009846:	4408      	add	r0, r1
 8009848:	6010      	str	r0, [r2, #0]
 800984a:	e7da      	b.n	8009802 <_free_r+0x22>
 800984c:	d902      	bls.n	8009854 <_free_r+0x74>
 800984e:	230c      	movs	r3, #12
 8009850:	602b      	str	r3, [r5, #0]
 8009852:	e7d6      	b.n	8009802 <_free_r+0x22>
 8009854:	6820      	ldr	r0, [r4, #0]
 8009856:	1821      	adds	r1, r4, r0
 8009858:	428b      	cmp	r3, r1
 800985a:	bf04      	itt	eq
 800985c:	6819      	ldreq	r1, [r3, #0]
 800985e:	685b      	ldreq	r3, [r3, #4]
 8009860:	6063      	str	r3, [r4, #4]
 8009862:	bf04      	itt	eq
 8009864:	1809      	addeq	r1, r1, r0
 8009866:	6021      	streq	r1, [r4, #0]
 8009868:	6054      	str	r4, [r2, #4]
 800986a:	e7ca      	b.n	8009802 <_free_r+0x22>
 800986c:	bd38      	pop	{r3, r4, r5, pc}
 800986e:	bf00      	nop
 8009870:	20000778 	.word	0x20000778

08009874 <malloc>:
 8009874:	4b02      	ldr	r3, [pc, #8]	@ (8009880 <malloc+0xc>)
 8009876:	4601      	mov	r1, r0
 8009878:	6818      	ldr	r0, [r3, #0]
 800987a:	f000 b825 	b.w	80098c8 <_malloc_r>
 800987e:	bf00      	nop
 8009880:	20000014 	.word	0x20000014

08009884 <sbrk_aligned>:
 8009884:	b570      	push	{r4, r5, r6, lr}
 8009886:	4e0f      	ldr	r6, [pc, #60]	@ (80098c4 <sbrk_aligned+0x40>)
 8009888:	460c      	mov	r4, r1
 800988a:	6831      	ldr	r1, [r6, #0]
 800988c:	4605      	mov	r5, r0
 800988e:	b911      	cbnz	r1, 8009896 <sbrk_aligned+0x12>
 8009890:	f000 fcd4 	bl	800a23c <_sbrk_r>
 8009894:	6030      	str	r0, [r6, #0]
 8009896:	4621      	mov	r1, r4
 8009898:	4628      	mov	r0, r5
 800989a:	f000 fccf 	bl	800a23c <_sbrk_r>
 800989e:	1c43      	adds	r3, r0, #1
 80098a0:	d103      	bne.n	80098aa <sbrk_aligned+0x26>
 80098a2:	f04f 34ff 	mov.w	r4, #4294967295
 80098a6:	4620      	mov	r0, r4
 80098a8:	bd70      	pop	{r4, r5, r6, pc}
 80098aa:	1cc4      	adds	r4, r0, #3
 80098ac:	f024 0403 	bic.w	r4, r4, #3
 80098b0:	42a0      	cmp	r0, r4
 80098b2:	d0f8      	beq.n	80098a6 <sbrk_aligned+0x22>
 80098b4:	1a21      	subs	r1, r4, r0
 80098b6:	4628      	mov	r0, r5
 80098b8:	f000 fcc0 	bl	800a23c <_sbrk_r>
 80098bc:	3001      	adds	r0, #1
 80098be:	d1f2      	bne.n	80098a6 <sbrk_aligned+0x22>
 80098c0:	e7ef      	b.n	80098a2 <sbrk_aligned+0x1e>
 80098c2:	bf00      	nop
 80098c4:	20000774 	.word	0x20000774

080098c8 <_malloc_r>:
 80098c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098cc:	1ccd      	adds	r5, r1, #3
 80098ce:	f025 0503 	bic.w	r5, r5, #3
 80098d2:	3508      	adds	r5, #8
 80098d4:	2d0c      	cmp	r5, #12
 80098d6:	bf38      	it	cc
 80098d8:	250c      	movcc	r5, #12
 80098da:	2d00      	cmp	r5, #0
 80098dc:	4606      	mov	r6, r0
 80098de:	db01      	blt.n	80098e4 <_malloc_r+0x1c>
 80098e0:	42a9      	cmp	r1, r5
 80098e2:	d904      	bls.n	80098ee <_malloc_r+0x26>
 80098e4:	230c      	movs	r3, #12
 80098e6:	6033      	str	r3, [r6, #0]
 80098e8:	2000      	movs	r0, #0
 80098ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80099c4 <_malloc_r+0xfc>
 80098f2:	f000 f869 	bl	80099c8 <__malloc_lock>
 80098f6:	f8d8 3000 	ldr.w	r3, [r8]
 80098fa:	461c      	mov	r4, r3
 80098fc:	bb44      	cbnz	r4, 8009950 <_malloc_r+0x88>
 80098fe:	4629      	mov	r1, r5
 8009900:	4630      	mov	r0, r6
 8009902:	f7ff ffbf 	bl	8009884 <sbrk_aligned>
 8009906:	1c43      	adds	r3, r0, #1
 8009908:	4604      	mov	r4, r0
 800990a:	d158      	bne.n	80099be <_malloc_r+0xf6>
 800990c:	f8d8 4000 	ldr.w	r4, [r8]
 8009910:	4627      	mov	r7, r4
 8009912:	2f00      	cmp	r7, #0
 8009914:	d143      	bne.n	800999e <_malloc_r+0xd6>
 8009916:	2c00      	cmp	r4, #0
 8009918:	d04b      	beq.n	80099b2 <_malloc_r+0xea>
 800991a:	6823      	ldr	r3, [r4, #0]
 800991c:	4639      	mov	r1, r7
 800991e:	4630      	mov	r0, r6
 8009920:	eb04 0903 	add.w	r9, r4, r3
 8009924:	f000 fc8a 	bl	800a23c <_sbrk_r>
 8009928:	4581      	cmp	r9, r0
 800992a:	d142      	bne.n	80099b2 <_malloc_r+0xea>
 800992c:	6821      	ldr	r1, [r4, #0]
 800992e:	1a6d      	subs	r5, r5, r1
 8009930:	4629      	mov	r1, r5
 8009932:	4630      	mov	r0, r6
 8009934:	f7ff ffa6 	bl	8009884 <sbrk_aligned>
 8009938:	3001      	adds	r0, #1
 800993a:	d03a      	beq.n	80099b2 <_malloc_r+0xea>
 800993c:	6823      	ldr	r3, [r4, #0]
 800993e:	442b      	add	r3, r5
 8009940:	6023      	str	r3, [r4, #0]
 8009942:	f8d8 3000 	ldr.w	r3, [r8]
 8009946:	685a      	ldr	r2, [r3, #4]
 8009948:	bb62      	cbnz	r2, 80099a4 <_malloc_r+0xdc>
 800994a:	f8c8 7000 	str.w	r7, [r8]
 800994e:	e00f      	b.n	8009970 <_malloc_r+0xa8>
 8009950:	6822      	ldr	r2, [r4, #0]
 8009952:	1b52      	subs	r2, r2, r5
 8009954:	d420      	bmi.n	8009998 <_malloc_r+0xd0>
 8009956:	2a0b      	cmp	r2, #11
 8009958:	d917      	bls.n	800998a <_malloc_r+0xc2>
 800995a:	1961      	adds	r1, r4, r5
 800995c:	42a3      	cmp	r3, r4
 800995e:	6025      	str	r5, [r4, #0]
 8009960:	bf18      	it	ne
 8009962:	6059      	strne	r1, [r3, #4]
 8009964:	6863      	ldr	r3, [r4, #4]
 8009966:	bf08      	it	eq
 8009968:	f8c8 1000 	streq.w	r1, [r8]
 800996c:	5162      	str	r2, [r4, r5]
 800996e:	604b      	str	r3, [r1, #4]
 8009970:	4630      	mov	r0, r6
 8009972:	f000 f82f 	bl	80099d4 <__malloc_unlock>
 8009976:	f104 000b 	add.w	r0, r4, #11
 800997a:	1d23      	adds	r3, r4, #4
 800997c:	f020 0007 	bic.w	r0, r0, #7
 8009980:	1ac2      	subs	r2, r0, r3
 8009982:	bf1c      	itt	ne
 8009984:	1a1b      	subne	r3, r3, r0
 8009986:	50a3      	strne	r3, [r4, r2]
 8009988:	e7af      	b.n	80098ea <_malloc_r+0x22>
 800998a:	6862      	ldr	r2, [r4, #4]
 800998c:	42a3      	cmp	r3, r4
 800998e:	bf0c      	ite	eq
 8009990:	f8c8 2000 	streq.w	r2, [r8]
 8009994:	605a      	strne	r2, [r3, #4]
 8009996:	e7eb      	b.n	8009970 <_malloc_r+0xa8>
 8009998:	4623      	mov	r3, r4
 800999a:	6864      	ldr	r4, [r4, #4]
 800999c:	e7ae      	b.n	80098fc <_malloc_r+0x34>
 800999e:	463c      	mov	r4, r7
 80099a0:	687f      	ldr	r7, [r7, #4]
 80099a2:	e7b6      	b.n	8009912 <_malloc_r+0x4a>
 80099a4:	461a      	mov	r2, r3
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	42a3      	cmp	r3, r4
 80099aa:	d1fb      	bne.n	80099a4 <_malloc_r+0xdc>
 80099ac:	2300      	movs	r3, #0
 80099ae:	6053      	str	r3, [r2, #4]
 80099b0:	e7de      	b.n	8009970 <_malloc_r+0xa8>
 80099b2:	230c      	movs	r3, #12
 80099b4:	6033      	str	r3, [r6, #0]
 80099b6:	4630      	mov	r0, r6
 80099b8:	f000 f80c 	bl	80099d4 <__malloc_unlock>
 80099bc:	e794      	b.n	80098e8 <_malloc_r+0x20>
 80099be:	6005      	str	r5, [r0, #0]
 80099c0:	e7d6      	b.n	8009970 <_malloc_r+0xa8>
 80099c2:	bf00      	nop
 80099c4:	20000778 	.word	0x20000778

080099c8 <__malloc_lock>:
 80099c8:	4801      	ldr	r0, [pc, #4]	@ (80099d0 <__malloc_lock+0x8>)
 80099ca:	f7ff b8aa 	b.w	8008b22 <__retarget_lock_acquire_recursive>
 80099ce:	bf00      	nop
 80099d0:	20000770 	.word	0x20000770

080099d4 <__malloc_unlock>:
 80099d4:	4801      	ldr	r0, [pc, #4]	@ (80099dc <__malloc_unlock+0x8>)
 80099d6:	f7ff b8a5 	b.w	8008b24 <__retarget_lock_release_recursive>
 80099da:	bf00      	nop
 80099dc:	20000770 	.word	0x20000770

080099e0 <_Balloc>:
 80099e0:	b570      	push	{r4, r5, r6, lr}
 80099e2:	69c6      	ldr	r6, [r0, #28]
 80099e4:	4604      	mov	r4, r0
 80099e6:	460d      	mov	r5, r1
 80099e8:	b976      	cbnz	r6, 8009a08 <_Balloc+0x28>
 80099ea:	2010      	movs	r0, #16
 80099ec:	f7ff ff42 	bl	8009874 <malloc>
 80099f0:	4602      	mov	r2, r0
 80099f2:	61e0      	str	r0, [r4, #28]
 80099f4:	b920      	cbnz	r0, 8009a00 <_Balloc+0x20>
 80099f6:	4b18      	ldr	r3, [pc, #96]	@ (8009a58 <_Balloc+0x78>)
 80099f8:	4818      	ldr	r0, [pc, #96]	@ (8009a5c <_Balloc+0x7c>)
 80099fa:	216b      	movs	r1, #107	@ 0x6b
 80099fc:	f000 fc2e 	bl	800a25c <__assert_func>
 8009a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a04:	6006      	str	r6, [r0, #0]
 8009a06:	60c6      	str	r6, [r0, #12]
 8009a08:	69e6      	ldr	r6, [r4, #28]
 8009a0a:	68f3      	ldr	r3, [r6, #12]
 8009a0c:	b183      	cbz	r3, 8009a30 <_Balloc+0x50>
 8009a0e:	69e3      	ldr	r3, [r4, #28]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a16:	b9b8      	cbnz	r0, 8009a48 <_Balloc+0x68>
 8009a18:	2101      	movs	r1, #1
 8009a1a:	fa01 f605 	lsl.w	r6, r1, r5
 8009a1e:	1d72      	adds	r2, r6, #5
 8009a20:	0092      	lsls	r2, r2, #2
 8009a22:	4620      	mov	r0, r4
 8009a24:	f000 fc38 	bl	800a298 <_calloc_r>
 8009a28:	b160      	cbz	r0, 8009a44 <_Balloc+0x64>
 8009a2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a2e:	e00e      	b.n	8009a4e <_Balloc+0x6e>
 8009a30:	2221      	movs	r2, #33	@ 0x21
 8009a32:	2104      	movs	r1, #4
 8009a34:	4620      	mov	r0, r4
 8009a36:	f000 fc2f 	bl	800a298 <_calloc_r>
 8009a3a:	69e3      	ldr	r3, [r4, #28]
 8009a3c:	60f0      	str	r0, [r6, #12]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d1e4      	bne.n	8009a0e <_Balloc+0x2e>
 8009a44:	2000      	movs	r0, #0
 8009a46:	bd70      	pop	{r4, r5, r6, pc}
 8009a48:	6802      	ldr	r2, [r0, #0]
 8009a4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a4e:	2300      	movs	r3, #0
 8009a50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a54:	e7f7      	b.n	8009a46 <_Balloc+0x66>
 8009a56:	bf00      	nop
 8009a58:	0800a911 	.word	0x0800a911
 8009a5c:	0800a991 	.word	0x0800a991

08009a60 <_Bfree>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	69c6      	ldr	r6, [r0, #28]
 8009a64:	4605      	mov	r5, r0
 8009a66:	460c      	mov	r4, r1
 8009a68:	b976      	cbnz	r6, 8009a88 <_Bfree+0x28>
 8009a6a:	2010      	movs	r0, #16
 8009a6c:	f7ff ff02 	bl	8009874 <malloc>
 8009a70:	4602      	mov	r2, r0
 8009a72:	61e8      	str	r0, [r5, #28]
 8009a74:	b920      	cbnz	r0, 8009a80 <_Bfree+0x20>
 8009a76:	4b09      	ldr	r3, [pc, #36]	@ (8009a9c <_Bfree+0x3c>)
 8009a78:	4809      	ldr	r0, [pc, #36]	@ (8009aa0 <_Bfree+0x40>)
 8009a7a:	218f      	movs	r1, #143	@ 0x8f
 8009a7c:	f000 fbee 	bl	800a25c <__assert_func>
 8009a80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a84:	6006      	str	r6, [r0, #0]
 8009a86:	60c6      	str	r6, [r0, #12]
 8009a88:	b13c      	cbz	r4, 8009a9a <_Bfree+0x3a>
 8009a8a:	69eb      	ldr	r3, [r5, #28]
 8009a8c:	6862      	ldr	r2, [r4, #4]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a94:	6021      	str	r1, [r4, #0]
 8009a96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}
 8009a9c:	0800a911 	.word	0x0800a911
 8009aa0:	0800a991 	.word	0x0800a991

08009aa4 <__multadd>:
 8009aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa8:	690d      	ldr	r5, [r1, #16]
 8009aaa:	4607      	mov	r7, r0
 8009aac:	460c      	mov	r4, r1
 8009aae:	461e      	mov	r6, r3
 8009ab0:	f101 0c14 	add.w	ip, r1, #20
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	f8dc 3000 	ldr.w	r3, [ip]
 8009aba:	b299      	uxth	r1, r3
 8009abc:	fb02 6101 	mla	r1, r2, r1, r6
 8009ac0:	0c1e      	lsrs	r6, r3, #16
 8009ac2:	0c0b      	lsrs	r3, r1, #16
 8009ac4:	fb02 3306 	mla	r3, r2, r6, r3
 8009ac8:	b289      	uxth	r1, r1
 8009aca:	3001      	adds	r0, #1
 8009acc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ad0:	4285      	cmp	r5, r0
 8009ad2:	f84c 1b04 	str.w	r1, [ip], #4
 8009ad6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ada:	dcec      	bgt.n	8009ab6 <__multadd+0x12>
 8009adc:	b30e      	cbz	r6, 8009b22 <__multadd+0x7e>
 8009ade:	68a3      	ldr	r3, [r4, #8]
 8009ae0:	42ab      	cmp	r3, r5
 8009ae2:	dc19      	bgt.n	8009b18 <__multadd+0x74>
 8009ae4:	6861      	ldr	r1, [r4, #4]
 8009ae6:	4638      	mov	r0, r7
 8009ae8:	3101      	adds	r1, #1
 8009aea:	f7ff ff79 	bl	80099e0 <_Balloc>
 8009aee:	4680      	mov	r8, r0
 8009af0:	b928      	cbnz	r0, 8009afe <__multadd+0x5a>
 8009af2:	4602      	mov	r2, r0
 8009af4:	4b0c      	ldr	r3, [pc, #48]	@ (8009b28 <__multadd+0x84>)
 8009af6:	480d      	ldr	r0, [pc, #52]	@ (8009b2c <__multadd+0x88>)
 8009af8:	21ba      	movs	r1, #186	@ 0xba
 8009afa:	f000 fbaf 	bl	800a25c <__assert_func>
 8009afe:	6922      	ldr	r2, [r4, #16]
 8009b00:	3202      	adds	r2, #2
 8009b02:	f104 010c 	add.w	r1, r4, #12
 8009b06:	0092      	lsls	r2, r2, #2
 8009b08:	300c      	adds	r0, #12
 8009b0a:	f7ff f80c 	bl	8008b26 <memcpy>
 8009b0e:	4621      	mov	r1, r4
 8009b10:	4638      	mov	r0, r7
 8009b12:	f7ff ffa5 	bl	8009a60 <_Bfree>
 8009b16:	4644      	mov	r4, r8
 8009b18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b1c:	3501      	adds	r5, #1
 8009b1e:	615e      	str	r6, [r3, #20]
 8009b20:	6125      	str	r5, [r4, #16]
 8009b22:	4620      	mov	r0, r4
 8009b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b28:	0800a980 	.word	0x0800a980
 8009b2c:	0800a991 	.word	0x0800a991

08009b30 <__hi0bits>:
 8009b30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009b34:	4603      	mov	r3, r0
 8009b36:	bf36      	itet	cc
 8009b38:	0403      	lslcc	r3, r0, #16
 8009b3a:	2000      	movcs	r0, #0
 8009b3c:	2010      	movcc	r0, #16
 8009b3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b42:	bf3c      	itt	cc
 8009b44:	021b      	lslcc	r3, r3, #8
 8009b46:	3008      	addcc	r0, #8
 8009b48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b4c:	bf3c      	itt	cc
 8009b4e:	011b      	lslcc	r3, r3, #4
 8009b50:	3004      	addcc	r0, #4
 8009b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b56:	bf3c      	itt	cc
 8009b58:	009b      	lslcc	r3, r3, #2
 8009b5a:	3002      	addcc	r0, #2
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	db05      	blt.n	8009b6c <__hi0bits+0x3c>
 8009b60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009b64:	f100 0001 	add.w	r0, r0, #1
 8009b68:	bf08      	it	eq
 8009b6a:	2020      	moveq	r0, #32
 8009b6c:	4770      	bx	lr

08009b6e <__lo0bits>:
 8009b6e:	6803      	ldr	r3, [r0, #0]
 8009b70:	4602      	mov	r2, r0
 8009b72:	f013 0007 	ands.w	r0, r3, #7
 8009b76:	d00b      	beq.n	8009b90 <__lo0bits+0x22>
 8009b78:	07d9      	lsls	r1, r3, #31
 8009b7a:	d421      	bmi.n	8009bc0 <__lo0bits+0x52>
 8009b7c:	0798      	lsls	r0, r3, #30
 8009b7e:	bf49      	itett	mi
 8009b80:	085b      	lsrmi	r3, r3, #1
 8009b82:	089b      	lsrpl	r3, r3, #2
 8009b84:	2001      	movmi	r0, #1
 8009b86:	6013      	strmi	r3, [r2, #0]
 8009b88:	bf5c      	itt	pl
 8009b8a:	6013      	strpl	r3, [r2, #0]
 8009b8c:	2002      	movpl	r0, #2
 8009b8e:	4770      	bx	lr
 8009b90:	b299      	uxth	r1, r3
 8009b92:	b909      	cbnz	r1, 8009b98 <__lo0bits+0x2a>
 8009b94:	0c1b      	lsrs	r3, r3, #16
 8009b96:	2010      	movs	r0, #16
 8009b98:	b2d9      	uxtb	r1, r3
 8009b9a:	b909      	cbnz	r1, 8009ba0 <__lo0bits+0x32>
 8009b9c:	3008      	adds	r0, #8
 8009b9e:	0a1b      	lsrs	r3, r3, #8
 8009ba0:	0719      	lsls	r1, r3, #28
 8009ba2:	bf04      	itt	eq
 8009ba4:	091b      	lsreq	r3, r3, #4
 8009ba6:	3004      	addeq	r0, #4
 8009ba8:	0799      	lsls	r1, r3, #30
 8009baa:	bf04      	itt	eq
 8009bac:	089b      	lsreq	r3, r3, #2
 8009bae:	3002      	addeq	r0, #2
 8009bb0:	07d9      	lsls	r1, r3, #31
 8009bb2:	d403      	bmi.n	8009bbc <__lo0bits+0x4e>
 8009bb4:	085b      	lsrs	r3, r3, #1
 8009bb6:	f100 0001 	add.w	r0, r0, #1
 8009bba:	d003      	beq.n	8009bc4 <__lo0bits+0x56>
 8009bbc:	6013      	str	r3, [r2, #0]
 8009bbe:	4770      	bx	lr
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	4770      	bx	lr
 8009bc4:	2020      	movs	r0, #32
 8009bc6:	4770      	bx	lr

08009bc8 <__i2b>:
 8009bc8:	b510      	push	{r4, lr}
 8009bca:	460c      	mov	r4, r1
 8009bcc:	2101      	movs	r1, #1
 8009bce:	f7ff ff07 	bl	80099e0 <_Balloc>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	b928      	cbnz	r0, 8009be2 <__i2b+0x1a>
 8009bd6:	4b05      	ldr	r3, [pc, #20]	@ (8009bec <__i2b+0x24>)
 8009bd8:	4805      	ldr	r0, [pc, #20]	@ (8009bf0 <__i2b+0x28>)
 8009bda:	f240 1145 	movw	r1, #325	@ 0x145
 8009bde:	f000 fb3d 	bl	800a25c <__assert_func>
 8009be2:	2301      	movs	r3, #1
 8009be4:	6144      	str	r4, [r0, #20]
 8009be6:	6103      	str	r3, [r0, #16]
 8009be8:	bd10      	pop	{r4, pc}
 8009bea:	bf00      	nop
 8009bec:	0800a980 	.word	0x0800a980
 8009bf0:	0800a991 	.word	0x0800a991

08009bf4 <__multiply>:
 8009bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf8:	4614      	mov	r4, r2
 8009bfa:	690a      	ldr	r2, [r1, #16]
 8009bfc:	6923      	ldr	r3, [r4, #16]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	bfa8      	it	ge
 8009c02:	4623      	movge	r3, r4
 8009c04:	460f      	mov	r7, r1
 8009c06:	bfa4      	itt	ge
 8009c08:	460c      	movge	r4, r1
 8009c0a:	461f      	movge	r7, r3
 8009c0c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009c10:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009c14:	68a3      	ldr	r3, [r4, #8]
 8009c16:	6861      	ldr	r1, [r4, #4]
 8009c18:	eb0a 0609 	add.w	r6, sl, r9
 8009c1c:	42b3      	cmp	r3, r6
 8009c1e:	b085      	sub	sp, #20
 8009c20:	bfb8      	it	lt
 8009c22:	3101      	addlt	r1, #1
 8009c24:	f7ff fedc 	bl	80099e0 <_Balloc>
 8009c28:	b930      	cbnz	r0, 8009c38 <__multiply+0x44>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	4b44      	ldr	r3, [pc, #272]	@ (8009d40 <__multiply+0x14c>)
 8009c2e:	4845      	ldr	r0, [pc, #276]	@ (8009d44 <__multiply+0x150>)
 8009c30:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009c34:	f000 fb12 	bl	800a25c <__assert_func>
 8009c38:	f100 0514 	add.w	r5, r0, #20
 8009c3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c40:	462b      	mov	r3, r5
 8009c42:	2200      	movs	r2, #0
 8009c44:	4543      	cmp	r3, r8
 8009c46:	d321      	bcc.n	8009c8c <__multiply+0x98>
 8009c48:	f107 0114 	add.w	r1, r7, #20
 8009c4c:	f104 0214 	add.w	r2, r4, #20
 8009c50:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009c54:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009c58:	9302      	str	r3, [sp, #8]
 8009c5a:	1b13      	subs	r3, r2, r4
 8009c5c:	3b15      	subs	r3, #21
 8009c5e:	f023 0303 	bic.w	r3, r3, #3
 8009c62:	3304      	adds	r3, #4
 8009c64:	f104 0715 	add.w	r7, r4, #21
 8009c68:	42ba      	cmp	r2, r7
 8009c6a:	bf38      	it	cc
 8009c6c:	2304      	movcc	r3, #4
 8009c6e:	9301      	str	r3, [sp, #4]
 8009c70:	9b02      	ldr	r3, [sp, #8]
 8009c72:	9103      	str	r1, [sp, #12]
 8009c74:	428b      	cmp	r3, r1
 8009c76:	d80c      	bhi.n	8009c92 <__multiply+0x9e>
 8009c78:	2e00      	cmp	r6, #0
 8009c7a:	dd03      	ble.n	8009c84 <__multiply+0x90>
 8009c7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d05b      	beq.n	8009d3c <__multiply+0x148>
 8009c84:	6106      	str	r6, [r0, #16]
 8009c86:	b005      	add	sp, #20
 8009c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8c:	f843 2b04 	str.w	r2, [r3], #4
 8009c90:	e7d8      	b.n	8009c44 <__multiply+0x50>
 8009c92:	f8b1 a000 	ldrh.w	sl, [r1]
 8009c96:	f1ba 0f00 	cmp.w	sl, #0
 8009c9a:	d024      	beq.n	8009ce6 <__multiply+0xf2>
 8009c9c:	f104 0e14 	add.w	lr, r4, #20
 8009ca0:	46a9      	mov	r9, r5
 8009ca2:	f04f 0c00 	mov.w	ip, #0
 8009ca6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009caa:	f8d9 3000 	ldr.w	r3, [r9]
 8009cae:	fa1f fb87 	uxth.w	fp, r7
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	fb0a 330b 	mla	r3, sl, fp, r3
 8009cb8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009cbc:	f8d9 7000 	ldr.w	r7, [r9]
 8009cc0:	4463      	add	r3, ip
 8009cc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009cc6:	fb0a c70b 	mla	r7, sl, fp, ip
 8009cca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009cd4:	4572      	cmp	r2, lr
 8009cd6:	f849 3b04 	str.w	r3, [r9], #4
 8009cda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009cde:	d8e2      	bhi.n	8009ca6 <__multiply+0xb2>
 8009ce0:	9b01      	ldr	r3, [sp, #4]
 8009ce2:	f845 c003 	str.w	ip, [r5, r3]
 8009ce6:	9b03      	ldr	r3, [sp, #12]
 8009ce8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009cec:	3104      	adds	r1, #4
 8009cee:	f1b9 0f00 	cmp.w	r9, #0
 8009cf2:	d021      	beq.n	8009d38 <__multiply+0x144>
 8009cf4:	682b      	ldr	r3, [r5, #0]
 8009cf6:	f104 0c14 	add.w	ip, r4, #20
 8009cfa:	46ae      	mov	lr, r5
 8009cfc:	f04f 0a00 	mov.w	sl, #0
 8009d00:	f8bc b000 	ldrh.w	fp, [ip]
 8009d04:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009d08:	fb09 770b 	mla	r7, r9, fp, r7
 8009d0c:	4457      	add	r7, sl
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009d14:	f84e 3b04 	str.w	r3, [lr], #4
 8009d18:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d20:	f8be 3000 	ldrh.w	r3, [lr]
 8009d24:	fb09 330a 	mla	r3, r9, sl, r3
 8009d28:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009d2c:	4562      	cmp	r2, ip
 8009d2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d32:	d8e5      	bhi.n	8009d00 <__multiply+0x10c>
 8009d34:	9f01      	ldr	r7, [sp, #4]
 8009d36:	51eb      	str	r3, [r5, r7]
 8009d38:	3504      	adds	r5, #4
 8009d3a:	e799      	b.n	8009c70 <__multiply+0x7c>
 8009d3c:	3e01      	subs	r6, #1
 8009d3e:	e79b      	b.n	8009c78 <__multiply+0x84>
 8009d40:	0800a980 	.word	0x0800a980
 8009d44:	0800a991 	.word	0x0800a991

08009d48 <__pow5mult>:
 8009d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d4c:	4615      	mov	r5, r2
 8009d4e:	f012 0203 	ands.w	r2, r2, #3
 8009d52:	4607      	mov	r7, r0
 8009d54:	460e      	mov	r6, r1
 8009d56:	d007      	beq.n	8009d68 <__pow5mult+0x20>
 8009d58:	4c25      	ldr	r4, [pc, #148]	@ (8009df0 <__pow5mult+0xa8>)
 8009d5a:	3a01      	subs	r2, #1
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d62:	f7ff fe9f 	bl	8009aa4 <__multadd>
 8009d66:	4606      	mov	r6, r0
 8009d68:	10ad      	asrs	r5, r5, #2
 8009d6a:	d03d      	beq.n	8009de8 <__pow5mult+0xa0>
 8009d6c:	69fc      	ldr	r4, [r7, #28]
 8009d6e:	b97c      	cbnz	r4, 8009d90 <__pow5mult+0x48>
 8009d70:	2010      	movs	r0, #16
 8009d72:	f7ff fd7f 	bl	8009874 <malloc>
 8009d76:	4602      	mov	r2, r0
 8009d78:	61f8      	str	r0, [r7, #28]
 8009d7a:	b928      	cbnz	r0, 8009d88 <__pow5mult+0x40>
 8009d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8009df4 <__pow5mult+0xac>)
 8009d7e:	481e      	ldr	r0, [pc, #120]	@ (8009df8 <__pow5mult+0xb0>)
 8009d80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009d84:	f000 fa6a 	bl	800a25c <__assert_func>
 8009d88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d8c:	6004      	str	r4, [r0, #0]
 8009d8e:	60c4      	str	r4, [r0, #12]
 8009d90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009d94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d98:	b94c      	cbnz	r4, 8009dae <__pow5mult+0x66>
 8009d9a:	f240 2171 	movw	r1, #625	@ 0x271
 8009d9e:	4638      	mov	r0, r7
 8009da0:	f7ff ff12 	bl	8009bc8 <__i2b>
 8009da4:	2300      	movs	r3, #0
 8009da6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009daa:	4604      	mov	r4, r0
 8009dac:	6003      	str	r3, [r0, #0]
 8009dae:	f04f 0900 	mov.w	r9, #0
 8009db2:	07eb      	lsls	r3, r5, #31
 8009db4:	d50a      	bpl.n	8009dcc <__pow5mult+0x84>
 8009db6:	4631      	mov	r1, r6
 8009db8:	4622      	mov	r2, r4
 8009dba:	4638      	mov	r0, r7
 8009dbc:	f7ff ff1a 	bl	8009bf4 <__multiply>
 8009dc0:	4631      	mov	r1, r6
 8009dc2:	4680      	mov	r8, r0
 8009dc4:	4638      	mov	r0, r7
 8009dc6:	f7ff fe4b 	bl	8009a60 <_Bfree>
 8009dca:	4646      	mov	r6, r8
 8009dcc:	106d      	asrs	r5, r5, #1
 8009dce:	d00b      	beq.n	8009de8 <__pow5mult+0xa0>
 8009dd0:	6820      	ldr	r0, [r4, #0]
 8009dd2:	b938      	cbnz	r0, 8009de4 <__pow5mult+0x9c>
 8009dd4:	4622      	mov	r2, r4
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	4638      	mov	r0, r7
 8009dda:	f7ff ff0b 	bl	8009bf4 <__multiply>
 8009dde:	6020      	str	r0, [r4, #0]
 8009de0:	f8c0 9000 	str.w	r9, [r0]
 8009de4:	4604      	mov	r4, r0
 8009de6:	e7e4      	b.n	8009db2 <__pow5mult+0x6a>
 8009de8:	4630      	mov	r0, r6
 8009dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dee:	bf00      	nop
 8009df0:	0800a9ec 	.word	0x0800a9ec
 8009df4:	0800a911 	.word	0x0800a911
 8009df8:	0800a991 	.word	0x0800a991

08009dfc <__lshift>:
 8009dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e00:	460c      	mov	r4, r1
 8009e02:	6849      	ldr	r1, [r1, #4]
 8009e04:	6923      	ldr	r3, [r4, #16]
 8009e06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e0a:	68a3      	ldr	r3, [r4, #8]
 8009e0c:	4607      	mov	r7, r0
 8009e0e:	4691      	mov	r9, r2
 8009e10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e14:	f108 0601 	add.w	r6, r8, #1
 8009e18:	42b3      	cmp	r3, r6
 8009e1a:	db0b      	blt.n	8009e34 <__lshift+0x38>
 8009e1c:	4638      	mov	r0, r7
 8009e1e:	f7ff fddf 	bl	80099e0 <_Balloc>
 8009e22:	4605      	mov	r5, r0
 8009e24:	b948      	cbnz	r0, 8009e3a <__lshift+0x3e>
 8009e26:	4602      	mov	r2, r0
 8009e28:	4b28      	ldr	r3, [pc, #160]	@ (8009ecc <__lshift+0xd0>)
 8009e2a:	4829      	ldr	r0, [pc, #164]	@ (8009ed0 <__lshift+0xd4>)
 8009e2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009e30:	f000 fa14 	bl	800a25c <__assert_func>
 8009e34:	3101      	adds	r1, #1
 8009e36:	005b      	lsls	r3, r3, #1
 8009e38:	e7ee      	b.n	8009e18 <__lshift+0x1c>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	f100 0114 	add.w	r1, r0, #20
 8009e40:	f100 0210 	add.w	r2, r0, #16
 8009e44:	4618      	mov	r0, r3
 8009e46:	4553      	cmp	r3, sl
 8009e48:	db33      	blt.n	8009eb2 <__lshift+0xb6>
 8009e4a:	6920      	ldr	r0, [r4, #16]
 8009e4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e50:	f104 0314 	add.w	r3, r4, #20
 8009e54:	f019 091f 	ands.w	r9, r9, #31
 8009e58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e60:	d02b      	beq.n	8009eba <__lshift+0xbe>
 8009e62:	f1c9 0e20 	rsb	lr, r9, #32
 8009e66:	468a      	mov	sl, r1
 8009e68:	2200      	movs	r2, #0
 8009e6a:	6818      	ldr	r0, [r3, #0]
 8009e6c:	fa00 f009 	lsl.w	r0, r0, r9
 8009e70:	4310      	orrs	r0, r2
 8009e72:	f84a 0b04 	str.w	r0, [sl], #4
 8009e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e7a:	459c      	cmp	ip, r3
 8009e7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e80:	d8f3      	bhi.n	8009e6a <__lshift+0x6e>
 8009e82:	ebac 0304 	sub.w	r3, ip, r4
 8009e86:	3b15      	subs	r3, #21
 8009e88:	f023 0303 	bic.w	r3, r3, #3
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	f104 0015 	add.w	r0, r4, #21
 8009e92:	4584      	cmp	ip, r0
 8009e94:	bf38      	it	cc
 8009e96:	2304      	movcc	r3, #4
 8009e98:	50ca      	str	r2, [r1, r3]
 8009e9a:	b10a      	cbz	r2, 8009ea0 <__lshift+0xa4>
 8009e9c:	f108 0602 	add.w	r6, r8, #2
 8009ea0:	3e01      	subs	r6, #1
 8009ea2:	4638      	mov	r0, r7
 8009ea4:	612e      	str	r6, [r5, #16]
 8009ea6:	4621      	mov	r1, r4
 8009ea8:	f7ff fdda 	bl	8009a60 <_Bfree>
 8009eac:	4628      	mov	r0, r5
 8009eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	e7c5      	b.n	8009e46 <__lshift+0x4a>
 8009eba:	3904      	subs	r1, #4
 8009ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ec0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ec4:	459c      	cmp	ip, r3
 8009ec6:	d8f9      	bhi.n	8009ebc <__lshift+0xc0>
 8009ec8:	e7ea      	b.n	8009ea0 <__lshift+0xa4>
 8009eca:	bf00      	nop
 8009ecc:	0800a980 	.word	0x0800a980
 8009ed0:	0800a991 	.word	0x0800a991

08009ed4 <__mcmp>:
 8009ed4:	690a      	ldr	r2, [r1, #16]
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	6900      	ldr	r0, [r0, #16]
 8009eda:	1a80      	subs	r0, r0, r2
 8009edc:	b530      	push	{r4, r5, lr}
 8009ede:	d10e      	bne.n	8009efe <__mcmp+0x2a>
 8009ee0:	3314      	adds	r3, #20
 8009ee2:	3114      	adds	r1, #20
 8009ee4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ee8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009eec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ef0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ef4:	4295      	cmp	r5, r2
 8009ef6:	d003      	beq.n	8009f00 <__mcmp+0x2c>
 8009ef8:	d205      	bcs.n	8009f06 <__mcmp+0x32>
 8009efa:	f04f 30ff 	mov.w	r0, #4294967295
 8009efe:	bd30      	pop	{r4, r5, pc}
 8009f00:	42a3      	cmp	r3, r4
 8009f02:	d3f3      	bcc.n	8009eec <__mcmp+0x18>
 8009f04:	e7fb      	b.n	8009efe <__mcmp+0x2a>
 8009f06:	2001      	movs	r0, #1
 8009f08:	e7f9      	b.n	8009efe <__mcmp+0x2a>
	...

08009f0c <__mdiff>:
 8009f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f10:	4689      	mov	r9, r1
 8009f12:	4606      	mov	r6, r0
 8009f14:	4611      	mov	r1, r2
 8009f16:	4648      	mov	r0, r9
 8009f18:	4614      	mov	r4, r2
 8009f1a:	f7ff ffdb 	bl	8009ed4 <__mcmp>
 8009f1e:	1e05      	subs	r5, r0, #0
 8009f20:	d112      	bne.n	8009f48 <__mdiff+0x3c>
 8009f22:	4629      	mov	r1, r5
 8009f24:	4630      	mov	r0, r6
 8009f26:	f7ff fd5b 	bl	80099e0 <_Balloc>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	b928      	cbnz	r0, 8009f3a <__mdiff+0x2e>
 8009f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800a02c <__mdiff+0x120>)
 8009f30:	f240 2137 	movw	r1, #567	@ 0x237
 8009f34:	483e      	ldr	r0, [pc, #248]	@ (800a030 <__mdiff+0x124>)
 8009f36:	f000 f991 	bl	800a25c <__assert_func>
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f40:	4610      	mov	r0, r2
 8009f42:	b003      	add	sp, #12
 8009f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f48:	bfbc      	itt	lt
 8009f4a:	464b      	movlt	r3, r9
 8009f4c:	46a1      	movlt	r9, r4
 8009f4e:	4630      	mov	r0, r6
 8009f50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009f54:	bfba      	itte	lt
 8009f56:	461c      	movlt	r4, r3
 8009f58:	2501      	movlt	r5, #1
 8009f5a:	2500      	movge	r5, #0
 8009f5c:	f7ff fd40 	bl	80099e0 <_Balloc>
 8009f60:	4602      	mov	r2, r0
 8009f62:	b918      	cbnz	r0, 8009f6c <__mdiff+0x60>
 8009f64:	4b31      	ldr	r3, [pc, #196]	@ (800a02c <__mdiff+0x120>)
 8009f66:	f240 2145 	movw	r1, #581	@ 0x245
 8009f6a:	e7e3      	b.n	8009f34 <__mdiff+0x28>
 8009f6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009f70:	6926      	ldr	r6, [r4, #16]
 8009f72:	60c5      	str	r5, [r0, #12]
 8009f74:	f109 0310 	add.w	r3, r9, #16
 8009f78:	f109 0514 	add.w	r5, r9, #20
 8009f7c:	f104 0e14 	add.w	lr, r4, #20
 8009f80:	f100 0b14 	add.w	fp, r0, #20
 8009f84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009f88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009f8c:	9301      	str	r3, [sp, #4]
 8009f8e:	46d9      	mov	r9, fp
 8009f90:	f04f 0c00 	mov.w	ip, #0
 8009f94:	9b01      	ldr	r3, [sp, #4]
 8009f96:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009f9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	fa1f f38a 	uxth.w	r3, sl
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	b283      	uxth	r3, r0
 8009fa8:	1acb      	subs	r3, r1, r3
 8009faa:	0c00      	lsrs	r0, r0, #16
 8009fac:	4463      	add	r3, ip
 8009fae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009fb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009fbc:	4576      	cmp	r6, lr
 8009fbe:	f849 3b04 	str.w	r3, [r9], #4
 8009fc2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009fc6:	d8e5      	bhi.n	8009f94 <__mdiff+0x88>
 8009fc8:	1b33      	subs	r3, r6, r4
 8009fca:	3b15      	subs	r3, #21
 8009fcc:	f023 0303 	bic.w	r3, r3, #3
 8009fd0:	3415      	adds	r4, #21
 8009fd2:	3304      	adds	r3, #4
 8009fd4:	42a6      	cmp	r6, r4
 8009fd6:	bf38      	it	cc
 8009fd8:	2304      	movcc	r3, #4
 8009fda:	441d      	add	r5, r3
 8009fdc:	445b      	add	r3, fp
 8009fde:	461e      	mov	r6, r3
 8009fe0:	462c      	mov	r4, r5
 8009fe2:	4544      	cmp	r4, r8
 8009fe4:	d30e      	bcc.n	800a004 <__mdiff+0xf8>
 8009fe6:	f108 0103 	add.w	r1, r8, #3
 8009fea:	1b49      	subs	r1, r1, r5
 8009fec:	f021 0103 	bic.w	r1, r1, #3
 8009ff0:	3d03      	subs	r5, #3
 8009ff2:	45a8      	cmp	r8, r5
 8009ff4:	bf38      	it	cc
 8009ff6:	2100      	movcc	r1, #0
 8009ff8:	440b      	add	r3, r1
 8009ffa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ffe:	b191      	cbz	r1, 800a026 <__mdiff+0x11a>
 800a000:	6117      	str	r7, [r2, #16]
 800a002:	e79d      	b.n	8009f40 <__mdiff+0x34>
 800a004:	f854 1b04 	ldr.w	r1, [r4], #4
 800a008:	46e6      	mov	lr, ip
 800a00a:	0c08      	lsrs	r0, r1, #16
 800a00c:	fa1c fc81 	uxtah	ip, ip, r1
 800a010:	4471      	add	r1, lr
 800a012:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a016:	b289      	uxth	r1, r1
 800a018:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a01c:	f846 1b04 	str.w	r1, [r6], #4
 800a020:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a024:	e7dd      	b.n	8009fe2 <__mdiff+0xd6>
 800a026:	3f01      	subs	r7, #1
 800a028:	e7e7      	b.n	8009ffa <__mdiff+0xee>
 800a02a:	bf00      	nop
 800a02c:	0800a980 	.word	0x0800a980
 800a030:	0800a991 	.word	0x0800a991

0800a034 <__d2b>:
 800a034:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a038:	460f      	mov	r7, r1
 800a03a:	2101      	movs	r1, #1
 800a03c:	ec59 8b10 	vmov	r8, r9, d0
 800a040:	4616      	mov	r6, r2
 800a042:	f7ff fccd 	bl	80099e0 <_Balloc>
 800a046:	4604      	mov	r4, r0
 800a048:	b930      	cbnz	r0, 800a058 <__d2b+0x24>
 800a04a:	4602      	mov	r2, r0
 800a04c:	4b23      	ldr	r3, [pc, #140]	@ (800a0dc <__d2b+0xa8>)
 800a04e:	4824      	ldr	r0, [pc, #144]	@ (800a0e0 <__d2b+0xac>)
 800a050:	f240 310f 	movw	r1, #783	@ 0x30f
 800a054:	f000 f902 	bl	800a25c <__assert_func>
 800a058:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a05c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a060:	b10d      	cbz	r5, 800a066 <__d2b+0x32>
 800a062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a066:	9301      	str	r3, [sp, #4]
 800a068:	f1b8 0300 	subs.w	r3, r8, #0
 800a06c:	d023      	beq.n	800a0b6 <__d2b+0x82>
 800a06e:	4668      	mov	r0, sp
 800a070:	9300      	str	r3, [sp, #0]
 800a072:	f7ff fd7c 	bl	8009b6e <__lo0bits>
 800a076:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a07a:	b1d0      	cbz	r0, 800a0b2 <__d2b+0x7e>
 800a07c:	f1c0 0320 	rsb	r3, r0, #32
 800a080:	fa02 f303 	lsl.w	r3, r2, r3
 800a084:	430b      	orrs	r3, r1
 800a086:	40c2      	lsrs	r2, r0
 800a088:	6163      	str	r3, [r4, #20]
 800a08a:	9201      	str	r2, [sp, #4]
 800a08c:	9b01      	ldr	r3, [sp, #4]
 800a08e:	61a3      	str	r3, [r4, #24]
 800a090:	2b00      	cmp	r3, #0
 800a092:	bf0c      	ite	eq
 800a094:	2201      	moveq	r2, #1
 800a096:	2202      	movne	r2, #2
 800a098:	6122      	str	r2, [r4, #16]
 800a09a:	b1a5      	cbz	r5, 800a0c6 <__d2b+0x92>
 800a09c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a0a0:	4405      	add	r5, r0
 800a0a2:	603d      	str	r5, [r7, #0]
 800a0a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a0a8:	6030      	str	r0, [r6, #0]
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	b003      	add	sp, #12
 800a0ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0b2:	6161      	str	r1, [r4, #20]
 800a0b4:	e7ea      	b.n	800a08c <__d2b+0x58>
 800a0b6:	a801      	add	r0, sp, #4
 800a0b8:	f7ff fd59 	bl	8009b6e <__lo0bits>
 800a0bc:	9b01      	ldr	r3, [sp, #4]
 800a0be:	6163      	str	r3, [r4, #20]
 800a0c0:	3020      	adds	r0, #32
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	e7e8      	b.n	800a098 <__d2b+0x64>
 800a0c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a0ce:	6038      	str	r0, [r7, #0]
 800a0d0:	6918      	ldr	r0, [r3, #16]
 800a0d2:	f7ff fd2d 	bl	8009b30 <__hi0bits>
 800a0d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0da:	e7e5      	b.n	800a0a8 <__d2b+0x74>
 800a0dc:	0800a980 	.word	0x0800a980
 800a0e0:	0800a991 	.word	0x0800a991

0800a0e4 <__sflush_r>:
 800a0e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ec:	0716      	lsls	r6, r2, #28
 800a0ee:	4605      	mov	r5, r0
 800a0f0:	460c      	mov	r4, r1
 800a0f2:	d454      	bmi.n	800a19e <__sflush_r+0xba>
 800a0f4:	684b      	ldr	r3, [r1, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	dc02      	bgt.n	800a100 <__sflush_r+0x1c>
 800a0fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	dd48      	ble.n	800a192 <__sflush_r+0xae>
 800a100:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a102:	2e00      	cmp	r6, #0
 800a104:	d045      	beq.n	800a192 <__sflush_r+0xae>
 800a106:	2300      	movs	r3, #0
 800a108:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a10c:	682f      	ldr	r7, [r5, #0]
 800a10e:	6a21      	ldr	r1, [r4, #32]
 800a110:	602b      	str	r3, [r5, #0]
 800a112:	d030      	beq.n	800a176 <__sflush_r+0x92>
 800a114:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a116:	89a3      	ldrh	r3, [r4, #12]
 800a118:	0759      	lsls	r1, r3, #29
 800a11a:	d505      	bpl.n	800a128 <__sflush_r+0x44>
 800a11c:	6863      	ldr	r3, [r4, #4]
 800a11e:	1ad2      	subs	r2, r2, r3
 800a120:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a122:	b10b      	cbz	r3, 800a128 <__sflush_r+0x44>
 800a124:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a126:	1ad2      	subs	r2, r2, r3
 800a128:	2300      	movs	r3, #0
 800a12a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a12c:	6a21      	ldr	r1, [r4, #32]
 800a12e:	4628      	mov	r0, r5
 800a130:	47b0      	blx	r6
 800a132:	1c43      	adds	r3, r0, #1
 800a134:	89a3      	ldrh	r3, [r4, #12]
 800a136:	d106      	bne.n	800a146 <__sflush_r+0x62>
 800a138:	6829      	ldr	r1, [r5, #0]
 800a13a:	291d      	cmp	r1, #29
 800a13c:	d82b      	bhi.n	800a196 <__sflush_r+0xb2>
 800a13e:	4a2a      	ldr	r2, [pc, #168]	@ (800a1e8 <__sflush_r+0x104>)
 800a140:	410a      	asrs	r2, r1
 800a142:	07d6      	lsls	r6, r2, #31
 800a144:	d427      	bmi.n	800a196 <__sflush_r+0xb2>
 800a146:	2200      	movs	r2, #0
 800a148:	6062      	str	r2, [r4, #4]
 800a14a:	04d9      	lsls	r1, r3, #19
 800a14c:	6922      	ldr	r2, [r4, #16]
 800a14e:	6022      	str	r2, [r4, #0]
 800a150:	d504      	bpl.n	800a15c <__sflush_r+0x78>
 800a152:	1c42      	adds	r2, r0, #1
 800a154:	d101      	bne.n	800a15a <__sflush_r+0x76>
 800a156:	682b      	ldr	r3, [r5, #0]
 800a158:	b903      	cbnz	r3, 800a15c <__sflush_r+0x78>
 800a15a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a15c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a15e:	602f      	str	r7, [r5, #0]
 800a160:	b1b9      	cbz	r1, 800a192 <__sflush_r+0xae>
 800a162:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a166:	4299      	cmp	r1, r3
 800a168:	d002      	beq.n	800a170 <__sflush_r+0x8c>
 800a16a:	4628      	mov	r0, r5
 800a16c:	f7ff fb38 	bl	80097e0 <_free_r>
 800a170:	2300      	movs	r3, #0
 800a172:	6363      	str	r3, [r4, #52]	@ 0x34
 800a174:	e00d      	b.n	800a192 <__sflush_r+0xae>
 800a176:	2301      	movs	r3, #1
 800a178:	4628      	mov	r0, r5
 800a17a:	47b0      	blx	r6
 800a17c:	4602      	mov	r2, r0
 800a17e:	1c50      	adds	r0, r2, #1
 800a180:	d1c9      	bne.n	800a116 <__sflush_r+0x32>
 800a182:	682b      	ldr	r3, [r5, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d0c6      	beq.n	800a116 <__sflush_r+0x32>
 800a188:	2b1d      	cmp	r3, #29
 800a18a:	d001      	beq.n	800a190 <__sflush_r+0xac>
 800a18c:	2b16      	cmp	r3, #22
 800a18e:	d11e      	bne.n	800a1ce <__sflush_r+0xea>
 800a190:	602f      	str	r7, [r5, #0]
 800a192:	2000      	movs	r0, #0
 800a194:	e022      	b.n	800a1dc <__sflush_r+0xf8>
 800a196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a19a:	b21b      	sxth	r3, r3
 800a19c:	e01b      	b.n	800a1d6 <__sflush_r+0xf2>
 800a19e:	690f      	ldr	r7, [r1, #16]
 800a1a0:	2f00      	cmp	r7, #0
 800a1a2:	d0f6      	beq.n	800a192 <__sflush_r+0xae>
 800a1a4:	0793      	lsls	r3, r2, #30
 800a1a6:	680e      	ldr	r6, [r1, #0]
 800a1a8:	bf08      	it	eq
 800a1aa:	694b      	ldreq	r3, [r1, #20]
 800a1ac:	600f      	str	r7, [r1, #0]
 800a1ae:	bf18      	it	ne
 800a1b0:	2300      	movne	r3, #0
 800a1b2:	eba6 0807 	sub.w	r8, r6, r7
 800a1b6:	608b      	str	r3, [r1, #8]
 800a1b8:	f1b8 0f00 	cmp.w	r8, #0
 800a1bc:	dde9      	ble.n	800a192 <__sflush_r+0xae>
 800a1be:	6a21      	ldr	r1, [r4, #32]
 800a1c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a1c2:	4643      	mov	r3, r8
 800a1c4:	463a      	mov	r2, r7
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	47b0      	blx	r6
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	dc08      	bgt.n	800a1e0 <__sflush_r+0xfc>
 800a1ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1d6:	81a3      	strh	r3, [r4, #12]
 800a1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e0:	4407      	add	r7, r0
 800a1e2:	eba8 0800 	sub.w	r8, r8, r0
 800a1e6:	e7e7      	b.n	800a1b8 <__sflush_r+0xd4>
 800a1e8:	dfbffffe 	.word	0xdfbffffe

0800a1ec <_fflush_r>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	690b      	ldr	r3, [r1, #16]
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	b913      	cbnz	r3, 800a1fc <_fflush_r+0x10>
 800a1f6:	2500      	movs	r5, #0
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	bd38      	pop	{r3, r4, r5, pc}
 800a1fc:	b118      	cbz	r0, 800a206 <_fflush_r+0x1a>
 800a1fe:	6a03      	ldr	r3, [r0, #32]
 800a200:	b90b      	cbnz	r3, 800a206 <_fflush_r+0x1a>
 800a202:	f7fe fb97 	bl	8008934 <__sinit>
 800a206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d0f3      	beq.n	800a1f6 <_fflush_r+0xa>
 800a20e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a210:	07d0      	lsls	r0, r2, #31
 800a212:	d404      	bmi.n	800a21e <_fflush_r+0x32>
 800a214:	0599      	lsls	r1, r3, #22
 800a216:	d402      	bmi.n	800a21e <_fflush_r+0x32>
 800a218:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a21a:	f7fe fc82 	bl	8008b22 <__retarget_lock_acquire_recursive>
 800a21e:	4628      	mov	r0, r5
 800a220:	4621      	mov	r1, r4
 800a222:	f7ff ff5f 	bl	800a0e4 <__sflush_r>
 800a226:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a228:	07da      	lsls	r2, r3, #31
 800a22a:	4605      	mov	r5, r0
 800a22c:	d4e4      	bmi.n	800a1f8 <_fflush_r+0xc>
 800a22e:	89a3      	ldrh	r3, [r4, #12]
 800a230:	059b      	lsls	r3, r3, #22
 800a232:	d4e1      	bmi.n	800a1f8 <_fflush_r+0xc>
 800a234:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a236:	f7fe fc75 	bl	8008b24 <__retarget_lock_release_recursive>
 800a23a:	e7dd      	b.n	800a1f8 <_fflush_r+0xc>

0800a23c <_sbrk_r>:
 800a23c:	b538      	push	{r3, r4, r5, lr}
 800a23e:	4d06      	ldr	r5, [pc, #24]	@ (800a258 <_sbrk_r+0x1c>)
 800a240:	2300      	movs	r3, #0
 800a242:	4604      	mov	r4, r0
 800a244:	4608      	mov	r0, r1
 800a246:	602b      	str	r3, [r5, #0]
 800a248:	f7f8 f996 	bl	8002578 <_sbrk>
 800a24c:	1c43      	adds	r3, r0, #1
 800a24e:	d102      	bne.n	800a256 <_sbrk_r+0x1a>
 800a250:	682b      	ldr	r3, [r5, #0]
 800a252:	b103      	cbz	r3, 800a256 <_sbrk_r+0x1a>
 800a254:	6023      	str	r3, [r4, #0]
 800a256:	bd38      	pop	{r3, r4, r5, pc}
 800a258:	2000076c 	.word	0x2000076c

0800a25c <__assert_func>:
 800a25c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a25e:	4614      	mov	r4, r2
 800a260:	461a      	mov	r2, r3
 800a262:	4b09      	ldr	r3, [pc, #36]	@ (800a288 <__assert_func+0x2c>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4605      	mov	r5, r0
 800a268:	68d8      	ldr	r0, [r3, #12]
 800a26a:	b954      	cbnz	r4, 800a282 <__assert_func+0x26>
 800a26c:	4b07      	ldr	r3, [pc, #28]	@ (800a28c <__assert_func+0x30>)
 800a26e:	461c      	mov	r4, r3
 800a270:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a274:	9100      	str	r1, [sp, #0]
 800a276:	462b      	mov	r3, r5
 800a278:	4905      	ldr	r1, [pc, #20]	@ (800a290 <__assert_func+0x34>)
 800a27a:	f000 f841 	bl	800a300 <fiprintf>
 800a27e:	f000 f851 	bl	800a324 <abort>
 800a282:	4b04      	ldr	r3, [pc, #16]	@ (800a294 <__assert_func+0x38>)
 800a284:	e7f4      	b.n	800a270 <__assert_func+0x14>
 800a286:	bf00      	nop
 800a288:	20000014 	.word	0x20000014
 800a28c:	0800ab2d 	.word	0x0800ab2d
 800a290:	0800aaff 	.word	0x0800aaff
 800a294:	0800aaf2 	.word	0x0800aaf2

0800a298 <_calloc_r>:
 800a298:	b570      	push	{r4, r5, r6, lr}
 800a29a:	fba1 5402 	umull	r5, r4, r1, r2
 800a29e:	b93c      	cbnz	r4, 800a2b0 <_calloc_r+0x18>
 800a2a0:	4629      	mov	r1, r5
 800a2a2:	f7ff fb11 	bl	80098c8 <_malloc_r>
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	b928      	cbnz	r0, 800a2b6 <_calloc_r+0x1e>
 800a2aa:	2600      	movs	r6, #0
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	bd70      	pop	{r4, r5, r6, pc}
 800a2b0:	220c      	movs	r2, #12
 800a2b2:	6002      	str	r2, [r0, #0]
 800a2b4:	e7f9      	b.n	800a2aa <_calloc_r+0x12>
 800a2b6:	462a      	mov	r2, r5
 800a2b8:	4621      	mov	r1, r4
 800a2ba:	f7fe fbb4 	bl	8008a26 <memset>
 800a2be:	e7f5      	b.n	800a2ac <_calloc_r+0x14>

0800a2c0 <__ascii_mbtowc>:
 800a2c0:	b082      	sub	sp, #8
 800a2c2:	b901      	cbnz	r1, 800a2c6 <__ascii_mbtowc+0x6>
 800a2c4:	a901      	add	r1, sp, #4
 800a2c6:	b142      	cbz	r2, 800a2da <__ascii_mbtowc+0x1a>
 800a2c8:	b14b      	cbz	r3, 800a2de <__ascii_mbtowc+0x1e>
 800a2ca:	7813      	ldrb	r3, [r2, #0]
 800a2cc:	600b      	str	r3, [r1, #0]
 800a2ce:	7812      	ldrb	r2, [r2, #0]
 800a2d0:	1e10      	subs	r0, r2, #0
 800a2d2:	bf18      	it	ne
 800a2d4:	2001      	movne	r0, #1
 800a2d6:	b002      	add	sp, #8
 800a2d8:	4770      	bx	lr
 800a2da:	4610      	mov	r0, r2
 800a2dc:	e7fb      	b.n	800a2d6 <__ascii_mbtowc+0x16>
 800a2de:	f06f 0001 	mvn.w	r0, #1
 800a2e2:	e7f8      	b.n	800a2d6 <__ascii_mbtowc+0x16>

0800a2e4 <__ascii_wctomb>:
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	4608      	mov	r0, r1
 800a2e8:	b141      	cbz	r1, 800a2fc <__ascii_wctomb+0x18>
 800a2ea:	2aff      	cmp	r2, #255	@ 0xff
 800a2ec:	d904      	bls.n	800a2f8 <__ascii_wctomb+0x14>
 800a2ee:	228a      	movs	r2, #138	@ 0x8a
 800a2f0:	601a      	str	r2, [r3, #0]
 800a2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f6:	4770      	bx	lr
 800a2f8:	700a      	strb	r2, [r1, #0]
 800a2fa:	2001      	movs	r0, #1
 800a2fc:	4770      	bx	lr
	...

0800a300 <fiprintf>:
 800a300:	b40e      	push	{r1, r2, r3}
 800a302:	b503      	push	{r0, r1, lr}
 800a304:	4601      	mov	r1, r0
 800a306:	ab03      	add	r3, sp, #12
 800a308:	4805      	ldr	r0, [pc, #20]	@ (800a320 <fiprintf+0x20>)
 800a30a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a30e:	6800      	ldr	r0, [r0, #0]
 800a310:	9301      	str	r3, [sp, #4]
 800a312:	f000 f837 	bl	800a384 <_vfiprintf_r>
 800a316:	b002      	add	sp, #8
 800a318:	f85d eb04 	ldr.w	lr, [sp], #4
 800a31c:	b003      	add	sp, #12
 800a31e:	4770      	bx	lr
 800a320:	20000014 	.word	0x20000014

0800a324 <abort>:
 800a324:	b508      	push	{r3, lr}
 800a326:	2006      	movs	r0, #6
 800a328:	f000 fa00 	bl	800a72c <raise>
 800a32c:	2001      	movs	r0, #1
 800a32e:	f7f8 f8ab 	bl	8002488 <_exit>

0800a332 <__sfputc_r>:
 800a332:	6893      	ldr	r3, [r2, #8]
 800a334:	3b01      	subs	r3, #1
 800a336:	2b00      	cmp	r3, #0
 800a338:	b410      	push	{r4}
 800a33a:	6093      	str	r3, [r2, #8]
 800a33c:	da08      	bge.n	800a350 <__sfputc_r+0x1e>
 800a33e:	6994      	ldr	r4, [r2, #24]
 800a340:	42a3      	cmp	r3, r4
 800a342:	db01      	blt.n	800a348 <__sfputc_r+0x16>
 800a344:	290a      	cmp	r1, #10
 800a346:	d103      	bne.n	800a350 <__sfputc_r+0x1e>
 800a348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a34c:	f000 b932 	b.w	800a5b4 <__swbuf_r>
 800a350:	6813      	ldr	r3, [r2, #0]
 800a352:	1c58      	adds	r0, r3, #1
 800a354:	6010      	str	r0, [r2, #0]
 800a356:	7019      	strb	r1, [r3, #0]
 800a358:	4608      	mov	r0, r1
 800a35a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <__sfputs_r>:
 800a360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a362:	4606      	mov	r6, r0
 800a364:	460f      	mov	r7, r1
 800a366:	4614      	mov	r4, r2
 800a368:	18d5      	adds	r5, r2, r3
 800a36a:	42ac      	cmp	r4, r5
 800a36c:	d101      	bne.n	800a372 <__sfputs_r+0x12>
 800a36e:	2000      	movs	r0, #0
 800a370:	e007      	b.n	800a382 <__sfputs_r+0x22>
 800a372:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a376:	463a      	mov	r2, r7
 800a378:	4630      	mov	r0, r6
 800a37a:	f7ff ffda 	bl	800a332 <__sfputc_r>
 800a37e:	1c43      	adds	r3, r0, #1
 800a380:	d1f3      	bne.n	800a36a <__sfputs_r+0xa>
 800a382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a384 <_vfiprintf_r>:
 800a384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a388:	460d      	mov	r5, r1
 800a38a:	b09d      	sub	sp, #116	@ 0x74
 800a38c:	4614      	mov	r4, r2
 800a38e:	4698      	mov	r8, r3
 800a390:	4606      	mov	r6, r0
 800a392:	b118      	cbz	r0, 800a39c <_vfiprintf_r+0x18>
 800a394:	6a03      	ldr	r3, [r0, #32]
 800a396:	b90b      	cbnz	r3, 800a39c <_vfiprintf_r+0x18>
 800a398:	f7fe facc 	bl	8008934 <__sinit>
 800a39c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a39e:	07d9      	lsls	r1, r3, #31
 800a3a0:	d405      	bmi.n	800a3ae <_vfiprintf_r+0x2a>
 800a3a2:	89ab      	ldrh	r3, [r5, #12]
 800a3a4:	059a      	lsls	r2, r3, #22
 800a3a6:	d402      	bmi.n	800a3ae <_vfiprintf_r+0x2a>
 800a3a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3aa:	f7fe fbba 	bl	8008b22 <__retarget_lock_acquire_recursive>
 800a3ae:	89ab      	ldrh	r3, [r5, #12]
 800a3b0:	071b      	lsls	r3, r3, #28
 800a3b2:	d501      	bpl.n	800a3b8 <_vfiprintf_r+0x34>
 800a3b4:	692b      	ldr	r3, [r5, #16]
 800a3b6:	b99b      	cbnz	r3, 800a3e0 <_vfiprintf_r+0x5c>
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	f000 f938 	bl	800a630 <__swsetup_r>
 800a3c0:	b170      	cbz	r0, 800a3e0 <_vfiprintf_r+0x5c>
 800a3c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3c4:	07dc      	lsls	r4, r3, #31
 800a3c6:	d504      	bpl.n	800a3d2 <_vfiprintf_r+0x4e>
 800a3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3cc:	b01d      	add	sp, #116	@ 0x74
 800a3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d2:	89ab      	ldrh	r3, [r5, #12]
 800a3d4:	0598      	lsls	r0, r3, #22
 800a3d6:	d4f7      	bmi.n	800a3c8 <_vfiprintf_r+0x44>
 800a3d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3da:	f7fe fba3 	bl	8008b24 <__retarget_lock_release_recursive>
 800a3de:	e7f3      	b.n	800a3c8 <_vfiprintf_r+0x44>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3e4:	2320      	movs	r3, #32
 800a3e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a3ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3ee:	2330      	movs	r3, #48	@ 0x30
 800a3f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a5a0 <_vfiprintf_r+0x21c>
 800a3f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a3f8:	f04f 0901 	mov.w	r9, #1
 800a3fc:	4623      	mov	r3, r4
 800a3fe:	469a      	mov	sl, r3
 800a400:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a404:	b10a      	cbz	r2, 800a40a <_vfiprintf_r+0x86>
 800a406:	2a25      	cmp	r2, #37	@ 0x25
 800a408:	d1f9      	bne.n	800a3fe <_vfiprintf_r+0x7a>
 800a40a:	ebba 0b04 	subs.w	fp, sl, r4
 800a40e:	d00b      	beq.n	800a428 <_vfiprintf_r+0xa4>
 800a410:	465b      	mov	r3, fp
 800a412:	4622      	mov	r2, r4
 800a414:	4629      	mov	r1, r5
 800a416:	4630      	mov	r0, r6
 800a418:	f7ff ffa2 	bl	800a360 <__sfputs_r>
 800a41c:	3001      	adds	r0, #1
 800a41e:	f000 80a7 	beq.w	800a570 <_vfiprintf_r+0x1ec>
 800a422:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a424:	445a      	add	r2, fp
 800a426:	9209      	str	r2, [sp, #36]	@ 0x24
 800a428:	f89a 3000 	ldrb.w	r3, [sl]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f000 809f 	beq.w	800a570 <_vfiprintf_r+0x1ec>
 800a432:	2300      	movs	r3, #0
 800a434:	f04f 32ff 	mov.w	r2, #4294967295
 800a438:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a43c:	f10a 0a01 	add.w	sl, sl, #1
 800a440:	9304      	str	r3, [sp, #16]
 800a442:	9307      	str	r3, [sp, #28]
 800a444:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a448:	931a      	str	r3, [sp, #104]	@ 0x68
 800a44a:	4654      	mov	r4, sl
 800a44c:	2205      	movs	r2, #5
 800a44e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a452:	4853      	ldr	r0, [pc, #332]	@ (800a5a0 <_vfiprintf_r+0x21c>)
 800a454:	f7f5 fee4 	bl	8000220 <memchr>
 800a458:	9a04      	ldr	r2, [sp, #16]
 800a45a:	b9d8      	cbnz	r0, 800a494 <_vfiprintf_r+0x110>
 800a45c:	06d1      	lsls	r1, r2, #27
 800a45e:	bf44      	itt	mi
 800a460:	2320      	movmi	r3, #32
 800a462:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a466:	0713      	lsls	r3, r2, #28
 800a468:	bf44      	itt	mi
 800a46a:	232b      	movmi	r3, #43	@ 0x2b
 800a46c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a470:	f89a 3000 	ldrb.w	r3, [sl]
 800a474:	2b2a      	cmp	r3, #42	@ 0x2a
 800a476:	d015      	beq.n	800a4a4 <_vfiprintf_r+0x120>
 800a478:	9a07      	ldr	r2, [sp, #28]
 800a47a:	4654      	mov	r4, sl
 800a47c:	2000      	movs	r0, #0
 800a47e:	f04f 0c0a 	mov.w	ip, #10
 800a482:	4621      	mov	r1, r4
 800a484:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a488:	3b30      	subs	r3, #48	@ 0x30
 800a48a:	2b09      	cmp	r3, #9
 800a48c:	d94b      	bls.n	800a526 <_vfiprintf_r+0x1a2>
 800a48e:	b1b0      	cbz	r0, 800a4be <_vfiprintf_r+0x13a>
 800a490:	9207      	str	r2, [sp, #28]
 800a492:	e014      	b.n	800a4be <_vfiprintf_r+0x13a>
 800a494:	eba0 0308 	sub.w	r3, r0, r8
 800a498:	fa09 f303 	lsl.w	r3, r9, r3
 800a49c:	4313      	orrs	r3, r2
 800a49e:	9304      	str	r3, [sp, #16]
 800a4a0:	46a2      	mov	sl, r4
 800a4a2:	e7d2      	b.n	800a44a <_vfiprintf_r+0xc6>
 800a4a4:	9b03      	ldr	r3, [sp, #12]
 800a4a6:	1d19      	adds	r1, r3, #4
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	9103      	str	r1, [sp, #12]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	bfbb      	ittet	lt
 800a4b0:	425b      	neglt	r3, r3
 800a4b2:	f042 0202 	orrlt.w	r2, r2, #2
 800a4b6:	9307      	strge	r3, [sp, #28]
 800a4b8:	9307      	strlt	r3, [sp, #28]
 800a4ba:	bfb8      	it	lt
 800a4bc:	9204      	strlt	r2, [sp, #16]
 800a4be:	7823      	ldrb	r3, [r4, #0]
 800a4c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a4c2:	d10a      	bne.n	800a4da <_vfiprintf_r+0x156>
 800a4c4:	7863      	ldrb	r3, [r4, #1]
 800a4c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4c8:	d132      	bne.n	800a530 <_vfiprintf_r+0x1ac>
 800a4ca:	9b03      	ldr	r3, [sp, #12]
 800a4cc:	1d1a      	adds	r2, r3, #4
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	9203      	str	r2, [sp, #12]
 800a4d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a4d6:	3402      	adds	r4, #2
 800a4d8:	9305      	str	r3, [sp, #20]
 800a4da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a5b0 <_vfiprintf_r+0x22c>
 800a4de:	7821      	ldrb	r1, [r4, #0]
 800a4e0:	2203      	movs	r2, #3
 800a4e2:	4650      	mov	r0, sl
 800a4e4:	f7f5 fe9c 	bl	8000220 <memchr>
 800a4e8:	b138      	cbz	r0, 800a4fa <_vfiprintf_r+0x176>
 800a4ea:	9b04      	ldr	r3, [sp, #16]
 800a4ec:	eba0 000a 	sub.w	r0, r0, sl
 800a4f0:	2240      	movs	r2, #64	@ 0x40
 800a4f2:	4082      	lsls	r2, r0
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	3401      	adds	r4, #1
 800a4f8:	9304      	str	r3, [sp, #16]
 800a4fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4fe:	4829      	ldr	r0, [pc, #164]	@ (800a5a4 <_vfiprintf_r+0x220>)
 800a500:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a504:	2206      	movs	r2, #6
 800a506:	f7f5 fe8b 	bl	8000220 <memchr>
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d03f      	beq.n	800a58e <_vfiprintf_r+0x20a>
 800a50e:	4b26      	ldr	r3, [pc, #152]	@ (800a5a8 <_vfiprintf_r+0x224>)
 800a510:	bb1b      	cbnz	r3, 800a55a <_vfiprintf_r+0x1d6>
 800a512:	9b03      	ldr	r3, [sp, #12]
 800a514:	3307      	adds	r3, #7
 800a516:	f023 0307 	bic.w	r3, r3, #7
 800a51a:	3308      	adds	r3, #8
 800a51c:	9303      	str	r3, [sp, #12]
 800a51e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a520:	443b      	add	r3, r7
 800a522:	9309      	str	r3, [sp, #36]	@ 0x24
 800a524:	e76a      	b.n	800a3fc <_vfiprintf_r+0x78>
 800a526:	fb0c 3202 	mla	r2, ip, r2, r3
 800a52a:	460c      	mov	r4, r1
 800a52c:	2001      	movs	r0, #1
 800a52e:	e7a8      	b.n	800a482 <_vfiprintf_r+0xfe>
 800a530:	2300      	movs	r3, #0
 800a532:	3401      	adds	r4, #1
 800a534:	9305      	str	r3, [sp, #20]
 800a536:	4619      	mov	r1, r3
 800a538:	f04f 0c0a 	mov.w	ip, #10
 800a53c:	4620      	mov	r0, r4
 800a53e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a542:	3a30      	subs	r2, #48	@ 0x30
 800a544:	2a09      	cmp	r2, #9
 800a546:	d903      	bls.n	800a550 <_vfiprintf_r+0x1cc>
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d0c6      	beq.n	800a4da <_vfiprintf_r+0x156>
 800a54c:	9105      	str	r1, [sp, #20]
 800a54e:	e7c4      	b.n	800a4da <_vfiprintf_r+0x156>
 800a550:	fb0c 2101 	mla	r1, ip, r1, r2
 800a554:	4604      	mov	r4, r0
 800a556:	2301      	movs	r3, #1
 800a558:	e7f0      	b.n	800a53c <_vfiprintf_r+0x1b8>
 800a55a:	ab03      	add	r3, sp, #12
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	462a      	mov	r2, r5
 800a560:	4b12      	ldr	r3, [pc, #72]	@ (800a5ac <_vfiprintf_r+0x228>)
 800a562:	a904      	add	r1, sp, #16
 800a564:	4630      	mov	r0, r6
 800a566:	f7fd fda1 	bl	80080ac <_printf_float>
 800a56a:	4607      	mov	r7, r0
 800a56c:	1c78      	adds	r0, r7, #1
 800a56e:	d1d6      	bne.n	800a51e <_vfiprintf_r+0x19a>
 800a570:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a572:	07d9      	lsls	r1, r3, #31
 800a574:	d405      	bmi.n	800a582 <_vfiprintf_r+0x1fe>
 800a576:	89ab      	ldrh	r3, [r5, #12]
 800a578:	059a      	lsls	r2, r3, #22
 800a57a:	d402      	bmi.n	800a582 <_vfiprintf_r+0x1fe>
 800a57c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a57e:	f7fe fad1 	bl	8008b24 <__retarget_lock_release_recursive>
 800a582:	89ab      	ldrh	r3, [r5, #12]
 800a584:	065b      	lsls	r3, r3, #25
 800a586:	f53f af1f 	bmi.w	800a3c8 <_vfiprintf_r+0x44>
 800a58a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a58c:	e71e      	b.n	800a3cc <_vfiprintf_r+0x48>
 800a58e:	ab03      	add	r3, sp, #12
 800a590:	9300      	str	r3, [sp, #0]
 800a592:	462a      	mov	r2, r5
 800a594:	4b05      	ldr	r3, [pc, #20]	@ (800a5ac <_vfiprintf_r+0x228>)
 800a596:	a904      	add	r1, sp, #16
 800a598:	4630      	mov	r0, r6
 800a59a:	f7fe f81f 	bl	80085dc <_printf_i>
 800a59e:	e7e4      	b.n	800a56a <_vfiprintf_r+0x1e6>
 800a5a0:	0800ac2f 	.word	0x0800ac2f
 800a5a4:	0800ac39 	.word	0x0800ac39
 800a5a8:	080080ad 	.word	0x080080ad
 800a5ac:	0800a361 	.word	0x0800a361
 800a5b0:	0800ac35 	.word	0x0800ac35

0800a5b4 <__swbuf_r>:
 800a5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b6:	460e      	mov	r6, r1
 800a5b8:	4614      	mov	r4, r2
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	b118      	cbz	r0, 800a5c6 <__swbuf_r+0x12>
 800a5be:	6a03      	ldr	r3, [r0, #32]
 800a5c0:	b90b      	cbnz	r3, 800a5c6 <__swbuf_r+0x12>
 800a5c2:	f7fe f9b7 	bl	8008934 <__sinit>
 800a5c6:	69a3      	ldr	r3, [r4, #24]
 800a5c8:	60a3      	str	r3, [r4, #8]
 800a5ca:	89a3      	ldrh	r3, [r4, #12]
 800a5cc:	071a      	lsls	r2, r3, #28
 800a5ce:	d501      	bpl.n	800a5d4 <__swbuf_r+0x20>
 800a5d0:	6923      	ldr	r3, [r4, #16]
 800a5d2:	b943      	cbnz	r3, 800a5e6 <__swbuf_r+0x32>
 800a5d4:	4621      	mov	r1, r4
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	f000 f82a 	bl	800a630 <__swsetup_r>
 800a5dc:	b118      	cbz	r0, 800a5e6 <__swbuf_r+0x32>
 800a5de:	f04f 37ff 	mov.w	r7, #4294967295
 800a5e2:	4638      	mov	r0, r7
 800a5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	6922      	ldr	r2, [r4, #16]
 800a5ea:	1a98      	subs	r0, r3, r2
 800a5ec:	6963      	ldr	r3, [r4, #20]
 800a5ee:	b2f6      	uxtb	r6, r6
 800a5f0:	4283      	cmp	r3, r0
 800a5f2:	4637      	mov	r7, r6
 800a5f4:	dc05      	bgt.n	800a602 <__swbuf_r+0x4e>
 800a5f6:	4621      	mov	r1, r4
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	f7ff fdf7 	bl	800a1ec <_fflush_r>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	d1ed      	bne.n	800a5de <__swbuf_r+0x2a>
 800a602:	68a3      	ldr	r3, [r4, #8]
 800a604:	3b01      	subs	r3, #1
 800a606:	60a3      	str	r3, [r4, #8]
 800a608:	6823      	ldr	r3, [r4, #0]
 800a60a:	1c5a      	adds	r2, r3, #1
 800a60c:	6022      	str	r2, [r4, #0]
 800a60e:	701e      	strb	r6, [r3, #0]
 800a610:	6962      	ldr	r2, [r4, #20]
 800a612:	1c43      	adds	r3, r0, #1
 800a614:	429a      	cmp	r2, r3
 800a616:	d004      	beq.n	800a622 <__swbuf_r+0x6e>
 800a618:	89a3      	ldrh	r3, [r4, #12]
 800a61a:	07db      	lsls	r3, r3, #31
 800a61c:	d5e1      	bpl.n	800a5e2 <__swbuf_r+0x2e>
 800a61e:	2e0a      	cmp	r6, #10
 800a620:	d1df      	bne.n	800a5e2 <__swbuf_r+0x2e>
 800a622:	4621      	mov	r1, r4
 800a624:	4628      	mov	r0, r5
 800a626:	f7ff fde1 	bl	800a1ec <_fflush_r>
 800a62a:	2800      	cmp	r0, #0
 800a62c:	d0d9      	beq.n	800a5e2 <__swbuf_r+0x2e>
 800a62e:	e7d6      	b.n	800a5de <__swbuf_r+0x2a>

0800a630 <__swsetup_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4b29      	ldr	r3, [pc, #164]	@ (800a6d8 <__swsetup_r+0xa8>)
 800a634:	4605      	mov	r5, r0
 800a636:	6818      	ldr	r0, [r3, #0]
 800a638:	460c      	mov	r4, r1
 800a63a:	b118      	cbz	r0, 800a644 <__swsetup_r+0x14>
 800a63c:	6a03      	ldr	r3, [r0, #32]
 800a63e:	b90b      	cbnz	r3, 800a644 <__swsetup_r+0x14>
 800a640:	f7fe f978 	bl	8008934 <__sinit>
 800a644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a648:	0719      	lsls	r1, r3, #28
 800a64a:	d422      	bmi.n	800a692 <__swsetup_r+0x62>
 800a64c:	06da      	lsls	r2, r3, #27
 800a64e:	d407      	bmi.n	800a660 <__swsetup_r+0x30>
 800a650:	2209      	movs	r2, #9
 800a652:	602a      	str	r2, [r5, #0]
 800a654:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a658:	81a3      	strh	r3, [r4, #12]
 800a65a:	f04f 30ff 	mov.w	r0, #4294967295
 800a65e:	e033      	b.n	800a6c8 <__swsetup_r+0x98>
 800a660:	0758      	lsls	r0, r3, #29
 800a662:	d512      	bpl.n	800a68a <__swsetup_r+0x5a>
 800a664:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a666:	b141      	cbz	r1, 800a67a <__swsetup_r+0x4a>
 800a668:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a66c:	4299      	cmp	r1, r3
 800a66e:	d002      	beq.n	800a676 <__swsetup_r+0x46>
 800a670:	4628      	mov	r0, r5
 800a672:	f7ff f8b5 	bl	80097e0 <_free_r>
 800a676:	2300      	movs	r3, #0
 800a678:	6363      	str	r3, [r4, #52]	@ 0x34
 800a67a:	89a3      	ldrh	r3, [r4, #12]
 800a67c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a680:	81a3      	strh	r3, [r4, #12]
 800a682:	2300      	movs	r3, #0
 800a684:	6063      	str	r3, [r4, #4]
 800a686:	6923      	ldr	r3, [r4, #16]
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	89a3      	ldrh	r3, [r4, #12]
 800a68c:	f043 0308 	orr.w	r3, r3, #8
 800a690:	81a3      	strh	r3, [r4, #12]
 800a692:	6923      	ldr	r3, [r4, #16]
 800a694:	b94b      	cbnz	r3, 800a6aa <__swsetup_r+0x7a>
 800a696:	89a3      	ldrh	r3, [r4, #12]
 800a698:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a69c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6a0:	d003      	beq.n	800a6aa <__swsetup_r+0x7a>
 800a6a2:	4621      	mov	r1, r4
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	f000 f883 	bl	800a7b0 <__smakebuf_r>
 800a6aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ae:	f013 0201 	ands.w	r2, r3, #1
 800a6b2:	d00a      	beq.n	800a6ca <__swsetup_r+0x9a>
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	60a2      	str	r2, [r4, #8]
 800a6b8:	6962      	ldr	r2, [r4, #20]
 800a6ba:	4252      	negs	r2, r2
 800a6bc:	61a2      	str	r2, [r4, #24]
 800a6be:	6922      	ldr	r2, [r4, #16]
 800a6c0:	b942      	cbnz	r2, 800a6d4 <__swsetup_r+0xa4>
 800a6c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a6c6:	d1c5      	bne.n	800a654 <__swsetup_r+0x24>
 800a6c8:	bd38      	pop	{r3, r4, r5, pc}
 800a6ca:	0799      	lsls	r1, r3, #30
 800a6cc:	bf58      	it	pl
 800a6ce:	6962      	ldrpl	r2, [r4, #20]
 800a6d0:	60a2      	str	r2, [r4, #8]
 800a6d2:	e7f4      	b.n	800a6be <__swsetup_r+0x8e>
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	e7f7      	b.n	800a6c8 <__swsetup_r+0x98>
 800a6d8:	20000014 	.word	0x20000014

0800a6dc <_raise_r>:
 800a6dc:	291f      	cmp	r1, #31
 800a6de:	b538      	push	{r3, r4, r5, lr}
 800a6e0:	4605      	mov	r5, r0
 800a6e2:	460c      	mov	r4, r1
 800a6e4:	d904      	bls.n	800a6f0 <_raise_r+0x14>
 800a6e6:	2316      	movs	r3, #22
 800a6e8:	6003      	str	r3, [r0, #0]
 800a6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ee:	bd38      	pop	{r3, r4, r5, pc}
 800a6f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a6f2:	b112      	cbz	r2, 800a6fa <_raise_r+0x1e>
 800a6f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6f8:	b94b      	cbnz	r3, 800a70e <_raise_r+0x32>
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	f000 f830 	bl	800a760 <_getpid_r>
 800a700:	4622      	mov	r2, r4
 800a702:	4601      	mov	r1, r0
 800a704:	4628      	mov	r0, r5
 800a706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a70a:	f000 b817 	b.w	800a73c <_kill_r>
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d00a      	beq.n	800a728 <_raise_r+0x4c>
 800a712:	1c59      	adds	r1, r3, #1
 800a714:	d103      	bne.n	800a71e <_raise_r+0x42>
 800a716:	2316      	movs	r3, #22
 800a718:	6003      	str	r3, [r0, #0]
 800a71a:	2001      	movs	r0, #1
 800a71c:	e7e7      	b.n	800a6ee <_raise_r+0x12>
 800a71e:	2100      	movs	r1, #0
 800a720:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a724:	4620      	mov	r0, r4
 800a726:	4798      	blx	r3
 800a728:	2000      	movs	r0, #0
 800a72a:	e7e0      	b.n	800a6ee <_raise_r+0x12>

0800a72c <raise>:
 800a72c:	4b02      	ldr	r3, [pc, #8]	@ (800a738 <raise+0xc>)
 800a72e:	4601      	mov	r1, r0
 800a730:	6818      	ldr	r0, [r3, #0]
 800a732:	f7ff bfd3 	b.w	800a6dc <_raise_r>
 800a736:	bf00      	nop
 800a738:	20000014 	.word	0x20000014

0800a73c <_kill_r>:
 800a73c:	b538      	push	{r3, r4, r5, lr}
 800a73e:	4d07      	ldr	r5, [pc, #28]	@ (800a75c <_kill_r+0x20>)
 800a740:	2300      	movs	r3, #0
 800a742:	4604      	mov	r4, r0
 800a744:	4608      	mov	r0, r1
 800a746:	4611      	mov	r1, r2
 800a748:	602b      	str	r3, [r5, #0]
 800a74a:	f7f7 fe8d 	bl	8002468 <_kill>
 800a74e:	1c43      	adds	r3, r0, #1
 800a750:	d102      	bne.n	800a758 <_kill_r+0x1c>
 800a752:	682b      	ldr	r3, [r5, #0]
 800a754:	b103      	cbz	r3, 800a758 <_kill_r+0x1c>
 800a756:	6023      	str	r3, [r4, #0]
 800a758:	bd38      	pop	{r3, r4, r5, pc}
 800a75a:	bf00      	nop
 800a75c:	2000076c 	.word	0x2000076c

0800a760 <_getpid_r>:
 800a760:	f7f7 be7a 	b.w	8002458 <_getpid>

0800a764 <__swhatbuf_r>:
 800a764:	b570      	push	{r4, r5, r6, lr}
 800a766:	460c      	mov	r4, r1
 800a768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a76c:	2900      	cmp	r1, #0
 800a76e:	b096      	sub	sp, #88	@ 0x58
 800a770:	4615      	mov	r5, r2
 800a772:	461e      	mov	r6, r3
 800a774:	da0d      	bge.n	800a792 <__swhatbuf_r+0x2e>
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a77c:	f04f 0100 	mov.w	r1, #0
 800a780:	bf14      	ite	ne
 800a782:	2340      	movne	r3, #64	@ 0x40
 800a784:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a788:	2000      	movs	r0, #0
 800a78a:	6031      	str	r1, [r6, #0]
 800a78c:	602b      	str	r3, [r5, #0]
 800a78e:	b016      	add	sp, #88	@ 0x58
 800a790:	bd70      	pop	{r4, r5, r6, pc}
 800a792:	466a      	mov	r2, sp
 800a794:	f000 f848 	bl	800a828 <_fstat_r>
 800a798:	2800      	cmp	r0, #0
 800a79a:	dbec      	blt.n	800a776 <__swhatbuf_r+0x12>
 800a79c:	9901      	ldr	r1, [sp, #4]
 800a79e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a7a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a7a6:	4259      	negs	r1, r3
 800a7a8:	4159      	adcs	r1, r3
 800a7aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7ae:	e7eb      	b.n	800a788 <__swhatbuf_r+0x24>

0800a7b0 <__smakebuf_r>:
 800a7b0:	898b      	ldrh	r3, [r1, #12]
 800a7b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7b4:	079d      	lsls	r5, r3, #30
 800a7b6:	4606      	mov	r6, r0
 800a7b8:	460c      	mov	r4, r1
 800a7ba:	d507      	bpl.n	800a7cc <__smakebuf_r+0x1c>
 800a7bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a7c0:	6023      	str	r3, [r4, #0]
 800a7c2:	6123      	str	r3, [r4, #16]
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	6163      	str	r3, [r4, #20]
 800a7c8:	b003      	add	sp, #12
 800a7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7cc:	ab01      	add	r3, sp, #4
 800a7ce:	466a      	mov	r2, sp
 800a7d0:	f7ff ffc8 	bl	800a764 <__swhatbuf_r>
 800a7d4:	9f00      	ldr	r7, [sp, #0]
 800a7d6:	4605      	mov	r5, r0
 800a7d8:	4639      	mov	r1, r7
 800a7da:	4630      	mov	r0, r6
 800a7dc:	f7ff f874 	bl	80098c8 <_malloc_r>
 800a7e0:	b948      	cbnz	r0, 800a7f6 <__smakebuf_r+0x46>
 800a7e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7e6:	059a      	lsls	r2, r3, #22
 800a7e8:	d4ee      	bmi.n	800a7c8 <__smakebuf_r+0x18>
 800a7ea:	f023 0303 	bic.w	r3, r3, #3
 800a7ee:	f043 0302 	orr.w	r3, r3, #2
 800a7f2:	81a3      	strh	r3, [r4, #12]
 800a7f4:	e7e2      	b.n	800a7bc <__smakebuf_r+0xc>
 800a7f6:	89a3      	ldrh	r3, [r4, #12]
 800a7f8:	6020      	str	r0, [r4, #0]
 800a7fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7fe:	81a3      	strh	r3, [r4, #12]
 800a800:	9b01      	ldr	r3, [sp, #4]
 800a802:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a806:	b15b      	cbz	r3, 800a820 <__smakebuf_r+0x70>
 800a808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a80c:	4630      	mov	r0, r6
 800a80e:	f000 f81d 	bl	800a84c <_isatty_r>
 800a812:	b128      	cbz	r0, 800a820 <__smakebuf_r+0x70>
 800a814:	89a3      	ldrh	r3, [r4, #12]
 800a816:	f023 0303 	bic.w	r3, r3, #3
 800a81a:	f043 0301 	orr.w	r3, r3, #1
 800a81e:	81a3      	strh	r3, [r4, #12]
 800a820:	89a3      	ldrh	r3, [r4, #12]
 800a822:	431d      	orrs	r5, r3
 800a824:	81a5      	strh	r5, [r4, #12]
 800a826:	e7cf      	b.n	800a7c8 <__smakebuf_r+0x18>

0800a828 <_fstat_r>:
 800a828:	b538      	push	{r3, r4, r5, lr}
 800a82a:	4d07      	ldr	r5, [pc, #28]	@ (800a848 <_fstat_r+0x20>)
 800a82c:	2300      	movs	r3, #0
 800a82e:	4604      	mov	r4, r0
 800a830:	4608      	mov	r0, r1
 800a832:	4611      	mov	r1, r2
 800a834:	602b      	str	r3, [r5, #0]
 800a836:	f7f7 fe77 	bl	8002528 <_fstat>
 800a83a:	1c43      	adds	r3, r0, #1
 800a83c:	d102      	bne.n	800a844 <_fstat_r+0x1c>
 800a83e:	682b      	ldr	r3, [r5, #0]
 800a840:	b103      	cbz	r3, 800a844 <_fstat_r+0x1c>
 800a842:	6023      	str	r3, [r4, #0]
 800a844:	bd38      	pop	{r3, r4, r5, pc}
 800a846:	bf00      	nop
 800a848:	2000076c 	.word	0x2000076c

0800a84c <_isatty_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	4d06      	ldr	r5, [pc, #24]	@ (800a868 <_isatty_r+0x1c>)
 800a850:	2300      	movs	r3, #0
 800a852:	4604      	mov	r4, r0
 800a854:	4608      	mov	r0, r1
 800a856:	602b      	str	r3, [r5, #0]
 800a858:	f7f7 fe76 	bl	8002548 <_isatty>
 800a85c:	1c43      	adds	r3, r0, #1
 800a85e:	d102      	bne.n	800a866 <_isatty_r+0x1a>
 800a860:	682b      	ldr	r3, [r5, #0]
 800a862:	b103      	cbz	r3, 800a866 <_isatty_r+0x1a>
 800a864:	6023      	str	r3, [r4, #0]
 800a866:	bd38      	pop	{r3, r4, r5, pc}
 800a868:	2000076c 	.word	0x2000076c

0800a86c <_init>:
 800a86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a86e:	bf00      	nop
 800a870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a872:	bc08      	pop	{r3}
 800a874:	469e      	mov	lr, r3
 800a876:	4770      	bx	lr

0800a878 <_fini>:
 800a878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87a:	bf00      	nop
 800a87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a87e:	bc08      	pop	{r3}
 800a880:	469e      	mov	lr, r3
 800a882:	4770      	bx	lr
