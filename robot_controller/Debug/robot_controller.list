
robot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c20  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08006e00  08006e00  00016e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fe0  08006fe0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006fe0  08006fe0  00016fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fe8  08006fe8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fe8  08006fe8  00016fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fec  08006fec  00016fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  2000005c  0800704c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  0800704c  00020474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016e29  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003121  00000000  00000000  00036ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e0  00000000  00000000  0003a020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eb1  00000000  00000000  0003b300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026780  00000000  00000000  0003c1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017754  00000000  00000000  00062931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010289d  00000000  00000000  0007a085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000057b0  00000000  00000000  0017c924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  001820d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006de8 	.word	0x08006de8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08006de8 	.word	0x08006de8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_d2iz>:
 8000648:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800064c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000650:	d215      	bcs.n	800067e <__aeabi_d2iz+0x36>
 8000652:	d511      	bpl.n	8000678 <__aeabi_d2iz+0x30>
 8000654:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000658:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800065c:	d912      	bls.n	8000684 <__aeabi_d2iz+0x3c>
 800065e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000662:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000666:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800066a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800066e:	fa23 f002 	lsr.w	r0, r3, r2
 8000672:	bf18      	it	ne
 8000674:	4240      	negne	r0, r0
 8000676:	4770      	bx	lr
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	4770      	bx	lr
 800067e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000682:	d105      	bne.n	8000690 <__aeabi_d2iz+0x48>
 8000684:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000688:	bf08      	it	eq
 800068a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800068e:	4770      	bx	lr
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop

08000698 <__aeabi_uldivmod>:
 8000698:	b953      	cbnz	r3, 80006b0 <__aeabi_uldivmod+0x18>
 800069a:	b94a      	cbnz	r2, 80006b0 <__aeabi_uldivmod+0x18>
 800069c:	2900      	cmp	r1, #0
 800069e:	bf08      	it	eq
 80006a0:	2800      	cmpeq	r0, #0
 80006a2:	bf1c      	itt	ne
 80006a4:	f04f 31ff 	movne.w	r1, #4294967295
 80006a8:	f04f 30ff 	movne.w	r0, #4294967295
 80006ac:	f000 b970 	b.w	8000990 <__aeabi_idiv0>
 80006b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b8:	f000 f806 	bl	80006c8 <__udivmoddi4>
 80006bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c4:	b004      	add	sp, #16
 80006c6:	4770      	bx	lr

080006c8 <__udivmoddi4>:
 80006c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006cc:	9e08      	ldr	r6, [sp, #32]
 80006ce:	460d      	mov	r5, r1
 80006d0:	4604      	mov	r4, r0
 80006d2:	460f      	mov	r7, r1
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d14a      	bne.n	800076e <__udivmoddi4+0xa6>
 80006d8:	428a      	cmp	r2, r1
 80006da:	4694      	mov	ip, r2
 80006dc:	d965      	bls.n	80007aa <__udivmoddi4+0xe2>
 80006de:	fab2 f382 	clz	r3, r2
 80006e2:	b143      	cbz	r3, 80006f6 <__udivmoddi4+0x2e>
 80006e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80006e8:	f1c3 0220 	rsb	r2, r3, #32
 80006ec:	409f      	lsls	r7, r3
 80006ee:	fa20 f202 	lsr.w	r2, r0, r2
 80006f2:	4317      	orrs	r7, r2
 80006f4:	409c      	lsls	r4, r3
 80006f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80006fa:	fa1f f58c 	uxth.w	r5, ip
 80006fe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000702:	0c22      	lsrs	r2, r4, #16
 8000704:	fb0e 7711 	mls	r7, lr, r1, r7
 8000708:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800070c:	fb01 f005 	mul.w	r0, r1, r5
 8000710:	4290      	cmp	r0, r2
 8000712:	d90a      	bls.n	800072a <__udivmoddi4+0x62>
 8000714:	eb1c 0202 	adds.w	r2, ip, r2
 8000718:	f101 37ff 	add.w	r7, r1, #4294967295
 800071c:	f080 811c 	bcs.w	8000958 <__udivmoddi4+0x290>
 8000720:	4290      	cmp	r0, r2
 8000722:	f240 8119 	bls.w	8000958 <__udivmoddi4+0x290>
 8000726:	3902      	subs	r1, #2
 8000728:	4462      	add	r2, ip
 800072a:	1a12      	subs	r2, r2, r0
 800072c:	b2a4      	uxth	r4, r4
 800072e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000732:	fb0e 2210 	mls	r2, lr, r0, r2
 8000736:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800073a:	fb00 f505 	mul.w	r5, r0, r5
 800073e:	42a5      	cmp	r5, r4
 8000740:	d90a      	bls.n	8000758 <__udivmoddi4+0x90>
 8000742:	eb1c 0404 	adds.w	r4, ip, r4
 8000746:	f100 32ff 	add.w	r2, r0, #4294967295
 800074a:	f080 8107 	bcs.w	800095c <__udivmoddi4+0x294>
 800074e:	42a5      	cmp	r5, r4
 8000750:	f240 8104 	bls.w	800095c <__udivmoddi4+0x294>
 8000754:	4464      	add	r4, ip
 8000756:	3802      	subs	r0, #2
 8000758:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800075c:	1b64      	subs	r4, r4, r5
 800075e:	2100      	movs	r1, #0
 8000760:	b11e      	cbz	r6, 800076a <__udivmoddi4+0xa2>
 8000762:	40dc      	lsrs	r4, r3
 8000764:	2300      	movs	r3, #0
 8000766:	e9c6 4300 	strd	r4, r3, [r6]
 800076a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800076e:	428b      	cmp	r3, r1
 8000770:	d908      	bls.n	8000784 <__udivmoddi4+0xbc>
 8000772:	2e00      	cmp	r6, #0
 8000774:	f000 80ed 	beq.w	8000952 <__udivmoddi4+0x28a>
 8000778:	2100      	movs	r1, #0
 800077a:	e9c6 0500 	strd	r0, r5, [r6]
 800077e:	4608      	mov	r0, r1
 8000780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000784:	fab3 f183 	clz	r1, r3
 8000788:	2900      	cmp	r1, #0
 800078a:	d149      	bne.n	8000820 <__udivmoddi4+0x158>
 800078c:	42ab      	cmp	r3, r5
 800078e:	d302      	bcc.n	8000796 <__udivmoddi4+0xce>
 8000790:	4282      	cmp	r2, r0
 8000792:	f200 80f8 	bhi.w	8000986 <__udivmoddi4+0x2be>
 8000796:	1a84      	subs	r4, r0, r2
 8000798:	eb65 0203 	sbc.w	r2, r5, r3
 800079c:	2001      	movs	r0, #1
 800079e:	4617      	mov	r7, r2
 80007a0:	2e00      	cmp	r6, #0
 80007a2:	d0e2      	beq.n	800076a <__udivmoddi4+0xa2>
 80007a4:	e9c6 4700 	strd	r4, r7, [r6]
 80007a8:	e7df      	b.n	800076a <__udivmoddi4+0xa2>
 80007aa:	b902      	cbnz	r2, 80007ae <__udivmoddi4+0xe6>
 80007ac:	deff      	udf	#255	; 0xff
 80007ae:	fab2 f382 	clz	r3, r2
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 8090 	bne.w	80008d8 <__udivmoddi4+0x210>
 80007b8:	1a8a      	subs	r2, r1, r2
 80007ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007be:	fa1f fe8c 	uxth.w	lr, ip
 80007c2:	2101      	movs	r1, #1
 80007c4:	fbb2 f5f7 	udiv	r5, r2, r7
 80007c8:	fb07 2015 	mls	r0, r7, r5, r2
 80007cc:	0c22      	lsrs	r2, r4, #16
 80007ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80007d2:	fb0e f005 	mul.w	r0, lr, r5
 80007d6:	4290      	cmp	r0, r2
 80007d8:	d908      	bls.n	80007ec <__udivmoddi4+0x124>
 80007da:	eb1c 0202 	adds.w	r2, ip, r2
 80007de:	f105 38ff 	add.w	r8, r5, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0x122>
 80007e4:	4290      	cmp	r0, r2
 80007e6:	f200 80cb 	bhi.w	8000980 <__udivmoddi4+0x2b8>
 80007ea:	4645      	mov	r5, r8
 80007ec:	1a12      	subs	r2, r2, r0
 80007ee:	b2a4      	uxth	r4, r4
 80007f0:	fbb2 f0f7 	udiv	r0, r2, r7
 80007f4:	fb07 2210 	mls	r2, r7, r0, r2
 80007f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000800:	45a6      	cmp	lr, r4
 8000802:	d908      	bls.n	8000816 <__udivmoddi4+0x14e>
 8000804:	eb1c 0404 	adds.w	r4, ip, r4
 8000808:	f100 32ff 	add.w	r2, r0, #4294967295
 800080c:	d202      	bcs.n	8000814 <__udivmoddi4+0x14c>
 800080e:	45a6      	cmp	lr, r4
 8000810:	f200 80bb 	bhi.w	800098a <__udivmoddi4+0x2c2>
 8000814:	4610      	mov	r0, r2
 8000816:	eba4 040e 	sub.w	r4, r4, lr
 800081a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800081e:	e79f      	b.n	8000760 <__udivmoddi4+0x98>
 8000820:	f1c1 0720 	rsb	r7, r1, #32
 8000824:	408b      	lsls	r3, r1
 8000826:	fa22 fc07 	lsr.w	ip, r2, r7
 800082a:	ea4c 0c03 	orr.w	ip, ip, r3
 800082e:	fa05 f401 	lsl.w	r4, r5, r1
 8000832:	fa20 f307 	lsr.w	r3, r0, r7
 8000836:	40fd      	lsrs	r5, r7
 8000838:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800083c:	4323      	orrs	r3, r4
 800083e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000842:	fa1f fe8c 	uxth.w	lr, ip
 8000846:	fb09 5518 	mls	r5, r9, r8, r5
 800084a:	0c1c      	lsrs	r4, r3, #16
 800084c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000850:	fb08 f50e 	mul.w	r5, r8, lr
 8000854:	42a5      	cmp	r5, r4
 8000856:	fa02 f201 	lsl.w	r2, r2, r1
 800085a:	fa00 f001 	lsl.w	r0, r0, r1
 800085e:	d90b      	bls.n	8000878 <__udivmoddi4+0x1b0>
 8000860:	eb1c 0404 	adds.w	r4, ip, r4
 8000864:	f108 3aff 	add.w	sl, r8, #4294967295
 8000868:	f080 8088 	bcs.w	800097c <__udivmoddi4+0x2b4>
 800086c:	42a5      	cmp	r5, r4
 800086e:	f240 8085 	bls.w	800097c <__udivmoddi4+0x2b4>
 8000872:	f1a8 0802 	sub.w	r8, r8, #2
 8000876:	4464      	add	r4, ip
 8000878:	1b64      	subs	r4, r4, r5
 800087a:	b29d      	uxth	r5, r3
 800087c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000880:	fb09 4413 	mls	r4, r9, r3, r4
 8000884:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000888:	fb03 fe0e 	mul.w	lr, r3, lr
 800088c:	45a6      	cmp	lr, r4
 800088e:	d908      	bls.n	80008a2 <__udivmoddi4+0x1da>
 8000890:	eb1c 0404 	adds.w	r4, ip, r4
 8000894:	f103 35ff 	add.w	r5, r3, #4294967295
 8000898:	d26c      	bcs.n	8000974 <__udivmoddi4+0x2ac>
 800089a:	45a6      	cmp	lr, r4
 800089c:	d96a      	bls.n	8000974 <__udivmoddi4+0x2ac>
 800089e:	3b02      	subs	r3, #2
 80008a0:	4464      	add	r4, ip
 80008a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008a6:	fba3 9502 	umull	r9, r5, r3, r2
 80008aa:	eba4 040e 	sub.w	r4, r4, lr
 80008ae:	42ac      	cmp	r4, r5
 80008b0:	46c8      	mov	r8, r9
 80008b2:	46ae      	mov	lr, r5
 80008b4:	d356      	bcc.n	8000964 <__udivmoddi4+0x29c>
 80008b6:	d053      	beq.n	8000960 <__udivmoddi4+0x298>
 80008b8:	b156      	cbz	r6, 80008d0 <__udivmoddi4+0x208>
 80008ba:	ebb0 0208 	subs.w	r2, r0, r8
 80008be:	eb64 040e 	sbc.w	r4, r4, lr
 80008c2:	fa04 f707 	lsl.w	r7, r4, r7
 80008c6:	40ca      	lsrs	r2, r1
 80008c8:	40cc      	lsrs	r4, r1
 80008ca:	4317      	orrs	r7, r2
 80008cc:	e9c6 7400 	strd	r7, r4, [r6]
 80008d0:	4618      	mov	r0, r3
 80008d2:	2100      	movs	r1, #0
 80008d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d8:	f1c3 0120 	rsb	r1, r3, #32
 80008dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80008e0:	fa20 f201 	lsr.w	r2, r0, r1
 80008e4:	fa25 f101 	lsr.w	r1, r5, r1
 80008e8:	409d      	lsls	r5, r3
 80008ea:	432a      	orrs	r2, r5
 80008ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008f0:	fa1f fe8c 	uxth.w	lr, ip
 80008f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80008f8:	fb07 1510 	mls	r5, r7, r0, r1
 80008fc:	0c11      	lsrs	r1, r2, #16
 80008fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000902:	fb00 f50e 	mul.w	r5, r0, lr
 8000906:	428d      	cmp	r5, r1
 8000908:	fa04 f403 	lsl.w	r4, r4, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x258>
 800090e:	eb1c 0101 	adds.w	r1, ip, r1
 8000912:	f100 38ff 	add.w	r8, r0, #4294967295
 8000916:	d22f      	bcs.n	8000978 <__udivmoddi4+0x2b0>
 8000918:	428d      	cmp	r5, r1
 800091a:	d92d      	bls.n	8000978 <__udivmoddi4+0x2b0>
 800091c:	3802      	subs	r0, #2
 800091e:	4461      	add	r1, ip
 8000920:	1b49      	subs	r1, r1, r5
 8000922:	b292      	uxth	r2, r2
 8000924:	fbb1 f5f7 	udiv	r5, r1, r7
 8000928:	fb07 1115 	mls	r1, r7, r5, r1
 800092c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000930:	fb05 f10e 	mul.w	r1, r5, lr
 8000934:	4291      	cmp	r1, r2
 8000936:	d908      	bls.n	800094a <__udivmoddi4+0x282>
 8000938:	eb1c 0202 	adds.w	r2, ip, r2
 800093c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000940:	d216      	bcs.n	8000970 <__udivmoddi4+0x2a8>
 8000942:	4291      	cmp	r1, r2
 8000944:	d914      	bls.n	8000970 <__udivmoddi4+0x2a8>
 8000946:	3d02      	subs	r5, #2
 8000948:	4462      	add	r2, ip
 800094a:	1a52      	subs	r2, r2, r1
 800094c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000950:	e738      	b.n	80007c4 <__udivmoddi4+0xfc>
 8000952:	4631      	mov	r1, r6
 8000954:	4630      	mov	r0, r6
 8000956:	e708      	b.n	800076a <__udivmoddi4+0xa2>
 8000958:	4639      	mov	r1, r7
 800095a:	e6e6      	b.n	800072a <__udivmoddi4+0x62>
 800095c:	4610      	mov	r0, r2
 800095e:	e6fb      	b.n	8000758 <__udivmoddi4+0x90>
 8000960:	4548      	cmp	r0, r9
 8000962:	d2a9      	bcs.n	80008b8 <__udivmoddi4+0x1f0>
 8000964:	ebb9 0802 	subs.w	r8, r9, r2
 8000968:	eb65 0e0c 	sbc.w	lr, r5, ip
 800096c:	3b01      	subs	r3, #1
 800096e:	e7a3      	b.n	80008b8 <__udivmoddi4+0x1f0>
 8000970:	4645      	mov	r5, r8
 8000972:	e7ea      	b.n	800094a <__udivmoddi4+0x282>
 8000974:	462b      	mov	r3, r5
 8000976:	e794      	b.n	80008a2 <__udivmoddi4+0x1da>
 8000978:	4640      	mov	r0, r8
 800097a:	e7d1      	b.n	8000920 <__udivmoddi4+0x258>
 800097c:	46d0      	mov	r8, sl
 800097e:	e77b      	b.n	8000878 <__udivmoddi4+0x1b0>
 8000980:	3d02      	subs	r5, #2
 8000982:	4462      	add	r2, ip
 8000984:	e732      	b.n	80007ec <__udivmoddi4+0x124>
 8000986:	4608      	mov	r0, r1
 8000988:	e70a      	b.n	80007a0 <__udivmoddi4+0xd8>
 800098a:	4464      	add	r4, ip
 800098c:	3802      	subs	r0, #2
 800098e:	e742      	b.n	8000816 <__udivmoddi4+0x14e>

08000990 <__aeabi_idiv0>:
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b094      	sub	sp, #80	; 0x50
 8000998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099a:	f107 0318 	add.w	r3, r7, #24
 800099e:	2238      	movs	r2, #56	; 0x38
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f005 f8c8 	bl	8005b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f001 f8c6 	bl	8001b48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009bc:	2302      	movs	r3, #2
 80009be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c6:	2340      	movs	r3, #64	; 0x40
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ca:	2302      	movs	r3, #2
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ce:	2302      	movs	r3, #2
 80009d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80009d2:	2304      	movs	r3, #4
 80009d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80009d6:	2355      	movs	r3, #85	; 0x55
 80009d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009da:	2302      	movs	r3, #2
 80009dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009de:	2302      	movs	r3, #2
 80009e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e6:	f107 0318 	add.w	r3, r7, #24
 80009ea:	4618      	mov	r0, r3
 80009ec:	f001 f960 	bl	8001cb0 <HAL_RCC_OscConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80009f6:	f000 fb59 	bl	80010ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fa:	230f      	movs	r3, #15
 80009fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fe:	2303      	movs	r3, #3
 8000a00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2104      	movs	r1, #4
 8000a12:	4618      	mov	r0, r3
 8000a14:	f001 fc5e 	bl	80022d4 <HAL_RCC_ClockConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a1e:	f000 fb45 	bl	80010ac <Error_Handler>
  }
}
 8000a22:	bf00      	nop
 8000a24:	3750      	adds	r7, #80	; 0x50
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <MX_GPIO_Init>:

#include "gpio_configuration.h"


void MX_GPIO_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a42:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <MX_GPIO_Init+0xd4>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4a2e      	ldr	r2, [pc, #184]	; (8000b00 <MX_GPIO_Init+0xd4>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b2c      	ldr	r3, [pc, #176]	; (8000b00 <MX_GPIO_Init+0xd4>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a5a:	4b29      	ldr	r3, [pc, #164]	; (8000b00 <MX_GPIO_Init+0xd4>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a28      	ldr	r2, [pc, #160]	; (8000b00 <MX_GPIO_Init+0xd4>)
 8000a60:	f043 0320 	orr.w	r3, r3, #32
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <MX_GPIO_Init+0xd4>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0320 	and.w	r3, r3, #32
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <MX_GPIO_Init+0xd4>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	4a22      	ldr	r2, [pc, #136]	; (8000b00 <MX_GPIO_Init+0xd4>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7e:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <MX_GPIO_Init+0xd4>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <MX_GPIO_Init+0xd4>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <MX_GPIO_Init+0xd4>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_GPIO_Init+0xd4>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2123      	movs	r1, #35	; 0x23
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aaa:	f001 f811 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480f      	ldr	r0, [pc, #60]	; (8000b04 <MX_GPIO_Init+0xd8>)
 8000ac6:	f000 fe81 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin;
 8000aca:	2323      	movs	r3, #35	; 0x23
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae4:	f000 fe72 	bl	80017cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2100      	movs	r1, #0
 8000aec:	2028      	movs	r0, #40	; 0x28
 8000aee:	f000 fe45 	bl	800177c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000af2:	2028      	movs	r0, #40	; 0x28
 8000af4:	f000 fe5c 	bl	80017b0 <HAL_NVIC_EnableIRQ>

}
 8000af8:	bf00      	nop
 8000afa:	3728      	adds	r7, #40	; 0x28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40021000 	.word	0x40021000
 8000b04:	48000800 	.word	0x48000800

08000b08 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;


void MX_TIM1_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b09c      	sub	sp, #112	; 0x70
 8000b0c:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
 8000b38:	615a      	str	r2, [r3, #20]
 8000b3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2234      	movs	r2, #52	; 0x34
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f004 fff8 	bl	8005b38 <memset>

  htim1.Instance = TIM1;
 8000b48:	4b57      	ldr	r3, [pc, #348]	; (8000ca8 <MX_TIM1_Init+0x1a0>)
 8000b4a:	4a58      	ldr	r2, [pc, #352]	; (8000cac <MX_TIM1_Init+0x1a4>)
 8000b4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 172000-1;
 8000b4e:	4b56      	ldr	r3, [pc, #344]	; (8000ca8 <MX_TIM1_Init+0x1a0>)
 8000b50:	4a57      	ldr	r2, [pc, #348]	; (8000cb0 <MX_TIM1_Init+0x1a8>)
 8000b52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b54:	4b54      	ldr	r3, [pc, #336]	; (8000ca8 <MX_TIM1_Init+0x1a0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000b5a:	4b53      	ldr	r3, [pc, #332]	; (8000ca8 <MX_TIM1_Init+0x1a0>)
 8000b5c:	2263      	movs	r2, #99	; 0x63
 8000b5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b60:	4b51      	ldr	r3, [pc, #324]	; (8000ca8 <MX_TIM1_Init+0x1a0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b66:	4b50      	ldr	r3, [pc, #320]	; (8000ca8 <MX_TIM1_Init+0x1a0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6c:	4b4e      	ldr	r3, [pc, #312]	; (8000ca8 <MX_TIM1_Init+0x1a0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b72:	484d      	ldr	r0, [pc, #308]	; (8000ca8 <MX_TIM1_Init+0x1a0>)
 8000b74:	f002 f84a 	bl	8002c0c <HAL_TIM_Base_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b7e:	f000 fa95 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b86:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b88:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4846      	ldr	r0, [pc, #280]	; (8000ca8 <MX_TIM1_Init+0x1a0>)
 8000b90:	f002 fd54 	bl	800363c <HAL_TIM_ConfigClockSource>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b9a:	f000 fa87 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b9e:	4842      	ldr	r0, [pc, #264]	; (8000ca8 <MX_TIM1_Init+0x1a0>)
 8000ba0:	f002 f974 	bl	8002e8c <HAL_TIM_PWM_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000baa:	f000 fa7f 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4839      	ldr	r0, [pc, #228]	; (8000ca8 <MX_TIM1_Init+0x1a0>)
 8000bc2:	f003 fc3b 	bl	800443c <HAL_TIMEx_MasterConfigSynchronization>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000bcc:	f000 fa6e 	bl	80010ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd0:	2360      	movs	r3, #96	; 0x60
 8000bd2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000be8:	2300      	movs	r3, #0
 8000bea:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	482c      	ldr	r0, [pc, #176]	; (8000ca8 <MX_TIM1_Init+0x1a0>)
 8000bf6:	f002 fc0d 	bl	8003414 <HAL_TIM_PWM_ConfigChannel>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000c00:	f000 fa54 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c08:	2204      	movs	r2, #4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4826      	ldr	r0, [pc, #152]	; (8000ca8 <MX_TIM1_Init+0x1a0>)
 8000c0e:	f002 fc01 	bl	8003414 <HAL_TIM_PWM_ConfigChannel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000c18:	f000 fa48 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c20:	2208      	movs	r2, #8
 8000c22:	4619      	mov	r1, r3
 8000c24:	4820      	ldr	r0, [pc, #128]	; (8000ca8 <MX_TIM1_Init+0x1a0>)
 8000c26:	f002 fbf5 	bl	8003414 <HAL_TIM_PWM_ConfigChannel>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000c30:	f000 fa3c 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c38:	220c      	movs	r2, #12
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	481a      	ldr	r0, [pc, #104]	; (8000ca8 <MX_TIM1_Init+0x1a0>)
 8000c3e:	f002 fbe9 	bl	8003414 <HAL_TIM_PWM_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000c48:	f000 fa30 	bl	80010ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c64:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	4619      	mov	r1, r3
 8000c88:	4807      	ldr	r0, [pc, #28]	; (8000ca8 <MX_TIM1_Init+0x1a0>)
 8000c8a:	f003 fc6d 	bl	8004568 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8000c94:	f000 fa0a 	bl	80010ac <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8000c98:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <MX_TIM1_Init+0x1a0>)
 8000c9a:	f000 fb21 	bl	80012e0 <HAL_TIM_MspPostInit>

}
 8000c9e:	bf00      	nop
 8000ca0:	3770      	adds	r7, #112	; 0x70
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000078 	.word	0x20000078
 8000cac:	40012c00 	.word	0x40012c00
 8000cb0:	00029fdf 	.word	0x00029fdf

08000cb4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM8_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b088      	sub	sp, #32
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cba:	f107 030c 	add.w	r3, r7, #12
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cca:	463b      	mov	r3, r7
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000cd4:	4b23      	ldr	r3, [pc, #140]	; (8000d64 <MX_TIM8_Init+0xb0>)
 8000cd6:	4a24      	ldr	r2, [pc, #144]	; (8000d68 <MX_TIM8_Init+0xb4>)
 8000cd8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000cda:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <MX_TIM8_Init+0xb0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce0:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <MX_TIM8_Init+0xb0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <MX_TIM8_Init+0xb0>)
 8000ce8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cee:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <MX_TIM8_Init+0xb0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <MX_TIM8_Init+0xb0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <MX_TIM8_Init+0xb0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000d00:	4818      	ldr	r0, [pc, #96]	; (8000d64 <MX_TIM8_Init+0xb0>)
 8000d02:	f001 ff83 	bl	8002c0c <HAL_TIM_Base_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8000d0c:	f000 f9ce 	bl	80010ac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000d10:	2307      	movs	r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000d14:	2370      	movs	r3, #112	; 0x70
 8000d16:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480e      	ldr	r0, [pc, #56]	; (8000d64 <MX_TIM8_Init+0xb0>)
 8000d2c:	f002 fd9c 	bl	8003868 <HAL_TIM_SlaveConfigSynchro>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM8_Init+0x86>
  {
    Error_Handler();
 8000d36:	f000 f9b9 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d46:	463b      	mov	r3, r7
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4806      	ldr	r0, [pc, #24]	; (8000d64 <MX_TIM8_Init+0xb0>)
 8000d4c:	f003 fb76 	bl	800443c <HAL_TIMEx_MasterConfigSynchronization>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000d56:	f000 f9a9 	bl	80010ac <Error_Handler>
  }


}
 8000d5a:	bf00      	nop
 8000d5c:	3720      	adds	r7, #32
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200000c4 	.word	0x200000c4
 8000d68:	40013400 	.word	0x40013400

08000d6c <MX_LPUART1_UART_Init>:

 UART_HandleTypeDef huart1;
 UART_HandleTypeDef hlpuart1;

void MX_LPUART1_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8000d70:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000d72:	4a22      	ldr	r2, [pc, #136]	; (8000dfc <MX_LPUART1_UART_Init+0x90>)
 8000d74:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000d76:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000d78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d7c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d96:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9c:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000dae:	4812      	ldr	r0, [pc, #72]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000db0:	f003 fcb4 	bl	800471c <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dba:	f000 f977 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000dc2:	f004 fba5 	bl	8005510 <HAL_UARTEx_SetTxFifoThreshold>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000dcc:	f000 f96e 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4809      	ldr	r0, [pc, #36]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000dd4:	f004 fbda 	bl	800558c <HAL_UARTEx_SetRxFifoThreshold>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000dde:	f000 f965 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000de4:	f004 fb5b 	bl	800549e <HAL_UARTEx_DisableFifoMode>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000dee:	f000 f95d 	bl	80010ac <Error_Handler>
  }
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200001a4 	.word	0x200001a4
 8000dfc:	40008000 	.word	0x40008000

08000e00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000e04:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <MX_USART1_UART_Init+0x90>)
 8000e06:	4a23      	ldr	r2, [pc, #140]	; (8000e94 <MX_USART1_UART_Init+0x94>)
 8000e08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e0a:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <MX_USART1_UART_Init+0x90>)
 8000e0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <MX_USART1_UART_Init+0x90>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e18:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <MX_USART1_UART_Init+0x90>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <MX_USART1_UART_Init+0x90>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e24:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <MX_USART1_UART_Init+0x90>)
 8000e26:	220c      	movs	r2, #12
 8000e28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <MX_USART1_UART_Init+0x90>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e30:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <MX_USART1_UART_Init+0x90>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <MX_USART1_UART_Init+0x90>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <MX_USART1_UART_Init+0x90>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <MX_USART1_UART_Init+0x90>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e48:	4811      	ldr	r0, [pc, #68]	; (8000e90 <MX_USART1_UART_Init+0x90>)
 8000e4a:	f003 fc67 	bl	800471c <HAL_UART_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e54:	f000 f92a 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e58:	2100      	movs	r1, #0
 8000e5a:	480d      	ldr	r0, [pc, #52]	; (8000e90 <MX_USART1_UART_Init+0x90>)
 8000e5c:	f004 fb58 	bl	8005510 <HAL_UARTEx_SetTxFifoThreshold>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e66:	f000 f921 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4808      	ldr	r0, [pc, #32]	; (8000e90 <MX_USART1_UART_Init+0x90>)
 8000e6e:	f004 fb8d 	bl	800558c <HAL_UARTEx_SetRxFifoThreshold>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e78:	f000 f918 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e7c:	4804      	ldr	r0, [pc, #16]	; (8000e90 <MX_USART1_UART_Init+0x90>)
 8000e7e:	f004 fb0e 	bl	800549e <HAL_UARTEx_DisableFifoMode>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e88:	f000 f910 	bl	80010ac <Error_Handler>
  }

}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000110 	.word	0x20000110
 8000e94:	40013800 	.word	0x40013800

08000e98 <main>:


float rotate = 0;
float speed = 0;
int main(void)
{
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b09b      	sub	sp, #108	; 0x6c
 8000e9c:	af00      	add	r7, sp, #0

  HAL_Init();
 8000e9e:	f000 fb5c 	bl	800155a <HAL_Init>
  SystemClock_Config();
 8000ea2:	f7ff fd77 	bl	8000994 <SystemClock_Config>
  MX_GPIO_Init();
 8000ea6:	f7ff fdc1 	bl	8000a2c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000eaa:	f7ff ff5f 	bl	8000d6c <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000eae:	f7ff ffa7 	bl	8000e00 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000eb2:	f7ff fe29 	bl	8000b08 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000eb6:	f7ff fefd 	bl	8000cb4 <MX_TIM8_Init>

  HAL_TIM_Base_Start(&htim8);
 8000eba:	4863      	ldr	r0, [pc, #396]	; (8001048 <main+0x1b0>)
 8000ebc:	f001 fefe 	bl	8002cbc <HAL_TIM_Base_Start>
  /* USER CODE BEGIN 2 */

  static __IO uint16_t pulseCounter = 0;
  static __IO uint16_t previous_pulseCounter = 0;

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4862      	ldr	r0, [pc, #392]	; (800104c <main+0x1b4>)
 8000ec4:	f002 f844 	bl	8002f50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ec8:	2104      	movs	r1, #4
 8000eca:	4860      	ldr	r0, [pc, #384]	; (800104c <main+0x1b4>)
 8000ecc:	f002 f840 	bl	8002f50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ed0:	2108      	movs	r1, #8
 8000ed2:	485e      	ldr	r0, [pc, #376]	; (800104c <main+0x1b4>)
 8000ed4:	f002 f83c 	bl	8002f50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000ed8:	210c      	movs	r1, #12
 8000eda:	485c      	ldr	r0, [pc, #368]	; (800104c <main+0x1b4>)
 8000edc:	f002 f838 	bl	8002f50 <HAL_TIM_PWM_Start>


  TIM1->CCR1 = 40;
 8000ee0:	4b5b      	ldr	r3, [pc, #364]	; (8001050 <main+0x1b8>)
 8000ee2:	2228      	movs	r2, #40	; 0x28
 8000ee4:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 40;
 8000ee6:	4b5a      	ldr	r3, [pc, #360]	; (8001050 <main+0x1b8>)
 8000ee8:	2228      	movs	r2, #40	; 0x28
 8000eea:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 40;
 8000eec:	4b58      	ldr	r3, [pc, #352]	; (8001050 <main+0x1b8>)
 8000eee:	2228      	movs	r2, #40	; 0x28
 8000ef0:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 40;
 8000ef2:	4b57      	ldr	r3, [pc, #348]	; (8001050 <main+0x1b8>)
 8000ef4:	2228      	movs	r2, #40	; 0x28
 8000ef6:	641a      	str	r2, [r3, #64]	; 0x40



  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2101      	movs	r1, #1
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f00:	f000 fde6 	bl	8001ad0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2102      	movs	r1, #2
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0c:	f000 fde0 	bl	8001ad0 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  previous_pulseCounter = pulseCounter;
 8000f10:	4b50      	ldr	r3, [pc, #320]	; (8001054 <main+0x1bc>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	4b50      	ldr	r3, [pc, #320]	; (8001058 <main+0x1c0>)
 8000f18:	801a      	strh	r2, [r3, #0]
	  pulseCounter = __HAL_TIM_GET_COUNTER(&htim8);
 8000f1a:	4b4b      	ldr	r3, [pc, #300]	; (8001048 <main+0x1b0>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	4b4c      	ldr	r3, [pc, #304]	; (8001054 <main+0x1bc>)
 8000f24:	801a      	strh	r2, [r3, #0]
	  diff = (pulseCounter - previous_pulseCounter);
 8000f26:	4b4b      	ldr	r3, [pc, #300]	; (8001054 <main+0x1bc>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b4a      	ldr	r3, [pc, #296]	; (8001058 <main+0x1c0>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	4a49      	ldr	r2, [pc, #292]	; (800105c <main+0x1c4>)
 8000f38:	6013      	str	r3, [r2, #0]
	  speed = (pulseCounter - previous_pulseCounter)/20;
 8000f3a:	4b46      	ldr	r3, [pc, #280]	; (8001054 <main+0x1bc>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b45      	ldr	r3, [pc, #276]	; (8001058 <main+0x1c0>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	4a45      	ldr	r2, [pc, #276]	; (8001060 <main+0x1c8>)
 8000f4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f50:	10d2      	asrs	r2, r2, #3
 8000f52:	17db      	asrs	r3, r3, #31
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f5e:	4b41      	ldr	r3, [pc, #260]	; (8001064 <main+0x1cc>)
 8000f60:	edc3 7a00 	vstr	s15, [r3]

	  sprintf(message, "Dane to %d \n\r", (int)round(speed));
 8000f64:	4b3f      	ldr	r3, [pc, #252]	; (8001064 <main+0x1cc>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fb15 	bl	8000598 <__aeabi_f2d>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	ec43 2b10 	vmov	d0, r2, r3
 8000f76:	f005 feef 	bl	8006d58 <round>
 8000f7a:	ec53 2b10 	vmov	r2, r3, d0
 8000f7e:	4610      	mov	r0, r2
 8000f80:	4619      	mov	r1, r3
 8000f82:	f7ff fb61 	bl	8000648 <__aeabi_d2iz>
 8000f86:	4602      	mov	r2, r0
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	4937      	ldr	r1, [pc, #220]	; (8001068 <main+0x1d0>)
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f004 fd85 	bl	8005a9c <siprintf>
	  sprintf(&(message[strlen(message)]), "pulse to %d \n\r", (int)round(pulseCounter));
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff f943 	bl	8000220 <strlen>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	189c      	adds	r4, r3, r2
 8000fa0:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <main+0x1bc>)
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fad4 	bl	8000554 <__aeabi_ui2d>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f7ff fb48 	bl	8000648 <__aeabi_d2iz>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	461a      	mov	r2, r3
 8000fbc:	492b      	ldr	r1, [pc, #172]	; (800106c <main+0x1d4>)
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	f004 fd6c 	bl	8005a9c <siprintf>
	  sprintf(&(message[strlen(message)]), "roznica to %d \n\r", (int)round(diff));
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff f92a 	bl	8000220 <strlen>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	189c      	adds	r4, r3, r2
 8000fd2:	4b22      	ldr	r3, [pc, #136]	; (800105c <main+0x1c4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff facc 	bl	8000574 <__aeabi_i2d>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f7ff fb30 	bl	8000648 <__aeabi_d2iz>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	4920      	ldr	r1, [pc, #128]	; (8001070 <main+0x1d8>)
 8000fee:	4620      	mov	r0, r4
 8000ff0:	f004 fd54 	bl	8005a9c <siprintf>

	  HAL_UART_Receive(&hlpuart1, received_data, 3, 100);
 8000ff4:	2364      	movs	r3, #100	; 0x64
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	491e      	ldr	r1, [pc, #120]	; (8001074 <main+0x1dc>)
 8000ffa:	481f      	ldr	r0, [pc, #124]	; (8001078 <main+0x1e0>)
 8000ffc:	f003 fc6c 	bl	80048d8 <HAL_UART_Receive>
	  sscanf((char*)received_data, "%d", &received_data_int);
 8001000:	4a1e      	ldr	r2, [pc, #120]	; (800107c <main+0x1e4>)
 8001002:	491f      	ldr	r1, [pc, #124]	; (8001080 <main+0x1e8>)
 8001004:	481b      	ldr	r0, [pc, #108]	; (8001074 <main+0x1dc>)
 8001006:	f004 fd69 	bl	8005adc <siscanf>

	  sprintf(&(message[strlen(message)]), "to %d \n\r", received_data_int);
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff f907 	bl	8000220 <strlen>
 8001012:	4602      	mov	r2, r0
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	4413      	add	r3, r2
 8001018:	4a18      	ldr	r2, [pc, #96]	; (800107c <main+0x1e4>)
 800101a:	6812      	ldr	r2, [r2, #0]
 800101c:	4919      	ldr	r1, [pc, #100]	; (8001084 <main+0x1ec>)
 800101e:	4618      	mov	r0, r3
 8001020:	f004 fd3c 	bl	8005a9c <siprintf>

	  HAL_UART_Transmit(&hlpuart1, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff f8fa 	bl	8000220 <strlen>
 800102c:	4603      	mov	r3, r0
 800102e:	b29a      	uxth	r2, r3
 8001030:	1d39      	adds	r1, r7, #4
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	4810      	ldr	r0, [pc, #64]	; (8001078 <main+0x1e0>)
 8001038:	f003 fbc0 	bl	80047bc <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800103c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001040:	f000 fac2 	bl	80015c8 <HAL_Delay>
  {
 8001044:	e764      	b.n	8000f10 <main+0x78>
 8001046:	bf00      	nop
 8001048:	200000c4 	.word	0x200000c4
 800104c:	20000078 	.word	0x20000078
 8001050:	40012c00 	.word	0x40012c00
 8001054:	2000023c 	.word	0x2000023c
 8001058:	2000023e 	.word	0x2000023e
 800105c:	20000240 	.word	0x20000240
 8001060:	66666667 	.word	0x66666667
 8001064:	20000238 	.word	0x20000238
 8001068:	08006e00 	.word	0x08006e00
 800106c:	08006e10 	.word	0x08006e10
 8001070:	08006e20 	.word	0x08006e20
 8001074:	20000244 	.word	0x20000244
 8001078:	200001a4 	.word	0x200001a4
 800107c:	20000248 	.word	0x20000248
 8001080:	08006e34 	.word	0x08006e34
 8001084:	08006e38 	.word	0x08006e38

08001088 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d101      	bne.n	800109e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800109a:	f000 fa77 	bl	800158c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40001000 	.word	0x40001000

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <Error_Handler+0x8>
	...

080010b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <HAL_MspInit+0x44>)
 80010c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <HAL_MspInit+0x44>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <HAL_MspInit+0x44>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_MspInit+0x44>)
 80010d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <HAL_MspInit+0x44>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	6593      	str	r3, [r2, #88]	; 0x58
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_MspInit+0x44>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010ee:	f000 fdcf 	bl	8001c90 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000

08001100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0a0      	sub	sp, #128	; 0x80
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001118:	f107 0318 	add.w	r3, r7, #24
 800111c:	2254      	movs	r2, #84	; 0x54
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f004 fd09 	bl	8005b38 <memset>
  if(huart->Instance==LPUART1)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a3d      	ldr	r2, [pc, #244]	; (8001220 <HAL_UART_MspInit+0x120>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d137      	bne.n	80011a0 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001130:	2320      	movs	r3, #32
 8001132:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001134:	2300      	movs	r3, #0
 8001136:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001138:	f107 0318 	add.w	r3, r7, #24
 800113c:	4618      	mov	r0, r3
 800113e:	f001 fb17 	bl	8002770 <HAL_RCCEx_PeriphCLKConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001148:	f7ff ffb0 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800114c:	4b35      	ldr	r3, [pc, #212]	; (8001224 <HAL_UART_MspInit+0x124>)
 800114e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001150:	4a34      	ldr	r2, [pc, #208]	; (8001224 <HAL_UART_MspInit+0x124>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001158:	4b32      	ldr	r3, [pc, #200]	; (8001224 <HAL_UART_MspInit+0x124>)
 800115a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <HAL_UART_MspInit+0x124>)
 8001166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001168:	4a2e      	ldr	r2, [pc, #184]	; (8001224 <HAL_UART_MspInit+0x124>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001170:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <HAL_UART_MspInit+0x124>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800117c:	230c      	movs	r3, #12
 800117e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800118c:	230c      	movs	r3, #12
 800118e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001194:	4619      	mov	r1, r3
 8001196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119a:	f000 fb17 	bl	80017cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800119e:	e03a      	b.n	8001216 <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a20      	ldr	r2, [pc, #128]	; (8001228 <HAL_UART_MspInit+0x128>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d135      	bne.n	8001216 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b2:	f107 0318 	add.w	r3, r7, #24
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 fada 	bl	8002770 <HAL_RCCEx_PeriphCLKConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80011c2:	f7ff ff73 	bl	80010ac <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_UART_MspInit+0x124>)
 80011c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ca:	4a16      	ldr	r2, [pc, #88]	; (8001224 <HAL_UART_MspInit+0x124>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6613      	str	r3, [r2, #96]	; 0x60
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_UART_MspInit+0x124>)
 80011d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_UART_MspInit+0x124>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	4a10      	ldr	r2, [pc, #64]	; (8001224 <HAL_UART_MspInit+0x124>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_UART_MspInit+0x124>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011f6:	2330      	movs	r3, #48	; 0x30
 80011f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001206:	2307      	movs	r3, #7
 8001208:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800120e:	4619      	mov	r1, r3
 8001210:	4806      	ldr	r0, [pc, #24]	; (800122c <HAL_UART_MspInit+0x12c>)
 8001212:	f000 fadb 	bl	80017cc <HAL_GPIO_Init>
}
 8001216:	bf00      	nop
 8001218:	3780      	adds	r7, #128	; 0x80
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40008000 	.word	0x40008000
 8001224:	40021000 	.word	0x40021000
 8001228:	40013800 	.word	0x40013800
 800122c:	48000800 	.word	0x48000800

08001230 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a20      	ldr	r2, [pc, #128]	; (80012d0 <HAL_TIM_Base_MspInit+0xa0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d10c      	bne.n	800126c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001256:	4a1f      	ldr	r2, [pc, #124]	; (80012d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001258:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800125c:	6613      	str	r3, [r2, #96]	; 0x60
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800126a:	e02c      	b.n	80012c6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <HAL_TIM_Base_MspInit+0xa8>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d127      	bne.n	80012c6 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127a:	4a16      	ldr	r2, [pc, #88]	; (80012d4 <HAL_TIM_Base_MspInit+0xa4>)
 800127c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001280:	6613      	str	r3, [r2, #96]	; 0x60
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a10      	ldr	r2, [pc, #64]	; (80012d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HAL_TIM_Base_MspInit+0xa4>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012a6:	2340      	movs	r3, #64	; 0x40
 80012a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM8;
 80012b6:	2306      	movs	r3, #6
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <HAL_TIM_Base_MspInit+0xac>)
 80012c2:	f000 fa83 	bl	80017cc <HAL_GPIO_Init>
}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	; 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40012c00 	.word	0x40012c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40013400 	.word	0x40013400
 80012dc:	48000400 	.word	0x48000400

080012e0 <HAL_TIM_MspPostInit>:
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a11      	ldr	r2, [pc, #68]	; (8001344 <HAL_TIM_MspPostInit+0x64>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d11b      	bne.n	800133a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_TIM_MspPostInit+0x68>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	4a10      	ldr	r2, [pc, #64]	; (8001348 <HAL_TIM_MspPostInit+0x68>)
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <HAL_TIM_MspPostInit+0x68>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800131a:	230f      	movs	r3, #15
 800131c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800132a:	2302      	movs	r3, #2
 800132c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <HAL_TIM_MspPostInit+0x6c>)
 8001336:	f000 fa49 	bl	80017cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40012c00 	.word	0x40012c00
 8001348:	40021000 	.word	0x40021000
 800134c:	48000800 	.word	0x48000800

08001350 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08c      	sub	sp, #48	; 0x30
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001360:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <HAL_InitTick+0xc4>)
 8001362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001364:	4a2b      	ldr	r2, [pc, #172]	; (8001414 <HAL_InitTick+0xc4>)
 8001366:	f043 0310 	orr.w	r3, r3, #16
 800136a:	6593      	str	r3, [r2, #88]	; 0x58
 800136c:	4b29      	ldr	r3, [pc, #164]	; (8001414 <HAL_InitTick+0xc4>)
 800136e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001370:	f003 0310 	and.w	r3, r3, #16
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001378:	f107 020c 	add.w	r2, r7, #12
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f001 f97c 	bl	8002680 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001388:	f001 f94e 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 800138c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800138e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001390:	4a21      	ldr	r2, [pc, #132]	; (8001418 <HAL_InitTick+0xc8>)
 8001392:	fba2 2303 	umull	r2, r3, r2, r3
 8001396:	0c9b      	lsrs	r3, r3, #18
 8001398:	3b01      	subs	r3, #1
 800139a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800139c:	4b1f      	ldr	r3, [pc, #124]	; (800141c <HAL_InitTick+0xcc>)
 800139e:	4a20      	ldr	r2, [pc, #128]	; (8001420 <HAL_InitTick+0xd0>)
 80013a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013a2:	4b1e      	ldr	r3, [pc, #120]	; (800141c <HAL_InitTick+0xcc>)
 80013a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013a8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013aa:	4a1c      	ldr	r2, [pc, #112]	; (800141c <HAL_InitTick+0xcc>)
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <HAL_InitTick+0xcc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <HAL_InitTick+0xcc>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80013bc:	4817      	ldr	r0, [pc, #92]	; (800141c <HAL_InitTick+0xcc>)
 80013be:	f001 fc25 	bl	8002c0c <HAL_TIM_Base_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80013c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d11b      	bne.n	8001408 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013d0:	4812      	ldr	r0, [pc, #72]	; (800141c <HAL_InitTick+0xcc>)
 80013d2:	f001 fce3 	bl	8002d9c <HAL_TIM_Base_Start_IT>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80013dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d111      	bne.n	8001408 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013e4:	2036      	movs	r0, #54	; 0x36
 80013e6:	f000 f9e3 	bl	80017b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	d808      	bhi.n	8001402 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80013f0:	2200      	movs	r2, #0
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	2036      	movs	r0, #54	; 0x36
 80013f6:	f000 f9c1 	bl	800177c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <HAL_InitTick+0xd4>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	e002      	b.n	8001408 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001408:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800140c:	4618      	mov	r0, r3
 800140e:	3730      	adds	r7, #48	; 0x30
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40021000 	.word	0x40021000
 8001418:	431bde83 	.word	0x431bde83
 800141c:	2000024c 	.word	0x2000024c
 8001420:	40001000 	.word	0x40001000
 8001424:	20000004 	.word	0x20000004

08001428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800142c:	e7fe      	b.n	800142c <NMI_Handler+0x4>

0800142e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <HardFault_Handler+0x4>

08001434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <MemManage_Handler+0x4>

0800143a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <BusFault_Handler+0x4>

08001440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <UsageFault_Handler+0x4>

08001446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001458:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800145c:	f000 fb50 	bl	8001b00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}

08001464 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <TIM6_DAC_IRQHandler+0x10>)
 800146a:	f001 fe83 	bl	8003174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000024c 	.word	0x2000024c

08001478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001480:	4a14      	ldr	r2, [pc, #80]	; (80014d4 <_sbrk+0x5c>)
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <_sbrk+0x60>)
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800148c:	4b13      	ldr	r3, [pc, #76]	; (80014dc <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <_sbrk+0x64>)
 8001496:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <_sbrk+0x68>)
 8001498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d207      	bcs.n	80014b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a8:	f004 fb4e 	bl	8005b48 <__errno>
 80014ac:	4603      	mov	r3, r0
 80014ae:	220c      	movs	r2, #12
 80014b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	e009      	b.n	80014cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b8:	4b08      	ldr	r3, [pc, #32]	; (80014dc <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014be:	4b07      	ldr	r3, [pc, #28]	; (80014dc <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	4a05      	ldr	r2, [pc, #20]	; (80014dc <_sbrk+0x64>)
 80014c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ca:	68fb      	ldr	r3, [r7, #12]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20020000 	.word	0x20020000
 80014d8:	00000400 	.word	0x00000400
 80014dc:	20000298 	.word	0x20000298
 80014e0:	20000478 	.word	0x20000478

080014e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <SystemInit+0x20>)
 80014ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ee:	4a05      	ldr	r2, [pc, #20]	; (8001504 <SystemInit+0x20>)
 80014f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001508:	480d      	ldr	r0, [pc, #52]	; (8001540 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800150a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800150c:	f7ff ffea 	bl	80014e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001510:	480c      	ldr	r0, [pc, #48]	; (8001544 <LoopForever+0x6>)
  ldr r1, =_edata
 8001512:	490d      	ldr	r1, [pc, #52]	; (8001548 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001514:	4a0d      	ldr	r2, [pc, #52]	; (800154c <LoopForever+0xe>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001528:	4c0a      	ldr	r4, [pc, #40]	; (8001554 <LoopForever+0x16>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001536:	f004 fb0d 	bl	8005b54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800153a:	f7ff fcad 	bl	8000e98 <main>

0800153e <LoopForever>:

LoopForever:
    b LoopForever
 800153e:	e7fe      	b.n	800153e <LoopForever>
  ldr   r0, =_estack
 8001540:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001548:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800154c:	08006ff0 	.word	0x08006ff0
  ldr r2, =_sbss
 8001550:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001554:	20000474 	.word	0x20000474

08001558 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC1_2_IRQHandler>

0800155a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f000 f8fe 	bl	8001766 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800156a:	200f      	movs	r0, #15
 800156c:	f7ff fef0 	bl	8001350 <HAL_InitTick>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d002      	beq.n	800157c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	71fb      	strb	r3, [r7, #7]
 800157a:	e001      	b.n	8001580 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800157c:	f7ff fd9c 	bl	80010b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001580:	79fb      	ldrb	r3, [r7, #7]

}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <HAL_IncTick+0x1c>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_IncTick+0x20>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4413      	add	r3, r2
 800159a:	4a03      	ldr	r2, [pc, #12]	; (80015a8 <HAL_IncTick+0x1c>)
 800159c:	6013      	str	r3, [r2, #0]
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	2000029c 	.word	0x2000029c
 80015ac:	20000008 	.word	0x20000008

080015b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return uwTick;
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <HAL_GetTick+0x14>)
 80015b6:	681b      	ldr	r3, [r3, #0]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	2000029c 	.word	0x2000029c

080015c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d0:	f7ff ffee 	bl	80015b0 <HAL_GetTick>
 80015d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e0:	d004      	beq.n	80015ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_Delay+0x40>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	4413      	add	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ec:	bf00      	nop
 80015ee:	f7ff ffdf 	bl	80015b0 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d8f7      	bhi.n	80015ee <HAL_Delay+0x26>
  {
  }
}
 80015fe:	bf00      	nop
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000008 	.word	0x20000008

0800160c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001628:	4013      	ands	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163e:	4a04      	ldr	r2, [pc, #16]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	60d3      	str	r3, [r2, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <__NVIC_GetPriorityGrouping+0x18>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	f003 0307 	and.w	r3, r3, #7
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	2b00      	cmp	r3, #0
 8001680:	db0b      	blt.n	800169a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	f003 021f 	and.w	r2, r3, #31
 8001688:	4907      	ldr	r1, [pc, #28]	; (80016a8 <__NVIC_EnableIRQ+0x38>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	2001      	movs	r0, #1
 8001692:	fa00 f202 	lsl.w	r2, r0, r2
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000e100 	.word	0xe000e100

080016ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	6039      	str	r1, [r7, #0]
 80016b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	db0a      	blt.n	80016d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	490c      	ldr	r1, [pc, #48]	; (80016f8 <__NVIC_SetPriority+0x4c>)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	0112      	lsls	r2, r2, #4
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	440b      	add	r3, r1
 80016d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d4:	e00a      	b.n	80016ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4908      	ldr	r1, [pc, #32]	; (80016fc <__NVIC_SetPriority+0x50>)
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	3b04      	subs	r3, #4
 80016e4:	0112      	lsls	r2, r2, #4
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	440b      	add	r3, r1
 80016ea:	761a      	strb	r2, [r3, #24]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000e100 	.word	0xe000e100
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001700:	b480      	push	{r7}
 8001702:	b089      	sub	sp, #36	; 0x24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f1c3 0307 	rsb	r3, r3, #7
 800171a:	2b04      	cmp	r3, #4
 800171c:	bf28      	it	cs
 800171e:	2304      	movcs	r3, #4
 8001720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3304      	adds	r3, #4
 8001726:	2b06      	cmp	r3, #6
 8001728:	d902      	bls.n	8001730 <NVIC_EncodePriority+0x30>
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3b03      	subs	r3, #3
 800172e:	e000      	b.n	8001732 <NVIC_EncodePriority+0x32>
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	f04f 32ff 	mov.w	r2, #4294967295
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43da      	mvns	r2, r3
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	401a      	ands	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001748:	f04f 31ff 	mov.w	r1, #4294967295
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	43d9      	mvns	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	4313      	orrs	r3, r2
         );
}
 800175a:	4618      	mov	r0, r3
 800175c:	3724      	adds	r7, #36	; 0x24
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ff4c 	bl	800160c <__NVIC_SetPriorityGrouping>
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
 8001788:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800178a:	f7ff ff63 	bl	8001654 <__NVIC_GetPriorityGrouping>
 800178e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	68b9      	ldr	r1, [r7, #8]
 8001794:	6978      	ldr	r0, [r7, #20]
 8001796:	f7ff ffb3 	bl	8001700 <NVIC_EncodePriority>
 800179a:	4602      	mov	r2, r0
 800179c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff ff82 	bl	80016ac <__NVIC_SetPriority>
}
 80017a8:	bf00      	nop
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ff56 	bl	8001670 <__NVIC_EnableIRQ>
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017da:	e15a      	b.n	8001a92 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	2101      	movs	r1, #1
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	4013      	ands	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 814c 	beq.w	8001a8c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d005      	beq.n	800180c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001808:	2b02      	cmp	r3, #2
 800180a:	d130      	bne.n	800186e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	2203      	movs	r2, #3
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001842:	2201      	movs	r2, #1
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	091b      	lsrs	r3, r3, #4
 8001858:	f003 0201 	and.w	r2, r3, #1
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b03      	cmp	r3, #3
 8001878:	d017      	beq.n	80018aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	2203      	movs	r2, #3
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d123      	bne.n	80018fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	08da      	lsrs	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3208      	adds	r2, #8
 80018be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	220f      	movs	r2, #15
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	691a      	ldr	r2, [r3, #16]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	08da      	lsrs	r2, r3, #3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3208      	adds	r2, #8
 80018f8:	6939      	ldr	r1, [r7, #16]
 80018fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	2203      	movs	r2, #3
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0203 	and.w	r2, r3, #3
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 80a6 	beq.w	8001a8c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001940:	4b5b      	ldr	r3, [pc, #364]	; (8001ab0 <HAL_GPIO_Init+0x2e4>)
 8001942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001944:	4a5a      	ldr	r2, [pc, #360]	; (8001ab0 <HAL_GPIO_Init+0x2e4>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6613      	str	r3, [r2, #96]	; 0x60
 800194c:	4b58      	ldr	r3, [pc, #352]	; (8001ab0 <HAL_GPIO_Init+0x2e4>)
 800194e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001958:	4a56      	ldr	r2, [pc, #344]	; (8001ab4 <HAL_GPIO_Init+0x2e8>)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	3302      	adds	r3, #2
 8001960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	220f      	movs	r2, #15
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001982:	d01f      	beq.n	80019c4 <HAL_GPIO_Init+0x1f8>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a4c      	ldr	r2, [pc, #304]	; (8001ab8 <HAL_GPIO_Init+0x2ec>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d019      	beq.n	80019c0 <HAL_GPIO_Init+0x1f4>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a4b      	ldr	r2, [pc, #300]	; (8001abc <HAL_GPIO_Init+0x2f0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d013      	beq.n	80019bc <HAL_GPIO_Init+0x1f0>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a4a      	ldr	r2, [pc, #296]	; (8001ac0 <HAL_GPIO_Init+0x2f4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d00d      	beq.n	80019b8 <HAL_GPIO_Init+0x1ec>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a49      	ldr	r2, [pc, #292]	; (8001ac4 <HAL_GPIO_Init+0x2f8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d007      	beq.n	80019b4 <HAL_GPIO_Init+0x1e8>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a48      	ldr	r2, [pc, #288]	; (8001ac8 <HAL_GPIO_Init+0x2fc>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d101      	bne.n	80019b0 <HAL_GPIO_Init+0x1e4>
 80019ac:	2305      	movs	r3, #5
 80019ae:	e00a      	b.n	80019c6 <HAL_GPIO_Init+0x1fa>
 80019b0:	2306      	movs	r3, #6
 80019b2:	e008      	b.n	80019c6 <HAL_GPIO_Init+0x1fa>
 80019b4:	2304      	movs	r3, #4
 80019b6:	e006      	b.n	80019c6 <HAL_GPIO_Init+0x1fa>
 80019b8:	2303      	movs	r3, #3
 80019ba:	e004      	b.n	80019c6 <HAL_GPIO_Init+0x1fa>
 80019bc:	2302      	movs	r3, #2
 80019be:	e002      	b.n	80019c6 <HAL_GPIO_Init+0x1fa>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <HAL_GPIO_Init+0x1fa>
 80019c4:	2300      	movs	r3, #0
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	f002 0203 	and.w	r2, r2, #3
 80019cc:	0092      	lsls	r2, r2, #2
 80019ce:	4093      	lsls	r3, r2
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019d6:	4937      	ldr	r1, [pc, #220]	; (8001ab4 <HAL_GPIO_Init+0x2e8>)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	3302      	adds	r3, #2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019e4:	4b39      	ldr	r3, [pc, #228]	; (8001acc <HAL_GPIO_Init+0x300>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a08:	4a30      	ldr	r2, [pc, #192]	; (8001acc <HAL_GPIO_Init+0x300>)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a0e:	4b2f      	ldr	r3, [pc, #188]	; (8001acc <HAL_GPIO_Init+0x300>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a32:	4a26      	ldr	r2, [pc, #152]	; (8001acc <HAL_GPIO_Init+0x300>)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <HAL_GPIO_Init+0x300>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a5c:	4a1b      	ldr	r2, [pc, #108]	; (8001acc <HAL_GPIO_Init+0x300>)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <HAL_GPIO_Init+0x300>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a86:	4a11      	ldr	r2, [pc, #68]	; (8001acc <HAL_GPIO_Init+0x300>)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f47f ae9d 	bne.w	80017dc <HAL_GPIO_Init+0x10>
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	bf00      	nop
 8001aa6:	371c      	adds	r7, #28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40010000 	.word	0x40010000
 8001ab8:	48000400 	.word	0x48000400
 8001abc:	48000800 	.word	0x48000800
 8001ac0:	48000c00 	.word	0x48000c00
 8001ac4:	48001000 	.word	0x48001000
 8001ac8:	48001400 	.word	0x48001400
 8001acc:	40010400 	.word	0x40010400

08001ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]
 8001adc:	4613      	mov	r3, r2
 8001ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae0:	787b      	ldrb	r3, [r7, #1]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ae6:	887a      	ldrh	r2, [r7, #2]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aec:	e002      	b.n	8001af4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b0c:	695a      	ldr	r2, [r3, #20]
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d006      	beq.n	8001b24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f806 	bl	8001b30 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40010400 	.word	0x40010400

08001b30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d141      	bne.n	8001bda <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b56:	4b4b      	ldr	r3, [pc, #300]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b62:	d131      	bne.n	8001bc8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b64:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b6a:	4a46      	ldr	r2, [pc, #280]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b74:	4b43      	ldr	r3, [pc, #268]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b7c:	4a41      	ldr	r2, [pc, #260]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b84:	4b40      	ldr	r3, [pc, #256]	; (8001c88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2232      	movs	r2, #50	; 0x32
 8001b8a:	fb02 f303 	mul.w	r3, r2, r3
 8001b8e:	4a3f      	ldr	r2, [pc, #252]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b90:	fba2 2303 	umull	r2, r3, r2, r3
 8001b94:	0c9b      	lsrs	r3, r3, #18
 8001b96:	3301      	adds	r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b9a:	e002      	b.n	8001ba2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ba2:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bae:	d102      	bne.n	8001bb6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f2      	bne.n	8001b9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bb6:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc2:	d158      	bne.n	8001c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e057      	b.n	8001c78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bc8:	4b2e      	ldr	r3, [pc, #184]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bce:	4a2d      	ldr	r2, [pc, #180]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001bd8:	e04d      	b.n	8001c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be0:	d141      	bne.n	8001c66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001be2:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bee:	d131      	bne.n	8001c54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bf0:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bf6:	4a23      	ldr	r2, [pc, #140]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c00:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c08:	4a1e      	ldr	r2, [pc, #120]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2232      	movs	r2, #50	; 0x32
 8001c16:	fb02 f303 	mul.w	r3, r2, r3
 8001c1a:	4a1c      	ldr	r2, [pc, #112]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c20:	0c9b      	lsrs	r3, r3, #18
 8001c22:	3301      	adds	r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c26:	e002      	b.n	8001c2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c3a:	d102      	bne.n	8001c42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f2      	bne.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c4e:	d112      	bne.n	8001c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e011      	b.n	8001c78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c64:	e007      	b.n	8001c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c74:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	40007000 	.word	0x40007000
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	431bde83 	.word	0x431bde83

08001c90 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	4a04      	ldr	r2, [pc, #16]	; (8001cac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c9e:	6093      	str	r3, [r2, #8]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40007000 	.word	0x40007000

08001cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e2fe      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d075      	beq.n	8001dba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cce:	4b97      	ldr	r3, [pc, #604]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cd8:	4b94      	ldr	r3, [pc, #592]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	2b0c      	cmp	r3, #12
 8001ce6:	d102      	bne.n	8001cee <HAL_RCC_OscConfig+0x3e>
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d002      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x44>
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d10b      	bne.n	8001d0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf4:	4b8d      	ldr	r3, [pc, #564]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d05b      	beq.n	8001db8 <HAL_RCC_OscConfig+0x108>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d157      	bne.n	8001db8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e2d9      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d14:	d106      	bne.n	8001d24 <HAL_RCC_OscConfig+0x74>
 8001d16:	4b85      	ldr	r3, [pc, #532]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a84      	ldr	r2, [pc, #528]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e01d      	b.n	8001d60 <HAL_RCC_OscConfig+0xb0>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x98>
 8001d2e:	4b7f      	ldr	r3, [pc, #508]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a7e      	ldr	r2, [pc, #504]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	4b7c      	ldr	r3, [pc, #496]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a7b      	ldr	r2, [pc, #492]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e00b      	b.n	8001d60 <HAL_RCC_OscConfig+0xb0>
 8001d48:	4b78      	ldr	r3, [pc, #480]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a77      	ldr	r2, [pc, #476]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	4b75      	ldr	r3, [pc, #468]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a74      	ldr	r2, [pc, #464]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d013      	beq.n	8001d90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7ff fc22 	bl	80015b0 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d70:	f7ff fc1e 	bl	80015b0 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	; 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e29e      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d82:	4b6a      	ldr	r3, [pc, #424]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0xc0>
 8001d8e:	e014      	b.n	8001dba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d90:	f7ff fc0e 	bl	80015b0 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff fc0a 	bl	80015b0 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	; 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e28a      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001daa:	4b60      	ldr	r3, [pc, #384]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0xe8>
 8001db6:	e000      	b.n	8001dba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d075      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc6:	4b59      	ldr	r3, [pc, #356]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd0:	4b56      	ldr	r3, [pc, #344]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	2b0c      	cmp	r3, #12
 8001dde:	d102      	bne.n	8001de6 <HAL_RCC_OscConfig+0x136>
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d002      	beq.n	8001dec <HAL_RCC_OscConfig+0x13c>
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d11f      	bne.n	8001e2c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dec:	4b4f      	ldr	r3, [pc, #316]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_OscConfig+0x154>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e25d      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e04:	4b49      	ldr	r3, [pc, #292]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	061b      	lsls	r3, r3, #24
 8001e12:	4946      	ldr	r1, [pc, #280]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e18:	4b45      	ldr	r3, [pc, #276]	; (8001f30 <HAL_RCC_OscConfig+0x280>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fa97 	bl	8001350 <HAL_InitTick>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d043      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e249      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d023      	beq.n	8001e7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e34:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a3c      	ldr	r2, [pc, #240]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7ff fbb6 	bl	80015b0 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e48:	f7ff fbb2 	bl	80015b0 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e232      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e5a:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e66:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	061b      	lsls	r3, r3, #24
 8001e74:	492d      	ldr	r1, [pc, #180]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	604b      	str	r3, [r1, #4]
 8001e7a:	e01a      	b.n	8001eb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7c:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a2a      	ldr	r2, [pc, #168]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001e82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7ff fb92 	bl	80015b0 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e90:	f7ff fb8e 	bl	80015b0 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e20e      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ea2:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x1e0>
 8001eae:	e000      	b.n	8001eb2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d041      	beq.n	8001f42 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d01c      	beq.n	8001f00 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ecc:	4a17      	ldr	r2, [pc, #92]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed6:	f7ff fb6b 	bl	80015b0 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ede:	f7ff fb67 	bl	80015b0 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e1e7      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0ef      	beq.n	8001ede <HAL_RCC_OscConfig+0x22e>
 8001efe:	e020      	b.n	8001f42 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f00:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f06:	4a09      	ldr	r2, [pc, #36]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f10:	f7ff fb4e 	bl	80015b0 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f16:	e00d      	b.n	8001f34 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f18:	f7ff fb4a 	bl	80015b0 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d906      	bls.n	8001f34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e1ca      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f34:	4b8c      	ldr	r3, [pc, #560]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1ea      	bne.n	8001f18 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 80a6 	beq.w	800209c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f50:	2300      	movs	r3, #0
 8001f52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f54:	4b84      	ldr	r3, [pc, #528]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_OscConfig+0x2b4>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <HAL_RCC_OscConfig+0x2b6>
 8001f64:	2300      	movs	r3, #0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00d      	beq.n	8001f86 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	4b7f      	ldr	r3, [pc, #508]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6e:	4a7e      	ldr	r2, [pc, #504]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f74:	6593      	str	r3, [r2, #88]	; 0x58
 8001f76:	4b7c      	ldr	r3, [pc, #496]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f82:	2301      	movs	r3, #1
 8001f84:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f86:	4b79      	ldr	r3, [pc, #484]	; (800216c <HAL_RCC_OscConfig+0x4bc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d118      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f92:	4b76      	ldr	r3, [pc, #472]	; (800216c <HAL_RCC_OscConfig+0x4bc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a75      	ldr	r2, [pc, #468]	; (800216c <HAL_RCC_OscConfig+0x4bc>)
 8001f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9e:	f7ff fb07 	bl	80015b0 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa6:	f7ff fb03 	bl	80015b0 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e183      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb8:	4b6c      	ldr	r3, [pc, #432]	; (800216c <HAL_RCC_OscConfig+0x4bc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d108      	bne.n	8001fde <HAL_RCC_OscConfig+0x32e>
 8001fcc:	4b66      	ldr	r3, [pc, #408]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd2:	4a65      	ldr	r2, [pc, #404]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fdc:	e024      	b.n	8002028 <HAL_RCC_OscConfig+0x378>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d110      	bne.n	8002008 <HAL_RCC_OscConfig+0x358>
 8001fe6:	4b60      	ldr	r3, [pc, #384]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fec:	4a5e      	ldr	r2, [pc, #376]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001fee:	f043 0304 	orr.w	r3, r3, #4
 8001ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ff6:	4b5c      	ldr	r3, [pc, #368]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffc:	4a5a      	ldr	r2, [pc, #360]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002006:	e00f      	b.n	8002028 <HAL_RCC_OscConfig+0x378>
 8002008:	4b57      	ldr	r3, [pc, #348]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200e:	4a56      	ldr	r2, [pc, #344]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002018:	4b53      	ldr	r3, [pc, #332]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 800201a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201e:	4a52      	ldr	r2, [pc, #328]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8002020:	f023 0304 	bic.w	r3, r3, #4
 8002024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d016      	beq.n	800205e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002030:	f7ff fabe 	bl	80015b0 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002036:	e00a      	b.n	800204e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002038:	f7ff faba 	bl	80015b0 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	; 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e138      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800204e:	4b46      	ldr	r3, [pc, #280]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8002050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0ed      	beq.n	8002038 <HAL_RCC_OscConfig+0x388>
 800205c:	e015      	b.n	800208a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205e:	f7ff faa7 	bl	80015b0 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002064:	e00a      	b.n	800207c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002066:	f7ff faa3 	bl	80015b0 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	f241 3288 	movw	r2, #5000	; 0x1388
 8002074:	4293      	cmp	r3, r2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e121      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800207c:	4b3a      	ldr	r3, [pc, #232]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 800207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1ed      	bne.n	8002066 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800208a:	7ffb      	ldrb	r3, [r7, #31]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002090:	4b35      	ldr	r3, [pc, #212]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8002092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002094:	4a34      	ldr	r2, [pc, #208]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8002096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800209a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0320 	and.w	r3, r3, #32
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d03c      	beq.n	8002122 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d01c      	beq.n	80020ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020b0:	4b2d      	ldr	r3, [pc, #180]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 80020b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020b6:	4a2c      	ldr	r2, [pc, #176]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c0:	f7ff fa76 	bl	80015b0 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020c8:	f7ff fa72 	bl	80015b0 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e0f2      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020da:	4b23      	ldr	r3, [pc, #140]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 80020dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ef      	beq.n	80020c8 <HAL_RCC_OscConfig+0x418>
 80020e8:	e01b      	b.n	8002122 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020ea:	4b1f      	ldr	r3, [pc, #124]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 80020ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020f0:	4a1d      	ldr	r2, [pc, #116]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 80020f2:	f023 0301 	bic.w	r3, r3, #1
 80020f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fa:	f7ff fa59 	bl	80015b0 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002102:	f7ff fa55 	bl	80015b0 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e0d5      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002114:	4b14      	ldr	r3, [pc, #80]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8002116:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1ef      	bne.n	8002102 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 80c9 	beq.w	80022be <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800212c:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	2b0c      	cmp	r3, #12
 8002136:	f000 8083 	beq.w	8002240 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d15e      	bne.n	8002200 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a08      	ldr	r2, [pc, #32]	; (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8002148:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800214c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214e:	f7ff fa2f 	bl	80015b0 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002154:	e00c      	b.n	8002170 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002156:	f7ff fa2b 	bl	80015b0 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d905      	bls.n	8002170 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e0ab      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
 8002168:	40021000 	.word	0x40021000
 800216c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002170:	4b55      	ldr	r3, [pc, #340]	; (80022c8 <HAL_RCC_OscConfig+0x618>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1ec      	bne.n	8002156 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800217c:	4b52      	ldr	r3, [pc, #328]	; (80022c8 <HAL_RCC_OscConfig+0x618>)
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	4b52      	ldr	r3, [pc, #328]	; (80022cc <HAL_RCC_OscConfig+0x61c>)
 8002182:	4013      	ands	r3, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6a11      	ldr	r1, [r2, #32]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800218c:	3a01      	subs	r2, #1
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	4311      	orrs	r1, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002196:	0212      	lsls	r2, r2, #8
 8002198:	4311      	orrs	r1, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800219e:	0852      	lsrs	r2, r2, #1
 80021a0:	3a01      	subs	r2, #1
 80021a2:	0552      	lsls	r2, r2, #21
 80021a4:	4311      	orrs	r1, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021aa:	0852      	lsrs	r2, r2, #1
 80021ac:	3a01      	subs	r2, #1
 80021ae:	0652      	lsls	r2, r2, #25
 80021b0:	4311      	orrs	r1, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021b6:	06d2      	lsls	r2, r2, #27
 80021b8:	430a      	orrs	r2, r1
 80021ba:	4943      	ldr	r1, [pc, #268]	; (80022c8 <HAL_RCC_OscConfig+0x618>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	4b41      	ldr	r3, [pc, #260]	; (80022c8 <HAL_RCC_OscConfig+0x618>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a40      	ldr	r2, [pc, #256]	; (80022c8 <HAL_RCC_OscConfig+0x618>)
 80021c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021cc:	4b3e      	ldr	r3, [pc, #248]	; (80022c8 <HAL_RCC_OscConfig+0x618>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a3d      	ldr	r2, [pc, #244]	; (80022c8 <HAL_RCC_OscConfig+0x618>)
 80021d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7ff f9ea 	bl	80015b0 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7ff f9e6 	bl	80015b0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e066      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	4b35      	ldr	r3, [pc, #212]	; (80022c8 <HAL_RCC_OscConfig+0x618>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x530>
 80021fe:	e05e      	b.n	80022be <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002200:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <HAL_RCC_OscConfig+0x618>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a30      	ldr	r2, [pc, #192]	; (80022c8 <HAL_RCC_OscConfig+0x618>)
 8002206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800220a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7ff f9d0 	bl	80015b0 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002214:	f7ff f9cc 	bl	80015b0 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e04c      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002226:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <HAL_RCC_OscConfig+0x618>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002232:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <HAL_RCC_OscConfig+0x618>)
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	4924      	ldr	r1, [pc, #144]	; (80022c8 <HAL_RCC_OscConfig+0x618>)
 8002238:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_RCC_OscConfig+0x620>)
 800223a:	4013      	ands	r3, r2
 800223c:	60cb      	str	r3, [r1, #12]
 800223e:	e03e      	b.n	80022be <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e039      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800224c:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <HAL_RCC_OscConfig+0x618>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f003 0203 	and.w	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	429a      	cmp	r2, r3
 800225e:	d12c      	bne.n	80022ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	3b01      	subs	r3, #1
 800226c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	429a      	cmp	r2, r3
 8002270:	d123      	bne.n	80022ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800227e:	429a      	cmp	r2, r3
 8002280:	d11b      	bne.n	80022ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800228e:	429a      	cmp	r2, r3
 8002290:	d113      	bne.n	80022ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	085b      	lsrs	r3, r3, #1
 800229e:	3b01      	subs	r3, #1
 80022a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d109      	bne.n	80022ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b0:	085b      	lsrs	r3, r3, #1
 80022b2:	3b01      	subs	r3, #1
 80022b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3720      	adds	r7, #32
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000
 80022cc:	019f800c 	.word	0x019f800c
 80022d0:	feeefffc 	.word	0xfeeefffc

080022d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e11e      	b.n	800252a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022ec:	4b91      	ldr	r3, [pc, #580]	; (8002534 <HAL_RCC_ClockConfig+0x260>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d910      	bls.n	800231c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b8e      	ldr	r3, [pc, #568]	; (8002534 <HAL_RCC_ClockConfig+0x260>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 020f 	bic.w	r2, r3, #15
 8002302:	498c      	ldr	r1, [pc, #560]	; (8002534 <HAL_RCC_ClockConfig+0x260>)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230a:	4b8a      	ldr	r3, [pc, #552]	; (8002534 <HAL_RCC_ClockConfig+0x260>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d001      	beq.n	800231c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e106      	b.n	800252a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d073      	beq.n	8002410 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d129      	bne.n	8002384 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002330:	4b81      	ldr	r3, [pc, #516]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0f4      	b.n	800252a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002340:	f000 f9d0 	bl	80026e4 <RCC_GetSysClockFreqFromPLLSource>
 8002344:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4a7c      	ldr	r2, [pc, #496]	; (800253c <HAL_RCC_ClockConfig+0x268>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d93f      	bls.n	80023ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800234e:	4b7a      	ldr	r3, [pc, #488]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002362:	2b00      	cmp	r3, #0
 8002364:	d033      	beq.n	80023ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800236a:	2b00      	cmp	r3, #0
 800236c:	d12f      	bne.n	80023ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800236e:	4b72      	ldr	r3, [pc, #456]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002376:	4a70      	ldr	r2, [pc, #448]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 8002378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800237c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	e024      	b.n	80023ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d107      	bne.n	800239c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800238c:	4b6a      	ldr	r3, [pc, #424]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d109      	bne.n	80023ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0c6      	b.n	800252a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800239c:	4b66      	ldr	r3, [pc, #408]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0be      	b.n	800252a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023ac:	f000 f8ce 	bl	800254c <HAL_RCC_GetSysClockFreq>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4a61      	ldr	r2, [pc, #388]	; (800253c <HAL_RCC_ClockConfig+0x268>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d909      	bls.n	80023ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023ba:	4b5f      	ldr	r3, [pc, #380]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023c2:	4a5d      	ldr	r2, [pc, #372]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 80023c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023ce:	4b5a      	ldr	r3, [pc, #360]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 0203 	bic.w	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4957      	ldr	r1, [pc, #348]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e0:	f7ff f8e6 	bl	80015b0 <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e8:	f7ff f8e2 	bl	80015b0 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e095      	b.n	800252a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	4b4e      	ldr	r3, [pc, #312]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 020c 	and.w	r2, r3, #12
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	429a      	cmp	r2, r3
 800240e:	d1eb      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d023      	beq.n	8002464 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002428:	4b43      	ldr	r3, [pc, #268]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	4a42      	ldr	r2, [pc, #264]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 800242e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002432:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	2b00      	cmp	r3, #0
 800243e:	d007      	beq.n	8002450 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002440:	4b3d      	ldr	r3, [pc, #244]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002448:	4a3b      	ldr	r2, [pc, #236]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 800244a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800244e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002450:	4b39      	ldr	r3, [pc, #228]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4936      	ldr	r1, [pc, #216]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]
 8002462:	e008      	b.n	8002476 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2b80      	cmp	r3, #128	; 0x80
 8002468:	d105      	bne.n	8002476 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800246a:	4b33      	ldr	r3, [pc, #204]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	4a32      	ldr	r2, [pc, #200]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 8002470:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002474:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002476:	4b2f      	ldr	r3, [pc, #188]	; (8002534 <HAL_RCC_ClockConfig+0x260>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d21d      	bcs.n	80024c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002484:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <HAL_RCC_ClockConfig+0x260>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f023 020f 	bic.w	r2, r3, #15
 800248c:	4929      	ldr	r1, [pc, #164]	; (8002534 <HAL_RCC_ClockConfig+0x260>)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002494:	f7ff f88c 	bl	80015b0 <HAL_GetTick>
 8002498:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	e00a      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800249c:	f7ff f888 	bl	80015b0 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e03b      	b.n	800252a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b2:	4b20      	ldr	r3, [pc, #128]	; (8002534 <HAL_RCC_ClockConfig+0x260>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d1ed      	bne.n	800249c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024cc:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4917      	ldr	r1, [pc, #92]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ea:	4b13      	ldr	r3, [pc, #76]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	490f      	ldr	r1, [pc, #60]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024fe:	f000 f825 	bl	800254c <HAL_RCC_GetSysClockFreq>
 8002502:	4602      	mov	r2, r0
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <HAL_RCC_ClockConfig+0x264>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	490c      	ldr	r1, [pc, #48]	; (8002540 <HAL_RCC_ClockConfig+0x26c>)
 8002510:	5ccb      	ldrb	r3, [r1, r3]
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	fa22 f303 	lsr.w	r3, r2, r3
 800251a:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <HAL_RCC_ClockConfig+0x270>)
 800251c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <HAL_RCC_ClockConfig+0x274>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe ff14 	bl	8001350 <HAL_InitTick>
 8002528:	4603      	mov	r3, r0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40022000 	.word	0x40022000
 8002538:	40021000 	.word	0x40021000
 800253c:	04c4b400 	.word	0x04c4b400
 8002540:	08006e50 	.word	0x08006e50
 8002544:	20000000 	.word	0x20000000
 8002548:	20000004 	.word	0x20000004

0800254c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002552:	4b2c      	ldr	r3, [pc, #176]	; (8002604 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b04      	cmp	r3, #4
 800255c:	d102      	bne.n	8002564 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800255e:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	e047      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002564:	4b27      	ldr	r3, [pc, #156]	; (8002604 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	2b08      	cmp	r3, #8
 800256e:	d102      	bne.n	8002576 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002570:	4b26      	ldr	r3, [pc, #152]	; (800260c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	e03e      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002576:	4b23      	ldr	r3, [pc, #140]	; (8002604 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b0c      	cmp	r3, #12
 8002580:	d136      	bne.n	80025f0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002582:	4b20      	ldr	r3, [pc, #128]	; (8002604 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800258c:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	3301      	adds	r3, #1
 8002598:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d10c      	bne.n	80025ba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025a0:	4a1a      	ldr	r2, [pc, #104]	; (800260c <HAL_RCC_GetSysClockFreq+0xc0>)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	4a16      	ldr	r2, [pc, #88]	; (8002604 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025aa:	68d2      	ldr	r2, [r2, #12]
 80025ac:	0a12      	lsrs	r2, r2, #8
 80025ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025b2:	fb02 f303 	mul.w	r3, r2, r3
 80025b6:	617b      	str	r3, [r7, #20]
      break;
 80025b8:	e00c      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ba:	4a13      	ldr	r2, [pc, #76]	; (8002608 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c2:	4a10      	ldr	r2, [pc, #64]	; (8002604 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c4:	68d2      	ldr	r2, [r2, #12]
 80025c6:	0a12      	lsrs	r2, r2, #8
 80025c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025cc:	fb02 f303 	mul.w	r3, r2, r3
 80025d0:	617b      	str	r3, [r7, #20]
      break;
 80025d2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	0e5b      	lsrs	r3, r3, #25
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	3301      	adds	r3, #1
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	e001      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025f4:	693b      	ldr	r3, [r7, #16]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	371c      	adds	r7, #28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000
 8002608:	00f42400 	.word	0x00f42400
 800260c:	016e3600 	.word	0x016e3600

08002610 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002614:	4b03      	ldr	r3, [pc, #12]	; (8002624 <HAL_RCC_GetHCLKFreq+0x14>)
 8002616:	681b      	ldr	r3, [r3, #0]
}
 8002618:	4618      	mov	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	20000000 	.word	0x20000000

08002628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800262c:	f7ff fff0 	bl	8002610 <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4904      	ldr	r1, [pc, #16]	; (8002650 <HAL_RCC_GetPCLK1Freq+0x28>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000
 8002650:	08006e60 	.word	0x08006e60

08002654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002658:	f7ff ffda 	bl	8002610 <HAL_RCC_GetHCLKFreq>
 800265c:	4602      	mov	r2, r0
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	0adb      	lsrs	r3, r3, #11
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	4904      	ldr	r1, [pc, #16]	; (800267c <HAL_RCC_GetPCLK2Freq+0x28>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002674:	4618      	mov	r0, r3
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000
 800267c:	08006e60 	.word	0x08006e60

08002680 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	220f      	movs	r2, #15
 800268e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_RCC_GetClockConfig+0x5c>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0203 	and.w	r2, r3, #3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800269c:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <HAL_RCC_GetClockConfig+0x5c>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <HAL_RCC_GetClockConfig+0x5c>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80026b4:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_RCC_GetClockConfig+0x5c>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	08db      	lsrs	r3, r3, #3
 80026ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80026c2:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <HAL_RCC_GetClockConfig+0x60>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 020f 	and.w	r2, r3, #15
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	601a      	str	r2, [r3, #0]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40022000 	.word	0x40022000

080026e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026ea:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	3301      	adds	r3, #1
 8002700:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b03      	cmp	r3, #3
 8002706:	d10c      	bne.n	8002722 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002708:	4a17      	ldr	r2, [pc, #92]	; (8002768 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002710:	4a14      	ldr	r2, [pc, #80]	; (8002764 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002712:	68d2      	ldr	r2, [r2, #12]
 8002714:	0a12      	lsrs	r2, r2, #8
 8002716:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800271a:	fb02 f303 	mul.w	r3, r2, r3
 800271e:	617b      	str	r3, [r7, #20]
    break;
 8002720:	e00c      	b.n	800273c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002722:	4a12      	ldr	r2, [pc, #72]	; (800276c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	fbb2 f3f3 	udiv	r3, r2, r3
 800272a:	4a0e      	ldr	r2, [pc, #56]	; (8002764 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800272c:	68d2      	ldr	r2, [r2, #12]
 800272e:	0a12      	lsrs	r2, r2, #8
 8002730:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002734:	fb02 f303 	mul.w	r3, r2, r3
 8002738:	617b      	str	r3, [r7, #20]
    break;
 800273a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	0e5b      	lsrs	r3, r3, #25
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	3301      	adds	r3, #1
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	fbb2 f3f3 	udiv	r3, r2, r3
 8002754:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002756:	687b      	ldr	r3, [r7, #4]
}
 8002758:	4618      	mov	r0, r3
 800275a:	371c      	adds	r7, #28
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	40021000 	.word	0x40021000
 8002768:	016e3600 	.word	0x016e3600
 800276c:	00f42400 	.word	0x00f42400

08002770 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002778:	2300      	movs	r3, #0
 800277a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800277c:	2300      	movs	r3, #0
 800277e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 8098 	beq.w	80028be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800278e:	2300      	movs	r3, #0
 8002790:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002792:	4b43      	ldr	r3, [pc, #268]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10d      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800279e:	4b40      	ldr	r3, [pc, #256]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a2:	4a3f      	ldr	r2, [pc, #252]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a8:	6593      	str	r3, [r2, #88]	; 0x58
 80027aa:	4b3d      	ldr	r3, [pc, #244]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b6:	2301      	movs	r3, #1
 80027b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027ba:	4b3a      	ldr	r3, [pc, #232]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a39      	ldr	r2, [pc, #228]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027c6:	f7fe fef3 	bl	80015b0 <HAL_GetTick>
 80027ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027cc:	e009      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ce:	f7fe feef 	bl	80015b0 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d902      	bls.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	74fb      	strb	r3, [r7, #19]
        break;
 80027e0:	e005      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027e2:	4b30      	ldr	r3, [pc, #192]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0ef      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80027ee:	7cfb      	ldrb	r3, [r7, #19]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d159      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027f4:	4b2a      	ldr	r3, [pc, #168]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d01e      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	429a      	cmp	r2, r3
 800280e:	d019      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002810:	4b23      	ldr	r3, [pc, #140]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800281a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800281c:	4b20      	ldr	r3, [pc, #128]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800281e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002822:	4a1f      	ldr	r2, [pc, #124]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800282c:	4b1c      	ldr	r3, [pc, #112]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002832:	4a1b      	ldr	r2, [pc, #108]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800283c:	4a18      	ldr	r2, [pc, #96]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d016      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284e:	f7fe feaf 	bl	80015b0 <HAL_GetTick>
 8002852:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002854:	e00b      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002856:	f7fe feab 	bl	80015b0 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	; 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d902      	bls.n	800286e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	74fb      	strb	r3, [r7, #19]
            break;
 800286c:	e006      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800286e:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0ec      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800287c:	7cfb      	ldrb	r3, [r7, #19]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10b      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002882:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002888:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002890:	4903      	ldr	r1, [pc, #12]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002898:	e008      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800289a:	7cfb      	ldrb	r3, [r7, #19]
 800289c:	74bb      	strb	r3, [r7, #18]
 800289e:	e005      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a8:	7cfb      	ldrb	r3, [r7, #19]
 80028aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ac:	7c7b      	ldrb	r3, [r7, #17]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d105      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b2:	4ba7      	ldr	r3, [pc, #668]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	4aa6      	ldr	r2, [pc, #664]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ca:	4ba1      	ldr	r3, [pc, #644]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d0:	f023 0203 	bic.w	r2, r3, #3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	499d      	ldr	r1, [pc, #628]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028ec:	4b98      	ldr	r3, [pc, #608]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f2:	f023 020c 	bic.w	r2, r3, #12
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	4995      	ldr	r1, [pc, #596]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800290e:	4b90      	ldr	r3, [pc, #576]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002914:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	498c      	ldr	r1, [pc, #560]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002930:	4b87      	ldr	r3, [pc, #540]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002936:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	4984      	ldr	r1, [pc, #528]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002952:	4b7f      	ldr	r3, [pc, #508]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002958:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	497b      	ldr	r1, [pc, #492]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002974:	4b76      	ldr	r3, [pc, #472]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	4973      	ldr	r1, [pc, #460]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002996:	4b6e      	ldr	r3, [pc, #440]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	496a      	ldr	r1, [pc, #424]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029b8:	4b65      	ldr	r3, [pc, #404]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	4962      	ldr	r1, [pc, #392]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029da:	4b5d      	ldr	r3, [pc, #372]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	4959      	ldr	r1, [pc, #356]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00a      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029fc:	4b54      	ldr	r3, [pc, #336]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a02:	f023 0203 	bic.w	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0a:	4951      	ldr	r1, [pc, #324]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a1e:	4b4c      	ldr	r3, [pc, #304]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	4948      	ldr	r1, [pc, #288]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d015      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a40:	4b43      	ldr	r3, [pc, #268]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4940      	ldr	r1, [pc, #256]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a5e:	d105      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a60:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4a3a      	ldr	r2, [pc, #232]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d015      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a78:	4b35      	ldr	r3, [pc, #212]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a86:	4932      	ldr	r1, [pc, #200]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a96:	d105      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a98:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a2c      	ldr	r2, [pc, #176]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aa2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d015      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ab0:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abe:	4924      	ldr	r1, [pc, #144]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ace:	d105      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad0:	4b1f      	ldr	r3, [pc, #124]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4a1e      	ldr	r2, [pc, #120]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ada:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d015      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af6:	4916      	ldr	r1, [pc, #88]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b06:	d105      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4a10      	ldr	r2, [pc, #64]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b12:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d019      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	4908      	ldr	r1, [pc, #32]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b3e:	d109      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b40:	4b03      	ldr	r3, [pc, #12]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4a02      	ldr	r2, [pc, #8]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b4a:	60d3      	str	r3, [r2, #12]
 8002b4c:	e002      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d015      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b60:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	4926      	ldr	r1, [pc, #152]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b7e:	d105      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b80:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d015      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b98:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba6:	4918      	ldr	r1, [pc, #96]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb6:	d105      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002bb8:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d015      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002bd0:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bde:	490a      	ldr	r1, [pc, #40]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bee:	d105      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bfa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002bfc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000

08002c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e049      	b.n	8002cb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d106      	bne.n	8002c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fe fafc 	bl	8001230 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3304      	adds	r3, #4
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	f000 fe76 	bl	800393c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d001      	beq.n	8002cd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e04c      	b.n	8002d6e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a26      	ldr	r2, [pc, #152]	; (8002d7c <HAL_TIM_Base_Start+0xc0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d022      	beq.n	8002d2c <HAL_TIM_Base_Start+0x70>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cee:	d01d      	beq.n	8002d2c <HAL_TIM_Base_Start+0x70>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a22      	ldr	r2, [pc, #136]	; (8002d80 <HAL_TIM_Base_Start+0xc4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d018      	beq.n	8002d2c <HAL_TIM_Base_Start+0x70>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a21      	ldr	r2, [pc, #132]	; (8002d84 <HAL_TIM_Base_Start+0xc8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d013      	beq.n	8002d2c <HAL_TIM_Base_Start+0x70>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a1f      	ldr	r2, [pc, #124]	; (8002d88 <HAL_TIM_Base_Start+0xcc>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00e      	beq.n	8002d2c <HAL_TIM_Base_Start+0x70>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a1e      	ldr	r2, [pc, #120]	; (8002d8c <HAL_TIM_Base_Start+0xd0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d009      	beq.n	8002d2c <HAL_TIM_Base_Start+0x70>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a1c      	ldr	r2, [pc, #112]	; (8002d90 <HAL_TIM_Base_Start+0xd4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d004      	beq.n	8002d2c <HAL_TIM_Base_Start+0x70>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1b      	ldr	r2, [pc, #108]	; (8002d94 <HAL_TIM_Base_Start+0xd8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d115      	bne.n	8002d58 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <HAL_TIM_Base_Start+0xdc>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b06      	cmp	r3, #6
 8002d3c:	d015      	beq.n	8002d6a <HAL_TIM_Base_Start+0xae>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d44:	d011      	beq.n	8002d6a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0201 	orr.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d56:	e008      	b.n	8002d6a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	e000      	b.n	8002d6c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40012c00 	.word	0x40012c00
 8002d80:	40000400 	.word	0x40000400
 8002d84:	40000800 	.word	0x40000800
 8002d88:	40000c00 	.word	0x40000c00
 8002d8c:	40013400 	.word	0x40013400
 8002d90:	40014000 	.word	0x40014000
 8002d94:	40015000 	.word	0x40015000
 8002d98:	00010007 	.word	0x00010007

08002d9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d001      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e054      	b.n	8002e5e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a26      	ldr	r2, [pc, #152]	; (8002e6c <HAL_TIM_Base_Start_IT+0xd0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d022      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x80>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dde:	d01d      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x80>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a22      	ldr	r2, [pc, #136]	; (8002e70 <HAL_TIM_Base_Start_IT+0xd4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d018      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x80>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a21      	ldr	r2, [pc, #132]	; (8002e74 <HAL_TIM_Base_Start_IT+0xd8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d013      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x80>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a1f      	ldr	r2, [pc, #124]	; (8002e78 <HAL_TIM_Base_Start_IT+0xdc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00e      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x80>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a1e      	ldr	r2, [pc, #120]	; (8002e7c <HAL_TIM_Base_Start_IT+0xe0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d009      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x80>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <HAL_TIM_Base_Start_IT+0xe4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d004      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x80>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a1b      	ldr	r2, [pc, #108]	; (8002e84 <HAL_TIM_Base_Start_IT+0xe8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d115      	bne.n	8002e48 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <HAL_TIM_Base_Start_IT+0xec>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b06      	cmp	r3, #6
 8002e2c:	d015      	beq.n	8002e5a <HAL_TIM_Base_Start_IT+0xbe>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e34:	d011      	beq.n	8002e5a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0201 	orr.w	r2, r2, #1
 8002e44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e46:	e008      	b.n	8002e5a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	e000      	b.n	8002e5c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40012c00 	.word	0x40012c00
 8002e70:	40000400 	.word	0x40000400
 8002e74:	40000800 	.word	0x40000800
 8002e78:	40000c00 	.word	0x40000c00
 8002e7c:	40013400 	.word	0x40013400
 8002e80:	40014000 	.word	0x40014000
 8002e84:	40015000 	.word	0x40015000
 8002e88:	00010007 	.word	0x00010007

08002e8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e049      	b.n	8002f32 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f841 	bl	8002f3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f000 fd36 	bl	800393c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d109      	bne.n	8002f74 <HAL_TIM_PWM_Start+0x24>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	e03c      	b.n	8002fee <HAL_TIM_PWM_Start+0x9e>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d109      	bne.n	8002f8e <HAL_TIM_PWM_Start+0x3e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	bf14      	ite	ne
 8002f86:	2301      	movne	r3, #1
 8002f88:	2300      	moveq	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	e02f      	b.n	8002fee <HAL_TIM_PWM_Start+0x9e>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d109      	bne.n	8002fa8 <HAL_TIM_PWM_Start+0x58>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	bf14      	ite	ne
 8002fa0:	2301      	movne	r3, #1
 8002fa2:	2300      	moveq	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	e022      	b.n	8002fee <HAL_TIM_PWM_Start+0x9e>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d109      	bne.n	8002fc2 <HAL_TIM_PWM_Start+0x72>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	bf14      	ite	ne
 8002fba:	2301      	movne	r3, #1
 8002fbc:	2300      	moveq	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	e015      	b.n	8002fee <HAL_TIM_PWM_Start+0x9e>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b10      	cmp	r3, #16
 8002fc6:	d109      	bne.n	8002fdc <HAL_TIM_PWM_Start+0x8c>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	bf14      	ite	ne
 8002fd4:	2301      	movne	r3, #1
 8002fd6:	2300      	moveq	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e008      	b.n	8002fee <HAL_TIM_PWM_Start+0x9e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	bf14      	ite	ne
 8002fe8:	2301      	movne	r3, #1
 8002fea:	2300      	moveq	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e0a6      	b.n	8003144 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d104      	bne.n	8003006 <HAL_TIM_PWM_Start+0xb6>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003004:	e023      	b.n	800304e <HAL_TIM_PWM_Start+0xfe>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b04      	cmp	r3, #4
 800300a:	d104      	bne.n	8003016 <HAL_TIM_PWM_Start+0xc6>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003014:	e01b      	b.n	800304e <HAL_TIM_PWM_Start+0xfe>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b08      	cmp	r3, #8
 800301a:	d104      	bne.n	8003026 <HAL_TIM_PWM_Start+0xd6>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003024:	e013      	b.n	800304e <HAL_TIM_PWM_Start+0xfe>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b0c      	cmp	r3, #12
 800302a:	d104      	bne.n	8003036 <HAL_TIM_PWM_Start+0xe6>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003034:	e00b      	b.n	800304e <HAL_TIM_PWM_Start+0xfe>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b10      	cmp	r3, #16
 800303a:	d104      	bne.n	8003046 <HAL_TIM_PWM_Start+0xf6>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003044:	e003      	b.n	800304e <HAL_TIM_PWM_Start+0xfe>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2202      	movs	r2, #2
 800304a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2201      	movs	r2, #1
 8003054:	6839      	ldr	r1, [r7, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f001 f9ca 	bl	80043f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a3a      	ldr	r2, [pc, #232]	; (800314c <HAL_TIM_PWM_Start+0x1fc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d018      	beq.n	8003098 <HAL_TIM_PWM_Start+0x148>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a39      	ldr	r2, [pc, #228]	; (8003150 <HAL_TIM_PWM_Start+0x200>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d013      	beq.n	8003098 <HAL_TIM_PWM_Start+0x148>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a37      	ldr	r2, [pc, #220]	; (8003154 <HAL_TIM_PWM_Start+0x204>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00e      	beq.n	8003098 <HAL_TIM_PWM_Start+0x148>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a36      	ldr	r2, [pc, #216]	; (8003158 <HAL_TIM_PWM_Start+0x208>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d009      	beq.n	8003098 <HAL_TIM_PWM_Start+0x148>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a34      	ldr	r2, [pc, #208]	; (800315c <HAL_TIM_PWM_Start+0x20c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d004      	beq.n	8003098 <HAL_TIM_PWM_Start+0x148>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a33      	ldr	r2, [pc, #204]	; (8003160 <HAL_TIM_PWM_Start+0x210>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d101      	bne.n	800309c <HAL_TIM_PWM_Start+0x14c>
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <HAL_TIM_PWM_Start+0x14e>
 800309c:	2300      	movs	r3, #0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d007      	beq.n	80030b2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a25      	ldr	r2, [pc, #148]	; (800314c <HAL_TIM_PWM_Start+0x1fc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d022      	beq.n	8003102 <HAL_TIM_PWM_Start+0x1b2>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c4:	d01d      	beq.n	8003102 <HAL_TIM_PWM_Start+0x1b2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a26      	ldr	r2, [pc, #152]	; (8003164 <HAL_TIM_PWM_Start+0x214>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d018      	beq.n	8003102 <HAL_TIM_PWM_Start+0x1b2>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a24      	ldr	r2, [pc, #144]	; (8003168 <HAL_TIM_PWM_Start+0x218>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d013      	beq.n	8003102 <HAL_TIM_PWM_Start+0x1b2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a23      	ldr	r2, [pc, #140]	; (800316c <HAL_TIM_PWM_Start+0x21c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00e      	beq.n	8003102 <HAL_TIM_PWM_Start+0x1b2>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a19      	ldr	r2, [pc, #100]	; (8003150 <HAL_TIM_PWM_Start+0x200>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d009      	beq.n	8003102 <HAL_TIM_PWM_Start+0x1b2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a18      	ldr	r2, [pc, #96]	; (8003154 <HAL_TIM_PWM_Start+0x204>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d004      	beq.n	8003102 <HAL_TIM_PWM_Start+0x1b2>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a18      	ldr	r2, [pc, #96]	; (8003160 <HAL_TIM_PWM_Start+0x210>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d115      	bne.n	800312e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	4b19      	ldr	r3, [pc, #100]	; (8003170 <HAL_TIM_PWM_Start+0x220>)
 800310a:	4013      	ands	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2b06      	cmp	r3, #6
 8003112:	d015      	beq.n	8003140 <HAL_TIM_PWM_Start+0x1f0>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311a:	d011      	beq.n	8003140 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800312c:	e008      	b.n	8003140 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 0201 	orr.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	e000      	b.n	8003142 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003140:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40012c00 	.word	0x40012c00
 8003150:	40013400 	.word	0x40013400
 8003154:	40014000 	.word	0x40014000
 8003158:	40014400 	.word	0x40014400
 800315c:	40014800 	.word	0x40014800
 8003160:	40015000 	.word	0x40015000
 8003164:	40000400 	.word	0x40000400
 8003168:	40000800 	.word	0x40000800
 800316c:	40000c00 	.word	0x40000c00
 8003170:	00010007 	.word	0x00010007

08003174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d020      	beq.n	80031d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d01b      	beq.n	80031d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0202 	mvn.w	r2, #2
 80031a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fb9e 	bl	8003900 <HAL_TIM_IC_CaptureCallback>
 80031c4:	e005      	b.n	80031d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fb90 	bl	80038ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 fba1 	bl	8003914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d020      	beq.n	8003224 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01b      	beq.n	8003224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0204 	mvn.w	r2, #4
 80031f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2202      	movs	r2, #2
 80031fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fb78 	bl	8003900 <HAL_TIM_IC_CaptureCallback>
 8003210:	e005      	b.n	800321e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fb6a 	bl	80038ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 fb7b 	bl	8003914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d020      	beq.n	8003270 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d01b      	beq.n	8003270 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0208 	mvn.w	r2, #8
 8003240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2204      	movs	r2, #4
 8003246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fb52 	bl	8003900 <HAL_TIM_IC_CaptureCallback>
 800325c:	e005      	b.n	800326a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fb44 	bl	80038ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 fb55 	bl	8003914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	2b00      	cmp	r3, #0
 8003278:	d020      	beq.n	80032bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b00      	cmp	r3, #0
 8003282:	d01b      	beq.n	80032bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0210 	mvn.w	r2, #16
 800328c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2208      	movs	r2, #8
 8003292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fb2c 	bl	8003900 <HAL_TIM_IC_CaptureCallback>
 80032a8:	e005      	b.n	80032b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fb1e 	bl	80038ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fb2f 	bl	8003914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00c      	beq.n	80032e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d007      	beq.n	80032e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0201 	mvn.w	r2, #1
 80032d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fd fed4 	bl	8001088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d104      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00c      	beq.n	800330e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8003306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f001 f9cb 	bl	80046a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00c      	beq.n	8003332 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331e:	2b00      	cmp	r3, #0
 8003320:	d007      	beq.n	8003332 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800332a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f001 f9c3 	bl	80046b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00c      	beq.n	8003356 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800334e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 fae9 	bl	8003928 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00c      	beq.n	800337a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f06f 0220 	mvn.w	r2, #32
 8003372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f001 f98b 	bl	8004690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00c      	beq.n	800339e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d007      	beq.n	800339e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f001 f997 	bl	80046cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00c      	beq.n	80033c2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d007      	beq.n	80033c2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80033ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f001 f98f 	bl	80046e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00c      	beq.n	80033e6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d007      	beq.n	80033e6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80033de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f001 f987 	bl	80046f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00c      	beq.n	800340a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f001 f97f 	bl	8004708 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800340a:	bf00      	nop
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800342e:	2302      	movs	r3, #2
 8003430:	e0ff      	b.n	8003632 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b14      	cmp	r3, #20
 800343e:	f200 80f0 	bhi.w	8003622 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003442:	a201      	add	r2, pc, #4	; (adr r2, 8003448 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003448:	0800349d 	.word	0x0800349d
 800344c:	08003623 	.word	0x08003623
 8003450:	08003623 	.word	0x08003623
 8003454:	08003623 	.word	0x08003623
 8003458:	080034dd 	.word	0x080034dd
 800345c:	08003623 	.word	0x08003623
 8003460:	08003623 	.word	0x08003623
 8003464:	08003623 	.word	0x08003623
 8003468:	0800351f 	.word	0x0800351f
 800346c:	08003623 	.word	0x08003623
 8003470:	08003623 	.word	0x08003623
 8003474:	08003623 	.word	0x08003623
 8003478:	0800355f 	.word	0x0800355f
 800347c:	08003623 	.word	0x08003623
 8003480:	08003623 	.word	0x08003623
 8003484:	08003623 	.word	0x08003623
 8003488:	080035a1 	.word	0x080035a1
 800348c:	08003623 	.word	0x08003623
 8003490:	08003623 	.word	0x08003623
 8003494:	08003623 	.word	0x08003623
 8003498:	080035e1 	.word	0x080035e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fafe 	bl	8003aa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0208 	orr.w	r2, r2, #8
 80034b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699a      	ldr	r2, [r3, #24]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0204 	bic.w	r2, r2, #4
 80034c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6999      	ldr	r1, [r3, #24]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	619a      	str	r2, [r3, #24]
      break;
 80034da:	e0a5      	b.n	8003628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68b9      	ldr	r1, [r7, #8]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fb78 	bl	8003bd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699a      	ldr	r2, [r3, #24]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6999      	ldr	r1, [r3, #24]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	021a      	lsls	r2, r3, #8
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	619a      	str	r2, [r3, #24]
      break;
 800351c:	e084      	b.n	8003628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68b9      	ldr	r1, [r7, #8]
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fbeb 	bl	8003d00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0208 	orr.w	r2, r2, #8
 8003538:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0204 	bic.w	r2, r2, #4
 8003548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69d9      	ldr	r1, [r3, #28]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	61da      	str	r2, [r3, #28]
      break;
 800355c:	e064      	b.n	8003628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	4618      	mov	r0, r3
 8003566:	f000 fc5d 	bl	8003e24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69da      	ldr	r2, [r3, #28]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69d9      	ldr	r1, [r3, #28]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	021a      	lsls	r2, r3, #8
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	61da      	str	r2, [r3, #28]
      break;
 800359e:	e043      	b.n	8003628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68b9      	ldr	r1, [r7, #8]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fcd0 	bl	8003f4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0208 	orr.w	r2, r2, #8
 80035ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0204 	bic.w	r2, r2, #4
 80035ca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	691a      	ldr	r2, [r3, #16]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80035de:	e023      	b.n	8003628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68b9      	ldr	r1, [r7, #8]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fd1a 	bl	8004020 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800360a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	021a      	lsls	r2, r3, #8
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003620:	e002      	b.n	8003628 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	75fb      	strb	r3, [r7, #23]
      break;
 8003626:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003630:	7dfb      	ldrb	r3, [r7, #23]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop

0800363c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_TIM_ConfigClockSource+0x1c>
 8003654:	2302      	movs	r3, #2
 8003656:	e0f6      	b.n	8003846 <HAL_TIM_ConfigClockSource+0x20a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800367a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003682:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a6f      	ldr	r2, [pc, #444]	; (8003850 <HAL_TIM_ConfigClockSource+0x214>)
 8003692:	4293      	cmp	r3, r2
 8003694:	f000 80c1 	beq.w	800381a <HAL_TIM_ConfigClockSource+0x1de>
 8003698:	4a6d      	ldr	r2, [pc, #436]	; (8003850 <HAL_TIM_ConfigClockSource+0x214>)
 800369a:	4293      	cmp	r3, r2
 800369c:	f200 80c6 	bhi.w	800382c <HAL_TIM_ConfigClockSource+0x1f0>
 80036a0:	4a6c      	ldr	r2, [pc, #432]	; (8003854 <HAL_TIM_ConfigClockSource+0x218>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	f000 80b9 	beq.w	800381a <HAL_TIM_ConfigClockSource+0x1de>
 80036a8:	4a6a      	ldr	r2, [pc, #424]	; (8003854 <HAL_TIM_ConfigClockSource+0x218>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	f200 80be 	bhi.w	800382c <HAL_TIM_ConfigClockSource+0x1f0>
 80036b0:	4a69      	ldr	r2, [pc, #420]	; (8003858 <HAL_TIM_ConfigClockSource+0x21c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	f000 80b1 	beq.w	800381a <HAL_TIM_ConfigClockSource+0x1de>
 80036b8:	4a67      	ldr	r2, [pc, #412]	; (8003858 <HAL_TIM_ConfigClockSource+0x21c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	f200 80b6 	bhi.w	800382c <HAL_TIM_ConfigClockSource+0x1f0>
 80036c0:	4a66      	ldr	r2, [pc, #408]	; (800385c <HAL_TIM_ConfigClockSource+0x220>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	f000 80a9 	beq.w	800381a <HAL_TIM_ConfigClockSource+0x1de>
 80036c8:	4a64      	ldr	r2, [pc, #400]	; (800385c <HAL_TIM_ConfigClockSource+0x220>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	f200 80ae 	bhi.w	800382c <HAL_TIM_ConfigClockSource+0x1f0>
 80036d0:	4a63      	ldr	r2, [pc, #396]	; (8003860 <HAL_TIM_ConfigClockSource+0x224>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	f000 80a1 	beq.w	800381a <HAL_TIM_ConfigClockSource+0x1de>
 80036d8:	4a61      	ldr	r2, [pc, #388]	; (8003860 <HAL_TIM_ConfigClockSource+0x224>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	f200 80a6 	bhi.w	800382c <HAL_TIM_ConfigClockSource+0x1f0>
 80036e0:	4a60      	ldr	r2, [pc, #384]	; (8003864 <HAL_TIM_ConfigClockSource+0x228>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	f000 8099 	beq.w	800381a <HAL_TIM_ConfigClockSource+0x1de>
 80036e8:	4a5e      	ldr	r2, [pc, #376]	; (8003864 <HAL_TIM_ConfigClockSource+0x228>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	f200 809e 	bhi.w	800382c <HAL_TIM_ConfigClockSource+0x1f0>
 80036f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80036f4:	f000 8091 	beq.w	800381a <HAL_TIM_ConfigClockSource+0x1de>
 80036f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80036fc:	f200 8096 	bhi.w	800382c <HAL_TIM_ConfigClockSource+0x1f0>
 8003700:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003704:	f000 8089 	beq.w	800381a <HAL_TIM_ConfigClockSource+0x1de>
 8003708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800370c:	f200 808e 	bhi.w	800382c <HAL_TIM_ConfigClockSource+0x1f0>
 8003710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003714:	d03e      	beq.n	8003794 <HAL_TIM_ConfigClockSource+0x158>
 8003716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800371a:	f200 8087 	bhi.w	800382c <HAL_TIM_ConfigClockSource+0x1f0>
 800371e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003722:	f000 8086 	beq.w	8003832 <HAL_TIM_ConfigClockSource+0x1f6>
 8003726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800372a:	d87f      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x1f0>
 800372c:	2b70      	cmp	r3, #112	; 0x70
 800372e:	d01a      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0x12a>
 8003730:	2b70      	cmp	r3, #112	; 0x70
 8003732:	d87b      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x1f0>
 8003734:	2b60      	cmp	r3, #96	; 0x60
 8003736:	d050      	beq.n	80037da <HAL_TIM_ConfigClockSource+0x19e>
 8003738:	2b60      	cmp	r3, #96	; 0x60
 800373a:	d877      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x1f0>
 800373c:	2b50      	cmp	r3, #80	; 0x50
 800373e:	d03c      	beq.n	80037ba <HAL_TIM_ConfigClockSource+0x17e>
 8003740:	2b50      	cmp	r3, #80	; 0x50
 8003742:	d873      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x1f0>
 8003744:	2b40      	cmp	r3, #64	; 0x40
 8003746:	d058      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0x1be>
 8003748:	2b40      	cmp	r3, #64	; 0x40
 800374a:	d86f      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x1f0>
 800374c:	2b30      	cmp	r3, #48	; 0x30
 800374e:	d064      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x1de>
 8003750:	2b30      	cmp	r3, #48	; 0x30
 8003752:	d86b      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x1f0>
 8003754:	2b20      	cmp	r3, #32
 8003756:	d060      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x1de>
 8003758:	2b20      	cmp	r3, #32
 800375a:	d867      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x1f0>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d05c      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x1de>
 8003760:	2b10      	cmp	r3, #16
 8003762:	d05a      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x1de>
 8003764:	e062      	b.n	800382c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003776:	f000 fe1b 	bl	80043b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003788:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	609a      	str	r2, [r3, #8]
      break;
 8003792:	e04f      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037a4:	f000 fe04 	bl	80043b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037b6:	609a      	str	r2, [r3, #8]
      break;
 80037b8:	e03c      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c6:	461a      	mov	r2, r3
 80037c8:	f000 fd76 	bl	80042b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2150      	movs	r1, #80	; 0x50
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fdcf 	bl	8004376 <TIM_ITRx_SetConfig>
      break;
 80037d8:	e02c      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037e6:	461a      	mov	r2, r3
 80037e8:	f000 fd95 	bl	8004316 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2160      	movs	r1, #96	; 0x60
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 fdbf 	bl	8004376 <TIM_ITRx_SetConfig>
      break;
 80037f8:	e01c      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003806:	461a      	mov	r2, r3
 8003808:	f000 fd56 	bl	80042b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2140      	movs	r1, #64	; 0x40
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fdaf 	bl	8004376 <TIM_ITRx_SetConfig>
      break;
 8003818:	e00c      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4619      	mov	r1, r3
 8003824:	4610      	mov	r0, r2
 8003826:	f000 fda6 	bl	8004376 <TIM_ITRx_SetConfig>
      break;
 800382a:	e003      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
      break;
 8003830:	e000      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003844:	7bfb      	ldrb	r3, [r7, #15]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	00100070 	.word	0x00100070
 8003854:	00100060 	.word	0x00100060
 8003858:	00100050 	.word	0x00100050
 800385c:	00100040 	.word	0x00100040
 8003860:	00100030 	.word	0x00100030
 8003864:	00100020 	.word	0x00100020

08003868 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_TIM_SlaveConfigSynchro+0x18>
 800387c:	2302      	movs	r3, #2
 800387e:	e031      	b.n	80038e4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003890:	6839      	ldr	r1, [r7, #0]
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fc30 	bl	80040f8 <TIM_SlaveTimer_SetConfig>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d009      	beq.n	80038b2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e018      	b.n	80038e4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038c0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038d0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a4c      	ldr	r2, [pc, #304]	; (8003a80 <TIM_Base_SetConfig+0x144>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d017      	beq.n	8003984 <TIM_Base_SetConfig+0x48>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395a:	d013      	beq.n	8003984 <TIM_Base_SetConfig+0x48>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a49      	ldr	r2, [pc, #292]	; (8003a84 <TIM_Base_SetConfig+0x148>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00f      	beq.n	8003984 <TIM_Base_SetConfig+0x48>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a48      	ldr	r2, [pc, #288]	; (8003a88 <TIM_Base_SetConfig+0x14c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d00b      	beq.n	8003984 <TIM_Base_SetConfig+0x48>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a47      	ldr	r2, [pc, #284]	; (8003a8c <TIM_Base_SetConfig+0x150>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d007      	beq.n	8003984 <TIM_Base_SetConfig+0x48>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a46      	ldr	r2, [pc, #280]	; (8003a90 <TIM_Base_SetConfig+0x154>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d003      	beq.n	8003984 <TIM_Base_SetConfig+0x48>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a45      	ldr	r2, [pc, #276]	; (8003a94 <TIM_Base_SetConfig+0x158>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d108      	bne.n	8003996 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a39      	ldr	r2, [pc, #228]	; (8003a80 <TIM_Base_SetConfig+0x144>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d023      	beq.n	80039e6 <TIM_Base_SetConfig+0xaa>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a4:	d01f      	beq.n	80039e6 <TIM_Base_SetConfig+0xaa>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a36      	ldr	r2, [pc, #216]	; (8003a84 <TIM_Base_SetConfig+0x148>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d01b      	beq.n	80039e6 <TIM_Base_SetConfig+0xaa>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a35      	ldr	r2, [pc, #212]	; (8003a88 <TIM_Base_SetConfig+0x14c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d017      	beq.n	80039e6 <TIM_Base_SetConfig+0xaa>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a34      	ldr	r2, [pc, #208]	; (8003a8c <TIM_Base_SetConfig+0x150>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <TIM_Base_SetConfig+0xaa>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a33      	ldr	r2, [pc, #204]	; (8003a90 <TIM_Base_SetConfig+0x154>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00f      	beq.n	80039e6 <TIM_Base_SetConfig+0xaa>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a33      	ldr	r2, [pc, #204]	; (8003a98 <TIM_Base_SetConfig+0x15c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00b      	beq.n	80039e6 <TIM_Base_SetConfig+0xaa>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a32      	ldr	r2, [pc, #200]	; (8003a9c <TIM_Base_SetConfig+0x160>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d007      	beq.n	80039e6 <TIM_Base_SetConfig+0xaa>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a31      	ldr	r2, [pc, #196]	; (8003aa0 <TIM_Base_SetConfig+0x164>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d003      	beq.n	80039e6 <TIM_Base_SetConfig+0xaa>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a2c      	ldr	r2, [pc, #176]	; (8003a94 <TIM_Base_SetConfig+0x158>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d108      	bne.n	80039f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <TIM_Base_SetConfig+0x144>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d013      	beq.n	8003a4c <TIM_Base_SetConfig+0x110>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a1a      	ldr	r2, [pc, #104]	; (8003a90 <TIM_Base_SetConfig+0x154>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00f      	beq.n	8003a4c <TIM_Base_SetConfig+0x110>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a1a      	ldr	r2, [pc, #104]	; (8003a98 <TIM_Base_SetConfig+0x15c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00b      	beq.n	8003a4c <TIM_Base_SetConfig+0x110>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a19      	ldr	r2, [pc, #100]	; (8003a9c <TIM_Base_SetConfig+0x160>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d007      	beq.n	8003a4c <TIM_Base_SetConfig+0x110>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a18      	ldr	r2, [pc, #96]	; (8003aa0 <TIM_Base_SetConfig+0x164>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <TIM_Base_SetConfig+0x110>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a13      	ldr	r2, [pc, #76]	; (8003a94 <TIM_Base_SetConfig+0x158>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d103      	bne.n	8003a54 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d105      	bne.n	8003a72 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f023 0201 	bic.w	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	611a      	str	r2, [r3, #16]
  }
}
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40012c00 	.word	0x40012c00
 8003a84:	40000400 	.word	0x40000400
 8003a88:	40000800 	.word	0x40000800
 8003a8c:	40000c00 	.word	0x40000c00
 8003a90:	40013400 	.word	0x40013400
 8003a94:	40015000 	.word	0x40015000
 8003a98:	40014000 	.word	0x40014000
 8003a9c:	40014400 	.word	0x40014400
 8003aa0:	40014800 	.word	0x40014800

08003aa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f023 0201 	bic.w	r2, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0303 	bic.w	r3, r3, #3
 8003ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f023 0302 	bic.w	r3, r3, #2
 8003af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a30      	ldr	r2, [pc, #192]	; (8003bc0 <TIM_OC1_SetConfig+0x11c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d013      	beq.n	8003b2c <TIM_OC1_SetConfig+0x88>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a2f      	ldr	r2, [pc, #188]	; (8003bc4 <TIM_OC1_SetConfig+0x120>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d00f      	beq.n	8003b2c <TIM_OC1_SetConfig+0x88>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a2e      	ldr	r2, [pc, #184]	; (8003bc8 <TIM_OC1_SetConfig+0x124>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00b      	beq.n	8003b2c <TIM_OC1_SetConfig+0x88>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a2d      	ldr	r2, [pc, #180]	; (8003bcc <TIM_OC1_SetConfig+0x128>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d007      	beq.n	8003b2c <TIM_OC1_SetConfig+0x88>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a2c      	ldr	r2, [pc, #176]	; (8003bd0 <TIM_OC1_SetConfig+0x12c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d003      	beq.n	8003b2c <TIM_OC1_SetConfig+0x88>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a2b      	ldr	r2, [pc, #172]	; (8003bd4 <TIM_OC1_SetConfig+0x130>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d10c      	bne.n	8003b46 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f023 0308 	bic.w	r3, r3, #8
 8003b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f023 0304 	bic.w	r3, r3, #4
 8003b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a1d      	ldr	r2, [pc, #116]	; (8003bc0 <TIM_OC1_SetConfig+0x11c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d013      	beq.n	8003b76 <TIM_OC1_SetConfig+0xd2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a1c      	ldr	r2, [pc, #112]	; (8003bc4 <TIM_OC1_SetConfig+0x120>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00f      	beq.n	8003b76 <TIM_OC1_SetConfig+0xd2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a1b      	ldr	r2, [pc, #108]	; (8003bc8 <TIM_OC1_SetConfig+0x124>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00b      	beq.n	8003b76 <TIM_OC1_SetConfig+0xd2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a1a      	ldr	r2, [pc, #104]	; (8003bcc <TIM_OC1_SetConfig+0x128>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d007      	beq.n	8003b76 <TIM_OC1_SetConfig+0xd2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a19      	ldr	r2, [pc, #100]	; (8003bd0 <TIM_OC1_SetConfig+0x12c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d003      	beq.n	8003b76 <TIM_OC1_SetConfig+0xd2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a18      	ldr	r2, [pc, #96]	; (8003bd4 <TIM_OC1_SetConfig+0x130>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d111      	bne.n	8003b9a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	621a      	str	r2, [r3, #32]
}
 8003bb4:	bf00      	nop
 8003bb6:	371c      	adds	r7, #28
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	40012c00 	.word	0x40012c00
 8003bc4:	40013400 	.word	0x40013400
 8003bc8:	40014000 	.word	0x40014000
 8003bcc:	40014400 	.word	0x40014400
 8003bd0:	40014800 	.word	0x40014800
 8003bd4:	40015000 	.word	0x40015000

08003bd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f023 0210 	bic.w	r2, r3, #16
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	021b      	lsls	r3, r3, #8
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f023 0320 	bic.w	r3, r3, #32
 8003c26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a2c      	ldr	r2, [pc, #176]	; (8003ce8 <TIM_OC2_SetConfig+0x110>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d007      	beq.n	8003c4c <TIM_OC2_SetConfig+0x74>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a2b      	ldr	r2, [pc, #172]	; (8003cec <TIM_OC2_SetConfig+0x114>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d003      	beq.n	8003c4c <TIM_OC2_SetConfig+0x74>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a2a      	ldr	r2, [pc, #168]	; (8003cf0 <TIM_OC2_SetConfig+0x118>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d10d      	bne.n	8003c68 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a1f      	ldr	r2, [pc, #124]	; (8003ce8 <TIM_OC2_SetConfig+0x110>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d013      	beq.n	8003c98 <TIM_OC2_SetConfig+0xc0>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a1e      	ldr	r2, [pc, #120]	; (8003cec <TIM_OC2_SetConfig+0x114>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00f      	beq.n	8003c98 <TIM_OC2_SetConfig+0xc0>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a1e      	ldr	r2, [pc, #120]	; (8003cf4 <TIM_OC2_SetConfig+0x11c>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00b      	beq.n	8003c98 <TIM_OC2_SetConfig+0xc0>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a1d      	ldr	r2, [pc, #116]	; (8003cf8 <TIM_OC2_SetConfig+0x120>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d007      	beq.n	8003c98 <TIM_OC2_SetConfig+0xc0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a1c      	ldr	r2, [pc, #112]	; (8003cfc <TIM_OC2_SetConfig+0x124>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d003      	beq.n	8003c98 <TIM_OC2_SetConfig+0xc0>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a17      	ldr	r2, [pc, #92]	; (8003cf0 <TIM_OC2_SetConfig+0x118>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d113      	bne.n	8003cc0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	621a      	str	r2, [r3, #32]
}
 8003cda:	bf00      	nop
 8003cdc:	371c      	adds	r7, #28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40012c00 	.word	0x40012c00
 8003cec:	40013400 	.word	0x40013400
 8003cf0:	40015000 	.word	0x40015000
 8003cf4:	40014000 	.word	0x40014000
 8003cf8:	40014400 	.word	0x40014400
 8003cfc:	40014800 	.word	0x40014800

08003d00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0303 	bic.w	r3, r3, #3
 8003d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	021b      	lsls	r3, r3, #8
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a2b      	ldr	r2, [pc, #172]	; (8003e0c <TIM_OC3_SetConfig+0x10c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d007      	beq.n	8003d72 <TIM_OC3_SetConfig+0x72>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a2a      	ldr	r2, [pc, #168]	; (8003e10 <TIM_OC3_SetConfig+0x110>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d003      	beq.n	8003d72 <TIM_OC3_SetConfig+0x72>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a29      	ldr	r2, [pc, #164]	; (8003e14 <TIM_OC3_SetConfig+0x114>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d10d      	bne.n	8003d8e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	021b      	lsls	r3, r3, #8
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a1e      	ldr	r2, [pc, #120]	; (8003e0c <TIM_OC3_SetConfig+0x10c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d013      	beq.n	8003dbe <TIM_OC3_SetConfig+0xbe>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a1d      	ldr	r2, [pc, #116]	; (8003e10 <TIM_OC3_SetConfig+0x110>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00f      	beq.n	8003dbe <TIM_OC3_SetConfig+0xbe>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a1d      	ldr	r2, [pc, #116]	; (8003e18 <TIM_OC3_SetConfig+0x118>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00b      	beq.n	8003dbe <TIM_OC3_SetConfig+0xbe>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a1c      	ldr	r2, [pc, #112]	; (8003e1c <TIM_OC3_SetConfig+0x11c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d007      	beq.n	8003dbe <TIM_OC3_SetConfig+0xbe>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a1b      	ldr	r2, [pc, #108]	; (8003e20 <TIM_OC3_SetConfig+0x120>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d003      	beq.n	8003dbe <TIM_OC3_SetConfig+0xbe>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a16      	ldr	r2, [pc, #88]	; (8003e14 <TIM_OC3_SetConfig+0x114>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d113      	bne.n	8003de6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	621a      	str	r2, [r3, #32]
}
 8003e00:	bf00      	nop
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	40012c00 	.word	0x40012c00
 8003e10:	40013400 	.word	0x40013400
 8003e14:	40015000 	.word	0x40015000
 8003e18:	40014000 	.word	0x40014000
 8003e1c:	40014400 	.word	0x40014400
 8003e20:	40014800 	.word	0x40014800

08003e24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	031b      	lsls	r3, r3, #12
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a2c      	ldr	r2, [pc, #176]	; (8003f34 <TIM_OC4_SetConfig+0x110>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d007      	beq.n	8003e98 <TIM_OC4_SetConfig+0x74>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a2b      	ldr	r2, [pc, #172]	; (8003f38 <TIM_OC4_SetConfig+0x114>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d003      	beq.n	8003e98 <TIM_OC4_SetConfig+0x74>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a2a      	ldr	r2, [pc, #168]	; (8003f3c <TIM_OC4_SetConfig+0x118>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d10d      	bne.n	8003eb4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	031b      	lsls	r3, r3, #12
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a1f      	ldr	r2, [pc, #124]	; (8003f34 <TIM_OC4_SetConfig+0x110>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d013      	beq.n	8003ee4 <TIM_OC4_SetConfig+0xc0>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a1e      	ldr	r2, [pc, #120]	; (8003f38 <TIM_OC4_SetConfig+0x114>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00f      	beq.n	8003ee4 <TIM_OC4_SetConfig+0xc0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a1e      	ldr	r2, [pc, #120]	; (8003f40 <TIM_OC4_SetConfig+0x11c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00b      	beq.n	8003ee4 <TIM_OC4_SetConfig+0xc0>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <TIM_OC4_SetConfig+0x120>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d007      	beq.n	8003ee4 <TIM_OC4_SetConfig+0xc0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a1c      	ldr	r2, [pc, #112]	; (8003f48 <TIM_OC4_SetConfig+0x124>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d003      	beq.n	8003ee4 <TIM_OC4_SetConfig+0xc0>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a17      	ldr	r2, [pc, #92]	; (8003f3c <TIM_OC4_SetConfig+0x118>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d113      	bne.n	8003f0c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ef2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	019b      	lsls	r3, r3, #6
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	019b      	lsls	r3, r3, #6
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	621a      	str	r2, [r3, #32]
}
 8003f26:	bf00      	nop
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40012c00 	.word	0x40012c00
 8003f38:	40013400 	.word	0x40013400
 8003f3c:	40015000 	.word	0x40015000
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40014400 	.word	0x40014400
 8003f48:	40014800 	.word	0x40014800

08003f4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	041b      	lsls	r3, r3, #16
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a19      	ldr	r2, [pc, #100]	; (8004008 <TIM_OC5_SetConfig+0xbc>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d013      	beq.n	8003fce <TIM_OC5_SetConfig+0x82>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a18      	ldr	r2, [pc, #96]	; (800400c <TIM_OC5_SetConfig+0xc0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00f      	beq.n	8003fce <TIM_OC5_SetConfig+0x82>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a17      	ldr	r2, [pc, #92]	; (8004010 <TIM_OC5_SetConfig+0xc4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00b      	beq.n	8003fce <TIM_OC5_SetConfig+0x82>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a16      	ldr	r2, [pc, #88]	; (8004014 <TIM_OC5_SetConfig+0xc8>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d007      	beq.n	8003fce <TIM_OC5_SetConfig+0x82>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a15      	ldr	r2, [pc, #84]	; (8004018 <TIM_OC5_SetConfig+0xcc>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d003      	beq.n	8003fce <TIM_OC5_SetConfig+0x82>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a14      	ldr	r2, [pc, #80]	; (800401c <TIM_OC5_SetConfig+0xd0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d109      	bne.n	8003fe2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	021b      	lsls	r3, r3, #8
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	621a      	str	r2, [r3, #32]
}
 8003ffc:	bf00      	nop
 8003ffe:	371c      	adds	r7, #28
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	40012c00 	.word	0x40012c00
 800400c:	40013400 	.word	0x40013400
 8004010:	40014000 	.word	0x40014000
 8004014:	40014400 	.word	0x40014400
 8004018:	40014800 	.word	0x40014800
 800401c:	40015000 	.word	0x40015000

08004020 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800404e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	021b      	lsls	r3, r3, #8
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	051b      	lsls	r3, r3, #20
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a1a      	ldr	r2, [pc, #104]	; (80040e0 <TIM_OC6_SetConfig+0xc0>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d013      	beq.n	80040a4 <TIM_OC6_SetConfig+0x84>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a19      	ldr	r2, [pc, #100]	; (80040e4 <TIM_OC6_SetConfig+0xc4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00f      	beq.n	80040a4 <TIM_OC6_SetConfig+0x84>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <TIM_OC6_SetConfig+0xc8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00b      	beq.n	80040a4 <TIM_OC6_SetConfig+0x84>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a17      	ldr	r2, [pc, #92]	; (80040ec <TIM_OC6_SetConfig+0xcc>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d007      	beq.n	80040a4 <TIM_OC6_SetConfig+0x84>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a16      	ldr	r2, [pc, #88]	; (80040f0 <TIM_OC6_SetConfig+0xd0>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d003      	beq.n	80040a4 <TIM_OC6_SetConfig+0x84>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a15      	ldr	r2, [pc, #84]	; (80040f4 <TIM_OC6_SetConfig+0xd4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d109      	bne.n	80040b8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	029b      	lsls	r3, r3, #10
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40012c00 	.word	0x40012c00
 80040e4:	40013400 	.word	0x40013400
 80040e8:	40014000 	.word	0x40014000
 80040ec:	40014400 	.word	0x40014400
 80040f0:	40014800 	.word	0x40014800
 80040f4:	40015000 	.word	0x40015000

080040f8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004118:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412a:	f023 0307 	bic.w	r3, r3, #7
 800412e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4a56      	ldr	r2, [pc, #344]	; (80042a0 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	f000 80a2 	beq.w	8004292 <TIM_SlaveTimer_SetConfig+0x19a>
 800414e:	4a54      	ldr	r2, [pc, #336]	; (80042a0 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	f200 809b 	bhi.w	800428c <TIM_SlaveTimer_SetConfig+0x194>
 8004156:	4a53      	ldr	r2, [pc, #332]	; (80042a4 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8004158:	4293      	cmp	r3, r2
 800415a:	f000 809a 	beq.w	8004292 <TIM_SlaveTimer_SetConfig+0x19a>
 800415e:	4a51      	ldr	r2, [pc, #324]	; (80042a4 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8004160:	4293      	cmp	r3, r2
 8004162:	f200 8093 	bhi.w	800428c <TIM_SlaveTimer_SetConfig+0x194>
 8004166:	4a50      	ldr	r2, [pc, #320]	; (80042a8 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8004168:	4293      	cmp	r3, r2
 800416a:	f000 8092 	beq.w	8004292 <TIM_SlaveTimer_SetConfig+0x19a>
 800416e:	4a4e      	ldr	r2, [pc, #312]	; (80042a8 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8004170:	4293      	cmp	r3, r2
 8004172:	f200 808b 	bhi.w	800428c <TIM_SlaveTimer_SetConfig+0x194>
 8004176:	4a4d      	ldr	r2, [pc, #308]	; (80042ac <TIM_SlaveTimer_SetConfig+0x1b4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	f000 808a 	beq.w	8004292 <TIM_SlaveTimer_SetConfig+0x19a>
 800417e:	4a4b      	ldr	r2, [pc, #300]	; (80042ac <TIM_SlaveTimer_SetConfig+0x1b4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	f200 8083 	bhi.w	800428c <TIM_SlaveTimer_SetConfig+0x194>
 8004186:	4a4a      	ldr	r2, [pc, #296]	; (80042b0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	f000 8082 	beq.w	8004292 <TIM_SlaveTimer_SetConfig+0x19a>
 800418e:	4a48      	ldr	r2, [pc, #288]	; (80042b0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d87b      	bhi.n	800428c <TIM_SlaveTimer_SetConfig+0x194>
 8004194:	4a47      	ldr	r2, [pc, #284]	; (80042b4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d07b      	beq.n	8004292 <TIM_SlaveTimer_SetConfig+0x19a>
 800419a:	4a46      	ldr	r2, [pc, #280]	; (80042b4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d875      	bhi.n	800428c <TIM_SlaveTimer_SetConfig+0x194>
 80041a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80041a4:	d075      	beq.n	8004292 <TIM_SlaveTimer_SetConfig+0x19a>
 80041a6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80041aa:	d86f      	bhi.n	800428c <TIM_SlaveTimer_SetConfig+0x194>
 80041ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b0:	d06f      	beq.n	8004292 <TIM_SlaveTimer_SetConfig+0x19a>
 80041b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b6:	d869      	bhi.n	800428c <TIM_SlaveTimer_SetConfig+0x194>
 80041b8:	2b70      	cmp	r3, #112	; 0x70
 80041ba:	d01a      	beq.n	80041f2 <TIM_SlaveTimer_SetConfig+0xfa>
 80041bc:	2b70      	cmp	r3, #112	; 0x70
 80041be:	d865      	bhi.n	800428c <TIM_SlaveTimer_SetConfig+0x194>
 80041c0:	2b60      	cmp	r3, #96	; 0x60
 80041c2:	d059      	beq.n	8004278 <TIM_SlaveTimer_SetConfig+0x180>
 80041c4:	2b60      	cmp	r3, #96	; 0x60
 80041c6:	d861      	bhi.n	800428c <TIM_SlaveTimer_SetConfig+0x194>
 80041c8:	2b50      	cmp	r3, #80	; 0x50
 80041ca:	d04b      	beq.n	8004264 <TIM_SlaveTimer_SetConfig+0x16c>
 80041cc:	2b50      	cmp	r3, #80	; 0x50
 80041ce:	d85d      	bhi.n	800428c <TIM_SlaveTimer_SetConfig+0x194>
 80041d0:	2b40      	cmp	r3, #64	; 0x40
 80041d2:	d019      	beq.n	8004208 <TIM_SlaveTimer_SetConfig+0x110>
 80041d4:	2b40      	cmp	r3, #64	; 0x40
 80041d6:	d859      	bhi.n	800428c <TIM_SlaveTimer_SetConfig+0x194>
 80041d8:	2b30      	cmp	r3, #48	; 0x30
 80041da:	d05a      	beq.n	8004292 <TIM_SlaveTimer_SetConfig+0x19a>
 80041dc:	2b30      	cmp	r3, #48	; 0x30
 80041de:	d855      	bhi.n	800428c <TIM_SlaveTimer_SetConfig+0x194>
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d056      	beq.n	8004292 <TIM_SlaveTimer_SetConfig+0x19a>
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d851      	bhi.n	800428c <TIM_SlaveTimer_SetConfig+0x194>
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d052      	beq.n	8004292 <TIM_SlaveTimer_SetConfig+0x19a>
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d050      	beq.n	8004292 <TIM_SlaveTimer_SetConfig+0x19a>
 80041f0:	e04c      	b.n	800428c <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004202:	f000 f8d5 	bl	80043b0 <TIM_ETR_SetConfig>
      break;
 8004206:	e045      	b.n	8004294 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b05      	cmp	r3, #5
 800420e:	d004      	beq.n	800421a <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8004214:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8004218:	d101      	bne.n	800421e <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e03b      	b.n	8004296 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6a1a      	ldr	r2, [r3, #32]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0201 	bic.w	r2, r2, #1
 8004234:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004244:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	4313      	orrs	r3, r2
 8004250:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	621a      	str	r2, [r3, #32]
      break;
 8004262:	e017      	b.n	8004294 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004270:	461a      	mov	r2, r3
 8004272:	f000 f821 	bl	80042b8 <TIM_TI1_ConfigInputStage>
      break;
 8004276:	e00d      	b.n	8004294 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004284:	461a      	mov	r2, r3
 8004286:	f000 f846 	bl	8004316 <TIM_TI2_ConfigInputStage>
      break;
 800428a:	e003      	b.n	8004294 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	75fb      	strb	r3, [r7, #23]
      break;
 8004290:	e000      	b.n	8004294 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8004292:	bf00      	nop
  }

  return status;
 8004294:	7dfb      	ldrb	r3, [r7, #23]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	00100070 	.word	0x00100070
 80042a4:	00100060 	.word	0x00100060
 80042a8:	00100050 	.word	0x00100050
 80042ac:	00100040 	.word	0x00100040
 80042b0:	00100030 	.word	0x00100030
 80042b4:	00100020 	.word	0x00100020

080042b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	f023 0201 	bic.w	r2, r3, #1
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f023 030a 	bic.w	r3, r3, #10
 80042f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004316:	b480      	push	{r7}
 8004318:	b087      	sub	sp, #28
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	f023 0210 	bic.w	r2, r3, #16
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004340:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	031b      	lsls	r3, r3, #12
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004352:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	621a      	str	r2, [r3, #32]
}
 800436a:	bf00      	nop
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004376:	b480      	push	{r7}
 8004378:	b085      	sub	sp, #20
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800438c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	f043 0307 	orr.w	r3, r3, #7
 800439c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	609a      	str	r2, [r3, #8]
}
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	021a      	lsls	r2, r3, #8
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	609a      	str	r2, [r3, #8]
}
 80043e4:	bf00      	nop
 80043e6:	371c      	adds	r7, #28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	2201      	movs	r2, #1
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a1a      	ldr	r2, [r3, #32]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	43db      	mvns	r3, r3
 8004412:	401a      	ands	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a1a      	ldr	r2, [r3, #32]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	fa01 f303 	lsl.w	r3, r1, r3
 8004428:	431a      	orrs	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
}
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
	...

0800443c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004450:	2302      	movs	r3, #2
 8004452:	e074      	b.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a34      	ldr	r2, [pc, #208]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d009      	beq.n	8004492 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a33      	ldr	r2, [pc, #204]	; (8004550 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d004      	beq.n	8004492 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a31      	ldr	r2, [pc, #196]	; (8004554 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d108      	bne.n	80044a4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004498:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a21      	ldr	r2, [pc, #132]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d022      	beq.n	8004512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d4:	d01d      	beq.n	8004512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a1f      	ldr	r2, [pc, #124]	; (8004558 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d018      	beq.n	8004512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1d      	ldr	r2, [pc, #116]	; (800455c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d013      	beq.n	8004512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a1c      	ldr	r2, [pc, #112]	; (8004560 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00e      	beq.n	8004512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a15      	ldr	r2, [pc, #84]	; (8004550 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d009      	beq.n	8004512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a18      	ldr	r2, [pc, #96]	; (8004564 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d004      	beq.n	8004512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a11      	ldr	r2, [pc, #68]	; (8004554 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d10c      	bne.n	800452c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	4313      	orrs	r3, r2
 8004522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40012c00 	.word	0x40012c00
 8004550:	40013400 	.word	0x40013400
 8004554:	40015000 	.word	0x40015000
 8004558:	40000400 	.word	0x40000400
 800455c:	40000800 	.word	0x40000800
 8004560:	40000c00 	.word	0x40000c00
 8004564:	40014000 	.word	0x40014000

08004568 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004580:	2302      	movs	r3, #2
 8004582:	e078      	b.n	8004676 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	041b      	lsls	r3, r3, #16
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a1c      	ldr	r2, [pc, #112]	; (8004684 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d009      	beq.n	800462a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a1b      	ldr	r2, [pc, #108]	; (8004688 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d004      	beq.n	800462a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a19      	ldr	r2, [pc, #100]	; (800468c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d11c      	bne.n	8004664 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	051b      	lsls	r3, r3, #20
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40012c00 	.word	0x40012c00
 8004688:	40013400 	.word	0x40013400
 800468c:	40015000 	.word	0x40015000

08004690 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{ /* Check the UART handle allocation */
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  if (huart == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e042      	b.n	80047b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004734:	2b00      	cmp	r3, #0
 8004736:	d106      	bne.n	8004746 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7fc fcdd 	bl	8001100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2224      	movs	r2, #36	; 0x24
 800474a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0201 	bic.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fc7a 	bl	8005060 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f97b 	bl	8004a68 <UART_SetConfig>
 8004772:	4603      	mov	r3, r0
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e01b      	b.n	80047b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800478a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800479a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 fcf9 	bl	80051a4 <UART_CheckIdleState>
 80047b2:	4603      	mov	r3, r0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08a      	sub	sp, #40	; 0x28
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	4613      	mov	r3, r2
 80047ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	d17b      	bne.n	80048ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <HAL_UART_Transmit+0x26>
 80047dc:	88fb      	ldrh	r3, [r7, #6]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e074      	b.n	80048d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2221      	movs	r2, #33	; 0x21
 80047f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047f6:	f7fc fedb 	bl	80015b0 <HAL_GetTick>
 80047fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	88fa      	ldrh	r2, [r7, #6]
 8004800:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	88fa      	ldrh	r2, [r7, #6]
 8004808:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004814:	d108      	bne.n	8004828 <HAL_UART_Transmit+0x6c>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d104      	bne.n	8004828 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800481e:	2300      	movs	r3, #0
 8004820:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	e003      	b.n	8004830 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800482c:	2300      	movs	r3, #0
 800482e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004830:	e030      	b.n	8004894 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2200      	movs	r2, #0
 800483a:	2180      	movs	r1, #128	; 0x80
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 fd5b 	bl	80052f8 <UART_WaitOnFlagUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e03d      	b.n	80048d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10b      	bne.n	8004872 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004868:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	3302      	adds	r3, #2
 800486e:	61bb      	str	r3, [r7, #24]
 8004870:	e007      	b.n	8004882 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	781a      	ldrb	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	3301      	adds	r3, #1
 8004880:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1c8      	bne.n	8004832 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2200      	movs	r2, #0
 80048a8:	2140      	movs	r1, #64	; 0x40
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 fd24 	bl	80052f8 <UART_WaitOnFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e006      	b.n	80048d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e000      	b.n	80048d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80048ce:	2302      	movs	r3, #2
  }
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3720      	adds	r7, #32
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08a      	sub	sp, #40	; 0x28
 80048dc:	af02      	add	r7, sp, #8
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	4613      	mov	r3, r2
 80048e6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ee:	2b20      	cmp	r3, #32
 80048f0:	f040 80b5 	bne.w	8004a5e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <HAL_UART_Receive+0x28>
 80048fa:	88fb      	ldrh	r3, [r7, #6]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e0ad      	b.n	8004a60 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2222      	movs	r2, #34	; 0x22
 8004910:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800491a:	f7fc fe49 	bl	80015b0 <HAL_GetTick>
 800491e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	88fa      	ldrh	r2, [r7, #6]
 8004924:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	88fa      	ldrh	r2, [r7, #6]
 800492c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004938:	d10e      	bne.n	8004958 <HAL_UART_Receive+0x80>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d105      	bne.n	800494e <HAL_UART_Receive+0x76>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004948:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800494c:	e02d      	b.n	80049aa <HAL_UART_Receive+0xd2>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	22ff      	movs	r2, #255	; 0xff
 8004952:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004956:	e028      	b.n	80049aa <HAL_UART_Receive+0xd2>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10d      	bne.n	800497c <HAL_UART_Receive+0xa4>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d104      	bne.n	8004972 <HAL_UART_Receive+0x9a>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	22ff      	movs	r2, #255	; 0xff
 800496c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004970:	e01b      	b.n	80049aa <HAL_UART_Receive+0xd2>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	227f      	movs	r2, #127	; 0x7f
 8004976:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800497a:	e016      	b.n	80049aa <HAL_UART_Receive+0xd2>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004984:	d10d      	bne.n	80049a2 <HAL_UART_Receive+0xca>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d104      	bne.n	8004998 <HAL_UART_Receive+0xc0>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	227f      	movs	r2, #127	; 0x7f
 8004992:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004996:	e008      	b.n	80049aa <HAL_UART_Receive+0xd2>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	223f      	movs	r2, #63	; 0x3f
 800499c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049a0:	e003      	b.n	80049aa <HAL_UART_Receive+0xd2>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80049b0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ba:	d108      	bne.n	80049ce <HAL_UART_Receive+0xf6>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d104      	bne.n	80049ce <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80049c4:	2300      	movs	r3, #0
 80049c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	61bb      	str	r3, [r7, #24]
 80049cc:	e003      	b.n	80049d6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80049d6:	e036      	b.n	8004a46 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	2200      	movs	r2, #0
 80049e0:	2120      	movs	r1, #32
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 fc88 	bl	80052f8 <UART_WaitOnFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d005      	beq.n	80049fa <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e032      	b.n	8004a60 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10c      	bne.n	8004a1a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	8a7b      	ldrh	r3, [r7, #18]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	3302      	adds	r3, #2
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	e00c      	b.n	8004a34 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	8a7b      	ldrh	r3, [r7, #18]
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	4013      	ands	r3, r2
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	3301      	adds	r3, #1
 8004a32:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1c2      	bne.n	80049d8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e000      	b.n	8004a60 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004a5e:	2302      	movs	r3, #2
  }
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3720      	adds	r7, #32
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a6c:	b08c      	sub	sp, #48	; 0x30
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	431a      	orrs	r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	4baa      	ldr	r3, [pc, #680]	; (8004d40 <UART_SetConfig+0x2d8>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	6812      	ldr	r2, [r2, #0]
 8004a9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004aa0:	430b      	orrs	r3, r1
 8004aa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a9f      	ldr	r2, [pc, #636]	; (8004d44 <UART_SetConfig+0x2dc>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004ade:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	6812      	ldr	r2, [r2, #0]
 8004ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	f023 010f 	bic.w	r1, r3, #15
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a90      	ldr	r2, [pc, #576]	; (8004d48 <UART_SetConfig+0x2e0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d125      	bne.n	8004b58 <UART_SetConfig+0xf0>
 8004b0c:	4b8f      	ldr	r3, [pc, #572]	; (8004d4c <UART_SetConfig+0x2e4>)
 8004b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d81a      	bhi.n	8004b50 <UART_SetConfig+0xe8>
 8004b1a:	a201      	add	r2, pc, #4	; (adr r2, 8004b20 <UART_SetConfig+0xb8>)
 8004b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b20:	08004b31 	.word	0x08004b31
 8004b24:	08004b41 	.word	0x08004b41
 8004b28:	08004b39 	.word	0x08004b39
 8004b2c:	08004b49 	.word	0x08004b49
 8004b30:	2301      	movs	r3, #1
 8004b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b36:	e116      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b3e:	e112      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004b40:	2304      	movs	r3, #4
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b46:	e10e      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004b48:	2308      	movs	r3, #8
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b4e:	e10a      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004b50:	2310      	movs	r3, #16
 8004b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b56:	e106      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a7c      	ldr	r2, [pc, #496]	; (8004d50 <UART_SetConfig+0x2e8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d138      	bne.n	8004bd4 <UART_SetConfig+0x16c>
 8004b62:	4b7a      	ldr	r3, [pc, #488]	; (8004d4c <UART_SetConfig+0x2e4>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b68:	f003 030c 	and.w	r3, r3, #12
 8004b6c:	2b0c      	cmp	r3, #12
 8004b6e:	d82d      	bhi.n	8004bcc <UART_SetConfig+0x164>
 8004b70:	a201      	add	r2, pc, #4	; (adr r2, 8004b78 <UART_SetConfig+0x110>)
 8004b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b76:	bf00      	nop
 8004b78:	08004bad 	.word	0x08004bad
 8004b7c:	08004bcd 	.word	0x08004bcd
 8004b80:	08004bcd 	.word	0x08004bcd
 8004b84:	08004bcd 	.word	0x08004bcd
 8004b88:	08004bbd 	.word	0x08004bbd
 8004b8c:	08004bcd 	.word	0x08004bcd
 8004b90:	08004bcd 	.word	0x08004bcd
 8004b94:	08004bcd 	.word	0x08004bcd
 8004b98:	08004bb5 	.word	0x08004bb5
 8004b9c:	08004bcd 	.word	0x08004bcd
 8004ba0:	08004bcd 	.word	0x08004bcd
 8004ba4:	08004bcd 	.word	0x08004bcd
 8004ba8:	08004bc5 	.word	0x08004bc5
 8004bac:	2300      	movs	r3, #0
 8004bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bb2:	e0d8      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bba:	e0d4      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004bbc:	2304      	movs	r3, #4
 8004bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bc2:	e0d0      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004bc4:	2308      	movs	r3, #8
 8004bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bca:	e0cc      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004bcc:	2310      	movs	r3, #16
 8004bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bd2:	e0c8      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a5e      	ldr	r2, [pc, #376]	; (8004d54 <UART_SetConfig+0x2ec>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d125      	bne.n	8004c2a <UART_SetConfig+0x1c2>
 8004bde:	4b5b      	ldr	r3, [pc, #364]	; (8004d4c <UART_SetConfig+0x2e4>)
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004be8:	2b30      	cmp	r3, #48	; 0x30
 8004bea:	d016      	beq.n	8004c1a <UART_SetConfig+0x1b2>
 8004bec:	2b30      	cmp	r3, #48	; 0x30
 8004bee:	d818      	bhi.n	8004c22 <UART_SetConfig+0x1ba>
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d00a      	beq.n	8004c0a <UART_SetConfig+0x1a2>
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	d814      	bhi.n	8004c22 <UART_SetConfig+0x1ba>
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <UART_SetConfig+0x19a>
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d008      	beq.n	8004c12 <UART_SetConfig+0x1aa>
 8004c00:	e00f      	b.n	8004c22 <UART_SetConfig+0x1ba>
 8004c02:	2300      	movs	r3, #0
 8004c04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c08:	e0ad      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c10:	e0a9      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004c12:	2304      	movs	r3, #4
 8004c14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c18:	e0a5      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004c1a:	2308      	movs	r3, #8
 8004c1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c20:	e0a1      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004c22:	2310      	movs	r3, #16
 8004c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c28:	e09d      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a4a      	ldr	r2, [pc, #296]	; (8004d58 <UART_SetConfig+0x2f0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d125      	bne.n	8004c80 <UART_SetConfig+0x218>
 8004c34:	4b45      	ldr	r3, [pc, #276]	; (8004d4c <UART_SetConfig+0x2e4>)
 8004c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c3e:	2bc0      	cmp	r3, #192	; 0xc0
 8004c40:	d016      	beq.n	8004c70 <UART_SetConfig+0x208>
 8004c42:	2bc0      	cmp	r3, #192	; 0xc0
 8004c44:	d818      	bhi.n	8004c78 <UART_SetConfig+0x210>
 8004c46:	2b80      	cmp	r3, #128	; 0x80
 8004c48:	d00a      	beq.n	8004c60 <UART_SetConfig+0x1f8>
 8004c4a:	2b80      	cmp	r3, #128	; 0x80
 8004c4c:	d814      	bhi.n	8004c78 <UART_SetConfig+0x210>
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <UART_SetConfig+0x1f0>
 8004c52:	2b40      	cmp	r3, #64	; 0x40
 8004c54:	d008      	beq.n	8004c68 <UART_SetConfig+0x200>
 8004c56:	e00f      	b.n	8004c78 <UART_SetConfig+0x210>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c5e:	e082      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004c60:	2302      	movs	r3, #2
 8004c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c66:	e07e      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c6e:	e07a      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004c70:	2308      	movs	r3, #8
 8004c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c76:	e076      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004c78:	2310      	movs	r3, #16
 8004c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c7e:	e072      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a35      	ldr	r2, [pc, #212]	; (8004d5c <UART_SetConfig+0x2f4>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d12a      	bne.n	8004ce0 <UART_SetConfig+0x278>
 8004c8a:	4b30      	ldr	r3, [pc, #192]	; (8004d4c <UART_SetConfig+0x2e4>)
 8004c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c98:	d01a      	beq.n	8004cd0 <UART_SetConfig+0x268>
 8004c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c9e:	d81b      	bhi.n	8004cd8 <UART_SetConfig+0x270>
 8004ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca4:	d00c      	beq.n	8004cc0 <UART_SetConfig+0x258>
 8004ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004caa:	d815      	bhi.n	8004cd8 <UART_SetConfig+0x270>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <UART_SetConfig+0x250>
 8004cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cb4:	d008      	beq.n	8004cc8 <UART_SetConfig+0x260>
 8004cb6:	e00f      	b.n	8004cd8 <UART_SetConfig+0x270>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cbe:	e052      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cc6:	e04e      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004cc8:	2304      	movs	r3, #4
 8004cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cce:	e04a      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004cd0:	2308      	movs	r3, #8
 8004cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cd6:	e046      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004cd8:	2310      	movs	r3, #16
 8004cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cde:	e042      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a17      	ldr	r2, [pc, #92]	; (8004d44 <UART_SetConfig+0x2dc>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d13a      	bne.n	8004d60 <UART_SetConfig+0x2f8>
 8004cea:	4b18      	ldr	r3, [pc, #96]	; (8004d4c <UART_SetConfig+0x2e4>)
 8004cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cf8:	d01a      	beq.n	8004d30 <UART_SetConfig+0x2c8>
 8004cfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cfe:	d81b      	bhi.n	8004d38 <UART_SetConfig+0x2d0>
 8004d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d04:	d00c      	beq.n	8004d20 <UART_SetConfig+0x2b8>
 8004d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d0a:	d815      	bhi.n	8004d38 <UART_SetConfig+0x2d0>
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <UART_SetConfig+0x2b0>
 8004d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d14:	d008      	beq.n	8004d28 <UART_SetConfig+0x2c0>
 8004d16:	e00f      	b.n	8004d38 <UART_SetConfig+0x2d0>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d1e:	e022      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004d20:	2302      	movs	r3, #2
 8004d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d26:	e01e      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004d28:	2304      	movs	r3, #4
 8004d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d2e:	e01a      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004d30:	2308      	movs	r3, #8
 8004d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d36:	e016      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004d38:	2310      	movs	r3, #16
 8004d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d3e:	e012      	b.n	8004d66 <UART_SetConfig+0x2fe>
 8004d40:	cfff69f3 	.word	0xcfff69f3
 8004d44:	40008000 	.word	0x40008000
 8004d48:	40013800 	.word	0x40013800
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40004400 	.word	0x40004400
 8004d54:	40004800 	.word	0x40004800
 8004d58:	40004c00 	.word	0x40004c00
 8004d5c:	40005000 	.word	0x40005000
 8004d60:	2310      	movs	r3, #16
 8004d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4aae      	ldr	r2, [pc, #696]	; (8005024 <UART_SetConfig+0x5bc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	f040 8097 	bne.w	8004ea0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d823      	bhi.n	8004dc2 <UART_SetConfig+0x35a>
 8004d7a:	a201      	add	r2, pc, #4	; (adr r2, 8004d80 <UART_SetConfig+0x318>)
 8004d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d80:	08004da5 	.word	0x08004da5
 8004d84:	08004dc3 	.word	0x08004dc3
 8004d88:	08004dad 	.word	0x08004dad
 8004d8c:	08004dc3 	.word	0x08004dc3
 8004d90:	08004db3 	.word	0x08004db3
 8004d94:	08004dc3 	.word	0x08004dc3
 8004d98:	08004dc3 	.word	0x08004dc3
 8004d9c:	08004dc3 	.word	0x08004dc3
 8004da0:	08004dbb 	.word	0x08004dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da4:	f7fd fc40 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 8004da8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004daa:	e010      	b.n	8004dce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dac:	4b9e      	ldr	r3, [pc, #632]	; (8005028 <UART_SetConfig+0x5c0>)
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004db0:	e00d      	b.n	8004dce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004db2:	f7fd fbcb 	bl	800254c <HAL_RCC_GetSysClockFreq>
 8004db6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004db8:	e009      	b.n	8004dce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004dc0:	e005      	b.n	8004dce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004dcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 8130 	beq.w	8005036 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	4a94      	ldr	r2, [pc, #592]	; (800502c <UART_SetConfig+0x5c4>)
 8004ddc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004de0:	461a      	mov	r2, r3
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	4613      	mov	r3, r2
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	4413      	add	r3, r2
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d305      	bcc.n	8004e06 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d903      	bls.n	8004e0e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e0c:	e113      	b.n	8005036 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	2200      	movs	r2, #0
 8004e12:	60bb      	str	r3, [r7, #8]
 8004e14:	60fa      	str	r2, [r7, #12]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	4a84      	ldr	r2, [pc, #528]	; (800502c <UART_SetConfig+0x5c4>)
 8004e1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2200      	movs	r2, #0
 8004e24:	603b      	str	r3, [r7, #0]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e30:	f7fb fc32 	bl	8000698 <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4610      	mov	r0, r2
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	020b      	lsls	r3, r1, #8
 8004e46:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e4a:	0202      	lsls	r2, r0, #8
 8004e4c:	6979      	ldr	r1, [r7, #20]
 8004e4e:	6849      	ldr	r1, [r1, #4]
 8004e50:	0849      	lsrs	r1, r1, #1
 8004e52:	2000      	movs	r0, #0
 8004e54:	460c      	mov	r4, r1
 8004e56:	4605      	mov	r5, r0
 8004e58:	eb12 0804 	adds.w	r8, r2, r4
 8004e5c:	eb43 0905 	adc.w	r9, r3, r5
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	469a      	mov	sl, r3
 8004e68:	4693      	mov	fp, r2
 8004e6a:	4652      	mov	r2, sl
 8004e6c:	465b      	mov	r3, fp
 8004e6e:	4640      	mov	r0, r8
 8004e70:	4649      	mov	r1, r9
 8004e72:	f7fb fc11 	bl	8000698 <__aeabi_uldivmod>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e84:	d308      	bcc.n	8004e98 <UART_SetConfig+0x430>
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e8c:	d204      	bcs.n	8004e98 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6a3a      	ldr	r2, [r7, #32]
 8004e94:	60da      	str	r2, [r3, #12]
 8004e96:	e0ce      	b.n	8005036 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e9e:	e0ca      	b.n	8005036 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea8:	d166      	bne.n	8004f78 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004eaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d827      	bhi.n	8004f02 <UART_SetConfig+0x49a>
 8004eb2:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <UART_SetConfig+0x450>)
 8004eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb8:	08004edd 	.word	0x08004edd
 8004ebc:	08004ee5 	.word	0x08004ee5
 8004ec0:	08004eed 	.word	0x08004eed
 8004ec4:	08004f03 	.word	0x08004f03
 8004ec8:	08004ef3 	.word	0x08004ef3
 8004ecc:	08004f03 	.word	0x08004f03
 8004ed0:	08004f03 	.word	0x08004f03
 8004ed4:	08004f03 	.word	0x08004f03
 8004ed8:	08004efb 	.word	0x08004efb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004edc:	f7fd fba4 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 8004ee0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ee2:	e014      	b.n	8004f0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ee4:	f7fd fbb6 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 8004ee8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004eea:	e010      	b.n	8004f0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eec:	4b4e      	ldr	r3, [pc, #312]	; (8005028 <UART_SetConfig+0x5c0>)
 8004eee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ef0:	e00d      	b.n	8004f0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ef2:	f7fd fb2b 	bl	800254c <HAL_RCC_GetSysClockFreq>
 8004ef6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ef8:	e009      	b.n	8004f0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f00:	e005      	b.n	8004f0e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 8090 	beq.w	8005036 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	4a44      	ldr	r2, [pc, #272]	; (800502c <UART_SetConfig+0x5c4>)
 8004f1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f20:	461a      	mov	r2, r3
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f28:	005a      	lsls	r2, r3, #1
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	085b      	lsrs	r3, r3, #1
 8004f30:	441a      	add	r2, r3
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	2b0f      	cmp	r3, #15
 8004f40:	d916      	bls.n	8004f70 <UART_SetConfig+0x508>
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f48:	d212      	bcs.n	8004f70 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	f023 030f 	bic.w	r3, r3, #15
 8004f52:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	085b      	lsrs	r3, r3, #1
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	8bfb      	ldrh	r3, [r7, #30]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	8bfa      	ldrh	r2, [r7, #30]
 8004f6c:	60da      	str	r2, [r3, #12]
 8004f6e:	e062      	b.n	8005036 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f76:	e05e      	b.n	8005036 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d828      	bhi.n	8004fd2 <UART_SetConfig+0x56a>
 8004f80:	a201      	add	r2, pc, #4	; (adr r2, 8004f88 <UART_SetConfig+0x520>)
 8004f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f86:	bf00      	nop
 8004f88:	08004fad 	.word	0x08004fad
 8004f8c:	08004fb5 	.word	0x08004fb5
 8004f90:	08004fbd 	.word	0x08004fbd
 8004f94:	08004fd3 	.word	0x08004fd3
 8004f98:	08004fc3 	.word	0x08004fc3
 8004f9c:	08004fd3 	.word	0x08004fd3
 8004fa0:	08004fd3 	.word	0x08004fd3
 8004fa4:	08004fd3 	.word	0x08004fd3
 8004fa8:	08004fcb 	.word	0x08004fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fac:	f7fd fb3c 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 8004fb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fb2:	e014      	b.n	8004fde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fb4:	f7fd fb4e 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 8004fb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fba:	e010      	b.n	8004fde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fbc:	4b1a      	ldr	r3, [pc, #104]	; (8005028 <UART_SetConfig+0x5c0>)
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fc0:	e00d      	b.n	8004fde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fc2:	f7fd fac3 	bl	800254c <HAL_RCC_GetSysClockFreq>
 8004fc6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fc8:	e009      	b.n	8004fde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fd0:	e005      	b.n	8004fde <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004fdc:	bf00      	nop
    }

    if (pclk != 0U)
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d028      	beq.n	8005036 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	4a10      	ldr	r2, [pc, #64]	; (800502c <UART_SetConfig+0x5c4>)
 8004fea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	085b      	lsrs	r3, r3, #1
 8004ffc:	441a      	add	r2, r3
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	fbb2 f3f3 	udiv	r3, r2, r3
 8005006:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	2b0f      	cmp	r3, #15
 800500c:	d910      	bls.n	8005030 <UART_SetConfig+0x5c8>
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005014:	d20c      	bcs.n	8005030 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	b29a      	uxth	r2, r3
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	60da      	str	r2, [r3, #12]
 8005020:	e009      	b.n	8005036 <UART_SetConfig+0x5ce>
 8005022:	bf00      	nop
 8005024:	40008000 	.word	0x40008000
 8005028:	00f42400 	.word	0x00f42400
 800502c:	08006e68 	.word	0x08006e68
      }
      else
      {
        ret = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2201      	movs	r2, #1
 800503a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2201      	movs	r2, #1
 8005042:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2200      	movs	r2, #0
 800504a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2200      	movs	r2, #0
 8005050:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005052:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005056:	4618      	mov	r0, r3
 8005058:	3730      	adds	r7, #48	; 0x30
 800505a:	46bd      	mov	sp, r7
 800505c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506c:	f003 0308 	and.w	r3, r3, #8
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00a      	beq.n	80050ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f4:	f003 0310 	and.w	r3, r3, #16
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005116:	f003 0320 	and.w	r3, r3, #32
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01a      	beq.n	8005176 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800515e:	d10a      	bne.n	8005176 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	605a      	str	r2, [r3, #4]
  }
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b098      	sub	sp, #96	; 0x60
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051b4:	f7fc f9fc 	bl	80015b0 <HAL_GetTick>
 80051b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0308 	and.w	r3, r3, #8
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d12f      	bne.n	8005228 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051d0:	2200      	movs	r2, #0
 80051d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f88e 	bl	80052f8 <UART_WaitOnFlagUntilTimeout>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d022      	beq.n	8005228 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ea:	e853 3f00 	ldrex	r3, [r3]
 80051ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f6:	653b      	str	r3, [r7, #80]	; 0x50
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	461a      	mov	r2, r3
 80051fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005200:	647b      	str	r3, [r7, #68]	; 0x44
 8005202:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005208:	e841 2300 	strex	r3, r2, [r1]
 800520c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800520e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e6      	bne.n	80051e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e063      	b.n	80052f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b04      	cmp	r3, #4
 8005234:	d149      	bne.n	80052ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005236:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800523e:	2200      	movs	r2, #0
 8005240:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f857 	bl	80052f8 <UART_WaitOnFlagUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d03c      	beq.n	80052ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	623b      	str	r3, [r7, #32]
   return(result);
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005264:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	461a      	mov	r2, r3
 800526c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800526e:	633b      	str	r3, [r7, #48]	; 0x30
 8005270:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005276:	e841 2300 	strex	r3, r2, [r1]
 800527a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1e6      	bne.n	8005250 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3308      	adds	r3, #8
 8005288:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	e853 3f00 	ldrex	r3, [r3]
 8005290:	60fb      	str	r3, [r7, #12]
   return(result);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f023 0301 	bic.w	r3, r3, #1
 8005298:	64bb      	str	r3, [r7, #72]	; 0x48
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3308      	adds	r3, #8
 80052a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052a2:	61fa      	str	r2, [r7, #28]
 80052a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a6:	69b9      	ldr	r1, [r7, #24]
 80052a8:	69fa      	ldr	r2, [r7, #28]
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	617b      	str	r3, [r7, #20]
   return(result);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1e5      	bne.n	8005282 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e012      	b.n	80052f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3758      	adds	r7, #88	; 0x58
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	4613      	mov	r3, r2
 8005306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005308:	e04f      	b.n	80053aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005310:	d04b      	beq.n	80053aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005312:	f7fc f94d 	bl	80015b0 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	429a      	cmp	r2, r3
 8005320:	d302      	bcc.n	8005328 <UART_WaitOnFlagUntilTimeout+0x30>
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e04e      	b.n	80053ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	d037      	beq.n	80053aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b80      	cmp	r3, #128	; 0x80
 800533e:	d034      	beq.n	80053aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b40      	cmp	r3, #64	; 0x40
 8005344:	d031      	beq.n	80053aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	f003 0308 	and.w	r3, r3, #8
 8005350:	2b08      	cmp	r3, #8
 8005352:	d110      	bne.n	8005376 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2208      	movs	r2, #8
 800535a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f838 	bl	80053d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2208      	movs	r2, #8
 8005366:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e029      	b.n	80053ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005384:	d111      	bne.n	80053aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800538e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 f81e 	bl	80053d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2220      	movs	r2, #32
 800539a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e00f      	b.n	80053ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69da      	ldr	r2, [r3, #28]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4013      	ands	r3, r2
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	bf0c      	ite	eq
 80053ba:	2301      	moveq	r3, #1
 80053bc:	2300      	movne	r3, #0
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d0a0      	beq.n	800530a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b095      	sub	sp, #84	; 0x54
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e2:	e853 3f00 	ldrex	r3, [r3]
 80053e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	461a      	mov	r2, r3
 80053f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f8:	643b      	str	r3, [r7, #64]	; 0x40
 80053fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005400:	e841 2300 	strex	r3, r2, [r1]
 8005404:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1e6      	bne.n	80053da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3308      	adds	r3, #8
 8005412:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	e853 3f00 	ldrex	r3, [r3]
 800541a:	61fb      	str	r3, [r7, #28]
   return(result);
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005422:	f023 0301 	bic.w	r3, r3, #1
 8005426:	64bb      	str	r3, [r7, #72]	; 0x48
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3308      	adds	r3, #8
 800542e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005430:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005432:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005434:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005438:	e841 2300 	strex	r3, r2, [r1]
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1e3      	bne.n	800540c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005448:	2b01      	cmp	r3, #1
 800544a:	d118      	bne.n	800547e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	e853 3f00 	ldrex	r3, [r3]
 8005458:	60bb      	str	r3, [r7, #8]
   return(result);
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f023 0310 	bic.w	r3, r3, #16
 8005460:	647b      	str	r3, [r7, #68]	; 0x44
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800546a:	61bb      	str	r3, [r7, #24]
 800546c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546e:	6979      	ldr	r1, [r7, #20]
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	e841 2300 	strex	r3, r2, [r1]
 8005476:	613b      	str	r3, [r7, #16]
   return(result);
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1e6      	bne.n	800544c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2220      	movs	r2, #32
 8005482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005492:	bf00      	nop
 8005494:	3754      	adds	r7, #84	; 0x54
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800549e:	b480      	push	{r7}
 80054a0:	b085      	sub	sp, #20
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e027      	b.n	8005504 <HAL_UARTEx_DisableFifoMode+0x66>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2224      	movs	r2, #36	; 0x24
 80054c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0201 	bic.w	r2, r2, #1
 80054da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80054e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005524:	2302      	movs	r3, #2
 8005526:	e02d      	b.n	8005584 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2224      	movs	r2, #36	; 0x24
 8005534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0201 	bic.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f84f 	bl	8005608 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2220      	movs	r2, #32
 8005576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e02d      	b.n	8005600 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2224      	movs	r2, #36	; 0x24
 80055b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 0201 	bic.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f811 	bl	8005608 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005614:	2b00      	cmp	r3, #0
 8005616:	d108      	bne.n	800562a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005628:	e031      	b.n	800568e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800562a:	2308      	movs	r3, #8
 800562c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800562e:	2308      	movs	r3, #8
 8005630:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	0e5b      	lsrs	r3, r3, #25
 800563a:	b2db      	uxtb	r3, r3
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	0f5b      	lsrs	r3, r3, #29
 800564a:	b2db      	uxtb	r3, r3
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005652:	7bbb      	ldrb	r3, [r7, #14]
 8005654:	7b3a      	ldrb	r2, [r7, #12]
 8005656:	4911      	ldr	r1, [pc, #68]	; (800569c <UARTEx_SetNbDataToProcess+0x94>)
 8005658:	5c8a      	ldrb	r2, [r1, r2]
 800565a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800565e:	7b3a      	ldrb	r2, [r7, #12]
 8005660:	490f      	ldr	r1, [pc, #60]	; (80056a0 <UARTEx_SetNbDataToProcess+0x98>)
 8005662:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005664:	fb93 f3f2 	sdiv	r3, r3, r2
 8005668:	b29a      	uxth	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	7b7a      	ldrb	r2, [r7, #13]
 8005674:	4909      	ldr	r1, [pc, #36]	; (800569c <UARTEx_SetNbDataToProcess+0x94>)
 8005676:	5c8a      	ldrb	r2, [r1, r2]
 8005678:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800567c:	7b7a      	ldrb	r2, [r7, #13]
 800567e:	4908      	ldr	r1, [pc, #32]	; (80056a0 <UARTEx_SetNbDataToProcess+0x98>)
 8005680:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005682:	fb93 f3f2 	sdiv	r3, r3, r2
 8005686:	b29a      	uxth	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800568e:	bf00      	nop
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	08006e80 	.word	0x08006e80
 80056a0:	08006e88 	.word	0x08006e88

080056a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08a      	sub	sp, #40	; 0x28
 80056a8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80056aa:	2300      	movs	r3, #0
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ae:	4b7d      	ldr	r3, [pc, #500]	; (80058a4 <xTaskIncrementTick+0x200>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f040 80ec 	bne.w	8005890 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056b8:	4b7b      	ldr	r3, [pc, #492]	; (80058a8 <xTaskIncrementTick+0x204>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3301      	adds	r3, #1
 80056be:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80056c0:	4a79      	ldr	r2, [pc, #484]	; (80058a8 <xTaskIncrementTick+0x204>)
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d120      	bne.n	800570e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80056cc:	4b77      	ldr	r3, [pc, #476]	; (80058ac <xTaskIncrementTick+0x208>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80056d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80056e8:	bf00      	nop
 80056ea:	e7fe      	b.n	80056ea <xTaskIncrementTick+0x46>
 80056ec:	4b6f      	ldr	r3, [pc, #444]	; (80058ac <xTaskIncrementTick+0x208>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	61fb      	str	r3, [r7, #28]
 80056f2:	4b6f      	ldr	r3, [pc, #444]	; (80058b0 <xTaskIncrementTick+0x20c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a6d      	ldr	r2, [pc, #436]	; (80058ac <xTaskIncrementTick+0x208>)
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	4a6d      	ldr	r2, [pc, #436]	; (80058b0 <xTaskIncrementTick+0x20c>)
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	4b6c      	ldr	r3, [pc, #432]	; (80058b4 <xTaskIncrementTick+0x210>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3301      	adds	r3, #1
 8005706:	4a6b      	ldr	r2, [pc, #428]	; (80058b4 <xTaskIncrementTick+0x210>)
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	f000 f93d 	bl	8005988 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800570e:	4b6a      	ldr	r3, [pc, #424]	; (80058b8 <xTaskIncrementTick+0x214>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6a3a      	ldr	r2, [r7, #32]
 8005714:	429a      	cmp	r2, r3
 8005716:	f0c0 80a6 	bcc.w	8005866 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800571a:	4b64      	ldr	r3, [pc, #400]	; (80058ac <xTaskIncrementTick+0x208>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d104      	bne.n	800572e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005724:	4b64      	ldr	r3, [pc, #400]	; (80058b8 <xTaskIncrementTick+0x214>)
 8005726:	f04f 32ff 	mov.w	r2, #4294967295
 800572a:	601a      	str	r2, [r3, #0]
                    break;
 800572c:	e09b      	b.n	8005866 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800572e:	4b5f      	ldr	r3, [pc, #380]	; (80058ac <xTaskIncrementTick+0x208>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800573e:	6a3a      	ldr	r2, [r7, #32]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	429a      	cmp	r2, r3
 8005744:	d203      	bcs.n	800574e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005746:	4a5c      	ldr	r2, [pc, #368]	; (80058b8 <xTaskIncrementTick+0x214>)
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800574c:	e08b      	b.n	8005866 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	613b      	str	r3, [r7, #16]
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	68d2      	ldr	r2, [r2, #12]
 800575c:	609a      	str	r2, [r3, #8]
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	6892      	ldr	r2, [r2, #8]
 8005766:	605a      	str	r2, [r3, #4]
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	3304      	adds	r3, #4
 8005770:	429a      	cmp	r2, r3
 8005772:	d103      	bne.n	800577c <xTaskIncrementTick+0xd8>
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	605a      	str	r2, [r3, #4]
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	2200      	movs	r2, #0
 8005780:	615a      	str	r2, [r3, #20]
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	1e5a      	subs	r2, r3, #1
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01e      	beq.n	80057d2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	6a12      	ldr	r2, [r2, #32]
 80057a2:	609a      	str	r2, [r3, #8]
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	69d2      	ldr	r2, [r2, #28]
 80057ac:	605a      	str	r2, [r3, #4]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	3318      	adds	r3, #24
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d103      	bne.n	80057c2 <xTaskIncrementTick+0x11e>
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	6a1a      	ldr	r2, [r3, #32]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	605a      	str	r2, [r3, #4]
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	2200      	movs	r2, #0
 80057c6:	629a      	str	r2, [r3, #40]	; 0x28
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	1e5a      	subs	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d6:	2201      	movs	r2, #1
 80057d8:	409a      	lsls	r2, r3
 80057da:	4b38      	ldr	r3, [pc, #224]	; (80058bc <xTaskIncrementTick+0x218>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4313      	orrs	r3, r2
 80057e0:	4a36      	ldr	r2, [pc, #216]	; (80058bc <xTaskIncrementTick+0x218>)
 80057e2:	6013      	str	r3, [r2, #0]
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e8:	4935      	ldr	r1, [pc, #212]	; (80058c0 <xTaskIncrementTick+0x21c>)
 80057ea:	4613      	mov	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	440b      	add	r3, r1
 80057f4:	3304      	adds	r3, #4
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	60bb      	str	r3, [r7, #8]
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	609a      	str	r2, [r3, #8]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	60da      	str	r2, [r3, #12]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	3204      	adds	r2, #4
 8005810:	605a      	str	r2, [r3, #4]
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	1d1a      	adds	r2, r3, #4
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	609a      	str	r2, [r3, #8]
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581e:	4613      	mov	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4a26      	ldr	r2, [pc, #152]	; (80058c0 <xTaskIncrementTick+0x21c>)
 8005828:	441a      	add	r2, r3
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	615a      	str	r2, [r3, #20]
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005832:	4923      	ldr	r1, [pc, #140]	; (80058c0 <xTaskIncrementTick+0x21c>)
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	440b      	add	r3, r1
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	1c59      	adds	r1, r3, #1
 8005842:	481f      	ldr	r0, [pc, #124]	; (80058c0 <xTaskIncrementTick+0x21c>)
 8005844:	4613      	mov	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4403      	add	r3, r0
 800584e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005854:	4b1b      	ldr	r3, [pc, #108]	; (80058c4 <xTaskIncrementTick+0x220>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585a:	429a      	cmp	r2, r3
 800585c:	f67f af5d 	bls.w	800571a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8005860:	2301      	movs	r3, #1
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005864:	e759      	b.n	800571a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005866:	4b17      	ldr	r3, [pc, #92]	; (80058c4 <xTaskIncrementTick+0x220>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586c:	4914      	ldr	r1, [pc, #80]	; (80058c0 <xTaskIncrementTick+0x21c>)
 800586e:	4613      	mov	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	440b      	add	r3, r1
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d901      	bls.n	8005882 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800587e:	2301      	movs	r3, #1
 8005880:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8005882:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <xTaskIncrementTick+0x224>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d007      	beq.n	800589a <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 800588a:	2301      	movs	r3, #1
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
 800588e:	e004      	b.n	800589a <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005890:	4b0e      	ldr	r3, [pc, #56]	; (80058cc <xTaskIncrementTick+0x228>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3301      	adds	r3, #1
 8005896:	4a0d      	ldr	r2, [pc, #52]	; (80058cc <xTaskIncrementTick+0x228>)
 8005898:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800589c:	4618      	mov	r0, r3
 800589e:	3728      	adds	r7, #40	; 0x28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	20000328 	.word	0x20000328
 80058a8:	20000310 	.word	0x20000310
 80058ac:	20000308 	.word	0x20000308
 80058b0:	2000030c 	.word	0x2000030c
 80058b4:	20000320 	.word	0x20000320
 80058b8:	20000324 	.word	0x20000324
 80058bc:	20000314 	.word	0x20000314
 80058c0:	200002a4 	.word	0x200002a4
 80058c4:	200002a0 	.word	0x200002a0
 80058c8:	2000031c 	.word	0x2000031c
 80058cc:	20000318 	.word	0x20000318

080058d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058d6:	4b27      	ldr	r3, [pc, #156]	; (8005974 <vTaskSwitchContext+0xa4>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80058de:	4b26      	ldr	r3, [pc, #152]	; (8005978 <vTaskSwitchContext+0xa8>)
 80058e0:	2201      	movs	r2, #1
 80058e2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80058e4:	e03f      	b.n	8005966 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80058e6:	4b24      	ldr	r3, [pc, #144]	; (8005978 <vTaskSwitchContext+0xa8>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ec:	4b23      	ldr	r3, [pc, #140]	; (800597c <vTaskSwitchContext+0xac>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	fab3 f383 	clz	r3, r3
 80058f8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80058fa:	7afb      	ldrb	r3, [r7, #11]
 80058fc:	f1c3 031f 	rsb	r3, r3, #31
 8005900:	617b      	str	r3, [r7, #20]
 8005902:	491f      	ldr	r1, [pc, #124]	; (8005980 <vTaskSwitchContext+0xb0>)
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	440b      	add	r3, r1
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10a      	bne.n	800592c <vTaskSwitchContext+0x5c>
        __asm volatile
 8005916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	607b      	str	r3, [r7, #4]
    }
 8005928:	bf00      	nop
 800592a:	e7fe      	b.n	800592a <vTaskSwitchContext+0x5a>
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	4613      	mov	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4a12      	ldr	r2, [pc, #72]	; (8005980 <vTaskSwitchContext+0xb0>)
 8005938:	4413      	add	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	605a      	str	r2, [r3, #4]
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	3308      	adds	r3, #8
 800594e:	429a      	cmp	r2, r3
 8005950:	d104      	bne.n	800595c <vTaskSwitchContext+0x8c>
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	605a      	str	r2, [r3, #4]
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	4a08      	ldr	r2, [pc, #32]	; (8005984 <vTaskSwitchContext+0xb4>)
 8005964:	6013      	str	r3, [r2, #0]
}
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	20000328 	.word	0x20000328
 8005978:	2000031c 	.word	0x2000031c
 800597c:	20000314 	.word	0x20000314
 8005980:	200002a4 	.word	0x200002a4
 8005984:	200002a0 	.word	0x200002a0

08005988 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800598c:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <prvResetNextTaskUnblockTime+0x30>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d104      	bne.n	80059a0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005996:	4b09      	ldr	r3, [pc, #36]	; (80059bc <prvResetNextTaskUnblockTime+0x34>)
 8005998:	f04f 32ff 	mov.w	r2, #4294967295
 800599c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800599e:	e005      	b.n	80059ac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059a0:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <prvResetNextTaskUnblockTime+0x30>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a04      	ldr	r2, [pc, #16]	; (80059bc <prvResetNextTaskUnblockTime+0x34>)
 80059aa:	6013      	str	r3, [r2, #0]
}
 80059ac:	bf00      	nop
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	20000308 	.word	0x20000308
 80059bc:	20000324 	.word	0x20000324

080059c0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80059c0:	4b07      	ldr	r3, [pc, #28]	; (80059e0 <pxCurrentTCBConst2>)
 80059c2:	6819      	ldr	r1, [r3, #0]
 80059c4:	6808      	ldr	r0, [r1, #0]
 80059c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ca:	f380 8809 	msr	PSP, r0
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f04f 0000 	mov.w	r0, #0
 80059d6:	f380 8811 	msr	BASEPRI, r0
 80059da:	4770      	bx	lr
 80059dc:	f3af 8000 	nop.w

080059e0 <pxCurrentTCBConst2>:
 80059e0:	200002a0 	.word	0x200002a0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop
	...

080059f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80059f0:	f3ef 8009 	mrs	r0, PSP
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	4b15      	ldr	r3, [pc, #84]	; (8005a50 <pxCurrentTCBConst>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	f01e 0f10 	tst.w	lr, #16
 8005a00:	bf08      	it	eq
 8005a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0a:	6010      	str	r0, [r2, #0]
 8005a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a14:	f380 8811 	msr	BASEPRI, r0
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f7ff ff56 	bl	80058d0 <vTaskSwitchContext>
 8005a24:	f04f 0000 	mov.w	r0, #0
 8005a28:	f380 8811 	msr	BASEPRI, r0
 8005a2c:	bc09      	pop	{r0, r3}
 8005a2e:	6819      	ldr	r1, [r3, #0]
 8005a30:	6808      	ldr	r0, [r1, #0]
 8005a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a36:	f01e 0f10 	tst.w	lr, #16
 8005a3a:	bf08      	it	eq
 8005a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a40:	f380 8809 	msr	PSP, r0
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	f3af 8000 	nop.w

08005a50 <pxCurrentTCBConst>:
 8005a50:	200002a0 	.word	0x200002a0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop

08005a58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
        __asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	607b      	str	r3, [r7, #4]
    }
 8005a70:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005a72:	f7ff fe17 	bl	80056a4 <xTaskIncrementTick>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a7c:	4b06      	ldr	r3, [pc, #24]	; (8005a98 <SysTick_Handler+0x40>)
 8005a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	2300      	movs	r3, #0
 8005a86:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005a8e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005a90:	bf00      	nop
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <siprintf>:
 8005a9c:	b40e      	push	{r1, r2, r3}
 8005a9e:	b500      	push	{lr}
 8005aa0:	b09c      	sub	sp, #112	; 0x70
 8005aa2:	ab1d      	add	r3, sp, #116	; 0x74
 8005aa4:	9002      	str	r0, [sp, #8]
 8005aa6:	9006      	str	r0, [sp, #24]
 8005aa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005aac:	4809      	ldr	r0, [pc, #36]	; (8005ad4 <siprintf+0x38>)
 8005aae:	9107      	str	r1, [sp, #28]
 8005ab0:	9104      	str	r1, [sp, #16]
 8005ab2:	4909      	ldr	r1, [pc, #36]	; (8005ad8 <siprintf+0x3c>)
 8005ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ab8:	9105      	str	r1, [sp, #20]
 8005aba:	6800      	ldr	r0, [r0, #0]
 8005abc:	9301      	str	r3, [sp, #4]
 8005abe:	a902      	add	r1, sp, #8
 8005ac0:	f000 f9ce 	bl	8005e60 <_svfiprintf_r>
 8005ac4:	9b02      	ldr	r3, [sp, #8]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	701a      	strb	r2, [r3, #0]
 8005aca:	b01c      	add	sp, #112	; 0x70
 8005acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ad0:	b003      	add	sp, #12
 8005ad2:	4770      	bx	lr
 8005ad4:	20000058 	.word	0x20000058
 8005ad8:	ffff0208 	.word	0xffff0208

08005adc <siscanf>:
 8005adc:	b40e      	push	{r1, r2, r3}
 8005ade:	b510      	push	{r4, lr}
 8005ae0:	b09f      	sub	sp, #124	; 0x7c
 8005ae2:	ac21      	add	r4, sp, #132	; 0x84
 8005ae4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005ae8:	f854 2b04 	ldr.w	r2, [r4], #4
 8005aec:	9201      	str	r2, [sp, #4]
 8005aee:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005af2:	9004      	str	r0, [sp, #16]
 8005af4:	9008      	str	r0, [sp, #32]
 8005af6:	f7fa fb93 	bl	8000220 <strlen>
 8005afa:	4b0c      	ldr	r3, [pc, #48]	; (8005b2c <siscanf+0x50>)
 8005afc:	9005      	str	r0, [sp, #20]
 8005afe:	9009      	str	r0, [sp, #36]	; 0x24
 8005b00:	930d      	str	r3, [sp, #52]	; 0x34
 8005b02:	480b      	ldr	r0, [pc, #44]	; (8005b30 <siscanf+0x54>)
 8005b04:	9a01      	ldr	r2, [sp, #4]
 8005b06:	6800      	ldr	r0, [r0, #0]
 8005b08:	9403      	str	r4, [sp, #12]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	9311      	str	r3, [sp, #68]	; 0x44
 8005b0e:	9316      	str	r3, [sp, #88]	; 0x58
 8005b10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b14:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005b18:	a904      	add	r1, sp, #16
 8005b1a:	4623      	mov	r3, r4
 8005b1c:	f000 faf8 	bl	8006110 <__ssvfiscanf_r>
 8005b20:	b01f      	add	sp, #124	; 0x7c
 8005b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b26:	b003      	add	sp, #12
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	08005b35 	.word	0x08005b35
 8005b30:	20000058 	.word	0x20000058

08005b34 <__seofread>:
 8005b34:	2000      	movs	r0, #0
 8005b36:	4770      	bx	lr

08005b38 <memset>:
 8005b38:	4402      	add	r2, r0
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d100      	bne.n	8005b42 <memset+0xa>
 8005b40:	4770      	bx	lr
 8005b42:	f803 1b01 	strb.w	r1, [r3], #1
 8005b46:	e7f9      	b.n	8005b3c <memset+0x4>

08005b48 <__errno>:
 8005b48:	4b01      	ldr	r3, [pc, #4]	; (8005b50 <__errno+0x8>)
 8005b4a:	6818      	ldr	r0, [r3, #0]
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	20000058 	.word	0x20000058

08005b54 <__libc_init_array>:
 8005b54:	b570      	push	{r4, r5, r6, lr}
 8005b56:	4d0d      	ldr	r5, [pc, #52]	; (8005b8c <__libc_init_array+0x38>)
 8005b58:	4c0d      	ldr	r4, [pc, #52]	; (8005b90 <__libc_init_array+0x3c>)
 8005b5a:	1b64      	subs	r4, r4, r5
 8005b5c:	10a4      	asrs	r4, r4, #2
 8005b5e:	2600      	movs	r6, #0
 8005b60:	42a6      	cmp	r6, r4
 8005b62:	d109      	bne.n	8005b78 <__libc_init_array+0x24>
 8005b64:	4d0b      	ldr	r5, [pc, #44]	; (8005b94 <__libc_init_array+0x40>)
 8005b66:	4c0c      	ldr	r4, [pc, #48]	; (8005b98 <__libc_init_array+0x44>)
 8005b68:	f001 f93e 	bl	8006de8 <_init>
 8005b6c:	1b64      	subs	r4, r4, r5
 8005b6e:	10a4      	asrs	r4, r4, #2
 8005b70:	2600      	movs	r6, #0
 8005b72:	42a6      	cmp	r6, r4
 8005b74:	d105      	bne.n	8005b82 <__libc_init_array+0x2e>
 8005b76:	bd70      	pop	{r4, r5, r6, pc}
 8005b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7c:	4798      	blx	r3
 8005b7e:	3601      	adds	r6, #1
 8005b80:	e7ee      	b.n	8005b60 <__libc_init_array+0xc>
 8005b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b86:	4798      	blx	r3
 8005b88:	3601      	adds	r6, #1
 8005b8a:	e7f2      	b.n	8005b72 <__libc_init_array+0x1e>
 8005b8c:	08006fe8 	.word	0x08006fe8
 8005b90:	08006fe8 	.word	0x08006fe8
 8005b94:	08006fe8 	.word	0x08006fe8
 8005b98:	08006fec 	.word	0x08006fec

08005b9c <__retarget_lock_acquire_recursive>:
 8005b9c:	4770      	bx	lr

08005b9e <__retarget_lock_release_recursive>:
 8005b9e:	4770      	bx	lr

08005ba0 <memcpy>:
 8005ba0:	440a      	add	r2, r1
 8005ba2:	4291      	cmp	r1, r2
 8005ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ba8:	d100      	bne.n	8005bac <memcpy+0xc>
 8005baa:	4770      	bx	lr
 8005bac:	b510      	push	{r4, lr}
 8005bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bb6:	4291      	cmp	r1, r2
 8005bb8:	d1f9      	bne.n	8005bae <memcpy+0xe>
 8005bba:	bd10      	pop	{r4, pc}

08005bbc <_free_r>:
 8005bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bbe:	2900      	cmp	r1, #0
 8005bc0:	d044      	beq.n	8005c4c <_free_r+0x90>
 8005bc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bc6:	9001      	str	r0, [sp, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f1a1 0404 	sub.w	r4, r1, #4
 8005bce:	bfb8      	it	lt
 8005bd0:	18e4      	addlt	r4, r4, r3
 8005bd2:	f000 f8df 	bl	8005d94 <__malloc_lock>
 8005bd6:	4a1e      	ldr	r2, [pc, #120]	; (8005c50 <_free_r+0x94>)
 8005bd8:	9801      	ldr	r0, [sp, #4]
 8005bda:	6813      	ldr	r3, [r2, #0]
 8005bdc:	b933      	cbnz	r3, 8005bec <_free_r+0x30>
 8005bde:	6063      	str	r3, [r4, #4]
 8005be0:	6014      	str	r4, [r2, #0]
 8005be2:	b003      	add	sp, #12
 8005be4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005be8:	f000 b8da 	b.w	8005da0 <__malloc_unlock>
 8005bec:	42a3      	cmp	r3, r4
 8005bee:	d908      	bls.n	8005c02 <_free_r+0x46>
 8005bf0:	6825      	ldr	r5, [r4, #0]
 8005bf2:	1961      	adds	r1, r4, r5
 8005bf4:	428b      	cmp	r3, r1
 8005bf6:	bf01      	itttt	eq
 8005bf8:	6819      	ldreq	r1, [r3, #0]
 8005bfa:	685b      	ldreq	r3, [r3, #4]
 8005bfc:	1949      	addeq	r1, r1, r5
 8005bfe:	6021      	streq	r1, [r4, #0]
 8005c00:	e7ed      	b.n	8005bde <_free_r+0x22>
 8005c02:	461a      	mov	r2, r3
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	b10b      	cbz	r3, 8005c0c <_free_r+0x50>
 8005c08:	42a3      	cmp	r3, r4
 8005c0a:	d9fa      	bls.n	8005c02 <_free_r+0x46>
 8005c0c:	6811      	ldr	r1, [r2, #0]
 8005c0e:	1855      	adds	r5, r2, r1
 8005c10:	42a5      	cmp	r5, r4
 8005c12:	d10b      	bne.n	8005c2c <_free_r+0x70>
 8005c14:	6824      	ldr	r4, [r4, #0]
 8005c16:	4421      	add	r1, r4
 8005c18:	1854      	adds	r4, r2, r1
 8005c1a:	42a3      	cmp	r3, r4
 8005c1c:	6011      	str	r1, [r2, #0]
 8005c1e:	d1e0      	bne.n	8005be2 <_free_r+0x26>
 8005c20:	681c      	ldr	r4, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	6053      	str	r3, [r2, #4]
 8005c26:	440c      	add	r4, r1
 8005c28:	6014      	str	r4, [r2, #0]
 8005c2a:	e7da      	b.n	8005be2 <_free_r+0x26>
 8005c2c:	d902      	bls.n	8005c34 <_free_r+0x78>
 8005c2e:	230c      	movs	r3, #12
 8005c30:	6003      	str	r3, [r0, #0]
 8005c32:	e7d6      	b.n	8005be2 <_free_r+0x26>
 8005c34:	6825      	ldr	r5, [r4, #0]
 8005c36:	1961      	adds	r1, r4, r5
 8005c38:	428b      	cmp	r3, r1
 8005c3a:	bf04      	itt	eq
 8005c3c:	6819      	ldreq	r1, [r3, #0]
 8005c3e:	685b      	ldreq	r3, [r3, #4]
 8005c40:	6063      	str	r3, [r4, #4]
 8005c42:	bf04      	itt	eq
 8005c44:	1949      	addeq	r1, r1, r5
 8005c46:	6021      	streq	r1, [r4, #0]
 8005c48:	6054      	str	r4, [r2, #4]
 8005c4a:	e7ca      	b.n	8005be2 <_free_r+0x26>
 8005c4c:	b003      	add	sp, #12
 8005c4e:	bd30      	pop	{r4, r5, pc}
 8005c50:	2000046c 	.word	0x2000046c

08005c54 <sbrk_aligned>:
 8005c54:	b570      	push	{r4, r5, r6, lr}
 8005c56:	4e0e      	ldr	r6, [pc, #56]	; (8005c90 <sbrk_aligned+0x3c>)
 8005c58:	460c      	mov	r4, r1
 8005c5a:	6831      	ldr	r1, [r6, #0]
 8005c5c:	4605      	mov	r5, r0
 8005c5e:	b911      	cbnz	r1, 8005c66 <sbrk_aligned+0x12>
 8005c60:	f000 ff3a 	bl	8006ad8 <_sbrk_r>
 8005c64:	6030      	str	r0, [r6, #0]
 8005c66:	4621      	mov	r1, r4
 8005c68:	4628      	mov	r0, r5
 8005c6a:	f000 ff35 	bl	8006ad8 <_sbrk_r>
 8005c6e:	1c43      	adds	r3, r0, #1
 8005c70:	d00a      	beq.n	8005c88 <sbrk_aligned+0x34>
 8005c72:	1cc4      	adds	r4, r0, #3
 8005c74:	f024 0403 	bic.w	r4, r4, #3
 8005c78:	42a0      	cmp	r0, r4
 8005c7a:	d007      	beq.n	8005c8c <sbrk_aligned+0x38>
 8005c7c:	1a21      	subs	r1, r4, r0
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f000 ff2a 	bl	8006ad8 <_sbrk_r>
 8005c84:	3001      	adds	r0, #1
 8005c86:	d101      	bne.n	8005c8c <sbrk_aligned+0x38>
 8005c88:	f04f 34ff 	mov.w	r4, #4294967295
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	bd70      	pop	{r4, r5, r6, pc}
 8005c90:	20000470 	.word	0x20000470

08005c94 <_malloc_r>:
 8005c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c98:	1ccd      	adds	r5, r1, #3
 8005c9a:	f025 0503 	bic.w	r5, r5, #3
 8005c9e:	3508      	adds	r5, #8
 8005ca0:	2d0c      	cmp	r5, #12
 8005ca2:	bf38      	it	cc
 8005ca4:	250c      	movcc	r5, #12
 8005ca6:	2d00      	cmp	r5, #0
 8005ca8:	4607      	mov	r7, r0
 8005caa:	db01      	blt.n	8005cb0 <_malloc_r+0x1c>
 8005cac:	42a9      	cmp	r1, r5
 8005cae:	d905      	bls.n	8005cbc <_malloc_r+0x28>
 8005cb0:	230c      	movs	r3, #12
 8005cb2:	603b      	str	r3, [r7, #0]
 8005cb4:	2600      	movs	r6, #0
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d90 <_malloc_r+0xfc>
 8005cc0:	f000 f868 	bl	8005d94 <__malloc_lock>
 8005cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8005cc8:	461c      	mov	r4, r3
 8005cca:	bb5c      	cbnz	r4, 8005d24 <_malloc_r+0x90>
 8005ccc:	4629      	mov	r1, r5
 8005cce:	4638      	mov	r0, r7
 8005cd0:	f7ff ffc0 	bl	8005c54 <sbrk_aligned>
 8005cd4:	1c43      	adds	r3, r0, #1
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	d155      	bne.n	8005d86 <_malloc_r+0xf2>
 8005cda:	f8d8 4000 	ldr.w	r4, [r8]
 8005cde:	4626      	mov	r6, r4
 8005ce0:	2e00      	cmp	r6, #0
 8005ce2:	d145      	bne.n	8005d70 <_malloc_r+0xdc>
 8005ce4:	2c00      	cmp	r4, #0
 8005ce6:	d048      	beq.n	8005d7a <_malloc_r+0xe6>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	4631      	mov	r1, r6
 8005cec:	4638      	mov	r0, r7
 8005cee:	eb04 0903 	add.w	r9, r4, r3
 8005cf2:	f000 fef1 	bl	8006ad8 <_sbrk_r>
 8005cf6:	4581      	cmp	r9, r0
 8005cf8:	d13f      	bne.n	8005d7a <_malloc_r+0xe6>
 8005cfa:	6821      	ldr	r1, [r4, #0]
 8005cfc:	1a6d      	subs	r5, r5, r1
 8005cfe:	4629      	mov	r1, r5
 8005d00:	4638      	mov	r0, r7
 8005d02:	f7ff ffa7 	bl	8005c54 <sbrk_aligned>
 8005d06:	3001      	adds	r0, #1
 8005d08:	d037      	beq.n	8005d7a <_malloc_r+0xe6>
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	442b      	add	r3, r5
 8005d0e:	6023      	str	r3, [r4, #0]
 8005d10:	f8d8 3000 	ldr.w	r3, [r8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d038      	beq.n	8005d8a <_malloc_r+0xf6>
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	42a2      	cmp	r2, r4
 8005d1c:	d12b      	bne.n	8005d76 <_malloc_r+0xe2>
 8005d1e:	2200      	movs	r2, #0
 8005d20:	605a      	str	r2, [r3, #4]
 8005d22:	e00f      	b.n	8005d44 <_malloc_r+0xb0>
 8005d24:	6822      	ldr	r2, [r4, #0]
 8005d26:	1b52      	subs	r2, r2, r5
 8005d28:	d41f      	bmi.n	8005d6a <_malloc_r+0xd6>
 8005d2a:	2a0b      	cmp	r2, #11
 8005d2c:	d917      	bls.n	8005d5e <_malloc_r+0xca>
 8005d2e:	1961      	adds	r1, r4, r5
 8005d30:	42a3      	cmp	r3, r4
 8005d32:	6025      	str	r5, [r4, #0]
 8005d34:	bf18      	it	ne
 8005d36:	6059      	strne	r1, [r3, #4]
 8005d38:	6863      	ldr	r3, [r4, #4]
 8005d3a:	bf08      	it	eq
 8005d3c:	f8c8 1000 	streq.w	r1, [r8]
 8005d40:	5162      	str	r2, [r4, r5]
 8005d42:	604b      	str	r3, [r1, #4]
 8005d44:	4638      	mov	r0, r7
 8005d46:	f104 060b 	add.w	r6, r4, #11
 8005d4a:	f000 f829 	bl	8005da0 <__malloc_unlock>
 8005d4e:	f026 0607 	bic.w	r6, r6, #7
 8005d52:	1d23      	adds	r3, r4, #4
 8005d54:	1af2      	subs	r2, r6, r3
 8005d56:	d0ae      	beq.n	8005cb6 <_malloc_r+0x22>
 8005d58:	1b9b      	subs	r3, r3, r6
 8005d5a:	50a3      	str	r3, [r4, r2]
 8005d5c:	e7ab      	b.n	8005cb6 <_malloc_r+0x22>
 8005d5e:	42a3      	cmp	r3, r4
 8005d60:	6862      	ldr	r2, [r4, #4]
 8005d62:	d1dd      	bne.n	8005d20 <_malloc_r+0x8c>
 8005d64:	f8c8 2000 	str.w	r2, [r8]
 8005d68:	e7ec      	b.n	8005d44 <_malloc_r+0xb0>
 8005d6a:	4623      	mov	r3, r4
 8005d6c:	6864      	ldr	r4, [r4, #4]
 8005d6e:	e7ac      	b.n	8005cca <_malloc_r+0x36>
 8005d70:	4634      	mov	r4, r6
 8005d72:	6876      	ldr	r6, [r6, #4]
 8005d74:	e7b4      	b.n	8005ce0 <_malloc_r+0x4c>
 8005d76:	4613      	mov	r3, r2
 8005d78:	e7cc      	b.n	8005d14 <_malloc_r+0x80>
 8005d7a:	230c      	movs	r3, #12
 8005d7c:	603b      	str	r3, [r7, #0]
 8005d7e:	4638      	mov	r0, r7
 8005d80:	f000 f80e 	bl	8005da0 <__malloc_unlock>
 8005d84:	e797      	b.n	8005cb6 <_malloc_r+0x22>
 8005d86:	6025      	str	r5, [r4, #0]
 8005d88:	e7dc      	b.n	8005d44 <_malloc_r+0xb0>
 8005d8a:	605b      	str	r3, [r3, #4]
 8005d8c:	deff      	udf	#255	; 0xff
 8005d8e:	bf00      	nop
 8005d90:	2000046c 	.word	0x2000046c

08005d94 <__malloc_lock>:
 8005d94:	4801      	ldr	r0, [pc, #4]	; (8005d9c <__malloc_lock+0x8>)
 8005d96:	f7ff bf01 	b.w	8005b9c <__retarget_lock_acquire_recursive>
 8005d9a:	bf00      	nop
 8005d9c:	20000468 	.word	0x20000468

08005da0 <__malloc_unlock>:
 8005da0:	4801      	ldr	r0, [pc, #4]	; (8005da8 <__malloc_unlock+0x8>)
 8005da2:	f7ff befc 	b.w	8005b9e <__retarget_lock_release_recursive>
 8005da6:	bf00      	nop
 8005da8:	20000468 	.word	0x20000468

08005dac <__ssputs_r>:
 8005dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db0:	688e      	ldr	r6, [r1, #8]
 8005db2:	461f      	mov	r7, r3
 8005db4:	42be      	cmp	r6, r7
 8005db6:	680b      	ldr	r3, [r1, #0]
 8005db8:	4682      	mov	sl, r0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	4690      	mov	r8, r2
 8005dbe:	d82c      	bhi.n	8005e1a <__ssputs_r+0x6e>
 8005dc0:	898a      	ldrh	r2, [r1, #12]
 8005dc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005dc6:	d026      	beq.n	8005e16 <__ssputs_r+0x6a>
 8005dc8:	6965      	ldr	r5, [r4, #20]
 8005dca:	6909      	ldr	r1, [r1, #16]
 8005dcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dd0:	eba3 0901 	sub.w	r9, r3, r1
 8005dd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005dd8:	1c7b      	adds	r3, r7, #1
 8005dda:	444b      	add	r3, r9
 8005ddc:	106d      	asrs	r5, r5, #1
 8005dde:	429d      	cmp	r5, r3
 8005de0:	bf38      	it	cc
 8005de2:	461d      	movcc	r5, r3
 8005de4:	0553      	lsls	r3, r2, #21
 8005de6:	d527      	bpl.n	8005e38 <__ssputs_r+0x8c>
 8005de8:	4629      	mov	r1, r5
 8005dea:	f7ff ff53 	bl	8005c94 <_malloc_r>
 8005dee:	4606      	mov	r6, r0
 8005df0:	b360      	cbz	r0, 8005e4c <__ssputs_r+0xa0>
 8005df2:	6921      	ldr	r1, [r4, #16]
 8005df4:	464a      	mov	r2, r9
 8005df6:	f7ff fed3 	bl	8005ba0 <memcpy>
 8005dfa:	89a3      	ldrh	r3, [r4, #12]
 8005dfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e04:	81a3      	strh	r3, [r4, #12]
 8005e06:	6126      	str	r6, [r4, #16]
 8005e08:	6165      	str	r5, [r4, #20]
 8005e0a:	444e      	add	r6, r9
 8005e0c:	eba5 0509 	sub.w	r5, r5, r9
 8005e10:	6026      	str	r6, [r4, #0]
 8005e12:	60a5      	str	r5, [r4, #8]
 8005e14:	463e      	mov	r6, r7
 8005e16:	42be      	cmp	r6, r7
 8005e18:	d900      	bls.n	8005e1c <__ssputs_r+0x70>
 8005e1a:	463e      	mov	r6, r7
 8005e1c:	6820      	ldr	r0, [r4, #0]
 8005e1e:	4632      	mov	r2, r6
 8005e20:	4641      	mov	r1, r8
 8005e22:	f000 fe3e 	bl	8006aa2 <memmove>
 8005e26:	68a3      	ldr	r3, [r4, #8]
 8005e28:	1b9b      	subs	r3, r3, r6
 8005e2a:	60a3      	str	r3, [r4, #8]
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	4433      	add	r3, r6
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	2000      	movs	r0, #0
 8005e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e38:	462a      	mov	r2, r5
 8005e3a:	f000 fe5d 	bl	8006af8 <_realloc_r>
 8005e3e:	4606      	mov	r6, r0
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d1e0      	bne.n	8005e06 <__ssputs_r+0x5a>
 8005e44:	6921      	ldr	r1, [r4, #16]
 8005e46:	4650      	mov	r0, sl
 8005e48:	f7ff feb8 	bl	8005bbc <_free_r>
 8005e4c:	230c      	movs	r3, #12
 8005e4e:	f8ca 3000 	str.w	r3, [sl]
 8005e52:	89a3      	ldrh	r3, [r4, #12]
 8005e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e58:	81a3      	strh	r3, [r4, #12]
 8005e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5e:	e7e9      	b.n	8005e34 <__ssputs_r+0x88>

08005e60 <_svfiprintf_r>:
 8005e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e64:	4698      	mov	r8, r3
 8005e66:	898b      	ldrh	r3, [r1, #12]
 8005e68:	061b      	lsls	r3, r3, #24
 8005e6a:	b09d      	sub	sp, #116	; 0x74
 8005e6c:	4607      	mov	r7, r0
 8005e6e:	460d      	mov	r5, r1
 8005e70:	4614      	mov	r4, r2
 8005e72:	d50e      	bpl.n	8005e92 <_svfiprintf_r+0x32>
 8005e74:	690b      	ldr	r3, [r1, #16]
 8005e76:	b963      	cbnz	r3, 8005e92 <_svfiprintf_r+0x32>
 8005e78:	2140      	movs	r1, #64	; 0x40
 8005e7a:	f7ff ff0b 	bl	8005c94 <_malloc_r>
 8005e7e:	6028      	str	r0, [r5, #0]
 8005e80:	6128      	str	r0, [r5, #16]
 8005e82:	b920      	cbnz	r0, 8005e8e <_svfiprintf_r+0x2e>
 8005e84:	230c      	movs	r3, #12
 8005e86:	603b      	str	r3, [r7, #0]
 8005e88:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8c:	e0d0      	b.n	8006030 <_svfiprintf_r+0x1d0>
 8005e8e:	2340      	movs	r3, #64	; 0x40
 8005e90:	616b      	str	r3, [r5, #20]
 8005e92:	2300      	movs	r3, #0
 8005e94:	9309      	str	r3, [sp, #36]	; 0x24
 8005e96:	2320      	movs	r3, #32
 8005e98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ea0:	2330      	movs	r3, #48	; 0x30
 8005ea2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006048 <_svfiprintf_r+0x1e8>
 8005ea6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eaa:	f04f 0901 	mov.w	r9, #1
 8005eae:	4623      	mov	r3, r4
 8005eb0:	469a      	mov	sl, r3
 8005eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005eb6:	b10a      	cbz	r2, 8005ebc <_svfiprintf_r+0x5c>
 8005eb8:	2a25      	cmp	r2, #37	; 0x25
 8005eba:	d1f9      	bne.n	8005eb0 <_svfiprintf_r+0x50>
 8005ebc:	ebba 0b04 	subs.w	fp, sl, r4
 8005ec0:	d00b      	beq.n	8005eda <_svfiprintf_r+0x7a>
 8005ec2:	465b      	mov	r3, fp
 8005ec4:	4622      	mov	r2, r4
 8005ec6:	4629      	mov	r1, r5
 8005ec8:	4638      	mov	r0, r7
 8005eca:	f7ff ff6f 	bl	8005dac <__ssputs_r>
 8005ece:	3001      	adds	r0, #1
 8005ed0:	f000 80a9 	beq.w	8006026 <_svfiprintf_r+0x1c6>
 8005ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ed6:	445a      	add	r2, fp
 8005ed8:	9209      	str	r2, [sp, #36]	; 0x24
 8005eda:	f89a 3000 	ldrb.w	r3, [sl]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 80a1 	beq.w	8006026 <_svfiprintf_r+0x1c6>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eee:	f10a 0a01 	add.w	sl, sl, #1
 8005ef2:	9304      	str	r3, [sp, #16]
 8005ef4:	9307      	str	r3, [sp, #28]
 8005ef6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005efa:	931a      	str	r3, [sp, #104]	; 0x68
 8005efc:	4654      	mov	r4, sl
 8005efe:	2205      	movs	r2, #5
 8005f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f04:	4850      	ldr	r0, [pc, #320]	; (8006048 <_svfiprintf_r+0x1e8>)
 8005f06:	f7fa f993 	bl	8000230 <memchr>
 8005f0a:	9a04      	ldr	r2, [sp, #16]
 8005f0c:	b9d8      	cbnz	r0, 8005f46 <_svfiprintf_r+0xe6>
 8005f0e:	06d0      	lsls	r0, r2, #27
 8005f10:	bf44      	itt	mi
 8005f12:	2320      	movmi	r3, #32
 8005f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f18:	0711      	lsls	r1, r2, #28
 8005f1a:	bf44      	itt	mi
 8005f1c:	232b      	movmi	r3, #43	; 0x2b
 8005f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f22:	f89a 3000 	ldrb.w	r3, [sl]
 8005f26:	2b2a      	cmp	r3, #42	; 0x2a
 8005f28:	d015      	beq.n	8005f56 <_svfiprintf_r+0xf6>
 8005f2a:	9a07      	ldr	r2, [sp, #28]
 8005f2c:	4654      	mov	r4, sl
 8005f2e:	2000      	movs	r0, #0
 8005f30:	f04f 0c0a 	mov.w	ip, #10
 8005f34:	4621      	mov	r1, r4
 8005f36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f3a:	3b30      	subs	r3, #48	; 0x30
 8005f3c:	2b09      	cmp	r3, #9
 8005f3e:	d94d      	bls.n	8005fdc <_svfiprintf_r+0x17c>
 8005f40:	b1b0      	cbz	r0, 8005f70 <_svfiprintf_r+0x110>
 8005f42:	9207      	str	r2, [sp, #28]
 8005f44:	e014      	b.n	8005f70 <_svfiprintf_r+0x110>
 8005f46:	eba0 0308 	sub.w	r3, r0, r8
 8005f4a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	9304      	str	r3, [sp, #16]
 8005f52:	46a2      	mov	sl, r4
 8005f54:	e7d2      	b.n	8005efc <_svfiprintf_r+0x9c>
 8005f56:	9b03      	ldr	r3, [sp, #12]
 8005f58:	1d19      	adds	r1, r3, #4
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	9103      	str	r1, [sp, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	bfbb      	ittet	lt
 8005f62:	425b      	neglt	r3, r3
 8005f64:	f042 0202 	orrlt.w	r2, r2, #2
 8005f68:	9307      	strge	r3, [sp, #28]
 8005f6a:	9307      	strlt	r3, [sp, #28]
 8005f6c:	bfb8      	it	lt
 8005f6e:	9204      	strlt	r2, [sp, #16]
 8005f70:	7823      	ldrb	r3, [r4, #0]
 8005f72:	2b2e      	cmp	r3, #46	; 0x2e
 8005f74:	d10c      	bne.n	8005f90 <_svfiprintf_r+0x130>
 8005f76:	7863      	ldrb	r3, [r4, #1]
 8005f78:	2b2a      	cmp	r3, #42	; 0x2a
 8005f7a:	d134      	bne.n	8005fe6 <_svfiprintf_r+0x186>
 8005f7c:	9b03      	ldr	r3, [sp, #12]
 8005f7e:	1d1a      	adds	r2, r3, #4
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	9203      	str	r2, [sp, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	bfb8      	it	lt
 8005f88:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f8c:	3402      	adds	r4, #2
 8005f8e:	9305      	str	r3, [sp, #20]
 8005f90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006058 <_svfiprintf_r+0x1f8>
 8005f94:	7821      	ldrb	r1, [r4, #0]
 8005f96:	2203      	movs	r2, #3
 8005f98:	4650      	mov	r0, sl
 8005f9a:	f7fa f949 	bl	8000230 <memchr>
 8005f9e:	b138      	cbz	r0, 8005fb0 <_svfiprintf_r+0x150>
 8005fa0:	9b04      	ldr	r3, [sp, #16]
 8005fa2:	eba0 000a 	sub.w	r0, r0, sl
 8005fa6:	2240      	movs	r2, #64	; 0x40
 8005fa8:	4082      	lsls	r2, r0
 8005faa:	4313      	orrs	r3, r2
 8005fac:	3401      	adds	r4, #1
 8005fae:	9304      	str	r3, [sp, #16]
 8005fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fb4:	4825      	ldr	r0, [pc, #148]	; (800604c <_svfiprintf_r+0x1ec>)
 8005fb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fba:	2206      	movs	r2, #6
 8005fbc:	f7fa f938 	bl	8000230 <memchr>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d038      	beq.n	8006036 <_svfiprintf_r+0x1d6>
 8005fc4:	4b22      	ldr	r3, [pc, #136]	; (8006050 <_svfiprintf_r+0x1f0>)
 8005fc6:	bb1b      	cbnz	r3, 8006010 <_svfiprintf_r+0x1b0>
 8005fc8:	9b03      	ldr	r3, [sp, #12]
 8005fca:	3307      	adds	r3, #7
 8005fcc:	f023 0307 	bic.w	r3, r3, #7
 8005fd0:	3308      	adds	r3, #8
 8005fd2:	9303      	str	r3, [sp, #12]
 8005fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fd6:	4433      	add	r3, r6
 8005fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8005fda:	e768      	b.n	8005eae <_svfiprintf_r+0x4e>
 8005fdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	2001      	movs	r0, #1
 8005fe4:	e7a6      	b.n	8005f34 <_svfiprintf_r+0xd4>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	3401      	adds	r4, #1
 8005fea:	9305      	str	r3, [sp, #20]
 8005fec:	4619      	mov	r1, r3
 8005fee:	f04f 0c0a 	mov.w	ip, #10
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ff8:	3a30      	subs	r2, #48	; 0x30
 8005ffa:	2a09      	cmp	r2, #9
 8005ffc:	d903      	bls.n	8006006 <_svfiprintf_r+0x1a6>
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d0c6      	beq.n	8005f90 <_svfiprintf_r+0x130>
 8006002:	9105      	str	r1, [sp, #20]
 8006004:	e7c4      	b.n	8005f90 <_svfiprintf_r+0x130>
 8006006:	fb0c 2101 	mla	r1, ip, r1, r2
 800600a:	4604      	mov	r4, r0
 800600c:	2301      	movs	r3, #1
 800600e:	e7f0      	b.n	8005ff2 <_svfiprintf_r+0x192>
 8006010:	ab03      	add	r3, sp, #12
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	462a      	mov	r2, r5
 8006016:	4b0f      	ldr	r3, [pc, #60]	; (8006054 <_svfiprintf_r+0x1f4>)
 8006018:	a904      	add	r1, sp, #16
 800601a:	4638      	mov	r0, r7
 800601c:	f3af 8000 	nop.w
 8006020:	1c42      	adds	r2, r0, #1
 8006022:	4606      	mov	r6, r0
 8006024:	d1d6      	bne.n	8005fd4 <_svfiprintf_r+0x174>
 8006026:	89ab      	ldrh	r3, [r5, #12]
 8006028:	065b      	lsls	r3, r3, #25
 800602a:	f53f af2d 	bmi.w	8005e88 <_svfiprintf_r+0x28>
 800602e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006030:	b01d      	add	sp, #116	; 0x74
 8006032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006036:	ab03      	add	r3, sp, #12
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	462a      	mov	r2, r5
 800603c:	4b05      	ldr	r3, [pc, #20]	; (8006054 <_svfiprintf_r+0x1f4>)
 800603e:	a904      	add	r1, sp, #16
 8006040:	4638      	mov	r0, r7
 8006042:	f000 fa4b 	bl	80064dc <_printf_i>
 8006046:	e7eb      	b.n	8006020 <_svfiprintf_r+0x1c0>
 8006048:	08006e90 	.word	0x08006e90
 800604c:	08006e9a 	.word	0x08006e9a
 8006050:	00000000 	.word	0x00000000
 8006054:	08005dad 	.word	0x08005dad
 8006058:	08006e96 	.word	0x08006e96

0800605c <_sungetc_r>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	1c4b      	adds	r3, r1, #1
 8006060:	4614      	mov	r4, r2
 8006062:	d103      	bne.n	800606c <_sungetc_r+0x10>
 8006064:	f04f 35ff 	mov.w	r5, #4294967295
 8006068:	4628      	mov	r0, r5
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	8993      	ldrh	r3, [r2, #12]
 800606e:	f023 0320 	bic.w	r3, r3, #32
 8006072:	8193      	strh	r3, [r2, #12]
 8006074:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006076:	6852      	ldr	r2, [r2, #4]
 8006078:	b2cd      	uxtb	r5, r1
 800607a:	b18b      	cbz	r3, 80060a0 <_sungetc_r+0x44>
 800607c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800607e:	4293      	cmp	r3, r2
 8006080:	dd08      	ble.n	8006094 <_sungetc_r+0x38>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	1e5a      	subs	r2, r3, #1
 8006086:	6022      	str	r2, [r4, #0]
 8006088:	f803 5c01 	strb.w	r5, [r3, #-1]
 800608c:	6863      	ldr	r3, [r4, #4]
 800608e:	3301      	adds	r3, #1
 8006090:	6063      	str	r3, [r4, #4]
 8006092:	e7e9      	b.n	8006068 <_sungetc_r+0xc>
 8006094:	4621      	mov	r1, r4
 8006096:	f000 fcca 	bl	8006a2e <__submore>
 800609a:	2800      	cmp	r0, #0
 800609c:	d0f1      	beq.n	8006082 <_sungetc_r+0x26>
 800609e:	e7e1      	b.n	8006064 <_sungetc_r+0x8>
 80060a0:	6921      	ldr	r1, [r4, #16]
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	b151      	cbz	r1, 80060bc <_sungetc_r+0x60>
 80060a6:	4299      	cmp	r1, r3
 80060a8:	d208      	bcs.n	80060bc <_sungetc_r+0x60>
 80060aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80060ae:	42a9      	cmp	r1, r5
 80060b0:	d104      	bne.n	80060bc <_sungetc_r+0x60>
 80060b2:	3b01      	subs	r3, #1
 80060b4:	3201      	adds	r2, #1
 80060b6:	6023      	str	r3, [r4, #0]
 80060b8:	6062      	str	r2, [r4, #4]
 80060ba:	e7d5      	b.n	8006068 <_sungetc_r+0xc>
 80060bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80060c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060c4:	6363      	str	r3, [r4, #52]	; 0x34
 80060c6:	2303      	movs	r3, #3
 80060c8:	63a3      	str	r3, [r4, #56]	; 0x38
 80060ca:	4623      	mov	r3, r4
 80060cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	2301      	movs	r3, #1
 80060d4:	e7dc      	b.n	8006090 <_sungetc_r+0x34>

080060d6 <__ssrefill_r>:
 80060d6:	b510      	push	{r4, lr}
 80060d8:	460c      	mov	r4, r1
 80060da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80060dc:	b169      	cbz	r1, 80060fa <__ssrefill_r+0x24>
 80060de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060e2:	4299      	cmp	r1, r3
 80060e4:	d001      	beq.n	80060ea <__ssrefill_r+0x14>
 80060e6:	f7ff fd69 	bl	8005bbc <_free_r>
 80060ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060ec:	6063      	str	r3, [r4, #4]
 80060ee:	2000      	movs	r0, #0
 80060f0:	6360      	str	r0, [r4, #52]	; 0x34
 80060f2:	b113      	cbz	r3, 80060fa <__ssrefill_r+0x24>
 80060f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80060f6:	6023      	str	r3, [r4, #0]
 80060f8:	bd10      	pop	{r4, pc}
 80060fa:	6923      	ldr	r3, [r4, #16]
 80060fc:	6023      	str	r3, [r4, #0]
 80060fe:	2300      	movs	r3, #0
 8006100:	6063      	str	r3, [r4, #4]
 8006102:	89a3      	ldrh	r3, [r4, #12]
 8006104:	f043 0320 	orr.w	r3, r3, #32
 8006108:	81a3      	strh	r3, [r4, #12]
 800610a:	f04f 30ff 	mov.w	r0, #4294967295
 800610e:	e7f3      	b.n	80060f8 <__ssrefill_r+0x22>

08006110 <__ssvfiscanf_r>:
 8006110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006114:	460c      	mov	r4, r1
 8006116:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800611a:	2100      	movs	r1, #0
 800611c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006120:	49a6      	ldr	r1, [pc, #664]	; (80063bc <__ssvfiscanf_r+0x2ac>)
 8006122:	91a0      	str	r1, [sp, #640]	; 0x280
 8006124:	f10d 0804 	add.w	r8, sp, #4
 8006128:	49a5      	ldr	r1, [pc, #660]	; (80063c0 <__ssvfiscanf_r+0x2b0>)
 800612a:	4fa6      	ldr	r7, [pc, #664]	; (80063c4 <__ssvfiscanf_r+0x2b4>)
 800612c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80063c8 <__ssvfiscanf_r+0x2b8>
 8006130:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006134:	4606      	mov	r6, r0
 8006136:	91a1      	str	r1, [sp, #644]	; 0x284
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	7813      	ldrb	r3, [r2, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 815a 	beq.w	80063f6 <__ssvfiscanf_r+0x2e6>
 8006142:	5cf9      	ldrb	r1, [r7, r3]
 8006144:	f011 0108 	ands.w	r1, r1, #8
 8006148:	f102 0501 	add.w	r5, r2, #1
 800614c:	d019      	beq.n	8006182 <__ssvfiscanf_r+0x72>
 800614e:	6863      	ldr	r3, [r4, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	dd0f      	ble.n	8006174 <__ssvfiscanf_r+0x64>
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	781a      	ldrb	r2, [r3, #0]
 8006158:	5cba      	ldrb	r2, [r7, r2]
 800615a:	0712      	lsls	r2, r2, #28
 800615c:	d401      	bmi.n	8006162 <__ssvfiscanf_r+0x52>
 800615e:	462a      	mov	r2, r5
 8006160:	e7eb      	b.n	800613a <__ssvfiscanf_r+0x2a>
 8006162:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006164:	3201      	adds	r2, #1
 8006166:	9245      	str	r2, [sp, #276]	; 0x114
 8006168:	6862      	ldr	r2, [r4, #4]
 800616a:	3301      	adds	r3, #1
 800616c:	3a01      	subs	r2, #1
 800616e:	6062      	str	r2, [r4, #4]
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	e7ec      	b.n	800614e <__ssvfiscanf_r+0x3e>
 8006174:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006176:	4621      	mov	r1, r4
 8006178:	4630      	mov	r0, r6
 800617a:	4798      	blx	r3
 800617c:	2800      	cmp	r0, #0
 800617e:	d0e9      	beq.n	8006154 <__ssvfiscanf_r+0x44>
 8006180:	e7ed      	b.n	800615e <__ssvfiscanf_r+0x4e>
 8006182:	2b25      	cmp	r3, #37	; 0x25
 8006184:	d012      	beq.n	80061ac <__ssvfiscanf_r+0x9c>
 8006186:	469a      	mov	sl, r3
 8006188:	6863      	ldr	r3, [r4, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	f340 8091 	ble.w	80062b2 <__ssvfiscanf_r+0x1a2>
 8006190:	6822      	ldr	r2, [r4, #0]
 8006192:	7813      	ldrb	r3, [r2, #0]
 8006194:	4553      	cmp	r3, sl
 8006196:	f040 812e 	bne.w	80063f6 <__ssvfiscanf_r+0x2e6>
 800619a:	6863      	ldr	r3, [r4, #4]
 800619c:	3b01      	subs	r3, #1
 800619e:	6063      	str	r3, [r4, #4]
 80061a0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80061a2:	3201      	adds	r2, #1
 80061a4:	3301      	adds	r3, #1
 80061a6:	6022      	str	r2, [r4, #0]
 80061a8:	9345      	str	r3, [sp, #276]	; 0x114
 80061aa:	e7d8      	b.n	800615e <__ssvfiscanf_r+0x4e>
 80061ac:	9141      	str	r1, [sp, #260]	; 0x104
 80061ae:	9143      	str	r1, [sp, #268]	; 0x10c
 80061b0:	7853      	ldrb	r3, [r2, #1]
 80061b2:	2b2a      	cmp	r3, #42	; 0x2a
 80061b4:	bf02      	ittt	eq
 80061b6:	2310      	moveq	r3, #16
 80061b8:	1c95      	addeq	r5, r2, #2
 80061ba:	9341      	streq	r3, [sp, #260]	; 0x104
 80061bc:	220a      	movs	r2, #10
 80061be:	46aa      	mov	sl, r5
 80061c0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80061c4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80061c8:	2b09      	cmp	r3, #9
 80061ca:	d91c      	bls.n	8006206 <__ssvfiscanf_r+0xf6>
 80061cc:	487e      	ldr	r0, [pc, #504]	; (80063c8 <__ssvfiscanf_r+0x2b8>)
 80061ce:	2203      	movs	r2, #3
 80061d0:	f7fa f82e 	bl	8000230 <memchr>
 80061d4:	b138      	cbz	r0, 80061e6 <__ssvfiscanf_r+0xd6>
 80061d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80061d8:	eba0 0009 	sub.w	r0, r0, r9
 80061dc:	2301      	movs	r3, #1
 80061de:	4083      	lsls	r3, r0
 80061e0:	4313      	orrs	r3, r2
 80061e2:	9341      	str	r3, [sp, #260]	; 0x104
 80061e4:	4655      	mov	r5, sl
 80061e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80061ea:	2b78      	cmp	r3, #120	; 0x78
 80061ec:	d806      	bhi.n	80061fc <__ssvfiscanf_r+0xec>
 80061ee:	2b57      	cmp	r3, #87	; 0x57
 80061f0:	d810      	bhi.n	8006214 <__ssvfiscanf_r+0x104>
 80061f2:	2b25      	cmp	r3, #37	; 0x25
 80061f4:	d0c7      	beq.n	8006186 <__ssvfiscanf_r+0x76>
 80061f6:	d857      	bhi.n	80062a8 <__ssvfiscanf_r+0x198>
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d065      	beq.n	80062c8 <__ssvfiscanf_r+0x1b8>
 80061fc:	2303      	movs	r3, #3
 80061fe:	9347      	str	r3, [sp, #284]	; 0x11c
 8006200:	230a      	movs	r3, #10
 8006202:	9342      	str	r3, [sp, #264]	; 0x108
 8006204:	e076      	b.n	80062f4 <__ssvfiscanf_r+0x1e4>
 8006206:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006208:	fb02 1103 	mla	r1, r2, r3, r1
 800620c:	3930      	subs	r1, #48	; 0x30
 800620e:	9143      	str	r1, [sp, #268]	; 0x10c
 8006210:	4655      	mov	r5, sl
 8006212:	e7d4      	b.n	80061be <__ssvfiscanf_r+0xae>
 8006214:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006218:	2a20      	cmp	r2, #32
 800621a:	d8ef      	bhi.n	80061fc <__ssvfiscanf_r+0xec>
 800621c:	a101      	add	r1, pc, #4	; (adr r1, 8006224 <__ssvfiscanf_r+0x114>)
 800621e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006222:	bf00      	nop
 8006224:	080062d7 	.word	0x080062d7
 8006228:	080061fd 	.word	0x080061fd
 800622c:	080061fd 	.word	0x080061fd
 8006230:	08006335 	.word	0x08006335
 8006234:	080061fd 	.word	0x080061fd
 8006238:	080061fd 	.word	0x080061fd
 800623c:	080061fd 	.word	0x080061fd
 8006240:	080061fd 	.word	0x080061fd
 8006244:	080061fd 	.word	0x080061fd
 8006248:	080061fd 	.word	0x080061fd
 800624c:	080061fd 	.word	0x080061fd
 8006250:	0800634b 	.word	0x0800634b
 8006254:	08006331 	.word	0x08006331
 8006258:	080062af 	.word	0x080062af
 800625c:	080062af 	.word	0x080062af
 8006260:	080062af 	.word	0x080062af
 8006264:	080061fd 	.word	0x080061fd
 8006268:	080062ed 	.word	0x080062ed
 800626c:	080061fd 	.word	0x080061fd
 8006270:	080061fd 	.word	0x080061fd
 8006274:	080061fd 	.word	0x080061fd
 8006278:	080061fd 	.word	0x080061fd
 800627c:	0800635b 	.word	0x0800635b
 8006280:	08006329 	.word	0x08006329
 8006284:	080062cf 	.word	0x080062cf
 8006288:	080061fd 	.word	0x080061fd
 800628c:	080061fd 	.word	0x080061fd
 8006290:	08006357 	.word	0x08006357
 8006294:	080061fd 	.word	0x080061fd
 8006298:	08006331 	.word	0x08006331
 800629c:	080061fd 	.word	0x080061fd
 80062a0:	080061fd 	.word	0x080061fd
 80062a4:	080062d7 	.word	0x080062d7
 80062a8:	3b45      	subs	r3, #69	; 0x45
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d8a6      	bhi.n	80061fc <__ssvfiscanf_r+0xec>
 80062ae:	2305      	movs	r3, #5
 80062b0:	e01f      	b.n	80062f2 <__ssvfiscanf_r+0x1e2>
 80062b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80062b4:	4621      	mov	r1, r4
 80062b6:	4630      	mov	r0, r6
 80062b8:	4798      	blx	r3
 80062ba:	2800      	cmp	r0, #0
 80062bc:	f43f af68 	beq.w	8006190 <__ssvfiscanf_r+0x80>
 80062c0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80062c2:	2800      	cmp	r0, #0
 80062c4:	f040 808d 	bne.w	80063e2 <__ssvfiscanf_r+0x2d2>
 80062c8:	f04f 30ff 	mov.w	r0, #4294967295
 80062cc:	e08f      	b.n	80063ee <__ssvfiscanf_r+0x2de>
 80062ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80062d0:	f042 0220 	orr.w	r2, r2, #32
 80062d4:	9241      	str	r2, [sp, #260]	; 0x104
 80062d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80062d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062dc:	9241      	str	r2, [sp, #260]	; 0x104
 80062de:	2210      	movs	r2, #16
 80062e0:	2b6f      	cmp	r3, #111	; 0x6f
 80062e2:	9242      	str	r2, [sp, #264]	; 0x108
 80062e4:	bf34      	ite	cc
 80062e6:	2303      	movcc	r3, #3
 80062e8:	2304      	movcs	r3, #4
 80062ea:	e002      	b.n	80062f2 <__ssvfiscanf_r+0x1e2>
 80062ec:	2300      	movs	r3, #0
 80062ee:	9342      	str	r3, [sp, #264]	; 0x108
 80062f0:	2303      	movs	r3, #3
 80062f2:	9347      	str	r3, [sp, #284]	; 0x11c
 80062f4:	6863      	ldr	r3, [r4, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	dd3d      	ble.n	8006376 <__ssvfiscanf_r+0x266>
 80062fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80062fc:	0659      	lsls	r1, r3, #25
 80062fe:	d404      	bmi.n	800630a <__ssvfiscanf_r+0x1fa>
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	781a      	ldrb	r2, [r3, #0]
 8006304:	5cba      	ldrb	r2, [r7, r2]
 8006306:	0712      	lsls	r2, r2, #28
 8006308:	d43c      	bmi.n	8006384 <__ssvfiscanf_r+0x274>
 800630a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800630c:	2b02      	cmp	r3, #2
 800630e:	dc4b      	bgt.n	80063a8 <__ssvfiscanf_r+0x298>
 8006310:	466b      	mov	r3, sp
 8006312:	4622      	mov	r2, r4
 8006314:	a941      	add	r1, sp, #260	; 0x104
 8006316:	4630      	mov	r0, r6
 8006318:	f000 fa02 	bl	8006720 <_scanf_chars>
 800631c:	2801      	cmp	r0, #1
 800631e:	d06a      	beq.n	80063f6 <__ssvfiscanf_r+0x2e6>
 8006320:	2802      	cmp	r0, #2
 8006322:	f47f af1c 	bne.w	800615e <__ssvfiscanf_r+0x4e>
 8006326:	e7cb      	b.n	80062c0 <__ssvfiscanf_r+0x1b0>
 8006328:	2308      	movs	r3, #8
 800632a:	9342      	str	r3, [sp, #264]	; 0x108
 800632c:	2304      	movs	r3, #4
 800632e:	e7e0      	b.n	80062f2 <__ssvfiscanf_r+0x1e2>
 8006330:	220a      	movs	r2, #10
 8006332:	e7d5      	b.n	80062e0 <__ssvfiscanf_r+0x1d0>
 8006334:	4629      	mov	r1, r5
 8006336:	4640      	mov	r0, r8
 8006338:	f000 fb40 	bl	80069bc <__sccl>
 800633c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800633e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006342:	9341      	str	r3, [sp, #260]	; 0x104
 8006344:	4605      	mov	r5, r0
 8006346:	2301      	movs	r3, #1
 8006348:	e7d3      	b.n	80062f2 <__ssvfiscanf_r+0x1e2>
 800634a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800634c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006350:	9341      	str	r3, [sp, #260]	; 0x104
 8006352:	2300      	movs	r3, #0
 8006354:	e7cd      	b.n	80062f2 <__ssvfiscanf_r+0x1e2>
 8006356:	2302      	movs	r3, #2
 8006358:	e7cb      	b.n	80062f2 <__ssvfiscanf_r+0x1e2>
 800635a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800635c:	06c3      	lsls	r3, r0, #27
 800635e:	f53f aefe 	bmi.w	800615e <__ssvfiscanf_r+0x4e>
 8006362:	9b00      	ldr	r3, [sp, #0]
 8006364:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006366:	1d19      	adds	r1, r3, #4
 8006368:	9100      	str	r1, [sp, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	07c0      	lsls	r0, r0, #31
 800636e:	bf4c      	ite	mi
 8006370:	801a      	strhmi	r2, [r3, #0]
 8006372:	601a      	strpl	r2, [r3, #0]
 8006374:	e6f3      	b.n	800615e <__ssvfiscanf_r+0x4e>
 8006376:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006378:	4621      	mov	r1, r4
 800637a:	4630      	mov	r0, r6
 800637c:	4798      	blx	r3
 800637e:	2800      	cmp	r0, #0
 8006380:	d0bb      	beq.n	80062fa <__ssvfiscanf_r+0x1ea>
 8006382:	e79d      	b.n	80062c0 <__ssvfiscanf_r+0x1b0>
 8006384:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006386:	3201      	adds	r2, #1
 8006388:	9245      	str	r2, [sp, #276]	; 0x114
 800638a:	6862      	ldr	r2, [r4, #4]
 800638c:	3a01      	subs	r2, #1
 800638e:	2a00      	cmp	r2, #0
 8006390:	6062      	str	r2, [r4, #4]
 8006392:	dd02      	ble.n	800639a <__ssvfiscanf_r+0x28a>
 8006394:	3301      	adds	r3, #1
 8006396:	6023      	str	r3, [r4, #0]
 8006398:	e7b2      	b.n	8006300 <__ssvfiscanf_r+0x1f0>
 800639a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800639c:	4621      	mov	r1, r4
 800639e:	4630      	mov	r0, r6
 80063a0:	4798      	blx	r3
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d0ac      	beq.n	8006300 <__ssvfiscanf_r+0x1f0>
 80063a6:	e78b      	b.n	80062c0 <__ssvfiscanf_r+0x1b0>
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	dc0f      	bgt.n	80063cc <__ssvfiscanf_r+0x2bc>
 80063ac:	466b      	mov	r3, sp
 80063ae:	4622      	mov	r2, r4
 80063b0:	a941      	add	r1, sp, #260	; 0x104
 80063b2:	4630      	mov	r0, r6
 80063b4:	f000 fa0e 	bl	80067d4 <_scanf_i>
 80063b8:	e7b0      	b.n	800631c <__ssvfiscanf_r+0x20c>
 80063ba:	bf00      	nop
 80063bc:	0800605d 	.word	0x0800605d
 80063c0:	080060d7 	.word	0x080060d7
 80063c4:	08006edf 	.word	0x08006edf
 80063c8:	08006e96 	.word	0x08006e96
 80063cc:	4b0b      	ldr	r3, [pc, #44]	; (80063fc <__ssvfiscanf_r+0x2ec>)
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f43f aec5 	beq.w	800615e <__ssvfiscanf_r+0x4e>
 80063d4:	466b      	mov	r3, sp
 80063d6:	4622      	mov	r2, r4
 80063d8:	a941      	add	r1, sp, #260	; 0x104
 80063da:	4630      	mov	r0, r6
 80063dc:	f3af 8000 	nop.w
 80063e0:	e79c      	b.n	800631c <__ssvfiscanf_r+0x20c>
 80063e2:	89a3      	ldrh	r3, [r4, #12]
 80063e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80063e8:	bf18      	it	ne
 80063ea:	f04f 30ff 	movne.w	r0, #4294967295
 80063ee:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80063f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80063f8:	e7f9      	b.n	80063ee <__ssvfiscanf_r+0x2de>
 80063fa:	bf00      	nop
 80063fc:	00000000 	.word	0x00000000

08006400 <_printf_common>:
 8006400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006404:	4616      	mov	r6, r2
 8006406:	4699      	mov	r9, r3
 8006408:	688a      	ldr	r2, [r1, #8]
 800640a:	690b      	ldr	r3, [r1, #16]
 800640c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006410:	4293      	cmp	r3, r2
 8006412:	bfb8      	it	lt
 8006414:	4613      	movlt	r3, r2
 8006416:	6033      	str	r3, [r6, #0]
 8006418:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800641c:	4607      	mov	r7, r0
 800641e:	460c      	mov	r4, r1
 8006420:	b10a      	cbz	r2, 8006426 <_printf_common+0x26>
 8006422:	3301      	adds	r3, #1
 8006424:	6033      	str	r3, [r6, #0]
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	0699      	lsls	r1, r3, #26
 800642a:	bf42      	ittt	mi
 800642c:	6833      	ldrmi	r3, [r6, #0]
 800642e:	3302      	addmi	r3, #2
 8006430:	6033      	strmi	r3, [r6, #0]
 8006432:	6825      	ldr	r5, [r4, #0]
 8006434:	f015 0506 	ands.w	r5, r5, #6
 8006438:	d106      	bne.n	8006448 <_printf_common+0x48>
 800643a:	f104 0a19 	add.w	sl, r4, #25
 800643e:	68e3      	ldr	r3, [r4, #12]
 8006440:	6832      	ldr	r2, [r6, #0]
 8006442:	1a9b      	subs	r3, r3, r2
 8006444:	42ab      	cmp	r3, r5
 8006446:	dc26      	bgt.n	8006496 <_printf_common+0x96>
 8006448:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800644c:	1e13      	subs	r3, r2, #0
 800644e:	6822      	ldr	r2, [r4, #0]
 8006450:	bf18      	it	ne
 8006452:	2301      	movne	r3, #1
 8006454:	0692      	lsls	r2, r2, #26
 8006456:	d42b      	bmi.n	80064b0 <_printf_common+0xb0>
 8006458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800645c:	4649      	mov	r1, r9
 800645e:	4638      	mov	r0, r7
 8006460:	47c0      	blx	r8
 8006462:	3001      	adds	r0, #1
 8006464:	d01e      	beq.n	80064a4 <_printf_common+0xa4>
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	6922      	ldr	r2, [r4, #16]
 800646a:	f003 0306 	and.w	r3, r3, #6
 800646e:	2b04      	cmp	r3, #4
 8006470:	bf02      	ittt	eq
 8006472:	68e5      	ldreq	r5, [r4, #12]
 8006474:	6833      	ldreq	r3, [r6, #0]
 8006476:	1aed      	subeq	r5, r5, r3
 8006478:	68a3      	ldr	r3, [r4, #8]
 800647a:	bf0c      	ite	eq
 800647c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006480:	2500      	movne	r5, #0
 8006482:	4293      	cmp	r3, r2
 8006484:	bfc4      	itt	gt
 8006486:	1a9b      	subgt	r3, r3, r2
 8006488:	18ed      	addgt	r5, r5, r3
 800648a:	2600      	movs	r6, #0
 800648c:	341a      	adds	r4, #26
 800648e:	42b5      	cmp	r5, r6
 8006490:	d11a      	bne.n	80064c8 <_printf_common+0xc8>
 8006492:	2000      	movs	r0, #0
 8006494:	e008      	b.n	80064a8 <_printf_common+0xa8>
 8006496:	2301      	movs	r3, #1
 8006498:	4652      	mov	r2, sl
 800649a:	4649      	mov	r1, r9
 800649c:	4638      	mov	r0, r7
 800649e:	47c0      	blx	r8
 80064a0:	3001      	adds	r0, #1
 80064a2:	d103      	bne.n	80064ac <_printf_common+0xac>
 80064a4:	f04f 30ff 	mov.w	r0, #4294967295
 80064a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ac:	3501      	adds	r5, #1
 80064ae:	e7c6      	b.n	800643e <_printf_common+0x3e>
 80064b0:	18e1      	adds	r1, r4, r3
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	2030      	movs	r0, #48	; 0x30
 80064b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064ba:	4422      	add	r2, r4
 80064bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064c4:	3302      	adds	r3, #2
 80064c6:	e7c7      	b.n	8006458 <_printf_common+0x58>
 80064c8:	2301      	movs	r3, #1
 80064ca:	4622      	mov	r2, r4
 80064cc:	4649      	mov	r1, r9
 80064ce:	4638      	mov	r0, r7
 80064d0:	47c0      	blx	r8
 80064d2:	3001      	adds	r0, #1
 80064d4:	d0e6      	beq.n	80064a4 <_printf_common+0xa4>
 80064d6:	3601      	adds	r6, #1
 80064d8:	e7d9      	b.n	800648e <_printf_common+0x8e>
	...

080064dc <_printf_i>:
 80064dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064e0:	7e0f      	ldrb	r7, [r1, #24]
 80064e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064e4:	2f78      	cmp	r7, #120	; 0x78
 80064e6:	4691      	mov	r9, r2
 80064e8:	4680      	mov	r8, r0
 80064ea:	460c      	mov	r4, r1
 80064ec:	469a      	mov	sl, r3
 80064ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064f2:	d807      	bhi.n	8006504 <_printf_i+0x28>
 80064f4:	2f62      	cmp	r7, #98	; 0x62
 80064f6:	d80a      	bhi.n	800650e <_printf_i+0x32>
 80064f8:	2f00      	cmp	r7, #0
 80064fa:	f000 80d4 	beq.w	80066a6 <_printf_i+0x1ca>
 80064fe:	2f58      	cmp	r7, #88	; 0x58
 8006500:	f000 80c0 	beq.w	8006684 <_printf_i+0x1a8>
 8006504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006508:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800650c:	e03a      	b.n	8006584 <_printf_i+0xa8>
 800650e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006512:	2b15      	cmp	r3, #21
 8006514:	d8f6      	bhi.n	8006504 <_printf_i+0x28>
 8006516:	a101      	add	r1, pc, #4	; (adr r1, 800651c <_printf_i+0x40>)
 8006518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800651c:	08006575 	.word	0x08006575
 8006520:	08006589 	.word	0x08006589
 8006524:	08006505 	.word	0x08006505
 8006528:	08006505 	.word	0x08006505
 800652c:	08006505 	.word	0x08006505
 8006530:	08006505 	.word	0x08006505
 8006534:	08006589 	.word	0x08006589
 8006538:	08006505 	.word	0x08006505
 800653c:	08006505 	.word	0x08006505
 8006540:	08006505 	.word	0x08006505
 8006544:	08006505 	.word	0x08006505
 8006548:	0800668d 	.word	0x0800668d
 800654c:	080065b5 	.word	0x080065b5
 8006550:	08006647 	.word	0x08006647
 8006554:	08006505 	.word	0x08006505
 8006558:	08006505 	.word	0x08006505
 800655c:	080066af 	.word	0x080066af
 8006560:	08006505 	.word	0x08006505
 8006564:	080065b5 	.word	0x080065b5
 8006568:	08006505 	.word	0x08006505
 800656c:	08006505 	.word	0x08006505
 8006570:	0800664f 	.word	0x0800664f
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	1d1a      	adds	r2, r3, #4
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	602a      	str	r2, [r5, #0]
 800657c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006584:	2301      	movs	r3, #1
 8006586:	e09f      	b.n	80066c8 <_printf_i+0x1ec>
 8006588:	6820      	ldr	r0, [r4, #0]
 800658a:	682b      	ldr	r3, [r5, #0]
 800658c:	0607      	lsls	r7, r0, #24
 800658e:	f103 0104 	add.w	r1, r3, #4
 8006592:	6029      	str	r1, [r5, #0]
 8006594:	d501      	bpl.n	800659a <_printf_i+0xbe>
 8006596:	681e      	ldr	r6, [r3, #0]
 8006598:	e003      	b.n	80065a2 <_printf_i+0xc6>
 800659a:	0646      	lsls	r6, r0, #25
 800659c:	d5fb      	bpl.n	8006596 <_printf_i+0xba>
 800659e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80065a2:	2e00      	cmp	r6, #0
 80065a4:	da03      	bge.n	80065ae <_printf_i+0xd2>
 80065a6:	232d      	movs	r3, #45	; 0x2d
 80065a8:	4276      	negs	r6, r6
 80065aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065ae:	485a      	ldr	r0, [pc, #360]	; (8006718 <_printf_i+0x23c>)
 80065b0:	230a      	movs	r3, #10
 80065b2:	e012      	b.n	80065da <_printf_i+0xfe>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	6820      	ldr	r0, [r4, #0]
 80065b8:	1d19      	adds	r1, r3, #4
 80065ba:	6029      	str	r1, [r5, #0]
 80065bc:	0605      	lsls	r5, r0, #24
 80065be:	d501      	bpl.n	80065c4 <_printf_i+0xe8>
 80065c0:	681e      	ldr	r6, [r3, #0]
 80065c2:	e002      	b.n	80065ca <_printf_i+0xee>
 80065c4:	0641      	lsls	r1, r0, #25
 80065c6:	d5fb      	bpl.n	80065c0 <_printf_i+0xe4>
 80065c8:	881e      	ldrh	r6, [r3, #0]
 80065ca:	4853      	ldr	r0, [pc, #332]	; (8006718 <_printf_i+0x23c>)
 80065cc:	2f6f      	cmp	r7, #111	; 0x6f
 80065ce:	bf0c      	ite	eq
 80065d0:	2308      	moveq	r3, #8
 80065d2:	230a      	movne	r3, #10
 80065d4:	2100      	movs	r1, #0
 80065d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065da:	6865      	ldr	r5, [r4, #4]
 80065dc:	60a5      	str	r5, [r4, #8]
 80065de:	2d00      	cmp	r5, #0
 80065e0:	bfa2      	ittt	ge
 80065e2:	6821      	ldrge	r1, [r4, #0]
 80065e4:	f021 0104 	bicge.w	r1, r1, #4
 80065e8:	6021      	strge	r1, [r4, #0]
 80065ea:	b90e      	cbnz	r6, 80065f0 <_printf_i+0x114>
 80065ec:	2d00      	cmp	r5, #0
 80065ee:	d04b      	beq.n	8006688 <_printf_i+0x1ac>
 80065f0:	4615      	mov	r5, r2
 80065f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80065f6:	fb03 6711 	mls	r7, r3, r1, r6
 80065fa:	5dc7      	ldrb	r7, [r0, r7]
 80065fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006600:	4637      	mov	r7, r6
 8006602:	42bb      	cmp	r3, r7
 8006604:	460e      	mov	r6, r1
 8006606:	d9f4      	bls.n	80065f2 <_printf_i+0x116>
 8006608:	2b08      	cmp	r3, #8
 800660a:	d10b      	bne.n	8006624 <_printf_i+0x148>
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	07de      	lsls	r6, r3, #31
 8006610:	d508      	bpl.n	8006624 <_printf_i+0x148>
 8006612:	6923      	ldr	r3, [r4, #16]
 8006614:	6861      	ldr	r1, [r4, #4]
 8006616:	4299      	cmp	r1, r3
 8006618:	bfde      	ittt	le
 800661a:	2330      	movle	r3, #48	; 0x30
 800661c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006620:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006624:	1b52      	subs	r2, r2, r5
 8006626:	6122      	str	r2, [r4, #16]
 8006628:	f8cd a000 	str.w	sl, [sp]
 800662c:	464b      	mov	r3, r9
 800662e:	aa03      	add	r2, sp, #12
 8006630:	4621      	mov	r1, r4
 8006632:	4640      	mov	r0, r8
 8006634:	f7ff fee4 	bl	8006400 <_printf_common>
 8006638:	3001      	adds	r0, #1
 800663a:	d14a      	bne.n	80066d2 <_printf_i+0x1f6>
 800663c:	f04f 30ff 	mov.w	r0, #4294967295
 8006640:	b004      	add	sp, #16
 8006642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	f043 0320 	orr.w	r3, r3, #32
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	4833      	ldr	r0, [pc, #204]	; (800671c <_printf_i+0x240>)
 8006650:	2778      	movs	r7, #120	; 0x78
 8006652:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	6829      	ldr	r1, [r5, #0]
 800665a:	061f      	lsls	r7, r3, #24
 800665c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006660:	d402      	bmi.n	8006668 <_printf_i+0x18c>
 8006662:	065f      	lsls	r7, r3, #25
 8006664:	bf48      	it	mi
 8006666:	b2b6      	uxthmi	r6, r6
 8006668:	07df      	lsls	r7, r3, #31
 800666a:	bf48      	it	mi
 800666c:	f043 0320 	orrmi.w	r3, r3, #32
 8006670:	6029      	str	r1, [r5, #0]
 8006672:	bf48      	it	mi
 8006674:	6023      	strmi	r3, [r4, #0]
 8006676:	b91e      	cbnz	r6, 8006680 <_printf_i+0x1a4>
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	f023 0320 	bic.w	r3, r3, #32
 800667e:	6023      	str	r3, [r4, #0]
 8006680:	2310      	movs	r3, #16
 8006682:	e7a7      	b.n	80065d4 <_printf_i+0xf8>
 8006684:	4824      	ldr	r0, [pc, #144]	; (8006718 <_printf_i+0x23c>)
 8006686:	e7e4      	b.n	8006652 <_printf_i+0x176>
 8006688:	4615      	mov	r5, r2
 800668a:	e7bd      	b.n	8006608 <_printf_i+0x12c>
 800668c:	682b      	ldr	r3, [r5, #0]
 800668e:	6826      	ldr	r6, [r4, #0]
 8006690:	6961      	ldr	r1, [r4, #20]
 8006692:	1d18      	adds	r0, r3, #4
 8006694:	6028      	str	r0, [r5, #0]
 8006696:	0635      	lsls	r5, r6, #24
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	d501      	bpl.n	80066a0 <_printf_i+0x1c4>
 800669c:	6019      	str	r1, [r3, #0]
 800669e:	e002      	b.n	80066a6 <_printf_i+0x1ca>
 80066a0:	0670      	lsls	r0, r6, #25
 80066a2:	d5fb      	bpl.n	800669c <_printf_i+0x1c0>
 80066a4:	8019      	strh	r1, [r3, #0]
 80066a6:	2300      	movs	r3, #0
 80066a8:	6123      	str	r3, [r4, #16]
 80066aa:	4615      	mov	r5, r2
 80066ac:	e7bc      	b.n	8006628 <_printf_i+0x14c>
 80066ae:	682b      	ldr	r3, [r5, #0]
 80066b0:	1d1a      	adds	r2, r3, #4
 80066b2:	602a      	str	r2, [r5, #0]
 80066b4:	681d      	ldr	r5, [r3, #0]
 80066b6:	6862      	ldr	r2, [r4, #4]
 80066b8:	2100      	movs	r1, #0
 80066ba:	4628      	mov	r0, r5
 80066bc:	f7f9 fdb8 	bl	8000230 <memchr>
 80066c0:	b108      	cbz	r0, 80066c6 <_printf_i+0x1ea>
 80066c2:	1b40      	subs	r0, r0, r5
 80066c4:	6060      	str	r0, [r4, #4]
 80066c6:	6863      	ldr	r3, [r4, #4]
 80066c8:	6123      	str	r3, [r4, #16]
 80066ca:	2300      	movs	r3, #0
 80066cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066d0:	e7aa      	b.n	8006628 <_printf_i+0x14c>
 80066d2:	6923      	ldr	r3, [r4, #16]
 80066d4:	462a      	mov	r2, r5
 80066d6:	4649      	mov	r1, r9
 80066d8:	4640      	mov	r0, r8
 80066da:	47d0      	blx	sl
 80066dc:	3001      	adds	r0, #1
 80066de:	d0ad      	beq.n	800663c <_printf_i+0x160>
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	079b      	lsls	r3, r3, #30
 80066e4:	d413      	bmi.n	800670e <_printf_i+0x232>
 80066e6:	68e0      	ldr	r0, [r4, #12]
 80066e8:	9b03      	ldr	r3, [sp, #12]
 80066ea:	4298      	cmp	r0, r3
 80066ec:	bfb8      	it	lt
 80066ee:	4618      	movlt	r0, r3
 80066f0:	e7a6      	b.n	8006640 <_printf_i+0x164>
 80066f2:	2301      	movs	r3, #1
 80066f4:	4632      	mov	r2, r6
 80066f6:	4649      	mov	r1, r9
 80066f8:	4640      	mov	r0, r8
 80066fa:	47d0      	blx	sl
 80066fc:	3001      	adds	r0, #1
 80066fe:	d09d      	beq.n	800663c <_printf_i+0x160>
 8006700:	3501      	adds	r5, #1
 8006702:	68e3      	ldr	r3, [r4, #12]
 8006704:	9903      	ldr	r1, [sp, #12]
 8006706:	1a5b      	subs	r3, r3, r1
 8006708:	42ab      	cmp	r3, r5
 800670a:	dcf2      	bgt.n	80066f2 <_printf_i+0x216>
 800670c:	e7eb      	b.n	80066e6 <_printf_i+0x20a>
 800670e:	2500      	movs	r5, #0
 8006710:	f104 0619 	add.w	r6, r4, #25
 8006714:	e7f5      	b.n	8006702 <_printf_i+0x226>
 8006716:	bf00      	nop
 8006718:	08006ea1 	.word	0x08006ea1
 800671c:	08006eb2 	.word	0x08006eb2

08006720 <_scanf_chars>:
 8006720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006724:	4615      	mov	r5, r2
 8006726:	688a      	ldr	r2, [r1, #8]
 8006728:	4680      	mov	r8, r0
 800672a:	460c      	mov	r4, r1
 800672c:	b932      	cbnz	r2, 800673c <_scanf_chars+0x1c>
 800672e:	698a      	ldr	r2, [r1, #24]
 8006730:	2a00      	cmp	r2, #0
 8006732:	bf0c      	ite	eq
 8006734:	2201      	moveq	r2, #1
 8006736:	f04f 32ff 	movne.w	r2, #4294967295
 800673a:	608a      	str	r2, [r1, #8]
 800673c:	6822      	ldr	r2, [r4, #0]
 800673e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80067d0 <_scanf_chars+0xb0>
 8006742:	06d1      	lsls	r1, r2, #27
 8006744:	bf5f      	itttt	pl
 8006746:	681a      	ldrpl	r2, [r3, #0]
 8006748:	1d11      	addpl	r1, r2, #4
 800674a:	6019      	strpl	r1, [r3, #0]
 800674c:	6816      	ldrpl	r6, [r2, #0]
 800674e:	2700      	movs	r7, #0
 8006750:	69a0      	ldr	r0, [r4, #24]
 8006752:	b188      	cbz	r0, 8006778 <_scanf_chars+0x58>
 8006754:	2801      	cmp	r0, #1
 8006756:	d107      	bne.n	8006768 <_scanf_chars+0x48>
 8006758:	682a      	ldr	r2, [r5, #0]
 800675a:	7811      	ldrb	r1, [r2, #0]
 800675c:	6962      	ldr	r2, [r4, #20]
 800675e:	5c52      	ldrb	r2, [r2, r1]
 8006760:	b952      	cbnz	r2, 8006778 <_scanf_chars+0x58>
 8006762:	2f00      	cmp	r7, #0
 8006764:	d031      	beq.n	80067ca <_scanf_chars+0xaa>
 8006766:	e022      	b.n	80067ae <_scanf_chars+0x8e>
 8006768:	2802      	cmp	r0, #2
 800676a:	d120      	bne.n	80067ae <_scanf_chars+0x8e>
 800676c:	682b      	ldr	r3, [r5, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006774:	071b      	lsls	r3, r3, #28
 8006776:	d41a      	bmi.n	80067ae <_scanf_chars+0x8e>
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	06da      	lsls	r2, r3, #27
 800677c:	bf5e      	ittt	pl
 800677e:	682b      	ldrpl	r3, [r5, #0]
 8006780:	781b      	ldrbpl	r3, [r3, #0]
 8006782:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006786:	682a      	ldr	r2, [r5, #0]
 8006788:	686b      	ldr	r3, [r5, #4]
 800678a:	3201      	adds	r2, #1
 800678c:	602a      	str	r2, [r5, #0]
 800678e:	68a2      	ldr	r2, [r4, #8]
 8006790:	3b01      	subs	r3, #1
 8006792:	3a01      	subs	r2, #1
 8006794:	606b      	str	r3, [r5, #4]
 8006796:	3701      	adds	r7, #1
 8006798:	60a2      	str	r2, [r4, #8]
 800679a:	b142      	cbz	r2, 80067ae <_scanf_chars+0x8e>
 800679c:	2b00      	cmp	r3, #0
 800679e:	dcd7      	bgt.n	8006750 <_scanf_chars+0x30>
 80067a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80067a4:	4629      	mov	r1, r5
 80067a6:	4640      	mov	r0, r8
 80067a8:	4798      	blx	r3
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d0d0      	beq.n	8006750 <_scanf_chars+0x30>
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	f013 0310 	ands.w	r3, r3, #16
 80067b4:	d105      	bne.n	80067c2 <_scanf_chars+0xa2>
 80067b6:	68e2      	ldr	r2, [r4, #12]
 80067b8:	3201      	adds	r2, #1
 80067ba:	60e2      	str	r2, [r4, #12]
 80067bc:	69a2      	ldr	r2, [r4, #24]
 80067be:	b102      	cbz	r2, 80067c2 <_scanf_chars+0xa2>
 80067c0:	7033      	strb	r3, [r6, #0]
 80067c2:	6923      	ldr	r3, [r4, #16]
 80067c4:	443b      	add	r3, r7
 80067c6:	6123      	str	r3, [r4, #16]
 80067c8:	2000      	movs	r0, #0
 80067ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ce:	bf00      	nop
 80067d0:	08006edf 	.word	0x08006edf

080067d4 <_scanf_i>:
 80067d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d8:	4698      	mov	r8, r3
 80067da:	4b74      	ldr	r3, [pc, #464]	; (80069ac <_scanf_i+0x1d8>)
 80067dc:	460c      	mov	r4, r1
 80067de:	4682      	mov	sl, r0
 80067e0:	4616      	mov	r6, r2
 80067e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80067e6:	b087      	sub	sp, #28
 80067e8:	ab03      	add	r3, sp, #12
 80067ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80067ee:	4b70      	ldr	r3, [pc, #448]	; (80069b0 <_scanf_i+0x1dc>)
 80067f0:	69a1      	ldr	r1, [r4, #24]
 80067f2:	4a70      	ldr	r2, [pc, #448]	; (80069b4 <_scanf_i+0x1e0>)
 80067f4:	2903      	cmp	r1, #3
 80067f6:	bf18      	it	ne
 80067f8:	461a      	movne	r2, r3
 80067fa:	68a3      	ldr	r3, [r4, #8]
 80067fc:	9201      	str	r2, [sp, #4]
 80067fe:	1e5a      	subs	r2, r3, #1
 8006800:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006804:	bf88      	it	hi
 8006806:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800680a:	4627      	mov	r7, r4
 800680c:	bf82      	ittt	hi
 800680e:	eb03 0905 	addhi.w	r9, r3, r5
 8006812:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006816:	60a3      	strhi	r3, [r4, #8]
 8006818:	f857 3b1c 	ldr.w	r3, [r7], #28
 800681c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006820:	bf98      	it	ls
 8006822:	f04f 0900 	movls.w	r9, #0
 8006826:	6023      	str	r3, [r4, #0]
 8006828:	463d      	mov	r5, r7
 800682a:	f04f 0b00 	mov.w	fp, #0
 800682e:	6831      	ldr	r1, [r6, #0]
 8006830:	ab03      	add	r3, sp, #12
 8006832:	7809      	ldrb	r1, [r1, #0]
 8006834:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006838:	2202      	movs	r2, #2
 800683a:	f7f9 fcf9 	bl	8000230 <memchr>
 800683e:	b328      	cbz	r0, 800688c <_scanf_i+0xb8>
 8006840:	f1bb 0f01 	cmp.w	fp, #1
 8006844:	d159      	bne.n	80068fa <_scanf_i+0x126>
 8006846:	6862      	ldr	r2, [r4, #4]
 8006848:	b92a      	cbnz	r2, 8006856 <_scanf_i+0x82>
 800684a:	6822      	ldr	r2, [r4, #0]
 800684c:	2308      	movs	r3, #8
 800684e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006852:	6063      	str	r3, [r4, #4]
 8006854:	6022      	str	r2, [r4, #0]
 8006856:	6822      	ldr	r2, [r4, #0]
 8006858:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800685c:	6022      	str	r2, [r4, #0]
 800685e:	68a2      	ldr	r2, [r4, #8]
 8006860:	1e51      	subs	r1, r2, #1
 8006862:	60a1      	str	r1, [r4, #8]
 8006864:	b192      	cbz	r2, 800688c <_scanf_i+0xb8>
 8006866:	6832      	ldr	r2, [r6, #0]
 8006868:	1c51      	adds	r1, r2, #1
 800686a:	6031      	str	r1, [r6, #0]
 800686c:	7812      	ldrb	r2, [r2, #0]
 800686e:	f805 2b01 	strb.w	r2, [r5], #1
 8006872:	6872      	ldr	r2, [r6, #4]
 8006874:	3a01      	subs	r2, #1
 8006876:	2a00      	cmp	r2, #0
 8006878:	6072      	str	r2, [r6, #4]
 800687a:	dc07      	bgt.n	800688c <_scanf_i+0xb8>
 800687c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006880:	4631      	mov	r1, r6
 8006882:	4650      	mov	r0, sl
 8006884:	4790      	blx	r2
 8006886:	2800      	cmp	r0, #0
 8006888:	f040 8085 	bne.w	8006996 <_scanf_i+0x1c2>
 800688c:	f10b 0b01 	add.w	fp, fp, #1
 8006890:	f1bb 0f03 	cmp.w	fp, #3
 8006894:	d1cb      	bne.n	800682e <_scanf_i+0x5a>
 8006896:	6863      	ldr	r3, [r4, #4]
 8006898:	b90b      	cbnz	r3, 800689e <_scanf_i+0xca>
 800689a:	230a      	movs	r3, #10
 800689c:	6063      	str	r3, [r4, #4]
 800689e:	6863      	ldr	r3, [r4, #4]
 80068a0:	4945      	ldr	r1, [pc, #276]	; (80069b8 <_scanf_i+0x1e4>)
 80068a2:	6960      	ldr	r0, [r4, #20]
 80068a4:	1ac9      	subs	r1, r1, r3
 80068a6:	f000 f889 	bl	80069bc <__sccl>
 80068aa:	f04f 0b00 	mov.w	fp, #0
 80068ae:	68a3      	ldr	r3, [r4, #8]
 80068b0:	6822      	ldr	r2, [r4, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d03d      	beq.n	8006932 <_scanf_i+0x15e>
 80068b6:	6831      	ldr	r1, [r6, #0]
 80068b8:	6960      	ldr	r0, [r4, #20]
 80068ba:	f891 c000 	ldrb.w	ip, [r1]
 80068be:	f810 000c 	ldrb.w	r0, [r0, ip]
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d035      	beq.n	8006932 <_scanf_i+0x15e>
 80068c6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80068ca:	d124      	bne.n	8006916 <_scanf_i+0x142>
 80068cc:	0510      	lsls	r0, r2, #20
 80068ce:	d522      	bpl.n	8006916 <_scanf_i+0x142>
 80068d0:	f10b 0b01 	add.w	fp, fp, #1
 80068d4:	f1b9 0f00 	cmp.w	r9, #0
 80068d8:	d003      	beq.n	80068e2 <_scanf_i+0x10e>
 80068da:	3301      	adds	r3, #1
 80068dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80068e0:	60a3      	str	r3, [r4, #8]
 80068e2:	6873      	ldr	r3, [r6, #4]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	6073      	str	r3, [r6, #4]
 80068ea:	dd1b      	ble.n	8006924 <_scanf_i+0x150>
 80068ec:	6833      	ldr	r3, [r6, #0]
 80068ee:	3301      	adds	r3, #1
 80068f0:	6033      	str	r3, [r6, #0]
 80068f2:	68a3      	ldr	r3, [r4, #8]
 80068f4:	3b01      	subs	r3, #1
 80068f6:	60a3      	str	r3, [r4, #8]
 80068f8:	e7d9      	b.n	80068ae <_scanf_i+0xda>
 80068fa:	f1bb 0f02 	cmp.w	fp, #2
 80068fe:	d1ae      	bne.n	800685e <_scanf_i+0x8a>
 8006900:	6822      	ldr	r2, [r4, #0]
 8006902:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006906:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800690a:	d1bf      	bne.n	800688c <_scanf_i+0xb8>
 800690c:	2310      	movs	r3, #16
 800690e:	6063      	str	r3, [r4, #4]
 8006910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006914:	e7a2      	b.n	800685c <_scanf_i+0x88>
 8006916:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800691a:	6022      	str	r2, [r4, #0]
 800691c:	780b      	ldrb	r3, [r1, #0]
 800691e:	f805 3b01 	strb.w	r3, [r5], #1
 8006922:	e7de      	b.n	80068e2 <_scanf_i+0x10e>
 8006924:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006928:	4631      	mov	r1, r6
 800692a:	4650      	mov	r0, sl
 800692c:	4798      	blx	r3
 800692e:	2800      	cmp	r0, #0
 8006930:	d0df      	beq.n	80068f2 <_scanf_i+0x11e>
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	05d9      	lsls	r1, r3, #23
 8006936:	d50d      	bpl.n	8006954 <_scanf_i+0x180>
 8006938:	42bd      	cmp	r5, r7
 800693a:	d909      	bls.n	8006950 <_scanf_i+0x17c>
 800693c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006940:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006944:	4632      	mov	r2, r6
 8006946:	4650      	mov	r0, sl
 8006948:	4798      	blx	r3
 800694a:	f105 39ff 	add.w	r9, r5, #4294967295
 800694e:	464d      	mov	r5, r9
 8006950:	42bd      	cmp	r5, r7
 8006952:	d028      	beq.n	80069a6 <_scanf_i+0x1d2>
 8006954:	6822      	ldr	r2, [r4, #0]
 8006956:	f012 0210 	ands.w	r2, r2, #16
 800695a:	d113      	bne.n	8006984 <_scanf_i+0x1b0>
 800695c:	702a      	strb	r2, [r5, #0]
 800695e:	6863      	ldr	r3, [r4, #4]
 8006960:	9e01      	ldr	r6, [sp, #4]
 8006962:	4639      	mov	r1, r7
 8006964:	4650      	mov	r0, sl
 8006966:	47b0      	blx	r6
 8006968:	f8d8 3000 	ldr.w	r3, [r8]
 800696c:	6821      	ldr	r1, [r4, #0]
 800696e:	1d1a      	adds	r2, r3, #4
 8006970:	f8c8 2000 	str.w	r2, [r8]
 8006974:	f011 0f20 	tst.w	r1, #32
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	d00f      	beq.n	800699c <_scanf_i+0x1c8>
 800697c:	6018      	str	r0, [r3, #0]
 800697e:	68e3      	ldr	r3, [r4, #12]
 8006980:	3301      	adds	r3, #1
 8006982:	60e3      	str	r3, [r4, #12]
 8006984:	6923      	ldr	r3, [r4, #16]
 8006986:	1bed      	subs	r5, r5, r7
 8006988:	445d      	add	r5, fp
 800698a:	442b      	add	r3, r5
 800698c:	6123      	str	r3, [r4, #16]
 800698e:	2000      	movs	r0, #0
 8006990:	b007      	add	sp, #28
 8006992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006996:	f04f 0b00 	mov.w	fp, #0
 800699a:	e7ca      	b.n	8006932 <_scanf_i+0x15e>
 800699c:	07ca      	lsls	r2, r1, #31
 800699e:	bf4c      	ite	mi
 80069a0:	8018      	strhmi	r0, [r3, #0]
 80069a2:	6018      	strpl	r0, [r3, #0]
 80069a4:	e7eb      	b.n	800697e <_scanf_i+0x1aa>
 80069a6:	2001      	movs	r0, #1
 80069a8:	e7f2      	b.n	8006990 <_scanf_i+0x1bc>
 80069aa:	bf00      	nop
 80069ac:	08006e44 	.word	0x08006e44
 80069b0:	08006d45 	.word	0x08006d45
 80069b4:	08006c5d 	.word	0x08006c5d
 80069b8:	08006ed3 	.word	0x08006ed3

080069bc <__sccl>:
 80069bc:	b570      	push	{r4, r5, r6, lr}
 80069be:	780b      	ldrb	r3, [r1, #0]
 80069c0:	4604      	mov	r4, r0
 80069c2:	2b5e      	cmp	r3, #94	; 0x5e
 80069c4:	bf0b      	itete	eq
 80069c6:	784b      	ldrbeq	r3, [r1, #1]
 80069c8:	1c4a      	addne	r2, r1, #1
 80069ca:	1c8a      	addeq	r2, r1, #2
 80069cc:	2100      	movne	r1, #0
 80069ce:	bf08      	it	eq
 80069d0:	2101      	moveq	r1, #1
 80069d2:	3801      	subs	r0, #1
 80069d4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80069d8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80069dc:	42a8      	cmp	r0, r5
 80069de:	d1fb      	bne.n	80069d8 <__sccl+0x1c>
 80069e0:	b90b      	cbnz	r3, 80069e6 <__sccl+0x2a>
 80069e2:	1e50      	subs	r0, r2, #1
 80069e4:	bd70      	pop	{r4, r5, r6, pc}
 80069e6:	f081 0101 	eor.w	r1, r1, #1
 80069ea:	54e1      	strb	r1, [r4, r3]
 80069ec:	4610      	mov	r0, r2
 80069ee:	4602      	mov	r2, r0
 80069f0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80069f4:	2d2d      	cmp	r5, #45	; 0x2d
 80069f6:	d005      	beq.n	8006a04 <__sccl+0x48>
 80069f8:	2d5d      	cmp	r5, #93	; 0x5d
 80069fa:	d016      	beq.n	8006a2a <__sccl+0x6e>
 80069fc:	2d00      	cmp	r5, #0
 80069fe:	d0f1      	beq.n	80069e4 <__sccl+0x28>
 8006a00:	462b      	mov	r3, r5
 8006a02:	e7f2      	b.n	80069ea <__sccl+0x2e>
 8006a04:	7846      	ldrb	r6, [r0, #1]
 8006a06:	2e5d      	cmp	r6, #93	; 0x5d
 8006a08:	d0fa      	beq.n	8006a00 <__sccl+0x44>
 8006a0a:	42b3      	cmp	r3, r6
 8006a0c:	dcf8      	bgt.n	8006a00 <__sccl+0x44>
 8006a0e:	3002      	adds	r0, #2
 8006a10:	461a      	mov	r2, r3
 8006a12:	3201      	adds	r2, #1
 8006a14:	4296      	cmp	r6, r2
 8006a16:	54a1      	strb	r1, [r4, r2]
 8006a18:	dcfb      	bgt.n	8006a12 <__sccl+0x56>
 8006a1a:	1af2      	subs	r2, r6, r3
 8006a1c:	3a01      	subs	r2, #1
 8006a1e:	1c5d      	adds	r5, r3, #1
 8006a20:	42b3      	cmp	r3, r6
 8006a22:	bfa8      	it	ge
 8006a24:	2200      	movge	r2, #0
 8006a26:	18ab      	adds	r3, r5, r2
 8006a28:	e7e1      	b.n	80069ee <__sccl+0x32>
 8006a2a:	4610      	mov	r0, r2
 8006a2c:	e7da      	b.n	80069e4 <__sccl+0x28>

08006a2e <__submore>:
 8006a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a32:	460c      	mov	r4, r1
 8006a34:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006a36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a3a:	4299      	cmp	r1, r3
 8006a3c:	d11d      	bne.n	8006a7a <__submore+0x4c>
 8006a3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a42:	f7ff f927 	bl	8005c94 <_malloc_r>
 8006a46:	b918      	cbnz	r0, 8006a50 <__submore+0x22>
 8006a48:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a54:	63a3      	str	r3, [r4, #56]	; 0x38
 8006a56:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006a5a:	6360      	str	r0, [r4, #52]	; 0x34
 8006a5c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006a60:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006a64:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006a68:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006a6c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006a70:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006a74:	6020      	str	r0, [r4, #0]
 8006a76:	2000      	movs	r0, #0
 8006a78:	e7e8      	b.n	8006a4c <__submore+0x1e>
 8006a7a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006a7c:	0077      	lsls	r7, r6, #1
 8006a7e:	463a      	mov	r2, r7
 8006a80:	f000 f83a 	bl	8006af8 <_realloc_r>
 8006a84:	4605      	mov	r5, r0
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d0de      	beq.n	8006a48 <__submore+0x1a>
 8006a8a:	eb00 0806 	add.w	r8, r0, r6
 8006a8e:	4601      	mov	r1, r0
 8006a90:	4632      	mov	r2, r6
 8006a92:	4640      	mov	r0, r8
 8006a94:	f7ff f884 	bl	8005ba0 <memcpy>
 8006a98:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006a9c:	f8c4 8000 	str.w	r8, [r4]
 8006aa0:	e7e9      	b.n	8006a76 <__submore+0x48>

08006aa2 <memmove>:
 8006aa2:	4288      	cmp	r0, r1
 8006aa4:	b510      	push	{r4, lr}
 8006aa6:	eb01 0402 	add.w	r4, r1, r2
 8006aaa:	d902      	bls.n	8006ab2 <memmove+0x10>
 8006aac:	4284      	cmp	r4, r0
 8006aae:	4623      	mov	r3, r4
 8006ab0:	d807      	bhi.n	8006ac2 <memmove+0x20>
 8006ab2:	1e43      	subs	r3, r0, #1
 8006ab4:	42a1      	cmp	r1, r4
 8006ab6:	d008      	beq.n	8006aca <memmove+0x28>
 8006ab8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006abc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ac0:	e7f8      	b.n	8006ab4 <memmove+0x12>
 8006ac2:	4402      	add	r2, r0
 8006ac4:	4601      	mov	r1, r0
 8006ac6:	428a      	cmp	r2, r1
 8006ac8:	d100      	bne.n	8006acc <memmove+0x2a>
 8006aca:	bd10      	pop	{r4, pc}
 8006acc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ad0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ad4:	e7f7      	b.n	8006ac6 <memmove+0x24>
	...

08006ad8 <_sbrk_r>:
 8006ad8:	b538      	push	{r3, r4, r5, lr}
 8006ada:	4d06      	ldr	r5, [pc, #24]	; (8006af4 <_sbrk_r+0x1c>)
 8006adc:	2300      	movs	r3, #0
 8006ade:	4604      	mov	r4, r0
 8006ae0:	4608      	mov	r0, r1
 8006ae2:	602b      	str	r3, [r5, #0]
 8006ae4:	f7fa fcc8 	bl	8001478 <_sbrk>
 8006ae8:	1c43      	adds	r3, r0, #1
 8006aea:	d102      	bne.n	8006af2 <_sbrk_r+0x1a>
 8006aec:	682b      	ldr	r3, [r5, #0]
 8006aee:	b103      	cbz	r3, 8006af2 <_sbrk_r+0x1a>
 8006af0:	6023      	str	r3, [r4, #0]
 8006af2:	bd38      	pop	{r3, r4, r5, pc}
 8006af4:	20000464 	.word	0x20000464

08006af8 <_realloc_r>:
 8006af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006afc:	4680      	mov	r8, r0
 8006afe:	4614      	mov	r4, r2
 8006b00:	460e      	mov	r6, r1
 8006b02:	b921      	cbnz	r1, 8006b0e <_realloc_r+0x16>
 8006b04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b08:	4611      	mov	r1, r2
 8006b0a:	f7ff b8c3 	b.w	8005c94 <_malloc_r>
 8006b0e:	b92a      	cbnz	r2, 8006b1c <_realloc_r+0x24>
 8006b10:	f7ff f854 	bl	8005bbc <_free_r>
 8006b14:	4625      	mov	r5, r4
 8006b16:	4628      	mov	r0, r5
 8006b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b1c:	f000 f914 	bl	8006d48 <_malloc_usable_size_r>
 8006b20:	4284      	cmp	r4, r0
 8006b22:	4607      	mov	r7, r0
 8006b24:	d802      	bhi.n	8006b2c <_realloc_r+0x34>
 8006b26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b2a:	d812      	bhi.n	8006b52 <_realloc_r+0x5a>
 8006b2c:	4621      	mov	r1, r4
 8006b2e:	4640      	mov	r0, r8
 8006b30:	f7ff f8b0 	bl	8005c94 <_malloc_r>
 8006b34:	4605      	mov	r5, r0
 8006b36:	2800      	cmp	r0, #0
 8006b38:	d0ed      	beq.n	8006b16 <_realloc_r+0x1e>
 8006b3a:	42bc      	cmp	r4, r7
 8006b3c:	4622      	mov	r2, r4
 8006b3e:	4631      	mov	r1, r6
 8006b40:	bf28      	it	cs
 8006b42:	463a      	movcs	r2, r7
 8006b44:	f7ff f82c 	bl	8005ba0 <memcpy>
 8006b48:	4631      	mov	r1, r6
 8006b4a:	4640      	mov	r0, r8
 8006b4c:	f7ff f836 	bl	8005bbc <_free_r>
 8006b50:	e7e1      	b.n	8006b16 <_realloc_r+0x1e>
 8006b52:	4635      	mov	r5, r6
 8006b54:	e7df      	b.n	8006b16 <_realloc_r+0x1e>
	...

08006b58 <_strtol_l.constprop.0>:
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b5e:	d001      	beq.n	8006b64 <_strtol_l.constprop.0+0xc>
 8006b60:	2b24      	cmp	r3, #36	; 0x24
 8006b62:	d906      	bls.n	8006b72 <_strtol_l.constprop.0+0x1a>
 8006b64:	f7fe fff0 	bl	8005b48 <__errno>
 8006b68:	2316      	movs	r3, #22
 8006b6a:	6003      	str	r3, [r0, #0]
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b72:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006c58 <_strtol_l.constprop.0+0x100>
 8006b76:	460d      	mov	r5, r1
 8006b78:	462e      	mov	r6, r5
 8006b7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b7e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006b82:	f017 0708 	ands.w	r7, r7, #8
 8006b86:	d1f7      	bne.n	8006b78 <_strtol_l.constprop.0+0x20>
 8006b88:	2c2d      	cmp	r4, #45	; 0x2d
 8006b8a:	d132      	bne.n	8006bf2 <_strtol_l.constprop.0+0x9a>
 8006b8c:	782c      	ldrb	r4, [r5, #0]
 8006b8e:	2701      	movs	r7, #1
 8006b90:	1cb5      	adds	r5, r6, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d05b      	beq.n	8006c4e <_strtol_l.constprop.0+0xf6>
 8006b96:	2b10      	cmp	r3, #16
 8006b98:	d109      	bne.n	8006bae <_strtol_l.constprop.0+0x56>
 8006b9a:	2c30      	cmp	r4, #48	; 0x30
 8006b9c:	d107      	bne.n	8006bae <_strtol_l.constprop.0+0x56>
 8006b9e:	782c      	ldrb	r4, [r5, #0]
 8006ba0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006ba4:	2c58      	cmp	r4, #88	; 0x58
 8006ba6:	d14d      	bne.n	8006c44 <_strtol_l.constprop.0+0xec>
 8006ba8:	786c      	ldrb	r4, [r5, #1]
 8006baa:	2310      	movs	r3, #16
 8006bac:	3502      	adds	r5, #2
 8006bae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006bb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8006bb6:	f04f 0e00 	mov.w	lr, #0
 8006bba:	fbb8 f9f3 	udiv	r9, r8, r3
 8006bbe:	4676      	mov	r6, lr
 8006bc0:	fb03 8a19 	mls	sl, r3, r9, r8
 8006bc4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006bc8:	f1bc 0f09 	cmp.w	ip, #9
 8006bcc:	d816      	bhi.n	8006bfc <_strtol_l.constprop.0+0xa4>
 8006bce:	4664      	mov	r4, ip
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	dd24      	ble.n	8006c1e <_strtol_l.constprop.0+0xc6>
 8006bd4:	f1be 3fff 	cmp.w	lr, #4294967295
 8006bd8:	d008      	beq.n	8006bec <_strtol_l.constprop.0+0x94>
 8006bda:	45b1      	cmp	r9, r6
 8006bdc:	d31c      	bcc.n	8006c18 <_strtol_l.constprop.0+0xc0>
 8006bde:	d101      	bne.n	8006be4 <_strtol_l.constprop.0+0x8c>
 8006be0:	45a2      	cmp	sl, r4
 8006be2:	db19      	blt.n	8006c18 <_strtol_l.constprop.0+0xc0>
 8006be4:	fb06 4603 	mla	r6, r6, r3, r4
 8006be8:	f04f 0e01 	mov.w	lr, #1
 8006bec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bf0:	e7e8      	b.n	8006bc4 <_strtol_l.constprop.0+0x6c>
 8006bf2:	2c2b      	cmp	r4, #43	; 0x2b
 8006bf4:	bf04      	itt	eq
 8006bf6:	782c      	ldrbeq	r4, [r5, #0]
 8006bf8:	1cb5      	addeq	r5, r6, #2
 8006bfa:	e7ca      	b.n	8006b92 <_strtol_l.constprop.0+0x3a>
 8006bfc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006c00:	f1bc 0f19 	cmp.w	ip, #25
 8006c04:	d801      	bhi.n	8006c0a <_strtol_l.constprop.0+0xb2>
 8006c06:	3c37      	subs	r4, #55	; 0x37
 8006c08:	e7e2      	b.n	8006bd0 <_strtol_l.constprop.0+0x78>
 8006c0a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006c0e:	f1bc 0f19 	cmp.w	ip, #25
 8006c12:	d804      	bhi.n	8006c1e <_strtol_l.constprop.0+0xc6>
 8006c14:	3c57      	subs	r4, #87	; 0x57
 8006c16:	e7db      	b.n	8006bd0 <_strtol_l.constprop.0+0x78>
 8006c18:	f04f 3eff 	mov.w	lr, #4294967295
 8006c1c:	e7e6      	b.n	8006bec <_strtol_l.constprop.0+0x94>
 8006c1e:	f1be 3fff 	cmp.w	lr, #4294967295
 8006c22:	d105      	bne.n	8006c30 <_strtol_l.constprop.0+0xd8>
 8006c24:	2322      	movs	r3, #34	; 0x22
 8006c26:	6003      	str	r3, [r0, #0]
 8006c28:	4646      	mov	r6, r8
 8006c2a:	b942      	cbnz	r2, 8006c3e <_strtol_l.constprop.0+0xe6>
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	e79e      	b.n	8006b6e <_strtol_l.constprop.0+0x16>
 8006c30:	b107      	cbz	r7, 8006c34 <_strtol_l.constprop.0+0xdc>
 8006c32:	4276      	negs	r6, r6
 8006c34:	2a00      	cmp	r2, #0
 8006c36:	d0f9      	beq.n	8006c2c <_strtol_l.constprop.0+0xd4>
 8006c38:	f1be 0f00 	cmp.w	lr, #0
 8006c3c:	d000      	beq.n	8006c40 <_strtol_l.constprop.0+0xe8>
 8006c3e:	1e69      	subs	r1, r5, #1
 8006c40:	6011      	str	r1, [r2, #0]
 8006c42:	e7f3      	b.n	8006c2c <_strtol_l.constprop.0+0xd4>
 8006c44:	2430      	movs	r4, #48	; 0x30
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1b1      	bne.n	8006bae <_strtol_l.constprop.0+0x56>
 8006c4a:	2308      	movs	r3, #8
 8006c4c:	e7af      	b.n	8006bae <_strtol_l.constprop.0+0x56>
 8006c4e:	2c30      	cmp	r4, #48	; 0x30
 8006c50:	d0a5      	beq.n	8006b9e <_strtol_l.constprop.0+0x46>
 8006c52:	230a      	movs	r3, #10
 8006c54:	e7ab      	b.n	8006bae <_strtol_l.constprop.0+0x56>
 8006c56:	bf00      	nop
 8006c58:	08006edf 	.word	0x08006edf

08006c5c <_strtol_r>:
 8006c5c:	f7ff bf7c 	b.w	8006b58 <_strtol_l.constprop.0>

08006c60 <_strtoul_l.constprop.0>:
 8006c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c64:	4f36      	ldr	r7, [pc, #216]	; (8006d40 <_strtoul_l.constprop.0+0xe0>)
 8006c66:	4686      	mov	lr, r0
 8006c68:	460d      	mov	r5, r1
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c70:	5d3e      	ldrb	r6, [r7, r4]
 8006c72:	f016 0608 	ands.w	r6, r6, #8
 8006c76:	d1f8      	bne.n	8006c6a <_strtoul_l.constprop.0+0xa>
 8006c78:	2c2d      	cmp	r4, #45	; 0x2d
 8006c7a:	d130      	bne.n	8006cde <_strtoul_l.constprop.0+0x7e>
 8006c7c:	782c      	ldrb	r4, [r5, #0]
 8006c7e:	2601      	movs	r6, #1
 8006c80:	1c85      	adds	r5, r0, #2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d057      	beq.n	8006d36 <_strtoul_l.constprop.0+0xd6>
 8006c86:	2b10      	cmp	r3, #16
 8006c88:	d109      	bne.n	8006c9e <_strtoul_l.constprop.0+0x3e>
 8006c8a:	2c30      	cmp	r4, #48	; 0x30
 8006c8c:	d107      	bne.n	8006c9e <_strtoul_l.constprop.0+0x3e>
 8006c8e:	7828      	ldrb	r0, [r5, #0]
 8006c90:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006c94:	2858      	cmp	r0, #88	; 0x58
 8006c96:	d149      	bne.n	8006d2c <_strtoul_l.constprop.0+0xcc>
 8006c98:	786c      	ldrb	r4, [r5, #1]
 8006c9a:	2310      	movs	r3, #16
 8006c9c:	3502      	adds	r5, #2
 8006c9e:	f04f 38ff 	mov.w	r8, #4294967295
 8006ca2:	2700      	movs	r7, #0
 8006ca4:	fbb8 f8f3 	udiv	r8, r8, r3
 8006ca8:	fb03 f908 	mul.w	r9, r3, r8
 8006cac:	ea6f 0909 	mvn.w	r9, r9
 8006cb0:	4638      	mov	r0, r7
 8006cb2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006cb6:	f1bc 0f09 	cmp.w	ip, #9
 8006cba:	d815      	bhi.n	8006ce8 <_strtoul_l.constprop.0+0x88>
 8006cbc:	4664      	mov	r4, ip
 8006cbe:	42a3      	cmp	r3, r4
 8006cc0:	dd23      	ble.n	8006d0a <_strtoul_l.constprop.0+0xaa>
 8006cc2:	f1b7 3fff 	cmp.w	r7, #4294967295
 8006cc6:	d007      	beq.n	8006cd8 <_strtoul_l.constprop.0+0x78>
 8006cc8:	4580      	cmp	r8, r0
 8006cca:	d31b      	bcc.n	8006d04 <_strtoul_l.constprop.0+0xa4>
 8006ccc:	d101      	bne.n	8006cd2 <_strtoul_l.constprop.0+0x72>
 8006cce:	45a1      	cmp	r9, r4
 8006cd0:	db18      	blt.n	8006d04 <_strtoul_l.constprop.0+0xa4>
 8006cd2:	fb00 4003 	mla	r0, r0, r3, r4
 8006cd6:	2701      	movs	r7, #1
 8006cd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006cdc:	e7e9      	b.n	8006cb2 <_strtoul_l.constprop.0+0x52>
 8006cde:	2c2b      	cmp	r4, #43	; 0x2b
 8006ce0:	bf04      	itt	eq
 8006ce2:	782c      	ldrbeq	r4, [r5, #0]
 8006ce4:	1c85      	addeq	r5, r0, #2
 8006ce6:	e7cc      	b.n	8006c82 <_strtoul_l.constprop.0+0x22>
 8006ce8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006cec:	f1bc 0f19 	cmp.w	ip, #25
 8006cf0:	d801      	bhi.n	8006cf6 <_strtoul_l.constprop.0+0x96>
 8006cf2:	3c37      	subs	r4, #55	; 0x37
 8006cf4:	e7e3      	b.n	8006cbe <_strtoul_l.constprop.0+0x5e>
 8006cf6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006cfa:	f1bc 0f19 	cmp.w	ip, #25
 8006cfe:	d804      	bhi.n	8006d0a <_strtoul_l.constprop.0+0xaa>
 8006d00:	3c57      	subs	r4, #87	; 0x57
 8006d02:	e7dc      	b.n	8006cbe <_strtoul_l.constprop.0+0x5e>
 8006d04:	f04f 37ff 	mov.w	r7, #4294967295
 8006d08:	e7e6      	b.n	8006cd8 <_strtoul_l.constprop.0+0x78>
 8006d0a:	1c7b      	adds	r3, r7, #1
 8006d0c:	d106      	bne.n	8006d1c <_strtoul_l.constprop.0+0xbc>
 8006d0e:	2322      	movs	r3, #34	; 0x22
 8006d10:	f8ce 3000 	str.w	r3, [lr]
 8006d14:	4638      	mov	r0, r7
 8006d16:	b932      	cbnz	r2, 8006d26 <_strtoul_l.constprop.0+0xc6>
 8006d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d1c:	b106      	cbz	r6, 8006d20 <_strtoul_l.constprop.0+0xc0>
 8006d1e:	4240      	negs	r0, r0
 8006d20:	2a00      	cmp	r2, #0
 8006d22:	d0f9      	beq.n	8006d18 <_strtoul_l.constprop.0+0xb8>
 8006d24:	b107      	cbz	r7, 8006d28 <_strtoul_l.constprop.0+0xc8>
 8006d26:	1e69      	subs	r1, r5, #1
 8006d28:	6011      	str	r1, [r2, #0]
 8006d2a:	e7f5      	b.n	8006d18 <_strtoul_l.constprop.0+0xb8>
 8006d2c:	2430      	movs	r4, #48	; 0x30
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1b5      	bne.n	8006c9e <_strtoul_l.constprop.0+0x3e>
 8006d32:	2308      	movs	r3, #8
 8006d34:	e7b3      	b.n	8006c9e <_strtoul_l.constprop.0+0x3e>
 8006d36:	2c30      	cmp	r4, #48	; 0x30
 8006d38:	d0a9      	beq.n	8006c8e <_strtoul_l.constprop.0+0x2e>
 8006d3a:	230a      	movs	r3, #10
 8006d3c:	e7af      	b.n	8006c9e <_strtoul_l.constprop.0+0x3e>
 8006d3e:	bf00      	nop
 8006d40:	08006edf 	.word	0x08006edf

08006d44 <_strtoul_r>:
 8006d44:	f7ff bf8c 	b.w	8006c60 <_strtoul_l.constprop.0>

08006d48 <_malloc_usable_size_r>:
 8006d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d4c:	1f18      	subs	r0, r3, #4
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	bfbc      	itt	lt
 8006d52:	580b      	ldrlt	r3, [r1, r0]
 8006d54:	18c0      	addlt	r0, r0, r3
 8006d56:	4770      	bx	lr

08006d58 <round>:
 8006d58:	ec53 2b10 	vmov	r2, r3, d0
 8006d5c:	b570      	push	{r4, r5, r6, lr}
 8006d5e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8006d62:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8006d66:	2813      	cmp	r0, #19
 8006d68:	ee10 5a10 	vmov	r5, s0
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	dc18      	bgt.n	8006da2 <round+0x4a>
 8006d70:	2800      	cmp	r0, #0
 8006d72:	da09      	bge.n	8006d88 <round+0x30>
 8006d74:	3001      	adds	r0, #1
 8006d76:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8006d7a:	d103      	bne.n	8006d84 <round+0x2c>
 8006d7c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8006d80:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006d84:	2300      	movs	r3, #0
 8006d86:	e02a      	b.n	8006dde <round+0x86>
 8006d88:	4c16      	ldr	r4, [pc, #88]	; (8006de4 <round+0x8c>)
 8006d8a:	4104      	asrs	r4, r0
 8006d8c:	ea03 0604 	and.w	r6, r3, r4
 8006d90:	4316      	orrs	r6, r2
 8006d92:	d011      	beq.n	8006db8 <round+0x60>
 8006d94:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006d98:	4103      	asrs	r3, r0
 8006d9a:	440b      	add	r3, r1
 8006d9c:	ea23 0104 	bic.w	r1, r3, r4
 8006da0:	e7f0      	b.n	8006d84 <round+0x2c>
 8006da2:	2833      	cmp	r0, #51	; 0x33
 8006da4:	dd0b      	ble.n	8006dbe <round+0x66>
 8006da6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006daa:	d105      	bne.n	8006db8 <round+0x60>
 8006dac:	ee10 0a10 	vmov	r0, s0
 8006db0:	f7f9 fa94 	bl	80002dc <__adddf3>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	ec43 2b10 	vmov	d0, r2, r3
 8006dbc:	bd70      	pop	{r4, r5, r6, pc}
 8006dbe:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8006dc2:	f04f 34ff 	mov.w	r4, #4294967295
 8006dc6:	40f4      	lsrs	r4, r6
 8006dc8:	4214      	tst	r4, r2
 8006dca:	d0f5      	beq.n	8006db8 <round+0x60>
 8006dcc:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	4083      	lsls	r3, r0
 8006dd4:	195b      	adds	r3, r3, r5
 8006dd6:	bf28      	it	cs
 8006dd8:	3101      	addcs	r1, #1
 8006dda:	ea23 0304 	bic.w	r3, r3, r4
 8006dde:	461a      	mov	r2, r3
 8006de0:	460b      	mov	r3, r1
 8006de2:	e7e9      	b.n	8006db8 <round+0x60>
 8006de4:	000fffff 	.word	0x000fffff

08006de8 <_init>:
 8006de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dea:	bf00      	nop
 8006dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dee:	bc08      	pop	{r3}
 8006df0:	469e      	mov	lr, r3
 8006df2:	4770      	bx	lr

08006df4 <_fini>:
 8006df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df6:	bf00      	nop
 8006df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dfa:	bc08      	pop	{r3}
 8006dfc:	469e      	mov	lr, r3
 8006dfe:	4770      	bx	lr
