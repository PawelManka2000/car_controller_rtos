
robot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2a8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0800d488  0800d488  0000e488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9f4  0800d9f4  0000f1d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9f4  0800d9f4  0000e9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9fc  0800d9fc  0000f1d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9fc  0800d9fc  0000e9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da00  0800da00  0000ea00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800da04  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  200001d0  0800dbd4  0000f1d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000081c  0800dbd4  0000f81c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d121  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000425b  00000000  00000000  0002c321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  00030580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010f0  00000000  00000000  00031b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296ef  00000000  00000000  00032c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e108  00000000  00000000  0005c357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105f8b  00000000  00000000  0007a45f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001803ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007098  00000000  00000000  00180430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001874c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d0 	.word	0x200001d0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d470 	.word	0x0800d470

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d4 	.word	0x200001d4
 800021c:	0800d470 	.word	0x0800d470

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	@ 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	2238      	movs	r2, #56	@ 0x38
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f008 fa2f 	bl	80094a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001056:	2000      	movs	r0, #0
 8001058:	f002 f93c 	bl	80032d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800105c:	2302      	movs	r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001060:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001066:	2340      	movs	r3, #64	@ 0x40
 8001068:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106a:	2302      	movs	r3, #2
 800106c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800106e:	2302      	movs	r3, #2
 8001070:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001072:	2304      	movs	r3, #4
 8001074:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001076:	2355      	movs	r3, #85	@ 0x55
 8001078:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800107a:	2302      	movs	r3, #2
 800107c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800107e:	2302      	movs	r3, #2
 8001080:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001082:	2302      	movs	r3, #2
 8001084:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	4618      	mov	r0, r3
 800108c:	f002 f9d6 	bl	800343c <HAL_RCC_OscConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001096:	f001 f9e5 	bl	8002464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109a:	230f      	movs	r3, #15
 800109c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109e:	2303      	movs	r3, #3
 80010a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2104      	movs	r1, #4
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 fcd4 	bl	8003a60 <HAL_RCC_ClockConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010be:	f001 f9d1 	bl	8002464 <Error_Handler>
  }
}
 80010c2:	bf00      	nop
 80010c4:	3750      	adds	r7, #80	@ 0x50
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <MX_GPIO_Init>:

#include "gpio_configuration.h"


void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b2f      	ldr	r3, [pc, #188]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a2e      	ldr	r2, [pc, #184]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b2c      	ldr	r3, [pc, #176]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010fa:	4b29      	ldr	r3, [pc, #164]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a28      	ldr	r2, [pc, #160]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001100:	f043 0320 	orr.w	r3, r3, #32
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b26      	ldr	r3, [pc, #152]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0320 	and.w	r3, r3, #32
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b23      	ldr	r3, [pc, #140]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a22      	ldr	r2, [pc, #136]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a1c      	ldr	r2, [pc, #112]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2123      	movs	r1, #35	@ 0x23
 8001146:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800114a:	f002 f8ab 	bl	80032a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800114e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001154:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	480f      	ldr	r0, [pc, #60]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001166:	f001 ff1b 	bl	8002fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin;
 800116a:	2323      	movs	r3, #35	@ 0x23
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001184:	f001 ff0c 	bl	8002fa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	2028      	movs	r0, #40	@ 0x28
 800118e:	f001 fe1f 	bl	8002dd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001192:	2028      	movs	r0, #40	@ 0x28
 8001194:	f001 fe36 	bl	8002e04 <HAL_NVIC_EnableIRQ>

}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	@ 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48000800 	.word	0x48000800

080011a8 <MX_TIM1_Init>:




void MX_TIM1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b09c      	sub	sp, #112	@ 0x70
 80011ac:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ae:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
 80011d8:	615a      	str	r2, [r3, #20]
 80011da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	2234      	movs	r2, #52	@ 0x34
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f008 f95f 	bl	80094a6 <memset>

  htim1.Instance = TIM1;
 80011e8:	4b57      	ldr	r3, [pc, #348]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 80011ea:	4a58      	ldr	r2, [pc, #352]	@ (800134c <MX_TIM1_Init+0x1a4>)
 80011ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170000-1;
 80011ee:	4b56      	ldr	r3, [pc, #344]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 80011f0:	4a57      	ldr	r2, [pc, #348]	@ (8001350 <MX_TIM1_Init+0x1a8>)
 80011f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f4:	4b54      	ldr	r3, [pc, #336]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80011fa:	4b53      	ldr	r3, [pc, #332]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 80011fc:	2263      	movs	r2, #99	@ 0x63
 80011fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001200:	4b51      	ldr	r3, [pc, #324]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001206:	4b50      	ldr	r3, [pc, #320]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120c:	4b4e      	ldr	r3, [pc, #312]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001212:	484d      	ldr	r0, [pc, #308]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 8001214:	f003 f8c0 	bl	8004398 <HAL_TIM_Base_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800121e:	f001 f921 	bl	8002464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001222:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001226:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001228:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800122c:	4619      	mov	r1, r3
 800122e:	4846      	ldr	r0, [pc, #280]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 8001230:	f003 fefe 	bl	8005030 <HAL_TIM_ConfigClockSource>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800123a:	f001 f913 	bl	8002464 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800123e:	4842      	ldr	r0, [pc, #264]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 8001240:	f003 f9ea 	bl	8004618 <HAL_TIM_PWM_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800124a:	f001 f90b 	bl	8002464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800125a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800125e:	4619      	mov	r1, r3
 8001260:	4839      	ldr	r0, [pc, #228]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 8001262:	f004 fcc3 	bl	8005bec <HAL_TIMEx_MasterConfigSynchronization>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800126c:	f001 f8fa 	bl	8002464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001270:	2360      	movs	r3, #96	@ 0x60
 8001272:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001278:	2300      	movs	r3, #0
 800127a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800127c:	2300      	movs	r3, #0
 800127e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800128c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001290:	2200      	movs	r2, #0
 8001292:	4619      	mov	r1, r3
 8001294:	482c      	ldr	r0, [pc, #176]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 8001296:	f003 fdb7 	bl	8004e08 <HAL_TIM_PWM_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80012a0:	f001 f8e0 	bl	8002464 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012a8:	2204      	movs	r2, #4
 80012aa:	4619      	mov	r1, r3
 80012ac:	4826      	ldr	r0, [pc, #152]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 80012ae:	f003 fdab 	bl	8004e08 <HAL_TIM_PWM_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80012b8:	f001 f8d4 	bl	8002464 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012c0:	2208      	movs	r2, #8
 80012c2:	4619      	mov	r1, r3
 80012c4:	4820      	ldr	r0, [pc, #128]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 80012c6:	f003 fd9f 	bl	8004e08 <HAL_TIM_PWM_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80012d0:	f001 f8c8 	bl	8002464 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012d8:	220c      	movs	r2, #12
 80012da:	4619      	mov	r1, r3
 80012dc:	481a      	ldr	r0, [pc, #104]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 80012de:	f003 fd93 	bl	8004e08 <HAL_TIM_PWM_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80012e8:	f001 f8bc 	bl	8002464 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001300:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001304:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001312:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001316:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800131c:	2300      	movs	r3, #0
 800131e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	4619      	mov	r1, r3
 8001328:	4807      	ldr	r0, [pc, #28]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 800132a:	f004 fcf5 	bl	8005d18 <HAL_TIMEx_ConfigBreakDeadTime>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8001334:	f001 f896 	bl	8002464 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8001338:	4803      	ldr	r0, [pc, #12]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 800133a:	f001 fa8d 	bl	8002858 <HAL_TIM_MspPostInit>

}
 800133e:	bf00      	nop
 8001340:	3770      	adds	r7, #112	@ 0x70
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200001ec 	.word	0x200001ec
 800134c:	40012c00 	.word	0x40012c00
 8001350:	0002980f 	.word	0x0002980f

08001354 <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08c      	sub	sp, #48	@ 0x30
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	2224      	movs	r2, #36	@ 0x24
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f008 f89f 	bl	80094a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	463b      	mov	r3, r7
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001372:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 8001374:	4a21      	ldr	r2, [pc, #132]	@ (80013fc <MX_TIM3_Init+0xa8>)
 8001376:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001378:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 800137a:	2200      	movs	r2, #0
 800137c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137e:	4b1e      	ldr	r3, [pc, #120]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001384:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 8001386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800138a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138c:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001398:	2303      	movs	r3, #3
 800139a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800139c:	2300      	movs	r3, #0
 800139e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013a0:	2301      	movs	r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013b0:	2301      	movs	r3, #1
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	4619      	mov	r1, r3
 80013c2:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 80013c4:	f003 fa9c 	bl	8004900 <HAL_TIM_Encoder_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80013ce:	f001 f849 	bl	8002464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013da:	463b      	mov	r3, r7
 80013dc:	4619      	mov	r1, r3
 80013de:	4806      	ldr	r0, [pc, #24]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 80013e0:	f004 fc04 	bl	8005bec <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80013ea:	f001 f83b 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	3730      	adds	r7, #48	@ 0x30
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000238 	.word	0x20000238
 80013fc:	40000400 	.word	0x40000400

08001400 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	@ 0x30
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	2224      	movs	r2, #36	@ 0x24
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f008 f849 	bl	80094a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001414:	463b      	mov	r3, r7
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800141e:	4b21      	ldr	r3, [pc, #132]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 8001420:	4a21      	ldr	r2, [pc, #132]	@ (80014a8 <MX_TIM4_Init+0xa8>)
 8001422:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001424:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 8001426:	2200      	movs	r2, #0
 8001428:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142a:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001430:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 8001432:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001436:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001438:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800143e:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 8001440:	2280      	movs	r2, #128	@ 0x80
 8001442:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001444:	2303      	movs	r3, #3
 8001446:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800144c:	2301      	movs	r3, #1
 800144e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001454:	230a      	movs	r3, #10
 8001456:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800145c:	2301      	movs	r3, #1
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 8001470:	f003 fa46 	bl	8004900 <HAL_TIM_Encoder_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800147a:	f000 fff3 	bl	8002464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001486:	463b      	mov	r3, r7
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 800148c:	f004 fbae 	bl	8005bec <HAL_TIMEx_MasterConfigSynchronization>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001496:	f000 ffe5 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	3730      	adds	r7, #48	@ 0x30
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000284 	.word	0x20000284
 80014a8:	40000800 	.word	0x40000800

080014ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	@ 0x30
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	2224      	movs	r2, #36	@ 0x24
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f007 fff3 	bl	80094a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	463b      	mov	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014ca:	4b21      	ldr	r3, [pc, #132]	@ (8001550 <MX_TIM5_Init+0xa4>)
 80014cc:	4a21      	ldr	r2, [pc, #132]	@ (8001554 <MX_TIM5_Init+0xa8>)
 80014ce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001550 <MX_TIM5_Init+0xa4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001550 <MX_TIM5_Init+0xa4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 80014dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001550 <MX_TIM5_Init+0xa4>)
 80014de:	f04f 32ff 	mov.w	r2, #4294967295
 80014e2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <MX_TIM5_Init+0xa4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ea:	4b19      	ldr	r3, [pc, #100]	@ (8001550 <MX_TIM5_Init+0xa4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014f0:	2303      	movs	r3, #3
 80014f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014f4:	2300      	movs	r3, #0
 80014f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014f8:	2301      	movs	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001508:	2301      	movs	r3, #1
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	4619      	mov	r1, r3
 800151a:	480d      	ldr	r0, [pc, #52]	@ (8001550 <MX_TIM5_Init+0xa4>)
 800151c:	f003 f9f0 	bl	8004900 <HAL_TIM_Encoder_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001526:	f000 ff9d 	bl	8002464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001532:	463b      	mov	r3, r7
 8001534:	4619      	mov	r1, r3
 8001536:	4806      	ldr	r0, [pc, #24]	@ (8001550 <MX_TIM5_Init+0xa4>)
 8001538:	f004 fb58 	bl	8005bec <HAL_TIMEx_MasterConfigSynchronization>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001542:	f000 ff8f 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	3730      	adds	r7, #48	@ 0x30
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200002d0 	.word	0x200002d0
 8001554:	40000c00 	.word	0x40000c00

08001558 <MX_TIM7_Init>:

void MX_TIM7_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001568:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_TIM7_Init+0x64>)
 800156a:	4a15      	ldr	r2, [pc, #84]	@ (80015c0 <MX_TIM7_Init+0x68>)
 800156c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170-1;
 800156e:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <MX_TIM7_Init+0x64>)
 8001570:	22a9      	movs	r2, #169	@ 0xa9
 8001572:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <MX_TIM7_Init+0x64>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50000;
 800157a:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <MX_TIM7_Init+0x64>)
 800157c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001580:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001582:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <MX_TIM7_Init+0x64>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001588:	480c      	ldr	r0, [pc, #48]	@ (80015bc <MX_TIM7_Init+0x64>)
 800158a:	f002 ff05 	bl	8004398 <HAL_TIM_Base_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001594:	f000 ff66 	bl	8002464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	@ (80015bc <MX_TIM7_Init+0x64>)
 80015a6:	f004 fb21 	bl	8005bec <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80015b0:	f000 ff58 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	2000031c 	.word	0x2000031c
 80015c0:	40001400 	.word	0x40001400

080015c4 <MX_TIM8_Init>:

void MX_TIM8_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	@ 0x30
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	2224      	movs	r2, #36	@ 0x24
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f007 ff67 	bl	80094a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	463b      	mov	r3, r7
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015e2:	4b23      	ldr	r3, [pc, #140]	@ (8001670 <MX_TIM8_Init+0xac>)
 80015e4:	4a23      	ldr	r2, [pc, #140]	@ (8001674 <MX_TIM8_Init+0xb0>)
 80015e6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015e8:	4b21      	ldr	r3, [pc, #132]	@ (8001670 <MX_TIM8_Init+0xac>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ee:	4b20      	ldr	r3, [pc, #128]	@ (8001670 <MX_TIM8_Init+0xac>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80015f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <MX_TIM8_Init+0xac>)
 80015f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015fa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <MX_TIM8_Init+0xac>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001602:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <MX_TIM8_Init+0xac>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001608:	4b19      	ldr	r3, [pc, #100]	@ (8001670 <MX_TIM8_Init+0xac>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800160e:	2303      	movs	r3, #3
 8001610:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001616:	2301      	movs	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001626:	2301      	movs	r3, #1
 8001628:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	4619      	mov	r1, r3
 8001638:	480d      	ldr	r0, [pc, #52]	@ (8001670 <MX_TIM8_Init+0xac>)
 800163a:	f003 f961 	bl	8004900 <HAL_TIM_Encoder_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001644:	f000 ff0e 	bl	8002464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001654:	463b      	mov	r3, r7
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_TIM8_Init+0xac>)
 800165a:	f004 fac7 	bl	8005bec <HAL_TIMEx_MasterConfigSynchronization>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001664:	f000 fefe 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	3730      	adds	r7, #48	@ 0x30
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000368 	.word	0x20000368
 8001674:	40013400 	.word	0x40013400

08001678 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800167c:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 800167e:	4a22      	ldr	r2, [pc, #136]	@ (8001708 <MX_LPUART1_UART_Init+0x90>)
 8001680:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001682:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 8001684:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001688:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b1e      	ldr	r3, [pc, #120]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b1c      	ldr	r3, [pc, #112]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001696:	4b1b      	ldr	r3, [pc, #108]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a8:	4b16      	ldr	r3, [pc, #88]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b4:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016ba:	4812      	ldr	r0, [pc, #72]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016bc:	f004 fc06 	bl	8005ecc <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80016c6:	f000 fecd 	bl	8002464 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ca:	2100      	movs	r1, #0
 80016cc:	480d      	ldr	r0, [pc, #52]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016ce:	f006 fc5e 	bl	8007f8e <HAL_UARTEx_SetTxFifoThreshold>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80016d8:	f000 fec4 	bl	8002464 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016dc:	2100      	movs	r1, #0
 80016de:	4809      	ldr	r0, [pc, #36]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016e0:	f006 fc93 	bl	800800a <HAL_UARTEx_SetRxFifoThreshold>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80016ea:	f000 febb 	bl	8002464 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016f0:	f006 fc14 	bl	8007f1c <HAL_UARTEx_DisableFifoMode>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80016fa:	f000 feb3 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000448 	.word	0x20000448
 8001708:	40008000 	.word	0x40008000

0800170c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001710:	4b22      	ldr	r3, [pc, #136]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001712:	4a23      	ldr	r2, [pc, #140]	@ (80017a0 <MX_USART1_UART_Init+0x94>)
 8001714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001716:	4b21      	ldr	r3, [pc, #132]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b1f      	ldr	r3, [pc, #124]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800172a:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <MX_USART1_UART_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b19      	ldr	r3, [pc, #100]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b17      	ldr	r3, [pc, #92]	@ (800179c <MX_USART1_UART_Init+0x90>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001742:	4b16      	ldr	r3, [pc, #88]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001748:	4b14      	ldr	r3, [pc, #80]	@ (800179c <MX_USART1_UART_Init+0x90>)
 800174a:	2200      	movs	r2, #0
 800174c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800174e:	4b13      	ldr	r3, [pc, #76]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001754:	4811      	ldr	r0, [pc, #68]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001756:	f004 fbb9 	bl	8005ecc <HAL_UART_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001760:	f000 fe80 	bl	8002464 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001764:	2100      	movs	r1, #0
 8001766:	480d      	ldr	r0, [pc, #52]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001768:	f006 fc11 	bl	8007f8e <HAL_UARTEx_SetTxFifoThreshold>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001772:	f000 fe77 	bl	8002464 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001776:	2100      	movs	r1, #0
 8001778:	4808      	ldr	r0, [pc, #32]	@ (800179c <MX_USART1_UART_Init+0x90>)
 800177a:	f006 fc46 	bl	800800a <HAL_UARTEx_SetRxFifoThreshold>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001784:	f000 fe6e 	bl	8002464 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001788:	4804      	ldr	r0, [pc, #16]	@ (800179c <MX_USART1_UART_Init+0x90>)
 800178a:	f006 fbc7 	bl	8007f1c <HAL_UARTEx_DisableFifoMode>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001794:	f000 fe66 	bl	8002464 <Error_Handler>
  }

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200003b4 	.word	0x200003b4
 80017a0:	40013800 	.word	0x40013800

080017a4 <L298N_init>:
				TIM_HandleTypeDef* pwm_timer_,
				GPIO_TypeDef* GPIOx_1_,
				uint16_t GPIO_Pin_1_,
				GPIO_TypeDef* GPIOx_2_,
				uint16_t GPIO_Pin_2_)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
 80017b0:	603b      	str	r3, [r7, #0]
	L298N_driver->PWM_count = 0;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	721a      	strb	r2, [r3, #8]
	L298N_driver->pwm_timer = pwm_timer_;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	605a      	str	r2, [r3, #4]
	L298N_driver->pwm_channel=pwm_channel_;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	601a      	str	r2, [r3, #0]
	L298N_driver->GPIOx_1 =GPIOx_1_;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	60da      	str	r2, [r3, #12]
	L298N_driver->GPIO_Pin_1 = GPIO_Pin_1_;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8b3a      	ldrh	r2, [r7, #24]
 80017ce:	821a      	strh	r2, [r3, #16]
	L298N_driver->GPIOx_2 = GPIOx_2_;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	615a      	str	r2, [r3, #20]
	L298N_driver->GPIO_Pin_2 = GPIO_Pin_2_;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8c3a      	ldrh	r2, [r7, #32]
 80017da:	831a      	strh	r2, [r3, #24]

}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <L298N_update_pwm>:


void L298N_update_pwm(L298N_driver* L298_driver, uint8_t new_pwm_count)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	70fb      	strb	r3, [r7, #3]
	L298_driver->PWM_count = new_pwm_count;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	78fa      	ldrb	r2, [r7, #3]
 80017f8:	721a      	strb	r2, [r3, #8]
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d106      	bne.n	8001810 <L298N_update_pwm+0x28>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7a1a      	ldrb	r2, [r3, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	635a      	str	r2, [r3, #52]	@ 0x34

}
 800180e:	e036      	b.n	800187e <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b04      	cmp	r3, #4
 8001816:	d107      	bne.n	8001828 <L298N_update_pwm+0x40>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	7a19      	ldrb	r1, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	460b      	mov	r3, r1
 8001824:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001826:	e02a      	b.n	800187e <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b08      	cmp	r3, #8
 800182e:	d107      	bne.n	8001840 <L298N_update_pwm+0x58>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7a19      	ldrb	r1, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	460b      	mov	r3, r1
 800183c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800183e:	e01e      	b.n	800187e <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b0c      	cmp	r3, #12
 8001846:	d107      	bne.n	8001858 <L298N_update_pwm+0x70>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	7a19      	ldrb	r1, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	460b      	mov	r3, r1
 8001854:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001856:	e012      	b.n	800187e <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b10      	cmp	r3, #16
 800185e:	d107      	bne.n	8001870 <L298N_update_pwm+0x88>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	7a19      	ldrb	r1, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	460b      	mov	r3, r1
 800186c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800186e:	e006      	b.n	800187e <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->PWM_count);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7a19      	ldrb	r1, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	460b      	mov	r3, r1
 800187c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <L298N_set_input_configuration>:


void L298N_set_input_configuration(L298N_driver* L298_driver, E_L298N_MODE l298n_mode)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	460b      	mov	r3, r1
 8001894:	70fb      	strb	r3, [r7, #3]

	if(l298n_mode == BACKWARD)
 8001896:	78fb      	ldrb	r3, [r7, #3]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d110      	bne.n	80018be <L298N_set_input_configuration+0x34>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_SET);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68d8      	ldr	r0, [r3, #12]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	8a1b      	ldrh	r3, [r3, #16]
 80018a4:	2201      	movs	r2, #1
 80018a6:	4619      	mov	r1, r3
 80018a8:	f001 fcfc 	bl	80032a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6958      	ldr	r0, [r3, #20]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	8b1b      	ldrh	r3, [r3, #24]
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	f001 fcf4 	bl	80032a4 <HAL_GPIO_WritePin>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
	}

}
 80018bc:	e026      	b.n	800190c <L298N_set_input_configuration+0x82>
	}else if(l298n_mode == FORWARD)
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d110      	bne.n	80018e6 <L298N_set_input_configuration+0x5c>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68d8      	ldr	r0, [r3, #12]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	8a1b      	ldrh	r3, [r3, #16]
 80018cc:	2200      	movs	r2, #0
 80018ce:	4619      	mov	r1, r3
 80018d0:	f001 fce8 	bl	80032a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_SET);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6958      	ldr	r0, [r3, #20]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	8b1b      	ldrh	r3, [r3, #24]
 80018dc:	2201      	movs	r2, #1
 80018de:	4619      	mov	r1, r3
 80018e0:	f001 fce0 	bl	80032a4 <HAL_GPIO_WritePin>
}
 80018e4:	e012      	b.n	800190c <L298N_set_input_configuration+0x82>
	else if(l298n_mode == STOP)
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10f      	bne.n	800190c <L298N_set_input_configuration+0x82>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68d8      	ldr	r0, [r3, #12]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	8a1b      	ldrh	r3, [r3, #16]
 80018f4:	2200      	movs	r2, #0
 80018f6:	4619      	mov	r1, r3
 80018f8:	f001 fcd4 	bl	80032a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6958      	ldr	r0, [r3, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	8b1b      	ldrh	r3, [r3, #24]
 8001904:	2200      	movs	r2, #0
 8001906:	4619      	mov	r1, r3
 8001908:	f001 fccc 	bl	80032a4 <HAL_GPIO_WritePin>
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <init_driving_system>:
static char states_buffer[80];
static void add_state_to_states_buffer(MotorState* motor_state);


void init_driving_system(DrivingSystem* driving_system, MotorStruct* lb_motor, MotorStruct* lf_motor, MotorStruct* rb_motor, MotorStruct* rf_motor)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	603b      	str	r3, [r7, #0]

	driving_system->left_motors_lst[0] = lb_motor;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	601a      	str	r2, [r3, #0]
	driving_system->left_motors_lst[1] = lf_motor;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	605a      	str	r2, [r3, #4]
	driving_system->right_motors_lst[0] = rb_motor;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	609a      	str	r2, [r3, #8]
	driving_system->right_motors_lst[1] = rf_motor;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	60da      	str	r2, [r3, #12]
}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <default_init_driving_system_if>:

void default_init_driving_system_if(DrivingSystemIface* drv_system_if){
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

	drv_system_if->exe_cmd = execute_cmd;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a05      	ldr	r2, [pc, #20]	@ (8001968 <default_init_driving_system_if+0x20>)
 8001954:	601a      	str	r2, [r3, #0]
	drv_system_if->send_state = send_state;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a04      	ldr	r2, [pc, #16]	@ (800196c <default_init_driving_system_if+0x24>)
 800195a:	605a      	str	r2, [r3, #4]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	08001971 	.word	0x08001971
 800196c:	08001b21 	.word	0x08001b21

08001970 <execute_cmd>:
//		L298N_update_pwm(driving_system->right_motors_lst[i]->L298N_driver, )
	}
}


void execute_cmd(DrivingSystem* driving_system, uint8_t* cmd){
 8001970:	b5b0      	push	{r4, r5, r7, lr}
 8001972:	b08e      	sub	sp, #56	@ 0x38
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]


	uint8_t cmd_code[] = "00";
 800197a:	4a31      	ldr	r2, [pc, #196]	@ (8001a40 <execute_cmd+0xd0>)
 800197c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	4611      	mov	r1, r2
 8001984:	8019      	strh	r1, [r3, #0]
 8001986:	3302      	adds	r3, #2
 8001988:	0c12      	lsrs	r2, r2, #16
 800198a:	701a      	strb	r2, [r3, #0]
	uint8_t payload[] = "000000";
 800198c:	4a2d      	ldr	r2, [pc, #180]	@ (8001a44 <execute_cmd+0xd4>)
 800198e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001992:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001996:	6018      	str	r0, [r3, #0]
 8001998:	3304      	adds	r3, #4
 800199a:	8019      	strh	r1, [r3, #0]
 800199c:	3302      	adds	r3, #2
 800199e:	0c0a      	lsrs	r2, r1, #16
 80019a0:	701a      	strb	r2, [r3, #0]

	parse_cmd_code(cmd, cmd_code);
 80019a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80019a6:	4619      	mov	r1, r3
 80019a8:	6838      	ldr	r0, [r7, #0]
 80019aa:	f000 fb59 	bl	8002060 <parse_cmd_code>
	parse_payload(cmd, payload);
 80019ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019b2:	4619      	mov	r1, r3
 80019b4:	6838      	ldr	r0, [r7, #0]
 80019b6:	f000 fb89 	bl	80020cc <parse_payload>


	if(cmd_code[CMD_ID_POS] == 1)
 80019ba:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d103      	bne.n	80019ca <execute_cmd+0x5a>
	{
		send_state(driving_system);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f8ac 	bl	8001b20 <send_state>
	}
	else{
		uint8_t msg[] = "Undefined First Cmd Literall";
		send_drv_err(msg);
	}
}
 80019c8:	e035      	b.n	8001a36 <execute_cmd+0xc6>
	}else if(cmd_code[CMD_ID_POS] == CMD_ID_CTRL_VELO_REQ)
 80019ca:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d11a      	bne.n	8001a08 <execute_cmd+0x98>
	    float vel = 0;
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	    sscanf(payload, "%f", &vel);
 80019d8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80019dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019e0:	4919      	ldr	r1, [pc, #100]	@ (8001a48 <execute_cmd+0xd8>)
 80019e2:	4618      	mov	r0, r3
 80019e4:	f007 fcf0 	bl	80093c8 <siscanf>
		if(cmd_code[DV_MODE_POS] == 1)
 80019e8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d103      	bne.n	80019f8 <execute_cmd+0x88>
			send_state(driving_system);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f895 	bl	8001b20 <send_state>
}
 80019f6:	e01e      	b.n	8001a36 <execute_cmd+0xc6>
		}else if(cmd_code[DV_MODE_POS] == 2)
 80019f8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d11a      	bne.n	8001a36 <execute_cmd+0xc6>
			send_drv_err("Backward not implemented");
 8001a00:	4812      	ldr	r0, [pc, #72]	@ (8001a4c <execute_cmd+0xdc>)
 8001a02:	f000 f829 	bl	8001a58 <send_drv_err>
}
 8001a06:	e016      	b.n	8001a36 <execute_cmd+0xc6>
	}else if(cmd_code[CMD_ID_POS] == 3){
 8001a08:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d103      	bne.n	8001a18 <execute_cmd+0xa8>
		send_drv_err("PWM Mode unimplemented");
 8001a10:	480f      	ldr	r0, [pc, #60]	@ (8001a50 <execute_cmd+0xe0>)
 8001a12:	f000 f821 	bl	8001a58 <send_drv_err>
}
 8001a16:	e00e      	b.n	8001a36 <execute_cmd+0xc6>
		uint8_t msg[] = "Undefined First Cmd Literall";
 8001a18:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <execute_cmd+0xe4>)
 8001a1a:	f107 0408 	add.w	r4, r7, #8
 8001a1e:	461d      	mov	r5, r3
 8001a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a24:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a28:	c407      	stmia	r4!, {r0, r1, r2}
 8001a2a:	7023      	strb	r3, [r4, #0]
		send_drv_err(msg);
 8001a2c:	f107 0308 	add.w	r3, r7, #8
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 f811 	bl	8001a58 <send_drv_err>
}
 8001a36:	bf00      	nop
 8001a38:	3738      	adds	r7, #56	@ 0x38
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	0800d4c0 	.word	0x0800d4c0
 8001a44:	0800d4c4 	.word	0x0800d4c4
 8001a48:	0800d488 	.word	0x0800d488
 8001a4c:	0800d48c 	.word	0x0800d48c
 8001a50:	0800d4a8 	.word	0x0800d4a8
 8001a54:	0800d4cc 	.word	0x0800d4cc

08001a58 <send_drv_err>:



void send_drv_err(char* msg){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b09c      	sub	sp, #112	@ 0x70
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

	char err_buffer[100];
	memset(err_buffer, '\0', sizeof(err_buffer));
 8001a60:	f107 030c 	add.w	r3, r7, #12
 8001a64:	2264      	movs	r2, #100	@ 0x64
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f007 fd1c 	bl	80094a6 <memset>
	strcat(err_buffer, DRIVING_ERR);
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fc24 	bl	80002c0 <strlen>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	4413      	add	r3, r2
 8001a82:	4917      	ldr	r1, [pc, #92]	@ (8001ae0 <send_drv_err+0x88>)
 8001a84:	461a      	mov	r2, r3
 8001a86:	460b      	mov	r3, r1
 8001a88:	cb03      	ldmia	r3!, {r0, r1}
 8001a8a:	6010      	str	r0, [r2, #0]
 8001a8c:	6051      	str	r1, [r2, #4]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	7213      	strb	r3, [r2, #8]
	strcat(err_buffer, msg);
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f007 fd0c 	bl	80094b6 <strcat>
	strcat(err_buffer, "\n\r");
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fc0c 	bl	80002c0 <strlen>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae4 <send_drv_err+0x8c>)
 8001ab4:	8811      	ldrh	r1, [r2, #0]
 8001ab6:	7892      	ldrb	r2, [r2, #2]
 8001ab8:	8019      	strh	r1, [r3, #0]
 8001aba:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&hlpuart1,(uint8_t*) err_buffer, strlen(err_buffer),STATE_SENDING_TIMEOUT);
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fbfd 	bl	80002c0 <strlen>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	f107 010c 	add.w	r1, r7, #12
 8001ace:	2364      	movs	r3, #100	@ 0x64
 8001ad0:	4805      	ldr	r0, [pc, #20]	@ (8001ae8 <send_drv_err+0x90>)
 8001ad2:	f004 fa4b 	bl	8005f6c <HAL_UART_Transmit>

}
 8001ad6:	bf00      	nop
 8001ad8:	3770      	adds	r7, #112	@ 0x70
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	0800d4ec 	.word	0x0800d4ec
 8001ae4:	0800d4f8 	.word	0x0800d4f8
 8001ae8:	20000448 	.word	0x20000448

08001aec <add_state_to_states_buffer>:


static void add_state_to_states_buffer(MotorState* motor_state){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

	memset(state_str, '\0', sizeof(state_str));
 8001af4:	2214      	movs	r2, #20
 8001af6:	2100      	movs	r1, #0
 8001af8:	4807      	ldr	r0, [pc, #28]	@ (8001b18 <add_state_to_states_buffer+0x2c>)
 8001afa:	f007 fcd4 	bl	80094a6 <memset>
	str_motor_state(motor_state, state_str);
 8001afe:	4906      	ldr	r1, [pc, #24]	@ (8001b18 <add_state_to_states_buffer+0x2c>)
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f867 	bl	8001bd4 <str_motor_state>
	strcat(states_buffer, state_str);
 8001b06:	4904      	ldr	r1, [pc, #16]	@ (8001b18 <add_state_to_states_buffer+0x2c>)
 8001b08:	4804      	ldr	r0, [pc, #16]	@ (8001b1c <add_state_to_states_buffer+0x30>)
 8001b0a:	f007 fcd4 	bl	80094b6 <strcat>

}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200004dc 	.word	0x200004dc
 8001b1c:	200004f0 	.word	0x200004f0

08001b20 <send_state>:
	}

}


void send_state(DrivingSystem* driving_system){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]


	memset(states_buffer, '\0', sizeof(states_buffer));
 8001b28:	2250      	movs	r2, #80	@ 0x50
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4815      	ldr	r0, [pc, #84]	@ (8001b84 <send_state+0x64>)
 8001b2e:	f007 fcba 	bl	80094a6 <memset>

	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i){
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	e013      	b.n	8001b60 <send_state+0x40>

		add_state_to_states_buffer(driving_system->left_motors_lst[i]->motor_state);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ffd2 	bl	8001aec <add_state_to_states_buffer>
		add_state_to_states_buffer(driving_system->right_motors_lst[i]->motor_state);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	3202      	adds	r2, #2
 8001b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ffc9 	bl	8001aec <add_state_to_states_buffer>
	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i){
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	dde8      	ble.n	8001b38 <send_state+0x18>
	}

	HAL_UART_Transmit(&hlpuart1,(uint8_t*) states_buffer, strlen(states_buffer),STATE_SENDING_TIMEOUT);
 8001b66:	4807      	ldr	r0, [pc, #28]	@ (8001b84 <send_state+0x64>)
 8001b68:	f7fe fbaa 	bl	80002c0 <strlen>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	2364      	movs	r3, #100	@ 0x64
 8001b72:	4904      	ldr	r1, [pc, #16]	@ (8001b84 <send_state+0x64>)
 8001b74:	4804      	ldr	r0, [pc, #16]	@ (8001b88 <send_state+0x68>)
 8001b76:	f004 f9f9 	bl	8005f6c <HAL_UART_Transmit>

}
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200004f0 	.word	0x200004f0
 8001b88:	20000448 	.word	0x20000448

08001b8c <init_encoder_info>:
 */

#include "encoder_driver.h"

void init_encoder_info(EncoderInfo* encoder_info, TIM_HandleTypeDef* encoder_timer_)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
	encoder_info->encoder_timer=encoder_timer_;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	601a      	str	r2, [r3, #0]

}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <update_encoder_info>:

void update_encoder_info(EncoderInfo* encoder_info)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

	encoder_info->last_counter_value = encoder_info->counter_value;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	889a      	ldrh	r2, [r3, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	80da      	strh	r2, [r3, #6]
	encoder_info->counter_value = __HAL_TIM_GET_COUNTER(encoder_info->encoder_timer);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	809a      	strh	r2, [r3, #4]

}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <str_motor_state>:
#include <motor_features.h>
#include "motor_driver.h"
#include "timers_configuration.h"


void str_motor_state(MotorState* motor_state, char* state_buffer){
 8001bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af04      	add	r7, sp, #16
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]

	sprintf(state_buffer, "%d,%.2f,%.2f\n\r", motor_state->motor_id, motor_state->set_velocity, motor_state->measured_velocity);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	7c1b      	ldrb	r3, [r3, #16]
 8001be2:	461e      	mov	r6, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fcd5 	bl	8000598 <__aeabi_f2d>
 8001bee:	4604      	mov	r4, r0
 8001bf0:	460d      	mov	r5, r1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fcce 	bl	8000598 <__aeabi_f2d>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c04:	e9cd 4500 	strd	r4, r5, [sp]
 8001c08:	4632      	mov	r2, r6
 8001c0a:	4904      	ldr	r1, [pc, #16]	@ (8001c1c <str_motor_state+0x48>)
 8001c0c:	6838      	ldr	r0, [r7, #0]
 8001c0e:	f007 fbbb 	bl	8009388 <siprintf>
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	0800d4fc 	.word	0x0800d4fc

08001c20 <init_motor>:
		MotorState *motor_state_,
		TIM_HandleTypeDef *updater_tim_,
		EncoderInfo *enc_inf_param_,
		PIDController *pid_controller_,
		L298N_driver *L298N_)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	603b      	str	r3, [r7, #0]
	motor_struct->motor_state = motor_state_;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	601a      	str	r2, [r3, #0]
	motor_struct->motor_updater_tim = updater_tim_;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	60da      	str	r2, [r3, #12]
	motor_struct->updater_timer_periods = CountPeriodS(updater_tim_);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fac2 	bl	80021c4 <CountPeriodS>
 8001c40:	eef0 7a40 	vmov.f32	s15, s0
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	edc3 7a04 	vstr	s15, [r3, #16]
	motor_struct->encoder_info = enc_inf_param_;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	609a      	str	r2, [r3, #8]
	motor_struct->L298N_driver = L298N_;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	615a      	str	r2, [r3, #20]
	motor_struct->pid_controller = pid_controller_;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	605a      	str	r2, [r3, #4]

}
 8001c5c:	bf00      	nop
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <regulate_velocity>:


void regulate_velocity(MotorStruct *motor_struct)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

	MotorState* current_motor_state = motor_struct->motor_state;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
	uint16_t pwm_value = pid_calculate(	motor_struct->pid_controller,
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	ed93 7a00 	vldr	s14, [r3]
 8001c82:	eef0 0a47 	vmov.f32	s1, s14
 8001c86:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	f000 f8e4 	bl	8001e58 <pid_calculate>
 8001c90:	4603      	mov	r3, r0
 8001c92:	817b      	strh	r3, [r7, #10]
										current_motor_state->set_velocity,
										current_motor_state->measured_velocity);
	uint8_t saturated_pwm_value = saturate_pwm(pwm_value);
 8001c94:	897b      	ldrh	r3, [r7, #10]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f9ca 	bl	8002030 <saturate_pwm>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	727b      	strb	r3, [r7, #9]
	L298N_update_pwm(motor_struct->L298N_driver, saturated_pwm_value);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	7a7a      	ldrb	r2, [r7, #9]
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fd9d 	bl	80017e8 <L298N_update_pwm>

}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <update_motor_position>:



void update_motor_position(MotorState* motor_state, EncoderInfo* encoder_info)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]

	motor_state->last_position = motor_state->position;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	60da      	str	r2, [r3, #12]
	update_encoder_info(encoder_info);
 8001cc8:	6838      	ldr	r0, [r7, #0]
 8001cca:	f7ff ff6d 	bl	8001ba8 <update_encoder_info>
	int16_t encoder_diff = encoder_info->counter_value - encoder_info->last_counter_value;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	889a      	ldrh	r2, [r3, #4]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	88db      	ldrh	r3, [r3, #6]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	82bb      	strh	r3, [r7, #20]
	int16_t position_change = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	82fb      	strh	r3, [r7, #22]
	//encoder increase
	if (encoder_diff > 0){
 8001ce0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	dd1f      	ble.n	8001d28 <update_motor_position+0x72>

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	2b10      	cmp	r3, #16
 8001cf6:	d114      	bne.n	8001d22 <update_motor_position+0x6c>

			uint16_t postreload_count = abs(encoder_info->counter_value - __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	889b      	ldrh	r3, [r3, #4]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bfb8      	it	lt
 8001d0c:	425b      	neglt	r3, r3
 8001d0e:	81fb      	strh	r3, [r7, #14]
			position_change = -(encoder_info->last_counter_value + postreload_count); //- because its decreasing
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	88da      	ldrh	r2, [r3, #6]
 8001d14:	89fb      	ldrh	r3, [r7, #14]
 8001d16:	4413      	add	r3, r2
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	425b      	negs	r3, r3
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	82fb      	strh	r3, [r7, #22]
 8001d20:	e023      	b.n	8001d6a <update_motor_position+0xb4>

		}else{
			position_change = encoder_diff;
 8001d22:	8abb      	ldrh	r3, [r7, #20]
 8001d24:	82fb      	strh	r3, [r7, #22]
 8001d26:	e020      	b.n	8001d6a <update_motor_position+0xb4>
		}
	}else if(encoder_diff < 0) //encoder decrease
 8001d28:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	da1c      	bge.n	8001d6a <update_motor_position+0xb4>
	{
		if (!__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b10      	cmp	r3, #16
 8001d3e:	d012      	beq.n	8001d66 <update_motor_position+0xb0>

			int16_t postreload_count = encoder_info->counter_value;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	889b      	ldrh	r3, [r3, #4]
 8001d44:	827b      	strh	r3, [r7, #18]
			int16_t prereload_count = __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer) - encoder_info->last_counter_value;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	88db      	ldrh	r3, [r3, #6]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	823b      	strh	r3, [r7, #16]
			position_change = postreload_count + prereload_count;
 8001d5a:	8a7a      	ldrh	r2, [r7, #18]
 8001d5c:	8a3b      	ldrh	r3, [r7, #16]
 8001d5e:	4413      	add	r3, r2
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	82fb      	strh	r3, [r7, #22]
 8001d64:	e001      	b.n	8001d6a <update_motor_position+0xb4>

		}else{
			position_change = encoder_diff;
 8001d66:	8abb      	ldrh	r3, [r7, #20]
 8001d68:	82fb      	strh	r3, [r7, #22]
		}
	}

	float position_change_rad = convert_to_radians(position_change);
 8001d6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 f92a 	bl	8001fc8 <convert_to_radians>
 8001d74:	ed87 0a02 	vstr	s0, [r7, #8]
	motor_state->position = motor_state->last_position - position_change_rad;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8001d8c:	bf00      	nop
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <set_velocity>:

void set_velocity(MotorState *motor_state, float velocity)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	ed87 0a00 	vstr	s0, [r7]
	motor_state->set_velocity = velocity;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	605a      	str	r2, [r3, #4]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <update_measured_velocity>:

void update_measured_velocity(MotorStruct* motor_struct)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b084      	sub	sp, #16
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
	MotorState *curr_motor_state = motor_struct->motor_state;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	60fb      	str	r3, [r7, #12]
	float rotary_displacement_ = rotary_displacement(curr_motor_state);
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 f810 	bl	8001de6 <rotary_displacement>
 8001dc6:	ed87 0a02 	vstr	s0, [r7, #8]
	curr_motor_state->measured_velocity = (float)rotary_displacement_ / motor_struct->updater_timer_periods;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	ed93 7a04 	vldr	s14, [r3, #16]
 8001dd0:	edd7 6a02 	vldr	s13, [r7, #8]
 8001dd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	edc3 7a00 	vstr	s15, [r3]

}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <rotary_displacement>:

float rotary_displacement(MotorState *motor_state){
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]

	return motor_state->position - motor_state->last_position;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <pid_init>:
#include "pid_controller.h"
#include "motor_features.h"

void pid_init(PIDController *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6178      	str	r0, [r7, #20]
 8001e14:	ed87 0a04 	vstr	s0, [r7, #16]
 8001e18:	edc7 0a03 	vstr	s1, [r7, #12]
 8001e1c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001e20:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	615a      	str	r2, [r3, #20]
}
 8001e4a:	bf00      	nop
 8001e4c:	371c      	adds	r7, #28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <pid_calculate>:
float d_term;
float pid_output;


uint8_t pid_calculate(PIDController *pid_data, float setpoint, float process_variable)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e64:	edc7 0a01 	vstr	s1, [r7, #4]

	error = setpoint - process_variable;
 8001e68:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e74:	4b4f      	ldr	r3, [pc, #316]	@ (8001fb4 <pid_calculate+0x15c>)
 8001e76:	edc3 7a00 	vstr	s15, [r3]
	pid_data->total_error += error;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e80:	4b4c      	ldr	r3, [pc, #304]	@ (8001fb4 <pid_calculate+0x15c>)
 8001e82:	edd3 7a00 	vldr	s15, [r3]
 8001e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	edc3 7a01 	vstr	s15, [r3, #4]

	p_term = (float)(pid_data->Kp * error);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e96:	4b47      	ldr	r3, [pc, #284]	@ (8001fb4 <pid_calculate+0x15c>)
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea0:	4b45      	ldr	r3, [pc, #276]	@ (8001fb8 <pid_calculate+0x160>)
 8001ea2:	edc3 7a00 	vstr	s15, [r3]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	ed93 7a03 	vldr	s14, [r3, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	edd3 7a01 	vldr	s15, [r3, #4]
 8001eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb6:	4b41      	ldr	r3, [pc, #260]	@ (8001fbc <pid_calculate+0x164>)
 8001eb8:	edc3 7a00 	vstr	s15, [r3]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ec2:	4b3c      	ldr	r3, [pc, #240]	@ (8001fb4 <pid_calculate+0x15c>)
 8001ec4:	edd3 6a00 	vldr	s13, [r3]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	edd3 7a00 	vldr	s15, [r3]
 8001ece:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fc0 <pid_calculate+0x168>)
 8001ed8:	edc3 7a00 	vstr	s15, [r3]

	pid_output = p_term + i_term + d_term;
 8001edc:	4b36      	ldr	r3, [pc, #216]	@ (8001fb8 <pid_calculate+0x160>)
 8001ede:	ed93 7a00 	vldr	s14, [r3]
 8001ee2:	4b36      	ldr	r3, [pc, #216]	@ (8001fbc <pid_calculate+0x164>)
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eec:	4b34      	ldr	r3, [pc, #208]	@ (8001fc0 <pid_calculate+0x168>)
 8001eee:	edd3 7a00 	vldr	s15, [r3]
 8001ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef6:	4b33      	ldr	r3, [pc, #204]	@ (8001fc4 <pid_calculate+0x16c>)
 8001ef8:	edc3 7a00 	vstr	s15, [r3]

    // Anti-windup
    if (pid_output < -pid_data->anti_windup_limit)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	425b      	negs	r3, r3
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001fc4 <pid_calculate+0x16c>)
 8001f0c:	edd3 7a00 	vldr	s15, [r3]
 8001f10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f18:	dd15      	ble.n	8001f46 <pid_calculate+0xee>
    {
        pid_output = -pid_data->anti_windup_limit;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	425b      	negs	r3, r3
 8001f20:	ee07 3a90 	vmov	s15, r3
 8001f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f28:	4b26      	ldr	r3, [pc, #152]	@ (8001fc4 <pid_calculate+0x16c>)
 8001f2a:	edc3 7a00 	vstr	s15, [r3]
        pid_data->total_error = pid_data->total_error - error;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f34:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb4 <pid_calculate+0x15c>)
 8001f36:	edd3 7a00 	vldr	s15, [r3]
 8001f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	edc3 7a01 	vstr	s15, [r3, #4]
 8001f44:	e021      	b.n	8001f8a <pid_calculate+0x132>

    } else if (pid_output > pid_data->anti_windup_limit)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f52:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc4 <pid_calculate+0x16c>)
 8001f54:	edd3 7a00 	vldr	s15, [r3]
 8001f58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f60:	d513      	bpl.n	8001f8a <pid_calculate+0x132>
    {
        pid_output = pid_data->anti_windup_limit;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f6e:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <pid_calculate+0x16c>)
 8001f70:	edc3 7a00 	vstr	s15, [r3]
        pid_data->total_error = pid_data->total_error - error;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb4 <pid_calculate+0x15c>)
 8001f7c:	edd3 7a00 	vldr	s15, [r3]
 8001f80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	edc3 7a01 	vstr	s15, [r3, #4]
    }


	pid_data->previous_error = error;
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb4 <pid_calculate+0x15c>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	601a      	str	r2, [r3, #0]
	uint8_t saturated_pwm_value = saturate_pwm(pid_output);
 8001f92:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <pid_calculate+0x16c>)
 8001f94:	edd3 7a00 	vldr	s15, [r3]
 8001f98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f9c:	ee17 0a90 	vmov	r0, s15
 8001fa0:	f000 f846 	bl	8002030 <saturate_pwm>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	75fb      	strb	r3, [r7, #23]
	return saturated_pwm_value;
 8001fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000540 	.word	0x20000540
 8001fb8:	20000544 	.word	0x20000544
 8001fbc:	20000548 	.word	0x20000548
 8001fc0:	2000054c 	.word	0x2000054c
 8001fc4:	20000550 	.word	0x20000550

08001fc8 <convert_to_radians>:

#include "motor_features.h"



float convert_to_radians(int32_t enc_position){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

	return 2* M_PI * (float)enc_position / (float) ONE_ROTATION_TICKS;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	ee07 3a90 	vmov	s15, r3
 8001fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fda:	ee17 0a90 	vmov	r0, s15
 8001fde:	f7fe fadb 	bl	8000598 <__aeabi_f2d>
 8001fe2:	a30f      	add	r3, pc, #60	@ (adr r3, 8002020 <convert_to_radians+0x58>)
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	f7fe fb2e 	bl	8000648 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	a30c      	add	r3, pc, #48	@ (adr r3, 8002028 <convert_to_radians+0x60>)
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	f7fe fc4f 	bl	800089c <__aeabi_ddiv>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	f7fe fe17 	bl	8000c38 <__aeabi_d2f>
 800200a:	4603      	mov	r3, r0
 800200c:	ee07 3a90 	vmov	s15, r3

}
 8002010:	eeb0 0a67 	vmov.f32	s0, s15
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	f3af 8000 	nop.w
 8002020:	54442d18 	.word	0x54442d18
 8002024:	401921fb 	.word	0x401921fb
 8002028:	00000000 	.word	0x00000000
 800202c:	40ae6400 	.word	0x40ae6400

08002030 <saturate_pwm>:


uint8_t saturate_pwm(int pwm_value){
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]


	if (pwm_value < PWM_MIN_VALUE){
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	da02      	bge.n	8002044 <saturate_pwm+0x14>
		pwm_value = (uint8_t)PWM_MIN_VALUE;
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	e004      	b.n	800204e <saturate_pwm+0x1e>
	}else if(pwm_value > PWM_MAX_VALUE){
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b62      	cmp	r3, #98	@ 0x62
 8002048:	dd01      	ble.n	800204e <saturate_pwm+0x1e>
		pwm_value = (uint8_t)PWM_MAX_VALUE;
 800204a:	2362      	movs	r3, #98	@ 0x62
 800204c:	607b      	str	r3, [r7, #4]
	}
	return (uint8_t)pwm_value;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	b2db      	uxtb	r3, r3

}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <parse_cmd_code>:
#define SRC_FEATURES_PARSER_FEATURES_C_

#include "parser_features.h"


void parse_cmd_code(uint8_t* cmd, uint8_t* cmd_code){
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]

	if (cmd[0] >= '0' && cmd[0] <= '9') {
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b2f      	cmp	r3, #47	@ 0x2f
 8002070:	d90a      	bls.n	8002088 <parse_cmd_code+0x28>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b39      	cmp	r3, #57	@ 0x39
 8002078:	d806      	bhi.n	8002088 <parse_cmd_code+0x28>
		cmd_code[0] = cmd[0] - '0';
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	3b30      	subs	r3, #48	@ 0x30
 8002080:	b2da      	uxtb	r2, r3
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	701a      	strb	r2, [r3, #0]
 8002086:	e002      	b.n	800208e <parse_cmd_code+0x2e>

	}else{
		send_parsing_err("cmd[0] wrong format");
 8002088:	480e      	ldr	r0, [pc, #56]	@ (80020c4 <parse_cmd_code+0x64>)
 800208a:	f000 f84f 	bl	800212c <send_parsing_err>
	}

	if (cmd[1] >= '0' && cmd[1] <= '9') {
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3301      	adds	r3, #1
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b2f      	cmp	r3, #47	@ 0x2f
 8002096:	d90d      	bls.n	80020b4 <parse_cmd_code+0x54>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3301      	adds	r3, #1
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b39      	cmp	r3, #57	@ 0x39
 80020a0:	d808      	bhi.n	80020b4 <parse_cmd_code+0x54>
		cmd_code[1] = cmd[1] - '0';
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3301      	adds	r3, #1
 80020a6:	781a      	ldrb	r2, [r3, #0]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	3301      	adds	r3, #1
 80020ac:	3a30      	subs	r2, #48	@ 0x30
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	701a      	strb	r2, [r3, #0]
 80020b2:	e003      	b.n	80020bc <parse_cmd_code+0x5c>
	}else{
		send_parsing_err("cmd[1] wrong format");
 80020b4:	4804      	ldr	r0, [pc, #16]	@ (80020c8 <parse_cmd_code+0x68>)
 80020b6:	f000 f839 	bl	800212c <send_parsing_err>
	}

}
 80020ba:	bf00      	nop
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	0800d50c 	.word	0x0800d50c
 80020c8:	0800d520 	.word	0x0800d520

080020cc <parse_payload>:

void parse_payload(char* cmd, uint8_t* payload) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]

    uint8_t cmd_index = 2;
 80020d6:	2302      	movs	r3, #2
 80020d8:	73fb      	strb	r3, [r7, #15]
    int i = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]

    while (cmd[cmd_index] != CMD_END_CHAR) {
 80020de:	e014      	b.n	800210a <parse_payload+0x3e>

    	if(i == CMD_PAYLOAD_LENGTH-1){
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b05      	cmp	r3, #5
 80020e4:	d103      	bne.n	80020ee <parse_payload+0x22>
    		send_parsing_err(" cmd end char not received");
 80020e6:	4810      	ldr	r0, [pc, #64]	@ (8002128 <parse_payload+0x5c>)
 80020e8:	f000 f820 	bl	800212c <send_parsing_err>
    		break;
 80020ec:	e013      	b.n	8002116 <parse_payload+0x4a>
    	}
        payload[i] = cmd[cmd_index];
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	441a      	add	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	6839      	ldr	r1, [r7, #0]
 80020f8:	440b      	add	r3, r1
 80020fa:	7812      	ldrb	r2, [r2, #0]
 80020fc:	701a      	strb	r2, [r3, #0]
        i++;
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	3301      	adds	r3, #1
 8002102:	60bb      	str	r3, [r7, #8]
        cmd_index++;
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	3301      	adds	r3, #1
 8002108:	73fb      	strb	r3, [r7, #15]
    while (cmd[cmd_index] != CMD_END_CHAR) {
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	4413      	add	r3, r2
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b66      	cmp	r3, #102	@ 0x66
 8002114:	d1e4      	bne.n	80020e0 <parse_payload+0x14>
    }

    payload[i] = '\0';
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	4413      	add	r3, r2
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	0800d534 	.word	0x0800d534

0800212c <send_parsing_err>:

void send_parsing_err(char* msg){
 800212c:	b580      	push	{r7, lr}
 800212e:	b09c      	sub	sp, #112	@ 0x70
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

	char err_buffer[100];
	memset(err_buffer, '\0', sizeof(err_buffer));
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	2264      	movs	r2, #100	@ 0x64
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f007 f9b2 	bl	80094a6 <memset>
	strcat(err_buffer, PARSING_ERR);
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe f8ba 	bl	80002c0 <strlen>
 800214c:	4603      	mov	r3, r0
 800214e:	461a      	mov	r2, r3
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	4413      	add	r3, r2
 8002156:	4918      	ldr	r1, [pc, #96]	@ (80021b8 <send_parsing_err+0x8c>)
 8002158:	461a      	mov	r2, r3
 800215a:	460b      	mov	r3, r1
 800215c:	cb03      	ldmia	r3!, {r0, r1}
 800215e:	6010      	str	r0, [r2, #0]
 8002160:	6051      	str	r1, [r2, #4]
 8002162:	8819      	ldrh	r1, [r3, #0]
 8002164:	789b      	ldrb	r3, [r3, #2]
 8002166:	8111      	strh	r1, [r2, #8]
 8002168:	7293      	strb	r3, [r2, #10]
	strcat(err_buffer, msg);
 800216a:	f107 030c 	add.w	r3, r7, #12
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4618      	mov	r0, r3
 8002172:	f007 f9a0 	bl	80094b6 <strcat>
	strcat(err_buffer, "\n\r");
 8002176:	f107 030c 	add.w	r3, r7, #12
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe f8a0 	bl	80002c0 <strlen>
 8002180:	4603      	mov	r3, r0
 8002182:	461a      	mov	r2, r3
 8002184:	f107 030c 	add.w	r3, r7, #12
 8002188:	4413      	add	r3, r2
 800218a:	4a0c      	ldr	r2, [pc, #48]	@ (80021bc <send_parsing_err+0x90>)
 800218c:	8811      	ldrh	r1, [r2, #0]
 800218e:	7892      	ldrb	r2, [r2, #2]
 8002190:	8019      	strh	r1, [r3, #0]
 8002192:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&hlpuart1,(uint8_t*) err_buffer, strlen(err_buffer),100);
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe f891 	bl	80002c0 <strlen>
 800219e:	4603      	mov	r3, r0
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	f107 010c 	add.w	r1, r7, #12
 80021a6:	2364      	movs	r3, #100	@ 0x64
 80021a8:	4805      	ldr	r0, [pc, #20]	@ (80021c0 <send_parsing_err+0x94>)
 80021aa:	f003 fedf 	bl	8005f6c <HAL_UART_Transmit>

}
 80021ae:	bf00      	nop
 80021b0:	3770      	adds	r7, #112	@ 0x70
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	0800d550 	.word	0x0800d550
 80021bc:	0800d55c 	.word	0x0800d55c
 80021c0:	20000448 	.word	0x20000448

080021c4 <CountPeriodS>:
 */

#include "timers_feature.h"

// Funkcja obliczająca okres w sekundach
float CountPeriodS(TIM_HandleTypeDef *htim) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
    uint32_t prescaler = htim->Init.Prescaler;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	617b      	str	r3, [r7, #20]
    uint32_t period = htim->Init.Period;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	613b      	str	r3, [r7, #16]
    uint32_t clock_freq = HAL_RCC_GetHCLKFreq();
 80021d8:	f001 fde0 	bl	8003d9c <HAL_RCC_GetHCLKFreq>
 80021dc:	60f8      	str	r0, [r7, #12]

    float period_seconds = (float)(prescaler * period) / (float)clock_freq;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	ee07 3a90 	vmov	s15, r3
 80021f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021fc:	edc7 7a02 	vstr	s15, [r7, #8]

    return period_seconds;
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	ee07 3a90 	vmov	s15, r3
}
 8002206:	eeb0 0a67 	vmov.f32	s0, s15
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <main>:
void generate_stair_signal(void);
void generate_random_signal_velo(void);


int main(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af04      	add	r7, sp, #16

  HAL_Init();
 8002216:	f000 fcfe 	bl	8002c16 <HAL_Init>
  SystemClock_Config();
 800221a:	f7fe ff0b 	bl	8001034 <SystemClock_Config>
  MX_GPIO_Init();
 800221e:	f7fe ff55 	bl	80010cc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8002222:	f7ff fa29 	bl	8001678 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8002226:	f7ff fa71 	bl	800170c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800222a:	f7fe ffbd 	bl	80011a8 <MX_TIM1_Init>
  MX_TIM3_Init();
 800222e:	f7ff f891 	bl	8001354 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002232:	f7ff f8e5 	bl	8001400 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002236:	f7ff f939 	bl	80014ac <MX_TIM5_Init>
  MX_TIM7_Init();
 800223a:	f7ff f98d 	bl	8001558 <MX_TIM7_Init>
  MX_TIM8_Init();
 800223e:	f7ff f9c1 	bl	80015c4 <MX_TIM8_Init>

  init_encoder_info(&encoder_info, &htim4);
 8002242:	4937      	ldr	r1, [pc, #220]	@ (8002320 <main+0x110>)
 8002244:	4837      	ldr	r0, [pc, #220]	@ (8002324 <main+0x114>)
 8002246:	f7ff fca1 	bl	8001b8c <init_encoder_info>
  L298N_init(&L298N_lb, TIM_CHANNEL_1, &htim1, GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_1);
 800224a:	2302      	movs	r3, #2
 800224c:	9302      	str	r3, [sp, #8]
 800224e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	2301      	movs	r3, #1
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800225c:	4a32      	ldr	r2, [pc, #200]	@ (8002328 <main+0x118>)
 800225e:	2100      	movs	r1, #0
 8002260:	4832      	ldr	r0, [pc, #200]	@ (800232c <main+0x11c>)
 8002262:	f7ff fa9f 	bl	80017a4 <L298N_init>
  pid_init(&pid_controller, MOTOR_Kp , MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 8002266:	215f      	movs	r1, #95	@ 0x5f
 8002268:	ed9f 1a31 	vldr	s2, [pc, #196]	@ 8002330 <main+0x120>
 800226c:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8002334 <main+0x124>
 8002270:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8002338 <main+0x128>
 8002274:	4831      	ldr	r0, [pc, #196]	@ (800233c <main+0x12c>)
 8002276:	f7ff fdc9 	bl	8001e0c <pid_init>
  init_motor(&lb_motor, &lb_motor_state, &htim7, &encoder_info, &pid_controller, &L298N_lb);
 800227a:	4b2c      	ldr	r3, [pc, #176]	@ (800232c <main+0x11c>)
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	4b2f      	ldr	r3, [pc, #188]	@ (800233c <main+0x12c>)
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	4b28      	ldr	r3, [pc, #160]	@ (8002324 <main+0x114>)
 8002284:	4a2e      	ldr	r2, [pc, #184]	@ (8002340 <main+0x130>)
 8002286:	492f      	ldr	r1, [pc, #188]	@ (8002344 <main+0x134>)
 8002288:	482f      	ldr	r0, [pc, #188]	@ (8002348 <main+0x138>)
 800228a:	f7ff fcc9 	bl	8001c20 <init_motor>

  pwm_output = 0;
 800228e:	4b2f      	ldr	r3, [pc, #188]	@ (800234c <main+0x13c>)
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
  tick = 0;
 8002294:	492e      	ldr	r1, [pc, #184]	@ (8002350 <main+0x140>)
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	e9c1 2300 	strd	r2, r3, [r1]
  velo = 0;
 80022a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002354 <main+0x144>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 80022a8:	4825      	ldr	r0, [pc, #148]	@ (8002340 <main+0x130>)
 80022aa:	f002 f93d 	bl	8004528 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim8);
 80022ae:	482a      	ldr	r0, [pc, #168]	@ (8002358 <main+0x148>)
 80022b0:	f002 f8ca 	bl	8004448 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80022b4:	2100      	movs	r1, #0
 80022b6:	481c      	ldr	r0, [pc, #112]	@ (8002328 <main+0x118>)
 80022b8:	f002 fa10 	bl	80046dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80022bc:	2104      	movs	r1, #4
 80022be:	481a      	ldr	r0, [pc, #104]	@ (8002328 <main+0x118>)
 80022c0:	f002 fa0c 	bl	80046dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80022c4:	2108      	movs	r1, #8
 80022c6:	4818      	ldr	r0, [pc, #96]	@ (8002328 <main+0x118>)
 80022c8:	f002 fa08 	bl	80046dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80022cc:	210c      	movs	r1, #12
 80022ce:	4816      	ldr	r0, [pc, #88]	@ (8002328 <main+0x118>)
 80022d0:	f002 fa04 	bl	80046dc <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80022d4:	213c      	movs	r1, #60	@ 0x3c
 80022d6:	4812      	ldr	r0, [pc, #72]	@ (8002320 <main+0x110>)
 80022d8:	f002 fbb8 	bl	8004a4c <HAL_TIM_Encoder_Start>


  updater_timer_periods = CountPeriodS(lb_motor.motor_updater_tim);
 80022dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002348 <main+0x138>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff6f 	bl	80021c4 <CountPeriodS>
 80022e6:	eef0 7a40 	vmov.f32	s15, s0
 80022ea:	4b1c      	ldr	r3, [pc, #112]	@ (800235c <main+0x14c>)
 80022ec:	edc3 7a00 	vstr	s15, [r3]
  L298N_set_input_configuration(&L298N_lb, FORWARD);
 80022f0:	2101      	movs	r1, #1
 80022f2:	480e      	ldr	r0, [pc, #56]	@ (800232c <main+0x11c>)
 80022f4:	f7ff fac9 	bl	800188a <L298N_set_input_configuration>
  init_driving_system(&driving_system ,&lb_motor, &lb_motor, &lb_motor, &lb_motor);
 80022f8:	4b13      	ldr	r3, [pc, #76]	@ (8002348 <main+0x138>)
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <main+0x138>)
 80022fe:	4a12      	ldr	r2, [pc, #72]	@ (8002348 <main+0x138>)
 8002300:	4911      	ldr	r1, [pc, #68]	@ (8002348 <main+0x138>)
 8002302:	4817      	ldr	r0, [pc, #92]	@ (8002360 <main+0x150>)
 8002304:	f7ff fb06 	bl	8001914 <init_driving_system>
  default_init_driving_system_if(&drv_system_if);
 8002308:	4816      	ldr	r0, [pc, #88]	@ (8002364 <main+0x154>)
 800230a:	f7ff fb1d 	bl	8001948 <default_init_driving_system_if>

  /* USER CODE END 2 */

  HAL_UART_Receive_IT(&hlpuart1, cmd_data, CMD_CODE_LENGTH + CMD_PAYLOAD_LENGTH);
 800230e:	2208      	movs	r2, #8
 8002310:	4915      	ldr	r1, [pc, #84]	@ (8002368 <main+0x158>)
 8002312:	4816      	ldr	r0, [pc, #88]	@ (800236c <main+0x15c>)
 8002314:	f003 feb8 	bl	8006088 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
    while (1)
  {
//    	generate_stair_signal_pwm();
//    	generate_stair_signal();
    	generate_random_signal_velo();
 8002318:	f000 f844 	bl	80023a4 <generate_random_signal_velo>
 800231c:	e7fc      	b.n	8002318 <main+0x108>
 800231e:	bf00      	nop
 8002320:	20000284 	.word	0x20000284
 8002324:	20000554 	.word	0x20000554
 8002328:	200001ec 	.word	0x200001ec
 800232c:	2000058c 	.word	0x2000058c
 8002330:	00000000 	.word	0x00000000
 8002334:	3e8a3d71 	.word	0x3e8a3d71
 8002338:	3c23d70a 	.word	0x3c23d70a
 800233c:	20000574 	.word	0x20000574
 8002340:	2000031c 	.word	0x2000031c
 8002344:	200005a8 	.word	0x200005a8
 8002348:	2000055c 	.word	0x2000055c
 800234c:	200005e6 	.word	0x200005e6
 8002350:	200005e8 	.word	0x200005e8
 8002354:	200005e7 	.word	0x200005e7
 8002358:	20000368 	.word	0x20000368
 800235c:	200005d8 	.word	0x200005d8
 8002360:	200005bc 	.word	0x200005bc
 8002364:	200005d0 	.word	0x200005d0
 8002368:	200005dc 	.word	0x200005dc
 800236c:	20000448 	.word	0x20000448

08002370 <HAL_UART_RxCpltCallback>:
  }

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

	drv_system_if.exe_cmd(&driving_system, cmd_data);
 8002378:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <HAL_UART_RxCpltCallback+0x24>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4906      	ldr	r1, [pc, #24]	@ (8002398 <HAL_UART_RxCpltCallback+0x28>)
 800237e:	4807      	ldr	r0, [pc, #28]	@ (800239c <HAL_UART_RxCpltCallback+0x2c>)
 8002380:	4798      	blx	r3
	HAL_UART_Receive_IT(&hlpuart1, cmd_data, CMD_CODE_LENGTH + CMD_PAYLOAD_LENGTH);
 8002382:	2208      	movs	r2, #8
 8002384:	4904      	ldr	r1, [pc, #16]	@ (8002398 <HAL_UART_RxCpltCallback+0x28>)
 8002386:	4806      	ldr	r0, [pc, #24]	@ (80023a0 <HAL_UART_RxCpltCallback+0x30>)
 8002388:	f003 fe7e 	bl	8006088 <HAL_UART_Receive_IT>

}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	200005d0 	.word	0x200005d0
 8002398:	200005dc 	.word	0x200005dc
 800239c:	200005bc 	.word	0x200005bc
 80023a0:	20000448 	.word	0x20000448

080023a4 <generate_random_signal_velo>:
			pwm_output = 0;
		}
	}
}

void generate_random_signal_velo(void){
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0

	if(tick == 100){
 80023a8:	4b0f      	ldr	r3, [pc, #60]	@ (80023e8 <generate_random_signal_velo+0x44>)
 80023aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ae:	f1a2 0164 	sub.w	r1, r2, #100	@ 0x64
 80023b2:	430b      	orrs	r3, r1
 80023b4:	d113      	bne.n	80023de <generate_random_signal_velo+0x3a>
		velo +=  2;
 80023b6:	4b0d      	ldr	r3, [pc, #52]	@ (80023ec <generate_random_signal_velo+0x48>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	3302      	adds	r3, #2
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <generate_random_signal_velo+0x48>)
 80023c0:	701a      	strb	r2, [r3, #0]
		tick = 0;
 80023c2:	4909      	ldr	r1, [pc, #36]	@ (80023e8 <generate_random_signal_velo+0x44>)
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	e9c1 2300 	strd	r2, r3, [r1]
		if (velo >= 10){
 80023d0:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <generate_random_signal_velo+0x48>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b09      	cmp	r3, #9
 80023d6:	d902      	bls.n	80023de <generate_random_signal_velo+0x3a>
			velo = 3;
 80023d8:	4b04      	ldr	r3, [pc, #16]	@ (80023ec <generate_random_signal_velo+0x48>)
 80023da:	2203      	movs	r2, #3
 80023dc:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	200005e8 	.word	0x200005e8
 80023ec:	200005e7 	.word	0x200005e7

080023f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023f0:	b5b0      	push	{r4, r5, r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

    if (htim->Instance == (TIM_TypeDef *)lb_motor.motor_updater_tim->Instance) {
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d121      	bne.n	800244a <HAL_TIM_PeriodElapsedCallback+0x5a>

    	update_motor_position(lb_motor.motor_state, lb_motor.encoder_info);
 8002406:	4b13      	ldr	r3, [pc, #76]	@ (8002454 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a12      	ldr	r2, [pc, #72]	@ (8002454 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800240c:	6892      	ldr	r2, [r2, #8]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fc50 	bl	8001cb6 <update_motor_position>
    	update_measured_velocity(&lb_motor);
 8002416:	480f      	ldr	r0, [pc, #60]	@ (8002454 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002418:	f7ff fccb 	bl	8001db2 <update_measured_velocity>
    	set_velocity(&lb_motor_state, velo);
 800241c:	4b0e      	ldr	r3, [pc, #56]	@ (8002458 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002428:	eeb0 0a67 	vmov.f32	s0, s15
 800242c:	480b      	ldr	r0, [pc, #44]	@ (800245c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800242e:	f7ff fcb1 	bl	8001d94 <set_velocity>

    	regulate_velocity(&lb_motor);
 8002432:	4808      	ldr	r0, [pc, #32]	@ (8002454 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002434:	f7ff fc16 	bl	8001c64 <regulate_velocity>
    	tick += 1;
 8002438:	4b09      	ldr	r3, [pc, #36]	@ (8002460 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800243a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243e:	1c54      	adds	r4, r2, #1
 8002440:	f143 0500 	adc.w	r5, r3, #0
 8002444:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002446:	e9c3 4500 	strd	r4, r5, [r3]
    }



//  /* USER CODE END Callback 1 */
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bdb0      	pop	{r4, r5, r7, pc}
 8002452:	bf00      	nop
 8002454:	2000055c 	.word	0x2000055c
 8002458:	200005e7 	.word	0x200005e7
 800245c:	200005a8 	.word	0x200005a8
 8002460:	200005e8 	.word	0x200005e8

08002464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002468:	b672      	cpsid	i
}
 800246a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800246c:	bf00      	nop
 800246e:	e7fd      	b.n	800246c <Error_Handler+0x8>

08002470 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002476:	4b0f      	ldr	r3, [pc, #60]	@ (80024b4 <HAL_MspInit+0x44>)
 8002478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800247a:	4a0e      	ldr	r2, [pc, #56]	@ (80024b4 <HAL_MspInit+0x44>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6613      	str	r3, [r2, #96]	@ 0x60
 8002482:	4b0c      	ldr	r3, [pc, #48]	@ (80024b4 <HAL_MspInit+0x44>)
 8002484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	607b      	str	r3, [r7, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800248e:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <HAL_MspInit+0x44>)
 8002490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002492:	4a08      	ldr	r2, [pc, #32]	@ (80024b4 <HAL_MspInit+0x44>)
 8002494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002498:	6593      	str	r3, [r2, #88]	@ 0x58
 800249a:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <HAL_MspInit+0x44>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a2:	603b      	str	r3, [r7, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80024a6:	f000 ffb9 	bl	800341c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000

080024b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b0a0      	sub	sp, #128	@ 0x80
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024d0:	f107 0318 	add.w	r3, r7, #24
 80024d4:	2254      	movs	r2, #84	@ 0x54
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f006 ffe4 	bl	80094a6 <memset>
  if(huart->Instance==LPUART1)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a41      	ldr	r2, [pc, #260]	@ (80025e8 <HAL_UART_MspInit+0x130>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d13f      	bne.n	8002568 <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80024e8:	2320      	movs	r3, #32
 80024ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80024ec:	2300      	movs	r3, #0
 80024ee:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024f0:	f107 0318 	add.w	r3, r7, #24
 80024f4:	4618      	mov	r0, r3
 80024f6:	f001 fd01 	bl	8003efc <HAL_RCCEx_PeriphCLKConfig>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002500:	f7ff ffb0 	bl	8002464 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002504:	4b39      	ldr	r3, [pc, #228]	@ (80025ec <HAL_UART_MspInit+0x134>)
 8002506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002508:	4a38      	ldr	r2, [pc, #224]	@ (80025ec <HAL_UART_MspInit+0x134>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002510:	4b36      	ldr	r3, [pc, #216]	@ (80025ec <HAL_UART_MspInit+0x134>)
 8002512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251c:	4b33      	ldr	r3, [pc, #204]	@ (80025ec <HAL_UART_MspInit+0x134>)
 800251e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002520:	4a32      	ldr	r2, [pc, #200]	@ (80025ec <HAL_UART_MspInit+0x134>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002528:	4b30      	ldr	r3, [pc, #192]	@ (80025ec <HAL_UART_MspInit+0x134>)
 800252a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002534:	230c      	movs	r3, #12
 8002536:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002540:	2300      	movs	r3, #0
 8002542:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002544:	230c      	movs	r3, #12
 8002546:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002548:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800254c:	4619      	mov	r1, r3
 800254e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002552:	f000 fd25 	bl	8002fa0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2100      	movs	r1, #0
 800255a:	205b      	movs	r0, #91	@ 0x5b
 800255c:	f000 fc38 	bl	8002dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002560:	205b      	movs	r0, #91	@ 0x5b
 8002562:	f000 fc4f 	bl	8002e04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002566:	e03a      	b.n	80025de <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a20      	ldr	r2, [pc, #128]	@ (80025f0 <HAL_UART_MspInit+0x138>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d135      	bne.n	80025de <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002572:	2301      	movs	r3, #1
 8002574:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800257a:	f107 0318 	add.w	r3, r7, #24
 800257e:	4618      	mov	r0, r3
 8002580:	f001 fcbc 	bl	8003efc <HAL_RCCEx_PeriphCLKConfig>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800258a:	f7ff ff6b 	bl	8002464 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800258e:	4b17      	ldr	r3, [pc, #92]	@ (80025ec <HAL_UART_MspInit+0x134>)
 8002590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002592:	4a16      	ldr	r2, [pc, #88]	@ (80025ec <HAL_UART_MspInit+0x134>)
 8002594:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002598:	6613      	str	r3, [r2, #96]	@ 0x60
 800259a:	4b14      	ldr	r3, [pc, #80]	@ (80025ec <HAL_UART_MspInit+0x134>)
 800259c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800259e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a6:	4b11      	ldr	r3, [pc, #68]	@ (80025ec <HAL_UART_MspInit+0x134>)
 80025a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025aa:	4a10      	ldr	r2, [pc, #64]	@ (80025ec <HAL_UART_MspInit+0x134>)
 80025ac:	f043 0304 	orr.w	r3, r3, #4
 80025b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025b2:	4b0e      	ldr	r3, [pc, #56]	@ (80025ec <HAL_UART_MspInit+0x134>)
 80025b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80025be:	2330      	movs	r3, #48	@ 0x30
 80025c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	2302      	movs	r3, #2
 80025c4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ca:	2300      	movs	r3, #0
 80025cc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025ce:	2307      	movs	r3, #7
 80025d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80025d6:	4619      	mov	r1, r3
 80025d8:	4806      	ldr	r0, [pc, #24]	@ (80025f4 <HAL_UART_MspInit+0x13c>)
 80025da:	f000 fce1 	bl	8002fa0 <HAL_GPIO_Init>
}
 80025de:	bf00      	nop
 80025e0:	3780      	adds	r7, #128	@ 0x80
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40008000 	.word	0x40008000
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40013800 	.word	0x40013800
 80025f4:	48000800 	.word	0x48000800

080025f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a16      	ldr	r2, [pc, #88]	@ (8002660 <HAL_TIM_Base_MspInit+0x68>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d10c      	bne.n	8002624 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800260a:	4b16      	ldr	r3, [pc, #88]	@ (8002664 <HAL_TIM_Base_MspInit+0x6c>)
 800260c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800260e:	4a15      	ldr	r2, [pc, #84]	@ (8002664 <HAL_TIM_Base_MspInit+0x6c>)
 8002610:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002614:	6613      	str	r3, [r2, #96]	@ 0x60
 8002616:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <HAL_TIM_Base_MspInit+0x6c>)
 8002618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800261a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002622:	e018      	b.n	8002656 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0f      	ldr	r2, [pc, #60]	@ (8002668 <HAL_TIM_Base_MspInit+0x70>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d113      	bne.n	8002656 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800262e:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <HAL_TIM_Base_MspInit+0x6c>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002632:	4a0c      	ldr	r2, [pc, #48]	@ (8002664 <HAL_TIM_Base_MspInit+0x6c>)
 8002634:	f043 0320 	orr.w	r3, r3, #32
 8002638:	6593      	str	r3, [r2, #88]	@ 0x58
 800263a:	4b0a      	ldr	r3, [pc, #40]	@ (8002664 <HAL_TIM_Base_MspInit+0x6c>)
 800263c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263e:	f003 0320 	and.w	r3, r3, #32
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2100      	movs	r1, #0
 800264a:	2037      	movs	r0, #55	@ 0x37
 800264c:	f000 fbc0 	bl	8002dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8002650:	2037      	movs	r0, #55	@ 0x37
 8002652:	f000 fbd7 	bl	8002e04 <HAL_NVIC_EnableIRQ>
}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40012c00 	.word	0x40012c00
 8002664:	40021000 	.word	0x40021000
 8002668:	40001400 	.word	0x40001400

0800266c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b090      	sub	sp, #64	@ 0x40
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a6c      	ldr	r2, [pc, #432]	@ (800283c <HAL_TIM_Encoder_MspInit+0x1d0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d129      	bne.n	80026e2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800268e:	4b6c      	ldr	r3, [pc, #432]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002692:	4a6b      	ldr	r2, [pc, #428]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002694:	f043 0302 	orr.w	r3, r3, #2
 8002698:	6593      	str	r3, [r2, #88]	@ 0x58
 800269a:	4b69      	ldr	r3, [pc, #420]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800269c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	4b66      	ldr	r3, [pc, #408]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026aa:	4a65      	ldr	r2, [pc, #404]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026b2:	4b63      	ldr	r3, [pc, #396]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80026bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80026be:	2350      	movs	r3, #80	@ 0x50
 80026c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	2302      	movs	r3, #2
 80026c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026ce:	2302      	movs	r3, #2
 80026d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026d6:	4619      	mov	r1, r3
 80026d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026dc:	f000 fc60 	bl	8002fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80026e0:	e0a7      	b.n	8002832 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM4)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a57      	ldr	r2, [pc, #348]	@ (8002844 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d12a      	bne.n	8002742 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026ec:	4b54      	ldr	r3, [pc, #336]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f0:	4a53      	ldr	r2, [pc, #332]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026f2:	f043 0304 	orr.w	r3, r3, #4
 80026f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80026f8:	4b51      	ldr	r3, [pc, #324]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	623b      	str	r3, [r7, #32]
 8002702:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002704:	4b4e      	ldr	r3, [pc, #312]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002708:	4a4d      	ldr	r2, [pc, #308]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002710:	4b4b      	ldr	r3, [pc, #300]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800271c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002720:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002722:	2302      	movs	r3, #2
 8002724:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272a:	2300      	movs	r3, #0
 800272c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800272e:	230a      	movs	r3, #10
 8002730:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002732:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002736:	4619      	mov	r1, r3
 8002738:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800273c:	f000 fc30 	bl	8002fa0 <HAL_GPIO_Init>
}
 8002740:	e077      	b.n	8002832 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM5)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a40      	ldr	r2, [pc, #256]	@ (8002848 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d145      	bne.n	80027d8 <HAL_TIM_Encoder_MspInit+0x16c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800274c:	4b3c      	ldr	r3, [pc, #240]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800274e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002750:	4a3b      	ldr	r2, [pc, #236]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002752:	f043 0308 	orr.w	r3, r3, #8
 8002756:	6593      	str	r3, [r2, #88]	@ 0x58
 8002758:	4b39      	ldr	r3, [pc, #228]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800275a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002764:	4b36      	ldr	r3, [pc, #216]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002768:	4a35      	ldr	r2, [pc, #212]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800276a:	f043 0302 	orr.w	r3, r3, #2
 800276e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002770:	4b33      	ldr	r3, [pc, #204]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800277c:	4b30      	ldr	r3, [pc, #192]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800277e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002780:	4a2f      	ldr	r2, [pc, #188]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002788:	4b2d      	ldr	r3, [pc, #180]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800278a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002794:	2304      	movs	r3, #4
 8002796:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002798:	2302      	movs	r3, #2
 800279a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a0:	2300      	movs	r3, #0
 80027a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80027a4:	2302      	movs	r3, #2
 80027a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027ac:	4619      	mov	r1, r3
 80027ae:	4827      	ldr	r0, [pc, #156]	@ (800284c <HAL_TIM_Encoder_MspInit+0x1e0>)
 80027b0:	f000 fbf6 	bl	8002fa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c2:	2300      	movs	r3, #0
 80027c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80027c6:	2301      	movs	r3, #1
 80027c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027ce:	4619      	mov	r1, r3
 80027d0:	481f      	ldr	r0, [pc, #124]	@ (8002850 <HAL_TIM_Encoder_MspInit+0x1e4>)
 80027d2:	f000 fbe5 	bl	8002fa0 <HAL_GPIO_Init>
}
 80027d6:	e02c      	b.n	8002832 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM8)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002854 <HAL_TIM_Encoder_MspInit+0x1e8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d127      	bne.n	8002832 <HAL_TIM_Encoder_MspInit+0x1c6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80027e2:	4b17      	ldr	r3, [pc, #92]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80027e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e6:	4a16      	ldr	r2, [pc, #88]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80027e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80027ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80027ee:	4b14      	ldr	r3, [pc, #80]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80027f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027fa:	4b11      	ldr	r3, [pc, #68]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80027fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027fe:	4a10      	ldr	r2, [pc, #64]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002800:	f043 0304 	orr.w	r3, r3, #4
 8002804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002806:	4b0e      	ldr	r3, [pc, #56]	@ (8002840 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002812:	23c0      	movs	r3, #192	@ 0xc0
 8002814:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002816:	2302      	movs	r3, #2
 8002818:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002822:	2304      	movs	r3, #4
 8002824:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002826:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800282a:	4619      	mov	r1, r3
 800282c:	4808      	ldr	r0, [pc, #32]	@ (8002850 <HAL_TIM_Encoder_MspInit+0x1e4>)
 800282e:	f000 fbb7 	bl	8002fa0 <HAL_GPIO_Init>
}
 8002832:	bf00      	nop
 8002834:	3740      	adds	r7, #64	@ 0x40
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40000400 	.word	0x40000400
 8002840:	40021000 	.word	0x40021000
 8002844:	40000800 	.word	0x40000800
 8002848:	40000c00 	.word	0x40000c00
 800284c:	48000400 	.word	0x48000400
 8002850:	48000800 	.word	0x48000800
 8002854:	40013400 	.word	0x40013400

08002858 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002860:	f107 030c 	add.w	r3, r7, #12
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a11      	ldr	r2, [pc, #68]	@ (80028bc <HAL_TIM_MspPostInit+0x64>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d11b      	bne.n	80028b2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800287a:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <HAL_TIM_MspPostInit+0x68>)
 800287c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287e:	4a10      	ldr	r2, [pc, #64]	@ (80028c0 <HAL_TIM_MspPostInit+0x68>)
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002886:	4b0e      	ldr	r3, [pc, #56]	@ (80028c0 <HAL_TIM_MspPostInit+0x68>)
 8002888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002892:	230f      	movs	r3, #15
 8002894:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80028a2:	2302      	movs	r3, #2
 80028a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028a6:	f107 030c 	add.w	r3, r7, #12
 80028aa:	4619      	mov	r1, r3
 80028ac:	4805      	ldr	r0, [pc, #20]	@ (80028c4 <HAL_TIM_MspPostInit+0x6c>)
 80028ae:	f000 fb77 	bl	8002fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028b2:	bf00      	nop
 80028b4:	3720      	adds	r7, #32
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40012c00 	.word	0x40012c00
 80028c0:	40021000 	.word	0x40021000
 80028c4:	48000800 	.word	0x48000800

080028c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08c      	sub	sp, #48	@ 0x30
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80028d8:	4b2c      	ldr	r3, [pc, #176]	@ (800298c <HAL_InitTick+0xc4>)
 80028da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028dc:	4a2b      	ldr	r2, [pc, #172]	@ (800298c <HAL_InitTick+0xc4>)
 80028de:	f043 0310 	orr.w	r3, r3, #16
 80028e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80028e4:	4b29      	ldr	r3, [pc, #164]	@ (800298c <HAL_InitTick+0xc4>)
 80028e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028f0:	f107 020c 	add.w	r2, r7, #12
 80028f4:	f107 0310 	add.w	r3, r7, #16
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f001 fa86 	bl	8003e0c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002900:	f001 fa58 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 8002904:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002908:	4a21      	ldr	r2, [pc, #132]	@ (8002990 <HAL_InitTick+0xc8>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	0c9b      	lsrs	r3, r3, #18
 8002910:	3b01      	subs	r3, #1
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002914:	4b1f      	ldr	r3, [pc, #124]	@ (8002994 <HAL_InitTick+0xcc>)
 8002916:	4a20      	ldr	r2, [pc, #128]	@ (8002998 <HAL_InitTick+0xd0>)
 8002918:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800291a:	4b1e      	ldr	r3, [pc, #120]	@ (8002994 <HAL_InitTick+0xcc>)
 800291c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002920:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002922:	4a1c      	ldr	r2, [pc, #112]	@ (8002994 <HAL_InitTick+0xcc>)
 8002924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002926:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002928:	4b1a      	ldr	r3, [pc, #104]	@ (8002994 <HAL_InitTick+0xcc>)
 800292a:	2200      	movs	r2, #0
 800292c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292e:	4b19      	ldr	r3, [pc, #100]	@ (8002994 <HAL_InitTick+0xcc>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002934:	4817      	ldr	r0, [pc, #92]	@ (8002994 <HAL_InitTick+0xcc>)
 8002936:	f001 fd2f 	bl	8004398 <HAL_TIM_Base_Init>
 800293a:	4603      	mov	r3, r0
 800293c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002940:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002944:	2b00      	cmp	r3, #0
 8002946:	d11b      	bne.n	8002980 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002948:	4812      	ldr	r0, [pc, #72]	@ (8002994 <HAL_InitTick+0xcc>)
 800294a:	f001 fded 	bl	8004528 <HAL_TIM_Base_Start_IT>
 800294e:	4603      	mov	r3, r0
 8002950:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002954:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002958:	2b00      	cmp	r3, #0
 800295a:	d111      	bne.n	8002980 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800295c:	2036      	movs	r0, #54	@ 0x36
 800295e:	f000 fa51 	bl	8002e04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b0f      	cmp	r3, #15
 8002966:	d808      	bhi.n	800297a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002968:	2200      	movs	r2, #0
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	2036      	movs	r0, #54	@ 0x36
 800296e:	f000 fa2f 	bl	8002dd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002972:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <HAL_InitTick+0xd4>)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	e002      	b.n	8002980 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002980:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002984:	4618      	mov	r0, r3
 8002986:	3730      	adds	r7, #48	@ 0x30
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	431bde83 	.word	0x431bde83
 8002994:	200005f0 	.word	0x200005f0
 8002998:	40001000 	.word	0x40001000
 800299c:	20000004 	.word	0x20000004

080029a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029a4:	bf00      	nop
 80029a6:	e7fd      	b.n	80029a4 <NMI_Handler+0x4>

080029a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ac:	bf00      	nop
 80029ae:	e7fd      	b.n	80029ac <HardFault_Handler+0x4>

080029b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <MemManage_Handler+0x4>

080029b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029bc:	bf00      	nop
 80029be:	e7fd      	b.n	80029bc <BusFault_Handler+0x4>

080029c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029c4:	bf00      	nop
 80029c6:	e7fd      	b.n	80029c4 <UsageFault_Handler+0x4>

080029c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80029dc:	4802      	ldr	r0, [pc, #8]	@ (80029e8 <TIM6_DAC_IRQHandler+0x10>)
 80029de:	f002 f8c3 	bl	8004b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	200005f0 	.word	0x200005f0

080029ec <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80029f0:	4802      	ldr	r0, [pc, #8]	@ (80029fc <TIM7_DAC_IRQHandler+0x10>)
 80029f2:	f002 f8b9 	bl	8004b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	2000031c 	.word	0x2000031c

08002a00 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002a04:	4802      	ldr	r0, [pc, #8]	@ (8002a10 <LPUART1_IRQHandler+0x10>)
 8002a06:	f003 fb8b 	bl	8006120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000448 	.word	0x20000448

08002a14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
	return 1;
 8002a18:	2301      	movs	r3, #1
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <_kill>:

int _kill(int pid, int sig)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a2e:	f006 fd9b 	bl	8009568 <__errno>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2216      	movs	r2, #22
 8002a36:	601a      	str	r2, [r3, #0]
	return -1;
 8002a38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <_exit>:

void _exit (int status)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff ffe7 	bl	8002a24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a56:	bf00      	nop
 8002a58:	e7fd      	b.n	8002a56 <_exit+0x12>

08002a5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	e00a      	b.n	8002a82 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a6c:	f3af 8000 	nop.w
 8002a70:	4601      	mov	r1, r0
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	60ba      	str	r2, [r7, #8]
 8002a78:	b2ca      	uxtb	r2, r1
 8002a7a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	dbf0      	blt.n	8002a6c <_read+0x12>
	}

return len;
 8002a8a:	687b      	ldr	r3, [r7, #4]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	e009      	b.n	8002aba <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	60ba      	str	r2, [r7, #8]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	dbf1      	blt.n	8002aa6 <_write+0x12>
	}
	return len;
 8002ac2:	687b      	ldr	r3, [r7, #4]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <_close>:

int _close(int file)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
	return -1;
 8002ad4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002af4:	605a      	str	r2, [r3, #4]
	return 0;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <_isatty>:

int _isatty(int file)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	return 1;
 8002b0c:	2301      	movs	r3, #1
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b085      	sub	sp, #20
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
	return 0;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b3c:	4a14      	ldr	r2, [pc, #80]	@ (8002b90 <_sbrk+0x5c>)
 8002b3e:	4b15      	ldr	r3, [pc, #84]	@ (8002b94 <_sbrk+0x60>)
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b48:	4b13      	ldr	r3, [pc, #76]	@ (8002b98 <_sbrk+0x64>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d102      	bne.n	8002b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b50:	4b11      	ldr	r3, [pc, #68]	@ (8002b98 <_sbrk+0x64>)
 8002b52:	4a12      	ldr	r2, [pc, #72]	@ (8002b9c <_sbrk+0x68>)
 8002b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b56:	4b10      	ldr	r3, [pc, #64]	@ (8002b98 <_sbrk+0x64>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d207      	bcs.n	8002b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b64:	f006 fd00 	bl	8009568 <__errno>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	220c      	movs	r2, #12
 8002b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b72:	e009      	b.n	8002b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b74:	4b08      	ldr	r3, [pc, #32]	@ (8002b98 <_sbrk+0x64>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b7a:	4b07      	ldr	r3, [pc, #28]	@ (8002b98 <_sbrk+0x64>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	4a05      	ldr	r2, [pc, #20]	@ (8002b98 <_sbrk+0x64>)
 8002b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b86:	68fb      	ldr	r3, [r7, #12]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20020000 	.word	0x20020000
 8002b94:	00000400 	.word	0x00000400
 8002b98:	2000063c 	.word	0x2000063c
 8002b9c:	20000820 	.word	0x20000820

08002ba0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ba4:	4b06      	ldr	r3, [pc, #24]	@ (8002bc0 <SystemInit+0x20>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002baa:	4a05      	ldr	r2, [pc, #20]	@ (8002bc0 <SystemInit+0x20>)
 8002bac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bc4:	480d      	ldr	r0, [pc, #52]	@ (8002bfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bc6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bc8:	f7ff ffea 	bl	8002ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bcc:	480c      	ldr	r0, [pc, #48]	@ (8002c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bce:	490d      	ldr	r1, [pc, #52]	@ (8002c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002c08 <LoopForever+0xe>)
  movs r3, #0
 8002bd2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002bd4:	e002      	b.n	8002bdc <LoopCopyDataInit>

08002bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bda:	3304      	adds	r3, #4

08002bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be0:	d3f9      	bcc.n	8002bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002be2:	4a0a      	ldr	r2, [pc, #40]	@ (8002c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002be4:	4c0a      	ldr	r4, [pc, #40]	@ (8002c10 <LoopForever+0x16>)
  movs r3, #0
 8002be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be8:	e001      	b.n	8002bee <LoopFillZerobss>

08002bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bec:	3204      	adds	r2, #4

08002bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf0:	d3fb      	bcc.n	8002bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bf2:	f006 fcbf 	bl	8009574 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bf6:	f7ff fb0b 	bl	8002210 <main>

08002bfa <LoopForever>:

LoopForever:
    b LoopForever
 8002bfa:	e7fe      	b.n	8002bfa <LoopForever>
  ldr   r0, =_estack
 8002bfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c04:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8002c08:	0800da04 	.word	0x0800da04
  ldr r2, =_sbss
 8002c0c:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8002c10:	2000081c 	.word	0x2000081c

08002c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c14:	e7fe      	b.n	8002c14 <ADC1_2_IRQHandler>

08002c16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c20:	2003      	movs	r0, #3
 8002c22:	f000 f8ca 	bl	8002dba <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c26:	200f      	movs	r0, #15
 8002c28:	f7ff fe4e 	bl	80028c8 <HAL_InitTick>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	71fb      	strb	r3, [r7, #7]
 8002c36:	e001      	b.n	8002c3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c38:	f7ff fc1a 	bl	8002470 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c3c:	79fb      	ldrb	r3, [r7, #7]

}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	@ (8002c5c <HAL_GetTick+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 }
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000640 	.word	0x20000640

08002c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c92:	4a04      	ldr	r2, [pc, #16]	@ (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	60d3      	str	r3, [r2, #12]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cac:	4b04      	ldr	r3, [pc, #16]	@ (8002cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	0a1b      	lsrs	r3, r3, #8
 8002cb2:	f003 0307 	and.w	r3, r3, #7
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	db0b      	blt.n	8002cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	f003 021f 	and.w	r2, r3, #31
 8002cdc:	4907      	ldr	r1, [pc, #28]	@ (8002cfc <__NVIC_EnableIRQ+0x38>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	e000e100 	.word	0xe000e100

08002d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	6039      	str	r1, [r7, #0]
 8002d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	db0a      	blt.n	8002d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	490c      	ldr	r1, [pc, #48]	@ (8002d4c <__NVIC_SetPriority+0x4c>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	0112      	lsls	r2, r2, #4
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	440b      	add	r3, r1
 8002d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d28:	e00a      	b.n	8002d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	4908      	ldr	r1, [pc, #32]	@ (8002d50 <__NVIC_SetPriority+0x50>)
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	3b04      	subs	r3, #4
 8002d38:	0112      	lsls	r2, r2, #4
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	761a      	strb	r2, [r3, #24]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000e100 	.word	0xe000e100
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b089      	sub	sp, #36	@ 0x24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f1c3 0307 	rsb	r3, r3, #7
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	bf28      	it	cs
 8002d72:	2304      	movcs	r3, #4
 8002d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	2b06      	cmp	r3, #6
 8002d7c:	d902      	bls.n	8002d84 <NVIC_EncodePriority+0x30>
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3b03      	subs	r3, #3
 8002d82:	e000      	b.n	8002d86 <NVIC_EncodePriority+0x32>
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d88:	f04f 32ff 	mov.w	r2, #4294967295
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43da      	mvns	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	401a      	ands	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	fa01 f303 	lsl.w	r3, r1, r3
 8002da6:	43d9      	mvns	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dac:	4313      	orrs	r3, r2
         );
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3724      	adds	r7, #36	@ 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff ff4c 	bl	8002c60 <__NVIC_SetPriorityGrouping>
}
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dde:	f7ff ff63 	bl	8002ca8 <__NVIC_GetPriorityGrouping>
 8002de2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	6978      	ldr	r0, [r7, #20]
 8002dea:	f7ff ffb3 	bl	8002d54 <NVIC_EncodePriority>
 8002dee:	4602      	mov	r2, r0
 8002df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff ff82 	bl	8002d00 <__NVIC_SetPriority>
}
 8002dfc:	bf00      	nop
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff ff56 	bl	8002cc4 <__NVIC_EnableIRQ>
}
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d005      	beq.n	8002e44 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	73fb      	strb	r3, [r7, #15]
 8002e42:	e037      	b.n	8002eb4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 020e 	bic.w	r2, r2, #14
 8002e52:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e5e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e62:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e78:	f003 021f 	and.w	r2, r3, #31
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e80:	2101      	movs	r1, #1
 8002e82:	fa01 f202 	lsl.w	r2, r1, r2
 8002e86:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e90:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00c      	beq.n	8002eb4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ea8:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002eb2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d00d      	beq.n	8002f06 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2204      	movs	r2, #4
 8002eee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
 8002f04:	e047      	b.n	8002f96 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 020e 	bic.w	r2, r2, #14
 8002f14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0201 	bic.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	f003 021f 	and.w	r2, r3, #31
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	2101      	movs	r1, #1
 8002f44:	fa01 f202 	lsl.w	r2, r1, r2
 8002f48:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f52:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00c      	beq.n	8002f76 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f66:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f6a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f74:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	4798      	blx	r3
    }
  }
  return status;
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fae:	e15a      	b.n	8003266 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 814c 	beq.w	8003260 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d005      	beq.n	8002fe0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d130      	bne.n	8003042 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	2203      	movs	r2, #3
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003016:	2201      	movs	r2, #1
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4013      	ands	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	091b      	lsrs	r3, r3, #4
 800302c:	f003 0201 	and.w	r2, r3, #1
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b03      	cmp	r3, #3
 800304c:	d017      	beq.n	800307e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	2203      	movs	r2, #3
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4013      	ands	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d123      	bne.n	80030d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	08da      	lsrs	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3208      	adds	r2, #8
 8003092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003096:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	220f      	movs	r2, #15
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4013      	ands	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	08da      	lsrs	r2, r3, #3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3208      	adds	r2, #8
 80030cc:	6939      	ldr	r1, [r7, #16]
 80030ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	2203      	movs	r2, #3
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43db      	mvns	r3, r3
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4013      	ands	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 0203 	and.w	r2, r3, #3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 80a6 	beq.w	8003260 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003114:	4b5b      	ldr	r3, [pc, #364]	@ (8003284 <HAL_GPIO_Init+0x2e4>)
 8003116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003118:	4a5a      	ldr	r2, [pc, #360]	@ (8003284 <HAL_GPIO_Init+0x2e4>)
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003120:	4b58      	ldr	r3, [pc, #352]	@ (8003284 <HAL_GPIO_Init+0x2e4>)
 8003122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800312c:	4a56      	ldr	r2, [pc, #344]	@ (8003288 <HAL_GPIO_Init+0x2e8>)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	089b      	lsrs	r3, r3, #2
 8003132:	3302      	adds	r3, #2
 8003134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003138:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	220f      	movs	r2, #15
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4013      	ands	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003156:	d01f      	beq.n	8003198 <HAL_GPIO_Init+0x1f8>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a4c      	ldr	r2, [pc, #304]	@ (800328c <HAL_GPIO_Init+0x2ec>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d019      	beq.n	8003194 <HAL_GPIO_Init+0x1f4>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a4b      	ldr	r2, [pc, #300]	@ (8003290 <HAL_GPIO_Init+0x2f0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d013      	beq.n	8003190 <HAL_GPIO_Init+0x1f0>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a4a      	ldr	r2, [pc, #296]	@ (8003294 <HAL_GPIO_Init+0x2f4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00d      	beq.n	800318c <HAL_GPIO_Init+0x1ec>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a49      	ldr	r2, [pc, #292]	@ (8003298 <HAL_GPIO_Init+0x2f8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d007      	beq.n	8003188 <HAL_GPIO_Init+0x1e8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a48      	ldr	r2, [pc, #288]	@ (800329c <HAL_GPIO_Init+0x2fc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d101      	bne.n	8003184 <HAL_GPIO_Init+0x1e4>
 8003180:	2305      	movs	r3, #5
 8003182:	e00a      	b.n	800319a <HAL_GPIO_Init+0x1fa>
 8003184:	2306      	movs	r3, #6
 8003186:	e008      	b.n	800319a <HAL_GPIO_Init+0x1fa>
 8003188:	2304      	movs	r3, #4
 800318a:	e006      	b.n	800319a <HAL_GPIO_Init+0x1fa>
 800318c:	2303      	movs	r3, #3
 800318e:	e004      	b.n	800319a <HAL_GPIO_Init+0x1fa>
 8003190:	2302      	movs	r3, #2
 8003192:	e002      	b.n	800319a <HAL_GPIO_Init+0x1fa>
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <HAL_GPIO_Init+0x1fa>
 8003198:	2300      	movs	r3, #0
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	f002 0203 	and.w	r2, r2, #3
 80031a0:	0092      	lsls	r2, r2, #2
 80031a2:	4093      	lsls	r3, r2
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031aa:	4937      	ldr	r1, [pc, #220]	@ (8003288 <HAL_GPIO_Init+0x2e8>)
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	089b      	lsrs	r3, r3, #2
 80031b0:	3302      	adds	r3, #2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031b8:	4b39      	ldr	r3, [pc, #228]	@ (80032a0 <HAL_GPIO_Init+0x300>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031dc:	4a30      	ldr	r2, [pc, #192]	@ (80032a0 <HAL_GPIO_Init+0x300>)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031e2:	4b2f      	ldr	r3, [pc, #188]	@ (80032a0 <HAL_GPIO_Init+0x300>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	43db      	mvns	r3, r3
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4013      	ands	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003206:	4a26      	ldr	r2, [pc, #152]	@ (80032a0 <HAL_GPIO_Init+0x300>)
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800320c:	4b24      	ldr	r3, [pc, #144]	@ (80032a0 <HAL_GPIO_Init+0x300>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	43db      	mvns	r3, r3
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4013      	ands	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003230:	4a1b      	ldr	r2, [pc, #108]	@ (80032a0 <HAL_GPIO_Init+0x300>)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003236:	4b1a      	ldr	r3, [pc, #104]	@ (80032a0 <HAL_GPIO_Init+0x300>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	43db      	mvns	r3, r3
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4013      	ands	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800325a:	4a11      	ldr	r2, [pc, #68]	@ (80032a0 <HAL_GPIO_Init+0x300>)
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	3301      	adds	r3, #1
 8003264:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	f47f ae9d 	bne.w	8002fb0 <HAL_GPIO_Init+0x10>
  }
}
 8003276:	bf00      	nop
 8003278:	bf00      	nop
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	40021000 	.word	0x40021000
 8003288:	40010000 	.word	0x40010000
 800328c:	48000400 	.word	0x48000400
 8003290:	48000800 	.word	0x48000800
 8003294:	48000c00 	.word	0x48000c00
 8003298:	48001000 	.word	0x48001000
 800329c:	48001400 	.word	0x48001400
 80032a0:	40010400 	.word	0x40010400

080032a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	807b      	strh	r3, [r7, #2]
 80032b0:	4613      	mov	r3, r2
 80032b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032b4:	787b      	ldrb	r3, [r7, #1]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032ba:	887a      	ldrh	r2, [r7, #2]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032c0:	e002      	b.n	80032c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032c2:	887a      	ldrh	r2, [r7, #2]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d141      	bne.n	8003366 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ee:	d131      	bne.n	8003354 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032f0:	4b47      	ldr	r3, [pc, #284]	@ (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032f6:	4a46      	ldr	r2, [pc, #280]	@ (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003300:	4b43      	ldr	r3, [pc, #268]	@ (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003308:	4a41      	ldr	r2, [pc, #260]	@ (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800330e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003310:	4b40      	ldr	r3, [pc, #256]	@ (8003414 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2232      	movs	r2, #50	@ 0x32
 8003316:	fb02 f303 	mul.w	r3, r2, r3
 800331a:	4a3f      	ldr	r2, [pc, #252]	@ (8003418 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	0c9b      	lsrs	r3, r3, #18
 8003322:	3301      	adds	r3, #1
 8003324:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003326:	e002      	b.n	800332e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	3b01      	subs	r3, #1
 800332c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800332e:	4b38      	ldr	r3, [pc, #224]	@ (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800333a:	d102      	bne.n	8003342 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f2      	bne.n	8003328 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003342:	4b33      	ldr	r3, [pc, #204]	@ (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800334a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800334e:	d158      	bne.n	8003402 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e057      	b.n	8003404 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003354:	4b2e      	ldr	r3, [pc, #184]	@ (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800335a:	4a2d      	ldr	r2, [pc, #180]	@ (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003360:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003364:	e04d      	b.n	8003402 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800336c:	d141      	bne.n	80033f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800336e:	4b28      	ldr	r3, [pc, #160]	@ (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800337a:	d131      	bne.n	80033e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800337c:	4b24      	ldr	r3, [pc, #144]	@ (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003382:	4a23      	ldr	r2, [pc, #140]	@ (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003388:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800338c:	4b20      	ldr	r3, [pc, #128]	@ (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003394:	4a1e      	ldr	r2, [pc, #120]	@ (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003396:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800339a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800339c:	4b1d      	ldr	r3, [pc, #116]	@ (8003414 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2232      	movs	r2, #50	@ 0x32
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003418 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	0c9b      	lsrs	r3, r3, #18
 80033ae:	3301      	adds	r3, #1
 80033b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033b2:	e002      	b.n	80033ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ba:	4b15      	ldr	r3, [pc, #84]	@ (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c6:	d102      	bne.n	80033ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f2      	bne.n	80033b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033ce:	4b10      	ldr	r3, [pc, #64]	@ (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033da:	d112      	bne.n	8003402 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e011      	b.n	8003404 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80033f0:	e007      	b.n	8003402 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033f2:	4b07      	ldr	r3, [pc, #28]	@ (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033fa:	4a05      	ldr	r2, [pc, #20]	@ (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003400:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	40007000 	.word	0x40007000
 8003414:	20000000 	.word	0x20000000
 8003418:	431bde83 	.word	0x431bde83

0800341c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003420:	4b05      	ldr	r3, [pc, #20]	@ (8003438 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4a04      	ldr	r2, [pc, #16]	@ (8003438 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003426:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800342a:	6093      	str	r3, [r2, #8]
}
 800342c:	bf00      	nop
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40007000 	.word	0x40007000

0800343c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e2fe      	b.n	8003a4c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d075      	beq.n	8003546 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800345a:	4b97      	ldr	r3, [pc, #604]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003464:	4b94      	ldr	r3, [pc, #592]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2b0c      	cmp	r3, #12
 8003472:	d102      	bne.n	800347a <HAL_RCC_OscConfig+0x3e>
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2b03      	cmp	r3, #3
 8003478:	d002      	beq.n	8003480 <HAL_RCC_OscConfig+0x44>
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	2b08      	cmp	r3, #8
 800347e:	d10b      	bne.n	8003498 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003480:	4b8d      	ldr	r3, [pc, #564]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d05b      	beq.n	8003544 <HAL_RCC_OscConfig+0x108>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d157      	bne.n	8003544 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e2d9      	b.n	8003a4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034a0:	d106      	bne.n	80034b0 <HAL_RCC_OscConfig+0x74>
 80034a2:	4b85      	ldr	r3, [pc, #532]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a84      	ldr	r2, [pc, #528]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 80034a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	e01d      	b.n	80034ec <HAL_RCC_OscConfig+0xb0>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCC_OscConfig+0x98>
 80034ba:	4b7f      	ldr	r3, [pc, #508]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a7e      	ldr	r2, [pc, #504]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 80034c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	4b7c      	ldr	r3, [pc, #496]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a7b      	ldr	r2, [pc, #492]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 80034cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	e00b      	b.n	80034ec <HAL_RCC_OscConfig+0xb0>
 80034d4:	4b78      	ldr	r3, [pc, #480]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a77      	ldr	r2, [pc, #476]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 80034da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	4b75      	ldr	r3, [pc, #468]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a74      	ldr	r2, [pc, #464]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 80034e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d013      	beq.n	800351c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7ff fba8 	bl	8002c48 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034fc:	f7ff fba4 	bl	8002c48 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b64      	cmp	r3, #100	@ 0x64
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e29e      	b.n	8003a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800350e:	4b6a      	ldr	r3, [pc, #424]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0xc0>
 800351a:	e014      	b.n	8003546 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7ff fb94 	bl	8002c48 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003524:	f7ff fb90 	bl	8002c48 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b64      	cmp	r3, #100	@ 0x64
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e28a      	b.n	8003a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003536:	4b60      	ldr	r3, [pc, #384]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0xe8>
 8003542:	e000      	b.n	8003546 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d075      	beq.n	800363e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003552:	4b59      	ldr	r3, [pc, #356]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800355c:	4b56      	ldr	r3, [pc, #344]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	2b0c      	cmp	r3, #12
 800356a:	d102      	bne.n	8003572 <HAL_RCC_OscConfig+0x136>
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d002      	beq.n	8003578 <HAL_RCC_OscConfig+0x13c>
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2b04      	cmp	r3, #4
 8003576:	d11f      	bne.n	80035b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003578:	4b4f      	ldr	r3, [pc, #316]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_RCC_OscConfig+0x154>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e25d      	b.n	8003a4c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003590:	4b49      	ldr	r3, [pc, #292]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	061b      	lsls	r3, r3, #24
 800359e:	4946      	ldr	r1, [pc, #280]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035a4:	4b45      	ldr	r3, [pc, #276]	@ (80036bc <HAL_RCC_OscConfig+0x280>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff f98d 	bl	80028c8 <HAL_InitTick>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d043      	beq.n	800363c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e249      	b.n	8003a4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d023      	beq.n	8003608 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c0:	4b3d      	ldr	r3, [pc, #244]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a3c      	ldr	r2, [pc, #240]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 80035c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035cc:	f7ff fb3c 	bl	8002c48 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d4:	f7ff fb38 	bl	8002c48 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e232      	b.n	8003a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035e6:	4b34      	ldr	r3, [pc, #208]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f2:	4b31      	ldr	r3, [pc, #196]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	061b      	lsls	r3, r3, #24
 8003600:	492d      	ldr	r1, [pc, #180]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 8003602:	4313      	orrs	r3, r2
 8003604:	604b      	str	r3, [r1, #4]
 8003606:	e01a      	b.n	800363e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003608:	4b2b      	ldr	r3, [pc, #172]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a2a      	ldr	r2, [pc, #168]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 800360e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7ff fb18 	bl	8002c48 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800361c:	f7ff fb14 	bl	8002c48 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e20e      	b.n	8003a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800362e:	4b22      	ldr	r3, [pc, #136]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x1e0>
 800363a:	e000      	b.n	800363e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800363c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d041      	beq.n	80036ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d01c      	beq.n	800368c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003652:	4b19      	ldr	r3, [pc, #100]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 8003654:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003658:	4a17      	ldr	r2, [pc, #92]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003662:	f7ff faf1 	bl	8002c48 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800366a:	f7ff faed 	bl	8002c48 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e1e7      	b.n	8003a4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800367c:	4b0e      	ldr	r3, [pc, #56]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 800367e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0ef      	beq.n	800366a <HAL_RCC_OscConfig+0x22e>
 800368a:	e020      	b.n	80036ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800368c:	4b0a      	ldr	r3, [pc, #40]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 800368e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003692:	4a09      	ldr	r2, [pc, #36]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 8003694:	f023 0301 	bic.w	r3, r3, #1
 8003698:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7ff fad4 	bl	8002c48 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036a2:	e00d      	b.n	80036c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a4:	f7ff fad0 	bl	8002c48 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d906      	bls.n	80036c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e1ca      	b.n	8003a4c <HAL_RCC_OscConfig+0x610>
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000
 80036bc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036c0:	4b8c      	ldr	r3, [pc, #560]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 80036c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1ea      	bne.n	80036a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 80a6 	beq.w	8003828 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036dc:	2300      	movs	r3, #0
 80036de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036e0:	4b84      	ldr	r3, [pc, #528]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 80036e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_RCC_OscConfig+0x2b4>
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <HAL_RCC_OscConfig+0x2b6>
 80036f0:	2300      	movs	r3, #0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00d      	beq.n	8003712 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f6:	4b7f      	ldr	r3, [pc, #508]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 80036f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036fa:	4a7e      	ldr	r2, [pc, #504]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 80036fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003700:	6593      	str	r3, [r2, #88]	@ 0x58
 8003702:	4b7c      	ldr	r3, [pc, #496]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 8003704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800370e:	2301      	movs	r3, #1
 8003710:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003712:	4b79      	ldr	r3, [pc, #484]	@ (80038f8 <HAL_RCC_OscConfig+0x4bc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371a:	2b00      	cmp	r3, #0
 800371c:	d118      	bne.n	8003750 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800371e:	4b76      	ldr	r3, [pc, #472]	@ (80038f8 <HAL_RCC_OscConfig+0x4bc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a75      	ldr	r2, [pc, #468]	@ (80038f8 <HAL_RCC_OscConfig+0x4bc>)
 8003724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372a:	f7ff fa8d 	bl	8002c48 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003732:	f7ff fa89 	bl	8002c48 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e183      	b.n	8003a4c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003744:	4b6c      	ldr	r3, [pc, #432]	@ (80038f8 <HAL_RCC_OscConfig+0x4bc>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d108      	bne.n	800376a <HAL_RCC_OscConfig+0x32e>
 8003758:	4b66      	ldr	r3, [pc, #408]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 800375a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375e:	4a65      	ldr	r2, [pc, #404]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003768:	e024      	b.n	80037b4 <HAL_RCC_OscConfig+0x378>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b05      	cmp	r3, #5
 8003770:	d110      	bne.n	8003794 <HAL_RCC_OscConfig+0x358>
 8003772:	4b60      	ldr	r3, [pc, #384]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003778:	4a5e      	ldr	r2, [pc, #376]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 800377a:	f043 0304 	orr.w	r3, r3, #4
 800377e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003782:	4b5c      	ldr	r3, [pc, #368]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 8003784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003788:	4a5a      	ldr	r2, [pc, #360]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003792:	e00f      	b.n	80037b4 <HAL_RCC_OscConfig+0x378>
 8003794:	4b57      	ldr	r3, [pc, #348]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800379a:	4a56      	ldr	r2, [pc, #344]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 800379c:	f023 0301 	bic.w	r3, r3, #1
 80037a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037a4:	4b53      	ldr	r3, [pc, #332]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037aa:	4a52      	ldr	r2, [pc, #328]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 80037ac:	f023 0304 	bic.w	r3, r3, #4
 80037b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d016      	beq.n	80037ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037bc:	f7ff fa44 	bl	8002c48 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c2:	e00a      	b.n	80037da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c4:	f7ff fa40 	bl	8002c48 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e138      	b.n	8003a4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037da:	4b46      	ldr	r3, [pc, #280]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 80037dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ed      	beq.n	80037c4 <HAL_RCC_OscConfig+0x388>
 80037e8:	e015      	b.n	8003816 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ea:	f7ff fa2d 	bl	8002c48 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037f0:	e00a      	b.n	8003808 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f2:	f7ff fa29 	bl	8002c48 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003800:	4293      	cmp	r3, r2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e121      	b.n	8003a4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003808:	4b3a      	ldr	r3, [pc, #232]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1ed      	bne.n	80037f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003816:	7ffb      	ldrb	r3, [r7, #31]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d105      	bne.n	8003828 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800381c:	4b35      	ldr	r3, [pc, #212]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003820:	4a34      	ldr	r2, [pc, #208]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 8003822:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003826:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d03c      	beq.n	80038ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01c      	beq.n	8003876 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800383c:	4b2d      	ldr	r3, [pc, #180]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 800383e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003842:	4a2c      	ldr	r2, [pc, #176]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384c:	f7ff f9fc 	bl	8002c48 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003854:	f7ff f9f8 	bl	8002c48 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e0f2      	b.n	8003a4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003866:	4b23      	ldr	r3, [pc, #140]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 8003868:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0ef      	beq.n	8003854 <HAL_RCC_OscConfig+0x418>
 8003874:	e01b      	b.n	80038ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003876:	4b1f      	ldr	r3, [pc, #124]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 8003878:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800387c:	4a1d      	ldr	r2, [pc, #116]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 800387e:	f023 0301 	bic.w	r3, r3, #1
 8003882:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003886:	f7ff f9df 	bl	8002c48 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800388e:	f7ff f9db 	bl	8002c48 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e0d5      	b.n	8003a4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038a0:	4b14      	ldr	r3, [pc, #80]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 80038a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1ef      	bne.n	800388e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 80c9 	beq.w	8003a4a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038b8:	4b0e      	ldr	r3, [pc, #56]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 030c 	and.w	r3, r3, #12
 80038c0:	2b0c      	cmp	r3, #12
 80038c2:	f000 8083 	beq.w	80039cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d15e      	bne.n	800398c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ce:	4b09      	ldr	r3, [pc, #36]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a08      	ldr	r2, [pc, #32]	@ (80038f4 <HAL_RCC_OscConfig+0x4b8>)
 80038d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038da:	f7ff f9b5 	bl	8002c48 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e0:	e00c      	b.n	80038fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e2:	f7ff f9b1 	bl	8002c48 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d905      	bls.n	80038fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0ab      	b.n	8003a4c <HAL_RCC_OscConfig+0x610>
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038fc:	4b55      	ldr	r3, [pc, #340]	@ (8003a54 <HAL_RCC_OscConfig+0x618>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1ec      	bne.n	80038e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003908:	4b52      	ldr	r3, [pc, #328]	@ (8003a54 <HAL_RCC_OscConfig+0x618>)
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	4b52      	ldr	r3, [pc, #328]	@ (8003a58 <HAL_RCC_OscConfig+0x61c>)
 800390e:	4013      	ands	r3, r2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6a11      	ldr	r1, [r2, #32]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003918:	3a01      	subs	r2, #1
 800391a:	0112      	lsls	r2, r2, #4
 800391c:	4311      	orrs	r1, r2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003922:	0212      	lsls	r2, r2, #8
 8003924:	4311      	orrs	r1, r2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800392a:	0852      	lsrs	r2, r2, #1
 800392c:	3a01      	subs	r2, #1
 800392e:	0552      	lsls	r2, r2, #21
 8003930:	4311      	orrs	r1, r2
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003936:	0852      	lsrs	r2, r2, #1
 8003938:	3a01      	subs	r2, #1
 800393a:	0652      	lsls	r2, r2, #25
 800393c:	4311      	orrs	r1, r2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003942:	06d2      	lsls	r2, r2, #27
 8003944:	430a      	orrs	r2, r1
 8003946:	4943      	ldr	r1, [pc, #268]	@ (8003a54 <HAL_RCC_OscConfig+0x618>)
 8003948:	4313      	orrs	r3, r2
 800394a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800394c:	4b41      	ldr	r3, [pc, #260]	@ (8003a54 <HAL_RCC_OscConfig+0x618>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a40      	ldr	r2, [pc, #256]	@ (8003a54 <HAL_RCC_OscConfig+0x618>)
 8003952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003956:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003958:	4b3e      	ldr	r3, [pc, #248]	@ (8003a54 <HAL_RCC_OscConfig+0x618>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4a3d      	ldr	r2, [pc, #244]	@ (8003a54 <HAL_RCC_OscConfig+0x618>)
 800395e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003962:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7ff f970 	bl	8002c48 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396c:	f7ff f96c 	bl	8002c48 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e066      	b.n	8003a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397e:	4b35      	ldr	r3, [pc, #212]	@ (8003a54 <HAL_RCC_OscConfig+0x618>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x530>
 800398a:	e05e      	b.n	8003a4a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398c:	4b31      	ldr	r3, [pc, #196]	@ (8003a54 <HAL_RCC_OscConfig+0x618>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a30      	ldr	r2, [pc, #192]	@ (8003a54 <HAL_RCC_OscConfig+0x618>)
 8003992:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7ff f956 	bl	8002c48 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a0:	f7ff f952 	bl	8002c48 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e04c      	b.n	8003a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039b2:	4b28      	ldr	r3, [pc, #160]	@ (8003a54 <HAL_RCC_OscConfig+0x618>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80039be:	4b25      	ldr	r3, [pc, #148]	@ (8003a54 <HAL_RCC_OscConfig+0x618>)
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	4924      	ldr	r1, [pc, #144]	@ (8003a54 <HAL_RCC_OscConfig+0x618>)
 80039c4:	4b25      	ldr	r3, [pc, #148]	@ (8003a5c <HAL_RCC_OscConfig+0x620>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	60cb      	str	r3, [r1, #12]
 80039ca:	e03e      	b.n	8003a4a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e039      	b.n	8003a4c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80039d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003a54 <HAL_RCC_OscConfig+0x618>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f003 0203 	and.w	r2, r3, #3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d12c      	bne.n	8003a46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f6:	3b01      	subs	r3, #1
 80039f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d123      	bne.n	8003a46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a08:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d11b      	bne.n	8003a46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a18:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d113      	bne.n	8003a46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a28:	085b      	lsrs	r3, r3, #1
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d109      	bne.n	8003a46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a3c:	085b      	lsrs	r3, r3, #1
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d001      	beq.n	8003a4a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3720      	adds	r7, #32
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40021000 	.word	0x40021000
 8003a58:	019f800c 	.word	0x019f800c
 8003a5c:	feeefffc 	.word	0xfeeefffc

08003a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e11e      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a78:	4b91      	ldr	r3, [pc, #580]	@ (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d910      	bls.n	8003aa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a86:	4b8e      	ldr	r3, [pc, #568]	@ (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f023 020f 	bic.w	r2, r3, #15
 8003a8e:	498c      	ldr	r1, [pc, #560]	@ (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	4b8a      	ldr	r3, [pc, #552]	@ (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e106      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d073      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d129      	bne.n	8003b10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003abc:	4b81      	ldr	r3, [pc, #516]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0f4      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003acc:	f000 f9d0 	bl	8003e70 <RCC_GetSysClockFreqFromPLLSource>
 8003ad0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4a7c      	ldr	r2, [pc, #496]	@ (8003cc8 <HAL_RCC_ClockConfig+0x268>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d93f      	bls.n	8003b5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ada:	4b7a      	ldr	r3, [pc, #488]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d033      	beq.n	8003b5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d12f      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003afa:	4b72      	ldr	r3, [pc, #456]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b02:	4a70      	ldr	r2, [pc, #448]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b0a:	2380      	movs	r3, #128	@ 0x80
 8003b0c:	617b      	str	r3, [r7, #20]
 8003b0e:	e024      	b.n	8003b5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d107      	bne.n	8003b28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b18:	4b6a      	ldr	r3, [pc, #424]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d109      	bne.n	8003b38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0c6      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b28:	4b66      	ldr	r3, [pc, #408]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0be      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b38:	f000 f8ce 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003b3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4a61      	ldr	r2, [pc, #388]	@ (8003cc8 <HAL_RCC_ClockConfig+0x268>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d909      	bls.n	8003b5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b46:	4b5f      	ldr	r3, [pc, #380]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b4e:	4a5d      	ldr	r2, [pc, #372]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b56:	2380      	movs	r3, #128	@ 0x80
 8003b58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b5a:	4b5a      	ldr	r3, [pc, #360]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f023 0203 	bic.w	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4957      	ldr	r1, [pc, #348]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b6c:	f7ff f86c 	bl	8002c48 <HAL_GetTick>
 8003b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b74:	f7ff f868 	bl	8002c48 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e095      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8a:	4b4e      	ldr	r3, [pc, #312]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 020c 	and.w	r2, r3, #12
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d1eb      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d023      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb4:	4b43      	ldr	r3, [pc, #268]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	4a42      	ldr	r2, [pc, #264]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003bba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003bbe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0308 	and.w	r3, r3, #8
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003bcc:	4b3d      	ldr	r3, [pc, #244]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003bd4:	4a3b      	ldr	r2, [pc, #236]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003bd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003bda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bdc:	4b39      	ldr	r3, [pc, #228]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4936      	ldr	r1, [pc, #216]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	608b      	str	r3, [r1, #8]
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2b80      	cmp	r3, #128	@ 0x80
 8003bf4:	d105      	bne.n	8003c02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003bf6:	4b33      	ldr	r3, [pc, #204]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	4a32      	ldr	r2, [pc, #200]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003bfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c02:	4b2f      	ldr	r3, [pc, #188]	@ (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d21d      	bcs.n	8003c4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c10:	4b2b      	ldr	r3, [pc, #172]	@ (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f023 020f 	bic.w	r2, r3, #15
 8003c18:	4929      	ldr	r1, [pc, #164]	@ (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c20:	f7ff f812 	bl	8002c48 <HAL_GetTick>
 8003c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c28:	f7ff f80e 	bl	8002c48 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e03b      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3e:	4b20      	ldr	r3, [pc, #128]	@ (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d1ed      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c58:	4b1a      	ldr	r3, [pc, #104]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4917      	ldr	r1, [pc, #92]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c76:	4b13      	ldr	r3, [pc, #76]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	490f      	ldr	r1, [pc, #60]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c8a:	f000 f825 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	091b      	lsrs	r3, r3, #4
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	490c      	ldr	r1, [pc, #48]	@ (8003ccc <HAL_RCC_ClockConfig+0x26c>)
 8003c9c:	5ccb      	ldrb	r3, [r1, r3]
 8003c9e:	f003 031f 	and.w	r3, r3, #31
 8003ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd0 <HAL_RCC_ClockConfig+0x270>)
 8003ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003caa:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd4 <HAL_RCC_ClockConfig+0x274>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fe fe0a 	bl	80028c8 <HAL_InitTick>
 8003cb4:	4603      	mov	r3, r0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40022000 	.word	0x40022000
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	04c4b400 	.word	0x04c4b400
 8003ccc:	0800d56c 	.word	0x0800d56c
 8003cd0:	20000000 	.word	0x20000000
 8003cd4:	20000004 	.word	0x20000004

08003cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003cde:	4b2c      	ldr	r3, [pc, #176]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d102      	bne.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cea:	4b2a      	ldr	r3, [pc, #168]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	e047      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003cf0:	4b27      	ldr	r3, [pc, #156]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d102      	bne.n	8003d02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cfc:	4b26      	ldr	r3, [pc, #152]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	e03e      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d02:	4b23      	ldr	r3, [pc, #140]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	2b0c      	cmp	r3, #12
 8003d0c:	d136      	bne.n	8003d7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d0e:	4b20      	ldr	r3, [pc, #128]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d18:	4b1d      	ldr	r3, [pc, #116]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	3301      	adds	r3, #1
 8003d24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d10c      	bne.n	8003d46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d2c:	4a1a      	ldr	r2, [pc, #104]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d34:	4a16      	ldr	r2, [pc, #88]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d36:	68d2      	ldr	r2, [r2, #12]
 8003d38:	0a12      	lsrs	r2, r2, #8
 8003d3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d3e:	fb02 f303 	mul.w	r3, r2, r3
 8003d42:	617b      	str	r3, [r7, #20]
      break;
 8003d44:	e00c      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d46:	4a13      	ldr	r2, [pc, #76]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4e:	4a10      	ldr	r2, [pc, #64]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d50:	68d2      	ldr	r2, [r2, #12]
 8003d52:	0a12      	lsrs	r2, r2, #8
 8003d54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d58:	fb02 f303 	mul.w	r3, r2, r3
 8003d5c:	617b      	str	r3, [r7, #20]
      break;
 8003d5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d60:	4b0b      	ldr	r3, [pc, #44]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	0e5b      	lsrs	r3, r3, #25
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	e001      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d80:	693b      	ldr	r3, [r7, #16]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000
 8003d94:	00f42400 	.word	0x00f42400
 8003d98:	016e3600 	.word	0x016e3600

08003d9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da0:	4b03      	ldr	r3, [pc, #12]	@ (8003db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003da2:	681b      	ldr	r3, [r3, #0]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20000000 	.word	0x20000000

08003db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003db8:	f7ff fff0 	bl	8003d9c <HAL_RCC_GetHCLKFreq>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	4b06      	ldr	r3, [pc, #24]	@ (8003dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	4904      	ldr	r1, [pc, #16]	@ (8003ddc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dca:	5ccb      	ldrb	r3, [r1, r3]
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	0800d57c 	.word	0x0800d57c

08003de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003de4:	f7ff ffda 	bl	8003d9c <HAL_RCC_GetHCLKFreq>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	0adb      	lsrs	r3, r3, #11
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	4904      	ldr	r1, [pc, #16]	@ (8003e08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003df6:	5ccb      	ldrb	r3, [r1, r3]
 8003df8:	f003 031f 	and.w	r3, r3, #31
 8003dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40021000 	.word	0x40021000
 8003e08:	0800d57c 	.word	0x0800d57c

08003e0c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	220f      	movs	r2, #15
 8003e1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003e1c:	4b12      	ldr	r3, [pc, #72]	@ (8003e68 <HAL_RCC_GetClockConfig+0x5c>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0203 	and.w	r2, r3, #3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003e28:	4b0f      	ldr	r3, [pc, #60]	@ (8003e68 <HAL_RCC_GetClockConfig+0x5c>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003e34:	4b0c      	ldr	r3, [pc, #48]	@ (8003e68 <HAL_RCC_GetClockConfig+0x5c>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003e40:	4b09      	ldr	r3, [pc, #36]	@ (8003e68 <HAL_RCC_GetClockConfig+0x5c>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	08db      	lsrs	r3, r3, #3
 8003e46:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003e4e:	4b07      	ldr	r3, [pc, #28]	@ (8003e6c <HAL_RCC_GetClockConfig+0x60>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 020f 	and.w	r2, r3, #15
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	601a      	str	r2, [r3, #0]
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40022000 	.word	0x40022000

08003e70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e76:	4b1e      	ldr	r3, [pc, #120]	@ (8003ef0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e80:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d10c      	bne.n	8003eae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e94:	4a17      	ldr	r2, [pc, #92]	@ (8003ef4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9c:	4a14      	ldr	r2, [pc, #80]	@ (8003ef0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e9e:	68d2      	ldr	r2, [r2, #12]
 8003ea0:	0a12      	lsrs	r2, r2, #8
 8003ea2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ea6:	fb02 f303 	mul.w	r3, r2, r3
 8003eaa:	617b      	str	r3, [r7, #20]
    break;
 8003eac:	e00c      	b.n	8003ec8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003eae:	4a12      	ldr	r2, [pc, #72]	@ (8003ef8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb6:	4a0e      	ldr	r2, [pc, #56]	@ (8003ef0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003eb8:	68d2      	ldr	r2, [r2, #12]
 8003eba:	0a12      	lsrs	r2, r2, #8
 8003ebc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ec0:	fb02 f303 	mul.w	r3, r2, r3
 8003ec4:	617b      	str	r3, [r7, #20]
    break;
 8003ec6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ec8:	4b09      	ldr	r3, [pc, #36]	@ (8003ef0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	0e5b      	lsrs	r3, r3, #25
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003ee2:	687b      	ldr	r3, [r7, #4]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	016e3600 	.word	0x016e3600
 8003ef8:	00f42400 	.word	0x00f42400

08003efc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f04:	2300      	movs	r3, #0
 8003f06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f08:	2300      	movs	r3, #0
 8003f0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8098 	beq.w	800404a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f1e:	4b43      	ldr	r3, [pc, #268]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10d      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f2a:	4b40      	ldr	r3, [pc, #256]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2e:	4a3f      	ldr	r2, [pc, #252]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f34:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f36:	4b3d      	ldr	r3, [pc, #244]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f42:	2301      	movs	r3, #1
 8003f44:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f46:	4b3a      	ldr	r3, [pc, #232]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a39      	ldr	r2, [pc, #228]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f52:	f7fe fe79 	bl	8002c48 <HAL_GetTick>
 8003f56:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f58:	e009      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f5a:	f7fe fe75 	bl	8002c48 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d902      	bls.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	74fb      	strb	r3, [r7, #19]
        break;
 8003f6c:	e005      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f6e:	4b30      	ldr	r3, [pc, #192]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0ef      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f7a:	7cfb      	ldrb	r3, [r7, #19]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d159      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f80:	4b2a      	ldr	r3, [pc, #168]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f8a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d01e      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d019      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f9c:	4b23      	ldr	r3, [pc, #140]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fa6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fa8:	4b20      	ldr	r3, [pc, #128]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fae:	4a1f      	ldr	r2, [pc, #124]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fbe:	4a1b      	ldr	r2, [pc, #108]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fc8:	4a18      	ldr	r2, [pc, #96]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d016      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fda:	f7fe fe35 	bl	8002c48 <HAL_GetTick>
 8003fde:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fe0:	e00b      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe2:	f7fe fe31 	bl	8002c48 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d902      	bls.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	74fb      	strb	r3, [r7, #19]
            break;
 8003ff8:	e006      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0ec      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004008:	7cfb      	ldrb	r3, [r7, #19]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10b      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800400e:	4b07      	ldr	r3, [pc, #28]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004014:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800401c:	4903      	ldr	r1, [pc, #12]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004024:	e008      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004026:	7cfb      	ldrb	r3, [r7, #19]
 8004028:	74bb      	strb	r3, [r7, #18]
 800402a:	e005      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800402c:	40021000 	.word	0x40021000
 8004030:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004034:	7cfb      	ldrb	r3, [r7, #19]
 8004036:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004038:	7c7b      	ldrb	r3, [r7, #17]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d105      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800403e:	4ba7      	ldr	r3, [pc, #668]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004042:	4aa6      	ldr	r2, [pc, #664]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004044:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004048:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004056:	4ba1      	ldr	r3, [pc, #644]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405c:	f023 0203 	bic.w	r2, r3, #3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	499d      	ldr	r1, [pc, #628]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004078:	4b98      	ldr	r3, [pc, #608]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407e:	f023 020c 	bic.w	r2, r3, #12
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	4995      	ldr	r1, [pc, #596]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800409a:	4b90      	ldr	r3, [pc, #576]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	498c      	ldr	r1, [pc, #560]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040bc:	4b87      	ldr	r3, [pc, #540]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	4984      	ldr	r1, [pc, #528]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040de:	4b7f      	ldr	r3, [pc, #508]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	497b      	ldr	r1, [pc, #492]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004100:	4b76      	ldr	r3, [pc, #472]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004106:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	4973      	ldr	r1, [pc, #460]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004110:	4313      	orrs	r3, r2
 8004112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004122:	4b6e      	ldr	r3, [pc, #440]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004128:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	496a      	ldr	r1, [pc, #424]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00a      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004144:	4b65      	ldr	r3, [pc, #404]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	4962      	ldr	r1, [pc, #392]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004166:	4b5d      	ldr	r3, [pc, #372]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004174:	4959      	ldr	r1, [pc, #356]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00a      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004188:	4b54      	ldr	r3, [pc, #336]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800418e:	f023 0203 	bic.w	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004196:	4951      	ldr	r1, [pc, #324]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041aa:	4b4c      	ldr	r3, [pc, #304]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b8:	4948      	ldr	r1, [pc, #288]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d015      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041cc:	4b43      	ldr	r3, [pc, #268]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041da:	4940      	ldr	r1, [pc, #256]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041ea:	d105      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041ec:	4b3b      	ldr	r3, [pc, #236]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	4a3a      	ldr	r2, [pc, #232]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004200:	2b00      	cmp	r3, #0
 8004202:	d015      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004204:	4b35      	ldr	r3, [pc, #212]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004212:	4932      	ldr	r1, [pc, #200]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800421e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004222:	d105      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004224:	4b2d      	ldr	r3, [pc, #180]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4a2c      	ldr	r2, [pc, #176]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800422e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d015      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800423c:	4b27      	ldr	r3, [pc, #156]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004242:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424a:	4924      	ldr	r1, [pc, #144]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004256:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800425a:	d105      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800425c:	4b1f      	ldr	r3, [pc, #124]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	4a1e      	ldr	r2, [pc, #120]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004266:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d015      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004274:	4b19      	ldr	r3, [pc, #100]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004282:	4916      	ldr	r1, [pc, #88]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004292:	d105      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004294:	4b11      	ldr	r3, [pc, #68]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4a10      	ldr	r2, [pc, #64]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800429a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800429e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d019      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042ac:	4b0b      	ldr	r3, [pc, #44]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ba:	4908      	ldr	r1, [pc, #32]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042ca:	d109      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042cc:	4b03      	ldr	r3, [pc, #12]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	4a02      	ldr	r2, [pc, #8]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042d6:	60d3      	str	r3, [r2, #12]
 80042d8:	e002      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80042da:	bf00      	nop
 80042dc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d015      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042ec:	4b29      	ldr	r3, [pc, #164]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fa:	4926      	ldr	r1, [pc, #152]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004306:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800430a:	d105      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800430c:	4b21      	ldr	r3, [pc, #132]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	4a20      	ldr	r2, [pc, #128]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004312:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004316:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d015      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004324:	4b1b      	ldr	r3, [pc, #108]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800432a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004332:	4918      	ldr	r1, [pc, #96]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800433e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004342:	d105      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004344:	4b13      	ldr	r3, [pc, #76]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	4a12      	ldr	r2, [pc, #72]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800434a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800434e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d015      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800435c:	4b0d      	ldr	r3, [pc, #52]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800435e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004362:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800436a:	490a      	ldr	r1, [pc, #40]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800436c:	4313      	orrs	r3, r2
 800436e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004376:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800437a:	d105      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800437c:	4b05      	ldr	r3, [pc, #20]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4a04      	ldr	r2, [pc, #16]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004382:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004386:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004388:	7cbb      	ldrb	r3, [r7, #18]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40021000 	.word	0x40021000

08004398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e049      	b.n	800443e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7fe f91a 	bl	80025f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4619      	mov	r1, r3
 80043d6:	4610      	mov	r0, r2
 80043d8:	f000 ff68 	bl	80052ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
	...

08004448 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b01      	cmp	r3, #1
 800445a:	d001      	beq.n	8004460 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e04c      	b.n	80044fa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a26      	ldr	r2, [pc, #152]	@ (8004508 <HAL_TIM_Base_Start+0xc0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d022      	beq.n	80044b8 <HAL_TIM_Base_Start+0x70>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800447a:	d01d      	beq.n	80044b8 <HAL_TIM_Base_Start+0x70>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a22      	ldr	r2, [pc, #136]	@ (800450c <HAL_TIM_Base_Start+0xc4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d018      	beq.n	80044b8 <HAL_TIM_Base_Start+0x70>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a21      	ldr	r2, [pc, #132]	@ (8004510 <HAL_TIM_Base_Start+0xc8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d013      	beq.n	80044b8 <HAL_TIM_Base_Start+0x70>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a1f      	ldr	r2, [pc, #124]	@ (8004514 <HAL_TIM_Base_Start+0xcc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00e      	beq.n	80044b8 <HAL_TIM_Base_Start+0x70>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a1e      	ldr	r2, [pc, #120]	@ (8004518 <HAL_TIM_Base_Start+0xd0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d009      	beq.n	80044b8 <HAL_TIM_Base_Start+0x70>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1c      	ldr	r2, [pc, #112]	@ (800451c <HAL_TIM_Base_Start+0xd4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d004      	beq.n	80044b8 <HAL_TIM_Base_Start+0x70>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004520 <HAL_TIM_Base_Start+0xd8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d115      	bne.n	80044e4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	4b19      	ldr	r3, [pc, #100]	@ (8004524 <HAL_TIM_Base_Start+0xdc>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b06      	cmp	r3, #6
 80044c8:	d015      	beq.n	80044f6 <HAL_TIM_Base_Start+0xae>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044d0:	d011      	beq.n	80044f6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f042 0201 	orr.w	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e2:	e008      	b.n	80044f6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0201 	orr.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	e000      	b.n	80044f8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	40012c00 	.word	0x40012c00
 800450c:	40000400 	.word	0x40000400
 8004510:	40000800 	.word	0x40000800
 8004514:	40000c00 	.word	0x40000c00
 8004518:	40013400 	.word	0x40013400
 800451c:	40014000 	.word	0x40014000
 8004520:	40015000 	.word	0x40015000
 8004524:	00010007 	.word	0x00010007

08004528 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b01      	cmp	r3, #1
 800453a:	d001      	beq.n	8004540 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e054      	b.n	80045ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a26      	ldr	r2, [pc, #152]	@ (80045f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d022      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x80>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800456a:	d01d      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x80>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a22      	ldr	r2, [pc, #136]	@ (80045fc <HAL_TIM_Base_Start_IT+0xd4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d018      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x80>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a21      	ldr	r2, [pc, #132]	@ (8004600 <HAL_TIM_Base_Start_IT+0xd8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d013      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x80>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1f      	ldr	r2, [pc, #124]	@ (8004604 <HAL_TIM_Base_Start_IT+0xdc>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00e      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x80>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a1e      	ldr	r2, [pc, #120]	@ (8004608 <HAL_TIM_Base_Start_IT+0xe0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d009      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x80>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a1c      	ldr	r2, [pc, #112]	@ (800460c <HAL_TIM_Base_Start_IT+0xe4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d004      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x80>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004610 <HAL_TIM_Base_Start_IT+0xe8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d115      	bne.n	80045d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	4b19      	ldr	r3, [pc, #100]	@ (8004614 <HAL_TIM_Base_Start_IT+0xec>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b06      	cmp	r3, #6
 80045b8:	d015      	beq.n	80045e6 <HAL_TIM_Base_Start_IT+0xbe>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045c0:	d011      	beq.n	80045e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f042 0201 	orr.w	r2, r2, #1
 80045d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d2:	e008      	b.n	80045e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	e000      	b.n	80045e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40012c00 	.word	0x40012c00
 80045fc:	40000400 	.word	0x40000400
 8004600:	40000800 	.word	0x40000800
 8004604:	40000c00 	.word	0x40000c00
 8004608:	40013400 	.word	0x40013400
 800460c:	40014000 	.word	0x40014000
 8004610:	40015000 	.word	0x40015000
 8004614:	00010007 	.word	0x00010007

08004618 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e049      	b.n	80046be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d106      	bne.n	8004644 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f841 	bl	80046c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3304      	adds	r3, #4
 8004654:	4619      	mov	r1, r3
 8004656:	4610      	mov	r0, r2
 8004658:	f000 fe28 	bl	80052ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d109      	bne.n	8004700 <HAL_TIM_PWM_Start+0x24>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	bf14      	ite	ne
 80046f8:	2301      	movne	r3, #1
 80046fa:	2300      	moveq	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	e03c      	b.n	800477a <HAL_TIM_PWM_Start+0x9e>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b04      	cmp	r3, #4
 8004704:	d109      	bne.n	800471a <HAL_TIM_PWM_Start+0x3e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b01      	cmp	r3, #1
 8004710:	bf14      	ite	ne
 8004712:	2301      	movne	r3, #1
 8004714:	2300      	moveq	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	e02f      	b.n	800477a <HAL_TIM_PWM_Start+0x9e>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b08      	cmp	r3, #8
 800471e:	d109      	bne.n	8004734 <HAL_TIM_PWM_Start+0x58>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b01      	cmp	r3, #1
 800472a:	bf14      	ite	ne
 800472c:	2301      	movne	r3, #1
 800472e:	2300      	moveq	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	e022      	b.n	800477a <HAL_TIM_PWM_Start+0x9e>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b0c      	cmp	r3, #12
 8004738:	d109      	bne.n	800474e <HAL_TIM_PWM_Start+0x72>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b01      	cmp	r3, #1
 8004744:	bf14      	ite	ne
 8004746:	2301      	movne	r3, #1
 8004748:	2300      	moveq	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	e015      	b.n	800477a <HAL_TIM_PWM_Start+0x9e>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b10      	cmp	r3, #16
 8004752:	d109      	bne.n	8004768 <HAL_TIM_PWM_Start+0x8c>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b01      	cmp	r3, #1
 800475e:	bf14      	ite	ne
 8004760:	2301      	movne	r3, #1
 8004762:	2300      	moveq	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	e008      	b.n	800477a <HAL_TIM_PWM_Start+0x9e>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b01      	cmp	r3, #1
 8004772:	bf14      	ite	ne
 8004774:	2301      	movne	r3, #1
 8004776:	2300      	moveq	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e0a6      	b.n	80048d0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d104      	bne.n	8004792 <HAL_TIM_PWM_Start+0xb6>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004790:	e023      	b.n	80047da <HAL_TIM_PWM_Start+0xfe>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b04      	cmp	r3, #4
 8004796:	d104      	bne.n	80047a2 <HAL_TIM_PWM_Start+0xc6>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047a0:	e01b      	b.n	80047da <HAL_TIM_PWM_Start+0xfe>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d104      	bne.n	80047b2 <HAL_TIM_PWM_Start+0xd6>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047b0:	e013      	b.n	80047da <HAL_TIM_PWM_Start+0xfe>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b0c      	cmp	r3, #12
 80047b6:	d104      	bne.n	80047c2 <HAL_TIM_PWM_Start+0xe6>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047c0:	e00b      	b.n	80047da <HAL_TIM_PWM_Start+0xfe>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b10      	cmp	r3, #16
 80047c6:	d104      	bne.n	80047d2 <HAL_TIM_PWM_Start+0xf6>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047d0:	e003      	b.n	80047da <HAL_TIM_PWM_Start+0xfe>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2202      	movs	r2, #2
 80047d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2201      	movs	r2, #1
 80047e0:	6839      	ldr	r1, [r7, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f001 f9dc 	bl	8005ba0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a3a      	ldr	r2, [pc, #232]	@ (80048d8 <HAL_TIM_PWM_Start+0x1fc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d018      	beq.n	8004824 <HAL_TIM_PWM_Start+0x148>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a39      	ldr	r2, [pc, #228]	@ (80048dc <HAL_TIM_PWM_Start+0x200>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d013      	beq.n	8004824 <HAL_TIM_PWM_Start+0x148>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a37      	ldr	r2, [pc, #220]	@ (80048e0 <HAL_TIM_PWM_Start+0x204>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d00e      	beq.n	8004824 <HAL_TIM_PWM_Start+0x148>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a36      	ldr	r2, [pc, #216]	@ (80048e4 <HAL_TIM_PWM_Start+0x208>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d009      	beq.n	8004824 <HAL_TIM_PWM_Start+0x148>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a34      	ldr	r2, [pc, #208]	@ (80048e8 <HAL_TIM_PWM_Start+0x20c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d004      	beq.n	8004824 <HAL_TIM_PWM_Start+0x148>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a33      	ldr	r2, [pc, #204]	@ (80048ec <HAL_TIM_PWM_Start+0x210>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d101      	bne.n	8004828 <HAL_TIM_PWM_Start+0x14c>
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <HAL_TIM_PWM_Start+0x14e>
 8004828:	2300      	movs	r3, #0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d007      	beq.n	800483e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800483c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a25      	ldr	r2, [pc, #148]	@ (80048d8 <HAL_TIM_PWM_Start+0x1fc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d022      	beq.n	800488e <HAL_TIM_PWM_Start+0x1b2>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004850:	d01d      	beq.n	800488e <HAL_TIM_PWM_Start+0x1b2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a26      	ldr	r2, [pc, #152]	@ (80048f0 <HAL_TIM_PWM_Start+0x214>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d018      	beq.n	800488e <HAL_TIM_PWM_Start+0x1b2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a24      	ldr	r2, [pc, #144]	@ (80048f4 <HAL_TIM_PWM_Start+0x218>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d013      	beq.n	800488e <HAL_TIM_PWM_Start+0x1b2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a23      	ldr	r2, [pc, #140]	@ (80048f8 <HAL_TIM_PWM_Start+0x21c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00e      	beq.n	800488e <HAL_TIM_PWM_Start+0x1b2>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a19      	ldr	r2, [pc, #100]	@ (80048dc <HAL_TIM_PWM_Start+0x200>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d009      	beq.n	800488e <HAL_TIM_PWM_Start+0x1b2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a18      	ldr	r2, [pc, #96]	@ (80048e0 <HAL_TIM_PWM_Start+0x204>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d004      	beq.n	800488e <HAL_TIM_PWM_Start+0x1b2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a18      	ldr	r2, [pc, #96]	@ (80048ec <HAL_TIM_PWM_Start+0x210>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d115      	bne.n	80048ba <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	4b19      	ldr	r3, [pc, #100]	@ (80048fc <HAL_TIM_PWM_Start+0x220>)
 8004896:	4013      	ands	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2b06      	cmp	r3, #6
 800489e:	d015      	beq.n	80048cc <HAL_TIM_PWM_Start+0x1f0>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048a6:	d011      	beq.n	80048cc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b8:	e008      	b.n	80048cc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f042 0201 	orr.w	r2, r2, #1
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	e000      	b.n	80048ce <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40012c00 	.word	0x40012c00
 80048dc:	40013400 	.word	0x40013400
 80048e0:	40014000 	.word	0x40014000
 80048e4:	40014400 	.word	0x40014400
 80048e8:	40014800 	.word	0x40014800
 80048ec:	40015000 	.word	0x40015000
 80048f0:	40000400 	.word	0x40000400
 80048f4:	40000800 	.word	0x40000800
 80048f8:	40000c00 	.word	0x40000c00
 80048fc:	00010007 	.word	0x00010007

08004900 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e097      	b.n	8004a44 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d106      	bne.n	800492e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7fd fe9f 	bl	800266c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2202      	movs	r2, #2
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6812      	ldr	r2, [r2, #0]
 8004940:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004944:	f023 0307 	bic.w	r3, r3, #7
 8004948:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3304      	adds	r3, #4
 8004952:	4619      	mov	r1, r3
 8004954:	4610      	mov	r0, r2
 8004956:	f000 fca9 	bl	80052ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004982:	f023 0303 	bic.w	r3, r3, #3
 8004986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	021b      	lsls	r3, r3, #8
 8004992:	4313      	orrs	r3, r2
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	4313      	orrs	r3, r2
 8004998:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80049a0:	f023 030c 	bic.w	r3, r3, #12
 80049a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	021b      	lsls	r3, r3, #8
 80049bc:	4313      	orrs	r3, r2
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	011a      	lsls	r2, r3, #4
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	031b      	lsls	r3, r3, #12
 80049d0:	4313      	orrs	r3, r2
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80049de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80049e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	4313      	orrs	r3, r2
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a5c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a64:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a6c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a74:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d110      	bne.n	8004a9e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d102      	bne.n	8004a88 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a82:	7b7b      	ldrb	r3, [r7, #13]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d001      	beq.n	8004a8c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e069      	b.n	8004b60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a9c:	e031      	b.n	8004b02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d110      	bne.n	8004ac6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004aa4:	7bbb      	ldrb	r3, [r7, #14]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d102      	bne.n	8004ab0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004aaa:	7b3b      	ldrb	r3, [r7, #12]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d001      	beq.n	8004ab4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e055      	b.n	8004b60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ac4:	e01d      	b.n	8004b02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d108      	bne.n	8004ade <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004acc:	7bbb      	ldrb	r3, [r7, #14]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d105      	bne.n	8004ade <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ad2:	7b7b      	ldrb	r3, [r7, #13]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d102      	bne.n	8004ade <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ad8:	7b3b      	ldrb	r3, [r7, #12]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d001      	beq.n	8004ae2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e03e      	b.n	8004b60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2202      	movs	r2, #2
 8004aee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2202      	movs	r2, #2
 8004af6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <HAL_TIM_Encoder_Start+0xc4>
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d008      	beq.n	8004b20 <HAL_TIM_Encoder_Start+0xd4>
 8004b0e:	e00f      	b.n	8004b30 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2201      	movs	r2, #1
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f001 f841 	bl	8005ba0 <TIM_CCxChannelCmd>
      break;
 8004b1e:	e016      	b.n	8004b4e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2201      	movs	r2, #1
 8004b26:	2104      	movs	r1, #4
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f001 f839 	bl	8005ba0 <TIM_CCxChannelCmd>
      break;
 8004b2e:	e00e      	b.n	8004b4e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2201      	movs	r2, #1
 8004b36:	2100      	movs	r1, #0
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f001 f831 	bl	8005ba0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2201      	movs	r2, #1
 8004b44:	2104      	movs	r1, #4
 8004b46:	4618      	mov	r0, r3
 8004b48:	f001 f82a 	bl	8005ba0 <TIM_CCxChannelCmd>
      break;
 8004b4c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0201 	orr.w	r2, r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d020      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01b      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0202 	mvn.w	r2, #2
 8004b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fb5c 	bl	8005270 <HAL_TIM_IC_CaptureCallback>
 8004bb8:	e005      	b.n	8004bc6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fb4e 	bl	800525c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 fb5f 	bl	8005284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d020      	beq.n	8004c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01b      	beq.n	8004c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0204 	mvn.w	r2, #4
 8004be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2202      	movs	r2, #2
 8004bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fb36 	bl	8005270 <HAL_TIM_IC_CaptureCallback>
 8004c04:	e005      	b.n	8004c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fb28 	bl	800525c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fb39 	bl	8005284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d020      	beq.n	8004c64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01b      	beq.n	8004c64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f06f 0208 	mvn.w	r2, #8
 8004c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2204      	movs	r2, #4
 8004c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fb10 	bl	8005270 <HAL_TIM_IC_CaptureCallback>
 8004c50:	e005      	b.n	8004c5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fb02 	bl	800525c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fb13 	bl	8005284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d020      	beq.n	8004cb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01b      	beq.n	8004cb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0210 	mvn.w	r2, #16
 8004c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2208      	movs	r2, #8
 8004c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 faea 	bl	8005270 <HAL_TIM_IC_CaptureCallback>
 8004c9c:	e005      	b.n	8004caa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fadc 	bl	800525c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 faed 	bl	8005284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00c      	beq.n	8004cd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d007      	beq.n	8004cd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0201 	mvn.w	r2, #1
 8004ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fd fb8e 	bl	80023f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d104      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00c      	beq.n	8004d02 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d007      	beq.n	8004d02 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f001 f8a9 	bl	8005e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00c      	beq.n	8004d26 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f001 f8a1 	bl	8005e68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00c      	beq.n	8004d4a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d007      	beq.n	8004d4a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 faa7 	bl	8005298 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00c      	beq.n	8004d6e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d007      	beq.n	8004d6e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f06f 0220 	mvn.w	r2, #32
 8004d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f001 f869 	bl	8005e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00c      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d007      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f001 f875 	bl	8005e7c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00c      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d007      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f001 f86d 	bl	8005e90 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00c      	beq.n	8004dda <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f001 f865 	bl	8005ea4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00c      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f001 f85d 	bl	8005eb8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dfe:	bf00      	nop
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d101      	bne.n	8004e26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e0ff      	b.n	8005026 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b14      	cmp	r3, #20
 8004e32:	f200 80f0 	bhi.w	8005016 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e36:	a201      	add	r2, pc, #4	@ (adr r2, 8004e3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3c:	08004e91 	.word	0x08004e91
 8004e40:	08005017 	.word	0x08005017
 8004e44:	08005017 	.word	0x08005017
 8004e48:	08005017 	.word	0x08005017
 8004e4c:	08004ed1 	.word	0x08004ed1
 8004e50:	08005017 	.word	0x08005017
 8004e54:	08005017 	.word	0x08005017
 8004e58:	08005017 	.word	0x08005017
 8004e5c:	08004f13 	.word	0x08004f13
 8004e60:	08005017 	.word	0x08005017
 8004e64:	08005017 	.word	0x08005017
 8004e68:	08005017 	.word	0x08005017
 8004e6c:	08004f53 	.word	0x08004f53
 8004e70:	08005017 	.word	0x08005017
 8004e74:	08005017 	.word	0x08005017
 8004e78:	08005017 	.word	0x08005017
 8004e7c:	08004f95 	.word	0x08004f95
 8004e80:	08005017 	.word	0x08005017
 8004e84:	08005017 	.word	0x08005017
 8004e88:	08005017 	.word	0x08005017
 8004e8c:	08004fd5 	.word	0x08004fd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fabc 	bl	8005414 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0208 	orr.w	r2, r2, #8
 8004eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0204 	bic.w	r2, r2, #4
 8004eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6999      	ldr	r1, [r3, #24]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	619a      	str	r2, [r3, #24]
      break;
 8004ece:	e0a5      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fb36 	bl	8005548 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699a      	ldr	r2, [r3, #24]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004eea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004efa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6999      	ldr	r1, [r3, #24]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	021a      	lsls	r2, r3, #8
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	619a      	str	r2, [r3, #24]
      break;
 8004f10:	e084      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68b9      	ldr	r1, [r7, #8]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 fba9 	bl	8005670 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69da      	ldr	r2, [r3, #28]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0208 	orr.w	r2, r2, #8
 8004f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69da      	ldr	r2, [r3, #28]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0204 	bic.w	r2, r2, #4
 8004f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69d9      	ldr	r1, [r3, #28]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	61da      	str	r2, [r3, #28]
      break;
 8004f50:	e064      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fc1b 	bl	8005794 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69da      	ldr	r2, [r3, #28]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69da      	ldr	r2, [r3, #28]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69d9      	ldr	r1, [r3, #28]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	021a      	lsls	r2, r3, #8
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	61da      	str	r2, [r3, #28]
      break;
 8004f92:	e043      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68b9      	ldr	r1, [r7, #8]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fc8e 	bl	80058bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0208 	orr.w	r2, r2, #8
 8004fae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0204 	bic.w	r2, r2, #4
 8004fbe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	691a      	ldr	r2, [r3, #16]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004fd2:	e023      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fcd8 	bl	8005990 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ffe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	021a      	lsls	r2, r3, #8
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005014:	e002      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	75fb      	strb	r3, [r7, #23]
      break;
 800501a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005024:	7dfb      	ldrb	r3, [r7, #23]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop

08005030 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_TIM_ConfigClockSource+0x1c>
 8005048:	2302      	movs	r3, #2
 800504a:	e0f6      	b.n	800523a <HAL_TIM_ConfigClockSource+0x20a>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800506a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800506e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005076:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a6f      	ldr	r2, [pc, #444]	@ (8005244 <HAL_TIM_ConfigClockSource+0x214>)
 8005086:	4293      	cmp	r3, r2
 8005088:	f000 80c1 	beq.w	800520e <HAL_TIM_ConfigClockSource+0x1de>
 800508c:	4a6d      	ldr	r2, [pc, #436]	@ (8005244 <HAL_TIM_ConfigClockSource+0x214>)
 800508e:	4293      	cmp	r3, r2
 8005090:	f200 80c6 	bhi.w	8005220 <HAL_TIM_ConfigClockSource+0x1f0>
 8005094:	4a6c      	ldr	r2, [pc, #432]	@ (8005248 <HAL_TIM_ConfigClockSource+0x218>)
 8005096:	4293      	cmp	r3, r2
 8005098:	f000 80b9 	beq.w	800520e <HAL_TIM_ConfigClockSource+0x1de>
 800509c:	4a6a      	ldr	r2, [pc, #424]	@ (8005248 <HAL_TIM_ConfigClockSource+0x218>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	f200 80be 	bhi.w	8005220 <HAL_TIM_ConfigClockSource+0x1f0>
 80050a4:	4a69      	ldr	r2, [pc, #420]	@ (800524c <HAL_TIM_ConfigClockSource+0x21c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	f000 80b1 	beq.w	800520e <HAL_TIM_ConfigClockSource+0x1de>
 80050ac:	4a67      	ldr	r2, [pc, #412]	@ (800524c <HAL_TIM_ConfigClockSource+0x21c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	f200 80b6 	bhi.w	8005220 <HAL_TIM_ConfigClockSource+0x1f0>
 80050b4:	4a66      	ldr	r2, [pc, #408]	@ (8005250 <HAL_TIM_ConfigClockSource+0x220>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	f000 80a9 	beq.w	800520e <HAL_TIM_ConfigClockSource+0x1de>
 80050bc:	4a64      	ldr	r2, [pc, #400]	@ (8005250 <HAL_TIM_ConfigClockSource+0x220>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	f200 80ae 	bhi.w	8005220 <HAL_TIM_ConfigClockSource+0x1f0>
 80050c4:	4a63      	ldr	r2, [pc, #396]	@ (8005254 <HAL_TIM_ConfigClockSource+0x224>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	f000 80a1 	beq.w	800520e <HAL_TIM_ConfigClockSource+0x1de>
 80050cc:	4a61      	ldr	r2, [pc, #388]	@ (8005254 <HAL_TIM_ConfigClockSource+0x224>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	f200 80a6 	bhi.w	8005220 <HAL_TIM_ConfigClockSource+0x1f0>
 80050d4:	4a60      	ldr	r2, [pc, #384]	@ (8005258 <HAL_TIM_ConfigClockSource+0x228>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	f000 8099 	beq.w	800520e <HAL_TIM_ConfigClockSource+0x1de>
 80050dc:	4a5e      	ldr	r2, [pc, #376]	@ (8005258 <HAL_TIM_ConfigClockSource+0x228>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	f200 809e 	bhi.w	8005220 <HAL_TIM_ConfigClockSource+0x1f0>
 80050e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80050e8:	f000 8091 	beq.w	800520e <HAL_TIM_ConfigClockSource+0x1de>
 80050ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80050f0:	f200 8096 	bhi.w	8005220 <HAL_TIM_ConfigClockSource+0x1f0>
 80050f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050f8:	f000 8089 	beq.w	800520e <HAL_TIM_ConfigClockSource+0x1de>
 80050fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005100:	f200 808e 	bhi.w	8005220 <HAL_TIM_ConfigClockSource+0x1f0>
 8005104:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005108:	d03e      	beq.n	8005188 <HAL_TIM_ConfigClockSource+0x158>
 800510a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800510e:	f200 8087 	bhi.w	8005220 <HAL_TIM_ConfigClockSource+0x1f0>
 8005112:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005116:	f000 8086 	beq.w	8005226 <HAL_TIM_ConfigClockSource+0x1f6>
 800511a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800511e:	d87f      	bhi.n	8005220 <HAL_TIM_ConfigClockSource+0x1f0>
 8005120:	2b70      	cmp	r3, #112	@ 0x70
 8005122:	d01a      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x12a>
 8005124:	2b70      	cmp	r3, #112	@ 0x70
 8005126:	d87b      	bhi.n	8005220 <HAL_TIM_ConfigClockSource+0x1f0>
 8005128:	2b60      	cmp	r3, #96	@ 0x60
 800512a:	d050      	beq.n	80051ce <HAL_TIM_ConfigClockSource+0x19e>
 800512c:	2b60      	cmp	r3, #96	@ 0x60
 800512e:	d877      	bhi.n	8005220 <HAL_TIM_ConfigClockSource+0x1f0>
 8005130:	2b50      	cmp	r3, #80	@ 0x50
 8005132:	d03c      	beq.n	80051ae <HAL_TIM_ConfigClockSource+0x17e>
 8005134:	2b50      	cmp	r3, #80	@ 0x50
 8005136:	d873      	bhi.n	8005220 <HAL_TIM_ConfigClockSource+0x1f0>
 8005138:	2b40      	cmp	r3, #64	@ 0x40
 800513a:	d058      	beq.n	80051ee <HAL_TIM_ConfigClockSource+0x1be>
 800513c:	2b40      	cmp	r3, #64	@ 0x40
 800513e:	d86f      	bhi.n	8005220 <HAL_TIM_ConfigClockSource+0x1f0>
 8005140:	2b30      	cmp	r3, #48	@ 0x30
 8005142:	d064      	beq.n	800520e <HAL_TIM_ConfigClockSource+0x1de>
 8005144:	2b30      	cmp	r3, #48	@ 0x30
 8005146:	d86b      	bhi.n	8005220 <HAL_TIM_ConfigClockSource+0x1f0>
 8005148:	2b20      	cmp	r3, #32
 800514a:	d060      	beq.n	800520e <HAL_TIM_ConfigClockSource+0x1de>
 800514c:	2b20      	cmp	r3, #32
 800514e:	d867      	bhi.n	8005220 <HAL_TIM_ConfigClockSource+0x1f0>
 8005150:	2b00      	cmp	r3, #0
 8005152:	d05c      	beq.n	800520e <HAL_TIM_ConfigClockSource+0x1de>
 8005154:	2b10      	cmp	r3, #16
 8005156:	d05a      	beq.n	800520e <HAL_TIM_ConfigClockSource+0x1de>
 8005158:	e062      	b.n	8005220 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800516a:	f000 fcf9 	bl	8005b60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800517c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	609a      	str	r2, [r3, #8]
      break;
 8005186:	e04f      	b.n	8005228 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005198:	f000 fce2 	bl	8005b60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051aa:	609a      	str	r2, [r3, #8]
      break;
 80051ac:	e03c      	b.n	8005228 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ba:	461a      	mov	r2, r3
 80051bc:	f000 fc54 	bl	8005a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2150      	movs	r1, #80	@ 0x50
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fcad 	bl	8005b26 <TIM_ITRx_SetConfig>
      break;
 80051cc:	e02c      	b.n	8005228 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051da:	461a      	mov	r2, r3
 80051dc:	f000 fc73 	bl	8005ac6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2160      	movs	r1, #96	@ 0x60
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fc9d 	bl	8005b26 <TIM_ITRx_SetConfig>
      break;
 80051ec:	e01c      	b.n	8005228 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051fa:	461a      	mov	r2, r3
 80051fc:	f000 fc34 	bl	8005a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2140      	movs	r1, #64	@ 0x40
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fc8d 	bl	8005b26 <TIM_ITRx_SetConfig>
      break;
 800520c:	e00c      	b.n	8005228 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4619      	mov	r1, r3
 8005218:	4610      	mov	r0, r2
 800521a:	f000 fc84 	bl	8005b26 <TIM_ITRx_SetConfig>
      break;
 800521e:	e003      	b.n	8005228 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	73fb      	strb	r3, [r7, #15]
      break;
 8005224:	e000      	b.n	8005228 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005226:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005238:	7bfb      	ldrb	r3, [r7, #15]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	00100070 	.word	0x00100070
 8005248:	00100060 	.word	0x00100060
 800524c:	00100050 	.word	0x00100050
 8005250:	00100040 	.word	0x00100040
 8005254:	00100030 	.word	0x00100030
 8005258:	00100020 	.word	0x00100020

0800525c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a4c      	ldr	r2, [pc, #304]	@ (80053f0 <TIM_Base_SetConfig+0x144>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d017      	beq.n	80052f4 <TIM_Base_SetConfig+0x48>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ca:	d013      	beq.n	80052f4 <TIM_Base_SetConfig+0x48>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a49      	ldr	r2, [pc, #292]	@ (80053f4 <TIM_Base_SetConfig+0x148>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00f      	beq.n	80052f4 <TIM_Base_SetConfig+0x48>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a48      	ldr	r2, [pc, #288]	@ (80053f8 <TIM_Base_SetConfig+0x14c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00b      	beq.n	80052f4 <TIM_Base_SetConfig+0x48>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a47      	ldr	r2, [pc, #284]	@ (80053fc <TIM_Base_SetConfig+0x150>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d007      	beq.n	80052f4 <TIM_Base_SetConfig+0x48>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a46      	ldr	r2, [pc, #280]	@ (8005400 <TIM_Base_SetConfig+0x154>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_Base_SetConfig+0x48>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a45      	ldr	r2, [pc, #276]	@ (8005404 <TIM_Base_SetConfig+0x158>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d108      	bne.n	8005306 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a39      	ldr	r2, [pc, #228]	@ (80053f0 <TIM_Base_SetConfig+0x144>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d023      	beq.n	8005356 <TIM_Base_SetConfig+0xaa>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005314:	d01f      	beq.n	8005356 <TIM_Base_SetConfig+0xaa>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a36      	ldr	r2, [pc, #216]	@ (80053f4 <TIM_Base_SetConfig+0x148>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d01b      	beq.n	8005356 <TIM_Base_SetConfig+0xaa>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a35      	ldr	r2, [pc, #212]	@ (80053f8 <TIM_Base_SetConfig+0x14c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d017      	beq.n	8005356 <TIM_Base_SetConfig+0xaa>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a34      	ldr	r2, [pc, #208]	@ (80053fc <TIM_Base_SetConfig+0x150>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d013      	beq.n	8005356 <TIM_Base_SetConfig+0xaa>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a33      	ldr	r2, [pc, #204]	@ (8005400 <TIM_Base_SetConfig+0x154>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00f      	beq.n	8005356 <TIM_Base_SetConfig+0xaa>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a33      	ldr	r2, [pc, #204]	@ (8005408 <TIM_Base_SetConfig+0x15c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00b      	beq.n	8005356 <TIM_Base_SetConfig+0xaa>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a32      	ldr	r2, [pc, #200]	@ (800540c <TIM_Base_SetConfig+0x160>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d007      	beq.n	8005356 <TIM_Base_SetConfig+0xaa>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a31      	ldr	r2, [pc, #196]	@ (8005410 <TIM_Base_SetConfig+0x164>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d003      	beq.n	8005356 <TIM_Base_SetConfig+0xaa>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a2c      	ldr	r2, [pc, #176]	@ (8005404 <TIM_Base_SetConfig+0x158>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d108      	bne.n	8005368 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800535c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4313      	orrs	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a18      	ldr	r2, [pc, #96]	@ (80053f0 <TIM_Base_SetConfig+0x144>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d013      	beq.n	80053bc <TIM_Base_SetConfig+0x110>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a1a      	ldr	r2, [pc, #104]	@ (8005400 <TIM_Base_SetConfig+0x154>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00f      	beq.n	80053bc <TIM_Base_SetConfig+0x110>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a1a      	ldr	r2, [pc, #104]	@ (8005408 <TIM_Base_SetConfig+0x15c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00b      	beq.n	80053bc <TIM_Base_SetConfig+0x110>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a19      	ldr	r2, [pc, #100]	@ (800540c <TIM_Base_SetConfig+0x160>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d007      	beq.n	80053bc <TIM_Base_SetConfig+0x110>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a18      	ldr	r2, [pc, #96]	@ (8005410 <TIM_Base_SetConfig+0x164>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d003      	beq.n	80053bc <TIM_Base_SetConfig+0x110>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a13      	ldr	r2, [pc, #76]	@ (8005404 <TIM_Base_SetConfig+0x158>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d103      	bne.n	80053c4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d105      	bne.n	80053e2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f023 0201 	bic.w	r2, r3, #1
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	611a      	str	r2, [r3, #16]
  }
}
 80053e2:	bf00      	nop
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40012c00 	.word	0x40012c00
 80053f4:	40000400 	.word	0x40000400
 80053f8:	40000800 	.word	0x40000800
 80053fc:	40000c00 	.word	0x40000c00
 8005400:	40013400 	.word	0x40013400
 8005404:	40015000 	.word	0x40015000
 8005408:	40014000 	.word	0x40014000
 800540c:	40014400 	.word	0x40014400
 8005410:	40014800 	.word	0x40014800

08005414 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	f023 0201 	bic.w	r2, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0303 	bic.w	r3, r3, #3
 800544e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4313      	orrs	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f023 0302 	bic.w	r3, r3, #2
 8005460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a30      	ldr	r2, [pc, #192]	@ (8005530 <TIM_OC1_SetConfig+0x11c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d013      	beq.n	800549c <TIM_OC1_SetConfig+0x88>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a2f      	ldr	r2, [pc, #188]	@ (8005534 <TIM_OC1_SetConfig+0x120>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00f      	beq.n	800549c <TIM_OC1_SetConfig+0x88>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a2e      	ldr	r2, [pc, #184]	@ (8005538 <TIM_OC1_SetConfig+0x124>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d00b      	beq.n	800549c <TIM_OC1_SetConfig+0x88>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a2d      	ldr	r2, [pc, #180]	@ (800553c <TIM_OC1_SetConfig+0x128>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d007      	beq.n	800549c <TIM_OC1_SetConfig+0x88>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a2c      	ldr	r2, [pc, #176]	@ (8005540 <TIM_OC1_SetConfig+0x12c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d003      	beq.n	800549c <TIM_OC1_SetConfig+0x88>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a2b      	ldr	r2, [pc, #172]	@ (8005544 <TIM_OC1_SetConfig+0x130>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d10c      	bne.n	80054b6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f023 0308 	bic.w	r3, r3, #8
 80054a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f023 0304 	bic.w	r3, r3, #4
 80054b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005530 <TIM_OC1_SetConfig+0x11c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d013      	beq.n	80054e6 <TIM_OC1_SetConfig+0xd2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005534 <TIM_OC1_SetConfig+0x120>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00f      	beq.n	80054e6 <TIM_OC1_SetConfig+0xd2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005538 <TIM_OC1_SetConfig+0x124>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00b      	beq.n	80054e6 <TIM_OC1_SetConfig+0xd2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a1a      	ldr	r2, [pc, #104]	@ (800553c <TIM_OC1_SetConfig+0x128>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d007      	beq.n	80054e6 <TIM_OC1_SetConfig+0xd2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a19      	ldr	r2, [pc, #100]	@ (8005540 <TIM_OC1_SetConfig+0x12c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d003      	beq.n	80054e6 <TIM_OC1_SetConfig+0xd2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a18      	ldr	r2, [pc, #96]	@ (8005544 <TIM_OC1_SetConfig+0x130>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d111      	bne.n	800550a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	621a      	str	r2, [r3, #32]
}
 8005524:	bf00      	nop
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	40012c00 	.word	0x40012c00
 8005534:	40013400 	.word	0x40013400
 8005538:	40014000 	.word	0x40014000
 800553c:	40014400 	.word	0x40014400
 8005540:	40014800 	.word	0x40014800
 8005544:	40015000 	.word	0x40015000

08005548 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	f023 0210 	bic.w	r2, r3, #16
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005576:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800557a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	021b      	lsls	r3, r3, #8
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4313      	orrs	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f023 0320 	bic.w	r3, r3, #32
 8005596:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005658 <TIM_OC2_SetConfig+0x110>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d007      	beq.n	80055bc <TIM_OC2_SetConfig+0x74>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a2b      	ldr	r2, [pc, #172]	@ (800565c <TIM_OC2_SetConfig+0x114>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d003      	beq.n	80055bc <TIM_OC2_SetConfig+0x74>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005660 <TIM_OC2_SetConfig+0x118>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d10d      	bne.n	80055d8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a1f      	ldr	r2, [pc, #124]	@ (8005658 <TIM_OC2_SetConfig+0x110>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d013      	beq.n	8005608 <TIM_OC2_SetConfig+0xc0>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a1e      	ldr	r2, [pc, #120]	@ (800565c <TIM_OC2_SetConfig+0x114>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00f      	beq.n	8005608 <TIM_OC2_SetConfig+0xc0>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005664 <TIM_OC2_SetConfig+0x11c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00b      	beq.n	8005608 <TIM_OC2_SetConfig+0xc0>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a1d      	ldr	r2, [pc, #116]	@ (8005668 <TIM_OC2_SetConfig+0x120>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d007      	beq.n	8005608 <TIM_OC2_SetConfig+0xc0>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a1c      	ldr	r2, [pc, #112]	@ (800566c <TIM_OC2_SetConfig+0x124>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_OC2_SetConfig+0xc0>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a17      	ldr	r2, [pc, #92]	@ (8005660 <TIM_OC2_SetConfig+0x118>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d113      	bne.n	8005630 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800560e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005616:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	4313      	orrs	r3, r2
 8005622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	4313      	orrs	r3, r2
 800562e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	621a      	str	r2, [r3, #32]
}
 800564a:	bf00      	nop
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40012c00 	.word	0x40012c00
 800565c:	40013400 	.word	0x40013400
 8005660:	40015000 	.word	0x40015000
 8005664:	40014000 	.word	0x40014000
 8005668:	40014400 	.word	0x40014400
 800566c:	40014800 	.word	0x40014800

08005670 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800569e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0303 	bic.w	r3, r3, #3
 80056aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	021b      	lsls	r3, r3, #8
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a2b      	ldr	r2, [pc, #172]	@ (800577c <TIM_OC3_SetConfig+0x10c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d007      	beq.n	80056e2 <TIM_OC3_SetConfig+0x72>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a2a      	ldr	r2, [pc, #168]	@ (8005780 <TIM_OC3_SetConfig+0x110>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d003      	beq.n	80056e2 <TIM_OC3_SetConfig+0x72>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a29      	ldr	r2, [pc, #164]	@ (8005784 <TIM_OC3_SetConfig+0x114>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d10d      	bne.n	80056fe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a1e      	ldr	r2, [pc, #120]	@ (800577c <TIM_OC3_SetConfig+0x10c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d013      	beq.n	800572e <TIM_OC3_SetConfig+0xbe>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a1d      	ldr	r2, [pc, #116]	@ (8005780 <TIM_OC3_SetConfig+0x110>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00f      	beq.n	800572e <TIM_OC3_SetConfig+0xbe>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a1d      	ldr	r2, [pc, #116]	@ (8005788 <TIM_OC3_SetConfig+0x118>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00b      	beq.n	800572e <TIM_OC3_SetConfig+0xbe>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a1c      	ldr	r2, [pc, #112]	@ (800578c <TIM_OC3_SetConfig+0x11c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d007      	beq.n	800572e <TIM_OC3_SetConfig+0xbe>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a1b      	ldr	r2, [pc, #108]	@ (8005790 <TIM_OC3_SetConfig+0x120>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d003      	beq.n	800572e <TIM_OC3_SetConfig+0xbe>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a16      	ldr	r2, [pc, #88]	@ (8005784 <TIM_OC3_SetConfig+0x114>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d113      	bne.n	8005756 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800573c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4313      	orrs	r3, r2
 8005748:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	621a      	str	r2, [r3, #32]
}
 8005770:	bf00      	nop
 8005772:	371c      	adds	r7, #28
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	40012c00 	.word	0x40012c00
 8005780:	40013400 	.word	0x40013400
 8005784:	40015000 	.word	0x40015000
 8005788:	40014000 	.word	0x40014000
 800578c:	40014400 	.word	0x40014400
 8005790:	40014800 	.word	0x40014800

08005794 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	021b      	lsls	r3, r3, #8
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	031b      	lsls	r3, r3, #12
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a2c      	ldr	r2, [pc, #176]	@ (80058a4 <TIM_OC4_SetConfig+0x110>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d007      	beq.n	8005808 <TIM_OC4_SetConfig+0x74>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a2b      	ldr	r2, [pc, #172]	@ (80058a8 <TIM_OC4_SetConfig+0x114>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d003      	beq.n	8005808 <TIM_OC4_SetConfig+0x74>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a2a      	ldr	r2, [pc, #168]	@ (80058ac <TIM_OC4_SetConfig+0x118>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d10d      	bne.n	8005824 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800580e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	031b      	lsls	r3, r3, #12
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005822:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a1f      	ldr	r2, [pc, #124]	@ (80058a4 <TIM_OC4_SetConfig+0x110>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d013      	beq.n	8005854 <TIM_OC4_SetConfig+0xc0>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a1e      	ldr	r2, [pc, #120]	@ (80058a8 <TIM_OC4_SetConfig+0x114>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00f      	beq.n	8005854 <TIM_OC4_SetConfig+0xc0>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a1e      	ldr	r2, [pc, #120]	@ (80058b0 <TIM_OC4_SetConfig+0x11c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00b      	beq.n	8005854 <TIM_OC4_SetConfig+0xc0>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a1d      	ldr	r2, [pc, #116]	@ (80058b4 <TIM_OC4_SetConfig+0x120>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d007      	beq.n	8005854 <TIM_OC4_SetConfig+0xc0>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a1c      	ldr	r2, [pc, #112]	@ (80058b8 <TIM_OC4_SetConfig+0x124>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d003      	beq.n	8005854 <TIM_OC4_SetConfig+0xc0>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a17      	ldr	r2, [pc, #92]	@ (80058ac <TIM_OC4_SetConfig+0x118>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d113      	bne.n	800587c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800585a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005862:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	019b      	lsls	r3, r3, #6
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	019b      	lsls	r3, r3, #6
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	4313      	orrs	r3, r2
 800587a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	621a      	str	r2, [r3, #32]
}
 8005896:	bf00      	nop
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40012c00 	.word	0x40012c00
 80058a8:	40013400 	.word	0x40013400
 80058ac:	40015000 	.word	0x40015000
 80058b0:	40014000 	.word	0x40014000
 80058b4:	40014400 	.word	0x40014400
 80058b8:	40014800 	.word	0x40014800

080058bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005900:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	041b      	lsls	r3, r3, #16
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a19      	ldr	r2, [pc, #100]	@ (8005978 <TIM_OC5_SetConfig+0xbc>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d013      	beq.n	800593e <TIM_OC5_SetConfig+0x82>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a18      	ldr	r2, [pc, #96]	@ (800597c <TIM_OC5_SetConfig+0xc0>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00f      	beq.n	800593e <TIM_OC5_SetConfig+0x82>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a17      	ldr	r2, [pc, #92]	@ (8005980 <TIM_OC5_SetConfig+0xc4>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00b      	beq.n	800593e <TIM_OC5_SetConfig+0x82>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a16      	ldr	r2, [pc, #88]	@ (8005984 <TIM_OC5_SetConfig+0xc8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d007      	beq.n	800593e <TIM_OC5_SetConfig+0x82>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a15      	ldr	r2, [pc, #84]	@ (8005988 <TIM_OC5_SetConfig+0xcc>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d003      	beq.n	800593e <TIM_OC5_SetConfig+0x82>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a14      	ldr	r2, [pc, #80]	@ (800598c <TIM_OC5_SetConfig+0xd0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d109      	bne.n	8005952 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005944:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	4313      	orrs	r3, r2
 8005950:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	621a      	str	r2, [r3, #32]
}
 800596c:	bf00      	nop
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	40012c00 	.word	0x40012c00
 800597c:	40013400 	.word	0x40013400
 8005980:	40014000 	.word	0x40014000
 8005984:	40014400 	.word	0x40014400
 8005988:	40014800 	.word	0x40014800
 800598c:	40015000 	.word	0x40015000

08005990 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	021b      	lsls	r3, r3, #8
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	051b      	lsls	r3, r3, #20
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a1a      	ldr	r2, [pc, #104]	@ (8005a50 <TIM_OC6_SetConfig+0xc0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d013      	beq.n	8005a14 <TIM_OC6_SetConfig+0x84>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a19      	ldr	r2, [pc, #100]	@ (8005a54 <TIM_OC6_SetConfig+0xc4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00f      	beq.n	8005a14 <TIM_OC6_SetConfig+0x84>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a18      	ldr	r2, [pc, #96]	@ (8005a58 <TIM_OC6_SetConfig+0xc8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00b      	beq.n	8005a14 <TIM_OC6_SetConfig+0x84>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a17      	ldr	r2, [pc, #92]	@ (8005a5c <TIM_OC6_SetConfig+0xcc>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d007      	beq.n	8005a14 <TIM_OC6_SetConfig+0x84>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a16      	ldr	r2, [pc, #88]	@ (8005a60 <TIM_OC6_SetConfig+0xd0>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d003      	beq.n	8005a14 <TIM_OC6_SetConfig+0x84>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a15      	ldr	r2, [pc, #84]	@ (8005a64 <TIM_OC6_SetConfig+0xd4>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d109      	bne.n	8005a28 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	029b      	lsls	r3, r3, #10
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	621a      	str	r2, [r3, #32]
}
 8005a42:	bf00      	nop
 8005a44:	371c      	adds	r7, #28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40012c00 	.word	0x40012c00
 8005a54:	40013400 	.word	0x40013400
 8005a58:	40014000 	.word	0x40014000
 8005a5c:	40014400 	.word	0x40014400
 8005a60:	40014800 	.word	0x40014800
 8005a64:	40015000 	.word	0x40015000

08005a68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	f023 0201 	bic.w	r2, r3, #1
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	011b      	lsls	r3, r3, #4
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f023 030a 	bic.w	r3, r3, #10
 8005aa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	621a      	str	r2, [r3, #32]
}
 8005aba:	bf00      	nop
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b087      	sub	sp, #28
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	f023 0210 	bic.w	r2, r3, #16
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005af0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	031b      	lsls	r3, r3, #12
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	621a      	str	r2, [r3, #32]
}
 8005b1a:	bf00      	nop
 8005b1c:	371c      	adds	r7, #28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b085      	sub	sp, #20
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f043 0307 	orr.w	r3, r3, #7
 8005b4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	609a      	str	r2, [r3, #8]
}
 8005b54:	bf00      	nop
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
 8005b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	021a      	lsls	r2, r3, #8
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	431a      	orrs	r2, r3
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	609a      	str	r2, [r3, #8]
}
 8005b94:	bf00      	nop
 8005b96:	371c      	adds	r7, #28
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f003 031f 	and.w	r3, r3, #31
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6a1a      	ldr	r2, [r3, #32]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	401a      	ands	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a1a      	ldr	r2, [r3, #32]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f003 031f 	and.w	r3, r3, #31
 8005bd2:	6879      	ldr	r1, [r7, #4]
 8005bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	621a      	str	r2, [r3, #32]
}
 8005bde:	bf00      	nop
 8005be0:	371c      	adds	r7, #28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
	...

08005bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e074      	b.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a34      	ldr	r2, [pc, #208]	@ (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d009      	beq.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a33      	ldr	r2, [pc, #204]	@ (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d004      	beq.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a31      	ldr	r2, [pc, #196]	@ (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d108      	bne.n	8005c54 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005c48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a21      	ldr	r2, [pc, #132]	@ (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d022      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c84:	d01d      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8005d08 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d018      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1d      	ldr	r2, [pc, #116]	@ (8005d0c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d013      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00e      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a15      	ldr	r2, [pc, #84]	@ (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d009      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a18      	ldr	r2, [pc, #96]	@ (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d004      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a11      	ldr	r2, [pc, #68]	@ (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d10c      	bne.n	8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40012c00 	.word	0x40012c00
 8005d00:	40013400 	.word	0x40013400
 8005d04:	40015000 	.word	0x40015000
 8005d08:	40000400 	.word	0x40000400
 8005d0c:	40000800 	.word	0x40000800
 8005d10:	40000c00 	.word	0x40000c00
 8005d14:	40014000 	.word	0x40014000

08005d18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e078      	b.n	8005e26 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	041b      	lsls	r3, r3, #16
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a1c      	ldr	r2, [pc, #112]	@ (8005e34 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d009      	beq.n	8005dda <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a1b      	ldr	r2, [pc, #108]	@ (8005e38 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d004      	beq.n	8005dda <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a19      	ldr	r2, [pc, #100]	@ (8005e3c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d11c      	bne.n	8005e14 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de4:	051b      	lsls	r3, r3, #20
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	40012c00 	.word	0x40012c00
 8005e38:	40013400 	.word	0x40013400
 8005e3c:	40015000 	.word	0x40015000

08005e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e042      	b.n	8005f64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d106      	bne.n	8005ef6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7fc fae1 	bl	80024b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2224      	movs	r2, #36	@ 0x24
 8005efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0201 	bic.w	r2, r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 ff42 	bl	8006da0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fc43 	bl	80067a8 <UART_SetConfig>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e01b      	b.n	8005f64 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689a      	ldr	r2, [r3, #8]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0201 	orr.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 ffc1 	bl	8006ee4 <UART_CheckIdleState>
 8005f62:	4603      	mov	r3, r0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08a      	sub	sp, #40	@ 0x28
 8005f70:	af02      	add	r7, sp, #8
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f82:	2b20      	cmp	r3, #32
 8005f84:	d17b      	bne.n	800607e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <HAL_UART_Transmit+0x26>
 8005f8c:	88fb      	ldrh	r3, [r7, #6]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e074      	b.n	8006080 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2221      	movs	r2, #33	@ 0x21
 8005fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fa6:	f7fc fe4f 	bl	8002c48 <HAL_GetTick>
 8005faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	88fa      	ldrh	r2, [r7, #6]
 8005fb0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	88fa      	ldrh	r2, [r7, #6]
 8005fb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fc4:	d108      	bne.n	8005fd8 <HAL_UART_Transmit+0x6c>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d104      	bne.n	8005fd8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	61bb      	str	r3, [r7, #24]
 8005fd6:	e003      	b.n	8005fe0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fe0:	e030      	b.n	8006044 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	2180      	movs	r1, #128	@ 0x80
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f001 f823 	bl	8007038 <UART_WaitOnFlagUntilTimeout>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d005      	beq.n	8006004 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e03d      	b.n	8006080 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10b      	bne.n	8006022 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006018:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	3302      	adds	r3, #2
 800601e:	61bb      	str	r3, [r7, #24]
 8006020:	e007      	b.n	8006032 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	781a      	ldrb	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	3301      	adds	r3, #1
 8006030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006038:	b29b      	uxth	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800604a:	b29b      	uxth	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1c8      	bne.n	8005fe2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2200      	movs	r2, #0
 8006058:	2140      	movs	r1, #64	@ 0x40
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 ffec 	bl	8007038 <UART_WaitOnFlagUntilTimeout>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d005      	beq.n	8006072 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2220      	movs	r2, #32
 800606a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e006      	b.n	8006080 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2220      	movs	r2, #32
 8006076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800607a:	2300      	movs	r3, #0
 800607c:	e000      	b.n	8006080 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800607e:	2302      	movs	r3, #2
  }
}
 8006080:	4618      	mov	r0, r3
 8006082:	3720      	adds	r7, #32
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08a      	sub	sp, #40	@ 0x28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	4613      	mov	r3, r2
 8006094:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800609c:	2b20      	cmp	r3, #32
 800609e:	d137      	bne.n	8006110 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <HAL_UART_Receive_IT+0x24>
 80060a6:	88fb      	ldrh	r3, [r7, #6]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e030      	b.n	8006112 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a18      	ldr	r2, [pc, #96]	@ (800611c <HAL_UART_Receive_IT+0x94>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d01f      	beq.n	8006100 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d018      	beq.n	8006100 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	613b      	str	r3, [r7, #16]
   return(result);
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80060e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	623b      	str	r3, [r7, #32]
 80060ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	69f9      	ldr	r1, [r7, #28]
 80060f2:	6a3a      	ldr	r2, [r7, #32]
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e6      	bne.n	80060ce <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006100:	88fb      	ldrh	r3, [r7, #6]
 8006102:	461a      	mov	r2, r3
 8006104:	68b9      	ldr	r1, [r7, #8]
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f001 f804 	bl	8007114 <UART_Start_Receive_IT>
 800610c:	4603      	mov	r3, r0
 800610e:	e000      	b.n	8006112 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006110:	2302      	movs	r3, #2
  }
}
 8006112:	4618      	mov	r0, r3
 8006114:	3728      	adds	r7, #40	@ 0x28
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	40008000 	.word	0x40008000

08006120 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b0ba      	sub	sp, #232	@ 0xe8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006146:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800614a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800614e:	4013      	ands	r3, r2
 8006150:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006154:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006158:	2b00      	cmp	r3, #0
 800615a:	d11b      	bne.n	8006194 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800615c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006160:	f003 0320 	and.w	r3, r3, #32
 8006164:	2b00      	cmp	r3, #0
 8006166:	d015      	beq.n	8006194 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800616c:	f003 0320 	and.w	r3, r3, #32
 8006170:	2b00      	cmp	r3, #0
 8006172:	d105      	bne.n	8006180 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d009      	beq.n	8006194 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 82e3 	beq.w	8006750 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	4798      	blx	r3
      }
      return;
 8006192:	e2dd      	b.n	8006750 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006194:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 8123 	beq.w	80063e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800619e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80061a2:	4b8d      	ldr	r3, [pc, #564]	@ (80063d8 <HAL_UART_IRQHandler+0x2b8>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d106      	bne.n	80061b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80061aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80061ae:	4b8b      	ldr	r3, [pc, #556]	@ (80063dc <HAL_UART_IRQHandler+0x2bc>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 8116 	beq.w	80063e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80061b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d011      	beq.n	80061e8 <HAL_UART_IRQHandler+0xc8>
 80061c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00b      	beq.n	80061e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2201      	movs	r2, #1
 80061d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061de:	f043 0201 	orr.w	r2, r3, #1
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d011      	beq.n	8006218 <HAL_UART_IRQHandler+0xf8>
 80061f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00b      	beq.n	8006218 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2202      	movs	r2, #2
 8006206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800620e:	f043 0204 	orr.w	r2, r3, #4
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d011      	beq.n	8006248 <HAL_UART_IRQHandler+0x128>
 8006224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00b      	beq.n	8006248 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2204      	movs	r2, #4
 8006236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800623e:	f043 0202 	orr.w	r2, r3, #2
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800624c:	f003 0308 	and.w	r3, r3, #8
 8006250:	2b00      	cmp	r3, #0
 8006252:	d017      	beq.n	8006284 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006258:	f003 0320 	and.w	r3, r3, #32
 800625c:	2b00      	cmp	r3, #0
 800625e:	d105      	bne.n	800626c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006260:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006264:	4b5c      	ldr	r3, [pc, #368]	@ (80063d8 <HAL_UART_IRQHandler+0x2b8>)
 8006266:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00b      	beq.n	8006284 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2208      	movs	r2, #8
 8006272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800627a:	f043 0208 	orr.w	r2, r3, #8
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006288:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800628c:	2b00      	cmp	r3, #0
 800628e:	d012      	beq.n	80062b6 <HAL_UART_IRQHandler+0x196>
 8006290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006294:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00c      	beq.n	80062b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80062a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ac:	f043 0220 	orr.w	r2, r3, #32
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 8249 	beq.w	8006754 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80062c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d013      	beq.n	80062f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80062ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d105      	bne.n	80062e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80062da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d007      	beq.n	80062f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800630a:	2b40      	cmp	r3, #64	@ 0x40
 800630c:	d005      	beq.n	800631a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800630e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006312:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006316:	2b00      	cmp	r3, #0
 8006318:	d054      	beq.n	80063c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f001 f81c 	bl	8007358 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800632a:	2b40      	cmp	r3, #64	@ 0x40
 800632c:	d146      	bne.n	80063bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3308      	adds	r3, #8
 8006334:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006338:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006344:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006348:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800634c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3308      	adds	r3, #8
 8006356:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800635a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800635e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006366:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800636a:	e841 2300 	strex	r3, r2, [r1]
 800636e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1d9      	bne.n	800632e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006380:	2b00      	cmp	r3, #0
 8006382:	d017      	beq.n	80063b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800638a:	4a15      	ldr	r2, [pc, #84]	@ (80063e0 <HAL_UART_IRQHandler+0x2c0>)
 800638c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006394:	4618      	mov	r0, r3
 8006396:	f7fc fd9c 	bl	8002ed2 <HAL_DMA_Abort_IT>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d019      	beq.n	80063d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80063ae:	4610      	mov	r0, r2
 80063b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b2:	e00f      	b.n	80063d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f9e1 	bl	800677c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ba:	e00b      	b.n	80063d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f9dd 	bl	800677c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c2:	e007      	b.n	80063d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f9d9 	bl	800677c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80063d2:	e1bf      	b.n	8006754 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d4:	bf00      	nop
    return;
 80063d6:	e1bd      	b.n	8006754 <HAL_UART_IRQHandler+0x634>
 80063d8:	10000001 	.word	0x10000001
 80063dc:	04000120 	.word	0x04000120
 80063e0:	08007425 	.word	0x08007425

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	f040 8153 	bne.w	8006694 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063f2:	f003 0310 	and.w	r3, r3, #16
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 814c 	beq.w	8006694 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006400:	f003 0310 	and.w	r3, r3, #16
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 8145 	beq.w	8006694 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2210      	movs	r2, #16
 8006410:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800641c:	2b40      	cmp	r3, #64	@ 0x40
 800641e:	f040 80bb 	bne.w	8006598 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006430:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 818f 	beq.w	8006758 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006440:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006444:	429a      	cmp	r2, r3
 8006446:	f080 8187 	bcs.w	8006758 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006450:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0320 	and.w	r3, r3, #32
 8006462:	2b00      	cmp	r3, #0
 8006464:	f040 8087 	bne.w	8006576 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800647c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006484:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006492:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006496:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800649e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80064a2:	e841 2300 	strex	r3, r2, [r1]
 80064a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80064aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1da      	bne.n	8006468 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3308      	adds	r3, #8
 80064b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80064c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064c4:	f023 0301 	bic.w	r3, r3, #1
 80064c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3308      	adds	r3, #8
 80064d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80064d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80064da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80064de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80064e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e1      	bne.n	80064b2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3308      	adds	r3, #8
 80064f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80064fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006500:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006504:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3308      	adds	r3, #8
 800650e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006512:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006514:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006518:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006520:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e3      	bne.n	80064ee <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800653c:	e853 3f00 	ldrex	r3, [r3]
 8006540:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006542:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006544:	f023 0310 	bic.w	r3, r3, #16
 8006548:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	461a      	mov	r2, r3
 8006552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006556:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006558:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800655c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006564:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1e4      	bne.n	8006534 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006570:	4618      	mov	r0, r3
 8006572:	f7fc fc55 	bl	8002e20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2202      	movs	r2, #2
 800657a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006588:	b29b      	uxth	r3, r3
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	b29b      	uxth	r3, r3
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f8fd 	bl	8006790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006596:	e0df      	b.n	8006758 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 80d1 	beq.w	800675c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80065ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 80cc 	beq.w	800675c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065cc:	e853 3f00 	ldrex	r3, [r3]
 80065d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	461a      	mov	r2, r3
 80065e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80065e8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065ee:	e841 2300 	strex	r3, r2, [r1]
 80065f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1e4      	bne.n	80065c4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3308      	adds	r3, #8
 8006600:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	623b      	str	r3, [r7, #32]
   return(result);
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006610:	f023 0301 	bic.w	r3, r3, #1
 8006614:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3308      	adds	r3, #8
 800661e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006622:	633a      	str	r2, [r7, #48]	@ 0x30
 8006624:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e1      	bne.n	80065fa <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2220      	movs	r2, #32
 800663a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	60fb      	str	r3, [r7, #12]
   return(result);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0310 	bic.w	r3, r3, #16
 800665e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800666c:	61fb      	str	r3, [r7, #28]
 800666e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006670:	69b9      	ldr	r1, [r7, #24]
 8006672:	69fa      	ldr	r2, [r7, #28]
 8006674:	e841 2300 	strex	r3, r2, [r1]
 8006678:	617b      	str	r3, [r7, #20]
   return(result);
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e4      	bne.n	800664a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006686:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800668a:	4619      	mov	r1, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f87f 	bl	8006790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006692:	e063      	b.n	800675c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006698:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00e      	beq.n	80066be <HAL_UART_IRQHandler+0x59e>
 80066a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d008      	beq.n	80066be <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80066b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f001 fc12 	bl	8007ee0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066bc:	e051      	b.n	8006762 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80066be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d014      	beq.n	80066f4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80066ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d105      	bne.n	80066e2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80066d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d008      	beq.n	80066f4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d03a      	beq.n	8006760 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	4798      	blx	r3
    }
    return;
 80066f2:	e035      	b.n	8006760 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d009      	beq.n	8006714 <HAL_UART_IRQHandler+0x5f4>
 8006700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fe9f 	bl	8007450 <UART_EndTransmit_IT>
    return;
 8006712:	e026      	b.n	8006762 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006718:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d009      	beq.n	8006734 <HAL_UART_IRQHandler+0x614>
 8006720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006724:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 fbeb 	bl	8007f08 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006732:	e016      	b.n	8006762 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006738:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d010      	beq.n	8006762 <HAL_UART_IRQHandler+0x642>
 8006740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006744:	2b00      	cmp	r3, #0
 8006746:	da0c      	bge.n	8006762 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f001 fbd3 	bl	8007ef4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800674e:	e008      	b.n	8006762 <HAL_UART_IRQHandler+0x642>
      return;
 8006750:	bf00      	nop
 8006752:	e006      	b.n	8006762 <HAL_UART_IRQHandler+0x642>
    return;
 8006754:	bf00      	nop
 8006756:	e004      	b.n	8006762 <HAL_UART_IRQHandler+0x642>
      return;
 8006758:	bf00      	nop
 800675a:	e002      	b.n	8006762 <HAL_UART_IRQHandler+0x642>
      return;
 800675c:	bf00      	nop
 800675e:	e000      	b.n	8006762 <HAL_UART_IRQHandler+0x642>
    return;
 8006760:	bf00      	nop
  }
}
 8006762:	37e8      	adds	r7, #232	@ 0xe8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067ac:	b08c      	sub	sp, #48	@ 0x30
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	431a      	orrs	r2, r3
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	431a      	orrs	r2, r3
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	69db      	ldr	r3, [r3, #28]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	4baa      	ldr	r3, [pc, #680]	@ (8006a80 <UART_SetConfig+0x2d8>)
 80067d8:	4013      	ands	r3, r2
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	6812      	ldr	r2, [r2, #0]
 80067de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067e0:	430b      	orrs	r3, r1
 80067e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	68da      	ldr	r2, [r3, #12]
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a9f      	ldr	r2, [pc, #636]	@ (8006a84 <UART_SetConfig+0x2dc>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d004      	beq.n	8006814 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006810:	4313      	orrs	r3, r2
 8006812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800681e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	6812      	ldr	r2, [r2, #0]
 8006826:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006828:	430b      	orrs	r3, r1
 800682a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006832:	f023 010f 	bic.w	r1, r3, #15
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a90      	ldr	r2, [pc, #576]	@ (8006a88 <UART_SetConfig+0x2e0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d125      	bne.n	8006898 <UART_SetConfig+0xf0>
 800684c:	4b8f      	ldr	r3, [pc, #572]	@ (8006a8c <UART_SetConfig+0x2e4>)
 800684e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006852:	f003 0303 	and.w	r3, r3, #3
 8006856:	2b03      	cmp	r3, #3
 8006858:	d81a      	bhi.n	8006890 <UART_SetConfig+0xe8>
 800685a:	a201      	add	r2, pc, #4	@ (adr r2, 8006860 <UART_SetConfig+0xb8>)
 800685c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006860:	08006871 	.word	0x08006871
 8006864:	08006881 	.word	0x08006881
 8006868:	08006879 	.word	0x08006879
 800686c:	08006889 	.word	0x08006889
 8006870:	2301      	movs	r3, #1
 8006872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006876:	e116      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 8006878:	2302      	movs	r3, #2
 800687a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800687e:	e112      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 8006880:	2304      	movs	r3, #4
 8006882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006886:	e10e      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 8006888:	2308      	movs	r3, #8
 800688a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800688e:	e10a      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 8006890:	2310      	movs	r3, #16
 8006892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006896:	e106      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a7c      	ldr	r2, [pc, #496]	@ (8006a90 <UART_SetConfig+0x2e8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d138      	bne.n	8006914 <UART_SetConfig+0x16c>
 80068a2:	4b7a      	ldr	r3, [pc, #488]	@ (8006a8c <UART_SetConfig+0x2e4>)
 80068a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a8:	f003 030c 	and.w	r3, r3, #12
 80068ac:	2b0c      	cmp	r3, #12
 80068ae:	d82d      	bhi.n	800690c <UART_SetConfig+0x164>
 80068b0:	a201      	add	r2, pc, #4	@ (adr r2, 80068b8 <UART_SetConfig+0x110>)
 80068b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b6:	bf00      	nop
 80068b8:	080068ed 	.word	0x080068ed
 80068bc:	0800690d 	.word	0x0800690d
 80068c0:	0800690d 	.word	0x0800690d
 80068c4:	0800690d 	.word	0x0800690d
 80068c8:	080068fd 	.word	0x080068fd
 80068cc:	0800690d 	.word	0x0800690d
 80068d0:	0800690d 	.word	0x0800690d
 80068d4:	0800690d 	.word	0x0800690d
 80068d8:	080068f5 	.word	0x080068f5
 80068dc:	0800690d 	.word	0x0800690d
 80068e0:	0800690d 	.word	0x0800690d
 80068e4:	0800690d 	.word	0x0800690d
 80068e8:	08006905 	.word	0x08006905
 80068ec:	2300      	movs	r3, #0
 80068ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068f2:	e0d8      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 80068f4:	2302      	movs	r3, #2
 80068f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068fa:	e0d4      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 80068fc:	2304      	movs	r3, #4
 80068fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006902:	e0d0      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 8006904:	2308      	movs	r3, #8
 8006906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800690a:	e0cc      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 800690c:	2310      	movs	r3, #16
 800690e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006912:	e0c8      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a5e      	ldr	r2, [pc, #376]	@ (8006a94 <UART_SetConfig+0x2ec>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d125      	bne.n	800696a <UART_SetConfig+0x1c2>
 800691e:	4b5b      	ldr	r3, [pc, #364]	@ (8006a8c <UART_SetConfig+0x2e4>)
 8006920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006924:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006928:	2b30      	cmp	r3, #48	@ 0x30
 800692a:	d016      	beq.n	800695a <UART_SetConfig+0x1b2>
 800692c:	2b30      	cmp	r3, #48	@ 0x30
 800692e:	d818      	bhi.n	8006962 <UART_SetConfig+0x1ba>
 8006930:	2b20      	cmp	r3, #32
 8006932:	d00a      	beq.n	800694a <UART_SetConfig+0x1a2>
 8006934:	2b20      	cmp	r3, #32
 8006936:	d814      	bhi.n	8006962 <UART_SetConfig+0x1ba>
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <UART_SetConfig+0x19a>
 800693c:	2b10      	cmp	r3, #16
 800693e:	d008      	beq.n	8006952 <UART_SetConfig+0x1aa>
 8006940:	e00f      	b.n	8006962 <UART_SetConfig+0x1ba>
 8006942:	2300      	movs	r3, #0
 8006944:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006948:	e0ad      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 800694a:	2302      	movs	r3, #2
 800694c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006950:	e0a9      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 8006952:	2304      	movs	r3, #4
 8006954:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006958:	e0a5      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 800695a:	2308      	movs	r3, #8
 800695c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006960:	e0a1      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 8006962:	2310      	movs	r3, #16
 8006964:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006968:	e09d      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a4a      	ldr	r2, [pc, #296]	@ (8006a98 <UART_SetConfig+0x2f0>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d125      	bne.n	80069c0 <UART_SetConfig+0x218>
 8006974:	4b45      	ldr	r3, [pc, #276]	@ (8006a8c <UART_SetConfig+0x2e4>)
 8006976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800697a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800697e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006980:	d016      	beq.n	80069b0 <UART_SetConfig+0x208>
 8006982:	2bc0      	cmp	r3, #192	@ 0xc0
 8006984:	d818      	bhi.n	80069b8 <UART_SetConfig+0x210>
 8006986:	2b80      	cmp	r3, #128	@ 0x80
 8006988:	d00a      	beq.n	80069a0 <UART_SetConfig+0x1f8>
 800698a:	2b80      	cmp	r3, #128	@ 0x80
 800698c:	d814      	bhi.n	80069b8 <UART_SetConfig+0x210>
 800698e:	2b00      	cmp	r3, #0
 8006990:	d002      	beq.n	8006998 <UART_SetConfig+0x1f0>
 8006992:	2b40      	cmp	r3, #64	@ 0x40
 8006994:	d008      	beq.n	80069a8 <UART_SetConfig+0x200>
 8006996:	e00f      	b.n	80069b8 <UART_SetConfig+0x210>
 8006998:	2300      	movs	r3, #0
 800699a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800699e:	e082      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 80069a0:	2302      	movs	r3, #2
 80069a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069a6:	e07e      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 80069a8:	2304      	movs	r3, #4
 80069aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ae:	e07a      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 80069b0:	2308      	movs	r3, #8
 80069b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069b6:	e076      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 80069b8:	2310      	movs	r3, #16
 80069ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069be:	e072      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a35      	ldr	r2, [pc, #212]	@ (8006a9c <UART_SetConfig+0x2f4>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d12a      	bne.n	8006a20 <UART_SetConfig+0x278>
 80069ca:	4b30      	ldr	r3, [pc, #192]	@ (8006a8c <UART_SetConfig+0x2e4>)
 80069cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069d8:	d01a      	beq.n	8006a10 <UART_SetConfig+0x268>
 80069da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069de:	d81b      	bhi.n	8006a18 <UART_SetConfig+0x270>
 80069e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069e4:	d00c      	beq.n	8006a00 <UART_SetConfig+0x258>
 80069e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069ea:	d815      	bhi.n	8006a18 <UART_SetConfig+0x270>
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <UART_SetConfig+0x250>
 80069f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069f4:	d008      	beq.n	8006a08 <UART_SetConfig+0x260>
 80069f6:	e00f      	b.n	8006a18 <UART_SetConfig+0x270>
 80069f8:	2300      	movs	r3, #0
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069fe:	e052      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 8006a00:	2302      	movs	r3, #2
 8006a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a06:	e04e      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 8006a08:	2304      	movs	r3, #4
 8006a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a0e:	e04a      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 8006a10:	2308      	movs	r3, #8
 8006a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a16:	e046      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 8006a18:	2310      	movs	r3, #16
 8006a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a1e:	e042      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a17      	ldr	r2, [pc, #92]	@ (8006a84 <UART_SetConfig+0x2dc>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d13a      	bne.n	8006aa0 <UART_SetConfig+0x2f8>
 8006a2a:	4b18      	ldr	r3, [pc, #96]	@ (8006a8c <UART_SetConfig+0x2e4>)
 8006a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a38:	d01a      	beq.n	8006a70 <UART_SetConfig+0x2c8>
 8006a3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a3e:	d81b      	bhi.n	8006a78 <UART_SetConfig+0x2d0>
 8006a40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a44:	d00c      	beq.n	8006a60 <UART_SetConfig+0x2b8>
 8006a46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a4a:	d815      	bhi.n	8006a78 <UART_SetConfig+0x2d0>
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <UART_SetConfig+0x2b0>
 8006a50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a54:	d008      	beq.n	8006a68 <UART_SetConfig+0x2c0>
 8006a56:	e00f      	b.n	8006a78 <UART_SetConfig+0x2d0>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a5e:	e022      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 8006a60:	2302      	movs	r3, #2
 8006a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a66:	e01e      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 8006a68:	2304      	movs	r3, #4
 8006a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a6e:	e01a      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 8006a70:	2308      	movs	r3, #8
 8006a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a76:	e016      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 8006a78:	2310      	movs	r3, #16
 8006a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a7e:	e012      	b.n	8006aa6 <UART_SetConfig+0x2fe>
 8006a80:	cfff69f3 	.word	0xcfff69f3
 8006a84:	40008000 	.word	0x40008000
 8006a88:	40013800 	.word	0x40013800
 8006a8c:	40021000 	.word	0x40021000
 8006a90:	40004400 	.word	0x40004400
 8006a94:	40004800 	.word	0x40004800
 8006a98:	40004c00 	.word	0x40004c00
 8006a9c:	40005000 	.word	0x40005000
 8006aa0:	2310      	movs	r3, #16
 8006aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4aae      	ldr	r2, [pc, #696]	@ (8006d64 <UART_SetConfig+0x5bc>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	f040 8097 	bne.w	8006be0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ab2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ab6:	2b08      	cmp	r3, #8
 8006ab8:	d823      	bhi.n	8006b02 <UART_SetConfig+0x35a>
 8006aba:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac0 <UART_SetConfig+0x318>)
 8006abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac0:	08006ae5 	.word	0x08006ae5
 8006ac4:	08006b03 	.word	0x08006b03
 8006ac8:	08006aed 	.word	0x08006aed
 8006acc:	08006b03 	.word	0x08006b03
 8006ad0:	08006af3 	.word	0x08006af3
 8006ad4:	08006b03 	.word	0x08006b03
 8006ad8:	08006b03 	.word	0x08006b03
 8006adc:	08006b03 	.word	0x08006b03
 8006ae0:	08006afb 	.word	0x08006afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ae4:	f7fd f966 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 8006ae8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006aea:	e010      	b.n	8006b0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006aec:	4b9e      	ldr	r3, [pc, #632]	@ (8006d68 <UART_SetConfig+0x5c0>)
 8006aee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006af0:	e00d      	b.n	8006b0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006af2:	f7fd f8f1 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8006af6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006af8:	e009      	b.n	8006b0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006afe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b00:	e005      	b.n	8006b0e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 8130 	beq.w	8006d76 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1a:	4a94      	ldr	r2, [pc, #592]	@ (8006d6c <UART_SetConfig+0x5c4>)
 8006b1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b20:	461a      	mov	r2, r3
 8006b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b24:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b28:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	685a      	ldr	r2, [r3, #4]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	4413      	add	r3, r2
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d305      	bcc.n	8006b46 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d903      	bls.n	8006b4e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b4c:	e113      	b.n	8006d76 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b50:	2200      	movs	r2, #0
 8006b52:	60bb      	str	r3, [r7, #8]
 8006b54:	60fa      	str	r2, [r7, #12]
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5a:	4a84      	ldr	r2, [pc, #528]	@ (8006d6c <UART_SetConfig+0x5c4>)
 8006b5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2200      	movs	r2, #0
 8006b64:	603b      	str	r3, [r7, #0]
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b70:	f7fa f8b2 	bl	8000cd8 <__aeabi_uldivmod>
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	4610      	mov	r0, r2
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	f04f 0200 	mov.w	r2, #0
 8006b80:	f04f 0300 	mov.w	r3, #0
 8006b84:	020b      	lsls	r3, r1, #8
 8006b86:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b8a:	0202      	lsls	r2, r0, #8
 8006b8c:	6979      	ldr	r1, [r7, #20]
 8006b8e:	6849      	ldr	r1, [r1, #4]
 8006b90:	0849      	lsrs	r1, r1, #1
 8006b92:	2000      	movs	r0, #0
 8006b94:	460c      	mov	r4, r1
 8006b96:	4605      	mov	r5, r0
 8006b98:	eb12 0804 	adds.w	r8, r2, r4
 8006b9c:	eb43 0905 	adc.w	r9, r3, r5
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	469a      	mov	sl, r3
 8006ba8:	4693      	mov	fp, r2
 8006baa:	4652      	mov	r2, sl
 8006bac:	465b      	mov	r3, fp
 8006bae:	4640      	mov	r0, r8
 8006bb0:	4649      	mov	r1, r9
 8006bb2:	f7fa f891 	bl	8000cd8 <__aeabi_uldivmod>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4613      	mov	r3, r2
 8006bbc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
 8006bc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bc4:	d308      	bcc.n	8006bd8 <UART_SetConfig+0x430>
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bcc:	d204      	bcs.n	8006bd8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6a3a      	ldr	r2, [r7, #32]
 8006bd4:	60da      	str	r2, [r3, #12]
 8006bd6:	e0ce      	b.n	8006d76 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006bde:	e0ca      	b.n	8006d76 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006be8:	d166      	bne.n	8006cb8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006bea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006bee:	2b08      	cmp	r3, #8
 8006bf0:	d827      	bhi.n	8006c42 <UART_SetConfig+0x49a>
 8006bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8006bf8 <UART_SetConfig+0x450>)
 8006bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf8:	08006c1d 	.word	0x08006c1d
 8006bfc:	08006c25 	.word	0x08006c25
 8006c00:	08006c2d 	.word	0x08006c2d
 8006c04:	08006c43 	.word	0x08006c43
 8006c08:	08006c33 	.word	0x08006c33
 8006c0c:	08006c43 	.word	0x08006c43
 8006c10:	08006c43 	.word	0x08006c43
 8006c14:	08006c43 	.word	0x08006c43
 8006c18:	08006c3b 	.word	0x08006c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c1c:	f7fd f8ca 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 8006c20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c22:	e014      	b.n	8006c4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c24:	f7fd f8dc 	bl	8003de0 <HAL_RCC_GetPCLK2Freq>
 8006c28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c2a:	e010      	b.n	8006c4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c2c:	4b4e      	ldr	r3, [pc, #312]	@ (8006d68 <UART_SetConfig+0x5c0>)
 8006c2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c30:	e00d      	b.n	8006c4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c32:	f7fd f851 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8006c36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c38:	e009      	b.n	8006c4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c40:	e005      	b.n	8006c4e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 8090 	beq.w	8006d76 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c5a:	4a44      	ldr	r2, [pc, #272]	@ (8006d6c <UART_SetConfig+0x5c4>)
 8006c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c60:	461a      	mov	r2, r3
 8006c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c64:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c68:	005a      	lsls	r2, r3, #1
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	085b      	lsrs	r3, r3, #1
 8006c70:	441a      	add	r2, r3
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	2b0f      	cmp	r3, #15
 8006c80:	d916      	bls.n	8006cb0 <UART_SetConfig+0x508>
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c88:	d212      	bcs.n	8006cb0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	f023 030f 	bic.w	r3, r3, #15
 8006c92:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	085b      	lsrs	r3, r3, #1
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	f003 0307 	and.w	r3, r3, #7
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	8bfb      	ldrh	r3, [r7, #30]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	8bfa      	ldrh	r2, [r7, #30]
 8006cac:	60da      	str	r2, [r3, #12]
 8006cae:	e062      	b.n	8006d76 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006cb6:	e05e      	b.n	8006d76 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cb8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cbc:	2b08      	cmp	r3, #8
 8006cbe:	d828      	bhi.n	8006d12 <UART_SetConfig+0x56a>
 8006cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc8 <UART_SetConfig+0x520>)
 8006cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc6:	bf00      	nop
 8006cc8:	08006ced 	.word	0x08006ced
 8006ccc:	08006cf5 	.word	0x08006cf5
 8006cd0:	08006cfd 	.word	0x08006cfd
 8006cd4:	08006d13 	.word	0x08006d13
 8006cd8:	08006d03 	.word	0x08006d03
 8006cdc:	08006d13 	.word	0x08006d13
 8006ce0:	08006d13 	.word	0x08006d13
 8006ce4:	08006d13 	.word	0x08006d13
 8006ce8:	08006d0b 	.word	0x08006d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cec:	f7fd f862 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 8006cf0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cf2:	e014      	b.n	8006d1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cf4:	f7fd f874 	bl	8003de0 <HAL_RCC_GetPCLK2Freq>
 8006cf8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cfa:	e010      	b.n	8006d1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8006d68 <UART_SetConfig+0x5c0>)
 8006cfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d00:	e00d      	b.n	8006d1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d02:	f7fc ffe9 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8006d06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d08:	e009      	b.n	8006d1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d10:	e005      	b.n	8006d1e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d1c:	bf00      	nop
    }

    if (pclk != 0U)
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d028      	beq.n	8006d76 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d28:	4a10      	ldr	r2, [pc, #64]	@ (8006d6c <UART_SetConfig+0x5c4>)
 8006d2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d32:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	085b      	lsrs	r3, r3, #1
 8006d3c:	441a      	add	r2, r3
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	2b0f      	cmp	r3, #15
 8006d4c:	d910      	bls.n	8006d70 <UART_SetConfig+0x5c8>
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d54:	d20c      	bcs.n	8006d70 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	60da      	str	r2, [r3, #12]
 8006d60:	e009      	b.n	8006d76 <UART_SetConfig+0x5ce>
 8006d62:	bf00      	nop
 8006d64:	40008000 	.word	0x40008000
 8006d68:	00f42400 	.word	0x00f42400
 8006d6c:	0800d584 	.word	0x0800d584
      }
      else
      {
        ret = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006d92:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3730      	adds	r7, #48	@ 0x30
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006da0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dac:	f003 0308 	and.w	r3, r3, #8
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00a      	beq.n	8006dca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	430a      	orrs	r2, r1
 8006dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df0:	f003 0302 	and.w	r3, r3, #2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00a      	beq.n	8006e0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e12:	f003 0304 	and.w	r3, r3, #4
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00a      	beq.n	8006e30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e34:	f003 0310 	and.w	r3, r3, #16
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00a      	beq.n	8006e52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e56:	f003 0320 	and.w	r3, r3, #32
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00a      	beq.n	8006e74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	430a      	orrs	r2, r1
 8006e72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d01a      	beq.n	8006eb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e9e:	d10a      	bne.n	8006eb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00a      	beq.n	8006ed8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	605a      	str	r2, [r3, #4]
  }
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b098      	sub	sp, #96	@ 0x60
 8006ee8:	af02      	add	r7, sp, #8
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ef4:	f7fb fea8 	bl	8002c48 <HAL_GetTick>
 8006ef8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0308 	and.w	r3, r3, #8
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	d12f      	bne.n	8006f68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f10:	2200      	movs	r2, #0
 8006f12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f88e 	bl	8007038 <UART_WaitOnFlagUntilTimeout>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d022      	beq.n	8006f68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f36:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f40:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f48:	e841 2300 	strex	r3, r2, [r1]
 8006f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1e6      	bne.n	8006f22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2220      	movs	r2, #32
 8006f58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e063      	b.n	8007030 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0304 	and.w	r3, r3, #4
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d149      	bne.n	800700a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f76:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f857 	bl	8007038 <UART_WaitOnFlagUntilTimeout>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d03c      	beq.n	800700a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f98:	e853 3f00 	ldrex	r3, [r3]
 8006f9c:	623b      	str	r3, [r7, #32]
   return(result);
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fae:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1e6      	bne.n	8006f90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	e853 3f00 	ldrex	r3, [r3]
 8006fd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f023 0301 	bic.w	r3, r3, #1
 8006fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3308      	adds	r3, #8
 8006fe0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fe2:	61fa      	str	r2, [r7, #28]
 8006fe4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe6:	69b9      	ldr	r1, [r7, #24]
 8006fe8:	69fa      	ldr	r2, [r7, #28]
 8006fea:	e841 2300 	strex	r3, r2, [r1]
 8006fee:	617b      	str	r3, [r7, #20]
   return(result);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1e5      	bne.n	8006fc2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e012      	b.n	8007030 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2220      	movs	r2, #32
 800700e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2220      	movs	r2, #32
 8007016:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3758      	adds	r7, #88	@ 0x58
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	603b      	str	r3, [r7, #0]
 8007044:	4613      	mov	r3, r2
 8007046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007048:	e04f      	b.n	80070ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007050:	d04b      	beq.n	80070ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007052:	f7fb fdf9 	bl	8002c48 <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	429a      	cmp	r2, r3
 8007060:	d302      	bcc.n	8007068 <UART_WaitOnFlagUntilTimeout+0x30>
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d101      	bne.n	800706c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e04e      	b.n	800710a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0304 	and.w	r3, r3, #4
 8007076:	2b00      	cmp	r3, #0
 8007078:	d037      	beq.n	80070ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2b80      	cmp	r3, #128	@ 0x80
 800707e:	d034      	beq.n	80070ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2b40      	cmp	r3, #64	@ 0x40
 8007084:	d031      	beq.n	80070ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	69db      	ldr	r3, [r3, #28]
 800708c:	f003 0308 	and.w	r3, r3, #8
 8007090:	2b08      	cmp	r3, #8
 8007092:	d110      	bne.n	80070b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2208      	movs	r2, #8
 800709a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 f95b 	bl	8007358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2208      	movs	r2, #8
 80070a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e029      	b.n	800710a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070c4:	d111      	bne.n	80070ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 f941 	bl	8007358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2220      	movs	r2, #32
 80070da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e00f      	b.n	800710a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	69da      	ldr	r2, [r3, #28]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	4013      	ands	r3, r2
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	bf0c      	ite	eq
 80070fa:	2301      	moveq	r3, #1
 80070fc:	2300      	movne	r3, #0
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	461a      	mov	r2, r3
 8007102:	79fb      	ldrb	r3, [r7, #7]
 8007104:	429a      	cmp	r2, r3
 8007106:	d0a0      	beq.n	800704a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
	...

08007114 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007114:	b480      	push	{r7}
 8007116:	b0a3      	sub	sp, #140	@ 0x8c
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	4613      	mov	r3, r2
 8007120:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	88fa      	ldrh	r2, [r7, #6]
 800712c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	88fa      	ldrh	r2, [r7, #6]
 8007134:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007146:	d10e      	bne.n	8007166 <UART_Start_Receive_IT+0x52>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d105      	bne.n	800715c <UART_Start_Receive_IT+0x48>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007156:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800715a:	e02d      	b.n	80071b8 <UART_Start_Receive_IT+0xa4>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	22ff      	movs	r2, #255	@ 0xff
 8007160:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007164:	e028      	b.n	80071b8 <UART_Start_Receive_IT+0xa4>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10d      	bne.n	800718a <UART_Start_Receive_IT+0x76>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d104      	bne.n	8007180 <UART_Start_Receive_IT+0x6c>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	22ff      	movs	r2, #255	@ 0xff
 800717a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800717e:	e01b      	b.n	80071b8 <UART_Start_Receive_IT+0xa4>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	227f      	movs	r2, #127	@ 0x7f
 8007184:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007188:	e016      	b.n	80071b8 <UART_Start_Receive_IT+0xa4>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007192:	d10d      	bne.n	80071b0 <UART_Start_Receive_IT+0x9c>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d104      	bne.n	80071a6 <UART_Start_Receive_IT+0x92>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	227f      	movs	r2, #127	@ 0x7f
 80071a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80071a4:	e008      	b.n	80071b8 <UART_Start_Receive_IT+0xa4>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	223f      	movs	r2, #63	@ 0x3f
 80071aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80071ae:	e003      	b.n	80071b8 <UART_Start_Receive_IT+0xa4>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2222      	movs	r2, #34	@ 0x22
 80071c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	3308      	adds	r3, #8
 80071ce:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071d2:	e853 3f00 	ldrex	r3, [r3]
 80071d6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80071d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071da:	f043 0301 	orr.w	r3, r3, #1
 80071de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3308      	adds	r3, #8
 80071e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80071ec:	673a      	str	r2, [r7, #112]	@ 0x70
 80071ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80071f2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80071f4:	e841 2300 	strex	r3, r2, [r1]
 80071f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80071fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1e3      	bne.n	80071c8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007208:	d14f      	bne.n	80072aa <UART_Start_Receive_IT+0x196>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007210:	88fa      	ldrh	r2, [r7, #6]
 8007212:	429a      	cmp	r2, r3
 8007214:	d349      	bcc.n	80072aa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800721e:	d107      	bne.n	8007230 <UART_Start_Receive_IT+0x11c>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d103      	bne.n	8007230 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4a47      	ldr	r2, [pc, #284]	@ (8007348 <UART_Start_Receive_IT+0x234>)
 800722c:	675a      	str	r2, [r3, #116]	@ 0x74
 800722e:	e002      	b.n	8007236 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	4a46      	ldr	r2, [pc, #280]	@ (800734c <UART_Start_Receive_IT+0x238>)
 8007234:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d01a      	beq.n	8007274 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007246:	e853 3f00 	ldrex	r3, [r3]
 800724a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800724c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800724e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007252:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007260:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007262:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007264:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007266:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007268:	e841 2300 	strex	r3, r2, [r1]
 800726c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800726e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1e4      	bne.n	800723e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3308      	adds	r3, #8
 800727a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800727e:	e853 3f00 	ldrex	r3, [r3]
 8007282:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800728a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3308      	adds	r3, #8
 8007292:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007294:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007296:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800729a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800729c:	e841 2300 	strex	r3, r2, [r1]
 80072a0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80072a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e5      	bne.n	8007274 <UART_Start_Receive_IT+0x160>
 80072a8:	e046      	b.n	8007338 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072b2:	d107      	bne.n	80072c4 <UART_Start_Receive_IT+0x1b0>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d103      	bne.n	80072c4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4a24      	ldr	r2, [pc, #144]	@ (8007350 <UART_Start_Receive_IT+0x23c>)
 80072c0:	675a      	str	r2, [r3, #116]	@ 0x74
 80072c2:	e002      	b.n	80072ca <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4a23      	ldr	r2, [pc, #140]	@ (8007354 <UART_Start_Receive_IT+0x240>)
 80072c8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d019      	beq.n	8007306 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072da:	e853 3f00 	ldrex	r3, [r3]
 80072de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80072e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	461a      	mov	r2, r3
 80072ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80072f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072f8:	e841 2300 	strex	r3, r2, [r1]
 80072fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80072fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1e6      	bne.n	80072d2 <UART_Start_Receive_IT+0x1be>
 8007304:	e018      	b.n	8007338 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	e853 3f00 	ldrex	r3, [r3]
 8007312:	613b      	str	r3, [r7, #16]
   return(result);
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f043 0320 	orr.w	r3, r3, #32
 800731a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	461a      	mov	r2, r3
 8007322:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007324:	623b      	str	r3, [r7, #32]
 8007326:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007328:	69f9      	ldr	r1, [r7, #28]
 800732a:	6a3a      	ldr	r2, [r7, #32]
 800732c:	e841 2300 	strex	r3, r2, [r1]
 8007330:	61bb      	str	r3, [r7, #24]
   return(result);
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1e6      	bne.n	8007306 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	378c      	adds	r7, #140	@ 0x8c
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	08007b79 	.word	0x08007b79
 800734c:	08007819 	.word	0x08007819
 8007350:	08007661 	.word	0x08007661
 8007354:	080074a9 	.word	0x080074a9

08007358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007358:	b480      	push	{r7}
 800735a:	b095      	sub	sp, #84	@ 0x54
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800736e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007370:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007374:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800737e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007380:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007384:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800738c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e6      	bne.n	8007360 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3308      	adds	r3, #8
 8007398:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073a8:	f023 0301 	bic.w	r3, r3, #1
 80073ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3308      	adds	r3, #8
 80073b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073be:	e841 2300 	strex	r3, r2, [r1]
 80073c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1e3      	bne.n	8007392 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d118      	bne.n	8007404 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	e853 3f00 	ldrex	r3, [r3]
 80073de:	60bb      	str	r3, [r7, #8]
   return(result);
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f023 0310 	bic.w	r3, r3, #16
 80073e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	461a      	mov	r2, r3
 80073ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073f0:	61bb      	str	r3, [r7, #24]
 80073f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f4:	6979      	ldr	r1, [r7, #20]
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	e841 2300 	strex	r3, r2, [r1]
 80073fc:	613b      	str	r3, [r7, #16]
   return(result);
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1e6      	bne.n	80073d2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2220      	movs	r2, #32
 8007408:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007418:	bf00      	nop
 800741a:	3754      	adds	r7, #84	@ 0x54
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007430:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f7ff f99a 	bl	800677c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007448:	bf00      	nop
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b088      	sub	sp, #32
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	60bb      	str	r3, [r7, #8]
   return(result);
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800746c:	61fb      	str	r3, [r7, #28]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	61bb      	str	r3, [r7, #24]
 8007478:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6979      	ldr	r1, [r7, #20]
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	613b      	str	r3, [r7, #16]
   return(result);
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e6      	bne.n	8007458 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2220      	movs	r2, #32
 800748e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff f965 	bl	8006768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800749e:	bf00      	nop
 80074a0:	3720      	adds	r7, #32
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
	...

080074a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b09c      	sub	sp, #112	@ 0x70
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80074b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074c0:	2b22      	cmp	r3, #34	@ 0x22
 80074c2:	f040 80be 	bne.w	8007642 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80074d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80074d4:	b2d9      	uxtb	r1, r3
 80074d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e0:	400a      	ands	r2, r1
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ea:	1c5a      	adds	r2, r3, #1
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	3b01      	subs	r3, #1
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007508:	b29b      	uxth	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	f040 80a1 	bne.w	8007652 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800751e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007520:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007524:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	461a      	mov	r2, r3
 800752c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800752e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007530:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007532:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007534:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800753c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e6      	bne.n	8007510 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3308      	adds	r3, #8
 8007548:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800754c:	e853 3f00 	ldrex	r3, [r3]
 8007550:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007554:	f023 0301 	bic.w	r3, r3, #1
 8007558:	667b      	str	r3, [r7, #100]	@ 0x64
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3308      	adds	r3, #8
 8007560:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007562:	647a      	str	r2, [r7, #68]	@ 0x44
 8007564:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007566:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007568:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800756a:	e841 2300 	strex	r3, r2, [r1]
 800756e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1e5      	bne.n	8007542 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2220      	movs	r2, #32
 800757a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a33      	ldr	r2, [pc, #204]	@ (800765c <UART_RxISR_8BIT+0x1b4>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d01f      	beq.n	80075d4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d018      	beq.n	80075d4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075aa:	e853 3f00 	ldrex	r3, [r3]
 80075ae:	623b      	str	r3, [r7, #32]
   return(result);
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80075b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	461a      	mov	r2, r3
 80075be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80075c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80075c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075c8:	e841 2300 	strex	r3, r2, [r1]
 80075cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1e6      	bne.n	80075a2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d12e      	bne.n	800763a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	e853 3f00 	ldrex	r3, [r3]
 80075ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f023 0310 	bic.w	r3, r3, #16
 80075f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	461a      	mov	r2, r3
 80075fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007600:	61fb      	str	r3, [r7, #28]
 8007602:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007604:	69b9      	ldr	r1, [r7, #24]
 8007606:	69fa      	ldr	r2, [r7, #28]
 8007608:	e841 2300 	strex	r3, r2, [r1]
 800760c:	617b      	str	r3, [r7, #20]
   return(result);
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1e6      	bne.n	80075e2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	f003 0310 	and.w	r3, r3, #16
 800761e:	2b10      	cmp	r3, #16
 8007620:	d103      	bne.n	800762a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2210      	movs	r2, #16
 8007628:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7ff f8ac 	bl	8006790 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007638:	e00b      	b.n	8007652 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7fa fe98 	bl	8002370 <HAL_UART_RxCpltCallback>
}
 8007640:	e007      	b.n	8007652 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	699a      	ldr	r2, [r3, #24]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f042 0208 	orr.w	r2, r2, #8
 8007650:	619a      	str	r2, [r3, #24]
}
 8007652:	bf00      	nop
 8007654:	3770      	adds	r7, #112	@ 0x70
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	40008000 	.word	0x40008000

08007660 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b09c      	sub	sp, #112	@ 0x70
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800766e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007678:	2b22      	cmp	r3, #34	@ 0x22
 800767a:	f040 80be 	bne.w	80077fa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007684:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800768c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800768e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007692:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007696:	4013      	ands	r3, r2
 8007698:	b29a      	uxth	r2, r3
 800769a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800769c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076a2:	1c9a      	adds	r2, r3, #2
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	3b01      	subs	r3, #1
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f040 80a1 	bne.w	800780a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80076d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	461a      	mov	r2, r3
 80076e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80076e8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80076ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80076f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1e6      	bne.n	80076c8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3308      	adds	r3, #8
 8007700:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007704:	e853 3f00 	ldrex	r3, [r3]
 8007708:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800770a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770c:	f023 0301 	bic.w	r3, r3, #1
 8007710:	663b      	str	r3, [r7, #96]	@ 0x60
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3308      	adds	r3, #8
 8007718:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800771a:	643a      	str	r2, [r7, #64]	@ 0x40
 800771c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007720:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e5      	bne.n	80076fa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2220      	movs	r2, #32
 8007732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a33      	ldr	r2, [pc, #204]	@ (8007814 <UART_RxISR_16BIT+0x1b4>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d01f      	beq.n	800778c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d018      	beq.n	800778c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	e853 3f00 	ldrex	r3, [r3]
 8007766:	61fb      	str	r3, [r7, #28]
   return(result);
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800776e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	461a      	mov	r2, r3
 8007776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007778:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800777a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800777e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007780:	e841 2300 	strex	r3, r2, [r1]
 8007784:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1e6      	bne.n	800775a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007790:	2b01      	cmp	r3, #1
 8007792:	d12e      	bne.n	80077f2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	e853 3f00 	ldrex	r3, [r3]
 80077a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f023 0310 	bic.w	r3, r3, #16
 80077ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	461a      	mov	r2, r3
 80077b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077b8:	61bb      	str	r3, [r7, #24]
 80077ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077bc:	6979      	ldr	r1, [r7, #20]
 80077be:	69ba      	ldr	r2, [r7, #24]
 80077c0:	e841 2300 	strex	r3, r2, [r1]
 80077c4:	613b      	str	r3, [r7, #16]
   return(result);
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1e6      	bne.n	800779a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	f003 0310 	and.w	r3, r3, #16
 80077d6:	2b10      	cmp	r3, #16
 80077d8:	d103      	bne.n	80077e2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2210      	movs	r2, #16
 80077e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7fe ffd0 	bl	8006790 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077f0:	e00b      	b.n	800780a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7fa fdbc 	bl	8002370 <HAL_UART_RxCpltCallback>
}
 80077f8:	e007      	b.n	800780a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	699a      	ldr	r2, [r3, #24]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f042 0208 	orr.w	r2, r2, #8
 8007808:	619a      	str	r2, [r3, #24]
}
 800780a:	bf00      	nop
 800780c:	3770      	adds	r7, #112	@ 0x70
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	40008000 	.word	0x40008000

08007818 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b0ac      	sub	sp, #176	@ 0xb0
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007826:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800784e:	2b22      	cmp	r3, #34	@ 0x22
 8007850:	f040 8182 	bne.w	8007b58 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800785a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800785e:	e125      	b.n	8007aac <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007866:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800786a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800786e:	b2d9      	uxtb	r1, r3
 8007870:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007874:	b2da      	uxtb	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800787a:	400a      	ands	r2, r1
 800787c:	b2d2      	uxtb	r2, r2
 800787e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007884:	1c5a      	adds	r2, r3, #1
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007890:	b29b      	uxth	r3, r3
 8007892:	3b01      	subs	r3, #1
 8007894:	b29a      	uxth	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80078a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078aa:	f003 0307 	and.w	r3, r3, #7
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d053      	beq.n	800795a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d011      	beq.n	80078e2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80078be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80078c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00b      	beq.n	80078e2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2201      	movs	r2, #1
 80078d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078d8:	f043 0201 	orr.w	r2, r3, #1
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d011      	beq.n	8007912 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80078ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00b      	beq.n	8007912 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2202      	movs	r2, #2
 8007900:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007908:	f043 0204 	orr.w	r2, r3, #4
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007916:	f003 0304 	and.w	r3, r3, #4
 800791a:	2b00      	cmp	r3, #0
 800791c:	d011      	beq.n	8007942 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800791e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00b      	beq.n	8007942 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2204      	movs	r2, #4
 8007930:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007938:	f043 0202 	orr.w	r2, r3, #2
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007948:	2b00      	cmp	r3, #0
 800794a:	d006      	beq.n	800795a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7fe ff15 	bl	800677c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007960:	b29b      	uxth	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	f040 80a2 	bne.w	8007aac <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007970:	e853 3f00 	ldrex	r3, [r3]
 8007974:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007976:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007978:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800797c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800798a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800798c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007990:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007998:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e4      	bne.n	8007968 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3308      	adds	r3, #8
 80079a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079a8:	e853 3f00 	ldrex	r3, [r3]
 80079ac:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80079ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079b4:	f023 0301 	bic.w	r3, r3, #1
 80079b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3308      	adds	r3, #8
 80079c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80079c6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80079c8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ca:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80079cc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80079ce:	e841 2300 	strex	r3, r2, [r1]
 80079d2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80079d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1e1      	bne.n	800799e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2220      	movs	r2, #32
 80079de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a5f      	ldr	r2, [pc, #380]	@ (8007b70 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d021      	beq.n	8007a3c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d01a      	beq.n	8007a3c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a0e:	e853 3f00 	ldrex	r3, [r3]
 8007a12:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a28:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a2a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007a2e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007a30:	e841 2300 	strex	r3, r2, [r1]
 8007a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1e4      	bne.n	8007a06 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d130      	bne.n	8007aa6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a52:	e853 3f00 	ldrex	r3, [r3]
 8007a56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5a:	f023 0310 	bic.w	r3, r3, #16
 8007a5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	461a      	mov	r2, r3
 8007a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a74:	e841 2300 	strex	r3, r2, [r1]
 8007a78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1e4      	bne.n	8007a4a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	f003 0310 	and.w	r3, r3, #16
 8007a8a:	2b10      	cmp	r3, #16
 8007a8c:	d103      	bne.n	8007a96 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2210      	movs	r2, #16
 8007a94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7fe fe76 	bl	8006790 <HAL_UARTEx_RxEventCallback>
 8007aa4:	e002      	b.n	8007aac <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7fa fc62 	bl	8002370 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007aac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d006      	beq.n	8007ac2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007ab4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ab8:	f003 0320 	and.w	r3, r3, #32
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f47f aecf 	bne.w	8007860 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ac8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007acc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d049      	beq.n	8007b68 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007ada:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d242      	bcs.n	8007b68 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3308      	adds	r3, #8
 8007ae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	e853 3f00 	ldrex	r3, [r3]
 8007af0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007af8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3308      	adds	r3, #8
 8007b02:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007b06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b0e:	e841 2300 	strex	r3, r2, [r1]
 8007b12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1e3      	bne.n	8007ae2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a15      	ldr	r2, [pc, #84]	@ (8007b74 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007b1e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	e853 3f00 	ldrex	r3, [r3]
 8007b2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	f043 0320 	orr.w	r3, r3, #32
 8007b34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007b42:	61bb      	str	r3, [r7, #24]
 8007b44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b46:	6979      	ldr	r1, [r7, #20]
 8007b48:	69ba      	ldr	r2, [r7, #24]
 8007b4a:	e841 2300 	strex	r3, r2, [r1]
 8007b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1e4      	bne.n	8007b20 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b56:	e007      	b.n	8007b68 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	699a      	ldr	r2, [r3, #24]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f042 0208 	orr.w	r2, r2, #8
 8007b66:	619a      	str	r2, [r3, #24]
}
 8007b68:	bf00      	nop
 8007b6a:	37b0      	adds	r7, #176	@ 0xb0
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	40008000 	.word	0x40008000
 8007b74:	080074a9 	.word	0x080074a9

08007b78 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b0ae      	sub	sp, #184	@ 0xb8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007b86:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bae:	2b22      	cmp	r3, #34	@ 0x22
 8007bb0:	f040 8186 	bne.w	8007ec0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007bba:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007bbe:	e129      	b.n	8007e14 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007bd2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007bd6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007bda:	4013      	ands	r3, r2
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007be2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007be8:	1c9a      	adds	r2, r3, #2
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	69db      	ldr	r3, [r3, #28]
 8007c06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007c0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c0e:	f003 0307 	and.w	r3, r3, #7
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d053      	beq.n	8007cbe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d011      	beq.n	8007c46 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007c22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00b      	beq.n	8007c46 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2201      	movs	r2, #1
 8007c34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c3c:	f043 0201 	orr.w	r2, r3, #1
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c4a:	f003 0302 	and.w	r3, r3, #2
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d011      	beq.n	8007c76 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007c52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00b      	beq.n	8007c76 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2202      	movs	r2, #2
 8007c64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c6c:	f043 0204 	orr.w	r2, r3, #4
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c7a:	f003 0304 	and.w	r3, r3, #4
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d011      	beq.n	8007ca6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007c82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00b      	beq.n	8007ca6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2204      	movs	r2, #4
 8007c94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c9c:	f043 0202 	orr.w	r2, r3, #2
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d006      	beq.n	8007cbe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7fe fd63 	bl	800677c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f040 80a4 	bne.w	8007e14 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007cda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007cdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ce0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007cee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007cf2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007cf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007cfa:	e841 2300 	strex	r3, r2, [r1]
 8007cfe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007d00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1e2      	bne.n	8007ccc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3308      	adds	r3, #8
 8007d0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d10:	e853 3f00 	ldrex	r3, [r3]
 8007d14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007d16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d1c:	f023 0301 	bic.w	r3, r3, #1
 8007d20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	3308      	adds	r3, #8
 8007d2a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007d2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007d30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007d34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007d3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e1      	bne.n	8007d06 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2220      	movs	r2, #32
 8007d46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a5f      	ldr	r2, [pc, #380]	@ (8007ed8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d021      	beq.n	8007da4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d01a      	beq.n	8007da4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d76:	e853 3f00 	ldrex	r3, [r3]
 8007d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007d90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d92:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e4      	bne.n	8007d6e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d130      	bne.n	8007e0e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dba:	e853 3f00 	ldrex	r3, [r3]
 8007dbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dc2:	f023 0310 	bic.w	r3, r3, #16
 8007dc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007dd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ddc:	e841 2300 	strex	r3, r2, [r1]
 8007de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1e4      	bne.n	8007db2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	f003 0310 	and.w	r3, r3, #16
 8007df2:	2b10      	cmp	r3, #16
 8007df4:	d103      	bne.n	8007dfe <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2210      	movs	r2, #16
 8007dfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e04:	4619      	mov	r1, r3
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7fe fcc2 	bl	8006790 <HAL_UARTEx_RxEventCallback>
 8007e0c:	e002      	b.n	8007e14 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7fa faae 	bl	8002370 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e14:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d006      	beq.n	8007e2a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007e1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e20:	f003 0320 	and.w	r3, r3, #32
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f47f aecb 	bne.w	8007bc0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e30:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007e34:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d049      	beq.n	8007ed0 <UART_RxISR_16BIT_FIFOEN+0x358>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007e42:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d242      	bcs.n	8007ed0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3308      	adds	r3, #8
 8007e50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e54:	e853 3f00 	ldrex	r3, [r3]
 8007e58:	623b      	str	r3, [r7, #32]
   return(result);
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
 8007e5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	3308      	adds	r3, #8
 8007e6a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007e6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e76:	e841 2300 	strex	r3, r2, [r1]
 8007e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1e3      	bne.n	8007e4a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a15      	ldr	r2, [pc, #84]	@ (8007edc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007e86:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	e853 3f00 	ldrex	r3, [r3]
 8007e94:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f043 0320 	orr.w	r3, r3, #32
 8007e9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007eaa:	61fb      	str	r3, [r7, #28]
 8007eac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eae:	69b9      	ldr	r1, [r7, #24]
 8007eb0:	69fa      	ldr	r2, [r7, #28]
 8007eb2:	e841 2300 	strex	r3, r2, [r1]
 8007eb6:	617b      	str	r3, [r7, #20]
   return(result);
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1e4      	bne.n	8007e88 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ebe:	e007      	b.n	8007ed0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	699a      	ldr	r2, [r3, #24]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f042 0208 	orr.w	r2, r2, #8
 8007ece:	619a      	str	r2, [r3, #24]
}
 8007ed0:	bf00      	nop
 8007ed2:	37b8      	adds	r7, #184	@ 0xb8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	40008000 	.word	0x40008000
 8007edc:	08007661 	.word	0x08007661

08007ee0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d101      	bne.n	8007f32 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f2e:	2302      	movs	r3, #2
 8007f30:	e027      	b.n	8007f82 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2224      	movs	r2, #36	@ 0x24
 8007f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f022 0201 	bic.w	r2, r2, #1
 8007f58:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f60:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2220      	movs	r2, #32
 8007f74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3714      	adds	r7, #20
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b084      	sub	sp, #16
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d101      	bne.n	8007fa6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	e02d      	b.n	8008002 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2224      	movs	r2, #36	@ 0x24
 8007fb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f022 0201 	bic.w	r2, r2, #1
 8007fcc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f850 	bl	8008088 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b084      	sub	sp, #16
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800801a:	2b01      	cmp	r3, #1
 800801c:	d101      	bne.n	8008022 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800801e:	2302      	movs	r3, #2
 8008020:	e02d      	b.n	800807e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2224      	movs	r2, #36	@ 0x24
 800802e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f022 0201 	bic.w	r2, r2, #1
 8008048:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	683a      	ldr	r2, [r7, #0]
 800805a:	430a      	orrs	r2, r1
 800805c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f812 	bl	8008088 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2220      	movs	r2, #32
 8008070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008094:	2b00      	cmp	r3, #0
 8008096:	d108      	bne.n	80080aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080a8:	e031      	b.n	800810e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080aa:	2308      	movs	r3, #8
 80080ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080ae:	2308      	movs	r3, #8
 80080b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	0e5b      	lsrs	r3, r3, #25
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	f003 0307 	and.w	r3, r3, #7
 80080c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	0f5b      	lsrs	r3, r3, #29
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	f003 0307 	and.w	r3, r3, #7
 80080d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	7b3a      	ldrb	r2, [r7, #12]
 80080d6:	4911      	ldr	r1, [pc, #68]	@ (800811c <UARTEx_SetNbDataToProcess+0x94>)
 80080d8:	5c8a      	ldrb	r2, [r1, r2]
 80080da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080de:	7b3a      	ldrb	r2, [r7, #12]
 80080e0:	490f      	ldr	r1, [pc, #60]	@ (8008120 <UARTEx_SetNbDataToProcess+0x98>)
 80080e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080f0:	7bfb      	ldrb	r3, [r7, #15]
 80080f2:	7b7a      	ldrb	r2, [r7, #13]
 80080f4:	4909      	ldr	r1, [pc, #36]	@ (800811c <UARTEx_SetNbDataToProcess+0x94>)
 80080f6:	5c8a      	ldrb	r2, [r1, r2]
 80080f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080fc:	7b7a      	ldrb	r2, [r7, #13]
 80080fe:	4908      	ldr	r1, [pc, #32]	@ (8008120 <UARTEx_SetNbDataToProcess+0x98>)
 8008100:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008102:	fb93 f3f2 	sdiv	r3, r3, r2
 8008106:	b29a      	uxth	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800810e:	bf00      	nop
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	0800d59c 	.word	0x0800d59c
 8008120:	0800d5a4 	.word	0x0800d5a4

08008124 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b08a      	sub	sp, #40	@ 0x28
 8008128:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800812a:	2300      	movs	r3, #0
 800812c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800812e:	4b7e      	ldr	r3, [pc, #504]	@ (8008328 <xTaskIncrementTick+0x204>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	f040 80ed 	bne.w	8008312 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008138:	4b7c      	ldr	r3, [pc, #496]	@ (800832c <xTaskIncrementTick+0x208>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3301      	adds	r3, #1
 800813e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8008140:	4a7a      	ldr	r2, [pc, #488]	@ (800832c <xTaskIncrementTick+0x208>)
 8008142:	6a3b      	ldr	r3, [r7, #32]
 8008144:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d121      	bne.n	8008190 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800814c:	4b78      	ldr	r3, [pc, #480]	@ (8008330 <xTaskIncrementTick+0x20c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00b      	beq.n	800816e <xTaskIncrementTick+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8008156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800815a:	f383 8811 	msr	BASEPRI, r3
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8008168:	bf00      	nop
 800816a:	bf00      	nop
 800816c:	e7fd      	b.n	800816a <xTaskIncrementTick+0x46>
 800816e:	4b70      	ldr	r3, [pc, #448]	@ (8008330 <xTaskIncrementTick+0x20c>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	61fb      	str	r3, [r7, #28]
 8008174:	4b6f      	ldr	r3, [pc, #444]	@ (8008334 <xTaskIncrementTick+0x210>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a6d      	ldr	r2, [pc, #436]	@ (8008330 <xTaskIncrementTick+0x20c>)
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	4a6d      	ldr	r2, [pc, #436]	@ (8008334 <xTaskIncrementTick+0x210>)
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	6013      	str	r3, [r2, #0]
 8008182:	4b6d      	ldr	r3, [pc, #436]	@ (8008338 <xTaskIncrementTick+0x214>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3301      	adds	r3, #1
 8008188:	4a6b      	ldr	r2, [pc, #428]	@ (8008338 <xTaskIncrementTick+0x214>)
 800818a:	6013      	str	r3, [r2, #0]
 800818c:	f000 f93e 	bl	800840c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8008190:	4b6a      	ldr	r3, [pc, #424]	@ (800833c <xTaskIncrementTick+0x218>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6a3a      	ldr	r2, [r7, #32]
 8008196:	429a      	cmp	r2, r3
 8008198:	f0c0 80a6 	bcc.w	80082e8 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800819c:	4b64      	ldr	r3, [pc, #400]	@ (8008330 <xTaskIncrementTick+0x20c>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d104      	bne.n	80081b0 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081a6:	4b65      	ldr	r3, [pc, #404]	@ (800833c <xTaskIncrementTick+0x218>)
 80081a8:	f04f 32ff 	mov.w	r2, #4294967295
 80081ac:	601a      	str	r2, [r3, #0]
                    break;
 80081ae:	e09b      	b.n	80082e8 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081b0:	4b5f      	ldr	r3, [pc, #380]	@ (8008330 <xTaskIncrementTick+0x20c>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80081c0:	6a3a      	ldr	r2, [r7, #32]
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d203      	bcs.n	80081d0 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80081c8:	4a5c      	ldr	r2, [pc, #368]	@ (800833c <xTaskIncrementTick+0x218>)
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80081ce:	e08b      	b.n	80082e8 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	695b      	ldr	r3, [r3, #20]
 80081d4:	613b      	str	r3, [r7, #16]
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	69ba      	ldr	r2, [r7, #24]
 80081dc:	68d2      	ldr	r2, [r2, #12]
 80081de:	609a      	str	r2, [r3, #8]
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	6892      	ldr	r2, [r2, #8]
 80081e8:	605a      	str	r2, [r3, #4]
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	3304      	adds	r3, #4
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d103      	bne.n	80081fe <xTaskIncrementTick+0xda>
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	68da      	ldr	r2, [r3, #12]
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	605a      	str	r2, [r3, #4]
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	2200      	movs	r2, #0
 8008202:	615a      	str	r2, [r3, #20]
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	1e5a      	subs	r2, r3, #1
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008212:	2b00      	cmp	r3, #0
 8008214:	d01e      	beq.n	8008254 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	69ba      	ldr	r2, [r7, #24]
 8008222:	6a12      	ldr	r2, [r2, #32]
 8008224:	609a      	str	r2, [r3, #8]
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	69ba      	ldr	r2, [r7, #24]
 800822c:	69d2      	ldr	r2, [r2, #28]
 800822e:	605a      	str	r2, [r3, #4]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	685a      	ldr	r2, [r3, #4]
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	3318      	adds	r3, #24
 8008238:	429a      	cmp	r2, r3
 800823a:	d103      	bne.n	8008244 <xTaskIncrementTick+0x120>
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	6a1a      	ldr	r2, [r3, #32]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	605a      	str	r2, [r3, #4]
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	2200      	movs	r2, #0
 8008248:	629a      	str	r2, [r3, #40]	@ 0x28
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	1e5a      	subs	r2, r3, #1
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008258:	2201      	movs	r2, #1
 800825a:	409a      	lsls	r2, r3
 800825c:	4b38      	ldr	r3, [pc, #224]	@ (8008340 <xTaskIncrementTick+0x21c>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4313      	orrs	r3, r2
 8008262:	4a37      	ldr	r2, [pc, #220]	@ (8008340 <xTaskIncrementTick+0x21c>)
 8008264:	6013      	str	r3, [r2, #0]
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800826a:	4936      	ldr	r1, [pc, #216]	@ (8008344 <xTaskIncrementTick+0x220>)
 800826c:	4613      	mov	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	440b      	add	r3, r1
 8008276:	3304      	adds	r3, #4
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	60bb      	str	r3, [r7, #8]
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	609a      	str	r2, [r3, #8]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	689a      	ldr	r2, [r3, #8]
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	60da      	str	r2, [r3, #12]
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	69ba      	ldr	r2, [r7, #24]
 8008290:	3204      	adds	r2, #4
 8008292:	605a      	str	r2, [r3, #4]
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	1d1a      	adds	r2, r3, #4
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	609a      	str	r2, [r3, #8]
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082a0:	4613      	mov	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4a26      	ldr	r2, [pc, #152]	@ (8008344 <xTaskIncrementTick+0x220>)
 80082aa:	441a      	add	r2, r3
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	615a      	str	r2, [r3, #20]
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082b4:	4923      	ldr	r1, [pc, #140]	@ (8008344 <xTaskIncrementTick+0x220>)
 80082b6:	4613      	mov	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4413      	add	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	440b      	add	r3, r1
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	1c59      	adds	r1, r3, #1
 80082c4:	481f      	ldr	r0, [pc, #124]	@ (8008344 <xTaskIncrementTick+0x220>)
 80082c6:	4613      	mov	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4403      	add	r3, r0
 80082d0:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082d6:	4b1c      	ldr	r3, [pc, #112]	@ (8008348 <xTaskIncrementTick+0x224>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082dc:	429a      	cmp	r2, r3
 80082de:	f67f af5d 	bls.w	800819c <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 80082e2:	2301      	movs	r3, #1
 80082e4:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082e6:	e759      	b.n	800819c <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082e8:	4b17      	ldr	r3, [pc, #92]	@ (8008348 <xTaskIncrementTick+0x224>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ee:	4915      	ldr	r1, [pc, #84]	@ (8008344 <xTaskIncrementTick+0x220>)
 80082f0:	4613      	mov	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	440b      	add	r3, r1
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d901      	bls.n	8008304 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8008300:	2301      	movs	r3, #1
 8008302:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8008304:	4b11      	ldr	r3, [pc, #68]	@ (800834c <xTaskIncrementTick+0x228>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d007      	beq.n	800831c <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 800830c:	2301      	movs	r3, #1
 800830e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008310:	e004      	b.n	800831c <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8008312:	4b0f      	ldr	r3, [pc, #60]	@ (8008350 <xTaskIncrementTick+0x22c>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3301      	adds	r3, #1
 8008318:	4a0d      	ldr	r2, [pc, #52]	@ (8008350 <xTaskIncrementTick+0x22c>)
 800831a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800831c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800831e:	4618      	mov	r0, r3
 8008320:	3728      	adds	r7, #40	@ 0x28
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	200006cc 	.word	0x200006cc
 800832c:	200006b4 	.word	0x200006b4
 8008330:	200006ac 	.word	0x200006ac
 8008334:	200006b0 	.word	0x200006b0
 8008338:	200006c4 	.word	0x200006c4
 800833c:	200006c8 	.word	0x200006c8
 8008340:	200006b8 	.word	0x200006b8
 8008344:	20000648 	.word	0x20000648
 8008348:	20000644 	.word	0x20000644
 800834c:	200006c0 	.word	0x200006c0
 8008350:	200006bc 	.word	0x200006bc

08008354 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800835a:	4b27      	ldr	r3, [pc, #156]	@ (80083f8 <vTaskSwitchContext+0xa4>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8008362:	4b26      	ldr	r3, [pc, #152]	@ (80083fc <vTaskSwitchContext+0xa8>)
 8008364:	2201      	movs	r2, #1
 8008366:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8008368:	e040      	b.n	80083ec <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800836a:	4b24      	ldr	r3, [pc, #144]	@ (80083fc <vTaskSwitchContext+0xa8>)
 800836c:	2200      	movs	r2, #0
 800836e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008370:	4b23      	ldr	r3, [pc, #140]	@ (8008400 <vTaskSwitchContext+0xac>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	fab3 f383 	clz	r3, r3
 800837c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800837e:	7afb      	ldrb	r3, [r7, #11]
 8008380:	f1c3 031f 	rsb	r3, r3, #31
 8008384:	617b      	str	r3, [r7, #20]
 8008386:	491f      	ldr	r1, [pc, #124]	@ (8008404 <vTaskSwitchContext+0xb0>)
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	4613      	mov	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	440b      	add	r3, r1
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10b      	bne.n	80083b2 <vTaskSwitchContext+0x5e>
        __asm volatile
 800839a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	607b      	str	r3, [r7, #4]
    }
 80083ac:	bf00      	nop
 80083ae:	bf00      	nop
 80083b0:	e7fd      	b.n	80083ae <vTaskSwitchContext+0x5a>
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	4613      	mov	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4a11      	ldr	r2, [pc, #68]	@ (8008404 <vTaskSwitchContext+0xb0>)
 80083be:	4413      	add	r3, r2
 80083c0:	613b      	str	r3, [r7, #16]
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	685a      	ldr	r2, [r3, #4]
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	605a      	str	r2, [r3, #4]
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	685a      	ldr	r2, [r3, #4]
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	3308      	adds	r3, #8
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d104      	bne.n	80083e2 <vTaskSwitchContext+0x8e>
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	605a      	str	r2, [r3, #4]
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	4a07      	ldr	r2, [pc, #28]	@ (8008408 <vTaskSwitchContext+0xb4>)
 80083ea:	6013      	str	r3, [r2, #0]
}
 80083ec:	bf00      	nop
 80083ee:	371c      	adds	r7, #28
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	200006cc 	.word	0x200006cc
 80083fc:	200006c0 	.word	0x200006c0
 8008400:	200006b8 	.word	0x200006b8
 8008404:	20000648 	.word	0x20000648
 8008408:	20000644 	.word	0x20000644

0800840c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008410:	4b0a      	ldr	r3, [pc, #40]	@ (800843c <prvResetNextTaskUnblockTime+0x30>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d104      	bne.n	8008424 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800841a:	4b09      	ldr	r3, [pc, #36]	@ (8008440 <prvResetNextTaskUnblockTime+0x34>)
 800841c:	f04f 32ff 	mov.w	r2, #4294967295
 8008420:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8008422:	e005      	b.n	8008430 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008424:	4b05      	ldr	r3, [pc, #20]	@ (800843c <prvResetNextTaskUnblockTime+0x30>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a04      	ldr	r2, [pc, #16]	@ (8008440 <prvResetNextTaskUnblockTime+0x34>)
 800842e:	6013      	str	r3, [r2, #0]
}
 8008430:	bf00      	nop
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	200006ac 	.word	0x200006ac
 8008440:	200006c8 	.word	0x200006c8
	...

08008450 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008450:	4b07      	ldr	r3, [pc, #28]	@ (8008470 <pxCurrentTCBConst2>)
 8008452:	6819      	ldr	r1, [r3, #0]
 8008454:	6808      	ldr	r0, [r1, #0]
 8008456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845a:	f380 8809 	msr	PSP, r0
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f04f 0000 	mov.w	r0, #0
 8008466:	f380 8811 	msr	BASEPRI, r0
 800846a:	4770      	bx	lr
 800846c:	f3af 8000 	nop.w

08008470 <pxCurrentTCBConst2>:
 8008470:	20000644 	.word	0x20000644
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop
	...

08008480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008480:	f3ef 8009 	mrs	r0, PSP
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	4b15      	ldr	r3, [pc, #84]	@ (80084e0 <pxCurrentTCBConst>)
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	f01e 0f10 	tst.w	lr, #16
 8008490:	bf08      	it	eq
 8008492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800849a:	6010      	str	r0, [r2, #0]
 800849c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80084a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80084a4:	f380 8811 	msr	BASEPRI, r0
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f7ff ff50 	bl	8008354 <vTaskSwitchContext>
 80084b4:	f04f 0000 	mov.w	r0, #0
 80084b8:	f380 8811 	msr	BASEPRI, r0
 80084bc:	bc09      	pop	{r0, r3}
 80084be:	6819      	ldr	r1, [r3, #0]
 80084c0:	6808      	ldr	r0, [r1, #0]
 80084c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c6:	f01e 0f10 	tst.w	lr, #16
 80084ca:	bf08      	it	eq
 80084cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80084d0:	f380 8809 	msr	PSP, r0
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	f3af 8000 	nop.w

080084e0 <pxCurrentTCBConst>:
 80084e0:	20000644 	.word	0x20000644
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80084e4:	bf00      	nop
 80084e6:	bf00      	nop

080084e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
        __asm volatile
 80084ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	607b      	str	r3, [r7, #4]
    }
 8008500:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008502:	f7ff fe0f 	bl	8008124 <xTaskIncrementTick>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d003      	beq.n	8008514 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800850c:	4b06      	ldr	r3, [pc, #24]	@ (8008528 <SysTick_Handler+0x40>)
 800850e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	2300      	movs	r3, #0
 8008516:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800851e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8008520:	bf00      	nop
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	e000ed04 	.word	0xe000ed04

0800852c <__cvt>:
 800852c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008530:	ec57 6b10 	vmov	r6, r7, d0
 8008534:	2f00      	cmp	r7, #0
 8008536:	460c      	mov	r4, r1
 8008538:	4619      	mov	r1, r3
 800853a:	463b      	mov	r3, r7
 800853c:	bfbb      	ittet	lt
 800853e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008542:	461f      	movlt	r7, r3
 8008544:	2300      	movge	r3, #0
 8008546:	232d      	movlt	r3, #45	@ 0x2d
 8008548:	700b      	strb	r3, [r1, #0]
 800854a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800854c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008550:	4691      	mov	r9, r2
 8008552:	f023 0820 	bic.w	r8, r3, #32
 8008556:	bfbc      	itt	lt
 8008558:	4632      	movlt	r2, r6
 800855a:	4616      	movlt	r6, r2
 800855c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008560:	d005      	beq.n	800856e <__cvt+0x42>
 8008562:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008566:	d100      	bne.n	800856a <__cvt+0x3e>
 8008568:	3401      	adds	r4, #1
 800856a:	2102      	movs	r1, #2
 800856c:	e000      	b.n	8008570 <__cvt+0x44>
 800856e:	2103      	movs	r1, #3
 8008570:	ab03      	add	r3, sp, #12
 8008572:	9301      	str	r3, [sp, #4]
 8008574:	ab02      	add	r3, sp, #8
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	ec47 6b10 	vmov	d0, r6, r7
 800857c:	4653      	mov	r3, sl
 800857e:	4622      	mov	r2, r4
 8008580:	f001 f8be 	bl	8009700 <_dtoa_r>
 8008584:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008588:	4605      	mov	r5, r0
 800858a:	d119      	bne.n	80085c0 <__cvt+0x94>
 800858c:	f019 0f01 	tst.w	r9, #1
 8008590:	d00e      	beq.n	80085b0 <__cvt+0x84>
 8008592:	eb00 0904 	add.w	r9, r0, r4
 8008596:	2200      	movs	r2, #0
 8008598:	2300      	movs	r3, #0
 800859a:	4630      	mov	r0, r6
 800859c:	4639      	mov	r1, r7
 800859e:	f7f8 fabb 	bl	8000b18 <__aeabi_dcmpeq>
 80085a2:	b108      	cbz	r0, 80085a8 <__cvt+0x7c>
 80085a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80085a8:	2230      	movs	r2, #48	@ 0x30
 80085aa:	9b03      	ldr	r3, [sp, #12]
 80085ac:	454b      	cmp	r3, r9
 80085ae:	d31e      	bcc.n	80085ee <__cvt+0xc2>
 80085b0:	9b03      	ldr	r3, [sp, #12]
 80085b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085b4:	1b5b      	subs	r3, r3, r5
 80085b6:	4628      	mov	r0, r5
 80085b8:	6013      	str	r3, [r2, #0]
 80085ba:	b004      	add	sp, #16
 80085bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80085c4:	eb00 0904 	add.w	r9, r0, r4
 80085c8:	d1e5      	bne.n	8008596 <__cvt+0x6a>
 80085ca:	7803      	ldrb	r3, [r0, #0]
 80085cc:	2b30      	cmp	r3, #48	@ 0x30
 80085ce:	d10a      	bne.n	80085e6 <__cvt+0xba>
 80085d0:	2200      	movs	r2, #0
 80085d2:	2300      	movs	r3, #0
 80085d4:	4630      	mov	r0, r6
 80085d6:	4639      	mov	r1, r7
 80085d8:	f7f8 fa9e 	bl	8000b18 <__aeabi_dcmpeq>
 80085dc:	b918      	cbnz	r0, 80085e6 <__cvt+0xba>
 80085de:	f1c4 0401 	rsb	r4, r4, #1
 80085e2:	f8ca 4000 	str.w	r4, [sl]
 80085e6:	f8da 3000 	ldr.w	r3, [sl]
 80085ea:	4499      	add	r9, r3
 80085ec:	e7d3      	b.n	8008596 <__cvt+0x6a>
 80085ee:	1c59      	adds	r1, r3, #1
 80085f0:	9103      	str	r1, [sp, #12]
 80085f2:	701a      	strb	r2, [r3, #0]
 80085f4:	e7d9      	b.n	80085aa <__cvt+0x7e>

080085f6 <__exponent>:
 80085f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085f8:	2900      	cmp	r1, #0
 80085fa:	bfba      	itte	lt
 80085fc:	4249      	neglt	r1, r1
 80085fe:	232d      	movlt	r3, #45	@ 0x2d
 8008600:	232b      	movge	r3, #43	@ 0x2b
 8008602:	2909      	cmp	r1, #9
 8008604:	7002      	strb	r2, [r0, #0]
 8008606:	7043      	strb	r3, [r0, #1]
 8008608:	dd29      	ble.n	800865e <__exponent+0x68>
 800860a:	f10d 0307 	add.w	r3, sp, #7
 800860e:	461d      	mov	r5, r3
 8008610:	270a      	movs	r7, #10
 8008612:	461a      	mov	r2, r3
 8008614:	fbb1 f6f7 	udiv	r6, r1, r7
 8008618:	fb07 1416 	mls	r4, r7, r6, r1
 800861c:	3430      	adds	r4, #48	@ 0x30
 800861e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008622:	460c      	mov	r4, r1
 8008624:	2c63      	cmp	r4, #99	@ 0x63
 8008626:	f103 33ff 	add.w	r3, r3, #4294967295
 800862a:	4631      	mov	r1, r6
 800862c:	dcf1      	bgt.n	8008612 <__exponent+0x1c>
 800862e:	3130      	adds	r1, #48	@ 0x30
 8008630:	1e94      	subs	r4, r2, #2
 8008632:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008636:	1c41      	adds	r1, r0, #1
 8008638:	4623      	mov	r3, r4
 800863a:	42ab      	cmp	r3, r5
 800863c:	d30a      	bcc.n	8008654 <__exponent+0x5e>
 800863e:	f10d 0309 	add.w	r3, sp, #9
 8008642:	1a9b      	subs	r3, r3, r2
 8008644:	42ac      	cmp	r4, r5
 8008646:	bf88      	it	hi
 8008648:	2300      	movhi	r3, #0
 800864a:	3302      	adds	r3, #2
 800864c:	4403      	add	r3, r0
 800864e:	1a18      	subs	r0, r3, r0
 8008650:	b003      	add	sp, #12
 8008652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008654:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008658:	f801 6f01 	strb.w	r6, [r1, #1]!
 800865c:	e7ed      	b.n	800863a <__exponent+0x44>
 800865e:	2330      	movs	r3, #48	@ 0x30
 8008660:	3130      	adds	r1, #48	@ 0x30
 8008662:	7083      	strb	r3, [r0, #2]
 8008664:	70c1      	strb	r1, [r0, #3]
 8008666:	1d03      	adds	r3, r0, #4
 8008668:	e7f1      	b.n	800864e <__exponent+0x58>
	...

0800866c <_printf_float>:
 800866c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008670:	b08d      	sub	sp, #52	@ 0x34
 8008672:	460c      	mov	r4, r1
 8008674:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008678:	4616      	mov	r6, r2
 800867a:	461f      	mov	r7, r3
 800867c:	4605      	mov	r5, r0
 800867e:	f000 ff29 	bl	80094d4 <_localeconv_r>
 8008682:	6803      	ldr	r3, [r0, #0]
 8008684:	9304      	str	r3, [sp, #16]
 8008686:	4618      	mov	r0, r3
 8008688:	f7f7 fe1a 	bl	80002c0 <strlen>
 800868c:	2300      	movs	r3, #0
 800868e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008690:	f8d8 3000 	ldr.w	r3, [r8]
 8008694:	9005      	str	r0, [sp, #20]
 8008696:	3307      	adds	r3, #7
 8008698:	f023 0307 	bic.w	r3, r3, #7
 800869c:	f103 0208 	add.w	r2, r3, #8
 80086a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80086a4:	f8d4 b000 	ldr.w	fp, [r4]
 80086a8:	f8c8 2000 	str.w	r2, [r8]
 80086ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80086b4:	9307      	str	r3, [sp, #28]
 80086b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80086ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80086be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086c2:	4b9c      	ldr	r3, [pc, #624]	@ (8008934 <_printf_float+0x2c8>)
 80086c4:	f04f 32ff 	mov.w	r2, #4294967295
 80086c8:	f7f8 fa58 	bl	8000b7c <__aeabi_dcmpun>
 80086cc:	bb70      	cbnz	r0, 800872c <_printf_float+0xc0>
 80086ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086d2:	4b98      	ldr	r3, [pc, #608]	@ (8008934 <_printf_float+0x2c8>)
 80086d4:	f04f 32ff 	mov.w	r2, #4294967295
 80086d8:	f7f8 fa32 	bl	8000b40 <__aeabi_dcmple>
 80086dc:	bb30      	cbnz	r0, 800872c <_printf_float+0xc0>
 80086de:	2200      	movs	r2, #0
 80086e0:	2300      	movs	r3, #0
 80086e2:	4640      	mov	r0, r8
 80086e4:	4649      	mov	r1, r9
 80086e6:	f7f8 fa21 	bl	8000b2c <__aeabi_dcmplt>
 80086ea:	b110      	cbz	r0, 80086f2 <_printf_float+0x86>
 80086ec:	232d      	movs	r3, #45	@ 0x2d
 80086ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086f2:	4a91      	ldr	r2, [pc, #580]	@ (8008938 <_printf_float+0x2cc>)
 80086f4:	4b91      	ldr	r3, [pc, #580]	@ (800893c <_printf_float+0x2d0>)
 80086f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80086fa:	bf94      	ite	ls
 80086fc:	4690      	movls	r8, r2
 80086fe:	4698      	movhi	r8, r3
 8008700:	2303      	movs	r3, #3
 8008702:	6123      	str	r3, [r4, #16]
 8008704:	f02b 0304 	bic.w	r3, fp, #4
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	f04f 0900 	mov.w	r9, #0
 800870e:	9700      	str	r7, [sp, #0]
 8008710:	4633      	mov	r3, r6
 8008712:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008714:	4621      	mov	r1, r4
 8008716:	4628      	mov	r0, r5
 8008718:	f000 f9d2 	bl	8008ac0 <_printf_common>
 800871c:	3001      	adds	r0, #1
 800871e:	f040 808d 	bne.w	800883c <_printf_float+0x1d0>
 8008722:	f04f 30ff 	mov.w	r0, #4294967295
 8008726:	b00d      	add	sp, #52	@ 0x34
 8008728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800872c:	4642      	mov	r2, r8
 800872e:	464b      	mov	r3, r9
 8008730:	4640      	mov	r0, r8
 8008732:	4649      	mov	r1, r9
 8008734:	f7f8 fa22 	bl	8000b7c <__aeabi_dcmpun>
 8008738:	b140      	cbz	r0, 800874c <_printf_float+0xe0>
 800873a:	464b      	mov	r3, r9
 800873c:	2b00      	cmp	r3, #0
 800873e:	bfbc      	itt	lt
 8008740:	232d      	movlt	r3, #45	@ 0x2d
 8008742:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008746:	4a7e      	ldr	r2, [pc, #504]	@ (8008940 <_printf_float+0x2d4>)
 8008748:	4b7e      	ldr	r3, [pc, #504]	@ (8008944 <_printf_float+0x2d8>)
 800874a:	e7d4      	b.n	80086f6 <_printf_float+0x8a>
 800874c:	6863      	ldr	r3, [r4, #4]
 800874e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008752:	9206      	str	r2, [sp, #24]
 8008754:	1c5a      	adds	r2, r3, #1
 8008756:	d13b      	bne.n	80087d0 <_printf_float+0x164>
 8008758:	2306      	movs	r3, #6
 800875a:	6063      	str	r3, [r4, #4]
 800875c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008760:	2300      	movs	r3, #0
 8008762:	6022      	str	r2, [r4, #0]
 8008764:	9303      	str	r3, [sp, #12]
 8008766:	ab0a      	add	r3, sp, #40	@ 0x28
 8008768:	e9cd a301 	strd	sl, r3, [sp, #4]
 800876c:	ab09      	add	r3, sp, #36	@ 0x24
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	6861      	ldr	r1, [r4, #4]
 8008772:	ec49 8b10 	vmov	d0, r8, r9
 8008776:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800877a:	4628      	mov	r0, r5
 800877c:	f7ff fed6 	bl	800852c <__cvt>
 8008780:	9b06      	ldr	r3, [sp, #24]
 8008782:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008784:	2b47      	cmp	r3, #71	@ 0x47
 8008786:	4680      	mov	r8, r0
 8008788:	d129      	bne.n	80087de <_printf_float+0x172>
 800878a:	1cc8      	adds	r0, r1, #3
 800878c:	db02      	blt.n	8008794 <_printf_float+0x128>
 800878e:	6863      	ldr	r3, [r4, #4]
 8008790:	4299      	cmp	r1, r3
 8008792:	dd41      	ble.n	8008818 <_printf_float+0x1ac>
 8008794:	f1aa 0a02 	sub.w	sl, sl, #2
 8008798:	fa5f fa8a 	uxtb.w	sl, sl
 800879c:	3901      	subs	r1, #1
 800879e:	4652      	mov	r2, sl
 80087a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80087a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80087a6:	f7ff ff26 	bl	80085f6 <__exponent>
 80087aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087ac:	1813      	adds	r3, r2, r0
 80087ae:	2a01      	cmp	r2, #1
 80087b0:	4681      	mov	r9, r0
 80087b2:	6123      	str	r3, [r4, #16]
 80087b4:	dc02      	bgt.n	80087bc <_printf_float+0x150>
 80087b6:	6822      	ldr	r2, [r4, #0]
 80087b8:	07d2      	lsls	r2, r2, #31
 80087ba:	d501      	bpl.n	80087c0 <_printf_float+0x154>
 80087bc:	3301      	adds	r3, #1
 80087be:	6123      	str	r3, [r4, #16]
 80087c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d0a2      	beq.n	800870e <_printf_float+0xa2>
 80087c8:	232d      	movs	r3, #45	@ 0x2d
 80087ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087ce:	e79e      	b.n	800870e <_printf_float+0xa2>
 80087d0:	9a06      	ldr	r2, [sp, #24]
 80087d2:	2a47      	cmp	r2, #71	@ 0x47
 80087d4:	d1c2      	bne.n	800875c <_printf_float+0xf0>
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1c0      	bne.n	800875c <_printf_float+0xf0>
 80087da:	2301      	movs	r3, #1
 80087dc:	e7bd      	b.n	800875a <_printf_float+0xee>
 80087de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80087e2:	d9db      	bls.n	800879c <_printf_float+0x130>
 80087e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80087e8:	d118      	bne.n	800881c <_printf_float+0x1b0>
 80087ea:	2900      	cmp	r1, #0
 80087ec:	6863      	ldr	r3, [r4, #4]
 80087ee:	dd0b      	ble.n	8008808 <_printf_float+0x19c>
 80087f0:	6121      	str	r1, [r4, #16]
 80087f2:	b913      	cbnz	r3, 80087fa <_printf_float+0x18e>
 80087f4:	6822      	ldr	r2, [r4, #0]
 80087f6:	07d0      	lsls	r0, r2, #31
 80087f8:	d502      	bpl.n	8008800 <_printf_float+0x194>
 80087fa:	3301      	adds	r3, #1
 80087fc:	440b      	add	r3, r1
 80087fe:	6123      	str	r3, [r4, #16]
 8008800:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008802:	f04f 0900 	mov.w	r9, #0
 8008806:	e7db      	b.n	80087c0 <_printf_float+0x154>
 8008808:	b913      	cbnz	r3, 8008810 <_printf_float+0x1a4>
 800880a:	6822      	ldr	r2, [r4, #0]
 800880c:	07d2      	lsls	r2, r2, #31
 800880e:	d501      	bpl.n	8008814 <_printf_float+0x1a8>
 8008810:	3302      	adds	r3, #2
 8008812:	e7f4      	b.n	80087fe <_printf_float+0x192>
 8008814:	2301      	movs	r3, #1
 8008816:	e7f2      	b.n	80087fe <_printf_float+0x192>
 8008818:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800881c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800881e:	4299      	cmp	r1, r3
 8008820:	db05      	blt.n	800882e <_printf_float+0x1c2>
 8008822:	6823      	ldr	r3, [r4, #0]
 8008824:	6121      	str	r1, [r4, #16]
 8008826:	07d8      	lsls	r0, r3, #31
 8008828:	d5ea      	bpl.n	8008800 <_printf_float+0x194>
 800882a:	1c4b      	adds	r3, r1, #1
 800882c:	e7e7      	b.n	80087fe <_printf_float+0x192>
 800882e:	2900      	cmp	r1, #0
 8008830:	bfd4      	ite	le
 8008832:	f1c1 0202 	rsble	r2, r1, #2
 8008836:	2201      	movgt	r2, #1
 8008838:	4413      	add	r3, r2
 800883a:	e7e0      	b.n	80087fe <_printf_float+0x192>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	055a      	lsls	r2, r3, #21
 8008840:	d407      	bmi.n	8008852 <_printf_float+0x1e6>
 8008842:	6923      	ldr	r3, [r4, #16]
 8008844:	4642      	mov	r2, r8
 8008846:	4631      	mov	r1, r6
 8008848:	4628      	mov	r0, r5
 800884a:	47b8      	blx	r7
 800884c:	3001      	adds	r0, #1
 800884e:	d12b      	bne.n	80088a8 <_printf_float+0x23c>
 8008850:	e767      	b.n	8008722 <_printf_float+0xb6>
 8008852:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008856:	f240 80dd 	bls.w	8008a14 <_printf_float+0x3a8>
 800885a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800885e:	2200      	movs	r2, #0
 8008860:	2300      	movs	r3, #0
 8008862:	f7f8 f959 	bl	8000b18 <__aeabi_dcmpeq>
 8008866:	2800      	cmp	r0, #0
 8008868:	d033      	beq.n	80088d2 <_printf_float+0x266>
 800886a:	4a37      	ldr	r2, [pc, #220]	@ (8008948 <_printf_float+0x2dc>)
 800886c:	2301      	movs	r3, #1
 800886e:	4631      	mov	r1, r6
 8008870:	4628      	mov	r0, r5
 8008872:	47b8      	blx	r7
 8008874:	3001      	adds	r0, #1
 8008876:	f43f af54 	beq.w	8008722 <_printf_float+0xb6>
 800887a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800887e:	4543      	cmp	r3, r8
 8008880:	db02      	blt.n	8008888 <_printf_float+0x21c>
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	07d8      	lsls	r0, r3, #31
 8008886:	d50f      	bpl.n	80088a8 <_printf_float+0x23c>
 8008888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800888c:	4631      	mov	r1, r6
 800888e:	4628      	mov	r0, r5
 8008890:	47b8      	blx	r7
 8008892:	3001      	adds	r0, #1
 8008894:	f43f af45 	beq.w	8008722 <_printf_float+0xb6>
 8008898:	f04f 0900 	mov.w	r9, #0
 800889c:	f108 38ff 	add.w	r8, r8, #4294967295
 80088a0:	f104 0a1a 	add.w	sl, r4, #26
 80088a4:	45c8      	cmp	r8, r9
 80088a6:	dc09      	bgt.n	80088bc <_printf_float+0x250>
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	079b      	lsls	r3, r3, #30
 80088ac:	f100 8103 	bmi.w	8008ab6 <_printf_float+0x44a>
 80088b0:	68e0      	ldr	r0, [r4, #12]
 80088b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088b4:	4298      	cmp	r0, r3
 80088b6:	bfb8      	it	lt
 80088b8:	4618      	movlt	r0, r3
 80088ba:	e734      	b.n	8008726 <_printf_float+0xba>
 80088bc:	2301      	movs	r3, #1
 80088be:	4652      	mov	r2, sl
 80088c0:	4631      	mov	r1, r6
 80088c2:	4628      	mov	r0, r5
 80088c4:	47b8      	blx	r7
 80088c6:	3001      	adds	r0, #1
 80088c8:	f43f af2b 	beq.w	8008722 <_printf_float+0xb6>
 80088cc:	f109 0901 	add.w	r9, r9, #1
 80088d0:	e7e8      	b.n	80088a4 <_printf_float+0x238>
 80088d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	dc39      	bgt.n	800894c <_printf_float+0x2e0>
 80088d8:	4a1b      	ldr	r2, [pc, #108]	@ (8008948 <_printf_float+0x2dc>)
 80088da:	2301      	movs	r3, #1
 80088dc:	4631      	mov	r1, r6
 80088de:	4628      	mov	r0, r5
 80088e0:	47b8      	blx	r7
 80088e2:	3001      	adds	r0, #1
 80088e4:	f43f af1d 	beq.w	8008722 <_printf_float+0xb6>
 80088e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80088ec:	ea59 0303 	orrs.w	r3, r9, r3
 80088f0:	d102      	bne.n	80088f8 <_printf_float+0x28c>
 80088f2:	6823      	ldr	r3, [r4, #0]
 80088f4:	07d9      	lsls	r1, r3, #31
 80088f6:	d5d7      	bpl.n	80088a8 <_printf_float+0x23c>
 80088f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088fc:	4631      	mov	r1, r6
 80088fe:	4628      	mov	r0, r5
 8008900:	47b8      	blx	r7
 8008902:	3001      	adds	r0, #1
 8008904:	f43f af0d 	beq.w	8008722 <_printf_float+0xb6>
 8008908:	f04f 0a00 	mov.w	sl, #0
 800890c:	f104 0b1a 	add.w	fp, r4, #26
 8008910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008912:	425b      	negs	r3, r3
 8008914:	4553      	cmp	r3, sl
 8008916:	dc01      	bgt.n	800891c <_printf_float+0x2b0>
 8008918:	464b      	mov	r3, r9
 800891a:	e793      	b.n	8008844 <_printf_float+0x1d8>
 800891c:	2301      	movs	r3, #1
 800891e:	465a      	mov	r2, fp
 8008920:	4631      	mov	r1, r6
 8008922:	4628      	mov	r0, r5
 8008924:	47b8      	blx	r7
 8008926:	3001      	adds	r0, #1
 8008928:	f43f aefb 	beq.w	8008722 <_printf_float+0xb6>
 800892c:	f10a 0a01 	add.w	sl, sl, #1
 8008930:	e7ee      	b.n	8008910 <_printf_float+0x2a4>
 8008932:	bf00      	nop
 8008934:	7fefffff 	.word	0x7fefffff
 8008938:	0800d5ac 	.word	0x0800d5ac
 800893c:	0800d5b0 	.word	0x0800d5b0
 8008940:	0800d5b4 	.word	0x0800d5b4
 8008944:	0800d5b8 	.word	0x0800d5b8
 8008948:	0800d948 	.word	0x0800d948
 800894c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800894e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008952:	4553      	cmp	r3, sl
 8008954:	bfa8      	it	ge
 8008956:	4653      	movge	r3, sl
 8008958:	2b00      	cmp	r3, #0
 800895a:	4699      	mov	r9, r3
 800895c:	dc36      	bgt.n	80089cc <_printf_float+0x360>
 800895e:	f04f 0b00 	mov.w	fp, #0
 8008962:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008966:	f104 021a 	add.w	r2, r4, #26
 800896a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800896c:	9306      	str	r3, [sp, #24]
 800896e:	eba3 0309 	sub.w	r3, r3, r9
 8008972:	455b      	cmp	r3, fp
 8008974:	dc31      	bgt.n	80089da <_printf_float+0x36e>
 8008976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008978:	459a      	cmp	sl, r3
 800897a:	dc3a      	bgt.n	80089f2 <_printf_float+0x386>
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	07da      	lsls	r2, r3, #31
 8008980:	d437      	bmi.n	80089f2 <_printf_float+0x386>
 8008982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008984:	ebaa 0903 	sub.w	r9, sl, r3
 8008988:	9b06      	ldr	r3, [sp, #24]
 800898a:	ebaa 0303 	sub.w	r3, sl, r3
 800898e:	4599      	cmp	r9, r3
 8008990:	bfa8      	it	ge
 8008992:	4699      	movge	r9, r3
 8008994:	f1b9 0f00 	cmp.w	r9, #0
 8008998:	dc33      	bgt.n	8008a02 <_printf_float+0x396>
 800899a:	f04f 0800 	mov.w	r8, #0
 800899e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089a2:	f104 0b1a 	add.w	fp, r4, #26
 80089a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089a8:	ebaa 0303 	sub.w	r3, sl, r3
 80089ac:	eba3 0309 	sub.w	r3, r3, r9
 80089b0:	4543      	cmp	r3, r8
 80089b2:	f77f af79 	ble.w	80088a8 <_printf_float+0x23c>
 80089b6:	2301      	movs	r3, #1
 80089b8:	465a      	mov	r2, fp
 80089ba:	4631      	mov	r1, r6
 80089bc:	4628      	mov	r0, r5
 80089be:	47b8      	blx	r7
 80089c0:	3001      	adds	r0, #1
 80089c2:	f43f aeae 	beq.w	8008722 <_printf_float+0xb6>
 80089c6:	f108 0801 	add.w	r8, r8, #1
 80089ca:	e7ec      	b.n	80089a6 <_printf_float+0x33a>
 80089cc:	4642      	mov	r2, r8
 80089ce:	4631      	mov	r1, r6
 80089d0:	4628      	mov	r0, r5
 80089d2:	47b8      	blx	r7
 80089d4:	3001      	adds	r0, #1
 80089d6:	d1c2      	bne.n	800895e <_printf_float+0x2f2>
 80089d8:	e6a3      	b.n	8008722 <_printf_float+0xb6>
 80089da:	2301      	movs	r3, #1
 80089dc:	4631      	mov	r1, r6
 80089de:	4628      	mov	r0, r5
 80089e0:	9206      	str	r2, [sp, #24]
 80089e2:	47b8      	blx	r7
 80089e4:	3001      	adds	r0, #1
 80089e6:	f43f ae9c 	beq.w	8008722 <_printf_float+0xb6>
 80089ea:	9a06      	ldr	r2, [sp, #24]
 80089ec:	f10b 0b01 	add.w	fp, fp, #1
 80089f0:	e7bb      	b.n	800896a <_printf_float+0x2fe>
 80089f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089f6:	4631      	mov	r1, r6
 80089f8:	4628      	mov	r0, r5
 80089fa:	47b8      	blx	r7
 80089fc:	3001      	adds	r0, #1
 80089fe:	d1c0      	bne.n	8008982 <_printf_float+0x316>
 8008a00:	e68f      	b.n	8008722 <_printf_float+0xb6>
 8008a02:	9a06      	ldr	r2, [sp, #24]
 8008a04:	464b      	mov	r3, r9
 8008a06:	4442      	add	r2, r8
 8008a08:	4631      	mov	r1, r6
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	47b8      	blx	r7
 8008a0e:	3001      	adds	r0, #1
 8008a10:	d1c3      	bne.n	800899a <_printf_float+0x32e>
 8008a12:	e686      	b.n	8008722 <_printf_float+0xb6>
 8008a14:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008a18:	f1ba 0f01 	cmp.w	sl, #1
 8008a1c:	dc01      	bgt.n	8008a22 <_printf_float+0x3b6>
 8008a1e:	07db      	lsls	r3, r3, #31
 8008a20:	d536      	bpl.n	8008a90 <_printf_float+0x424>
 8008a22:	2301      	movs	r3, #1
 8008a24:	4642      	mov	r2, r8
 8008a26:	4631      	mov	r1, r6
 8008a28:	4628      	mov	r0, r5
 8008a2a:	47b8      	blx	r7
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	f43f ae78 	beq.w	8008722 <_printf_float+0xb6>
 8008a32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a36:	4631      	mov	r1, r6
 8008a38:	4628      	mov	r0, r5
 8008a3a:	47b8      	blx	r7
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	f43f ae70 	beq.w	8008722 <_printf_float+0xb6>
 8008a42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a46:	2200      	movs	r2, #0
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a4e:	f7f8 f863 	bl	8000b18 <__aeabi_dcmpeq>
 8008a52:	b9c0      	cbnz	r0, 8008a86 <_printf_float+0x41a>
 8008a54:	4653      	mov	r3, sl
 8008a56:	f108 0201 	add.w	r2, r8, #1
 8008a5a:	4631      	mov	r1, r6
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	47b8      	blx	r7
 8008a60:	3001      	adds	r0, #1
 8008a62:	d10c      	bne.n	8008a7e <_printf_float+0x412>
 8008a64:	e65d      	b.n	8008722 <_printf_float+0xb6>
 8008a66:	2301      	movs	r3, #1
 8008a68:	465a      	mov	r2, fp
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	47b8      	blx	r7
 8008a70:	3001      	adds	r0, #1
 8008a72:	f43f ae56 	beq.w	8008722 <_printf_float+0xb6>
 8008a76:	f108 0801 	add.w	r8, r8, #1
 8008a7a:	45d0      	cmp	r8, sl
 8008a7c:	dbf3      	blt.n	8008a66 <_printf_float+0x3fa>
 8008a7e:	464b      	mov	r3, r9
 8008a80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008a84:	e6df      	b.n	8008846 <_printf_float+0x1da>
 8008a86:	f04f 0800 	mov.w	r8, #0
 8008a8a:	f104 0b1a 	add.w	fp, r4, #26
 8008a8e:	e7f4      	b.n	8008a7a <_printf_float+0x40e>
 8008a90:	2301      	movs	r3, #1
 8008a92:	4642      	mov	r2, r8
 8008a94:	e7e1      	b.n	8008a5a <_printf_float+0x3ee>
 8008a96:	2301      	movs	r3, #1
 8008a98:	464a      	mov	r2, r9
 8008a9a:	4631      	mov	r1, r6
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	47b8      	blx	r7
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	f43f ae3e 	beq.w	8008722 <_printf_float+0xb6>
 8008aa6:	f108 0801 	add.w	r8, r8, #1
 8008aaa:	68e3      	ldr	r3, [r4, #12]
 8008aac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008aae:	1a5b      	subs	r3, r3, r1
 8008ab0:	4543      	cmp	r3, r8
 8008ab2:	dcf0      	bgt.n	8008a96 <_printf_float+0x42a>
 8008ab4:	e6fc      	b.n	80088b0 <_printf_float+0x244>
 8008ab6:	f04f 0800 	mov.w	r8, #0
 8008aba:	f104 0919 	add.w	r9, r4, #25
 8008abe:	e7f4      	b.n	8008aaa <_printf_float+0x43e>

08008ac0 <_printf_common>:
 8008ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac4:	4616      	mov	r6, r2
 8008ac6:	4698      	mov	r8, r3
 8008ac8:	688a      	ldr	r2, [r1, #8]
 8008aca:	690b      	ldr	r3, [r1, #16]
 8008acc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	bfb8      	it	lt
 8008ad4:	4613      	movlt	r3, r2
 8008ad6:	6033      	str	r3, [r6, #0]
 8008ad8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008adc:	4607      	mov	r7, r0
 8008ade:	460c      	mov	r4, r1
 8008ae0:	b10a      	cbz	r2, 8008ae6 <_printf_common+0x26>
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	6033      	str	r3, [r6, #0]
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	0699      	lsls	r1, r3, #26
 8008aea:	bf42      	ittt	mi
 8008aec:	6833      	ldrmi	r3, [r6, #0]
 8008aee:	3302      	addmi	r3, #2
 8008af0:	6033      	strmi	r3, [r6, #0]
 8008af2:	6825      	ldr	r5, [r4, #0]
 8008af4:	f015 0506 	ands.w	r5, r5, #6
 8008af8:	d106      	bne.n	8008b08 <_printf_common+0x48>
 8008afa:	f104 0a19 	add.w	sl, r4, #25
 8008afe:	68e3      	ldr	r3, [r4, #12]
 8008b00:	6832      	ldr	r2, [r6, #0]
 8008b02:	1a9b      	subs	r3, r3, r2
 8008b04:	42ab      	cmp	r3, r5
 8008b06:	dc26      	bgt.n	8008b56 <_printf_common+0x96>
 8008b08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b0c:	6822      	ldr	r2, [r4, #0]
 8008b0e:	3b00      	subs	r3, #0
 8008b10:	bf18      	it	ne
 8008b12:	2301      	movne	r3, #1
 8008b14:	0692      	lsls	r2, r2, #26
 8008b16:	d42b      	bmi.n	8008b70 <_printf_common+0xb0>
 8008b18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b1c:	4641      	mov	r1, r8
 8008b1e:	4638      	mov	r0, r7
 8008b20:	47c8      	blx	r9
 8008b22:	3001      	adds	r0, #1
 8008b24:	d01e      	beq.n	8008b64 <_printf_common+0xa4>
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	6922      	ldr	r2, [r4, #16]
 8008b2a:	f003 0306 	and.w	r3, r3, #6
 8008b2e:	2b04      	cmp	r3, #4
 8008b30:	bf02      	ittt	eq
 8008b32:	68e5      	ldreq	r5, [r4, #12]
 8008b34:	6833      	ldreq	r3, [r6, #0]
 8008b36:	1aed      	subeq	r5, r5, r3
 8008b38:	68a3      	ldr	r3, [r4, #8]
 8008b3a:	bf0c      	ite	eq
 8008b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b40:	2500      	movne	r5, #0
 8008b42:	4293      	cmp	r3, r2
 8008b44:	bfc4      	itt	gt
 8008b46:	1a9b      	subgt	r3, r3, r2
 8008b48:	18ed      	addgt	r5, r5, r3
 8008b4a:	2600      	movs	r6, #0
 8008b4c:	341a      	adds	r4, #26
 8008b4e:	42b5      	cmp	r5, r6
 8008b50:	d11a      	bne.n	8008b88 <_printf_common+0xc8>
 8008b52:	2000      	movs	r0, #0
 8008b54:	e008      	b.n	8008b68 <_printf_common+0xa8>
 8008b56:	2301      	movs	r3, #1
 8008b58:	4652      	mov	r2, sl
 8008b5a:	4641      	mov	r1, r8
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	47c8      	blx	r9
 8008b60:	3001      	adds	r0, #1
 8008b62:	d103      	bne.n	8008b6c <_printf_common+0xac>
 8008b64:	f04f 30ff 	mov.w	r0, #4294967295
 8008b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6c:	3501      	adds	r5, #1
 8008b6e:	e7c6      	b.n	8008afe <_printf_common+0x3e>
 8008b70:	18e1      	adds	r1, r4, r3
 8008b72:	1c5a      	adds	r2, r3, #1
 8008b74:	2030      	movs	r0, #48	@ 0x30
 8008b76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b7a:	4422      	add	r2, r4
 8008b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b84:	3302      	adds	r3, #2
 8008b86:	e7c7      	b.n	8008b18 <_printf_common+0x58>
 8008b88:	2301      	movs	r3, #1
 8008b8a:	4622      	mov	r2, r4
 8008b8c:	4641      	mov	r1, r8
 8008b8e:	4638      	mov	r0, r7
 8008b90:	47c8      	blx	r9
 8008b92:	3001      	adds	r0, #1
 8008b94:	d0e6      	beq.n	8008b64 <_printf_common+0xa4>
 8008b96:	3601      	adds	r6, #1
 8008b98:	e7d9      	b.n	8008b4e <_printf_common+0x8e>
	...

08008b9c <_printf_i>:
 8008b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba0:	7e0f      	ldrb	r7, [r1, #24]
 8008ba2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ba4:	2f78      	cmp	r7, #120	@ 0x78
 8008ba6:	4691      	mov	r9, r2
 8008ba8:	4680      	mov	r8, r0
 8008baa:	460c      	mov	r4, r1
 8008bac:	469a      	mov	sl, r3
 8008bae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008bb2:	d807      	bhi.n	8008bc4 <_printf_i+0x28>
 8008bb4:	2f62      	cmp	r7, #98	@ 0x62
 8008bb6:	d80a      	bhi.n	8008bce <_printf_i+0x32>
 8008bb8:	2f00      	cmp	r7, #0
 8008bba:	f000 80d2 	beq.w	8008d62 <_printf_i+0x1c6>
 8008bbe:	2f58      	cmp	r7, #88	@ 0x58
 8008bc0:	f000 80b9 	beq.w	8008d36 <_printf_i+0x19a>
 8008bc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008bcc:	e03a      	b.n	8008c44 <_printf_i+0xa8>
 8008bce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008bd2:	2b15      	cmp	r3, #21
 8008bd4:	d8f6      	bhi.n	8008bc4 <_printf_i+0x28>
 8008bd6:	a101      	add	r1, pc, #4	@ (adr r1, 8008bdc <_printf_i+0x40>)
 8008bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bdc:	08008c35 	.word	0x08008c35
 8008be0:	08008c49 	.word	0x08008c49
 8008be4:	08008bc5 	.word	0x08008bc5
 8008be8:	08008bc5 	.word	0x08008bc5
 8008bec:	08008bc5 	.word	0x08008bc5
 8008bf0:	08008bc5 	.word	0x08008bc5
 8008bf4:	08008c49 	.word	0x08008c49
 8008bf8:	08008bc5 	.word	0x08008bc5
 8008bfc:	08008bc5 	.word	0x08008bc5
 8008c00:	08008bc5 	.word	0x08008bc5
 8008c04:	08008bc5 	.word	0x08008bc5
 8008c08:	08008d49 	.word	0x08008d49
 8008c0c:	08008c73 	.word	0x08008c73
 8008c10:	08008d03 	.word	0x08008d03
 8008c14:	08008bc5 	.word	0x08008bc5
 8008c18:	08008bc5 	.word	0x08008bc5
 8008c1c:	08008d6b 	.word	0x08008d6b
 8008c20:	08008bc5 	.word	0x08008bc5
 8008c24:	08008c73 	.word	0x08008c73
 8008c28:	08008bc5 	.word	0x08008bc5
 8008c2c:	08008bc5 	.word	0x08008bc5
 8008c30:	08008d0b 	.word	0x08008d0b
 8008c34:	6833      	ldr	r3, [r6, #0]
 8008c36:	1d1a      	adds	r2, r3, #4
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	6032      	str	r2, [r6, #0]
 8008c3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c44:	2301      	movs	r3, #1
 8008c46:	e09d      	b.n	8008d84 <_printf_i+0x1e8>
 8008c48:	6833      	ldr	r3, [r6, #0]
 8008c4a:	6820      	ldr	r0, [r4, #0]
 8008c4c:	1d19      	adds	r1, r3, #4
 8008c4e:	6031      	str	r1, [r6, #0]
 8008c50:	0606      	lsls	r6, r0, #24
 8008c52:	d501      	bpl.n	8008c58 <_printf_i+0xbc>
 8008c54:	681d      	ldr	r5, [r3, #0]
 8008c56:	e003      	b.n	8008c60 <_printf_i+0xc4>
 8008c58:	0645      	lsls	r5, r0, #25
 8008c5a:	d5fb      	bpl.n	8008c54 <_printf_i+0xb8>
 8008c5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c60:	2d00      	cmp	r5, #0
 8008c62:	da03      	bge.n	8008c6c <_printf_i+0xd0>
 8008c64:	232d      	movs	r3, #45	@ 0x2d
 8008c66:	426d      	negs	r5, r5
 8008c68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c6c:	4859      	ldr	r0, [pc, #356]	@ (8008dd4 <_printf_i+0x238>)
 8008c6e:	230a      	movs	r3, #10
 8008c70:	e011      	b.n	8008c96 <_printf_i+0xfa>
 8008c72:	6821      	ldr	r1, [r4, #0]
 8008c74:	6833      	ldr	r3, [r6, #0]
 8008c76:	0608      	lsls	r0, r1, #24
 8008c78:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c7c:	d402      	bmi.n	8008c84 <_printf_i+0xe8>
 8008c7e:	0649      	lsls	r1, r1, #25
 8008c80:	bf48      	it	mi
 8008c82:	b2ad      	uxthmi	r5, r5
 8008c84:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c86:	4853      	ldr	r0, [pc, #332]	@ (8008dd4 <_printf_i+0x238>)
 8008c88:	6033      	str	r3, [r6, #0]
 8008c8a:	bf14      	ite	ne
 8008c8c:	230a      	movne	r3, #10
 8008c8e:	2308      	moveq	r3, #8
 8008c90:	2100      	movs	r1, #0
 8008c92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c96:	6866      	ldr	r6, [r4, #4]
 8008c98:	60a6      	str	r6, [r4, #8]
 8008c9a:	2e00      	cmp	r6, #0
 8008c9c:	bfa2      	ittt	ge
 8008c9e:	6821      	ldrge	r1, [r4, #0]
 8008ca0:	f021 0104 	bicge.w	r1, r1, #4
 8008ca4:	6021      	strge	r1, [r4, #0]
 8008ca6:	b90d      	cbnz	r5, 8008cac <_printf_i+0x110>
 8008ca8:	2e00      	cmp	r6, #0
 8008caa:	d04b      	beq.n	8008d44 <_printf_i+0x1a8>
 8008cac:	4616      	mov	r6, r2
 8008cae:	fbb5 f1f3 	udiv	r1, r5, r3
 8008cb2:	fb03 5711 	mls	r7, r3, r1, r5
 8008cb6:	5dc7      	ldrb	r7, [r0, r7]
 8008cb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008cbc:	462f      	mov	r7, r5
 8008cbe:	42bb      	cmp	r3, r7
 8008cc0:	460d      	mov	r5, r1
 8008cc2:	d9f4      	bls.n	8008cae <_printf_i+0x112>
 8008cc4:	2b08      	cmp	r3, #8
 8008cc6:	d10b      	bne.n	8008ce0 <_printf_i+0x144>
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	07df      	lsls	r7, r3, #31
 8008ccc:	d508      	bpl.n	8008ce0 <_printf_i+0x144>
 8008cce:	6923      	ldr	r3, [r4, #16]
 8008cd0:	6861      	ldr	r1, [r4, #4]
 8008cd2:	4299      	cmp	r1, r3
 8008cd4:	bfde      	ittt	le
 8008cd6:	2330      	movle	r3, #48	@ 0x30
 8008cd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008cdc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ce0:	1b92      	subs	r2, r2, r6
 8008ce2:	6122      	str	r2, [r4, #16]
 8008ce4:	f8cd a000 	str.w	sl, [sp]
 8008ce8:	464b      	mov	r3, r9
 8008cea:	aa03      	add	r2, sp, #12
 8008cec:	4621      	mov	r1, r4
 8008cee:	4640      	mov	r0, r8
 8008cf0:	f7ff fee6 	bl	8008ac0 <_printf_common>
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	d14a      	bne.n	8008d8e <_printf_i+0x1f2>
 8008cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfc:	b004      	add	sp, #16
 8008cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d02:	6823      	ldr	r3, [r4, #0]
 8008d04:	f043 0320 	orr.w	r3, r3, #32
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	4833      	ldr	r0, [pc, #204]	@ (8008dd8 <_printf_i+0x23c>)
 8008d0c:	2778      	movs	r7, #120	@ 0x78
 8008d0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	6831      	ldr	r1, [r6, #0]
 8008d16:	061f      	lsls	r7, r3, #24
 8008d18:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d1c:	d402      	bmi.n	8008d24 <_printf_i+0x188>
 8008d1e:	065f      	lsls	r7, r3, #25
 8008d20:	bf48      	it	mi
 8008d22:	b2ad      	uxthmi	r5, r5
 8008d24:	6031      	str	r1, [r6, #0]
 8008d26:	07d9      	lsls	r1, r3, #31
 8008d28:	bf44      	itt	mi
 8008d2a:	f043 0320 	orrmi.w	r3, r3, #32
 8008d2e:	6023      	strmi	r3, [r4, #0]
 8008d30:	b11d      	cbz	r5, 8008d3a <_printf_i+0x19e>
 8008d32:	2310      	movs	r3, #16
 8008d34:	e7ac      	b.n	8008c90 <_printf_i+0xf4>
 8008d36:	4827      	ldr	r0, [pc, #156]	@ (8008dd4 <_printf_i+0x238>)
 8008d38:	e7e9      	b.n	8008d0e <_printf_i+0x172>
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	f023 0320 	bic.w	r3, r3, #32
 8008d40:	6023      	str	r3, [r4, #0]
 8008d42:	e7f6      	b.n	8008d32 <_printf_i+0x196>
 8008d44:	4616      	mov	r6, r2
 8008d46:	e7bd      	b.n	8008cc4 <_printf_i+0x128>
 8008d48:	6833      	ldr	r3, [r6, #0]
 8008d4a:	6825      	ldr	r5, [r4, #0]
 8008d4c:	6961      	ldr	r1, [r4, #20]
 8008d4e:	1d18      	adds	r0, r3, #4
 8008d50:	6030      	str	r0, [r6, #0]
 8008d52:	062e      	lsls	r6, r5, #24
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	d501      	bpl.n	8008d5c <_printf_i+0x1c0>
 8008d58:	6019      	str	r1, [r3, #0]
 8008d5a:	e002      	b.n	8008d62 <_printf_i+0x1c6>
 8008d5c:	0668      	lsls	r0, r5, #25
 8008d5e:	d5fb      	bpl.n	8008d58 <_printf_i+0x1bc>
 8008d60:	8019      	strh	r1, [r3, #0]
 8008d62:	2300      	movs	r3, #0
 8008d64:	6123      	str	r3, [r4, #16]
 8008d66:	4616      	mov	r6, r2
 8008d68:	e7bc      	b.n	8008ce4 <_printf_i+0x148>
 8008d6a:	6833      	ldr	r3, [r6, #0]
 8008d6c:	1d1a      	adds	r2, r3, #4
 8008d6e:	6032      	str	r2, [r6, #0]
 8008d70:	681e      	ldr	r6, [r3, #0]
 8008d72:	6862      	ldr	r2, [r4, #4]
 8008d74:	2100      	movs	r1, #0
 8008d76:	4630      	mov	r0, r6
 8008d78:	f7f7 fa52 	bl	8000220 <memchr>
 8008d7c:	b108      	cbz	r0, 8008d82 <_printf_i+0x1e6>
 8008d7e:	1b80      	subs	r0, r0, r6
 8008d80:	6060      	str	r0, [r4, #4]
 8008d82:	6863      	ldr	r3, [r4, #4]
 8008d84:	6123      	str	r3, [r4, #16]
 8008d86:	2300      	movs	r3, #0
 8008d88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d8c:	e7aa      	b.n	8008ce4 <_printf_i+0x148>
 8008d8e:	6923      	ldr	r3, [r4, #16]
 8008d90:	4632      	mov	r2, r6
 8008d92:	4649      	mov	r1, r9
 8008d94:	4640      	mov	r0, r8
 8008d96:	47d0      	blx	sl
 8008d98:	3001      	adds	r0, #1
 8008d9a:	d0ad      	beq.n	8008cf8 <_printf_i+0x15c>
 8008d9c:	6823      	ldr	r3, [r4, #0]
 8008d9e:	079b      	lsls	r3, r3, #30
 8008da0:	d413      	bmi.n	8008dca <_printf_i+0x22e>
 8008da2:	68e0      	ldr	r0, [r4, #12]
 8008da4:	9b03      	ldr	r3, [sp, #12]
 8008da6:	4298      	cmp	r0, r3
 8008da8:	bfb8      	it	lt
 8008daa:	4618      	movlt	r0, r3
 8008dac:	e7a6      	b.n	8008cfc <_printf_i+0x160>
 8008dae:	2301      	movs	r3, #1
 8008db0:	4632      	mov	r2, r6
 8008db2:	4649      	mov	r1, r9
 8008db4:	4640      	mov	r0, r8
 8008db6:	47d0      	blx	sl
 8008db8:	3001      	adds	r0, #1
 8008dba:	d09d      	beq.n	8008cf8 <_printf_i+0x15c>
 8008dbc:	3501      	adds	r5, #1
 8008dbe:	68e3      	ldr	r3, [r4, #12]
 8008dc0:	9903      	ldr	r1, [sp, #12]
 8008dc2:	1a5b      	subs	r3, r3, r1
 8008dc4:	42ab      	cmp	r3, r5
 8008dc6:	dcf2      	bgt.n	8008dae <_printf_i+0x212>
 8008dc8:	e7eb      	b.n	8008da2 <_printf_i+0x206>
 8008dca:	2500      	movs	r5, #0
 8008dcc:	f104 0619 	add.w	r6, r4, #25
 8008dd0:	e7f5      	b.n	8008dbe <_printf_i+0x222>
 8008dd2:	bf00      	nop
 8008dd4:	0800d5bc 	.word	0x0800d5bc
 8008dd8:	0800d5cd 	.word	0x0800d5cd

08008ddc <_scanf_float>:
 8008ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de0:	b087      	sub	sp, #28
 8008de2:	4617      	mov	r7, r2
 8008de4:	9303      	str	r3, [sp, #12]
 8008de6:	688b      	ldr	r3, [r1, #8]
 8008de8:	1e5a      	subs	r2, r3, #1
 8008dea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008dee:	bf81      	itttt	hi
 8008df0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008df4:	eb03 0b05 	addhi.w	fp, r3, r5
 8008df8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008dfc:	608b      	strhi	r3, [r1, #8]
 8008dfe:	680b      	ldr	r3, [r1, #0]
 8008e00:	460a      	mov	r2, r1
 8008e02:	f04f 0500 	mov.w	r5, #0
 8008e06:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008e0a:	f842 3b1c 	str.w	r3, [r2], #28
 8008e0e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008e12:	4680      	mov	r8, r0
 8008e14:	460c      	mov	r4, r1
 8008e16:	bf98      	it	ls
 8008e18:	f04f 0b00 	movls.w	fp, #0
 8008e1c:	9201      	str	r2, [sp, #4]
 8008e1e:	4616      	mov	r6, r2
 8008e20:	46aa      	mov	sl, r5
 8008e22:	46a9      	mov	r9, r5
 8008e24:	9502      	str	r5, [sp, #8]
 8008e26:	68a2      	ldr	r2, [r4, #8]
 8008e28:	b152      	cbz	r2, 8008e40 <_scanf_float+0x64>
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	2b4e      	cmp	r3, #78	@ 0x4e
 8008e30:	d864      	bhi.n	8008efc <_scanf_float+0x120>
 8008e32:	2b40      	cmp	r3, #64	@ 0x40
 8008e34:	d83c      	bhi.n	8008eb0 <_scanf_float+0xd4>
 8008e36:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008e3a:	b2c8      	uxtb	r0, r1
 8008e3c:	280e      	cmp	r0, #14
 8008e3e:	d93a      	bls.n	8008eb6 <_scanf_float+0xda>
 8008e40:	f1b9 0f00 	cmp.w	r9, #0
 8008e44:	d003      	beq.n	8008e4e <_scanf_float+0x72>
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e4c:	6023      	str	r3, [r4, #0]
 8008e4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e52:	f1ba 0f01 	cmp.w	sl, #1
 8008e56:	f200 8117 	bhi.w	8009088 <_scanf_float+0x2ac>
 8008e5a:	9b01      	ldr	r3, [sp, #4]
 8008e5c:	429e      	cmp	r6, r3
 8008e5e:	f200 8108 	bhi.w	8009072 <_scanf_float+0x296>
 8008e62:	2001      	movs	r0, #1
 8008e64:	b007      	add	sp, #28
 8008e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008e6e:	2a0d      	cmp	r2, #13
 8008e70:	d8e6      	bhi.n	8008e40 <_scanf_float+0x64>
 8008e72:	a101      	add	r1, pc, #4	@ (adr r1, 8008e78 <_scanf_float+0x9c>)
 8008e74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e78:	08008fbf 	.word	0x08008fbf
 8008e7c:	08008e41 	.word	0x08008e41
 8008e80:	08008e41 	.word	0x08008e41
 8008e84:	08008e41 	.word	0x08008e41
 8008e88:	0800901f 	.word	0x0800901f
 8008e8c:	08008ff7 	.word	0x08008ff7
 8008e90:	08008e41 	.word	0x08008e41
 8008e94:	08008e41 	.word	0x08008e41
 8008e98:	08008fcd 	.word	0x08008fcd
 8008e9c:	08008e41 	.word	0x08008e41
 8008ea0:	08008e41 	.word	0x08008e41
 8008ea4:	08008e41 	.word	0x08008e41
 8008ea8:	08008e41 	.word	0x08008e41
 8008eac:	08008f85 	.word	0x08008f85
 8008eb0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008eb4:	e7db      	b.n	8008e6e <_scanf_float+0x92>
 8008eb6:	290e      	cmp	r1, #14
 8008eb8:	d8c2      	bhi.n	8008e40 <_scanf_float+0x64>
 8008eba:	a001      	add	r0, pc, #4	@ (adr r0, 8008ec0 <_scanf_float+0xe4>)
 8008ebc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008ec0:	08008f75 	.word	0x08008f75
 8008ec4:	08008e41 	.word	0x08008e41
 8008ec8:	08008f75 	.word	0x08008f75
 8008ecc:	0800900b 	.word	0x0800900b
 8008ed0:	08008e41 	.word	0x08008e41
 8008ed4:	08008f1d 	.word	0x08008f1d
 8008ed8:	08008f5b 	.word	0x08008f5b
 8008edc:	08008f5b 	.word	0x08008f5b
 8008ee0:	08008f5b 	.word	0x08008f5b
 8008ee4:	08008f5b 	.word	0x08008f5b
 8008ee8:	08008f5b 	.word	0x08008f5b
 8008eec:	08008f5b 	.word	0x08008f5b
 8008ef0:	08008f5b 	.word	0x08008f5b
 8008ef4:	08008f5b 	.word	0x08008f5b
 8008ef8:	08008f5b 	.word	0x08008f5b
 8008efc:	2b6e      	cmp	r3, #110	@ 0x6e
 8008efe:	d809      	bhi.n	8008f14 <_scanf_float+0x138>
 8008f00:	2b60      	cmp	r3, #96	@ 0x60
 8008f02:	d8b2      	bhi.n	8008e6a <_scanf_float+0x8e>
 8008f04:	2b54      	cmp	r3, #84	@ 0x54
 8008f06:	d07b      	beq.n	8009000 <_scanf_float+0x224>
 8008f08:	2b59      	cmp	r3, #89	@ 0x59
 8008f0a:	d199      	bne.n	8008e40 <_scanf_float+0x64>
 8008f0c:	2d07      	cmp	r5, #7
 8008f0e:	d197      	bne.n	8008e40 <_scanf_float+0x64>
 8008f10:	2508      	movs	r5, #8
 8008f12:	e02c      	b.n	8008f6e <_scanf_float+0x192>
 8008f14:	2b74      	cmp	r3, #116	@ 0x74
 8008f16:	d073      	beq.n	8009000 <_scanf_float+0x224>
 8008f18:	2b79      	cmp	r3, #121	@ 0x79
 8008f1a:	e7f6      	b.n	8008f0a <_scanf_float+0x12e>
 8008f1c:	6821      	ldr	r1, [r4, #0]
 8008f1e:	05c8      	lsls	r0, r1, #23
 8008f20:	d51b      	bpl.n	8008f5a <_scanf_float+0x17e>
 8008f22:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008f26:	6021      	str	r1, [r4, #0]
 8008f28:	f109 0901 	add.w	r9, r9, #1
 8008f2c:	f1bb 0f00 	cmp.w	fp, #0
 8008f30:	d003      	beq.n	8008f3a <_scanf_float+0x15e>
 8008f32:	3201      	adds	r2, #1
 8008f34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f38:	60a2      	str	r2, [r4, #8]
 8008f3a:	68a3      	ldr	r3, [r4, #8]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	60a3      	str	r3, [r4, #8]
 8008f40:	6923      	ldr	r3, [r4, #16]
 8008f42:	3301      	adds	r3, #1
 8008f44:	6123      	str	r3, [r4, #16]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	607b      	str	r3, [r7, #4]
 8008f4e:	f340 8087 	ble.w	8009060 <_scanf_float+0x284>
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	3301      	adds	r3, #1
 8008f56:	603b      	str	r3, [r7, #0]
 8008f58:	e765      	b.n	8008e26 <_scanf_float+0x4a>
 8008f5a:	eb1a 0105 	adds.w	r1, sl, r5
 8008f5e:	f47f af6f 	bne.w	8008e40 <_scanf_float+0x64>
 8008f62:	6822      	ldr	r2, [r4, #0]
 8008f64:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008f68:	6022      	str	r2, [r4, #0]
 8008f6a:	460d      	mov	r5, r1
 8008f6c:	468a      	mov	sl, r1
 8008f6e:	f806 3b01 	strb.w	r3, [r6], #1
 8008f72:	e7e2      	b.n	8008f3a <_scanf_float+0x15e>
 8008f74:	6822      	ldr	r2, [r4, #0]
 8008f76:	0610      	lsls	r0, r2, #24
 8008f78:	f57f af62 	bpl.w	8008e40 <_scanf_float+0x64>
 8008f7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008f80:	6022      	str	r2, [r4, #0]
 8008f82:	e7f4      	b.n	8008f6e <_scanf_float+0x192>
 8008f84:	f1ba 0f00 	cmp.w	sl, #0
 8008f88:	d10e      	bne.n	8008fa8 <_scanf_float+0x1cc>
 8008f8a:	f1b9 0f00 	cmp.w	r9, #0
 8008f8e:	d10e      	bne.n	8008fae <_scanf_float+0x1d2>
 8008f90:	6822      	ldr	r2, [r4, #0]
 8008f92:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008f96:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008f9a:	d108      	bne.n	8008fae <_scanf_float+0x1d2>
 8008f9c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008fa0:	6022      	str	r2, [r4, #0]
 8008fa2:	f04f 0a01 	mov.w	sl, #1
 8008fa6:	e7e2      	b.n	8008f6e <_scanf_float+0x192>
 8008fa8:	f1ba 0f02 	cmp.w	sl, #2
 8008fac:	d055      	beq.n	800905a <_scanf_float+0x27e>
 8008fae:	2d01      	cmp	r5, #1
 8008fb0:	d002      	beq.n	8008fb8 <_scanf_float+0x1dc>
 8008fb2:	2d04      	cmp	r5, #4
 8008fb4:	f47f af44 	bne.w	8008e40 <_scanf_float+0x64>
 8008fb8:	3501      	adds	r5, #1
 8008fba:	b2ed      	uxtb	r5, r5
 8008fbc:	e7d7      	b.n	8008f6e <_scanf_float+0x192>
 8008fbe:	f1ba 0f01 	cmp.w	sl, #1
 8008fc2:	f47f af3d 	bne.w	8008e40 <_scanf_float+0x64>
 8008fc6:	f04f 0a02 	mov.w	sl, #2
 8008fca:	e7d0      	b.n	8008f6e <_scanf_float+0x192>
 8008fcc:	b97d      	cbnz	r5, 8008fee <_scanf_float+0x212>
 8008fce:	f1b9 0f00 	cmp.w	r9, #0
 8008fd2:	f47f af38 	bne.w	8008e46 <_scanf_float+0x6a>
 8008fd6:	6822      	ldr	r2, [r4, #0]
 8008fd8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008fdc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008fe0:	f040 8108 	bne.w	80091f4 <_scanf_float+0x418>
 8008fe4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008fe8:	6022      	str	r2, [r4, #0]
 8008fea:	2501      	movs	r5, #1
 8008fec:	e7bf      	b.n	8008f6e <_scanf_float+0x192>
 8008fee:	2d03      	cmp	r5, #3
 8008ff0:	d0e2      	beq.n	8008fb8 <_scanf_float+0x1dc>
 8008ff2:	2d05      	cmp	r5, #5
 8008ff4:	e7de      	b.n	8008fb4 <_scanf_float+0x1d8>
 8008ff6:	2d02      	cmp	r5, #2
 8008ff8:	f47f af22 	bne.w	8008e40 <_scanf_float+0x64>
 8008ffc:	2503      	movs	r5, #3
 8008ffe:	e7b6      	b.n	8008f6e <_scanf_float+0x192>
 8009000:	2d06      	cmp	r5, #6
 8009002:	f47f af1d 	bne.w	8008e40 <_scanf_float+0x64>
 8009006:	2507      	movs	r5, #7
 8009008:	e7b1      	b.n	8008f6e <_scanf_float+0x192>
 800900a:	6822      	ldr	r2, [r4, #0]
 800900c:	0591      	lsls	r1, r2, #22
 800900e:	f57f af17 	bpl.w	8008e40 <_scanf_float+0x64>
 8009012:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009016:	6022      	str	r2, [r4, #0]
 8009018:	f8cd 9008 	str.w	r9, [sp, #8]
 800901c:	e7a7      	b.n	8008f6e <_scanf_float+0x192>
 800901e:	6822      	ldr	r2, [r4, #0]
 8009020:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009024:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009028:	d006      	beq.n	8009038 <_scanf_float+0x25c>
 800902a:	0550      	lsls	r0, r2, #21
 800902c:	f57f af08 	bpl.w	8008e40 <_scanf_float+0x64>
 8009030:	f1b9 0f00 	cmp.w	r9, #0
 8009034:	f000 80de 	beq.w	80091f4 <_scanf_float+0x418>
 8009038:	0591      	lsls	r1, r2, #22
 800903a:	bf58      	it	pl
 800903c:	9902      	ldrpl	r1, [sp, #8]
 800903e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009042:	bf58      	it	pl
 8009044:	eba9 0101 	subpl.w	r1, r9, r1
 8009048:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800904c:	bf58      	it	pl
 800904e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009052:	6022      	str	r2, [r4, #0]
 8009054:	f04f 0900 	mov.w	r9, #0
 8009058:	e789      	b.n	8008f6e <_scanf_float+0x192>
 800905a:	f04f 0a03 	mov.w	sl, #3
 800905e:	e786      	b.n	8008f6e <_scanf_float+0x192>
 8009060:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009064:	4639      	mov	r1, r7
 8009066:	4640      	mov	r0, r8
 8009068:	4798      	blx	r3
 800906a:	2800      	cmp	r0, #0
 800906c:	f43f aedb 	beq.w	8008e26 <_scanf_float+0x4a>
 8009070:	e6e6      	b.n	8008e40 <_scanf_float+0x64>
 8009072:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009076:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800907a:	463a      	mov	r2, r7
 800907c:	4640      	mov	r0, r8
 800907e:	4798      	blx	r3
 8009080:	6923      	ldr	r3, [r4, #16]
 8009082:	3b01      	subs	r3, #1
 8009084:	6123      	str	r3, [r4, #16]
 8009086:	e6e8      	b.n	8008e5a <_scanf_float+0x7e>
 8009088:	1e6b      	subs	r3, r5, #1
 800908a:	2b06      	cmp	r3, #6
 800908c:	d824      	bhi.n	80090d8 <_scanf_float+0x2fc>
 800908e:	2d02      	cmp	r5, #2
 8009090:	d836      	bhi.n	8009100 <_scanf_float+0x324>
 8009092:	9b01      	ldr	r3, [sp, #4]
 8009094:	429e      	cmp	r6, r3
 8009096:	f67f aee4 	bls.w	8008e62 <_scanf_float+0x86>
 800909a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800909e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090a2:	463a      	mov	r2, r7
 80090a4:	4640      	mov	r0, r8
 80090a6:	4798      	blx	r3
 80090a8:	6923      	ldr	r3, [r4, #16]
 80090aa:	3b01      	subs	r3, #1
 80090ac:	6123      	str	r3, [r4, #16]
 80090ae:	e7f0      	b.n	8009092 <_scanf_float+0x2b6>
 80090b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80090b4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80090b8:	463a      	mov	r2, r7
 80090ba:	4640      	mov	r0, r8
 80090bc:	4798      	blx	r3
 80090be:	6923      	ldr	r3, [r4, #16]
 80090c0:	3b01      	subs	r3, #1
 80090c2:	6123      	str	r3, [r4, #16]
 80090c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090c8:	fa5f fa8a 	uxtb.w	sl, sl
 80090cc:	f1ba 0f02 	cmp.w	sl, #2
 80090d0:	d1ee      	bne.n	80090b0 <_scanf_float+0x2d4>
 80090d2:	3d03      	subs	r5, #3
 80090d4:	b2ed      	uxtb	r5, r5
 80090d6:	1b76      	subs	r6, r6, r5
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	05da      	lsls	r2, r3, #23
 80090dc:	d530      	bpl.n	8009140 <_scanf_float+0x364>
 80090de:	055b      	lsls	r3, r3, #21
 80090e0:	d511      	bpl.n	8009106 <_scanf_float+0x32a>
 80090e2:	9b01      	ldr	r3, [sp, #4]
 80090e4:	429e      	cmp	r6, r3
 80090e6:	f67f aebc 	bls.w	8008e62 <_scanf_float+0x86>
 80090ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80090ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090f2:	463a      	mov	r2, r7
 80090f4:	4640      	mov	r0, r8
 80090f6:	4798      	blx	r3
 80090f8:	6923      	ldr	r3, [r4, #16]
 80090fa:	3b01      	subs	r3, #1
 80090fc:	6123      	str	r3, [r4, #16]
 80090fe:	e7f0      	b.n	80090e2 <_scanf_float+0x306>
 8009100:	46aa      	mov	sl, r5
 8009102:	46b3      	mov	fp, r6
 8009104:	e7de      	b.n	80090c4 <_scanf_float+0x2e8>
 8009106:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800910a:	6923      	ldr	r3, [r4, #16]
 800910c:	2965      	cmp	r1, #101	@ 0x65
 800910e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009112:	f106 35ff 	add.w	r5, r6, #4294967295
 8009116:	6123      	str	r3, [r4, #16]
 8009118:	d00c      	beq.n	8009134 <_scanf_float+0x358>
 800911a:	2945      	cmp	r1, #69	@ 0x45
 800911c:	d00a      	beq.n	8009134 <_scanf_float+0x358>
 800911e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009122:	463a      	mov	r2, r7
 8009124:	4640      	mov	r0, r8
 8009126:	4798      	blx	r3
 8009128:	6923      	ldr	r3, [r4, #16]
 800912a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800912e:	3b01      	subs	r3, #1
 8009130:	1eb5      	subs	r5, r6, #2
 8009132:	6123      	str	r3, [r4, #16]
 8009134:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009138:	463a      	mov	r2, r7
 800913a:	4640      	mov	r0, r8
 800913c:	4798      	blx	r3
 800913e:	462e      	mov	r6, r5
 8009140:	6822      	ldr	r2, [r4, #0]
 8009142:	f012 0210 	ands.w	r2, r2, #16
 8009146:	d001      	beq.n	800914c <_scanf_float+0x370>
 8009148:	2000      	movs	r0, #0
 800914a:	e68b      	b.n	8008e64 <_scanf_float+0x88>
 800914c:	7032      	strb	r2, [r6, #0]
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009158:	d11c      	bne.n	8009194 <_scanf_float+0x3b8>
 800915a:	9b02      	ldr	r3, [sp, #8]
 800915c:	454b      	cmp	r3, r9
 800915e:	eba3 0209 	sub.w	r2, r3, r9
 8009162:	d123      	bne.n	80091ac <_scanf_float+0x3d0>
 8009164:	9901      	ldr	r1, [sp, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	4640      	mov	r0, r8
 800916a:	f002 fc41 	bl	800b9f0 <_strtod_r>
 800916e:	9b03      	ldr	r3, [sp, #12]
 8009170:	6821      	ldr	r1, [r4, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f011 0f02 	tst.w	r1, #2
 8009178:	ec57 6b10 	vmov	r6, r7, d0
 800917c:	f103 0204 	add.w	r2, r3, #4
 8009180:	d01f      	beq.n	80091c2 <_scanf_float+0x3e6>
 8009182:	9903      	ldr	r1, [sp, #12]
 8009184:	600a      	str	r2, [r1, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	e9c3 6700 	strd	r6, r7, [r3]
 800918c:	68e3      	ldr	r3, [r4, #12]
 800918e:	3301      	adds	r3, #1
 8009190:	60e3      	str	r3, [r4, #12]
 8009192:	e7d9      	b.n	8009148 <_scanf_float+0x36c>
 8009194:	9b04      	ldr	r3, [sp, #16]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d0e4      	beq.n	8009164 <_scanf_float+0x388>
 800919a:	9905      	ldr	r1, [sp, #20]
 800919c:	230a      	movs	r3, #10
 800919e:	3101      	adds	r1, #1
 80091a0:	4640      	mov	r0, r8
 80091a2:	f002 fca5 	bl	800baf0 <_strtol_r>
 80091a6:	9b04      	ldr	r3, [sp, #16]
 80091a8:	9e05      	ldr	r6, [sp, #20]
 80091aa:	1ac2      	subs	r2, r0, r3
 80091ac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80091b0:	429e      	cmp	r6, r3
 80091b2:	bf28      	it	cs
 80091b4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80091b8:	4910      	ldr	r1, [pc, #64]	@ (80091fc <_scanf_float+0x420>)
 80091ba:	4630      	mov	r0, r6
 80091bc:	f000 f8e4 	bl	8009388 <siprintf>
 80091c0:	e7d0      	b.n	8009164 <_scanf_float+0x388>
 80091c2:	f011 0f04 	tst.w	r1, #4
 80091c6:	9903      	ldr	r1, [sp, #12]
 80091c8:	600a      	str	r2, [r1, #0]
 80091ca:	d1dc      	bne.n	8009186 <_scanf_float+0x3aa>
 80091cc:	681d      	ldr	r5, [r3, #0]
 80091ce:	4632      	mov	r2, r6
 80091d0:	463b      	mov	r3, r7
 80091d2:	4630      	mov	r0, r6
 80091d4:	4639      	mov	r1, r7
 80091d6:	f7f7 fcd1 	bl	8000b7c <__aeabi_dcmpun>
 80091da:	b128      	cbz	r0, 80091e8 <_scanf_float+0x40c>
 80091dc:	4808      	ldr	r0, [pc, #32]	@ (8009200 <_scanf_float+0x424>)
 80091de:	f000 f9ff 	bl	80095e0 <nanf>
 80091e2:	ed85 0a00 	vstr	s0, [r5]
 80091e6:	e7d1      	b.n	800918c <_scanf_float+0x3b0>
 80091e8:	4630      	mov	r0, r6
 80091ea:	4639      	mov	r1, r7
 80091ec:	f7f7 fd24 	bl	8000c38 <__aeabi_d2f>
 80091f0:	6028      	str	r0, [r5, #0]
 80091f2:	e7cb      	b.n	800918c <_scanf_float+0x3b0>
 80091f4:	f04f 0900 	mov.w	r9, #0
 80091f8:	e629      	b.n	8008e4e <_scanf_float+0x72>
 80091fa:	bf00      	nop
 80091fc:	0800d5de 	.word	0x0800d5de
 8009200:	0800d990 	.word	0x0800d990

08009204 <std>:
 8009204:	2300      	movs	r3, #0
 8009206:	b510      	push	{r4, lr}
 8009208:	4604      	mov	r4, r0
 800920a:	e9c0 3300 	strd	r3, r3, [r0]
 800920e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009212:	6083      	str	r3, [r0, #8]
 8009214:	8181      	strh	r1, [r0, #12]
 8009216:	6643      	str	r3, [r0, #100]	@ 0x64
 8009218:	81c2      	strh	r2, [r0, #14]
 800921a:	6183      	str	r3, [r0, #24]
 800921c:	4619      	mov	r1, r3
 800921e:	2208      	movs	r2, #8
 8009220:	305c      	adds	r0, #92	@ 0x5c
 8009222:	f000 f940 	bl	80094a6 <memset>
 8009226:	4b0d      	ldr	r3, [pc, #52]	@ (800925c <std+0x58>)
 8009228:	6263      	str	r3, [r4, #36]	@ 0x24
 800922a:	4b0d      	ldr	r3, [pc, #52]	@ (8009260 <std+0x5c>)
 800922c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800922e:	4b0d      	ldr	r3, [pc, #52]	@ (8009264 <std+0x60>)
 8009230:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009232:	4b0d      	ldr	r3, [pc, #52]	@ (8009268 <std+0x64>)
 8009234:	6323      	str	r3, [r4, #48]	@ 0x30
 8009236:	4b0d      	ldr	r3, [pc, #52]	@ (800926c <std+0x68>)
 8009238:	6224      	str	r4, [r4, #32]
 800923a:	429c      	cmp	r4, r3
 800923c:	d006      	beq.n	800924c <std+0x48>
 800923e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009242:	4294      	cmp	r4, r2
 8009244:	d002      	beq.n	800924c <std+0x48>
 8009246:	33d0      	adds	r3, #208	@ 0xd0
 8009248:	429c      	cmp	r4, r3
 800924a:	d105      	bne.n	8009258 <std+0x54>
 800924c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009254:	f000 b9b2 	b.w	80095bc <__retarget_lock_init_recursive>
 8009258:	bd10      	pop	{r4, pc}
 800925a:	bf00      	nop
 800925c:	0800941d 	.word	0x0800941d
 8009260:	08009443 	.word	0x08009443
 8009264:	0800947b 	.word	0x0800947b
 8009268:	0800949f 	.word	0x0800949f
 800926c:	200006d0 	.word	0x200006d0

08009270 <stdio_exit_handler>:
 8009270:	4a02      	ldr	r2, [pc, #8]	@ (800927c <stdio_exit_handler+0xc>)
 8009272:	4903      	ldr	r1, [pc, #12]	@ (8009280 <stdio_exit_handler+0x10>)
 8009274:	4803      	ldr	r0, [pc, #12]	@ (8009284 <stdio_exit_handler+0x14>)
 8009276:	f000 b869 	b.w	800934c <_fwalk_sglue>
 800927a:	bf00      	nop
 800927c:	20000008 	.word	0x20000008
 8009280:	0800c4e1 	.word	0x0800c4e1
 8009284:	20000018 	.word	0x20000018

08009288 <cleanup_stdio>:
 8009288:	6841      	ldr	r1, [r0, #4]
 800928a:	4b0c      	ldr	r3, [pc, #48]	@ (80092bc <cleanup_stdio+0x34>)
 800928c:	4299      	cmp	r1, r3
 800928e:	b510      	push	{r4, lr}
 8009290:	4604      	mov	r4, r0
 8009292:	d001      	beq.n	8009298 <cleanup_stdio+0x10>
 8009294:	f003 f924 	bl	800c4e0 <_fflush_r>
 8009298:	68a1      	ldr	r1, [r4, #8]
 800929a:	4b09      	ldr	r3, [pc, #36]	@ (80092c0 <cleanup_stdio+0x38>)
 800929c:	4299      	cmp	r1, r3
 800929e:	d002      	beq.n	80092a6 <cleanup_stdio+0x1e>
 80092a0:	4620      	mov	r0, r4
 80092a2:	f003 f91d 	bl	800c4e0 <_fflush_r>
 80092a6:	68e1      	ldr	r1, [r4, #12]
 80092a8:	4b06      	ldr	r3, [pc, #24]	@ (80092c4 <cleanup_stdio+0x3c>)
 80092aa:	4299      	cmp	r1, r3
 80092ac:	d004      	beq.n	80092b8 <cleanup_stdio+0x30>
 80092ae:	4620      	mov	r0, r4
 80092b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092b4:	f003 b914 	b.w	800c4e0 <_fflush_r>
 80092b8:	bd10      	pop	{r4, pc}
 80092ba:	bf00      	nop
 80092bc:	200006d0 	.word	0x200006d0
 80092c0:	20000738 	.word	0x20000738
 80092c4:	200007a0 	.word	0x200007a0

080092c8 <global_stdio_init.part.0>:
 80092c8:	b510      	push	{r4, lr}
 80092ca:	4b0b      	ldr	r3, [pc, #44]	@ (80092f8 <global_stdio_init.part.0+0x30>)
 80092cc:	4c0b      	ldr	r4, [pc, #44]	@ (80092fc <global_stdio_init.part.0+0x34>)
 80092ce:	4a0c      	ldr	r2, [pc, #48]	@ (8009300 <global_stdio_init.part.0+0x38>)
 80092d0:	601a      	str	r2, [r3, #0]
 80092d2:	4620      	mov	r0, r4
 80092d4:	2200      	movs	r2, #0
 80092d6:	2104      	movs	r1, #4
 80092d8:	f7ff ff94 	bl	8009204 <std>
 80092dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80092e0:	2201      	movs	r2, #1
 80092e2:	2109      	movs	r1, #9
 80092e4:	f7ff ff8e 	bl	8009204 <std>
 80092e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80092ec:	2202      	movs	r2, #2
 80092ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092f2:	2112      	movs	r1, #18
 80092f4:	f7ff bf86 	b.w	8009204 <std>
 80092f8:	20000808 	.word	0x20000808
 80092fc:	200006d0 	.word	0x200006d0
 8009300:	08009271 	.word	0x08009271

08009304 <__sfp_lock_acquire>:
 8009304:	4801      	ldr	r0, [pc, #4]	@ (800930c <__sfp_lock_acquire+0x8>)
 8009306:	f000 b95a 	b.w	80095be <__retarget_lock_acquire_recursive>
 800930a:	bf00      	nop
 800930c:	20000811 	.word	0x20000811

08009310 <__sfp_lock_release>:
 8009310:	4801      	ldr	r0, [pc, #4]	@ (8009318 <__sfp_lock_release+0x8>)
 8009312:	f000 b955 	b.w	80095c0 <__retarget_lock_release_recursive>
 8009316:	bf00      	nop
 8009318:	20000811 	.word	0x20000811

0800931c <__sinit>:
 800931c:	b510      	push	{r4, lr}
 800931e:	4604      	mov	r4, r0
 8009320:	f7ff fff0 	bl	8009304 <__sfp_lock_acquire>
 8009324:	6a23      	ldr	r3, [r4, #32]
 8009326:	b11b      	cbz	r3, 8009330 <__sinit+0x14>
 8009328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800932c:	f7ff bff0 	b.w	8009310 <__sfp_lock_release>
 8009330:	4b04      	ldr	r3, [pc, #16]	@ (8009344 <__sinit+0x28>)
 8009332:	6223      	str	r3, [r4, #32]
 8009334:	4b04      	ldr	r3, [pc, #16]	@ (8009348 <__sinit+0x2c>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1f5      	bne.n	8009328 <__sinit+0xc>
 800933c:	f7ff ffc4 	bl	80092c8 <global_stdio_init.part.0>
 8009340:	e7f2      	b.n	8009328 <__sinit+0xc>
 8009342:	bf00      	nop
 8009344:	08009289 	.word	0x08009289
 8009348:	20000808 	.word	0x20000808

0800934c <_fwalk_sglue>:
 800934c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009350:	4607      	mov	r7, r0
 8009352:	4688      	mov	r8, r1
 8009354:	4614      	mov	r4, r2
 8009356:	2600      	movs	r6, #0
 8009358:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800935c:	f1b9 0901 	subs.w	r9, r9, #1
 8009360:	d505      	bpl.n	800936e <_fwalk_sglue+0x22>
 8009362:	6824      	ldr	r4, [r4, #0]
 8009364:	2c00      	cmp	r4, #0
 8009366:	d1f7      	bne.n	8009358 <_fwalk_sglue+0xc>
 8009368:	4630      	mov	r0, r6
 800936a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800936e:	89ab      	ldrh	r3, [r5, #12]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d907      	bls.n	8009384 <_fwalk_sglue+0x38>
 8009374:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009378:	3301      	adds	r3, #1
 800937a:	d003      	beq.n	8009384 <_fwalk_sglue+0x38>
 800937c:	4629      	mov	r1, r5
 800937e:	4638      	mov	r0, r7
 8009380:	47c0      	blx	r8
 8009382:	4306      	orrs	r6, r0
 8009384:	3568      	adds	r5, #104	@ 0x68
 8009386:	e7e9      	b.n	800935c <_fwalk_sglue+0x10>

08009388 <siprintf>:
 8009388:	b40e      	push	{r1, r2, r3}
 800938a:	b500      	push	{lr}
 800938c:	b09c      	sub	sp, #112	@ 0x70
 800938e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009390:	9002      	str	r0, [sp, #8]
 8009392:	9006      	str	r0, [sp, #24]
 8009394:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009398:	4809      	ldr	r0, [pc, #36]	@ (80093c0 <siprintf+0x38>)
 800939a:	9107      	str	r1, [sp, #28]
 800939c:	9104      	str	r1, [sp, #16]
 800939e:	4909      	ldr	r1, [pc, #36]	@ (80093c4 <siprintf+0x3c>)
 80093a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80093a4:	9105      	str	r1, [sp, #20]
 80093a6:	6800      	ldr	r0, [r0, #0]
 80093a8:	9301      	str	r3, [sp, #4]
 80093aa:	a902      	add	r1, sp, #8
 80093ac:	f002 fbfe 	bl	800bbac <_svfiprintf_r>
 80093b0:	9b02      	ldr	r3, [sp, #8]
 80093b2:	2200      	movs	r2, #0
 80093b4:	701a      	strb	r2, [r3, #0]
 80093b6:	b01c      	add	sp, #112	@ 0x70
 80093b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093bc:	b003      	add	sp, #12
 80093be:	4770      	bx	lr
 80093c0:	20000014 	.word	0x20000014
 80093c4:	ffff0208 	.word	0xffff0208

080093c8 <siscanf>:
 80093c8:	b40e      	push	{r1, r2, r3}
 80093ca:	b530      	push	{r4, r5, lr}
 80093cc:	b09c      	sub	sp, #112	@ 0x70
 80093ce:	ac1f      	add	r4, sp, #124	@ 0x7c
 80093d0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80093d4:	f854 5b04 	ldr.w	r5, [r4], #4
 80093d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80093dc:	9002      	str	r0, [sp, #8]
 80093de:	9006      	str	r0, [sp, #24]
 80093e0:	f7f6 ff6e 	bl	80002c0 <strlen>
 80093e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009414 <siscanf+0x4c>)
 80093e6:	9003      	str	r0, [sp, #12]
 80093e8:	9007      	str	r0, [sp, #28]
 80093ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093ec:	480a      	ldr	r0, [pc, #40]	@ (8009418 <siscanf+0x50>)
 80093ee:	9401      	str	r4, [sp, #4]
 80093f0:	2300      	movs	r3, #0
 80093f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80093f4:	9314      	str	r3, [sp, #80]	@ 0x50
 80093f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80093fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80093fe:	462a      	mov	r2, r5
 8009400:	4623      	mov	r3, r4
 8009402:	a902      	add	r1, sp, #8
 8009404:	6800      	ldr	r0, [r0, #0]
 8009406:	f002 fd25 	bl	800be54 <__ssvfiscanf_r>
 800940a:	b01c      	add	sp, #112	@ 0x70
 800940c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009410:	b003      	add	sp, #12
 8009412:	4770      	bx	lr
 8009414:	0800943f 	.word	0x0800943f
 8009418:	20000014 	.word	0x20000014

0800941c <__sread>:
 800941c:	b510      	push	{r4, lr}
 800941e:	460c      	mov	r4, r1
 8009420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009424:	f000 f87c 	bl	8009520 <_read_r>
 8009428:	2800      	cmp	r0, #0
 800942a:	bfab      	itete	ge
 800942c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800942e:	89a3      	ldrhlt	r3, [r4, #12]
 8009430:	181b      	addge	r3, r3, r0
 8009432:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009436:	bfac      	ite	ge
 8009438:	6563      	strge	r3, [r4, #84]	@ 0x54
 800943a:	81a3      	strhlt	r3, [r4, #12]
 800943c:	bd10      	pop	{r4, pc}

0800943e <__seofread>:
 800943e:	2000      	movs	r0, #0
 8009440:	4770      	bx	lr

08009442 <__swrite>:
 8009442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009446:	461f      	mov	r7, r3
 8009448:	898b      	ldrh	r3, [r1, #12]
 800944a:	05db      	lsls	r3, r3, #23
 800944c:	4605      	mov	r5, r0
 800944e:	460c      	mov	r4, r1
 8009450:	4616      	mov	r6, r2
 8009452:	d505      	bpl.n	8009460 <__swrite+0x1e>
 8009454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009458:	2302      	movs	r3, #2
 800945a:	2200      	movs	r2, #0
 800945c:	f000 f84e 	bl	80094fc <_lseek_r>
 8009460:	89a3      	ldrh	r3, [r4, #12]
 8009462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009466:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800946a:	81a3      	strh	r3, [r4, #12]
 800946c:	4632      	mov	r2, r6
 800946e:	463b      	mov	r3, r7
 8009470:	4628      	mov	r0, r5
 8009472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009476:	f000 b865 	b.w	8009544 <_write_r>

0800947a <__sseek>:
 800947a:	b510      	push	{r4, lr}
 800947c:	460c      	mov	r4, r1
 800947e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009482:	f000 f83b 	bl	80094fc <_lseek_r>
 8009486:	1c43      	adds	r3, r0, #1
 8009488:	89a3      	ldrh	r3, [r4, #12]
 800948a:	bf15      	itete	ne
 800948c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800948e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009492:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009496:	81a3      	strheq	r3, [r4, #12]
 8009498:	bf18      	it	ne
 800949a:	81a3      	strhne	r3, [r4, #12]
 800949c:	bd10      	pop	{r4, pc}

0800949e <__sclose>:
 800949e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a2:	f000 b81b 	b.w	80094dc <_close_r>

080094a6 <memset>:
 80094a6:	4402      	add	r2, r0
 80094a8:	4603      	mov	r3, r0
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d100      	bne.n	80094b0 <memset+0xa>
 80094ae:	4770      	bx	lr
 80094b0:	f803 1b01 	strb.w	r1, [r3], #1
 80094b4:	e7f9      	b.n	80094aa <memset+0x4>

080094b6 <strcat>:
 80094b6:	b510      	push	{r4, lr}
 80094b8:	4602      	mov	r2, r0
 80094ba:	7814      	ldrb	r4, [r2, #0]
 80094bc:	4613      	mov	r3, r2
 80094be:	3201      	adds	r2, #1
 80094c0:	2c00      	cmp	r4, #0
 80094c2:	d1fa      	bne.n	80094ba <strcat+0x4>
 80094c4:	3b01      	subs	r3, #1
 80094c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094ce:	2a00      	cmp	r2, #0
 80094d0:	d1f9      	bne.n	80094c6 <strcat+0x10>
 80094d2:	bd10      	pop	{r4, pc}

080094d4 <_localeconv_r>:
 80094d4:	4800      	ldr	r0, [pc, #0]	@ (80094d8 <_localeconv_r+0x4>)
 80094d6:	4770      	bx	lr
 80094d8:	20000154 	.word	0x20000154

080094dc <_close_r>:
 80094dc:	b538      	push	{r3, r4, r5, lr}
 80094de:	4d06      	ldr	r5, [pc, #24]	@ (80094f8 <_close_r+0x1c>)
 80094e0:	2300      	movs	r3, #0
 80094e2:	4604      	mov	r4, r0
 80094e4:	4608      	mov	r0, r1
 80094e6:	602b      	str	r3, [r5, #0]
 80094e8:	f7f9 faf0 	bl	8002acc <_close>
 80094ec:	1c43      	adds	r3, r0, #1
 80094ee:	d102      	bne.n	80094f6 <_close_r+0x1a>
 80094f0:	682b      	ldr	r3, [r5, #0]
 80094f2:	b103      	cbz	r3, 80094f6 <_close_r+0x1a>
 80094f4:	6023      	str	r3, [r4, #0]
 80094f6:	bd38      	pop	{r3, r4, r5, pc}
 80094f8:	2000080c 	.word	0x2000080c

080094fc <_lseek_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4d07      	ldr	r5, [pc, #28]	@ (800951c <_lseek_r+0x20>)
 8009500:	4604      	mov	r4, r0
 8009502:	4608      	mov	r0, r1
 8009504:	4611      	mov	r1, r2
 8009506:	2200      	movs	r2, #0
 8009508:	602a      	str	r2, [r5, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	f7f9 fb05 	bl	8002b1a <_lseek>
 8009510:	1c43      	adds	r3, r0, #1
 8009512:	d102      	bne.n	800951a <_lseek_r+0x1e>
 8009514:	682b      	ldr	r3, [r5, #0]
 8009516:	b103      	cbz	r3, 800951a <_lseek_r+0x1e>
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	bd38      	pop	{r3, r4, r5, pc}
 800951c:	2000080c 	.word	0x2000080c

08009520 <_read_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4d07      	ldr	r5, [pc, #28]	@ (8009540 <_read_r+0x20>)
 8009524:	4604      	mov	r4, r0
 8009526:	4608      	mov	r0, r1
 8009528:	4611      	mov	r1, r2
 800952a:	2200      	movs	r2, #0
 800952c:	602a      	str	r2, [r5, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	f7f9 fa93 	bl	8002a5a <_read>
 8009534:	1c43      	adds	r3, r0, #1
 8009536:	d102      	bne.n	800953e <_read_r+0x1e>
 8009538:	682b      	ldr	r3, [r5, #0]
 800953a:	b103      	cbz	r3, 800953e <_read_r+0x1e>
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	bd38      	pop	{r3, r4, r5, pc}
 8009540:	2000080c 	.word	0x2000080c

08009544 <_write_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	4d07      	ldr	r5, [pc, #28]	@ (8009564 <_write_r+0x20>)
 8009548:	4604      	mov	r4, r0
 800954a:	4608      	mov	r0, r1
 800954c:	4611      	mov	r1, r2
 800954e:	2200      	movs	r2, #0
 8009550:	602a      	str	r2, [r5, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	f7f9 fa9e 	bl	8002a94 <_write>
 8009558:	1c43      	adds	r3, r0, #1
 800955a:	d102      	bne.n	8009562 <_write_r+0x1e>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	b103      	cbz	r3, 8009562 <_write_r+0x1e>
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	bd38      	pop	{r3, r4, r5, pc}
 8009564:	2000080c 	.word	0x2000080c

08009568 <__errno>:
 8009568:	4b01      	ldr	r3, [pc, #4]	@ (8009570 <__errno+0x8>)
 800956a:	6818      	ldr	r0, [r3, #0]
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	20000014 	.word	0x20000014

08009574 <__libc_init_array>:
 8009574:	b570      	push	{r4, r5, r6, lr}
 8009576:	4d0d      	ldr	r5, [pc, #52]	@ (80095ac <__libc_init_array+0x38>)
 8009578:	4c0d      	ldr	r4, [pc, #52]	@ (80095b0 <__libc_init_array+0x3c>)
 800957a:	1b64      	subs	r4, r4, r5
 800957c:	10a4      	asrs	r4, r4, #2
 800957e:	2600      	movs	r6, #0
 8009580:	42a6      	cmp	r6, r4
 8009582:	d109      	bne.n	8009598 <__libc_init_array+0x24>
 8009584:	4d0b      	ldr	r5, [pc, #44]	@ (80095b4 <__libc_init_array+0x40>)
 8009586:	4c0c      	ldr	r4, [pc, #48]	@ (80095b8 <__libc_init_array+0x44>)
 8009588:	f003 ff72 	bl	800d470 <_init>
 800958c:	1b64      	subs	r4, r4, r5
 800958e:	10a4      	asrs	r4, r4, #2
 8009590:	2600      	movs	r6, #0
 8009592:	42a6      	cmp	r6, r4
 8009594:	d105      	bne.n	80095a2 <__libc_init_array+0x2e>
 8009596:	bd70      	pop	{r4, r5, r6, pc}
 8009598:	f855 3b04 	ldr.w	r3, [r5], #4
 800959c:	4798      	blx	r3
 800959e:	3601      	adds	r6, #1
 80095a0:	e7ee      	b.n	8009580 <__libc_init_array+0xc>
 80095a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80095a6:	4798      	blx	r3
 80095a8:	3601      	adds	r6, #1
 80095aa:	e7f2      	b.n	8009592 <__libc_init_array+0x1e>
 80095ac:	0800d9fc 	.word	0x0800d9fc
 80095b0:	0800d9fc 	.word	0x0800d9fc
 80095b4:	0800d9fc 	.word	0x0800d9fc
 80095b8:	0800da00 	.word	0x0800da00

080095bc <__retarget_lock_init_recursive>:
 80095bc:	4770      	bx	lr

080095be <__retarget_lock_acquire_recursive>:
 80095be:	4770      	bx	lr

080095c0 <__retarget_lock_release_recursive>:
 80095c0:	4770      	bx	lr

080095c2 <memcpy>:
 80095c2:	440a      	add	r2, r1
 80095c4:	4291      	cmp	r1, r2
 80095c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80095ca:	d100      	bne.n	80095ce <memcpy+0xc>
 80095cc:	4770      	bx	lr
 80095ce:	b510      	push	{r4, lr}
 80095d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095d8:	4291      	cmp	r1, r2
 80095da:	d1f9      	bne.n	80095d0 <memcpy+0xe>
 80095dc:	bd10      	pop	{r4, pc}
	...

080095e0 <nanf>:
 80095e0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80095e8 <nanf+0x8>
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	7fc00000 	.word	0x7fc00000

080095ec <quorem>:
 80095ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f0:	6903      	ldr	r3, [r0, #16]
 80095f2:	690c      	ldr	r4, [r1, #16]
 80095f4:	42a3      	cmp	r3, r4
 80095f6:	4607      	mov	r7, r0
 80095f8:	db7e      	blt.n	80096f8 <quorem+0x10c>
 80095fa:	3c01      	subs	r4, #1
 80095fc:	f101 0814 	add.w	r8, r1, #20
 8009600:	00a3      	lsls	r3, r4, #2
 8009602:	f100 0514 	add.w	r5, r0, #20
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800960c:	9301      	str	r3, [sp, #4]
 800960e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009612:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009616:	3301      	adds	r3, #1
 8009618:	429a      	cmp	r2, r3
 800961a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800961e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009622:	d32e      	bcc.n	8009682 <quorem+0x96>
 8009624:	f04f 0a00 	mov.w	sl, #0
 8009628:	46c4      	mov	ip, r8
 800962a:	46ae      	mov	lr, r5
 800962c:	46d3      	mov	fp, sl
 800962e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009632:	b298      	uxth	r0, r3
 8009634:	fb06 a000 	mla	r0, r6, r0, sl
 8009638:	0c02      	lsrs	r2, r0, #16
 800963a:	0c1b      	lsrs	r3, r3, #16
 800963c:	fb06 2303 	mla	r3, r6, r3, r2
 8009640:	f8de 2000 	ldr.w	r2, [lr]
 8009644:	b280      	uxth	r0, r0
 8009646:	b292      	uxth	r2, r2
 8009648:	1a12      	subs	r2, r2, r0
 800964a:	445a      	add	r2, fp
 800964c:	f8de 0000 	ldr.w	r0, [lr]
 8009650:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009654:	b29b      	uxth	r3, r3
 8009656:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800965a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800965e:	b292      	uxth	r2, r2
 8009660:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009664:	45e1      	cmp	r9, ip
 8009666:	f84e 2b04 	str.w	r2, [lr], #4
 800966a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800966e:	d2de      	bcs.n	800962e <quorem+0x42>
 8009670:	9b00      	ldr	r3, [sp, #0]
 8009672:	58eb      	ldr	r3, [r5, r3]
 8009674:	b92b      	cbnz	r3, 8009682 <quorem+0x96>
 8009676:	9b01      	ldr	r3, [sp, #4]
 8009678:	3b04      	subs	r3, #4
 800967a:	429d      	cmp	r5, r3
 800967c:	461a      	mov	r2, r3
 800967e:	d32f      	bcc.n	80096e0 <quorem+0xf4>
 8009680:	613c      	str	r4, [r7, #16]
 8009682:	4638      	mov	r0, r7
 8009684:	f001 f9c4 	bl	800aa10 <__mcmp>
 8009688:	2800      	cmp	r0, #0
 800968a:	db25      	blt.n	80096d8 <quorem+0xec>
 800968c:	4629      	mov	r1, r5
 800968e:	2000      	movs	r0, #0
 8009690:	f858 2b04 	ldr.w	r2, [r8], #4
 8009694:	f8d1 c000 	ldr.w	ip, [r1]
 8009698:	fa1f fe82 	uxth.w	lr, r2
 800969c:	fa1f f38c 	uxth.w	r3, ip
 80096a0:	eba3 030e 	sub.w	r3, r3, lr
 80096a4:	4403      	add	r3, r0
 80096a6:	0c12      	lsrs	r2, r2, #16
 80096a8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80096ac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096b6:	45c1      	cmp	r9, r8
 80096b8:	f841 3b04 	str.w	r3, [r1], #4
 80096bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80096c0:	d2e6      	bcs.n	8009690 <quorem+0xa4>
 80096c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096ca:	b922      	cbnz	r2, 80096d6 <quorem+0xea>
 80096cc:	3b04      	subs	r3, #4
 80096ce:	429d      	cmp	r5, r3
 80096d0:	461a      	mov	r2, r3
 80096d2:	d30b      	bcc.n	80096ec <quorem+0x100>
 80096d4:	613c      	str	r4, [r7, #16]
 80096d6:	3601      	adds	r6, #1
 80096d8:	4630      	mov	r0, r6
 80096da:	b003      	add	sp, #12
 80096dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096e0:	6812      	ldr	r2, [r2, #0]
 80096e2:	3b04      	subs	r3, #4
 80096e4:	2a00      	cmp	r2, #0
 80096e6:	d1cb      	bne.n	8009680 <quorem+0x94>
 80096e8:	3c01      	subs	r4, #1
 80096ea:	e7c6      	b.n	800967a <quorem+0x8e>
 80096ec:	6812      	ldr	r2, [r2, #0]
 80096ee:	3b04      	subs	r3, #4
 80096f0:	2a00      	cmp	r2, #0
 80096f2:	d1ef      	bne.n	80096d4 <quorem+0xe8>
 80096f4:	3c01      	subs	r4, #1
 80096f6:	e7ea      	b.n	80096ce <quorem+0xe2>
 80096f8:	2000      	movs	r0, #0
 80096fa:	e7ee      	b.n	80096da <quorem+0xee>
 80096fc:	0000      	movs	r0, r0
	...

08009700 <_dtoa_r>:
 8009700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009704:	69c7      	ldr	r7, [r0, #28]
 8009706:	b099      	sub	sp, #100	@ 0x64
 8009708:	ed8d 0b02 	vstr	d0, [sp, #8]
 800970c:	ec55 4b10 	vmov	r4, r5, d0
 8009710:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009712:	9109      	str	r1, [sp, #36]	@ 0x24
 8009714:	4683      	mov	fp, r0
 8009716:	920e      	str	r2, [sp, #56]	@ 0x38
 8009718:	9313      	str	r3, [sp, #76]	@ 0x4c
 800971a:	b97f      	cbnz	r7, 800973c <_dtoa_r+0x3c>
 800971c:	2010      	movs	r0, #16
 800971e:	f000 fdfd 	bl	800a31c <malloc>
 8009722:	4602      	mov	r2, r0
 8009724:	f8cb 001c 	str.w	r0, [fp, #28]
 8009728:	b920      	cbnz	r0, 8009734 <_dtoa_r+0x34>
 800972a:	4ba7      	ldr	r3, [pc, #668]	@ (80099c8 <_dtoa_r+0x2c8>)
 800972c:	21ef      	movs	r1, #239	@ 0xef
 800972e:	48a7      	ldr	r0, [pc, #668]	@ (80099cc <_dtoa_r+0x2cc>)
 8009730:	f002 ffb6 	bl	800c6a0 <__assert_func>
 8009734:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009738:	6007      	str	r7, [r0, #0]
 800973a:	60c7      	str	r7, [r0, #12]
 800973c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009740:	6819      	ldr	r1, [r3, #0]
 8009742:	b159      	cbz	r1, 800975c <_dtoa_r+0x5c>
 8009744:	685a      	ldr	r2, [r3, #4]
 8009746:	604a      	str	r2, [r1, #4]
 8009748:	2301      	movs	r3, #1
 800974a:	4093      	lsls	r3, r2
 800974c:	608b      	str	r3, [r1, #8]
 800974e:	4658      	mov	r0, fp
 8009750:	f000 feda 	bl	800a508 <_Bfree>
 8009754:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009758:	2200      	movs	r2, #0
 800975a:	601a      	str	r2, [r3, #0]
 800975c:	1e2b      	subs	r3, r5, #0
 800975e:	bfb9      	ittee	lt
 8009760:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009764:	9303      	strlt	r3, [sp, #12]
 8009766:	2300      	movge	r3, #0
 8009768:	6033      	strge	r3, [r6, #0]
 800976a:	9f03      	ldr	r7, [sp, #12]
 800976c:	4b98      	ldr	r3, [pc, #608]	@ (80099d0 <_dtoa_r+0x2d0>)
 800976e:	bfbc      	itt	lt
 8009770:	2201      	movlt	r2, #1
 8009772:	6032      	strlt	r2, [r6, #0]
 8009774:	43bb      	bics	r3, r7
 8009776:	d112      	bne.n	800979e <_dtoa_r+0x9e>
 8009778:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800977a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800977e:	6013      	str	r3, [r2, #0]
 8009780:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009784:	4323      	orrs	r3, r4
 8009786:	f000 854d 	beq.w	800a224 <_dtoa_r+0xb24>
 800978a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800978c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80099e4 <_dtoa_r+0x2e4>
 8009790:	2b00      	cmp	r3, #0
 8009792:	f000 854f 	beq.w	800a234 <_dtoa_r+0xb34>
 8009796:	f10a 0303 	add.w	r3, sl, #3
 800979a:	f000 bd49 	b.w	800a230 <_dtoa_r+0xb30>
 800979e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80097a2:	2200      	movs	r2, #0
 80097a4:	ec51 0b17 	vmov	r0, r1, d7
 80097a8:	2300      	movs	r3, #0
 80097aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80097ae:	f7f7 f9b3 	bl	8000b18 <__aeabi_dcmpeq>
 80097b2:	4680      	mov	r8, r0
 80097b4:	b158      	cbz	r0, 80097ce <_dtoa_r+0xce>
 80097b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80097b8:	2301      	movs	r3, #1
 80097ba:	6013      	str	r3, [r2, #0]
 80097bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80097be:	b113      	cbz	r3, 80097c6 <_dtoa_r+0xc6>
 80097c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80097c2:	4b84      	ldr	r3, [pc, #528]	@ (80099d4 <_dtoa_r+0x2d4>)
 80097c4:	6013      	str	r3, [r2, #0]
 80097c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80099e8 <_dtoa_r+0x2e8>
 80097ca:	f000 bd33 	b.w	800a234 <_dtoa_r+0xb34>
 80097ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80097d2:	aa16      	add	r2, sp, #88	@ 0x58
 80097d4:	a917      	add	r1, sp, #92	@ 0x5c
 80097d6:	4658      	mov	r0, fp
 80097d8:	f001 fa3a 	bl	800ac50 <__d2b>
 80097dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80097e0:	4681      	mov	r9, r0
 80097e2:	2e00      	cmp	r6, #0
 80097e4:	d077      	beq.n	80098d6 <_dtoa_r+0x1d6>
 80097e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80097ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80097f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80097fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009800:	4619      	mov	r1, r3
 8009802:	2200      	movs	r2, #0
 8009804:	4b74      	ldr	r3, [pc, #464]	@ (80099d8 <_dtoa_r+0x2d8>)
 8009806:	f7f6 fd67 	bl	80002d8 <__aeabi_dsub>
 800980a:	a369      	add	r3, pc, #420	@ (adr r3, 80099b0 <_dtoa_r+0x2b0>)
 800980c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009810:	f7f6 ff1a 	bl	8000648 <__aeabi_dmul>
 8009814:	a368      	add	r3, pc, #416	@ (adr r3, 80099b8 <_dtoa_r+0x2b8>)
 8009816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981a:	f7f6 fd5f 	bl	80002dc <__adddf3>
 800981e:	4604      	mov	r4, r0
 8009820:	4630      	mov	r0, r6
 8009822:	460d      	mov	r5, r1
 8009824:	f7f6 fea6 	bl	8000574 <__aeabi_i2d>
 8009828:	a365      	add	r3, pc, #404	@ (adr r3, 80099c0 <_dtoa_r+0x2c0>)
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	f7f6 ff0b 	bl	8000648 <__aeabi_dmul>
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	4620      	mov	r0, r4
 8009838:	4629      	mov	r1, r5
 800983a:	f7f6 fd4f 	bl	80002dc <__adddf3>
 800983e:	4604      	mov	r4, r0
 8009840:	460d      	mov	r5, r1
 8009842:	f7f7 f9b1 	bl	8000ba8 <__aeabi_d2iz>
 8009846:	2200      	movs	r2, #0
 8009848:	4607      	mov	r7, r0
 800984a:	2300      	movs	r3, #0
 800984c:	4620      	mov	r0, r4
 800984e:	4629      	mov	r1, r5
 8009850:	f7f7 f96c 	bl	8000b2c <__aeabi_dcmplt>
 8009854:	b140      	cbz	r0, 8009868 <_dtoa_r+0x168>
 8009856:	4638      	mov	r0, r7
 8009858:	f7f6 fe8c 	bl	8000574 <__aeabi_i2d>
 800985c:	4622      	mov	r2, r4
 800985e:	462b      	mov	r3, r5
 8009860:	f7f7 f95a 	bl	8000b18 <__aeabi_dcmpeq>
 8009864:	b900      	cbnz	r0, 8009868 <_dtoa_r+0x168>
 8009866:	3f01      	subs	r7, #1
 8009868:	2f16      	cmp	r7, #22
 800986a:	d851      	bhi.n	8009910 <_dtoa_r+0x210>
 800986c:	4b5b      	ldr	r3, [pc, #364]	@ (80099dc <_dtoa_r+0x2dc>)
 800986e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009876:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800987a:	f7f7 f957 	bl	8000b2c <__aeabi_dcmplt>
 800987e:	2800      	cmp	r0, #0
 8009880:	d048      	beq.n	8009914 <_dtoa_r+0x214>
 8009882:	3f01      	subs	r7, #1
 8009884:	2300      	movs	r3, #0
 8009886:	9312      	str	r3, [sp, #72]	@ 0x48
 8009888:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800988a:	1b9b      	subs	r3, r3, r6
 800988c:	1e5a      	subs	r2, r3, #1
 800988e:	bf44      	itt	mi
 8009890:	f1c3 0801 	rsbmi	r8, r3, #1
 8009894:	2300      	movmi	r3, #0
 8009896:	9208      	str	r2, [sp, #32]
 8009898:	bf54      	ite	pl
 800989a:	f04f 0800 	movpl.w	r8, #0
 800989e:	9308      	strmi	r3, [sp, #32]
 80098a0:	2f00      	cmp	r7, #0
 80098a2:	db39      	blt.n	8009918 <_dtoa_r+0x218>
 80098a4:	9b08      	ldr	r3, [sp, #32]
 80098a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80098a8:	443b      	add	r3, r7
 80098aa:	9308      	str	r3, [sp, #32]
 80098ac:	2300      	movs	r3, #0
 80098ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80098b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098b2:	2b09      	cmp	r3, #9
 80098b4:	d864      	bhi.n	8009980 <_dtoa_r+0x280>
 80098b6:	2b05      	cmp	r3, #5
 80098b8:	bfc4      	itt	gt
 80098ba:	3b04      	subgt	r3, #4
 80098bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80098be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098c0:	f1a3 0302 	sub.w	r3, r3, #2
 80098c4:	bfcc      	ite	gt
 80098c6:	2400      	movgt	r4, #0
 80098c8:	2401      	movle	r4, #1
 80098ca:	2b03      	cmp	r3, #3
 80098cc:	d863      	bhi.n	8009996 <_dtoa_r+0x296>
 80098ce:	e8df f003 	tbb	[pc, r3]
 80098d2:	372a      	.short	0x372a
 80098d4:	5535      	.short	0x5535
 80098d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80098da:	441e      	add	r6, r3
 80098dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80098e0:	2b20      	cmp	r3, #32
 80098e2:	bfc1      	itttt	gt
 80098e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80098e8:	409f      	lslgt	r7, r3
 80098ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80098ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 80098f2:	bfd6      	itet	le
 80098f4:	f1c3 0320 	rsble	r3, r3, #32
 80098f8:	ea47 0003 	orrgt.w	r0, r7, r3
 80098fc:	fa04 f003 	lslle.w	r0, r4, r3
 8009900:	f7f6 fe28 	bl	8000554 <__aeabi_ui2d>
 8009904:	2201      	movs	r2, #1
 8009906:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800990a:	3e01      	subs	r6, #1
 800990c:	9214      	str	r2, [sp, #80]	@ 0x50
 800990e:	e777      	b.n	8009800 <_dtoa_r+0x100>
 8009910:	2301      	movs	r3, #1
 8009912:	e7b8      	b.n	8009886 <_dtoa_r+0x186>
 8009914:	9012      	str	r0, [sp, #72]	@ 0x48
 8009916:	e7b7      	b.n	8009888 <_dtoa_r+0x188>
 8009918:	427b      	negs	r3, r7
 800991a:	930a      	str	r3, [sp, #40]	@ 0x28
 800991c:	2300      	movs	r3, #0
 800991e:	eba8 0807 	sub.w	r8, r8, r7
 8009922:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009924:	e7c4      	b.n	80098b0 <_dtoa_r+0x1b0>
 8009926:	2300      	movs	r3, #0
 8009928:	930b      	str	r3, [sp, #44]	@ 0x2c
 800992a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800992c:	2b00      	cmp	r3, #0
 800992e:	dc35      	bgt.n	800999c <_dtoa_r+0x29c>
 8009930:	2301      	movs	r3, #1
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	9307      	str	r3, [sp, #28]
 8009936:	461a      	mov	r2, r3
 8009938:	920e      	str	r2, [sp, #56]	@ 0x38
 800993a:	e00b      	b.n	8009954 <_dtoa_r+0x254>
 800993c:	2301      	movs	r3, #1
 800993e:	e7f3      	b.n	8009928 <_dtoa_r+0x228>
 8009940:	2300      	movs	r3, #0
 8009942:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009944:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009946:	18fb      	adds	r3, r7, r3
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	3301      	adds	r3, #1
 800994c:	2b01      	cmp	r3, #1
 800994e:	9307      	str	r3, [sp, #28]
 8009950:	bfb8      	it	lt
 8009952:	2301      	movlt	r3, #1
 8009954:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009958:	2100      	movs	r1, #0
 800995a:	2204      	movs	r2, #4
 800995c:	f102 0514 	add.w	r5, r2, #20
 8009960:	429d      	cmp	r5, r3
 8009962:	d91f      	bls.n	80099a4 <_dtoa_r+0x2a4>
 8009964:	6041      	str	r1, [r0, #4]
 8009966:	4658      	mov	r0, fp
 8009968:	f000 fd8e 	bl	800a488 <_Balloc>
 800996c:	4682      	mov	sl, r0
 800996e:	2800      	cmp	r0, #0
 8009970:	d13c      	bne.n	80099ec <_dtoa_r+0x2ec>
 8009972:	4b1b      	ldr	r3, [pc, #108]	@ (80099e0 <_dtoa_r+0x2e0>)
 8009974:	4602      	mov	r2, r0
 8009976:	f240 11af 	movw	r1, #431	@ 0x1af
 800997a:	e6d8      	b.n	800972e <_dtoa_r+0x2e>
 800997c:	2301      	movs	r3, #1
 800997e:	e7e0      	b.n	8009942 <_dtoa_r+0x242>
 8009980:	2401      	movs	r4, #1
 8009982:	2300      	movs	r3, #0
 8009984:	9309      	str	r3, [sp, #36]	@ 0x24
 8009986:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009988:	f04f 33ff 	mov.w	r3, #4294967295
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	9307      	str	r3, [sp, #28]
 8009990:	2200      	movs	r2, #0
 8009992:	2312      	movs	r3, #18
 8009994:	e7d0      	b.n	8009938 <_dtoa_r+0x238>
 8009996:	2301      	movs	r3, #1
 8009998:	930b      	str	r3, [sp, #44]	@ 0x2c
 800999a:	e7f5      	b.n	8009988 <_dtoa_r+0x288>
 800999c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	9307      	str	r3, [sp, #28]
 80099a2:	e7d7      	b.n	8009954 <_dtoa_r+0x254>
 80099a4:	3101      	adds	r1, #1
 80099a6:	0052      	lsls	r2, r2, #1
 80099a8:	e7d8      	b.n	800995c <_dtoa_r+0x25c>
 80099aa:	bf00      	nop
 80099ac:	f3af 8000 	nop.w
 80099b0:	636f4361 	.word	0x636f4361
 80099b4:	3fd287a7 	.word	0x3fd287a7
 80099b8:	8b60c8b3 	.word	0x8b60c8b3
 80099bc:	3fc68a28 	.word	0x3fc68a28
 80099c0:	509f79fb 	.word	0x509f79fb
 80099c4:	3fd34413 	.word	0x3fd34413
 80099c8:	0800d5f0 	.word	0x0800d5f0
 80099cc:	0800d607 	.word	0x0800d607
 80099d0:	7ff00000 	.word	0x7ff00000
 80099d4:	0800d949 	.word	0x0800d949
 80099d8:	3ff80000 	.word	0x3ff80000
 80099dc:	0800d700 	.word	0x0800d700
 80099e0:	0800d65f 	.word	0x0800d65f
 80099e4:	0800d5ec 	.word	0x0800d5ec
 80099e8:	0800d948 	.word	0x0800d948
 80099ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80099f0:	6018      	str	r0, [r3, #0]
 80099f2:	9b07      	ldr	r3, [sp, #28]
 80099f4:	2b0e      	cmp	r3, #14
 80099f6:	f200 80a4 	bhi.w	8009b42 <_dtoa_r+0x442>
 80099fa:	2c00      	cmp	r4, #0
 80099fc:	f000 80a1 	beq.w	8009b42 <_dtoa_r+0x442>
 8009a00:	2f00      	cmp	r7, #0
 8009a02:	dd33      	ble.n	8009a6c <_dtoa_r+0x36c>
 8009a04:	4bad      	ldr	r3, [pc, #692]	@ (8009cbc <_dtoa_r+0x5bc>)
 8009a06:	f007 020f 	and.w	r2, r7, #15
 8009a0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a0e:	ed93 7b00 	vldr	d7, [r3]
 8009a12:	05f8      	lsls	r0, r7, #23
 8009a14:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009a18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009a1c:	d516      	bpl.n	8009a4c <_dtoa_r+0x34c>
 8009a1e:	4ba8      	ldr	r3, [pc, #672]	@ (8009cc0 <_dtoa_r+0x5c0>)
 8009a20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a28:	f7f6 ff38 	bl	800089c <__aeabi_ddiv>
 8009a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a30:	f004 040f 	and.w	r4, r4, #15
 8009a34:	2603      	movs	r6, #3
 8009a36:	4da2      	ldr	r5, [pc, #648]	@ (8009cc0 <_dtoa_r+0x5c0>)
 8009a38:	b954      	cbnz	r4, 8009a50 <_dtoa_r+0x350>
 8009a3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a42:	f7f6 ff2b 	bl	800089c <__aeabi_ddiv>
 8009a46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a4a:	e028      	b.n	8009a9e <_dtoa_r+0x39e>
 8009a4c:	2602      	movs	r6, #2
 8009a4e:	e7f2      	b.n	8009a36 <_dtoa_r+0x336>
 8009a50:	07e1      	lsls	r1, r4, #31
 8009a52:	d508      	bpl.n	8009a66 <_dtoa_r+0x366>
 8009a54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a5c:	f7f6 fdf4 	bl	8000648 <__aeabi_dmul>
 8009a60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a64:	3601      	adds	r6, #1
 8009a66:	1064      	asrs	r4, r4, #1
 8009a68:	3508      	adds	r5, #8
 8009a6a:	e7e5      	b.n	8009a38 <_dtoa_r+0x338>
 8009a6c:	f000 80d2 	beq.w	8009c14 <_dtoa_r+0x514>
 8009a70:	427c      	negs	r4, r7
 8009a72:	4b92      	ldr	r3, [pc, #584]	@ (8009cbc <_dtoa_r+0x5bc>)
 8009a74:	4d92      	ldr	r5, [pc, #584]	@ (8009cc0 <_dtoa_r+0x5c0>)
 8009a76:	f004 020f 	and.w	r2, r4, #15
 8009a7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a86:	f7f6 fddf 	bl	8000648 <__aeabi_dmul>
 8009a8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a8e:	1124      	asrs	r4, r4, #4
 8009a90:	2300      	movs	r3, #0
 8009a92:	2602      	movs	r6, #2
 8009a94:	2c00      	cmp	r4, #0
 8009a96:	f040 80b2 	bne.w	8009bfe <_dtoa_r+0x4fe>
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1d3      	bne.n	8009a46 <_dtoa_r+0x346>
 8009a9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009aa0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f000 80b7 	beq.w	8009c18 <_dtoa_r+0x518>
 8009aaa:	4b86      	ldr	r3, [pc, #536]	@ (8009cc4 <_dtoa_r+0x5c4>)
 8009aac:	2200      	movs	r2, #0
 8009aae:	4620      	mov	r0, r4
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	f7f7 f83b 	bl	8000b2c <__aeabi_dcmplt>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	f000 80ae 	beq.w	8009c18 <_dtoa_r+0x518>
 8009abc:	9b07      	ldr	r3, [sp, #28]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f000 80aa 	beq.w	8009c18 <_dtoa_r+0x518>
 8009ac4:	9b00      	ldr	r3, [sp, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	dd37      	ble.n	8009b3a <_dtoa_r+0x43a>
 8009aca:	1e7b      	subs	r3, r7, #1
 8009acc:	9304      	str	r3, [sp, #16]
 8009ace:	4620      	mov	r0, r4
 8009ad0:	4b7d      	ldr	r3, [pc, #500]	@ (8009cc8 <_dtoa_r+0x5c8>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	f7f6 fdb7 	bl	8000648 <__aeabi_dmul>
 8009ada:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ade:	9c00      	ldr	r4, [sp, #0]
 8009ae0:	3601      	adds	r6, #1
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	f7f6 fd46 	bl	8000574 <__aeabi_i2d>
 8009ae8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009aec:	f7f6 fdac 	bl	8000648 <__aeabi_dmul>
 8009af0:	4b76      	ldr	r3, [pc, #472]	@ (8009ccc <_dtoa_r+0x5cc>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	f7f6 fbf2 	bl	80002dc <__adddf3>
 8009af8:	4605      	mov	r5, r0
 8009afa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009afe:	2c00      	cmp	r4, #0
 8009b00:	f040 808d 	bne.w	8009c1e <_dtoa_r+0x51e>
 8009b04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b08:	4b71      	ldr	r3, [pc, #452]	@ (8009cd0 <_dtoa_r+0x5d0>)
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f7f6 fbe4 	bl	80002d8 <__aeabi_dsub>
 8009b10:	4602      	mov	r2, r0
 8009b12:	460b      	mov	r3, r1
 8009b14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b18:	462a      	mov	r2, r5
 8009b1a:	4633      	mov	r3, r6
 8009b1c:	f7f7 f824 	bl	8000b68 <__aeabi_dcmpgt>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	f040 828b 	bne.w	800a03c <_dtoa_r+0x93c>
 8009b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b2a:	462a      	mov	r2, r5
 8009b2c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009b30:	f7f6 fffc 	bl	8000b2c <__aeabi_dcmplt>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	f040 8128 	bne.w	8009d8a <_dtoa_r+0x68a>
 8009b3a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009b3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009b42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f2c0 815a 	blt.w	8009dfe <_dtoa_r+0x6fe>
 8009b4a:	2f0e      	cmp	r7, #14
 8009b4c:	f300 8157 	bgt.w	8009dfe <_dtoa_r+0x6fe>
 8009b50:	4b5a      	ldr	r3, [pc, #360]	@ (8009cbc <_dtoa_r+0x5bc>)
 8009b52:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b56:	ed93 7b00 	vldr	d7, [r3]
 8009b5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	ed8d 7b00 	vstr	d7, [sp]
 8009b62:	da03      	bge.n	8009b6c <_dtoa_r+0x46c>
 8009b64:	9b07      	ldr	r3, [sp, #28]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	f340 8101 	ble.w	8009d6e <_dtoa_r+0x66e>
 8009b6c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009b70:	4656      	mov	r6, sl
 8009b72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b76:	4620      	mov	r0, r4
 8009b78:	4629      	mov	r1, r5
 8009b7a:	f7f6 fe8f 	bl	800089c <__aeabi_ddiv>
 8009b7e:	f7f7 f813 	bl	8000ba8 <__aeabi_d2iz>
 8009b82:	4680      	mov	r8, r0
 8009b84:	f7f6 fcf6 	bl	8000574 <__aeabi_i2d>
 8009b88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b8c:	f7f6 fd5c 	bl	8000648 <__aeabi_dmul>
 8009b90:	4602      	mov	r2, r0
 8009b92:	460b      	mov	r3, r1
 8009b94:	4620      	mov	r0, r4
 8009b96:	4629      	mov	r1, r5
 8009b98:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009b9c:	f7f6 fb9c 	bl	80002d8 <__aeabi_dsub>
 8009ba0:	f806 4b01 	strb.w	r4, [r6], #1
 8009ba4:	9d07      	ldr	r5, [sp, #28]
 8009ba6:	eba6 040a 	sub.w	r4, r6, sl
 8009baa:	42a5      	cmp	r5, r4
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	f040 8117 	bne.w	8009de2 <_dtoa_r+0x6e2>
 8009bb4:	f7f6 fb92 	bl	80002dc <__adddf3>
 8009bb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bbc:	4604      	mov	r4, r0
 8009bbe:	460d      	mov	r5, r1
 8009bc0:	f7f6 ffd2 	bl	8000b68 <__aeabi_dcmpgt>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	f040 80f9 	bne.w	8009dbc <_dtoa_r+0x6bc>
 8009bca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bce:	4620      	mov	r0, r4
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	f7f6 ffa1 	bl	8000b18 <__aeabi_dcmpeq>
 8009bd6:	b118      	cbz	r0, 8009be0 <_dtoa_r+0x4e0>
 8009bd8:	f018 0f01 	tst.w	r8, #1
 8009bdc:	f040 80ee 	bne.w	8009dbc <_dtoa_r+0x6bc>
 8009be0:	4649      	mov	r1, r9
 8009be2:	4658      	mov	r0, fp
 8009be4:	f000 fc90 	bl	800a508 <_Bfree>
 8009be8:	2300      	movs	r3, #0
 8009bea:	7033      	strb	r3, [r6, #0]
 8009bec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009bee:	3701      	adds	r7, #1
 8009bf0:	601f      	str	r7, [r3, #0]
 8009bf2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f000 831d 	beq.w	800a234 <_dtoa_r+0xb34>
 8009bfa:	601e      	str	r6, [r3, #0]
 8009bfc:	e31a      	b.n	800a234 <_dtoa_r+0xb34>
 8009bfe:	07e2      	lsls	r2, r4, #31
 8009c00:	d505      	bpl.n	8009c0e <_dtoa_r+0x50e>
 8009c02:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c06:	f7f6 fd1f 	bl	8000648 <__aeabi_dmul>
 8009c0a:	3601      	adds	r6, #1
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	1064      	asrs	r4, r4, #1
 8009c10:	3508      	adds	r5, #8
 8009c12:	e73f      	b.n	8009a94 <_dtoa_r+0x394>
 8009c14:	2602      	movs	r6, #2
 8009c16:	e742      	b.n	8009a9e <_dtoa_r+0x39e>
 8009c18:	9c07      	ldr	r4, [sp, #28]
 8009c1a:	9704      	str	r7, [sp, #16]
 8009c1c:	e761      	b.n	8009ae2 <_dtoa_r+0x3e2>
 8009c1e:	4b27      	ldr	r3, [pc, #156]	@ (8009cbc <_dtoa_r+0x5bc>)
 8009c20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c26:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c2a:	4454      	add	r4, sl
 8009c2c:	2900      	cmp	r1, #0
 8009c2e:	d053      	beq.n	8009cd8 <_dtoa_r+0x5d8>
 8009c30:	4928      	ldr	r1, [pc, #160]	@ (8009cd4 <_dtoa_r+0x5d4>)
 8009c32:	2000      	movs	r0, #0
 8009c34:	f7f6 fe32 	bl	800089c <__aeabi_ddiv>
 8009c38:	4633      	mov	r3, r6
 8009c3a:	462a      	mov	r2, r5
 8009c3c:	f7f6 fb4c 	bl	80002d8 <__aeabi_dsub>
 8009c40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c44:	4656      	mov	r6, sl
 8009c46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c4a:	f7f6 ffad 	bl	8000ba8 <__aeabi_d2iz>
 8009c4e:	4605      	mov	r5, r0
 8009c50:	f7f6 fc90 	bl	8000574 <__aeabi_i2d>
 8009c54:	4602      	mov	r2, r0
 8009c56:	460b      	mov	r3, r1
 8009c58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c5c:	f7f6 fb3c 	bl	80002d8 <__aeabi_dsub>
 8009c60:	3530      	adds	r5, #48	@ 0x30
 8009c62:	4602      	mov	r2, r0
 8009c64:	460b      	mov	r3, r1
 8009c66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c6a:	f806 5b01 	strb.w	r5, [r6], #1
 8009c6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c72:	f7f6 ff5b 	bl	8000b2c <__aeabi_dcmplt>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d171      	bne.n	8009d5e <_dtoa_r+0x65e>
 8009c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c7e:	4911      	ldr	r1, [pc, #68]	@ (8009cc4 <_dtoa_r+0x5c4>)
 8009c80:	2000      	movs	r0, #0
 8009c82:	f7f6 fb29 	bl	80002d8 <__aeabi_dsub>
 8009c86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c8a:	f7f6 ff4f 	bl	8000b2c <__aeabi_dcmplt>
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	f040 8095 	bne.w	8009dbe <_dtoa_r+0x6be>
 8009c94:	42a6      	cmp	r6, r4
 8009c96:	f43f af50 	beq.w	8009b3a <_dtoa_r+0x43a>
 8009c9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8009cc8 <_dtoa_r+0x5c8>)
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f7f6 fcd1 	bl	8000648 <__aeabi_dmul>
 8009ca6:	4b08      	ldr	r3, [pc, #32]	@ (8009cc8 <_dtoa_r+0x5c8>)
 8009ca8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009cac:	2200      	movs	r2, #0
 8009cae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cb2:	f7f6 fcc9 	bl	8000648 <__aeabi_dmul>
 8009cb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cba:	e7c4      	b.n	8009c46 <_dtoa_r+0x546>
 8009cbc:	0800d700 	.word	0x0800d700
 8009cc0:	0800d6d8 	.word	0x0800d6d8
 8009cc4:	3ff00000 	.word	0x3ff00000
 8009cc8:	40240000 	.word	0x40240000
 8009ccc:	401c0000 	.word	0x401c0000
 8009cd0:	40140000 	.word	0x40140000
 8009cd4:	3fe00000 	.word	0x3fe00000
 8009cd8:	4631      	mov	r1, r6
 8009cda:	4628      	mov	r0, r5
 8009cdc:	f7f6 fcb4 	bl	8000648 <__aeabi_dmul>
 8009ce0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ce4:	9415      	str	r4, [sp, #84]	@ 0x54
 8009ce6:	4656      	mov	r6, sl
 8009ce8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cec:	f7f6 ff5c 	bl	8000ba8 <__aeabi_d2iz>
 8009cf0:	4605      	mov	r5, r0
 8009cf2:	f7f6 fc3f 	bl	8000574 <__aeabi_i2d>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cfe:	f7f6 faeb 	bl	80002d8 <__aeabi_dsub>
 8009d02:	3530      	adds	r5, #48	@ 0x30
 8009d04:	f806 5b01 	strb.w	r5, [r6], #1
 8009d08:	4602      	mov	r2, r0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	42a6      	cmp	r6, r4
 8009d0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d12:	f04f 0200 	mov.w	r2, #0
 8009d16:	d124      	bne.n	8009d62 <_dtoa_r+0x662>
 8009d18:	4bac      	ldr	r3, [pc, #688]	@ (8009fcc <_dtoa_r+0x8cc>)
 8009d1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009d1e:	f7f6 fadd 	bl	80002dc <__adddf3>
 8009d22:	4602      	mov	r2, r0
 8009d24:	460b      	mov	r3, r1
 8009d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d2a:	f7f6 ff1d 	bl	8000b68 <__aeabi_dcmpgt>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d145      	bne.n	8009dbe <_dtoa_r+0x6be>
 8009d32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009d36:	49a5      	ldr	r1, [pc, #660]	@ (8009fcc <_dtoa_r+0x8cc>)
 8009d38:	2000      	movs	r0, #0
 8009d3a:	f7f6 facd 	bl	80002d8 <__aeabi_dsub>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	460b      	mov	r3, r1
 8009d42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d46:	f7f6 fef1 	bl	8000b2c <__aeabi_dcmplt>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	f43f aef5 	beq.w	8009b3a <_dtoa_r+0x43a>
 8009d50:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009d52:	1e73      	subs	r3, r6, #1
 8009d54:	9315      	str	r3, [sp, #84]	@ 0x54
 8009d56:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d5a:	2b30      	cmp	r3, #48	@ 0x30
 8009d5c:	d0f8      	beq.n	8009d50 <_dtoa_r+0x650>
 8009d5e:	9f04      	ldr	r7, [sp, #16]
 8009d60:	e73e      	b.n	8009be0 <_dtoa_r+0x4e0>
 8009d62:	4b9b      	ldr	r3, [pc, #620]	@ (8009fd0 <_dtoa_r+0x8d0>)
 8009d64:	f7f6 fc70 	bl	8000648 <__aeabi_dmul>
 8009d68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d6c:	e7bc      	b.n	8009ce8 <_dtoa_r+0x5e8>
 8009d6e:	d10c      	bne.n	8009d8a <_dtoa_r+0x68a>
 8009d70:	4b98      	ldr	r3, [pc, #608]	@ (8009fd4 <_dtoa_r+0x8d4>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d78:	f7f6 fc66 	bl	8000648 <__aeabi_dmul>
 8009d7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d80:	f7f6 fee8 	bl	8000b54 <__aeabi_dcmpge>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	f000 8157 	beq.w	800a038 <_dtoa_r+0x938>
 8009d8a:	2400      	movs	r4, #0
 8009d8c:	4625      	mov	r5, r4
 8009d8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d90:	43db      	mvns	r3, r3
 8009d92:	9304      	str	r3, [sp, #16]
 8009d94:	4656      	mov	r6, sl
 8009d96:	2700      	movs	r7, #0
 8009d98:	4621      	mov	r1, r4
 8009d9a:	4658      	mov	r0, fp
 8009d9c:	f000 fbb4 	bl	800a508 <_Bfree>
 8009da0:	2d00      	cmp	r5, #0
 8009da2:	d0dc      	beq.n	8009d5e <_dtoa_r+0x65e>
 8009da4:	b12f      	cbz	r7, 8009db2 <_dtoa_r+0x6b2>
 8009da6:	42af      	cmp	r7, r5
 8009da8:	d003      	beq.n	8009db2 <_dtoa_r+0x6b2>
 8009daa:	4639      	mov	r1, r7
 8009dac:	4658      	mov	r0, fp
 8009dae:	f000 fbab 	bl	800a508 <_Bfree>
 8009db2:	4629      	mov	r1, r5
 8009db4:	4658      	mov	r0, fp
 8009db6:	f000 fba7 	bl	800a508 <_Bfree>
 8009dba:	e7d0      	b.n	8009d5e <_dtoa_r+0x65e>
 8009dbc:	9704      	str	r7, [sp, #16]
 8009dbe:	4633      	mov	r3, r6
 8009dc0:	461e      	mov	r6, r3
 8009dc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dc6:	2a39      	cmp	r2, #57	@ 0x39
 8009dc8:	d107      	bne.n	8009dda <_dtoa_r+0x6da>
 8009dca:	459a      	cmp	sl, r3
 8009dcc:	d1f8      	bne.n	8009dc0 <_dtoa_r+0x6c0>
 8009dce:	9a04      	ldr	r2, [sp, #16]
 8009dd0:	3201      	adds	r2, #1
 8009dd2:	9204      	str	r2, [sp, #16]
 8009dd4:	2230      	movs	r2, #48	@ 0x30
 8009dd6:	f88a 2000 	strb.w	r2, [sl]
 8009dda:	781a      	ldrb	r2, [r3, #0]
 8009ddc:	3201      	adds	r2, #1
 8009dde:	701a      	strb	r2, [r3, #0]
 8009de0:	e7bd      	b.n	8009d5e <_dtoa_r+0x65e>
 8009de2:	4b7b      	ldr	r3, [pc, #492]	@ (8009fd0 <_dtoa_r+0x8d0>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	f7f6 fc2f 	bl	8000648 <__aeabi_dmul>
 8009dea:	2200      	movs	r2, #0
 8009dec:	2300      	movs	r3, #0
 8009dee:	4604      	mov	r4, r0
 8009df0:	460d      	mov	r5, r1
 8009df2:	f7f6 fe91 	bl	8000b18 <__aeabi_dcmpeq>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	f43f aebb 	beq.w	8009b72 <_dtoa_r+0x472>
 8009dfc:	e6f0      	b.n	8009be0 <_dtoa_r+0x4e0>
 8009dfe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009e00:	2a00      	cmp	r2, #0
 8009e02:	f000 80db 	beq.w	8009fbc <_dtoa_r+0x8bc>
 8009e06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e08:	2a01      	cmp	r2, #1
 8009e0a:	f300 80bf 	bgt.w	8009f8c <_dtoa_r+0x88c>
 8009e0e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009e10:	2a00      	cmp	r2, #0
 8009e12:	f000 80b7 	beq.w	8009f84 <_dtoa_r+0x884>
 8009e16:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009e1a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009e1c:	4646      	mov	r6, r8
 8009e1e:	9a08      	ldr	r2, [sp, #32]
 8009e20:	2101      	movs	r1, #1
 8009e22:	441a      	add	r2, r3
 8009e24:	4658      	mov	r0, fp
 8009e26:	4498      	add	r8, r3
 8009e28:	9208      	str	r2, [sp, #32]
 8009e2a:	f000 fc6b 	bl	800a704 <__i2b>
 8009e2e:	4605      	mov	r5, r0
 8009e30:	b15e      	cbz	r6, 8009e4a <_dtoa_r+0x74a>
 8009e32:	9b08      	ldr	r3, [sp, #32]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	dd08      	ble.n	8009e4a <_dtoa_r+0x74a>
 8009e38:	42b3      	cmp	r3, r6
 8009e3a:	9a08      	ldr	r2, [sp, #32]
 8009e3c:	bfa8      	it	ge
 8009e3e:	4633      	movge	r3, r6
 8009e40:	eba8 0803 	sub.w	r8, r8, r3
 8009e44:	1af6      	subs	r6, r6, r3
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	9308      	str	r3, [sp, #32]
 8009e4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e4c:	b1f3      	cbz	r3, 8009e8c <_dtoa_r+0x78c>
 8009e4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f000 80b7 	beq.w	8009fc4 <_dtoa_r+0x8c4>
 8009e56:	b18c      	cbz	r4, 8009e7c <_dtoa_r+0x77c>
 8009e58:	4629      	mov	r1, r5
 8009e5a:	4622      	mov	r2, r4
 8009e5c:	4658      	mov	r0, fp
 8009e5e:	f000 fd11 	bl	800a884 <__pow5mult>
 8009e62:	464a      	mov	r2, r9
 8009e64:	4601      	mov	r1, r0
 8009e66:	4605      	mov	r5, r0
 8009e68:	4658      	mov	r0, fp
 8009e6a:	f000 fc61 	bl	800a730 <__multiply>
 8009e6e:	4649      	mov	r1, r9
 8009e70:	9004      	str	r0, [sp, #16]
 8009e72:	4658      	mov	r0, fp
 8009e74:	f000 fb48 	bl	800a508 <_Bfree>
 8009e78:	9b04      	ldr	r3, [sp, #16]
 8009e7a:	4699      	mov	r9, r3
 8009e7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e7e:	1b1a      	subs	r2, r3, r4
 8009e80:	d004      	beq.n	8009e8c <_dtoa_r+0x78c>
 8009e82:	4649      	mov	r1, r9
 8009e84:	4658      	mov	r0, fp
 8009e86:	f000 fcfd 	bl	800a884 <__pow5mult>
 8009e8a:	4681      	mov	r9, r0
 8009e8c:	2101      	movs	r1, #1
 8009e8e:	4658      	mov	r0, fp
 8009e90:	f000 fc38 	bl	800a704 <__i2b>
 8009e94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e96:	4604      	mov	r4, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f000 81cf 	beq.w	800a23c <_dtoa_r+0xb3c>
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	4601      	mov	r1, r0
 8009ea2:	4658      	mov	r0, fp
 8009ea4:	f000 fcee 	bl	800a884 <__pow5mult>
 8009ea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	4604      	mov	r4, r0
 8009eae:	f300 8095 	bgt.w	8009fdc <_dtoa_r+0x8dc>
 8009eb2:	9b02      	ldr	r3, [sp, #8]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f040 8087 	bne.w	8009fc8 <_dtoa_r+0x8c8>
 8009eba:	9b03      	ldr	r3, [sp, #12]
 8009ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f040 8089 	bne.w	8009fd8 <_dtoa_r+0x8d8>
 8009ec6:	9b03      	ldr	r3, [sp, #12]
 8009ec8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ecc:	0d1b      	lsrs	r3, r3, #20
 8009ece:	051b      	lsls	r3, r3, #20
 8009ed0:	b12b      	cbz	r3, 8009ede <_dtoa_r+0x7de>
 8009ed2:	9b08      	ldr	r3, [sp, #32]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	9308      	str	r3, [sp, #32]
 8009ed8:	f108 0801 	add.w	r8, r8, #1
 8009edc:	2301      	movs	r3, #1
 8009ede:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ee0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	f000 81b0 	beq.w	800a248 <_dtoa_r+0xb48>
 8009ee8:	6923      	ldr	r3, [r4, #16]
 8009eea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009eee:	6918      	ldr	r0, [r3, #16]
 8009ef0:	f000 fbbc 	bl	800a66c <__hi0bits>
 8009ef4:	f1c0 0020 	rsb	r0, r0, #32
 8009ef8:	9b08      	ldr	r3, [sp, #32]
 8009efa:	4418      	add	r0, r3
 8009efc:	f010 001f 	ands.w	r0, r0, #31
 8009f00:	d077      	beq.n	8009ff2 <_dtoa_r+0x8f2>
 8009f02:	f1c0 0320 	rsb	r3, r0, #32
 8009f06:	2b04      	cmp	r3, #4
 8009f08:	dd6b      	ble.n	8009fe2 <_dtoa_r+0x8e2>
 8009f0a:	9b08      	ldr	r3, [sp, #32]
 8009f0c:	f1c0 001c 	rsb	r0, r0, #28
 8009f10:	4403      	add	r3, r0
 8009f12:	4480      	add	r8, r0
 8009f14:	4406      	add	r6, r0
 8009f16:	9308      	str	r3, [sp, #32]
 8009f18:	f1b8 0f00 	cmp.w	r8, #0
 8009f1c:	dd05      	ble.n	8009f2a <_dtoa_r+0x82a>
 8009f1e:	4649      	mov	r1, r9
 8009f20:	4642      	mov	r2, r8
 8009f22:	4658      	mov	r0, fp
 8009f24:	f000 fd08 	bl	800a938 <__lshift>
 8009f28:	4681      	mov	r9, r0
 8009f2a:	9b08      	ldr	r3, [sp, #32]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	dd05      	ble.n	8009f3c <_dtoa_r+0x83c>
 8009f30:	4621      	mov	r1, r4
 8009f32:	461a      	mov	r2, r3
 8009f34:	4658      	mov	r0, fp
 8009f36:	f000 fcff 	bl	800a938 <__lshift>
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d059      	beq.n	8009ff6 <_dtoa_r+0x8f6>
 8009f42:	4621      	mov	r1, r4
 8009f44:	4648      	mov	r0, r9
 8009f46:	f000 fd63 	bl	800aa10 <__mcmp>
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	da53      	bge.n	8009ff6 <_dtoa_r+0x8f6>
 8009f4e:	1e7b      	subs	r3, r7, #1
 8009f50:	9304      	str	r3, [sp, #16]
 8009f52:	4649      	mov	r1, r9
 8009f54:	2300      	movs	r3, #0
 8009f56:	220a      	movs	r2, #10
 8009f58:	4658      	mov	r0, fp
 8009f5a:	f000 faf7 	bl	800a54c <__multadd>
 8009f5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f60:	4681      	mov	r9, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f000 8172 	beq.w	800a24c <_dtoa_r+0xb4c>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	4629      	mov	r1, r5
 8009f6c:	220a      	movs	r2, #10
 8009f6e:	4658      	mov	r0, fp
 8009f70:	f000 faec 	bl	800a54c <__multadd>
 8009f74:	9b00      	ldr	r3, [sp, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	4605      	mov	r5, r0
 8009f7a:	dc67      	bgt.n	800a04c <_dtoa_r+0x94c>
 8009f7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	dc41      	bgt.n	800a006 <_dtoa_r+0x906>
 8009f82:	e063      	b.n	800a04c <_dtoa_r+0x94c>
 8009f84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009f86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009f8a:	e746      	b.n	8009e1a <_dtoa_r+0x71a>
 8009f8c:	9b07      	ldr	r3, [sp, #28]
 8009f8e:	1e5c      	subs	r4, r3, #1
 8009f90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f92:	42a3      	cmp	r3, r4
 8009f94:	bfbf      	itttt	lt
 8009f96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009f98:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009f9a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009f9c:	1ae3      	sublt	r3, r4, r3
 8009f9e:	bfb4      	ite	lt
 8009fa0:	18d2      	addlt	r2, r2, r3
 8009fa2:	1b1c      	subge	r4, r3, r4
 8009fa4:	9b07      	ldr	r3, [sp, #28]
 8009fa6:	bfbc      	itt	lt
 8009fa8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009faa:	2400      	movlt	r4, #0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	bfb5      	itete	lt
 8009fb0:	eba8 0603 	sublt.w	r6, r8, r3
 8009fb4:	9b07      	ldrge	r3, [sp, #28]
 8009fb6:	2300      	movlt	r3, #0
 8009fb8:	4646      	movge	r6, r8
 8009fba:	e730      	b.n	8009e1e <_dtoa_r+0x71e>
 8009fbc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009fbe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009fc0:	4646      	mov	r6, r8
 8009fc2:	e735      	b.n	8009e30 <_dtoa_r+0x730>
 8009fc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009fc6:	e75c      	b.n	8009e82 <_dtoa_r+0x782>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	e788      	b.n	8009ede <_dtoa_r+0x7de>
 8009fcc:	3fe00000 	.word	0x3fe00000
 8009fd0:	40240000 	.word	0x40240000
 8009fd4:	40140000 	.word	0x40140000
 8009fd8:	9b02      	ldr	r3, [sp, #8]
 8009fda:	e780      	b.n	8009ede <_dtoa_r+0x7de>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fe0:	e782      	b.n	8009ee8 <_dtoa_r+0x7e8>
 8009fe2:	d099      	beq.n	8009f18 <_dtoa_r+0x818>
 8009fe4:	9a08      	ldr	r2, [sp, #32]
 8009fe6:	331c      	adds	r3, #28
 8009fe8:	441a      	add	r2, r3
 8009fea:	4498      	add	r8, r3
 8009fec:	441e      	add	r6, r3
 8009fee:	9208      	str	r2, [sp, #32]
 8009ff0:	e792      	b.n	8009f18 <_dtoa_r+0x818>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	e7f6      	b.n	8009fe4 <_dtoa_r+0x8e4>
 8009ff6:	9b07      	ldr	r3, [sp, #28]
 8009ff8:	9704      	str	r7, [sp, #16]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	dc20      	bgt.n	800a040 <_dtoa_r+0x940>
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a002:	2b02      	cmp	r3, #2
 800a004:	dd1e      	ble.n	800a044 <_dtoa_r+0x944>
 800a006:	9b00      	ldr	r3, [sp, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f47f aec0 	bne.w	8009d8e <_dtoa_r+0x68e>
 800a00e:	4621      	mov	r1, r4
 800a010:	2205      	movs	r2, #5
 800a012:	4658      	mov	r0, fp
 800a014:	f000 fa9a 	bl	800a54c <__multadd>
 800a018:	4601      	mov	r1, r0
 800a01a:	4604      	mov	r4, r0
 800a01c:	4648      	mov	r0, r9
 800a01e:	f000 fcf7 	bl	800aa10 <__mcmp>
 800a022:	2800      	cmp	r0, #0
 800a024:	f77f aeb3 	ble.w	8009d8e <_dtoa_r+0x68e>
 800a028:	4656      	mov	r6, sl
 800a02a:	2331      	movs	r3, #49	@ 0x31
 800a02c:	f806 3b01 	strb.w	r3, [r6], #1
 800a030:	9b04      	ldr	r3, [sp, #16]
 800a032:	3301      	adds	r3, #1
 800a034:	9304      	str	r3, [sp, #16]
 800a036:	e6ae      	b.n	8009d96 <_dtoa_r+0x696>
 800a038:	9c07      	ldr	r4, [sp, #28]
 800a03a:	9704      	str	r7, [sp, #16]
 800a03c:	4625      	mov	r5, r4
 800a03e:	e7f3      	b.n	800a028 <_dtoa_r+0x928>
 800a040:	9b07      	ldr	r3, [sp, #28]
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a046:	2b00      	cmp	r3, #0
 800a048:	f000 8104 	beq.w	800a254 <_dtoa_r+0xb54>
 800a04c:	2e00      	cmp	r6, #0
 800a04e:	dd05      	ble.n	800a05c <_dtoa_r+0x95c>
 800a050:	4629      	mov	r1, r5
 800a052:	4632      	mov	r2, r6
 800a054:	4658      	mov	r0, fp
 800a056:	f000 fc6f 	bl	800a938 <__lshift>
 800a05a:	4605      	mov	r5, r0
 800a05c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d05a      	beq.n	800a118 <_dtoa_r+0xa18>
 800a062:	6869      	ldr	r1, [r5, #4]
 800a064:	4658      	mov	r0, fp
 800a066:	f000 fa0f 	bl	800a488 <_Balloc>
 800a06a:	4606      	mov	r6, r0
 800a06c:	b928      	cbnz	r0, 800a07a <_dtoa_r+0x97a>
 800a06e:	4b84      	ldr	r3, [pc, #528]	@ (800a280 <_dtoa_r+0xb80>)
 800a070:	4602      	mov	r2, r0
 800a072:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a076:	f7ff bb5a 	b.w	800972e <_dtoa_r+0x2e>
 800a07a:	692a      	ldr	r2, [r5, #16]
 800a07c:	3202      	adds	r2, #2
 800a07e:	0092      	lsls	r2, r2, #2
 800a080:	f105 010c 	add.w	r1, r5, #12
 800a084:	300c      	adds	r0, #12
 800a086:	f7ff fa9c 	bl	80095c2 <memcpy>
 800a08a:	2201      	movs	r2, #1
 800a08c:	4631      	mov	r1, r6
 800a08e:	4658      	mov	r0, fp
 800a090:	f000 fc52 	bl	800a938 <__lshift>
 800a094:	f10a 0301 	add.w	r3, sl, #1
 800a098:	9307      	str	r3, [sp, #28]
 800a09a:	9b00      	ldr	r3, [sp, #0]
 800a09c:	4453      	add	r3, sl
 800a09e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0a0:	9b02      	ldr	r3, [sp, #8]
 800a0a2:	f003 0301 	and.w	r3, r3, #1
 800a0a6:	462f      	mov	r7, r5
 800a0a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0aa:	4605      	mov	r5, r0
 800a0ac:	9b07      	ldr	r3, [sp, #28]
 800a0ae:	4621      	mov	r1, r4
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	4648      	mov	r0, r9
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	f7ff fa99 	bl	80095ec <quorem>
 800a0ba:	4639      	mov	r1, r7
 800a0bc:	9002      	str	r0, [sp, #8]
 800a0be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a0c2:	4648      	mov	r0, r9
 800a0c4:	f000 fca4 	bl	800aa10 <__mcmp>
 800a0c8:	462a      	mov	r2, r5
 800a0ca:	9008      	str	r0, [sp, #32]
 800a0cc:	4621      	mov	r1, r4
 800a0ce:	4658      	mov	r0, fp
 800a0d0:	f000 fcba 	bl	800aa48 <__mdiff>
 800a0d4:	68c2      	ldr	r2, [r0, #12]
 800a0d6:	4606      	mov	r6, r0
 800a0d8:	bb02      	cbnz	r2, 800a11c <_dtoa_r+0xa1c>
 800a0da:	4601      	mov	r1, r0
 800a0dc:	4648      	mov	r0, r9
 800a0de:	f000 fc97 	bl	800aa10 <__mcmp>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	4631      	mov	r1, r6
 800a0e6:	4658      	mov	r0, fp
 800a0e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a0ea:	f000 fa0d 	bl	800a508 <_Bfree>
 800a0ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0f2:	9e07      	ldr	r6, [sp, #28]
 800a0f4:	ea43 0102 	orr.w	r1, r3, r2
 800a0f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0fa:	4319      	orrs	r1, r3
 800a0fc:	d110      	bne.n	800a120 <_dtoa_r+0xa20>
 800a0fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a102:	d029      	beq.n	800a158 <_dtoa_r+0xa58>
 800a104:	9b08      	ldr	r3, [sp, #32]
 800a106:	2b00      	cmp	r3, #0
 800a108:	dd02      	ble.n	800a110 <_dtoa_r+0xa10>
 800a10a:	9b02      	ldr	r3, [sp, #8]
 800a10c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a110:	9b00      	ldr	r3, [sp, #0]
 800a112:	f883 8000 	strb.w	r8, [r3]
 800a116:	e63f      	b.n	8009d98 <_dtoa_r+0x698>
 800a118:	4628      	mov	r0, r5
 800a11a:	e7bb      	b.n	800a094 <_dtoa_r+0x994>
 800a11c:	2201      	movs	r2, #1
 800a11e:	e7e1      	b.n	800a0e4 <_dtoa_r+0x9e4>
 800a120:	9b08      	ldr	r3, [sp, #32]
 800a122:	2b00      	cmp	r3, #0
 800a124:	db04      	blt.n	800a130 <_dtoa_r+0xa30>
 800a126:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a128:	430b      	orrs	r3, r1
 800a12a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a12c:	430b      	orrs	r3, r1
 800a12e:	d120      	bne.n	800a172 <_dtoa_r+0xa72>
 800a130:	2a00      	cmp	r2, #0
 800a132:	dded      	ble.n	800a110 <_dtoa_r+0xa10>
 800a134:	4649      	mov	r1, r9
 800a136:	2201      	movs	r2, #1
 800a138:	4658      	mov	r0, fp
 800a13a:	f000 fbfd 	bl	800a938 <__lshift>
 800a13e:	4621      	mov	r1, r4
 800a140:	4681      	mov	r9, r0
 800a142:	f000 fc65 	bl	800aa10 <__mcmp>
 800a146:	2800      	cmp	r0, #0
 800a148:	dc03      	bgt.n	800a152 <_dtoa_r+0xa52>
 800a14a:	d1e1      	bne.n	800a110 <_dtoa_r+0xa10>
 800a14c:	f018 0f01 	tst.w	r8, #1
 800a150:	d0de      	beq.n	800a110 <_dtoa_r+0xa10>
 800a152:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a156:	d1d8      	bne.n	800a10a <_dtoa_r+0xa0a>
 800a158:	9a00      	ldr	r2, [sp, #0]
 800a15a:	2339      	movs	r3, #57	@ 0x39
 800a15c:	7013      	strb	r3, [r2, #0]
 800a15e:	4633      	mov	r3, r6
 800a160:	461e      	mov	r6, r3
 800a162:	3b01      	subs	r3, #1
 800a164:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a168:	2a39      	cmp	r2, #57	@ 0x39
 800a16a:	d052      	beq.n	800a212 <_dtoa_r+0xb12>
 800a16c:	3201      	adds	r2, #1
 800a16e:	701a      	strb	r2, [r3, #0]
 800a170:	e612      	b.n	8009d98 <_dtoa_r+0x698>
 800a172:	2a00      	cmp	r2, #0
 800a174:	dd07      	ble.n	800a186 <_dtoa_r+0xa86>
 800a176:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a17a:	d0ed      	beq.n	800a158 <_dtoa_r+0xa58>
 800a17c:	9a00      	ldr	r2, [sp, #0]
 800a17e:	f108 0301 	add.w	r3, r8, #1
 800a182:	7013      	strb	r3, [r2, #0]
 800a184:	e608      	b.n	8009d98 <_dtoa_r+0x698>
 800a186:	9b07      	ldr	r3, [sp, #28]
 800a188:	9a07      	ldr	r2, [sp, #28]
 800a18a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a18e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a190:	4293      	cmp	r3, r2
 800a192:	d028      	beq.n	800a1e6 <_dtoa_r+0xae6>
 800a194:	4649      	mov	r1, r9
 800a196:	2300      	movs	r3, #0
 800a198:	220a      	movs	r2, #10
 800a19a:	4658      	mov	r0, fp
 800a19c:	f000 f9d6 	bl	800a54c <__multadd>
 800a1a0:	42af      	cmp	r7, r5
 800a1a2:	4681      	mov	r9, r0
 800a1a4:	f04f 0300 	mov.w	r3, #0
 800a1a8:	f04f 020a 	mov.w	r2, #10
 800a1ac:	4639      	mov	r1, r7
 800a1ae:	4658      	mov	r0, fp
 800a1b0:	d107      	bne.n	800a1c2 <_dtoa_r+0xac2>
 800a1b2:	f000 f9cb 	bl	800a54c <__multadd>
 800a1b6:	4607      	mov	r7, r0
 800a1b8:	4605      	mov	r5, r0
 800a1ba:	9b07      	ldr	r3, [sp, #28]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	9307      	str	r3, [sp, #28]
 800a1c0:	e774      	b.n	800a0ac <_dtoa_r+0x9ac>
 800a1c2:	f000 f9c3 	bl	800a54c <__multadd>
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	4607      	mov	r7, r0
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	220a      	movs	r2, #10
 800a1ce:	4658      	mov	r0, fp
 800a1d0:	f000 f9bc 	bl	800a54c <__multadd>
 800a1d4:	4605      	mov	r5, r0
 800a1d6:	e7f0      	b.n	800a1ba <_dtoa_r+0xaba>
 800a1d8:	9b00      	ldr	r3, [sp, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	bfcc      	ite	gt
 800a1de:	461e      	movgt	r6, r3
 800a1e0:	2601      	movle	r6, #1
 800a1e2:	4456      	add	r6, sl
 800a1e4:	2700      	movs	r7, #0
 800a1e6:	4649      	mov	r1, r9
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	4658      	mov	r0, fp
 800a1ec:	f000 fba4 	bl	800a938 <__lshift>
 800a1f0:	4621      	mov	r1, r4
 800a1f2:	4681      	mov	r9, r0
 800a1f4:	f000 fc0c 	bl	800aa10 <__mcmp>
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	dcb0      	bgt.n	800a15e <_dtoa_r+0xa5e>
 800a1fc:	d102      	bne.n	800a204 <_dtoa_r+0xb04>
 800a1fe:	f018 0f01 	tst.w	r8, #1
 800a202:	d1ac      	bne.n	800a15e <_dtoa_r+0xa5e>
 800a204:	4633      	mov	r3, r6
 800a206:	461e      	mov	r6, r3
 800a208:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a20c:	2a30      	cmp	r2, #48	@ 0x30
 800a20e:	d0fa      	beq.n	800a206 <_dtoa_r+0xb06>
 800a210:	e5c2      	b.n	8009d98 <_dtoa_r+0x698>
 800a212:	459a      	cmp	sl, r3
 800a214:	d1a4      	bne.n	800a160 <_dtoa_r+0xa60>
 800a216:	9b04      	ldr	r3, [sp, #16]
 800a218:	3301      	adds	r3, #1
 800a21a:	9304      	str	r3, [sp, #16]
 800a21c:	2331      	movs	r3, #49	@ 0x31
 800a21e:	f88a 3000 	strb.w	r3, [sl]
 800a222:	e5b9      	b.n	8009d98 <_dtoa_r+0x698>
 800a224:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a226:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a284 <_dtoa_r+0xb84>
 800a22a:	b11b      	cbz	r3, 800a234 <_dtoa_r+0xb34>
 800a22c:	f10a 0308 	add.w	r3, sl, #8
 800a230:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a232:	6013      	str	r3, [r2, #0]
 800a234:	4650      	mov	r0, sl
 800a236:	b019      	add	sp, #100	@ 0x64
 800a238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a23e:	2b01      	cmp	r3, #1
 800a240:	f77f ae37 	ble.w	8009eb2 <_dtoa_r+0x7b2>
 800a244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a246:	930a      	str	r3, [sp, #40]	@ 0x28
 800a248:	2001      	movs	r0, #1
 800a24a:	e655      	b.n	8009ef8 <_dtoa_r+0x7f8>
 800a24c:	9b00      	ldr	r3, [sp, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	f77f aed6 	ble.w	800a000 <_dtoa_r+0x900>
 800a254:	4656      	mov	r6, sl
 800a256:	4621      	mov	r1, r4
 800a258:	4648      	mov	r0, r9
 800a25a:	f7ff f9c7 	bl	80095ec <quorem>
 800a25e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a262:	f806 8b01 	strb.w	r8, [r6], #1
 800a266:	9b00      	ldr	r3, [sp, #0]
 800a268:	eba6 020a 	sub.w	r2, r6, sl
 800a26c:	4293      	cmp	r3, r2
 800a26e:	ddb3      	ble.n	800a1d8 <_dtoa_r+0xad8>
 800a270:	4649      	mov	r1, r9
 800a272:	2300      	movs	r3, #0
 800a274:	220a      	movs	r2, #10
 800a276:	4658      	mov	r0, fp
 800a278:	f000 f968 	bl	800a54c <__multadd>
 800a27c:	4681      	mov	r9, r0
 800a27e:	e7ea      	b.n	800a256 <_dtoa_r+0xb56>
 800a280:	0800d65f 	.word	0x0800d65f
 800a284:	0800d5e3 	.word	0x0800d5e3

0800a288 <_free_r>:
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	4605      	mov	r5, r0
 800a28c:	2900      	cmp	r1, #0
 800a28e:	d041      	beq.n	800a314 <_free_r+0x8c>
 800a290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a294:	1f0c      	subs	r4, r1, #4
 800a296:	2b00      	cmp	r3, #0
 800a298:	bfb8      	it	lt
 800a29a:	18e4      	addlt	r4, r4, r3
 800a29c:	f000 f8e8 	bl	800a470 <__malloc_lock>
 800a2a0:	4a1d      	ldr	r2, [pc, #116]	@ (800a318 <_free_r+0x90>)
 800a2a2:	6813      	ldr	r3, [r2, #0]
 800a2a4:	b933      	cbnz	r3, 800a2b4 <_free_r+0x2c>
 800a2a6:	6063      	str	r3, [r4, #4]
 800a2a8:	6014      	str	r4, [r2, #0]
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2b0:	f000 b8e4 	b.w	800a47c <__malloc_unlock>
 800a2b4:	42a3      	cmp	r3, r4
 800a2b6:	d908      	bls.n	800a2ca <_free_r+0x42>
 800a2b8:	6820      	ldr	r0, [r4, #0]
 800a2ba:	1821      	adds	r1, r4, r0
 800a2bc:	428b      	cmp	r3, r1
 800a2be:	bf01      	itttt	eq
 800a2c0:	6819      	ldreq	r1, [r3, #0]
 800a2c2:	685b      	ldreq	r3, [r3, #4]
 800a2c4:	1809      	addeq	r1, r1, r0
 800a2c6:	6021      	streq	r1, [r4, #0]
 800a2c8:	e7ed      	b.n	800a2a6 <_free_r+0x1e>
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	b10b      	cbz	r3, 800a2d4 <_free_r+0x4c>
 800a2d0:	42a3      	cmp	r3, r4
 800a2d2:	d9fa      	bls.n	800a2ca <_free_r+0x42>
 800a2d4:	6811      	ldr	r1, [r2, #0]
 800a2d6:	1850      	adds	r0, r2, r1
 800a2d8:	42a0      	cmp	r0, r4
 800a2da:	d10b      	bne.n	800a2f4 <_free_r+0x6c>
 800a2dc:	6820      	ldr	r0, [r4, #0]
 800a2de:	4401      	add	r1, r0
 800a2e0:	1850      	adds	r0, r2, r1
 800a2e2:	4283      	cmp	r3, r0
 800a2e4:	6011      	str	r1, [r2, #0]
 800a2e6:	d1e0      	bne.n	800a2aa <_free_r+0x22>
 800a2e8:	6818      	ldr	r0, [r3, #0]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	6053      	str	r3, [r2, #4]
 800a2ee:	4408      	add	r0, r1
 800a2f0:	6010      	str	r0, [r2, #0]
 800a2f2:	e7da      	b.n	800a2aa <_free_r+0x22>
 800a2f4:	d902      	bls.n	800a2fc <_free_r+0x74>
 800a2f6:	230c      	movs	r3, #12
 800a2f8:	602b      	str	r3, [r5, #0]
 800a2fa:	e7d6      	b.n	800a2aa <_free_r+0x22>
 800a2fc:	6820      	ldr	r0, [r4, #0]
 800a2fe:	1821      	adds	r1, r4, r0
 800a300:	428b      	cmp	r3, r1
 800a302:	bf04      	itt	eq
 800a304:	6819      	ldreq	r1, [r3, #0]
 800a306:	685b      	ldreq	r3, [r3, #4]
 800a308:	6063      	str	r3, [r4, #4]
 800a30a:	bf04      	itt	eq
 800a30c:	1809      	addeq	r1, r1, r0
 800a30e:	6021      	streq	r1, [r4, #0]
 800a310:	6054      	str	r4, [r2, #4]
 800a312:	e7ca      	b.n	800a2aa <_free_r+0x22>
 800a314:	bd38      	pop	{r3, r4, r5, pc}
 800a316:	bf00      	nop
 800a318:	20000818 	.word	0x20000818

0800a31c <malloc>:
 800a31c:	4b02      	ldr	r3, [pc, #8]	@ (800a328 <malloc+0xc>)
 800a31e:	4601      	mov	r1, r0
 800a320:	6818      	ldr	r0, [r3, #0]
 800a322:	f000 b825 	b.w	800a370 <_malloc_r>
 800a326:	bf00      	nop
 800a328:	20000014 	.word	0x20000014

0800a32c <sbrk_aligned>:
 800a32c:	b570      	push	{r4, r5, r6, lr}
 800a32e:	4e0f      	ldr	r6, [pc, #60]	@ (800a36c <sbrk_aligned+0x40>)
 800a330:	460c      	mov	r4, r1
 800a332:	6831      	ldr	r1, [r6, #0]
 800a334:	4605      	mov	r5, r0
 800a336:	b911      	cbnz	r1, 800a33e <sbrk_aligned+0x12>
 800a338:	f002 f99a 	bl	800c670 <_sbrk_r>
 800a33c:	6030      	str	r0, [r6, #0]
 800a33e:	4621      	mov	r1, r4
 800a340:	4628      	mov	r0, r5
 800a342:	f002 f995 	bl	800c670 <_sbrk_r>
 800a346:	1c43      	adds	r3, r0, #1
 800a348:	d103      	bne.n	800a352 <sbrk_aligned+0x26>
 800a34a:	f04f 34ff 	mov.w	r4, #4294967295
 800a34e:	4620      	mov	r0, r4
 800a350:	bd70      	pop	{r4, r5, r6, pc}
 800a352:	1cc4      	adds	r4, r0, #3
 800a354:	f024 0403 	bic.w	r4, r4, #3
 800a358:	42a0      	cmp	r0, r4
 800a35a:	d0f8      	beq.n	800a34e <sbrk_aligned+0x22>
 800a35c:	1a21      	subs	r1, r4, r0
 800a35e:	4628      	mov	r0, r5
 800a360:	f002 f986 	bl	800c670 <_sbrk_r>
 800a364:	3001      	adds	r0, #1
 800a366:	d1f2      	bne.n	800a34e <sbrk_aligned+0x22>
 800a368:	e7ef      	b.n	800a34a <sbrk_aligned+0x1e>
 800a36a:	bf00      	nop
 800a36c:	20000814 	.word	0x20000814

0800a370 <_malloc_r>:
 800a370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a374:	1ccd      	adds	r5, r1, #3
 800a376:	f025 0503 	bic.w	r5, r5, #3
 800a37a:	3508      	adds	r5, #8
 800a37c:	2d0c      	cmp	r5, #12
 800a37e:	bf38      	it	cc
 800a380:	250c      	movcc	r5, #12
 800a382:	2d00      	cmp	r5, #0
 800a384:	4606      	mov	r6, r0
 800a386:	db01      	blt.n	800a38c <_malloc_r+0x1c>
 800a388:	42a9      	cmp	r1, r5
 800a38a:	d904      	bls.n	800a396 <_malloc_r+0x26>
 800a38c:	230c      	movs	r3, #12
 800a38e:	6033      	str	r3, [r6, #0]
 800a390:	2000      	movs	r0, #0
 800a392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a396:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a46c <_malloc_r+0xfc>
 800a39a:	f000 f869 	bl	800a470 <__malloc_lock>
 800a39e:	f8d8 3000 	ldr.w	r3, [r8]
 800a3a2:	461c      	mov	r4, r3
 800a3a4:	bb44      	cbnz	r4, 800a3f8 <_malloc_r+0x88>
 800a3a6:	4629      	mov	r1, r5
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	f7ff ffbf 	bl	800a32c <sbrk_aligned>
 800a3ae:	1c43      	adds	r3, r0, #1
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	d158      	bne.n	800a466 <_malloc_r+0xf6>
 800a3b4:	f8d8 4000 	ldr.w	r4, [r8]
 800a3b8:	4627      	mov	r7, r4
 800a3ba:	2f00      	cmp	r7, #0
 800a3bc:	d143      	bne.n	800a446 <_malloc_r+0xd6>
 800a3be:	2c00      	cmp	r4, #0
 800a3c0:	d04b      	beq.n	800a45a <_malloc_r+0xea>
 800a3c2:	6823      	ldr	r3, [r4, #0]
 800a3c4:	4639      	mov	r1, r7
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	eb04 0903 	add.w	r9, r4, r3
 800a3cc:	f002 f950 	bl	800c670 <_sbrk_r>
 800a3d0:	4581      	cmp	r9, r0
 800a3d2:	d142      	bne.n	800a45a <_malloc_r+0xea>
 800a3d4:	6821      	ldr	r1, [r4, #0]
 800a3d6:	1a6d      	subs	r5, r5, r1
 800a3d8:	4629      	mov	r1, r5
 800a3da:	4630      	mov	r0, r6
 800a3dc:	f7ff ffa6 	bl	800a32c <sbrk_aligned>
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	d03a      	beq.n	800a45a <_malloc_r+0xea>
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	442b      	add	r3, r5
 800a3e8:	6023      	str	r3, [r4, #0]
 800a3ea:	f8d8 3000 	ldr.w	r3, [r8]
 800a3ee:	685a      	ldr	r2, [r3, #4]
 800a3f0:	bb62      	cbnz	r2, 800a44c <_malloc_r+0xdc>
 800a3f2:	f8c8 7000 	str.w	r7, [r8]
 800a3f6:	e00f      	b.n	800a418 <_malloc_r+0xa8>
 800a3f8:	6822      	ldr	r2, [r4, #0]
 800a3fa:	1b52      	subs	r2, r2, r5
 800a3fc:	d420      	bmi.n	800a440 <_malloc_r+0xd0>
 800a3fe:	2a0b      	cmp	r2, #11
 800a400:	d917      	bls.n	800a432 <_malloc_r+0xc2>
 800a402:	1961      	adds	r1, r4, r5
 800a404:	42a3      	cmp	r3, r4
 800a406:	6025      	str	r5, [r4, #0]
 800a408:	bf18      	it	ne
 800a40a:	6059      	strne	r1, [r3, #4]
 800a40c:	6863      	ldr	r3, [r4, #4]
 800a40e:	bf08      	it	eq
 800a410:	f8c8 1000 	streq.w	r1, [r8]
 800a414:	5162      	str	r2, [r4, r5]
 800a416:	604b      	str	r3, [r1, #4]
 800a418:	4630      	mov	r0, r6
 800a41a:	f000 f82f 	bl	800a47c <__malloc_unlock>
 800a41e:	f104 000b 	add.w	r0, r4, #11
 800a422:	1d23      	adds	r3, r4, #4
 800a424:	f020 0007 	bic.w	r0, r0, #7
 800a428:	1ac2      	subs	r2, r0, r3
 800a42a:	bf1c      	itt	ne
 800a42c:	1a1b      	subne	r3, r3, r0
 800a42e:	50a3      	strne	r3, [r4, r2]
 800a430:	e7af      	b.n	800a392 <_malloc_r+0x22>
 800a432:	6862      	ldr	r2, [r4, #4]
 800a434:	42a3      	cmp	r3, r4
 800a436:	bf0c      	ite	eq
 800a438:	f8c8 2000 	streq.w	r2, [r8]
 800a43c:	605a      	strne	r2, [r3, #4]
 800a43e:	e7eb      	b.n	800a418 <_malloc_r+0xa8>
 800a440:	4623      	mov	r3, r4
 800a442:	6864      	ldr	r4, [r4, #4]
 800a444:	e7ae      	b.n	800a3a4 <_malloc_r+0x34>
 800a446:	463c      	mov	r4, r7
 800a448:	687f      	ldr	r7, [r7, #4]
 800a44a:	e7b6      	b.n	800a3ba <_malloc_r+0x4a>
 800a44c:	461a      	mov	r2, r3
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	42a3      	cmp	r3, r4
 800a452:	d1fb      	bne.n	800a44c <_malloc_r+0xdc>
 800a454:	2300      	movs	r3, #0
 800a456:	6053      	str	r3, [r2, #4]
 800a458:	e7de      	b.n	800a418 <_malloc_r+0xa8>
 800a45a:	230c      	movs	r3, #12
 800a45c:	6033      	str	r3, [r6, #0]
 800a45e:	4630      	mov	r0, r6
 800a460:	f000 f80c 	bl	800a47c <__malloc_unlock>
 800a464:	e794      	b.n	800a390 <_malloc_r+0x20>
 800a466:	6005      	str	r5, [r0, #0]
 800a468:	e7d6      	b.n	800a418 <_malloc_r+0xa8>
 800a46a:	bf00      	nop
 800a46c:	20000818 	.word	0x20000818

0800a470 <__malloc_lock>:
 800a470:	4801      	ldr	r0, [pc, #4]	@ (800a478 <__malloc_lock+0x8>)
 800a472:	f7ff b8a4 	b.w	80095be <__retarget_lock_acquire_recursive>
 800a476:	bf00      	nop
 800a478:	20000810 	.word	0x20000810

0800a47c <__malloc_unlock>:
 800a47c:	4801      	ldr	r0, [pc, #4]	@ (800a484 <__malloc_unlock+0x8>)
 800a47e:	f7ff b89f 	b.w	80095c0 <__retarget_lock_release_recursive>
 800a482:	bf00      	nop
 800a484:	20000810 	.word	0x20000810

0800a488 <_Balloc>:
 800a488:	b570      	push	{r4, r5, r6, lr}
 800a48a:	69c6      	ldr	r6, [r0, #28]
 800a48c:	4604      	mov	r4, r0
 800a48e:	460d      	mov	r5, r1
 800a490:	b976      	cbnz	r6, 800a4b0 <_Balloc+0x28>
 800a492:	2010      	movs	r0, #16
 800a494:	f7ff ff42 	bl	800a31c <malloc>
 800a498:	4602      	mov	r2, r0
 800a49a:	61e0      	str	r0, [r4, #28]
 800a49c:	b920      	cbnz	r0, 800a4a8 <_Balloc+0x20>
 800a49e:	4b18      	ldr	r3, [pc, #96]	@ (800a500 <_Balloc+0x78>)
 800a4a0:	4818      	ldr	r0, [pc, #96]	@ (800a504 <_Balloc+0x7c>)
 800a4a2:	216b      	movs	r1, #107	@ 0x6b
 800a4a4:	f002 f8fc 	bl	800c6a0 <__assert_func>
 800a4a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4ac:	6006      	str	r6, [r0, #0]
 800a4ae:	60c6      	str	r6, [r0, #12]
 800a4b0:	69e6      	ldr	r6, [r4, #28]
 800a4b2:	68f3      	ldr	r3, [r6, #12]
 800a4b4:	b183      	cbz	r3, 800a4d8 <_Balloc+0x50>
 800a4b6:	69e3      	ldr	r3, [r4, #28]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4be:	b9b8      	cbnz	r0, 800a4f0 <_Balloc+0x68>
 800a4c0:	2101      	movs	r1, #1
 800a4c2:	fa01 f605 	lsl.w	r6, r1, r5
 800a4c6:	1d72      	adds	r2, r6, #5
 800a4c8:	0092      	lsls	r2, r2, #2
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f002 f906 	bl	800c6dc <_calloc_r>
 800a4d0:	b160      	cbz	r0, 800a4ec <_Balloc+0x64>
 800a4d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4d6:	e00e      	b.n	800a4f6 <_Balloc+0x6e>
 800a4d8:	2221      	movs	r2, #33	@ 0x21
 800a4da:	2104      	movs	r1, #4
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f002 f8fd 	bl	800c6dc <_calloc_r>
 800a4e2:	69e3      	ldr	r3, [r4, #28]
 800a4e4:	60f0      	str	r0, [r6, #12]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1e4      	bne.n	800a4b6 <_Balloc+0x2e>
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	bd70      	pop	{r4, r5, r6, pc}
 800a4f0:	6802      	ldr	r2, [r0, #0]
 800a4f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4fc:	e7f7      	b.n	800a4ee <_Balloc+0x66>
 800a4fe:	bf00      	nop
 800a500:	0800d5f0 	.word	0x0800d5f0
 800a504:	0800d670 	.word	0x0800d670

0800a508 <_Bfree>:
 800a508:	b570      	push	{r4, r5, r6, lr}
 800a50a:	69c6      	ldr	r6, [r0, #28]
 800a50c:	4605      	mov	r5, r0
 800a50e:	460c      	mov	r4, r1
 800a510:	b976      	cbnz	r6, 800a530 <_Bfree+0x28>
 800a512:	2010      	movs	r0, #16
 800a514:	f7ff ff02 	bl	800a31c <malloc>
 800a518:	4602      	mov	r2, r0
 800a51a:	61e8      	str	r0, [r5, #28]
 800a51c:	b920      	cbnz	r0, 800a528 <_Bfree+0x20>
 800a51e:	4b09      	ldr	r3, [pc, #36]	@ (800a544 <_Bfree+0x3c>)
 800a520:	4809      	ldr	r0, [pc, #36]	@ (800a548 <_Bfree+0x40>)
 800a522:	218f      	movs	r1, #143	@ 0x8f
 800a524:	f002 f8bc 	bl	800c6a0 <__assert_func>
 800a528:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a52c:	6006      	str	r6, [r0, #0]
 800a52e:	60c6      	str	r6, [r0, #12]
 800a530:	b13c      	cbz	r4, 800a542 <_Bfree+0x3a>
 800a532:	69eb      	ldr	r3, [r5, #28]
 800a534:	6862      	ldr	r2, [r4, #4]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a53c:	6021      	str	r1, [r4, #0]
 800a53e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a542:	bd70      	pop	{r4, r5, r6, pc}
 800a544:	0800d5f0 	.word	0x0800d5f0
 800a548:	0800d670 	.word	0x0800d670

0800a54c <__multadd>:
 800a54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a550:	690d      	ldr	r5, [r1, #16]
 800a552:	4607      	mov	r7, r0
 800a554:	460c      	mov	r4, r1
 800a556:	461e      	mov	r6, r3
 800a558:	f101 0c14 	add.w	ip, r1, #20
 800a55c:	2000      	movs	r0, #0
 800a55e:	f8dc 3000 	ldr.w	r3, [ip]
 800a562:	b299      	uxth	r1, r3
 800a564:	fb02 6101 	mla	r1, r2, r1, r6
 800a568:	0c1e      	lsrs	r6, r3, #16
 800a56a:	0c0b      	lsrs	r3, r1, #16
 800a56c:	fb02 3306 	mla	r3, r2, r6, r3
 800a570:	b289      	uxth	r1, r1
 800a572:	3001      	adds	r0, #1
 800a574:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a578:	4285      	cmp	r5, r0
 800a57a:	f84c 1b04 	str.w	r1, [ip], #4
 800a57e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a582:	dcec      	bgt.n	800a55e <__multadd+0x12>
 800a584:	b30e      	cbz	r6, 800a5ca <__multadd+0x7e>
 800a586:	68a3      	ldr	r3, [r4, #8]
 800a588:	42ab      	cmp	r3, r5
 800a58a:	dc19      	bgt.n	800a5c0 <__multadd+0x74>
 800a58c:	6861      	ldr	r1, [r4, #4]
 800a58e:	4638      	mov	r0, r7
 800a590:	3101      	adds	r1, #1
 800a592:	f7ff ff79 	bl	800a488 <_Balloc>
 800a596:	4680      	mov	r8, r0
 800a598:	b928      	cbnz	r0, 800a5a6 <__multadd+0x5a>
 800a59a:	4602      	mov	r2, r0
 800a59c:	4b0c      	ldr	r3, [pc, #48]	@ (800a5d0 <__multadd+0x84>)
 800a59e:	480d      	ldr	r0, [pc, #52]	@ (800a5d4 <__multadd+0x88>)
 800a5a0:	21ba      	movs	r1, #186	@ 0xba
 800a5a2:	f002 f87d 	bl	800c6a0 <__assert_func>
 800a5a6:	6922      	ldr	r2, [r4, #16]
 800a5a8:	3202      	adds	r2, #2
 800a5aa:	f104 010c 	add.w	r1, r4, #12
 800a5ae:	0092      	lsls	r2, r2, #2
 800a5b0:	300c      	adds	r0, #12
 800a5b2:	f7ff f806 	bl	80095c2 <memcpy>
 800a5b6:	4621      	mov	r1, r4
 800a5b8:	4638      	mov	r0, r7
 800a5ba:	f7ff ffa5 	bl	800a508 <_Bfree>
 800a5be:	4644      	mov	r4, r8
 800a5c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5c4:	3501      	adds	r5, #1
 800a5c6:	615e      	str	r6, [r3, #20]
 800a5c8:	6125      	str	r5, [r4, #16]
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5d0:	0800d65f 	.word	0x0800d65f
 800a5d4:	0800d670 	.word	0x0800d670

0800a5d8 <__s2b>:
 800a5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5dc:	460c      	mov	r4, r1
 800a5de:	4615      	mov	r5, r2
 800a5e0:	461f      	mov	r7, r3
 800a5e2:	2209      	movs	r2, #9
 800a5e4:	3308      	adds	r3, #8
 800a5e6:	4606      	mov	r6, r0
 800a5e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	db09      	blt.n	800a608 <__s2b+0x30>
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	f7ff ff47 	bl	800a488 <_Balloc>
 800a5fa:	b940      	cbnz	r0, 800a60e <__s2b+0x36>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	4b19      	ldr	r3, [pc, #100]	@ (800a664 <__s2b+0x8c>)
 800a600:	4819      	ldr	r0, [pc, #100]	@ (800a668 <__s2b+0x90>)
 800a602:	21d3      	movs	r1, #211	@ 0xd3
 800a604:	f002 f84c 	bl	800c6a0 <__assert_func>
 800a608:	0052      	lsls	r2, r2, #1
 800a60a:	3101      	adds	r1, #1
 800a60c:	e7f0      	b.n	800a5f0 <__s2b+0x18>
 800a60e:	9b08      	ldr	r3, [sp, #32]
 800a610:	6143      	str	r3, [r0, #20]
 800a612:	2d09      	cmp	r5, #9
 800a614:	f04f 0301 	mov.w	r3, #1
 800a618:	6103      	str	r3, [r0, #16]
 800a61a:	dd16      	ble.n	800a64a <__s2b+0x72>
 800a61c:	f104 0909 	add.w	r9, r4, #9
 800a620:	46c8      	mov	r8, r9
 800a622:	442c      	add	r4, r5
 800a624:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a628:	4601      	mov	r1, r0
 800a62a:	3b30      	subs	r3, #48	@ 0x30
 800a62c:	220a      	movs	r2, #10
 800a62e:	4630      	mov	r0, r6
 800a630:	f7ff ff8c 	bl	800a54c <__multadd>
 800a634:	45a0      	cmp	r8, r4
 800a636:	d1f5      	bne.n	800a624 <__s2b+0x4c>
 800a638:	f1a5 0408 	sub.w	r4, r5, #8
 800a63c:	444c      	add	r4, r9
 800a63e:	1b2d      	subs	r5, r5, r4
 800a640:	1963      	adds	r3, r4, r5
 800a642:	42bb      	cmp	r3, r7
 800a644:	db04      	blt.n	800a650 <__s2b+0x78>
 800a646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a64a:	340a      	adds	r4, #10
 800a64c:	2509      	movs	r5, #9
 800a64e:	e7f6      	b.n	800a63e <__s2b+0x66>
 800a650:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a654:	4601      	mov	r1, r0
 800a656:	3b30      	subs	r3, #48	@ 0x30
 800a658:	220a      	movs	r2, #10
 800a65a:	4630      	mov	r0, r6
 800a65c:	f7ff ff76 	bl	800a54c <__multadd>
 800a660:	e7ee      	b.n	800a640 <__s2b+0x68>
 800a662:	bf00      	nop
 800a664:	0800d65f 	.word	0x0800d65f
 800a668:	0800d670 	.word	0x0800d670

0800a66c <__hi0bits>:
 800a66c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a670:	4603      	mov	r3, r0
 800a672:	bf36      	itet	cc
 800a674:	0403      	lslcc	r3, r0, #16
 800a676:	2000      	movcs	r0, #0
 800a678:	2010      	movcc	r0, #16
 800a67a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a67e:	bf3c      	itt	cc
 800a680:	021b      	lslcc	r3, r3, #8
 800a682:	3008      	addcc	r0, #8
 800a684:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a688:	bf3c      	itt	cc
 800a68a:	011b      	lslcc	r3, r3, #4
 800a68c:	3004      	addcc	r0, #4
 800a68e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a692:	bf3c      	itt	cc
 800a694:	009b      	lslcc	r3, r3, #2
 800a696:	3002      	addcc	r0, #2
 800a698:	2b00      	cmp	r3, #0
 800a69a:	db05      	blt.n	800a6a8 <__hi0bits+0x3c>
 800a69c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a6a0:	f100 0001 	add.w	r0, r0, #1
 800a6a4:	bf08      	it	eq
 800a6a6:	2020      	moveq	r0, #32
 800a6a8:	4770      	bx	lr

0800a6aa <__lo0bits>:
 800a6aa:	6803      	ldr	r3, [r0, #0]
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	f013 0007 	ands.w	r0, r3, #7
 800a6b2:	d00b      	beq.n	800a6cc <__lo0bits+0x22>
 800a6b4:	07d9      	lsls	r1, r3, #31
 800a6b6:	d421      	bmi.n	800a6fc <__lo0bits+0x52>
 800a6b8:	0798      	lsls	r0, r3, #30
 800a6ba:	bf49      	itett	mi
 800a6bc:	085b      	lsrmi	r3, r3, #1
 800a6be:	089b      	lsrpl	r3, r3, #2
 800a6c0:	2001      	movmi	r0, #1
 800a6c2:	6013      	strmi	r3, [r2, #0]
 800a6c4:	bf5c      	itt	pl
 800a6c6:	6013      	strpl	r3, [r2, #0]
 800a6c8:	2002      	movpl	r0, #2
 800a6ca:	4770      	bx	lr
 800a6cc:	b299      	uxth	r1, r3
 800a6ce:	b909      	cbnz	r1, 800a6d4 <__lo0bits+0x2a>
 800a6d0:	0c1b      	lsrs	r3, r3, #16
 800a6d2:	2010      	movs	r0, #16
 800a6d4:	b2d9      	uxtb	r1, r3
 800a6d6:	b909      	cbnz	r1, 800a6dc <__lo0bits+0x32>
 800a6d8:	3008      	adds	r0, #8
 800a6da:	0a1b      	lsrs	r3, r3, #8
 800a6dc:	0719      	lsls	r1, r3, #28
 800a6de:	bf04      	itt	eq
 800a6e0:	091b      	lsreq	r3, r3, #4
 800a6e2:	3004      	addeq	r0, #4
 800a6e4:	0799      	lsls	r1, r3, #30
 800a6e6:	bf04      	itt	eq
 800a6e8:	089b      	lsreq	r3, r3, #2
 800a6ea:	3002      	addeq	r0, #2
 800a6ec:	07d9      	lsls	r1, r3, #31
 800a6ee:	d403      	bmi.n	800a6f8 <__lo0bits+0x4e>
 800a6f0:	085b      	lsrs	r3, r3, #1
 800a6f2:	f100 0001 	add.w	r0, r0, #1
 800a6f6:	d003      	beq.n	800a700 <__lo0bits+0x56>
 800a6f8:	6013      	str	r3, [r2, #0]
 800a6fa:	4770      	bx	lr
 800a6fc:	2000      	movs	r0, #0
 800a6fe:	4770      	bx	lr
 800a700:	2020      	movs	r0, #32
 800a702:	4770      	bx	lr

0800a704 <__i2b>:
 800a704:	b510      	push	{r4, lr}
 800a706:	460c      	mov	r4, r1
 800a708:	2101      	movs	r1, #1
 800a70a:	f7ff febd 	bl	800a488 <_Balloc>
 800a70e:	4602      	mov	r2, r0
 800a710:	b928      	cbnz	r0, 800a71e <__i2b+0x1a>
 800a712:	4b05      	ldr	r3, [pc, #20]	@ (800a728 <__i2b+0x24>)
 800a714:	4805      	ldr	r0, [pc, #20]	@ (800a72c <__i2b+0x28>)
 800a716:	f240 1145 	movw	r1, #325	@ 0x145
 800a71a:	f001 ffc1 	bl	800c6a0 <__assert_func>
 800a71e:	2301      	movs	r3, #1
 800a720:	6144      	str	r4, [r0, #20]
 800a722:	6103      	str	r3, [r0, #16]
 800a724:	bd10      	pop	{r4, pc}
 800a726:	bf00      	nop
 800a728:	0800d65f 	.word	0x0800d65f
 800a72c:	0800d670 	.word	0x0800d670

0800a730 <__multiply>:
 800a730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a734:	4614      	mov	r4, r2
 800a736:	690a      	ldr	r2, [r1, #16]
 800a738:	6923      	ldr	r3, [r4, #16]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	bfa8      	it	ge
 800a73e:	4623      	movge	r3, r4
 800a740:	460f      	mov	r7, r1
 800a742:	bfa4      	itt	ge
 800a744:	460c      	movge	r4, r1
 800a746:	461f      	movge	r7, r3
 800a748:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a74c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a750:	68a3      	ldr	r3, [r4, #8]
 800a752:	6861      	ldr	r1, [r4, #4]
 800a754:	eb0a 0609 	add.w	r6, sl, r9
 800a758:	42b3      	cmp	r3, r6
 800a75a:	b085      	sub	sp, #20
 800a75c:	bfb8      	it	lt
 800a75e:	3101      	addlt	r1, #1
 800a760:	f7ff fe92 	bl	800a488 <_Balloc>
 800a764:	b930      	cbnz	r0, 800a774 <__multiply+0x44>
 800a766:	4602      	mov	r2, r0
 800a768:	4b44      	ldr	r3, [pc, #272]	@ (800a87c <__multiply+0x14c>)
 800a76a:	4845      	ldr	r0, [pc, #276]	@ (800a880 <__multiply+0x150>)
 800a76c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a770:	f001 ff96 	bl	800c6a0 <__assert_func>
 800a774:	f100 0514 	add.w	r5, r0, #20
 800a778:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a77c:	462b      	mov	r3, r5
 800a77e:	2200      	movs	r2, #0
 800a780:	4543      	cmp	r3, r8
 800a782:	d321      	bcc.n	800a7c8 <__multiply+0x98>
 800a784:	f107 0114 	add.w	r1, r7, #20
 800a788:	f104 0214 	add.w	r2, r4, #20
 800a78c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a790:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a794:	9302      	str	r3, [sp, #8]
 800a796:	1b13      	subs	r3, r2, r4
 800a798:	3b15      	subs	r3, #21
 800a79a:	f023 0303 	bic.w	r3, r3, #3
 800a79e:	3304      	adds	r3, #4
 800a7a0:	f104 0715 	add.w	r7, r4, #21
 800a7a4:	42ba      	cmp	r2, r7
 800a7a6:	bf38      	it	cc
 800a7a8:	2304      	movcc	r3, #4
 800a7aa:	9301      	str	r3, [sp, #4]
 800a7ac:	9b02      	ldr	r3, [sp, #8]
 800a7ae:	9103      	str	r1, [sp, #12]
 800a7b0:	428b      	cmp	r3, r1
 800a7b2:	d80c      	bhi.n	800a7ce <__multiply+0x9e>
 800a7b4:	2e00      	cmp	r6, #0
 800a7b6:	dd03      	ble.n	800a7c0 <__multiply+0x90>
 800a7b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d05b      	beq.n	800a878 <__multiply+0x148>
 800a7c0:	6106      	str	r6, [r0, #16]
 800a7c2:	b005      	add	sp, #20
 800a7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c8:	f843 2b04 	str.w	r2, [r3], #4
 800a7cc:	e7d8      	b.n	800a780 <__multiply+0x50>
 800a7ce:	f8b1 a000 	ldrh.w	sl, [r1]
 800a7d2:	f1ba 0f00 	cmp.w	sl, #0
 800a7d6:	d024      	beq.n	800a822 <__multiply+0xf2>
 800a7d8:	f104 0e14 	add.w	lr, r4, #20
 800a7dc:	46a9      	mov	r9, r5
 800a7de:	f04f 0c00 	mov.w	ip, #0
 800a7e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a7e6:	f8d9 3000 	ldr.w	r3, [r9]
 800a7ea:	fa1f fb87 	uxth.w	fp, r7
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	fb0a 330b 	mla	r3, sl, fp, r3
 800a7f4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a7f8:	f8d9 7000 	ldr.w	r7, [r9]
 800a7fc:	4463      	add	r3, ip
 800a7fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a802:	fb0a c70b 	mla	r7, sl, fp, ip
 800a806:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a810:	4572      	cmp	r2, lr
 800a812:	f849 3b04 	str.w	r3, [r9], #4
 800a816:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a81a:	d8e2      	bhi.n	800a7e2 <__multiply+0xb2>
 800a81c:	9b01      	ldr	r3, [sp, #4]
 800a81e:	f845 c003 	str.w	ip, [r5, r3]
 800a822:	9b03      	ldr	r3, [sp, #12]
 800a824:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a828:	3104      	adds	r1, #4
 800a82a:	f1b9 0f00 	cmp.w	r9, #0
 800a82e:	d021      	beq.n	800a874 <__multiply+0x144>
 800a830:	682b      	ldr	r3, [r5, #0]
 800a832:	f104 0c14 	add.w	ip, r4, #20
 800a836:	46ae      	mov	lr, r5
 800a838:	f04f 0a00 	mov.w	sl, #0
 800a83c:	f8bc b000 	ldrh.w	fp, [ip]
 800a840:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a844:	fb09 770b 	mla	r7, r9, fp, r7
 800a848:	4457      	add	r7, sl
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a850:	f84e 3b04 	str.w	r3, [lr], #4
 800a854:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a858:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a85c:	f8be 3000 	ldrh.w	r3, [lr]
 800a860:	fb09 330a 	mla	r3, r9, sl, r3
 800a864:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a868:	4562      	cmp	r2, ip
 800a86a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a86e:	d8e5      	bhi.n	800a83c <__multiply+0x10c>
 800a870:	9f01      	ldr	r7, [sp, #4]
 800a872:	51eb      	str	r3, [r5, r7]
 800a874:	3504      	adds	r5, #4
 800a876:	e799      	b.n	800a7ac <__multiply+0x7c>
 800a878:	3e01      	subs	r6, #1
 800a87a:	e79b      	b.n	800a7b4 <__multiply+0x84>
 800a87c:	0800d65f 	.word	0x0800d65f
 800a880:	0800d670 	.word	0x0800d670

0800a884 <__pow5mult>:
 800a884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a888:	4615      	mov	r5, r2
 800a88a:	f012 0203 	ands.w	r2, r2, #3
 800a88e:	4607      	mov	r7, r0
 800a890:	460e      	mov	r6, r1
 800a892:	d007      	beq.n	800a8a4 <__pow5mult+0x20>
 800a894:	4c25      	ldr	r4, [pc, #148]	@ (800a92c <__pow5mult+0xa8>)
 800a896:	3a01      	subs	r2, #1
 800a898:	2300      	movs	r3, #0
 800a89a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a89e:	f7ff fe55 	bl	800a54c <__multadd>
 800a8a2:	4606      	mov	r6, r0
 800a8a4:	10ad      	asrs	r5, r5, #2
 800a8a6:	d03d      	beq.n	800a924 <__pow5mult+0xa0>
 800a8a8:	69fc      	ldr	r4, [r7, #28]
 800a8aa:	b97c      	cbnz	r4, 800a8cc <__pow5mult+0x48>
 800a8ac:	2010      	movs	r0, #16
 800a8ae:	f7ff fd35 	bl	800a31c <malloc>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	61f8      	str	r0, [r7, #28]
 800a8b6:	b928      	cbnz	r0, 800a8c4 <__pow5mult+0x40>
 800a8b8:	4b1d      	ldr	r3, [pc, #116]	@ (800a930 <__pow5mult+0xac>)
 800a8ba:	481e      	ldr	r0, [pc, #120]	@ (800a934 <__pow5mult+0xb0>)
 800a8bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a8c0:	f001 feee 	bl	800c6a0 <__assert_func>
 800a8c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8c8:	6004      	str	r4, [r0, #0]
 800a8ca:	60c4      	str	r4, [r0, #12]
 800a8cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a8d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8d4:	b94c      	cbnz	r4, 800a8ea <__pow5mult+0x66>
 800a8d6:	f240 2171 	movw	r1, #625	@ 0x271
 800a8da:	4638      	mov	r0, r7
 800a8dc:	f7ff ff12 	bl	800a704 <__i2b>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	6003      	str	r3, [r0, #0]
 800a8ea:	f04f 0900 	mov.w	r9, #0
 800a8ee:	07eb      	lsls	r3, r5, #31
 800a8f0:	d50a      	bpl.n	800a908 <__pow5mult+0x84>
 800a8f2:	4631      	mov	r1, r6
 800a8f4:	4622      	mov	r2, r4
 800a8f6:	4638      	mov	r0, r7
 800a8f8:	f7ff ff1a 	bl	800a730 <__multiply>
 800a8fc:	4631      	mov	r1, r6
 800a8fe:	4680      	mov	r8, r0
 800a900:	4638      	mov	r0, r7
 800a902:	f7ff fe01 	bl	800a508 <_Bfree>
 800a906:	4646      	mov	r6, r8
 800a908:	106d      	asrs	r5, r5, #1
 800a90a:	d00b      	beq.n	800a924 <__pow5mult+0xa0>
 800a90c:	6820      	ldr	r0, [r4, #0]
 800a90e:	b938      	cbnz	r0, 800a920 <__pow5mult+0x9c>
 800a910:	4622      	mov	r2, r4
 800a912:	4621      	mov	r1, r4
 800a914:	4638      	mov	r0, r7
 800a916:	f7ff ff0b 	bl	800a730 <__multiply>
 800a91a:	6020      	str	r0, [r4, #0]
 800a91c:	f8c0 9000 	str.w	r9, [r0]
 800a920:	4604      	mov	r4, r0
 800a922:	e7e4      	b.n	800a8ee <__pow5mult+0x6a>
 800a924:	4630      	mov	r0, r6
 800a926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a92a:	bf00      	nop
 800a92c:	0800d6cc 	.word	0x0800d6cc
 800a930:	0800d5f0 	.word	0x0800d5f0
 800a934:	0800d670 	.word	0x0800d670

0800a938 <__lshift>:
 800a938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a93c:	460c      	mov	r4, r1
 800a93e:	6849      	ldr	r1, [r1, #4]
 800a940:	6923      	ldr	r3, [r4, #16]
 800a942:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a946:	68a3      	ldr	r3, [r4, #8]
 800a948:	4607      	mov	r7, r0
 800a94a:	4691      	mov	r9, r2
 800a94c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a950:	f108 0601 	add.w	r6, r8, #1
 800a954:	42b3      	cmp	r3, r6
 800a956:	db0b      	blt.n	800a970 <__lshift+0x38>
 800a958:	4638      	mov	r0, r7
 800a95a:	f7ff fd95 	bl	800a488 <_Balloc>
 800a95e:	4605      	mov	r5, r0
 800a960:	b948      	cbnz	r0, 800a976 <__lshift+0x3e>
 800a962:	4602      	mov	r2, r0
 800a964:	4b28      	ldr	r3, [pc, #160]	@ (800aa08 <__lshift+0xd0>)
 800a966:	4829      	ldr	r0, [pc, #164]	@ (800aa0c <__lshift+0xd4>)
 800a968:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a96c:	f001 fe98 	bl	800c6a0 <__assert_func>
 800a970:	3101      	adds	r1, #1
 800a972:	005b      	lsls	r3, r3, #1
 800a974:	e7ee      	b.n	800a954 <__lshift+0x1c>
 800a976:	2300      	movs	r3, #0
 800a978:	f100 0114 	add.w	r1, r0, #20
 800a97c:	f100 0210 	add.w	r2, r0, #16
 800a980:	4618      	mov	r0, r3
 800a982:	4553      	cmp	r3, sl
 800a984:	db33      	blt.n	800a9ee <__lshift+0xb6>
 800a986:	6920      	ldr	r0, [r4, #16]
 800a988:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a98c:	f104 0314 	add.w	r3, r4, #20
 800a990:	f019 091f 	ands.w	r9, r9, #31
 800a994:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a998:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a99c:	d02b      	beq.n	800a9f6 <__lshift+0xbe>
 800a99e:	f1c9 0e20 	rsb	lr, r9, #32
 800a9a2:	468a      	mov	sl, r1
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	6818      	ldr	r0, [r3, #0]
 800a9a8:	fa00 f009 	lsl.w	r0, r0, r9
 800a9ac:	4310      	orrs	r0, r2
 800a9ae:	f84a 0b04 	str.w	r0, [sl], #4
 800a9b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9b6:	459c      	cmp	ip, r3
 800a9b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a9bc:	d8f3      	bhi.n	800a9a6 <__lshift+0x6e>
 800a9be:	ebac 0304 	sub.w	r3, ip, r4
 800a9c2:	3b15      	subs	r3, #21
 800a9c4:	f023 0303 	bic.w	r3, r3, #3
 800a9c8:	3304      	adds	r3, #4
 800a9ca:	f104 0015 	add.w	r0, r4, #21
 800a9ce:	4584      	cmp	ip, r0
 800a9d0:	bf38      	it	cc
 800a9d2:	2304      	movcc	r3, #4
 800a9d4:	50ca      	str	r2, [r1, r3]
 800a9d6:	b10a      	cbz	r2, 800a9dc <__lshift+0xa4>
 800a9d8:	f108 0602 	add.w	r6, r8, #2
 800a9dc:	3e01      	subs	r6, #1
 800a9de:	4638      	mov	r0, r7
 800a9e0:	612e      	str	r6, [r5, #16]
 800a9e2:	4621      	mov	r1, r4
 800a9e4:	f7ff fd90 	bl	800a508 <_Bfree>
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	e7c5      	b.n	800a982 <__lshift+0x4a>
 800a9f6:	3904      	subs	r1, #4
 800a9f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa00:	459c      	cmp	ip, r3
 800aa02:	d8f9      	bhi.n	800a9f8 <__lshift+0xc0>
 800aa04:	e7ea      	b.n	800a9dc <__lshift+0xa4>
 800aa06:	bf00      	nop
 800aa08:	0800d65f 	.word	0x0800d65f
 800aa0c:	0800d670 	.word	0x0800d670

0800aa10 <__mcmp>:
 800aa10:	690a      	ldr	r2, [r1, #16]
 800aa12:	4603      	mov	r3, r0
 800aa14:	6900      	ldr	r0, [r0, #16]
 800aa16:	1a80      	subs	r0, r0, r2
 800aa18:	b530      	push	{r4, r5, lr}
 800aa1a:	d10e      	bne.n	800aa3a <__mcmp+0x2a>
 800aa1c:	3314      	adds	r3, #20
 800aa1e:	3114      	adds	r1, #20
 800aa20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aa24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aa2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa30:	4295      	cmp	r5, r2
 800aa32:	d003      	beq.n	800aa3c <__mcmp+0x2c>
 800aa34:	d205      	bcs.n	800aa42 <__mcmp+0x32>
 800aa36:	f04f 30ff 	mov.w	r0, #4294967295
 800aa3a:	bd30      	pop	{r4, r5, pc}
 800aa3c:	42a3      	cmp	r3, r4
 800aa3e:	d3f3      	bcc.n	800aa28 <__mcmp+0x18>
 800aa40:	e7fb      	b.n	800aa3a <__mcmp+0x2a>
 800aa42:	2001      	movs	r0, #1
 800aa44:	e7f9      	b.n	800aa3a <__mcmp+0x2a>
	...

0800aa48 <__mdiff>:
 800aa48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4c:	4689      	mov	r9, r1
 800aa4e:	4606      	mov	r6, r0
 800aa50:	4611      	mov	r1, r2
 800aa52:	4648      	mov	r0, r9
 800aa54:	4614      	mov	r4, r2
 800aa56:	f7ff ffdb 	bl	800aa10 <__mcmp>
 800aa5a:	1e05      	subs	r5, r0, #0
 800aa5c:	d112      	bne.n	800aa84 <__mdiff+0x3c>
 800aa5e:	4629      	mov	r1, r5
 800aa60:	4630      	mov	r0, r6
 800aa62:	f7ff fd11 	bl	800a488 <_Balloc>
 800aa66:	4602      	mov	r2, r0
 800aa68:	b928      	cbnz	r0, 800aa76 <__mdiff+0x2e>
 800aa6a:	4b3f      	ldr	r3, [pc, #252]	@ (800ab68 <__mdiff+0x120>)
 800aa6c:	f240 2137 	movw	r1, #567	@ 0x237
 800aa70:	483e      	ldr	r0, [pc, #248]	@ (800ab6c <__mdiff+0x124>)
 800aa72:	f001 fe15 	bl	800c6a0 <__assert_func>
 800aa76:	2301      	movs	r3, #1
 800aa78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa7c:	4610      	mov	r0, r2
 800aa7e:	b003      	add	sp, #12
 800aa80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa84:	bfbc      	itt	lt
 800aa86:	464b      	movlt	r3, r9
 800aa88:	46a1      	movlt	r9, r4
 800aa8a:	4630      	mov	r0, r6
 800aa8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aa90:	bfba      	itte	lt
 800aa92:	461c      	movlt	r4, r3
 800aa94:	2501      	movlt	r5, #1
 800aa96:	2500      	movge	r5, #0
 800aa98:	f7ff fcf6 	bl	800a488 <_Balloc>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	b918      	cbnz	r0, 800aaa8 <__mdiff+0x60>
 800aaa0:	4b31      	ldr	r3, [pc, #196]	@ (800ab68 <__mdiff+0x120>)
 800aaa2:	f240 2145 	movw	r1, #581	@ 0x245
 800aaa6:	e7e3      	b.n	800aa70 <__mdiff+0x28>
 800aaa8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aaac:	6926      	ldr	r6, [r4, #16]
 800aaae:	60c5      	str	r5, [r0, #12]
 800aab0:	f109 0310 	add.w	r3, r9, #16
 800aab4:	f109 0514 	add.w	r5, r9, #20
 800aab8:	f104 0e14 	add.w	lr, r4, #20
 800aabc:	f100 0b14 	add.w	fp, r0, #20
 800aac0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aac4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aac8:	9301      	str	r3, [sp, #4]
 800aaca:	46d9      	mov	r9, fp
 800aacc:	f04f 0c00 	mov.w	ip, #0
 800aad0:	9b01      	ldr	r3, [sp, #4]
 800aad2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aad6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aada:	9301      	str	r3, [sp, #4]
 800aadc:	fa1f f38a 	uxth.w	r3, sl
 800aae0:	4619      	mov	r1, r3
 800aae2:	b283      	uxth	r3, r0
 800aae4:	1acb      	subs	r3, r1, r3
 800aae6:	0c00      	lsrs	r0, r0, #16
 800aae8:	4463      	add	r3, ip
 800aaea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aaee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aaf8:	4576      	cmp	r6, lr
 800aafa:	f849 3b04 	str.w	r3, [r9], #4
 800aafe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab02:	d8e5      	bhi.n	800aad0 <__mdiff+0x88>
 800ab04:	1b33      	subs	r3, r6, r4
 800ab06:	3b15      	subs	r3, #21
 800ab08:	f023 0303 	bic.w	r3, r3, #3
 800ab0c:	3415      	adds	r4, #21
 800ab0e:	3304      	adds	r3, #4
 800ab10:	42a6      	cmp	r6, r4
 800ab12:	bf38      	it	cc
 800ab14:	2304      	movcc	r3, #4
 800ab16:	441d      	add	r5, r3
 800ab18:	445b      	add	r3, fp
 800ab1a:	461e      	mov	r6, r3
 800ab1c:	462c      	mov	r4, r5
 800ab1e:	4544      	cmp	r4, r8
 800ab20:	d30e      	bcc.n	800ab40 <__mdiff+0xf8>
 800ab22:	f108 0103 	add.w	r1, r8, #3
 800ab26:	1b49      	subs	r1, r1, r5
 800ab28:	f021 0103 	bic.w	r1, r1, #3
 800ab2c:	3d03      	subs	r5, #3
 800ab2e:	45a8      	cmp	r8, r5
 800ab30:	bf38      	it	cc
 800ab32:	2100      	movcc	r1, #0
 800ab34:	440b      	add	r3, r1
 800ab36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab3a:	b191      	cbz	r1, 800ab62 <__mdiff+0x11a>
 800ab3c:	6117      	str	r7, [r2, #16]
 800ab3e:	e79d      	b.n	800aa7c <__mdiff+0x34>
 800ab40:	f854 1b04 	ldr.w	r1, [r4], #4
 800ab44:	46e6      	mov	lr, ip
 800ab46:	0c08      	lsrs	r0, r1, #16
 800ab48:	fa1c fc81 	uxtah	ip, ip, r1
 800ab4c:	4471      	add	r1, lr
 800ab4e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ab52:	b289      	uxth	r1, r1
 800ab54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ab58:	f846 1b04 	str.w	r1, [r6], #4
 800ab5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab60:	e7dd      	b.n	800ab1e <__mdiff+0xd6>
 800ab62:	3f01      	subs	r7, #1
 800ab64:	e7e7      	b.n	800ab36 <__mdiff+0xee>
 800ab66:	bf00      	nop
 800ab68:	0800d65f 	.word	0x0800d65f
 800ab6c:	0800d670 	.word	0x0800d670

0800ab70 <__ulp>:
 800ab70:	b082      	sub	sp, #8
 800ab72:	ed8d 0b00 	vstr	d0, [sp]
 800ab76:	9a01      	ldr	r2, [sp, #4]
 800ab78:	4b0f      	ldr	r3, [pc, #60]	@ (800abb8 <__ulp+0x48>)
 800ab7a:	4013      	ands	r3, r2
 800ab7c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	dc08      	bgt.n	800ab96 <__ulp+0x26>
 800ab84:	425b      	negs	r3, r3
 800ab86:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ab8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ab8e:	da04      	bge.n	800ab9a <__ulp+0x2a>
 800ab90:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ab94:	4113      	asrs	r3, r2
 800ab96:	2200      	movs	r2, #0
 800ab98:	e008      	b.n	800abac <__ulp+0x3c>
 800ab9a:	f1a2 0314 	sub.w	r3, r2, #20
 800ab9e:	2b1e      	cmp	r3, #30
 800aba0:	bfda      	itte	le
 800aba2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800aba6:	40da      	lsrle	r2, r3
 800aba8:	2201      	movgt	r2, #1
 800abaa:	2300      	movs	r3, #0
 800abac:	4619      	mov	r1, r3
 800abae:	4610      	mov	r0, r2
 800abb0:	ec41 0b10 	vmov	d0, r0, r1
 800abb4:	b002      	add	sp, #8
 800abb6:	4770      	bx	lr
 800abb8:	7ff00000 	.word	0x7ff00000

0800abbc <__b2d>:
 800abbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abc0:	6906      	ldr	r6, [r0, #16]
 800abc2:	f100 0814 	add.w	r8, r0, #20
 800abc6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800abca:	1f37      	subs	r7, r6, #4
 800abcc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800abd0:	4610      	mov	r0, r2
 800abd2:	f7ff fd4b 	bl	800a66c <__hi0bits>
 800abd6:	f1c0 0320 	rsb	r3, r0, #32
 800abda:	280a      	cmp	r0, #10
 800abdc:	600b      	str	r3, [r1, #0]
 800abde:	491b      	ldr	r1, [pc, #108]	@ (800ac4c <__b2d+0x90>)
 800abe0:	dc15      	bgt.n	800ac0e <__b2d+0x52>
 800abe2:	f1c0 0c0b 	rsb	ip, r0, #11
 800abe6:	fa22 f30c 	lsr.w	r3, r2, ip
 800abea:	45b8      	cmp	r8, r7
 800abec:	ea43 0501 	orr.w	r5, r3, r1
 800abf0:	bf34      	ite	cc
 800abf2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800abf6:	2300      	movcs	r3, #0
 800abf8:	3015      	adds	r0, #21
 800abfa:	fa02 f000 	lsl.w	r0, r2, r0
 800abfe:	fa23 f30c 	lsr.w	r3, r3, ip
 800ac02:	4303      	orrs	r3, r0
 800ac04:	461c      	mov	r4, r3
 800ac06:	ec45 4b10 	vmov	d0, r4, r5
 800ac0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac0e:	45b8      	cmp	r8, r7
 800ac10:	bf3a      	itte	cc
 800ac12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ac16:	f1a6 0708 	subcc.w	r7, r6, #8
 800ac1a:	2300      	movcs	r3, #0
 800ac1c:	380b      	subs	r0, #11
 800ac1e:	d012      	beq.n	800ac46 <__b2d+0x8a>
 800ac20:	f1c0 0120 	rsb	r1, r0, #32
 800ac24:	fa23 f401 	lsr.w	r4, r3, r1
 800ac28:	4082      	lsls	r2, r0
 800ac2a:	4322      	orrs	r2, r4
 800ac2c:	4547      	cmp	r7, r8
 800ac2e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ac32:	bf8c      	ite	hi
 800ac34:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ac38:	2200      	movls	r2, #0
 800ac3a:	4083      	lsls	r3, r0
 800ac3c:	40ca      	lsrs	r2, r1
 800ac3e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ac42:	4313      	orrs	r3, r2
 800ac44:	e7de      	b.n	800ac04 <__b2d+0x48>
 800ac46:	ea42 0501 	orr.w	r5, r2, r1
 800ac4a:	e7db      	b.n	800ac04 <__b2d+0x48>
 800ac4c:	3ff00000 	.word	0x3ff00000

0800ac50 <__d2b>:
 800ac50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac54:	460f      	mov	r7, r1
 800ac56:	2101      	movs	r1, #1
 800ac58:	ec59 8b10 	vmov	r8, r9, d0
 800ac5c:	4616      	mov	r6, r2
 800ac5e:	f7ff fc13 	bl	800a488 <_Balloc>
 800ac62:	4604      	mov	r4, r0
 800ac64:	b930      	cbnz	r0, 800ac74 <__d2b+0x24>
 800ac66:	4602      	mov	r2, r0
 800ac68:	4b23      	ldr	r3, [pc, #140]	@ (800acf8 <__d2b+0xa8>)
 800ac6a:	4824      	ldr	r0, [pc, #144]	@ (800acfc <__d2b+0xac>)
 800ac6c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ac70:	f001 fd16 	bl	800c6a0 <__assert_func>
 800ac74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac7c:	b10d      	cbz	r5, 800ac82 <__d2b+0x32>
 800ac7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac82:	9301      	str	r3, [sp, #4]
 800ac84:	f1b8 0300 	subs.w	r3, r8, #0
 800ac88:	d023      	beq.n	800acd2 <__d2b+0x82>
 800ac8a:	4668      	mov	r0, sp
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	f7ff fd0c 	bl	800a6aa <__lo0bits>
 800ac92:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ac96:	b1d0      	cbz	r0, 800acce <__d2b+0x7e>
 800ac98:	f1c0 0320 	rsb	r3, r0, #32
 800ac9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aca0:	430b      	orrs	r3, r1
 800aca2:	40c2      	lsrs	r2, r0
 800aca4:	6163      	str	r3, [r4, #20]
 800aca6:	9201      	str	r2, [sp, #4]
 800aca8:	9b01      	ldr	r3, [sp, #4]
 800acaa:	61a3      	str	r3, [r4, #24]
 800acac:	2b00      	cmp	r3, #0
 800acae:	bf0c      	ite	eq
 800acb0:	2201      	moveq	r2, #1
 800acb2:	2202      	movne	r2, #2
 800acb4:	6122      	str	r2, [r4, #16]
 800acb6:	b1a5      	cbz	r5, 800ace2 <__d2b+0x92>
 800acb8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800acbc:	4405      	add	r5, r0
 800acbe:	603d      	str	r5, [r7, #0]
 800acc0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800acc4:	6030      	str	r0, [r6, #0]
 800acc6:	4620      	mov	r0, r4
 800acc8:	b003      	add	sp, #12
 800acca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acce:	6161      	str	r1, [r4, #20]
 800acd0:	e7ea      	b.n	800aca8 <__d2b+0x58>
 800acd2:	a801      	add	r0, sp, #4
 800acd4:	f7ff fce9 	bl	800a6aa <__lo0bits>
 800acd8:	9b01      	ldr	r3, [sp, #4]
 800acda:	6163      	str	r3, [r4, #20]
 800acdc:	3020      	adds	r0, #32
 800acde:	2201      	movs	r2, #1
 800ace0:	e7e8      	b.n	800acb4 <__d2b+0x64>
 800ace2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ace6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800acea:	6038      	str	r0, [r7, #0]
 800acec:	6918      	ldr	r0, [r3, #16]
 800acee:	f7ff fcbd 	bl	800a66c <__hi0bits>
 800acf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800acf6:	e7e5      	b.n	800acc4 <__d2b+0x74>
 800acf8:	0800d65f 	.word	0x0800d65f
 800acfc:	0800d670 	.word	0x0800d670

0800ad00 <__ratio>:
 800ad00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad04:	b085      	sub	sp, #20
 800ad06:	e9cd 1000 	strd	r1, r0, [sp]
 800ad0a:	a902      	add	r1, sp, #8
 800ad0c:	f7ff ff56 	bl	800abbc <__b2d>
 800ad10:	9800      	ldr	r0, [sp, #0]
 800ad12:	a903      	add	r1, sp, #12
 800ad14:	ec55 4b10 	vmov	r4, r5, d0
 800ad18:	f7ff ff50 	bl	800abbc <__b2d>
 800ad1c:	9b01      	ldr	r3, [sp, #4]
 800ad1e:	6919      	ldr	r1, [r3, #16]
 800ad20:	9b00      	ldr	r3, [sp, #0]
 800ad22:	691b      	ldr	r3, [r3, #16]
 800ad24:	1ac9      	subs	r1, r1, r3
 800ad26:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ad2a:	1a9b      	subs	r3, r3, r2
 800ad2c:	ec5b ab10 	vmov	sl, fp, d0
 800ad30:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	bfce      	itee	gt
 800ad38:	462a      	movgt	r2, r5
 800ad3a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ad3e:	465a      	movle	r2, fp
 800ad40:	462f      	mov	r7, r5
 800ad42:	46d9      	mov	r9, fp
 800ad44:	bfcc      	ite	gt
 800ad46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ad4a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ad4e:	464b      	mov	r3, r9
 800ad50:	4652      	mov	r2, sl
 800ad52:	4620      	mov	r0, r4
 800ad54:	4639      	mov	r1, r7
 800ad56:	f7f5 fda1 	bl	800089c <__aeabi_ddiv>
 800ad5a:	ec41 0b10 	vmov	d0, r0, r1
 800ad5e:	b005      	add	sp, #20
 800ad60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad64 <__copybits>:
 800ad64:	3901      	subs	r1, #1
 800ad66:	b570      	push	{r4, r5, r6, lr}
 800ad68:	1149      	asrs	r1, r1, #5
 800ad6a:	6914      	ldr	r4, [r2, #16]
 800ad6c:	3101      	adds	r1, #1
 800ad6e:	f102 0314 	add.w	r3, r2, #20
 800ad72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ad76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ad7a:	1f05      	subs	r5, r0, #4
 800ad7c:	42a3      	cmp	r3, r4
 800ad7e:	d30c      	bcc.n	800ad9a <__copybits+0x36>
 800ad80:	1aa3      	subs	r3, r4, r2
 800ad82:	3b11      	subs	r3, #17
 800ad84:	f023 0303 	bic.w	r3, r3, #3
 800ad88:	3211      	adds	r2, #17
 800ad8a:	42a2      	cmp	r2, r4
 800ad8c:	bf88      	it	hi
 800ad8e:	2300      	movhi	r3, #0
 800ad90:	4418      	add	r0, r3
 800ad92:	2300      	movs	r3, #0
 800ad94:	4288      	cmp	r0, r1
 800ad96:	d305      	bcc.n	800ada4 <__copybits+0x40>
 800ad98:	bd70      	pop	{r4, r5, r6, pc}
 800ad9a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ad9e:	f845 6f04 	str.w	r6, [r5, #4]!
 800ada2:	e7eb      	b.n	800ad7c <__copybits+0x18>
 800ada4:	f840 3b04 	str.w	r3, [r0], #4
 800ada8:	e7f4      	b.n	800ad94 <__copybits+0x30>

0800adaa <__any_on>:
 800adaa:	f100 0214 	add.w	r2, r0, #20
 800adae:	6900      	ldr	r0, [r0, #16]
 800adb0:	114b      	asrs	r3, r1, #5
 800adb2:	4298      	cmp	r0, r3
 800adb4:	b510      	push	{r4, lr}
 800adb6:	db11      	blt.n	800addc <__any_on+0x32>
 800adb8:	dd0a      	ble.n	800add0 <__any_on+0x26>
 800adba:	f011 011f 	ands.w	r1, r1, #31
 800adbe:	d007      	beq.n	800add0 <__any_on+0x26>
 800adc0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800adc4:	fa24 f001 	lsr.w	r0, r4, r1
 800adc8:	fa00 f101 	lsl.w	r1, r0, r1
 800adcc:	428c      	cmp	r4, r1
 800adce:	d10b      	bne.n	800ade8 <__any_on+0x3e>
 800add0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800add4:	4293      	cmp	r3, r2
 800add6:	d803      	bhi.n	800ade0 <__any_on+0x36>
 800add8:	2000      	movs	r0, #0
 800adda:	bd10      	pop	{r4, pc}
 800addc:	4603      	mov	r3, r0
 800adde:	e7f7      	b.n	800add0 <__any_on+0x26>
 800ade0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ade4:	2900      	cmp	r1, #0
 800ade6:	d0f5      	beq.n	800add4 <__any_on+0x2a>
 800ade8:	2001      	movs	r0, #1
 800adea:	e7f6      	b.n	800adda <__any_on+0x30>

0800adec <sulp>:
 800adec:	b570      	push	{r4, r5, r6, lr}
 800adee:	4604      	mov	r4, r0
 800adf0:	460d      	mov	r5, r1
 800adf2:	ec45 4b10 	vmov	d0, r4, r5
 800adf6:	4616      	mov	r6, r2
 800adf8:	f7ff feba 	bl	800ab70 <__ulp>
 800adfc:	ec51 0b10 	vmov	r0, r1, d0
 800ae00:	b17e      	cbz	r6, 800ae22 <sulp+0x36>
 800ae02:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ae06:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	dd09      	ble.n	800ae22 <sulp+0x36>
 800ae0e:	051b      	lsls	r3, r3, #20
 800ae10:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ae14:	2400      	movs	r4, #0
 800ae16:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ae1a:	4622      	mov	r2, r4
 800ae1c:	462b      	mov	r3, r5
 800ae1e:	f7f5 fc13 	bl	8000648 <__aeabi_dmul>
 800ae22:	ec41 0b10 	vmov	d0, r0, r1
 800ae26:	bd70      	pop	{r4, r5, r6, pc}

0800ae28 <_strtod_l>:
 800ae28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae2c:	b09f      	sub	sp, #124	@ 0x7c
 800ae2e:	460c      	mov	r4, r1
 800ae30:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ae32:	2200      	movs	r2, #0
 800ae34:	921a      	str	r2, [sp, #104]	@ 0x68
 800ae36:	9005      	str	r0, [sp, #20]
 800ae38:	f04f 0a00 	mov.w	sl, #0
 800ae3c:	f04f 0b00 	mov.w	fp, #0
 800ae40:	460a      	mov	r2, r1
 800ae42:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae44:	7811      	ldrb	r1, [r2, #0]
 800ae46:	292b      	cmp	r1, #43	@ 0x2b
 800ae48:	d04a      	beq.n	800aee0 <_strtod_l+0xb8>
 800ae4a:	d838      	bhi.n	800aebe <_strtod_l+0x96>
 800ae4c:	290d      	cmp	r1, #13
 800ae4e:	d832      	bhi.n	800aeb6 <_strtod_l+0x8e>
 800ae50:	2908      	cmp	r1, #8
 800ae52:	d832      	bhi.n	800aeba <_strtod_l+0x92>
 800ae54:	2900      	cmp	r1, #0
 800ae56:	d03b      	beq.n	800aed0 <_strtod_l+0xa8>
 800ae58:	2200      	movs	r2, #0
 800ae5a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ae5c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ae5e:	782a      	ldrb	r2, [r5, #0]
 800ae60:	2a30      	cmp	r2, #48	@ 0x30
 800ae62:	f040 80b3 	bne.w	800afcc <_strtod_l+0x1a4>
 800ae66:	786a      	ldrb	r2, [r5, #1]
 800ae68:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ae6c:	2a58      	cmp	r2, #88	@ 0x58
 800ae6e:	d16e      	bne.n	800af4e <_strtod_l+0x126>
 800ae70:	9302      	str	r3, [sp, #8]
 800ae72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae74:	9301      	str	r3, [sp, #4]
 800ae76:	ab1a      	add	r3, sp, #104	@ 0x68
 800ae78:	9300      	str	r3, [sp, #0]
 800ae7a:	4a8e      	ldr	r2, [pc, #568]	@ (800b0b4 <_strtod_l+0x28c>)
 800ae7c:	9805      	ldr	r0, [sp, #20]
 800ae7e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ae80:	a919      	add	r1, sp, #100	@ 0x64
 800ae82:	f001 fca7 	bl	800c7d4 <__gethex>
 800ae86:	f010 060f 	ands.w	r6, r0, #15
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	d005      	beq.n	800ae9a <_strtod_l+0x72>
 800ae8e:	2e06      	cmp	r6, #6
 800ae90:	d128      	bne.n	800aee4 <_strtod_l+0xbc>
 800ae92:	3501      	adds	r5, #1
 800ae94:	2300      	movs	r3, #0
 800ae96:	9519      	str	r5, [sp, #100]	@ 0x64
 800ae98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f040 858e 	bne.w	800b9be <_strtod_l+0xb96>
 800aea2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aea4:	b1cb      	cbz	r3, 800aeda <_strtod_l+0xb2>
 800aea6:	4652      	mov	r2, sl
 800aea8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800aeac:	ec43 2b10 	vmov	d0, r2, r3
 800aeb0:	b01f      	add	sp, #124	@ 0x7c
 800aeb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb6:	2920      	cmp	r1, #32
 800aeb8:	d1ce      	bne.n	800ae58 <_strtod_l+0x30>
 800aeba:	3201      	adds	r2, #1
 800aebc:	e7c1      	b.n	800ae42 <_strtod_l+0x1a>
 800aebe:	292d      	cmp	r1, #45	@ 0x2d
 800aec0:	d1ca      	bne.n	800ae58 <_strtod_l+0x30>
 800aec2:	2101      	movs	r1, #1
 800aec4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aec6:	1c51      	adds	r1, r2, #1
 800aec8:	9119      	str	r1, [sp, #100]	@ 0x64
 800aeca:	7852      	ldrb	r2, [r2, #1]
 800aecc:	2a00      	cmp	r2, #0
 800aece:	d1c5      	bne.n	800ae5c <_strtod_l+0x34>
 800aed0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aed2:	9419      	str	r4, [sp, #100]	@ 0x64
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f040 8570 	bne.w	800b9ba <_strtod_l+0xb92>
 800aeda:	4652      	mov	r2, sl
 800aedc:	465b      	mov	r3, fp
 800aede:	e7e5      	b.n	800aeac <_strtod_l+0x84>
 800aee0:	2100      	movs	r1, #0
 800aee2:	e7ef      	b.n	800aec4 <_strtod_l+0x9c>
 800aee4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aee6:	b13a      	cbz	r2, 800aef8 <_strtod_l+0xd0>
 800aee8:	2135      	movs	r1, #53	@ 0x35
 800aeea:	a81c      	add	r0, sp, #112	@ 0x70
 800aeec:	f7ff ff3a 	bl	800ad64 <__copybits>
 800aef0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aef2:	9805      	ldr	r0, [sp, #20]
 800aef4:	f7ff fb08 	bl	800a508 <_Bfree>
 800aef8:	3e01      	subs	r6, #1
 800aefa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800aefc:	2e04      	cmp	r6, #4
 800aefe:	d806      	bhi.n	800af0e <_strtod_l+0xe6>
 800af00:	e8df f006 	tbb	[pc, r6]
 800af04:	201d0314 	.word	0x201d0314
 800af08:	14          	.byte	0x14
 800af09:	00          	.byte	0x00
 800af0a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800af0e:	05e1      	lsls	r1, r4, #23
 800af10:	bf48      	it	mi
 800af12:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800af16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800af1a:	0d1b      	lsrs	r3, r3, #20
 800af1c:	051b      	lsls	r3, r3, #20
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d1bb      	bne.n	800ae9a <_strtod_l+0x72>
 800af22:	f7fe fb21 	bl	8009568 <__errno>
 800af26:	2322      	movs	r3, #34	@ 0x22
 800af28:	6003      	str	r3, [r0, #0]
 800af2a:	e7b6      	b.n	800ae9a <_strtod_l+0x72>
 800af2c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800af30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800af34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800af38:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800af3c:	e7e7      	b.n	800af0e <_strtod_l+0xe6>
 800af3e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b0bc <_strtod_l+0x294>
 800af42:	e7e4      	b.n	800af0e <_strtod_l+0xe6>
 800af44:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800af48:	f04f 3aff 	mov.w	sl, #4294967295
 800af4c:	e7df      	b.n	800af0e <_strtod_l+0xe6>
 800af4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af50:	1c5a      	adds	r2, r3, #1
 800af52:	9219      	str	r2, [sp, #100]	@ 0x64
 800af54:	785b      	ldrb	r3, [r3, #1]
 800af56:	2b30      	cmp	r3, #48	@ 0x30
 800af58:	d0f9      	beq.n	800af4e <_strtod_l+0x126>
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d09d      	beq.n	800ae9a <_strtod_l+0x72>
 800af5e:	2301      	movs	r3, #1
 800af60:	9309      	str	r3, [sp, #36]	@ 0x24
 800af62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af64:	930c      	str	r3, [sp, #48]	@ 0x30
 800af66:	2300      	movs	r3, #0
 800af68:	9308      	str	r3, [sp, #32]
 800af6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800af6c:	461f      	mov	r7, r3
 800af6e:	220a      	movs	r2, #10
 800af70:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800af72:	7805      	ldrb	r5, [r0, #0]
 800af74:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800af78:	b2d9      	uxtb	r1, r3
 800af7a:	2909      	cmp	r1, #9
 800af7c:	d928      	bls.n	800afd0 <_strtod_l+0x1a8>
 800af7e:	494e      	ldr	r1, [pc, #312]	@ (800b0b8 <_strtod_l+0x290>)
 800af80:	2201      	movs	r2, #1
 800af82:	f001 fb62 	bl	800c64a <strncmp>
 800af86:	2800      	cmp	r0, #0
 800af88:	d032      	beq.n	800aff0 <_strtod_l+0x1c8>
 800af8a:	2000      	movs	r0, #0
 800af8c:	462a      	mov	r2, r5
 800af8e:	4681      	mov	r9, r0
 800af90:	463d      	mov	r5, r7
 800af92:	4603      	mov	r3, r0
 800af94:	2a65      	cmp	r2, #101	@ 0x65
 800af96:	d001      	beq.n	800af9c <_strtod_l+0x174>
 800af98:	2a45      	cmp	r2, #69	@ 0x45
 800af9a:	d114      	bne.n	800afc6 <_strtod_l+0x19e>
 800af9c:	b91d      	cbnz	r5, 800afa6 <_strtod_l+0x17e>
 800af9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afa0:	4302      	orrs	r2, r0
 800afa2:	d095      	beq.n	800aed0 <_strtod_l+0xa8>
 800afa4:	2500      	movs	r5, #0
 800afa6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800afa8:	1c62      	adds	r2, r4, #1
 800afaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800afac:	7862      	ldrb	r2, [r4, #1]
 800afae:	2a2b      	cmp	r2, #43	@ 0x2b
 800afb0:	d077      	beq.n	800b0a2 <_strtod_l+0x27a>
 800afb2:	2a2d      	cmp	r2, #45	@ 0x2d
 800afb4:	d07b      	beq.n	800b0ae <_strtod_l+0x286>
 800afb6:	f04f 0c00 	mov.w	ip, #0
 800afba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800afbe:	2909      	cmp	r1, #9
 800afc0:	f240 8082 	bls.w	800b0c8 <_strtod_l+0x2a0>
 800afc4:	9419      	str	r4, [sp, #100]	@ 0x64
 800afc6:	f04f 0800 	mov.w	r8, #0
 800afca:	e0a2      	b.n	800b112 <_strtod_l+0x2ea>
 800afcc:	2300      	movs	r3, #0
 800afce:	e7c7      	b.n	800af60 <_strtod_l+0x138>
 800afd0:	2f08      	cmp	r7, #8
 800afd2:	bfd5      	itete	le
 800afd4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800afd6:	9908      	ldrgt	r1, [sp, #32]
 800afd8:	fb02 3301 	mlale	r3, r2, r1, r3
 800afdc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800afe0:	f100 0001 	add.w	r0, r0, #1
 800afe4:	bfd4      	ite	le
 800afe6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800afe8:	9308      	strgt	r3, [sp, #32]
 800afea:	3701      	adds	r7, #1
 800afec:	9019      	str	r0, [sp, #100]	@ 0x64
 800afee:	e7bf      	b.n	800af70 <_strtod_l+0x148>
 800aff0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aff2:	1c5a      	adds	r2, r3, #1
 800aff4:	9219      	str	r2, [sp, #100]	@ 0x64
 800aff6:	785a      	ldrb	r2, [r3, #1]
 800aff8:	b37f      	cbz	r7, 800b05a <_strtod_l+0x232>
 800affa:	4681      	mov	r9, r0
 800affc:	463d      	mov	r5, r7
 800affe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b002:	2b09      	cmp	r3, #9
 800b004:	d912      	bls.n	800b02c <_strtod_l+0x204>
 800b006:	2301      	movs	r3, #1
 800b008:	e7c4      	b.n	800af94 <_strtod_l+0x16c>
 800b00a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b00c:	1c5a      	adds	r2, r3, #1
 800b00e:	9219      	str	r2, [sp, #100]	@ 0x64
 800b010:	785a      	ldrb	r2, [r3, #1]
 800b012:	3001      	adds	r0, #1
 800b014:	2a30      	cmp	r2, #48	@ 0x30
 800b016:	d0f8      	beq.n	800b00a <_strtod_l+0x1e2>
 800b018:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b01c:	2b08      	cmp	r3, #8
 800b01e:	f200 84d3 	bhi.w	800b9c8 <_strtod_l+0xba0>
 800b022:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b024:	930c      	str	r3, [sp, #48]	@ 0x30
 800b026:	4681      	mov	r9, r0
 800b028:	2000      	movs	r0, #0
 800b02a:	4605      	mov	r5, r0
 800b02c:	3a30      	subs	r2, #48	@ 0x30
 800b02e:	f100 0301 	add.w	r3, r0, #1
 800b032:	d02a      	beq.n	800b08a <_strtod_l+0x262>
 800b034:	4499      	add	r9, r3
 800b036:	eb00 0c05 	add.w	ip, r0, r5
 800b03a:	462b      	mov	r3, r5
 800b03c:	210a      	movs	r1, #10
 800b03e:	4563      	cmp	r3, ip
 800b040:	d10d      	bne.n	800b05e <_strtod_l+0x236>
 800b042:	1c69      	adds	r1, r5, #1
 800b044:	4401      	add	r1, r0
 800b046:	4428      	add	r0, r5
 800b048:	2808      	cmp	r0, #8
 800b04a:	dc16      	bgt.n	800b07a <_strtod_l+0x252>
 800b04c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b04e:	230a      	movs	r3, #10
 800b050:	fb03 2300 	mla	r3, r3, r0, r2
 800b054:	930a      	str	r3, [sp, #40]	@ 0x28
 800b056:	2300      	movs	r3, #0
 800b058:	e018      	b.n	800b08c <_strtod_l+0x264>
 800b05a:	4638      	mov	r0, r7
 800b05c:	e7da      	b.n	800b014 <_strtod_l+0x1ec>
 800b05e:	2b08      	cmp	r3, #8
 800b060:	f103 0301 	add.w	r3, r3, #1
 800b064:	dc03      	bgt.n	800b06e <_strtod_l+0x246>
 800b066:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b068:	434e      	muls	r6, r1
 800b06a:	960a      	str	r6, [sp, #40]	@ 0x28
 800b06c:	e7e7      	b.n	800b03e <_strtod_l+0x216>
 800b06e:	2b10      	cmp	r3, #16
 800b070:	bfde      	ittt	le
 800b072:	9e08      	ldrle	r6, [sp, #32]
 800b074:	434e      	mulle	r6, r1
 800b076:	9608      	strle	r6, [sp, #32]
 800b078:	e7e1      	b.n	800b03e <_strtod_l+0x216>
 800b07a:	280f      	cmp	r0, #15
 800b07c:	dceb      	bgt.n	800b056 <_strtod_l+0x22e>
 800b07e:	9808      	ldr	r0, [sp, #32]
 800b080:	230a      	movs	r3, #10
 800b082:	fb03 2300 	mla	r3, r3, r0, r2
 800b086:	9308      	str	r3, [sp, #32]
 800b088:	e7e5      	b.n	800b056 <_strtod_l+0x22e>
 800b08a:	4629      	mov	r1, r5
 800b08c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b08e:	1c50      	adds	r0, r2, #1
 800b090:	9019      	str	r0, [sp, #100]	@ 0x64
 800b092:	7852      	ldrb	r2, [r2, #1]
 800b094:	4618      	mov	r0, r3
 800b096:	460d      	mov	r5, r1
 800b098:	e7b1      	b.n	800affe <_strtod_l+0x1d6>
 800b09a:	f04f 0900 	mov.w	r9, #0
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e77d      	b.n	800af9e <_strtod_l+0x176>
 800b0a2:	f04f 0c00 	mov.w	ip, #0
 800b0a6:	1ca2      	adds	r2, r4, #2
 800b0a8:	9219      	str	r2, [sp, #100]	@ 0x64
 800b0aa:	78a2      	ldrb	r2, [r4, #2]
 800b0ac:	e785      	b.n	800afba <_strtod_l+0x192>
 800b0ae:	f04f 0c01 	mov.w	ip, #1
 800b0b2:	e7f8      	b.n	800b0a6 <_strtod_l+0x27e>
 800b0b4:	0800d7e0 	.word	0x0800d7e0
 800b0b8:	0800d7c8 	.word	0x0800d7c8
 800b0bc:	7ff00000 	.word	0x7ff00000
 800b0c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b0c2:	1c51      	adds	r1, r2, #1
 800b0c4:	9119      	str	r1, [sp, #100]	@ 0x64
 800b0c6:	7852      	ldrb	r2, [r2, #1]
 800b0c8:	2a30      	cmp	r2, #48	@ 0x30
 800b0ca:	d0f9      	beq.n	800b0c0 <_strtod_l+0x298>
 800b0cc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b0d0:	2908      	cmp	r1, #8
 800b0d2:	f63f af78 	bhi.w	800afc6 <_strtod_l+0x19e>
 800b0d6:	3a30      	subs	r2, #48	@ 0x30
 800b0d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b0dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b0de:	f04f 080a 	mov.w	r8, #10
 800b0e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b0e4:	1c56      	adds	r6, r2, #1
 800b0e6:	9619      	str	r6, [sp, #100]	@ 0x64
 800b0e8:	7852      	ldrb	r2, [r2, #1]
 800b0ea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b0ee:	f1be 0f09 	cmp.w	lr, #9
 800b0f2:	d939      	bls.n	800b168 <_strtod_l+0x340>
 800b0f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b0f6:	1a76      	subs	r6, r6, r1
 800b0f8:	2e08      	cmp	r6, #8
 800b0fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b0fe:	dc03      	bgt.n	800b108 <_strtod_l+0x2e0>
 800b100:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b102:	4588      	cmp	r8, r1
 800b104:	bfa8      	it	ge
 800b106:	4688      	movge	r8, r1
 800b108:	f1bc 0f00 	cmp.w	ip, #0
 800b10c:	d001      	beq.n	800b112 <_strtod_l+0x2ea>
 800b10e:	f1c8 0800 	rsb	r8, r8, #0
 800b112:	2d00      	cmp	r5, #0
 800b114:	d14e      	bne.n	800b1b4 <_strtod_l+0x38c>
 800b116:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b118:	4308      	orrs	r0, r1
 800b11a:	f47f aebe 	bne.w	800ae9a <_strtod_l+0x72>
 800b11e:	2b00      	cmp	r3, #0
 800b120:	f47f aed6 	bne.w	800aed0 <_strtod_l+0xa8>
 800b124:	2a69      	cmp	r2, #105	@ 0x69
 800b126:	d028      	beq.n	800b17a <_strtod_l+0x352>
 800b128:	dc25      	bgt.n	800b176 <_strtod_l+0x34e>
 800b12a:	2a49      	cmp	r2, #73	@ 0x49
 800b12c:	d025      	beq.n	800b17a <_strtod_l+0x352>
 800b12e:	2a4e      	cmp	r2, #78	@ 0x4e
 800b130:	f47f aece 	bne.w	800aed0 <_strtod_l+0xa8>
 800b134:	499b      	ldr	r1, [pc, #620]	@ (800b3a4 <_strtod_l+0x57c>)
 800b136:	a819      	add	r0, sp, #100	@ 0x64
 800b138:	f001 fd6e 	bl	800cc18 <__match>
 800b13c:	2800      	cmp	r0, #0
 800b13e:	f43f aec7 	beq.w	800aed0 <_strtod_l+0xa8>
 800b142:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	2b28      	cmp	r3, #40	@ 0x28
 800b148:	d12e      	bne.n	800b1a8 <_strtod_l+0x380>
 800b14a:	4997      	ldr	r1, [pc, #604]	@ (800b3a8 <_strtod_l+0x580>)
 800b14c:	aa1c      	add	r2, sp, #112	@ 0x70
 800b14e:	a819      	add	r0, sp, #100	@ 0x64
 800b150:	f001 fd76 	bl	800cc40 <__hexnan>
 800b154:	2805      	cmp	r0, #5
 800b156:	d127      	bne.n	800b1a8 <_strtod_l+0x380>
 800b158:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b15a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b15e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b162:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b166:	e698      	b.n	800ae9a <_strtod_l+0x72>
 800b168:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b16a:	fb08 2101 	mla	r1, r8, r1, r2
 800b16e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b172:	920e      	str	r2, [sp, #56]	@ 0x38
 800b174:	e7b5      	b.n	800b0e2 <_strtod_l+0x2ba>
 800b176:	2a6e      	cmp	r2, #110	@ 0x6e
 800b178:	e7da      	b.n	800b130 <_strtod_l+0x308>
 800b17a:	498c      	ldr	r1, [pc, #560]	@ (800b3ac <_strtod_l+0x584>)
 800b17c:	a819      	add	r0, sp, #100	@ 0x64
 800b17e:	f001 fd4b 	bl	800cc18 <__match>
 800b182:	2800      	cmp	r0, #0
 800b184:	f43f aea4 	beq.w	800aed0 <_strtod_l+0xa8>
 800b188:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b18a:	4989      	ldr	r1, [pc, #548]	@ (800b3b0 <_strtod_l+0x588>)
 800b18c:	3b01      	subs	r3, #1
 800b18e:	a819      	add	r0, sp, #100	@ 0x64
 800b190:	9319      	str	r3, [sp, #100]	@ 0x64
 800b192:	f001 fd41 	bl	800cc18 <__match>
 800b196:	b910      	cbnz	r0, 800b19e <_strtod_l+0x376>
 800b198:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b19a:	3301      	adds	r3, #1
 800b19c:	9319      	str	r3, [sp, #100]	@ 0x64
 800b19e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b3c0 <_strtod_l+0x598>
 800b1a2:	f04f 0a00 	mov.w	sl, #0
 800b1a6:	e678      	b.n	800ae9a <_strtod_l+0x72>
 800b1a8:	4882      	ldr	r0, [pc, #520]	@ (800b3b4 <_strtod_l+0x58c>)
 800b1aa:	f001 fa71 	bl	800c690 <nan>
 800b1ae:	ec5b ab10 	vmov	sl, fp, d0
 800b1b2:	e672      	b.n	800ae9a <_strtod_l+0x72>
 800b1b4:	eba8 0309 	sub.w	r3, r8, r9
 800b1b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b1ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1bc:	2f00      	cmp	r7, #0
 800b1be:	bf08      	it	eq
 800b1c0:	462f      	moveq	r7, r5
 800b1c2:	2d10      	cmp	r5, #16
 800b1c4:	462c      	mov	r4, r5
 800b1c6:	bfa8      	it	ge
 800b1c8:	2410      	movge	r4, #16
 800b1ca:	f7f5 f9c3 	bl	8000554 <__aeabi_ui2d>
 800b1ce:	2d09      	cmp	r5, #9
 800b1d0:	4682      	mov	sl, r0
 800b1d2:	468b      	mov	fp, r1
 800b1d4:	dc13      	bgt.n	800b1fe <_strtod_l+0x3d6>
 800b1d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f43f ae5e 	beq.w	800ae9a <_strtod_l+0x72>
 800b1de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1e0:	dd78      	ble.n	800b2d4 <_strtod_l+0x4ac>
 800b1e2:	2b16      	cmp	r3, #22
 800b1e4:	dc5f      	bgt.n	800b2a6 <_strtod_l+0x47e>
 800b1e6:	4974      	ldr	r1, [pc, #464]	@ (800b3b8 <_strtod_l+0x590>)
 800b1e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b1ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1f0:	4652      	mov	r2, sl
 800b1f2:	465b      	mov	r3, fp
 800b1f4:	f7f5 fa28 	bl	8000648 <__aeabi_dmul>
 800b1f8:	4682      	mov	sl, r0
 800b1fa:	468b      	mov	fp, r1
 800b1fc:	e64d      	b.n	800ae9a <_strtod_l+0x72>
 800b1fe:	4b6e      	ldr	r3, [pc, #440]	@ (800b3b8 <_strtod_l+0x590>)
 800b200:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b204:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b208:	f7f5 fa1e 	bl	8000648 <__aeabi_dmul>
 800b20c:	4682      	mov	sl, r0
 800b20e:	9808      	ldr	r0, [sp, #32]
 800b210:	468b      	mov	fp, r1
 800b212:	f7f5 f99f 	bl	8000554 <__aeabi_ui2d>
 800b216:	4602      	mov	r2, r0
 800b218:	460b      	mov	r3, r1
 800b21a:	4650      	mov	r0, sl
 800b21c:	4659      	mov	r1, fp
 800b21e:	f7f5 f85d 	bl	80002dc <__adddf3>
 800b222:	2d0f      	cmp	r5, #15
 800b224:	4682      	mov	sl, r0
 800b226:	468b      	mov	fp, r1
 800b228:	ddd5      	ble.n	800b1d6 <_strtod_l+0x3ae>
 800b22a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b22c:	1b2c      	subs	r4, r5, r4
 800b22e:	441c      	add	r4, r3
 800b230:	2c00      	cmp	r4, #0
 800b232:	f340 8096 	ble.w	800b362 <_strtod_l+0x53a>
 800b236:	f014 030f 	ands.w	r3, r4, #15
 800b23a:	d00a      	beq.n	800b252 <_strtod_l+0x42a>
 800b23c:	495e      	ldr	r1, [pc, #376]	@ (800b3b8 <_strtod_l+0x590>)
 800b23e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b242:	4652      	mov	r2, sl
 800b244:	465b      	mov	r3, fp
 800b246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b24a:	f7f5 f9fd 	bl	8000648 <__aeabi_dmul>
 800b24e:	4682      	mov	sl, r0
 800b250:	468b      	mov	fp, r1
 800b252:	f034 040f 	bics.w	r4, r4, #15
 800b256:	d073      	beq.n	800b340 <_strtod_l+0x518>
 800b258:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b25c:	dd48      	ble.n	800b2f0 <_strtod_l+0x4c8>
 800b25e:	2400      	movs	r4, #0
 800b260:	46a0      	mov	r8, r4
 800b262:	940a      	str	r4, [sp, #40]	@ 0x28
 800b264:	46a1      	mov	r9, r4
 800b266:	9a05      	ldr	r2, [sp, #20]
 800b268:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b3c0 <_strtod_l+0x598>
 800b26c:	2322      	movs	r3, #34	@ 0x22
 800b26e:	6013      	str	r3, [r2, #0]
 800b270:	f04f 0a00 	mov.w	sl, #0
 800b274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b276:	2b00      	cmp	r3, #0
 800b278:	f43f ae0f 	beq.w	800ae9a <_strtod_l+0x72>
 800b27c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b27e:	9805      	ldr	r0, [sp, #20]
 800b280:	f7ff f942 	bl	800a508 <_Bfree>
 800b284:	9805      	ldr	r0, [sp, #20]
 800b286:	4649      	mov	r1, r9
 800b288:	f7ff f93e 	bl	800a508 <_Bfree>
 800b28c:	9805      	ldr	r0, [sp, #20]
 800b28e:	4641      	mov	r1, r8
 800b290:	f7ff f93a 	bl	800a508 <_Bfree>
 800b294:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b296:	9805      	ldr	r0, [sp, #20]
 800b298:	f7ff f936 	bl	800a508 <_Bfree>
 800b29c:	9805      	ldr	r0, [sp, #20]
 800b29e:	4621      	mov	r1, r4
 800b2a0:	f7ff f932 	bl	800a508 <_Bfree>
 800b2a4:	e5f9      	b.n	800ae9a <_strtod_l+0x72>
 800b2a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	dbbc      	blt.n	800b22a <_strtod_l+0x402>
 800b2b0:	4c41      	ldr	r4, [pc, #260]	@ (800b3b8 <_strtod_l+0x590>)
 800b2b2:	f1c5 050f 	rsb	r5, r5, #15
 800b2b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b2ba:	4652      	mov	r2, sl
 800b2bc:	465b      	mov	r3, fp
 800b2be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2c2:	f7f5 f9c1 	bl	8000648 <__aeabi_dmul>
 800b2c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2c8:	1b5d      	subs	r5, r3, r5
 800b2ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b2ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b2d2:	e78f      	b.n	800b1f4 <_strtod_l+0x3cc>
 800b2d4:	3316      	adds	r3, #22
 800b2d6:	dba8      	blt.n	800b22a <_strtod_l+0x402>
 800b2d8:	4b37      	ldr	r3, [pc, #220]	@ (800b3b8 <_strtod_l+0x590>)
 800b2da:	eba9 0808 	sub.w	r8, r9, r8
 800b2de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b2e2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b2e6:	4650      	mov	r0, sl
 800b2e8:	4659      	mov	r1, fp
 800b2ea:	f7f5 fad7 	bl	800089c <__aeabi_ddiv>
 800b2ee:	e783      	b.n	800b1f8 <_strtod_l+0x3d0>
 800b2f0:	4b32      	ldr	r3, [pc, #200]	@ (800b3bc <_strtod_l+0x594>)
 800b2f2:	9308      	str	r3, [sp, #32]
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	1124      	asrs	r4, r4, #4
 800b2f8:	4650      	mov	r0, sl
 800b2fa:	4659      	mov	r1, fp
 800b2fc:	461e      	mov	r6, r3
 800b2fe:	2c01      	cmp	r4, #1
 800b300:	dc21      	bgt.n	800b346 <_strtod_l+0x51e>
 800b302:	b10b      	cbz	r3, 800b308 <_strtod_l+0x4e0>
 800b304:	4682      	mov	sl, r0
 800b306:	468b      	mov	fp, r1
 800b308:	492c      	ldr	r1, [pc, #176]	@ (800b3bc <_strtod_l+0x594>)
 800b30a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b30e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b312:	4652      	mov	r2, sl
 800b314:	465b      	mov	r3, fp
 800b316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b31a:	f7f5 f995 	bl	8000648 <__aeabi_dmul>
 800b31e:	4b28      	ldr	r3, [pc, #160]	@ (800b3c0 <_strtod_l+0x598>)
 800b320:	460a      	mov	r2, r1
 800b322:	400b      	ands	r3, r1
 800b324:	4927      	ldr	r1, [pc, #156]	@ (800b3c4 <_strtod_l+0x59c>)
 800b326:	428b      	cmp	r3, r1
 800b328:	4682      	mov	sl, r0
 800b32a:	d898      	bhi.n	800b25e <_strtod_l+0x436>
 800b32c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b330:	428b      	cmp	r3, r1
 800b332:	bf86      	itte	hi
 800b334:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b3c8 <_strtod_l+0x5a0>
 800b338:	f04f 3aff 	movhi.w	sl, #4294967295
 800b33c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b340:	2300      	movs	r3, #0
 800b342:	9308      	str	r3, [sp, #32]
 800b344:	e07a      	b.n	800b43c <_strtod_l+0x614>
 800b346:	07e2      	lsls	r2, r4, #31
 800b348:	d505      	bpl.n	800b356 <_strtod_l+0x52e>
 800b34a:	9b08      	ldr	r3, [sp, #32]
 800b34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b350:	f7f5 f97a 	bl	8000648 <__aeabi_dmul>
 800b354:	2301      	movs	r3, #1
 800b356:	9a08      	ldr	r2, [sp, #32]
 800b358:	3208      	adds	r2, #8
 800b35a:	3601      	adds	r6, #1
 800b35c:	1064      	asrs	r4, r4, #1
 800b35e:	9208      	str	r2, [sp, #32]
 800b360:	e7cd      	b.n	800b2fe <_strtod_l+0x4d6>
 800b362:	d0ed      	beq.n	800b340 <_strtod_l+0x518>
 800b364:	4264      	negs	r4, r4
 800b366:	f014 020f 	ands.w	r2, r4, #15
 800b36a:	d00a      	beq.n	800b382 <_strtod_l+0x55a>
 800b36c:	4b12      	ldr	r3, [pc, #72]	@ (800b3b8 <_strtod_l+0x590>)
 800b36e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b372:	4650      	mov	r0, sl
 800b374:	4659      	mov	r1, fp
 800b376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37a:	f7f5 fa8f 	bl	800089c <__aeabi_ddiv>
 800b37e:	4682      	mov	sl, r0
 800b380:	468b      	mov	fp, r1
 800b382:	1124      	asrs	r4, r4, #4
 800b384:	d0dc      	beq.n	800b340 <_strtod_l+0x518>
 800b386:	2c1f      	cmp	r4, #31
 800b388:	dd20      	ble.n	800b3cc <_strtod_l+0x5a4>
 800b38a:	2400      	movs	r4, #0
 800b38c:	46a0      	mov	r8, r4
 800b38e:	940a      	str	r4, [sp, #40]	@ 0x28
 800b390:	46a1      	mov	r9, r4
 800b392:	9a05      	ldr	r2, [sp, #20]
 800b394:	2322      	movs	r3, #34	@ 0x22
 800b396:	f04f 0a00 	mov.w	sl, #0
 800b39a:	f04f 0b00 	mov.w	fp, #0
 800b39e:	6013      	str	r3, [r2, #0]
 800b3a0:	e768      	b.n	800b274 <_strtod_l+0x44c>
 800b3a2:	bf00      	nop
 800b3a4:	0800d5b9 	.word	0x0800d5b9
 800b3a8:	0800d7cc 	.word	0x0800d7cc
 800b3ac:	0800d5b1 	.word	0x0800d5b1
 800b3b0:	0800d5e6 	.word	0x0800d5e6
 800b3b4:	0800d990 	.word	0x0800d990
 800b3b8:	0800d700 	.word	0x0800d700
 800b3bc:	0800d6d8 	.word	0x0800d6d8
 800b3c0:	7ff00000 	.word	0x7ff00000
 800b3c4:	7ca00000 	.word	0x7ca00000
 800b3c8:	7fefffff 	.word	0x7fefffff
 800b3cc:	f014 0310 	ands.w	r3, r4, #16
 800b3d0:	bf18      	it	ne
 800b3d2:	236a      	movne	r3, #106	@ 0x6a
 800b3d4:	4ea9      	ldr	r6, [pc, #676]	@ (800b67c <_strtod_l+0x854>)
 800b3d6:	9308      	str	r3, [sp, #32]
 800b3d8:	4650      	mov	r0, sl
 800b3da:	4659      	mov	r1, fp
 800b3dc:	2300      	movs	r3, #0
 800b3de:	07e2      	lsls	r2, r4, #31
 800b3e0:	d504      	bpl.n	800b3ec <_strtod_l+0x5c4>
 800b3e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b3e6:	f7f5 f92f 	bl	8000648 <__aeabi_dmul>
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	1064      	asrs	r4, r4, #1
 800b3ee:	f106 0608 	add.w	r6, r6, #8
 800b3f2:	d1f4      	bne.n	800b3de <_strtod_l+0x5b6>
 800b3f4:	b10b      	cbz	r3, 800b3fa <_strtod_l+0x5d2>
 800b3f6:	4682      	mov	sl, r0
 800b3f8:	468b      	mov	fp, r1
 800b3fa:	9b08      	ldr	r3, [sp, #32]
 800b3fc:	b1b3      	cbz	r3, 800b42c <_strtod_l+0x604>
 800b3fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b402:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b406:	2b00      	cmp	r3, #0
 800b408:	4659      	mov	r1, fp
 800b40a:	dd0f      	ble.n	800b42c <_strtod_l+0x604>
 800b40c:	2b1f      	cmp	r3, #31
 800b40e:	dd55      	ble.n	800b4bc <_strtod_l+0x694>
 800b410:	2b34      	cmp	r3, #52	@ 0x34
 800b412:	bfde      	ittt	le
 800b414:	f04f 33ff 	movle.w	r3, #4294967295
 800b418:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b41c:	4093      	lslle	r3, r2
 800b41e:	f04f 0a00 	mov.w	sl, #0
 800b422:	bfcc      	ite	gt
 800b424:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b428:	ea03 0b01 	andle.w	fp, r3, r1
 800b42c:	2200      	movs	r2, #0
 800b42e:	2300      	movs	r3, #0
 800b430:	4650      	mov	r0, sl
 800b432:	4659      	mov	r1, fp
 800b434:	f7f5 fb70 	bl	8000b18 <__aeabi_dcmpeq>
 800b438:	2800      	cmp	r0, #0
 800b43a:	d1a6      	bne.n	800b38a <_strtod_l+0x562>
 800b43c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b442:	9805      	ldr	r0, [sp, #20]
 800b444:	462b      	mov	r3, r5
 800b446:	463a      	mov	r2, r7
 800b448:	f7ff f8c6 	bl	800a5d8 <__s2b>
 800b44c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b44e:	2800      	cmp	r0, #0
 800b450:	f43f af05 	beq.w	800b25e <_strtod_l+0x436>
 800b454:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b456:	2a00      	cmp	r2, #0
 800b458:	eba9 0308 	sub.w	r3, r9, r8
 800b45c:	bfa8      	it	ge
 800b45e:	2300      	movge	r3, #0
 800b460:	9312      	str	r3, [sp, #72]	@ 0x48
 800b462:	2400      	movs	r4, #0
 800b464:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b468:	9316      	str	r3, [sp, #88]	@ 0x58
 800b46a:	46a0      	mov	r8, r4
 800b46c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b46e:	9805      	ldr	r0, [sp, #20]
 800b470:	6859      	ldr	r1, [r3, #4]
 800b472:	f7ff f809 	bl	800a488 <_Balloc>
 800b476:	4681      	mov	r9, r0
 800b478:	2800      	cmp	r0, #0
 800b47a:	f43f aef4 	beq.w	800b266 <_strtod_l+0x43e>
 800b47e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b480:	691a      	ldr	r2, [r3, #16]
 800b482:	3202      	adds	r2, #2
 800b484:	f103 010c 	add.w	r1, r3, #12
 800b488:	0092      	lsls	r2, r2, #2
 800b48a:	300c      	adds	r0, #12
 800b48c:	f7fe f899 	bl	80095c2 <memcpy>
 800b490:	ec4b ab10 	vmov	d0, sl, fp
 800b494:	9805      	ldr	r0, [sp, #20]
 800b496:	aa1c      	add	r2, sp, #112	@ 0x70
 800b498:	a91b      	add	r1, sp, #108	@ 0x6c
 800b49a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b49e:	f7ff fbd7 	bl	800ac50 <__d2b>
 800b4a2:	901a      	str	r0, [sp, #104]	@ 0x68
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	f43f aede 	beq.w	800b266 <_strtod_l+0x43e>
 800b4aa:	9805      	ldr	r0, [sp, #20]
 800b4ac:	2101      	movs	r1, #1
 800b4ae:	f7ff f929 	bl	800a704 <__i2b>
 800b4b2:	4680      	mov	r8, r0
 800b4b4:	b948      	cbnz	r0, 800b4ca <_strtod_l+0x6a2>
 800b4b6:	f04f 0800 	mov.w	r8, #0
 800b4ba:	e6d4      	b.n	800b266 <_strtod_l+0x43e>
 800b4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b4c4:	ea03 0a0a 	and.w	sl, r3, sl
 800b4c8:	e7b0      	b.n	800b42c <_strtod_l+0x604>
 800b4ca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b4cc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b4ce:	2d00      	cmp	r5, #0
 800b4d0:	bfab      	itete	ge
 800b4d2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b4d4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b4d6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b4d8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b4da:	bfac      	ite	ge
 800b4dc:	18ef      	addge	r7, r5, r3
 800b4de:	1b5e      	sublt	r6, r3, r5
 800b4e0:	9b08      	ldr	r3, [sp, #32]
 800b4e2:	1aed      	subs	r5, r5, r3
 800b4e4:	4415      	add	r5, r2
 800b4e6:	4b66      	ldr	r3, [pc, #408]	@ (800b680 <_strtod_l+0x858>)
 800b4e8:	3d01      	subs	r5, #1
 800b4ea:	429d      	cmp	r5, r3
 800b4ec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b4f0:	da50      	bge.n	800b594 <_strtod_l+0x76c>
 800b4f2:	1b5b      	subs	r3, r3, r5
 800b4f4:	2b1f      	cmp	r3, #31
 800b4f6:	eba2 0203 	sub.w	r2, r2, r3
 800b4fa:	f04f 0101 	mov.w	r1, #1
 800b4fe:	dc3d      	bgt.n	800b57c <_strtod_l+0x754>
 800b500:	fa01 f303 	lsl.w	r3, r1, r3
 800b504:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b506:	2300      	movs	r3, #0
 800b508:	9310      	str	r3, [sp, #64]	@ 0x40
 800b50a:	18bd      	adds	r5, r7, r2
 800b50c:	9b08      	ldr	r3, [sp, #32]
 800b50e:	42af      	cmp	r7, r5
 800b510:	4416      	add	r6, r2
 800b512:	441e      	add	r6, r3
 800b514:	463b      	mov	r3, r7
 800b516:	bfa8      	it	ge
 800b518:	462b      	movge	r3, r5
 800b51a:	42b3      	cmp	r3, r6
 800b51c:	bfa8      	it	ge
 800b51e:	4633      	movge	r3, r6
 800b520:	2b00      	cmp	r3, #0
 800b522:	bfc2      	ittt	gt
 800b524:	1aed      	subgt	r5, r5, r3
 800b526:	1af6      	subgt	r6, r6, r3
 800b528:	1aff      	subgt	r7, r7, r3
 800b52a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	dd16      	ble.n	800b55e <_strtod_l+0x736>
 800b530:	4641      	mov	r1, r8
 800b532:	9805      	ldr	r0, [sp, #20]
 800b534:	461a      	mov	r2, r3
 800b536:	f7ff f9a5 	bl	800a884 <__pow5mult>
 800b53a:	4680      	mov	r8, r0
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d0ba      	beq.n	800b4b6 <_strtod_l+0x68e>
 800b540:	4601      	mov	r1, r0
 800b542:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b544:	9805      	ldr	r0, [sp, #20]
 800b546:	f7ff f8f3 	bl	800a730 <__multiply>
 800b54a:	900e      	str	r0, [sp, #56]	@ 0x38
 800b54c:	2800      	cmp	r0, #0
 800b54e:	f43f ae8a 	beq.w	800b266 <_strtod_l+0x43e>
 800b552:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b554:	9805      	ldr	r0, [sp, #20]
 800b556:	f7fe ffd7 	bl	800a508 <_Bfree>
 800b55a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b55c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b55e:	2d00      	cmp	r5, #0
 800b560:	dc1d      	bgt.n	800b59e <_strtod_l+0x776>
 800b562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b564:	2b00      	cmp	r3, #0
 800b566:	dd23      	ble.n	800b5b0 <_strtod_l+0x788>
 800b568:	4649      	mov	r1, r9
 800b56a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b56c:	9805      	ldr	r0, [sp, #20]
 800b56e:	f7ff f989 	bl	800a884 <__pow5mult>
 800b572:	4681      	mov	r9, r0
 800b574:	b9e0      	cbnz	r0, 800b5b0 <_strtod_l+0x788>
 800b576:	f04f 0900 	mov.w	r9, #0
 800b57a:	e674      	b.n	800b266 <_strtod_l+0x43e>
 800b57c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b580:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b584:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b588:	35e2      	adds	r5, #226	@ 0xe2
 800b58a:	fa01 f305 	lsl.w	r3, r1, r5
 800b58e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b590:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b592:	e7ba      	b.n	800b50a <_strtod_l+0x6e2>
 800b594:	2300      	movs	r3, #0
 800b596:	9310      	str	r3, [sp, #64]	@ 0x40
 800b598:	2301      	movs	r3, #1
 800b59a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b59c:	e7b5      	b.n	800b50a <_strtod_l+0x6e2>
 800b59e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b5a0:	9805      	ldr	r0, [sp, #20]
 800b5a2:	462a      	mov	r2, r5
 800b5a4:	f7ff f9c8 	bl	800a938 <__lshift>
 800b5a8:	901a      	str	r0, [sp, #104]	@ 0x68
 800b5aa:	2800      	cmp	r0, #0
 800b5ac:	d1d9      	bne.n	800b562 <_strtod_l+0x73a>
 800b5ae:	e65a      	b.n	800b266 <_strtod_l+0x43e>
 800b5b0:	2e00      	cmp	r6, #0
 800b5b2:	dd07      	ble.n	800b5c4 <_strtod_l+0x79c>
 800b5b4:	4649      	mov	r1, r9
 800b5b6:	9805      	ldr	r0, [sp, #20]
 800b5b8:	4632      	mov	r2, r6
 800b5ba:	f7ff f9bd 	bl	800a938 <__lshift>
 800b5be:	4681      	mov	r9, r0
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	d0d8      	beq.n	800b576 <_strtod_l+0x74e>
 800b5c4:	2f00      	cmp	r7, #0
 800b5c6:	dd08      	ble.n	800b5da <_strtod_l+0x7b2>
 800b5c8:	4641      	mov	r1, r8
 800b5ca:	9805      	ldr	r0, [sp, #20]
 800b5cc:	463a      	mov	r2, r7
 800b5ce:	f7ff f9b3 	bl	800a938 <__lshift>
 800b5d2:	4680      	mov	r8, r0
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	f43f ae46 	beq.w	800b266 <_strtod_l+0x43e>
 800b5da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b5dc:	9805      	ldr	r0, [sp, #20]
 800b5de:	464a      	mov	r2, r9
 800b5e0:	f7ff fa32 	bl	800aa48 <__mdiff>
 800b5e4:	4604      	mov	r4, r0
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	f43f ae3d 	beq.w	800b266 <_strtod_l+0x43e>
 800b5ec:	68c3      	ldr	r3, [r0, #12]
 800b5ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	60c3      	str	r3, [r0, #12]
 800b5f4:	4641      	mov	r1, r8
 800b5f6:	f7ff fa0b 	bl	800aa10 <__mcmp>
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	da46      	bge.n	800b68c <_strtod_l+0x864>
 800b5fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b600:	ea53 030a 	orrs.w	r3, r3, sl
 800b604:	d16c      	bne.n	800b6e0 <_strtod_l+0x8b8>
 800b606:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d168      	bne.n	800b6e0 <_strtod_l+0x8b8>
 800b60e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b612:	0d1b      	lsrs	r3, r3, #20
 800b614:	051b      	lsls	r3, r3, #20
 800b616:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b61a:	d961      	bls.n	800b6e0 <_strtod_l+0x8b8>
 800b61c:	6963      	ldr	r3, [r4, #20]
 800b61e:	b913      	cbnz	r3, 800b626 <_strtod_l+0x7fe>
 800b620:	6923      	ldr	r3, [r4, #16]
 800b622:	2b01      	cmp	r3, #1
 800b624:	dd5c      	ble.n	800b6e0 <_strtod_l+0x8b8>
 800b626:	4621      	mov	r1, r4
 800b628:	2201      	movs	r2, #1
 800b62a:	9805      	ldr	r0, [sp, #20]
 800b62c:	f7ff f984 	bl	800a938 <__lshift>
 800b630:	4641      	mov	r1, r8
 800b632:	4604      	mov	r4, r0
 800b634:	f7ff f9ec 	bl	800aa10 <__mcmp>
 800b638:	2800      	cmp	r0, #0
 800b63a:	dd51      	ble.n	800b6e0 <_strtod_l+0x8b8>
 800b63c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b640:	9a08      	ldr	r2, [sp, #32]
 800b642:	0d1b      	lsrs	r3, r3, #20
 800b644:	051b      	lsls	r3, r3, #20
 800b646:	2a00      	cmp	r2, #0
 800b648:	d06b      	beq.n	800b722 <_strtod_l+0x8fa>
 800b64a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b64e:	d868      	bhi.n	800b722 <_strtod_l+0x8fa>
 800b650:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b654:	f67f ae9d 	bls.w	800b392 <_strtod_l+0x56a>
 800b658:	4b0a      	ldr	r3, [pc, #40]	@ (800b684 <_strtod_l+0x85c>)
 800b65a:	4650      	mov	r0, sl
 800b65c:	4659      	mov	r1, fp
 800b65e:	2200      	movs	r2, #0
 800b660:	f7f4 fff2 	bl	8000648 <__aeabi_dmul>
 800b664:	4b08      	ldr	r3, [pc, #32]	@ (800b688 <_strtod_l+0x860>)
 800b666:	400b      	ands	r3, r1
 800b668:	4682      	mov	sl, r0
 800b66a:	468b      	mov	fp, r1
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f47f ae05 	bne.w	800b27c <_strtod_l+0x454>
 800b672:	9a05      	ldr	r2, [sp, #20]
 800b674:	2322      	movs	r3, #34	@ 0x22
 800b676:	6013      	str	r3, [r2, #0]
 800b678:	e600      	b.n	800b27c <_strtod_l+0x454>
 800b67a:	bf00      	nop
 800b67c:	0800d7f8 	.word	0x0800d7f8
 800b680:	fffffc02 	.word	0xfffffc02
 800b684:	39500000 	.word	0x39500000
 800b688:	7ff00000 	.word	0x7ff00000
 800b68c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b690:	d165      	bne.n	800b75e <_strtod_l+0x936>
 800b692:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b694:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b698:	b35a      	cbz	r2, 800b6f2 <_strtod_l+0x8ca>
 800b69a:	4a9f      	ldr	r2, [pc, #636]	@ (800b918 <_strtod_l+0xaf0>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d12b      	bne.n	800b6f8 <_strtod_l+0x8d0>
 800b6a0:	9b08      	ldr	r3, [sp, #32]
 800b6a2:	4651      	mov	r1, sl
 800b6a4:	b303      	cbz	r3, 800b6e8 <_strtod_l+0x8c0>
 800b6a6:	4b9d      	ldr	r3, [pc, #628]	@ (800b91c <_strtod_l+0xaf4>)
 800b6a8:	465a      	mov	r2, fp
 800b6aa:	4013      	ands	r3, r2
 800b6ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b6b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b6b4:	d81b      	bhi.n	800b6ee <_strtod_l+0x8c6>
 800b6b6:	0d1b      	lsrs	r3, r3, #20
 800b6b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b6bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b6c0:	4299      	cmp	r1, r3
 800b6c2:	d119      	bne.n	800b6f8 <_strtod_l+0x8d0>
 800b6c4:	4b96      	ldr	r3, [pc, #600]	@ (800b920 <_strtod_l+0xaf8>)
 800b6c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d102      	bne.n	800b6d2 <_strtod_l+0x8aa>
 800b6cc:	3101      	adds	r1, #1
 800b6ce:	f43f adca 	beq.w	800b266 <_strtod_l+0x43e>
 800b6d2:	4b92      	ldr	r3, [pc, #584]	@ (800b91c <_strtod_l+0xaf4>)
 800b6d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6d6:	401a      	ands	r2, r3
 800b6d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b6dc:	f04f 0a00 	mov.w	sl, #0
 800b6e0:	9b08      	ldr	r3, [sp, #32]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1b8      	bne.n	800b658 <_strtod_l+0x830>
 800b6e6:	e5c9      	b.n	800b27c <_strtod_l+0x454>
 800b6e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ec:	e7e8      	b.n	800b6c0 <_strtod_l+0x898>
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	e7e6      	b.n	800b6c0 <_strtod_l+0x898>
 800b6f2:	ea53 030a 	orrs.w	r3, r3, sl
 800b6f6:	d0a1      	beq.n	800b63c <_strtod_l+0x814>
 800b6f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b6fa:	b1db      	cbz	r3, 800b734 <_strtod_l+0x90c>
 800b6fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6fe:	4213      	tst	r3, r2
 800b700:	d0ee      	beq.n	800b6e0 <_strtod_l+0x8b8>
 800b702:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b704:	9a08      	ldr	r2, [sp, #32]
 800b706:	4650      	mov	r0, sl
 800b708:	4659      	mov	r1, fp
 800b70a:	b1bb      	cbz	r3, 800b73c <_strtod_l+0x914>
 800b70c:	f7ff fb6e 	bl	800adec <sulp>
 800b710:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b714:	ec53 2b10 	vmov	r2, r3, d0
 800b718:	f7f4 fde0 	bl	80002dc <__adddf3>
 800b71c:	4682      	mov	sl, r0
 800b71e:	468b      	mov	fp, r1
 800b720:	e7de      	b.n	800b6e0 <_strtod_l+0x8b8>
 800b722:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b726:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b72a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b72e:	f04f 3aff 	mov.w	sl, #4294967295
 800b732:	e7d5      	b.n	800b6e0 <_strtod_l+0x8b8>
 800b734:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b736:	ea13 0f0a 	tst.w	r3, sl
 800b73a:	e7e1      	b.n	800b700 <_strtod_l+0x8d8>
 800b73c:	f7ff fb56 	bl	800adec <sulp>
 800b740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b744:	ec53 2b10 	vmov	r2, r3, d0
 800b748:	f7f4 fdc6 	bl	80002d8 <__aeabi_dsub>
 800b74c:	2200      	movs	r2, #0
 800b74e:	2300      	movs	r3, #0
 800b750:	4682      	mov	sl, r0
 800b752:	468b      	mov	fp, r1
 800b754:	f7f5 f9e0 	bl	8000b18 <__aeabi_dcmpeq>
 800b758:	2800      	cmp	r0, #0
 800b75a:	d0c1      	beq.n	800b6e0 <_strtod_l+0x8b8>
 800b75c:	e619      	b.n	800b392 <_strtod_l+0x56a>
 800b75e:	4641      	mov	r1, r8
 800b760:	4620      	mov	r0, r4
 800b762:	f7ff facd 	bl	800ad00 <__ratio>
 800b766:	ec57 6b10 	vmov	r6, r7, d0
 800b76a:	2200      	movs	r2, #0
 800b76c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b770:	4630      	mov	r0, r6
 800b772:	4639      	mov	r1, r7
 800b774:	f7f5 f9e4 	bl	8000b40 <__aeabi_dcmple>
 800b778:	2800      	cmp	r0, #0
 800b77a:	d06f      	beq.n	800b85c <_strtod_l+0xa34>
 800b77c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d17a      	bne.n	800b878 <_strtod_l+0xa50>
 800b782:	f1ba 0f00 	cmp.w	sl, #0
 800b786:	d158      	bne.n	800b83a <_strtod_l+0xa12>
 800b788:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b78a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d15a      	bne.n	800b848 <_strtod_l+0xa20>
 800b792:	4b64      	ldr	r3, [pc, #400]	@ (800b924 <_strtod_l+0xafc>)
 800b794:	2200      	movs	r2, #0
 800b796:	4630      	mov	r0, r6
 800b798:	4639      	mov	r1, r7
 800b79a:	f7f5 f9c7 	bl	8000b2c <__aeabi_dcmplt>
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	d159      	bne.n	800b856 <_strtod_l+0xa2e>
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	4639      	mov	r1, r7
 800b7a6:	4b60      	ldr	r3, [pc, #384]	@ (800b928 <_strtod_l+0xb00>)
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f7f4 ff4d 	bl	8000648 <__aeabi_dmul>
 800b7ae:	4606      	mov	r6, r0
 800b7b0:	460f      	mov	r7, r1
 800b7b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b7b6:	9606      	str	r6, [sp, #24]
 800b7b8:	9307      	str	r3, [sp, #28]
 800b7ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7be:	4d57      	ldr	r5, [pc, #348]	@ (800b91c <_strtod_l+0xaf4>)
 800b7c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b7c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7c6:	401d      	ands	r5, r3
 800b7c8:	4b58      	ldr	r3, [pc, #352]	@ (800b92c <_strtod_l+0xb04>)
 800b7ca:	429d      	cmp	r5, r3
 800b7cc:	f040 80b2 	bne.w	800b934 <_strtod_l+0xb0c>
 800b7d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b7d6:	ec4b ab10 	vmov	d0, sl, fp
 800b7da:	f7ff f9c9 	bl	800ab70 <__ulp>
 800b7de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7e2:	ec51 0b10 	vmov	r0, r1, d0
 800b7e6:	f7f4 ff2f 	bl	8000648 <__aeabi_dmul>
 800b7ea:	4652      	mov	r2, sl
 800b7ec:	465b      	mov	r3, fp
 800b7ee:	f7f4 fd75 	bl	80002dc <__adddf3>
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	4949      	ldr	r1, [pc, #292]	@ (800b91c <_strtod_l+0xaf4>)
 800b7f6:	4a4e      	ldr	r2, [pc, #312]	@ (800b930 <_strtod_l+0xb08>)
 800b7f8:	4019      	ands	r1, r3
 800b7fa:	4291      	cmp	r1, r2
 800b7fc:	4682      	mov	sl, r0
 800b7fe:	d942      	bls.n	800b886 <_strtod_l+0xa5e>
 800b800:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b802:	4b47      	ldr	r3, [pc, #284]	@ (800b920 <_strtod_l+0xaf8>)
 800b804:	429a      	cmp	r2, r3
 800b806:	d103      	bne.n	800b810 <_strtod_l+0x9e8>
 800b808:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b80a:	3301      	adds	r3, #1
 800b80c:	f43f ad2b 	beq.w	800b266 <_strtod_l+0x43e>
 800b810:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b920 <_strtod_l+0xaf8>
 800b814:	f04f 3aff 	mov.w	sl, #4294967295
 800b818:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b81a:	9805      	ldr	r0, [sp, #20]
 800b81c:	f7fe fe74 	bl	800a508 <_Bfree>
 800b820:	9805      	ldr	r0, [sp, #20]
 800b822:	4649      	mov	r1, r9
 800b824:	f7fe fe70 	bl	800a508 <_Bfree>
 800b828:	9805      	ldr	r0, [sp, #20]
 800b82a:	4641      	mov	r1, r8
 800b82c:	f7fe fe6c 	bl	800a508 <_Bfree>
 800b830:	9805      	ldr	r0, [sp, #20]
 800b832:	4621      	mov	r1, r4
 800b834:	f7fe fe68 	bl	800a508 <_Bfree>
 800b838:	e618      	b.n	800b46c <_strtod_l+0x644>
 800b83a:	f1ba 0f01 	cmp.w	sl, #1
 800b83e:	d103      	bne.n	800b848 <_strtod_l+0xa20>
 800b840:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b842:	2b00      	cmp	r3, #0
 800b844:	f43f ada5 	beq.w	800b392 <_strtod_l+0x56a>
 800b848:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b8f8 <_strtod_l+0xad0>
 800b84c:	4f35      	ldr	r7, [pc, #212]	@ (800b924 <_strtod_l+0xafc>)
 800b84e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b852:	2600      	movs	r6, #0
 800b854:	e7b1      	b.n	800b7ba <_strtod_l+0x992>
 800b856:	4f34      	ldr	r7, [pc, #208]	@ (800b928 <_strtod_l+0xb00>)
 800b858:	2600      	movs	r6, #0
 800b85a:	e7aa      	b.n	800b7b2 <_strtod_l+0x98a>
 800b85c:	4b32      	ldr	r3, [pc, #200]	@ (800b928 <_strtod_l+0xb00>)
 800b85e:	4630      	mov	r0, r6
 800b860:	4639      	mov	r1, r7
 800b862:	2200      	movs	r2, #0
 800b864:	f7f4 fef0 	bl	8000648 <__aeabi_dmul>
 800b868:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b86a:	4606      	mov	r6, r0
 800b86c:	460f      	mov	r7, r1
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d09f      	beq.n	800b7b2 <_strtod_l+0x98a>
 800b872:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b876:	e7a0      	b.n	800b7ba <_strtod_l+0x992>
 800b878:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b900 <_strtod_l+0xad8>
 800b87c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b880:	ec57 6b17 	vmov	r6, r7, d7
 800b884:	e799      	b.n	800b7ba <_strtod_l+0x992>
 800b886:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b88a:	9b08      	ldr	r3, [sp, #32]
 800b88c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b890:	2b00      	cmp	r3, #0
 800b892:	d1c1      	bne.n	800b818 <_strtod_l+0x9f0>
 800b894:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b898:	0d1b      	lsrs	r3, r3, #20
 800b89a:	051b      	lsls	r3, r3, #20
 800b89c:	429d      	cmp	r5, r3
 800b89e:	d1bb      	bne.n	800b818 <_strtod_l+0x9f0>
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	4639      	mov	r1, r7
 800b8a4:	f7f5 fa30 	bl	8000d08 <__aeabi_d2lz>
 800b8a8:	f7f4 fea0 	bl	80005ec <__aeabi_l2d>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	4630      	mov	r0, r6
 800b8b2:	4639      	mov	r1, r7
 800b8b4:	f7f4 fd10 	bl	80002d8 <__aeabi_dsub>
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b8c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b8c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8c6:	ea46 060a 	orr.w	r6, r6, sl
 800b8ca:	431e      	orrs	r6, r3
 800b8cc:	d06f      	beq.n	800b9ae <_strtod_l+0xb86>
 800b8ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800b908 <_strtod_l+0xae0>)
 800b8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d4:	f7f5 f92a 	bl	8000b2c <__aeabi_dcmplt>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	f47f accf 	bne.w	800b27c <_strtod_l+0x454>
 800b8de:	a30c      	add	r3, pc, #48	@ (adr r3, 800b910 <_strtod_l+0xae8>)
 800b8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b8e8:	f7f5 f93e 	bl	8000b68 <__aeabi_dcmpgt>
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	d093      	beq.n	800b818 <_strtod_l+0x9f0>
 800b8f0:	e4c4      	b.n	800b27c <_strtod_l+0x454>
 800b8f2:	bf00      	nop
 800b8f4:	f3af 8000 	nop.w
 800b8f8:	00000000 	.word	0x00000000
 800b8fc:	bff00000 	.word	0xbff00000
 800b900:	00000000 	.word	0x00000000
 800b904:	3ff00000 	.word	0x3ff00000
 800b908:	94a03595 	.word	0x94a03595
 800b90c:	3fdfffff 	.word	0x3fdfffff
 800b910:	35afe535 	.word	0x35afe535
 800b914:	3fe00000 	.word	0x3fe00000
 800b918:	000fffff 	.word	0x000fffff
 800b91c:	7ff00000 	.word	0x7ff00000
 800b920:	7fefffff 	.word	0x7fefffff
 800b924:	3ff00000 	.word	0x3ff00000
 800b928:	3fe00000 	.word	0x3fe00000
 800b92c:	7fe00000 	.word	0x7fe00000
 800b930:	7c9fffff 	.word	0x7c9fffff
 800b934:	9b08      	ldr	r3, [sp, #32]
 800b936:	b323      	cbz	r3, 800b982 <_strtod_l+0xb5a>
 800b938:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b93c:	d821      	bhi.n	800b982 <_strtod_l+0xb5a>
 800b93e:	a328      	add	r3, pc, #160	@ (adr r3, 800b9e0 <_strtod_l+0xbb8>)
 800b940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b944:	4630      	mov	r0, r6
 800b946:	4639      	mov	r1, r7
 800b948:	f7f5 f8fa 	bl	8000b40 <__aeabi_dcmple>
 800b94c:	b1a0      	cbz	r0, 800b978 <_strtod_l+0xb50>
 800b94e:	4639      	mov	r1, r7
 800b950:	4630      	mov	r0, r6
 800b952:	f7f5 f951 	bl	8000bf8 <__aeabi_d2uiz>
 800b956:	2801      	cmp	r0, #1
 800b958:	bf38      	it	cc
 800b95a:	2001      	movcc	r0, #1
 800b95c:	f7f4 fdfa 	bl	8000554 <__aeabi_ui2d>
 800b960:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b962:	4606      	mov	r6, r0
 800b964:	460f      	mov	r7, r1
 800b966:	b9fb      	cbnz	r3, 800b9a8 <_strtod_l+0xb80>
 800b968:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b96c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b96e:	9315      	str	r3, [sp, #84]	@ 0x54
 800b970:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b974:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b978:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b97a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b97e:	1b5b      	subs	r3, r3, r5
 800b980:	9311      	str	r3, [sp, #68]	@ 0x44
 800b982:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b986:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b98a:	f7ff f8f1 	bl	800ab70 <__ulp>
 800b98e:	4650      	mov	r0, sl
 800b990:	ec53 2b10 	vmov	r2, r3, d0
 800b994:	4659      	mov	r1, fp
 800b996:	f7f4 fe57 	bl	8000648 <__aeabi_dmul>
 800b99a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b99e:	f7f4 fc9d 	bl	80002dc <__adddf3>
 800b9a2:	4682      	mov	sl, r0
 800b9a4:	468b      	mov	fp, r1
 800b9a6:	e770      	b.n	800b88a <_strtod_l+0xa62>
 800b9a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b9ac:	e7e0      	b.n	800b970 <_strtod_l+0xb48>
 800b9ae:	a30e      	add	r3, pc, #56	@ (adr r3, 800b9e8 <_strtod_l+0xbc0>)
 800b9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b4:	f7f5 f8ba 	bl	8000b2c <__aeabi_dcmplt>
 800b9b8:	e798      	b.n	800b8ec <_strtod_l+0xac4>
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b9c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9c2:	6013      	str	r3, [r2, #0]
 800b9c4:	f7ff ba6d 	b.w	800aea2 <_strtod_l+0x7a>
 800b9c8:	2a65      	cmp	r2, #101	@ 0x65
 800b9ca:	f43f ab66 	beq.w	800b09a <_strtod_l+0x272>
 800b9ce:	2a45      	cmp	r2, #69	@ 0x45
 800b9d0:	f43f ab63 	beq.w	800b09a <_strtod_l+0x272>
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	f7ff bb9e 	b.w	800b116 <_strtod_l+0x2ee>
 800b9da:	bf00      	nop
 800b9dc:	f3af 8000 	nop.w
 800b9e0:	ffc00000 	.word	0xffc00000
 800b9e4:	41dfffff 	.word	0x41dfffff
 800b9e8:	94a03595 	.word	0x94a03595
 800b9ec:	3fcfffff 	.word	0x3fcfffff

0800b9f0 <_strtod_r>:
 800b9f0:	4b01      	ldr	r3, [pc, #4]	@ (800b9f8 <_strtod_r+0x8>)
 800b9f2:	f7ff ba19 	b.w	800ae28 <_strtod_l>
 800b9f6:	bf00      	nop
 800b9f8:	20000064 	.word	0x20000064

0800b9fc <_strtol_l.constprop.0>:
 800b9fc:	2b24      	cmp	r3, #36	@ 0x24
 800b9fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba02:	4686      	mov	lr, r0
 800ba04:	4690      	mov	r8, r2
 800ba06:	d801      	bhi.n	800ba0c <_strtol_l.constprop.0+0x10>
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d106      	bne.n	800ba1a <_strtol_l.constprop.0+0x1e>
 800ba0c:	f7fd fdac 	bl	8009568 <__errno>
 800ba10:	2316      	movs	r3, #22
 800ba12:	6003      	str	r3, [r0, #0]
 800ba14:	2000      	movs	r0, #0
 800ba16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba1a:	4834      	ldr	r0, [pc, #208]	@ (800baec <_strtol_l.constprop.0+0xf0>)
 800ba1c:	460d      	mov	r5, r1
 800ba1e:	462a      	mov	r2, r5
 800ba20:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba24:	5d06      	ldrb	r6, [r0, r4]
 800ba26:	f016 0608 	ands.w	r6, r6, #8
 800ba2a:	d1f8      	bne.n	800ba1e <_strtol_l.constprop.0+0x22>
 800ba2c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ba2e:	d12d      	bne.n	800ba8c <_strtol_l.constprop.0+0x90>
 800ba30:	782c      	ldrb	r4, [r5, #0]
 800ba32:	2601      	movs	r6, #1
 800ba34:	1c95      	adds	r5, r2, #2
 800ba36:	f033 0210 	bics.w	r2, r3, #16
 800ba3a:	d109      	bne.n	800ba50 <_strtol_l.constprop.0+0x54>
 800ba3c:	2c30      	cmp	r4, #48	@ 0x30
 800ba3e:	d12a      	bne.n	800ba96 <_strtol_l.constprop.0+0x9a>
 800ba40:	782a      	ldrb	r2, [r5, #0]
 800ba42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ba46:	2a58      	cmp	r2, #88	@ 0x58
 800ba48:	d125      	bne.n	800ba96 <_strtol_l.constprop.0+0x9a>
 800ba4a:	786c      	ldrb	r4, [r5, #1]
 800ba4c:	2310      	movs	r3, #16
 800ba4e:	3502      	adds	r5, #2
 800ba50:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ba54:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ba58:	2200      	movs	r2, #0
 800ba5a:	fbbc f9f3 	udiv	r9, ip, r3
 800ba5e:	4610      	mov	r0, r2
 800ba60:	fb03 ca19 	mls	sl, r3, r9, ip
 800ba64:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ba68:	2f09      	cmp	r7, #9
 800ba6a:	d81b      	bhi.n	800baa4 <_strtol_l.constprop.0+0xa8>
 800ba6c:	463c      	mov	r4, r7
 800ba6e:	42a3      	cmp	r3, r4
 800ba70:	dd27      	ble.n	800bac2 <_strtol_l.constprop.0+0xc6>
 800ba72:	1c57      	adds	r7, r2, #1
 800ba74:	d007      	beq.n	800ba86 <_strtol_l.constprop.0+0x8a>
 800ba76:	4581      	cmp	r9, r0
 800ba78:	d320      	bcc.n	800babc <_strtol_l.constprop.0+0xc0>
 800ba7a:	d101      	bne.n	800ba80 <_strtol_l.constprop.0+0x84>
 800ba7c:	45a2      	cmp	sl, r4
 800ba7e:	db1d      	blt.n	800babc <_strtol_l.constprop.0+0xc0>
 800ba80:	fb00 4003 	mla	r0, r0, r3, r4
 800ba84:	2201      	movs	r2, #1
 800ba86:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba8a:	e7eb      	b.n	800ba64 <_strtol_l.constprop.0+0x68>
 800ba8c:	2c2b      	cmp	r4, #43	@ 0x2b
 800ba8e:	bf04      	itt	eq
 800ba90:	782c      	ldrbeq	r4, [r5, #0]
 800ba92:	1c95      	addeq	r5, r2, #2
 800ba94:	e7cf      	b.n	800ba36 <_strtol_l.constprop.0+0x3a>
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d1da      	bne.n	800ba50 <_strtol_l.constprop.0+0x54>
 800ba9a:	2c30      	cmp	r4, #48	@ 0x30
 800ba9c:	bf0c      	ite	eq
 800ba9e:	2308      	moveq	r3, #8
 800baa0:	230a      	movne	r3, #10
 800baa2:	e7d5      	b.n	800ba50 <_strtol_l.constprop.0+0x54>
 800baa4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800baa8:	2f19      	cmp	r7, #25
 800baaa:	d801      	bhi.n	800bab0 <_strtol_l.constprop.0+0xb4>
 800baac:	3c37      	subs	r4, #55	@ 0x37
 800baae:	e7de      	b.n	800ba6e <_strtol_l.constprop.0+0x72>
 800bab0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bab4:	2f19      	cmp	r7, #25
 800bab6:	d804      	bhi.n	800bac2 <_strtol_l.constprop.0+0xc6>
 800bab8:	3c57      	subs	r4, #87	@ 0x57
 800baba:	e7d8      	b.n	800ba6e <_strtol_l.constprop.0+0x72>
 800babc:	f04f 32ff 	mov.w	r2, #4294967295
 800bac0:	e7e1      	b.n	800ba86 <_strtol_l.constprop.0+0x8a>
 800bac2:	1c53      	adds	r3, r2, #1
 800bac4:	d108      	bne.n	800bad8 <_strtol_l.constprop.0+0xdc>
 800bac6:	2322      	movs	r3, #34	@ 0x22
 800bac8:	f8ce 3000 	str.w	r3, [lr]
 800bacc:	4660      	mov	r0, ip
 800bace:	f1b8 0f00 	cmp.w	r8, #0
 800bad2:	d0a0      	beq.n	800ba16 <_strtol_l.constprop.0+0x1a>
 800bad4:	1e69      	subs	r1, r5, #1
 800bad6:	e006      	b.n	800bae6 <_strtol_l.constprop.0+0xea>
 800bad8:	b106      	cbz	r6, 800badc <_strtol_l.constprop.0+0xe0>
 800bada:	4240      	negs	r0, r0
 800badc:	f1b8 0f00 	cmp.w	r8, #0
 800bae0:	d099      	beq.n	800ba16 <_strtol_l.constprop.0+0x1a>
 800bae2:	2a00      	cmp	r2, #0
 800bae4:	d1f6      	bne.n	800bad4 <_strtol_l.constprop.0+0xd8>
 800bae6:	f8c8 1000 	str.w	r1, [r8]
 800baea:	e794      	b.n	800ba16 <_strtol_l.constprop.0+0x1a>
 800baec:	0800d821 	.word	0x0800d821

0800baf0 <_strtol_r>:
 800baf0:	f7ff bf84 	b.w	800b9fc <_strtol_l.constprop.0>

0800baf4 <__ssputs_r>:
 800baf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baf8:	688e      	ldr	r6, [r1, #8]
 800bafa:	461f      	mov	r7, r3
 800bafc:	42be      	cmp	r6, r7
 800bafe:	680b      	ldr	r3, [r1, #0]
 800bb00:	4682      	mov	sl, r0
 800bb02:	460c      	mov	r4, r1
 800bb04:	4690      	mov	r8, r2
 800bb06:	d82d      	bhi.n	800bb64 <__ssputs_r+0x70>
 800bb08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bb10:	d026      	beq.n	800bb60 <__ssputs_r+0x6c>
 800bb12:	6965      	ldr	r5, [r4, #20]
 800bb14:	6909      	ldr	r1, [r1, #16]
 800bb16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb1a:	eba3 0901 	sub.w	r9, r3, r1
 800bb1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb22:	1c7b      	adds	r3, r7, #1
 800bb24:	444b      	add	r3, r9
 800bb26:	106d      	asrs	r5, r5, #1
 800bb28:	429d      	cmp	r5, r3
 800bb2a:	bf38      	it	cc
 800bb2c:	461d      	movcc	r5, r3
 800bb2e:	0553      	lsls	r3, r2, #21
 800bb30:	d527      	bpl.n	800bb82 <__ssputs_r+0x8e>
 800bb32:	4629      	mov	r1, r5
 800bb34:	f7fe fc1c 	bl	800a370 <_malloc_r>
 800bb38:	4606      	mov	r6, r0
 800bb3a:	b360      	cbz	r0, 800bb96 <__ssputs_r+0xa2>
 800bb3c:	6921      	ldr	r1, [r4, #16]
 800bb3e:	464a      	mov	r2, r9
 800bb40:	f7fd fd3f 	bl	80095c2 <memcpy>
 800bb44:	89a3      	ldrh	r3, [r4, #12]
 800bb46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bb4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb4e:	81a3      	strh	r3, [r4, #12]
 800bb50:	6126      	str	r6, [r4, #16]
 800bb52:	6165      	str	r5, [r4, #20]
 800bb54:	444e      	add	r6, r9
 800bb56:	eba5 0509 	sub.w	r5, r5, r9
 800bb5a:	6026      	str	r6, [r4, #0]
 800bb5c:	60a5      	str	r5, [r4, #8]
 800bb5e:	463e      	mov	r6, r7
 800bb60:	42be      	cmp	r6, r7
 800bb62:	d900      	bls.n	800bb66 <__ssputs_r+0x72>
 800bb64:	463e      	mov	r6, r7
 800bb66:	6820      	ldr	r0, [r4, #0]
 800bb68:	4632      	mov	r2, r6
 800bb6a:	4641      	mov	r1, r8
 800bb6c:	f000 fd53 	bl	800c616 <memmove>
 800bb70:	68a3      	ldr	r3, [r4, #8]
 800bb72:	1b9b      	subs	r3, r3, r6
 800bb74:	60a3      	str	r3, [r4, #8]
 800bb76:	6823      	ldr	r3, [r4, #0]
 800bb78:	4433      	add	r3, r6
 800bb7a:	6023      	str	r3, [r4, #0]
 800bb7c:	2000      	movs	r0, #0
 800bb7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb82:	462a      	mov	r2, r5
 800bb84:	f001 f909 	bl	800cd9a <_realloc_r>
 800bb88:	4606      	mov	r6, r0
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d1e0      	bne.n	800bb50 <__ssputs_r+0x5c>
 800bb8e:	6921      	ldr	r1, [r4, #16]
 800bb90:	4650      	mov	r0, sl
 800bb92:	f7fe fb79 	bl	800a288 <_free_r>
 800bb96:	230c      	movs	r3, #12
 800bb98:	f8ca 3000 	str.w	r3, [sl]
 800bb9c:	89a3      	ldrh	r3, [r4, #12]
 800bb9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bba2:	81a3      	strh	r3, [r4, #12]
 800bba4:	f04f 30ff 	mov.w	r0, #4294967295
 800bba8:	e7e9      	b.n	800bb7e <__ssputs_r+0x8a>
	...

0800bbac <_svfiprintf_r>:
 800bbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbb0:	4698      	mov	r8, r3
 800bbb2:	898b      	ldrh	r3, [r1, #12]
 800bbb4:	061b      	lsls	r3, r3, #24
 800bbb6:	b09d      	sub	sp, #116	@ 0x74
 800bbb8:	4607      	mov	r7, r0
 800bbba:	460d      	mov	r5, r1
 800bbbc:	4614      	mov	r4, r2
 800bbbe:	d510      	bpl.n	800bbe2 <_svfiprintf_r+0x36>
 800bbc0:	690b      	ldr	r3, [r1, #16]
 800bbc2:	b973      	cbnz	r3, 800bbe2 <_svfiprintf_r+0x36>
 800bbc4:	2140      	movs	r1, #64	@ 0x40
 800bbc6:	f7fe fbd3 	bl	800a370 <_malloc_r>
 800bbca:	6028      	str	r0, [r5, #0]
 800bbcc:	6128      	str	r0, [r5, #16]
 800bbce:	b930      	cbnz	r0, 800bbde <_svfiprintf_r+0x32>
 800bbd0:	230c      	movs	r3, #12
 800bbd2:	603b      	str	r3, [r7, #0]
 800bbd4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd8:	b01d      	add	sp, #116	@ 0x74
 800bbda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbde:	2340      	movs	r3, #64	@ 0x40
 800bbe0:	616b      	str	r3, [r5, #20]
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbe6:	2320      	movs	r3, #32
 800bbe8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bbec:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbf0:	2330      	movs	r3, #48	@ 0x30
 800bbf2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bd90 <_svfiprintf_r+0x1e4>
 800bbf6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bbfa:	f04f 0901 	mov.w	r9, #1
 800bbfe:	4623      	mov	r3, r4
 800bc00:	469a      	mov	sl, r3
 800bc02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc06:	b10a      	cbz	r2, 800bc0c <_svfiprintf_r+0x60>
 800bc08:	2a25      	cmp	r2, #37	@ 0x25
 800bc0a:	d1f9      	bne.n	800bc00 <_svfiprintf_r+0x54>
 800bc0c:	ebba 0b04 	subs.w	fp, sl, r4
 800bc10:	d00b      	beq.n	800bc2a <_svfiprintf_r+0x7e>
 800bc12:	465b      	mov	r3, fp
 800bc14:	4622      	mov	r2, r4
 800bc16:	4629      	mov	r1, r5
 800bc18:	4638      	mov	r0, r7
 800bc1a:	f7ff ff6b 	bl	800baf4 <__ssputs_r>
 800bc1e:	3001      	adds	r0, #1
 800bc20:	f000 80a7 	beq.w	800bd72 <_svfiprintf_r+0x1c6>
 800bc24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc26:	445a      	add	r2, fp
 800bc28:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc2a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	f000 809f 	beq.w	800bd72 <_svfiprintf_r+0x1c6>
 800bc34:	2300      	movs	r3, #0
 800bc36:	f04f 32ff 	mov.w	r2, #4294967295
 800bc3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc3e:	f10a 0a01 	add.w	sl, sl, #1
 800bc42:	9304      	str	r3, [sp, #16]
 800bc44:	9307      	str	r3, [sp, #28]
 800bc46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc4a:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc4c:	4654      	mov	r4, sl
 800bc4e:	2205      	movs	r2, #5
 800bc50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc54:	484e      	ldr	r0, [pc, #312]	@ (800bd90 <_svfiprintf_r+0x1e4>)
 800bc56:	f7f4 fae3 	bl	8000220 <memchr>
 800bc5a:	9a04      	ldr	r2, [sp, #16]
 800bc5c:	b9d8      	cbnz	r0, 800bc96 <_svfiprintf_r+0xea>
 800bc5e:	06d0      	lsls	r0, r2, #27
 800bc60:	bf44      	itt	mi
 800bc62:	2320      	movmi	r3, #32
 800bc64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc68:	0711      	lsls	r1, r2, #28
 800bc6a:	bf44      	itt	mi
 800bc6c:	232b      	movmi	r3, #43	@ 0x2b
 800bc6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc72:	f89a 3000 	ldrb.w	r3, [sl]
 800bc76:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc78:	d015      	beq.n	800bca6 <_svfiprintf_r+0xfa>
 800bc7a:	9a07      	ldr	r2, [sp, #28]
 800bc7c:	4654      	mov	r4, sl
 800bc7e:	2000      	movs	r0, #0
 800bc80:	f04f 0c0a 	mov.w	ip, #10
 800bc84:	4621      	mov	r1, r4
 800bc86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc8a:	3b30      	subs	r3, #48	@ 0x30
 800bc8c:	2b09      	cmp	r3, #9
 800bc8e:	d94b      	bls.n	800bd28 <_svfiprintf_r+0x17c>
 800bc90:	b1b0      	cbz	r0, 800bcc0 <_svfiprintf_r+0x114>
 800bc92:	9207      	str	r2, [sp, #28]
 800bc94:	e014      	b.n	800bcc0 <_svfiprintf_r+0x114>
 800bc96:	eba0 0308 	sub.w	r3, r0, r8
 800bc9a:	fa09 f303 	lsl.w	r3, r9, r3
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	9304      	str	r3, [sp, #16]
 800bca2:	46a2      	mov	sl, r4
 800bca4:	e7d2      	b.n	800bc4c <_svfiprintf_r+0xa0>
 800bca6:	9b03      	ldr	r3, [sp, #12]
 800bca8:	1d19      	adds	r1, r3, #4
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	9103      	str	r1, [sp, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	bfbb      	ittet	lt
 800bcb2:	425b      	neglt	r3, r3
 800bcb4:	f042 0202 	orrlt.w	r2, r2, #2
 800bcb8:	9307      	strge	r3, [sp, #28]
 800bcba:	9307      	strlt	r3, [sp, #28]
 800bcbc:	bfb8      	it	lt
 800bcbe:	9204      	strlt	r2, [sp, #16]
 800bcc0:	7823      	ldrb	r3, [r4, #0]
 800bcc2:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcc4:	d10a      	bne.n	800bcdc <_svfiprintf_r+0x130>
 800bcc6:	7863      	ldrb	r3, [r4, #1]
 800bcc8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcca:	d132      	bne.n	800bd32 <_svfiprintf_r+0x186>
 800bccc:	9b03      	ldr	r3, [sp, #12]
 800bcce:	1d1a      	adds	r2, r3, #4
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	9203      	str	r2, [sp, #12]
 800bcd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bcd8:	3402      	adds	r4, #2
 800bcda:	9305      	str	r3, [sp, #20]
 800bcdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bda0 <_svfiprintf_r+0x1f4>
 800bce0:	7821      	ldrb	r1, [r4, #0]
 800bce2:	2203      	movs	r2, #3
 800bce4:	4650      	mov	r0, sl
 800bce6:	f7f4 fa9b 	bl	8000220 <memchr>
 800bcea:	b138      	cbz	r0, 800bcfc <_svfiprintf_r+0x150>
 800bcec:	9b04      	ldr	r3, [sp, #16]
 800bcee:	eba0 000a 	sub.w	r0, r0, sl
 800bcf2:	2240      	movs	r2, #64	@ 0x40
 800bcf4:	4082      	lsls	r2, r0
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	3401      	adds	r4, #1
 800bcfa:	9304      	str	r3, [sp, #16]
 800bcfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd00:	4824      	ldr	r0, [pc, #144]	@ (800bd94 <_svfiprintf_r+0x1e8>)
 800bd02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd06:	2206      	movs	r2, #6
 800bd08:	f7f4 fa8a 	bl	8000220 <memchr>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	d036      	beq.n	800bd7e <_svfiprintf_r+0x1d2>
 800bd10:	4b21      	ldr	r3, [pc, #132]	@ (800bd98 <_svfiprintf_r+0x1ec>)
 800bd12:	bb1b      	cbnz	r3, 800bd5c <_svfiprintf_r+0x1b0>
 800bd14:	9b03      	ldr	r3, [sp, #12]
 800bd16:	3307      	adds	r3, #7
 800bd18:	f023 0307 	bic.w	r3, r3, #7
 800bd1c:	3308      	adds	r3, #8
 800bd1e:	9303      	str	r3, [sp, #12]
 800bd20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd22:	4433      	add	r3, r6
 800bd24:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd26:	e76a      	b.n	800bbfe <_svfiprintf_r+0x52>
 800bd28:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd2c:	460c      	mov	r4, r1
 800bd2e:	2001      	movs	r0, #1
 800bd30:	e7a8      	b.n	800bc84 <_svfiprintf_r+0xd8>
 800bd32:	2300      	movs	r3, #0
 800bd34:	3401      	adds	r4, #1
 800bd36:	9305      	str	r3, [sp, #20]
 800bd38:	4619      	mov	r1, r3
 800bd3a:	f04f 0c0a 	mov.w	ip, #10
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd44:	3a30      	subs	r2, #48	@ 0x30
 800bd46:	2a09      	cmp	r2, #9
 800bd48:	d903      	bls.n	800bd52 <_svfiprintf_r+0x1a6>
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d0c6      	beq.n	800bcdc <_svfiprintf_r+0x130>
 800bd4e:	9105      	str	r1, [sp, #20]
 800bd50:	e7c4      	b.n	800bcdc <_svfiprintf_r+0x130>
 800bd52:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd56:	4604      	mov	r4, r0
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e7f0      	b.n	800bd3e <_svfiprintf_r+0x192>
 800bd5c:	ab03      	add	r3, sp, #12
 800bd5e:	9300      	str	r3, [sp, #0]
 800bd60:	462a      	mov	r2, r5
 800bd62:	4b0e      	ldr	r3, [pc, #56]	@ (800bd9c <_svfiprintf_r+0x1f0>)
 800bd64:	a904      	add	r1, sp, #16
 800bd66:	4638      	mov	r0, r7
 800bd68:	f7fc fc80 	bl	800866c <_printf_float>
 800bd6c:	1c42      	adds	r2, r0, #1
 800bd6e:	4606      	mov	r6, r0
 800bd70:	d1d6      	bne.n	800bd20 <_svfiprintf_r+0x174>
 800bd72:	89ab      	ldrh	r3, [r5, #12]
 800bd74:	065b      	lsls	r3, r3, #25
 800bd76:	f53f af2d 	bmi.w	800bbd4 <_svfiprintf_r+0x28>
 800bd7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd7c:	e72c      	b.n	800bbd8 <_svfiprintf_r+0x2c>
 800bd7e:	ab03      	add	r3, sp, #12
 800bd80:	9300      	str	r3, [sp, #0]
 800bd82:	462a      	mov	r2, r5
 800bd84:	4b05      	ldr	r3, [pc, #20]	@ (800bd9c <_svfiprintf_r+0x1f0>)
 800bd86:	a904      	add	r1, sp, #16
 800bd88:	4638      	mov	r0, r7
 800bd8a:	f7fc ff07 	bl	8008b9c <_printf_i>
 800bd8e:	e7ed      	b.n	800bd6c <_svfiprintf_r+0x1c0>
 800bd90:	0800d921 	.word	0x0800d921
 800bd94:	0800d92b 	.word	0x0800d92b
 800bd98:	0800866d 	.word	0x0800866d
 800bd9c:	0800baf5 	.word	0x0800baf5
 800bda0:	0800d927 	.word	0x0800d927

0800bda4 <_sungetc_r>:
 800bda4:	b538      	push	{r3, r4, r5, lr}
 800bda6:	1c4b      	adds	r3, r1, #1
 800bda8:	4614      	mov	r4, r2
 800bdaa:	d103      	bne.n	800bdb4 <_sungetc_r+0x10>
 800bdac:	f04f 35ff 	mov.w	r5, #4294967295
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	bd38      	pop	{r3, r4, r5, pc}
 800bdb4:	8993      	ldrh	r3, [r2, #12]
 800bdb6:	f023 0320 	bic.w	r3, r3, #32
 800bdba:	8193      	strh	r3, [r2, #12]
 800bdbc:	6853      	ldr	r3, [r2, #4]
 800bdbe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800bdc0:	b2cd      	uxtb	r5, r1
 800bdc2:	b18a      	cbz	r2, 800bde8 <_sungetc_r+0x44>
 800bdc4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	dd08      	ble.n	800bddc <_sungetc_r+0x38>
 800bdca:	6823      	ldr	r3, [r4, #0]
 800bdcc:	1e5a      	subs	r2, r3, #1
 800bdce:	6022      	str	r2, [r4, #0]
 800bdd0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bdd4:	6863      	ldr	r3, [r4, #4]
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	6063      	str	r3, [r4, #4]
 800bdda:	e7e9      	b.n	800bdb0 <_sungetc_r+0xc>
 800bddc:	4621      	mov	r1, r4
 800bdde:	f000 fbe0 	bl	800c5a2 <__submore>
 800bde2:	2800      	cmp	r0, #0
 800bde4:	d0f1      	beq.n	800bdca <_sungetc_r+0x26>
 800bde6:	e7e1      	b.n	800bdac <_sungetc_r+0x8>
 800bde8:	6921      	ldr	r1, [r4, #16]
 800bdea:	6822      	ldr	r2, [r4, #0]
 800bdec:	b141      	cbz	r1, 800be00 <_sungetc_r+0x5c>
 800bdee:	4291      	cmp	r1, r2
 800bdf0:	d206      	bcs.n	800be00 <_sungetc_r+0x5c>
 800bdf2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800bdf6:	42a9      	cmp	r1, r5
 800bdf8:	d102      	bne.n	800be00 <_sungetc_r+0x5c>
 800bdfa:	3a01      	subs	r2, #1
 800bdfc:	6022      	str	r2, [r4, #0]
 800bdfe:	e7ea      	b.n	800bdd6 <_sungetc_r+0x32>
 800be00:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800be04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be08:	6363      	str	r3, [r4, #52]	@ 0x34
 800be0a:	2303      	movs	r3, #3
 800be0c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800be0e:	4623      	mov	r3, r4
 800be10:	f803 5f46 	strb.w	r5, [r3, #70]!
 800be14:	6023      	str	r3, [r4, #0]
 800be16:	2301      	movs	r3, #1
 800be18:	e7de      	b.n	800bdd8 <_sungetc_r+0x34>

0800be1a <__ssrefill_r>:
 800be1a:	b510      	push	{r4, lr}
 800be1c:	460c      	mov	r4, r1
 800be1e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800be20:	b169      	cbz	r1, 800be3e <__ssrefill_r+0x24>
 800be22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be26:	4299      	cmp	r1, r3
 800be28:	d001      	beq.n	800be2e <__ssrefill_r+0x14>
 800be2a:	f7fe fa2d 	bl	800a288 <_free_r>
 800be2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be30:	6063      	str	r3, [r4, #4]
 800be32:	2000      	movs	r0, #0
 800be34:	6360      	str	r0, [r4, #52]	@ 0x34
 800be36:	b113      	cbz	r3, 800be3e <__ssrefill_r+0x24>
 800be38:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800be3a:	6023      	str	r3, [r4, #0]
 800be3c:	bd10      	pop	{r4, pc}
 800be3e:	6923      	ldr	r3, [r4, #16]
 800be40:	6023      	str	r3, [r4, #0]
 800be42:	2300      	movs	r3, #0
 800be44:	6063      	str	r3, [r4, #4]
 800be46:	89a3      	ldrh	r3, [r4, #12]
 800be48:	f043 0320 	orr.w	r3, r3, #32
 800be4c:	81a3      	strh	r3, [r4, #12]
 800be4e:	f04f 30ff 	mov.w	r0, #4294967295
 800be52:	e7f3      	b.n	800be3c <__ssrefill_r+0x22>

0800be54 <__ssvfiscanf_r>:
 800be54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be58:	460c      	mov	r4, r1
 800be5a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800be5e:	2100      	movs	r1, #0
 800be60:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800be64:	49a5      	ldr	r1, [pc, #660]	@ (800c0fc <__ssvfiscanf_r+0x2a8>)
 800be66:	91a0      	str	r1, [sp, #640]	@ 0x280
 800be68:	f10d 0804 	add.w	r8, sp, #4
 800be6c:	49a4      	ldr	r1, [pc, #656]	@ (800c100 <__ssvfiscanf_r+0x2ac>)
 800be6e:	4fa5      	ldr	r7, [pc, #660]	@ (800c104 <__ssvfiscanf_r+0x2b0>)
 800be70:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800be74:	4606      	mov	r6, r0
 800be76:	91a1      	str	r1, [sp, #644]	@ 0x284
 800be78:	9300      	str	r3, [sp, #0]
 800be7a:	7813      	ldrb	r3, [r2, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f000 8158 	beq.w	800c132 <__ssvfiscanf_r+0x2de>
 800be82:	5cf9      	ldrb	r1, [r7, r3]
 800be84:	f011 0108 	ands.w	r1, r1, #8
 800be88:	f102 0501 	add.w	r5, r2, #1
 800be8c:	d019      	beq.n	800bec2 <__ssvfiscanf_r+0x6e>
 800be8e:	6863      	ldr	r3, [r4, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	dd0f      	ble.n	800beb4 <__ssvfiscanf_r+0x60>
 800be94:	6823      	ldr	r3, [r4, #0]
 800be96:	781a      	ldrb	r2, [r3, #0]
 800be98:	5cba      	ldrb	r2, [r7, r2]
 800be9a:	0712      	lsls	r2, r2, #28
 800be9c:	d401      	bmi.n	800bea2 <__ssvfiscanf_r+0x4e>
 800be9e:	462a      	mov	r2, r5
 800bea0:	e7eb      	b.n	800be7a <__ssvfiscanf_r+0x26>
 800bea2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bea4:	3201      	adds	r2, #1
 800bea6:	9245      	str	r2, [sp, #276]	@ 0x114
 800bea8:	6862      	ldr	r2, [r4, #4]
 800beaa:	3301      	adds	r3, #1
 800beac:	3a01      	subs	r2, #1
 800beae:	6062      	str	r2, [r4, #4]
 800beb0:	6023      	str	r3, [r4, #0]
 800beb2:	e7ec      	b.n	800be8e <__ssvfiscanf_r+0x3a>
 800beb4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800beb6:	4621      	mov	r1, r4
 800beb8:	4630      	mov	r0, r6
 800beba:	4798      	blx	r3
 800bebc:	2800      	cmp	r0, #0
 800bebe:	d0e9      	beq.n	800be94 <__ssvfiscanf_r+0x40>
 800bec0:	e7ed      	b.n	800be9e <__ssvfiscanf_r+0x4a>
 800bec2:	2b25      	cmp	r3, #37	@ 0x25
 800bec4:	d012      	beq.n	800beec <__ssvfiscanf_r+0x98>
 800bec6:	4699      	mov	r9, r3
 800bec8:	6863      	ldr	r3, [r4, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	f340 8093 	ble.w	800bff6 <__ssvfiscanf_r+0x1a2>
 800bed0:	6822      	ldr	r2, [r4, #0]
 800bed2:	7813      	ldrb	r3, [r2, #0]
 800bed4:	454b      	cmp	r3, r9
 800bed6:	f040 812c 	bne.w	800c132 <__ssvfiscanf_r+0x2de>
 800beda:	6863      	ldr	r3, [r4, #4]
 800bedc:	3b01      	subs	r3, #1
 800bede:	6063      	str	r3, [r4, #4]
 800bee0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800bee2:	3201      	adds	r2, #1
 800bee4:	3301      	adds	r3, #1
 800bee6:	6022      	str	r2, [r4, #0]
 800bee8:	9345      	str	r3, [sp, #276]	@ 0x114
 800beea:	e7d8      	b.n	800be9e <__ssvfiscanf_r+0x4a>
 800beec:	9141      	str	r1, [sp, #260]	@ 0x104
 800beee:	9143      	str	r1, [sp, #268]	@ 0x10c
 800bef0:	7853      	ldrb	r3, [r2, #1]
 800bef2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bef4:	bf02      	ittt	eq
 800bef6:	2310      	moveq	r3, #16
 800bef8:	1c95      	addeq	r5, r2, #2
 800befa:	9341      	streq	r3, [sp, #260]	@ 0x104
 800befc:	220a      	movs	r2, #10
 800befe:	46a9      	mov	r9, r5
 800bf00:	f819 1b01 	ldrb.w	r1, [r9], #1
 800bf04:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800bf08:	2b09      	cmp	r3, #9
 800bf0a:	d91e      	bls.n	800bf4a <__ssvfiscanf_r+0xf6>
 800bf0c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800c108 <__ssvfiscanf_r+0x2b4>
 800bf10:	2203      	movs	r2, #3
 800bf12:	4650      	mov	r0, sl
 800bf14:	f7f4 f984 	bl	8000220 <memchr>
 800bf18:	b138      	cbz	r0, 800bf2a <__ssvfiscanf_r+0xd6>
 800bf1a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bf1c:	eba0 000a 	sub.w	r0, r0, sl
 800bf20:	2301      	movs	r3, #1
 800bf22:	4083      	lsls	r3, r0
 800bf24:	4313      	orrs	r3, r2
 800bf26:	9341      	str	r3, [sp, #260]	@ 0x104
 800bf28:	464d      	mov	r5, r9
 800bf2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bf2e:	2b78      	cmp	r3, #120	@ 0x78
 800bf30:	d806      	bhi.n	800bf40 <__ssvfiscanf_r+0xec>
 800bf32:	2b57      	cmp	r3, #87	@ 0x57
 800bf34:	d810      	bhi.n	800bf58 <__ssvfiscanf_r+0x104>
 800bf36:	2b25      	cmp	r3, #37	@ 0x25
 800bf38:	d0c5      	beq.n	800bec6 <__ssvfiscanf_r+0x72>
 800bf3a:	d857      	bhi.n	800bfec <__ssvfiscanf_r+0x198>
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d065      	beq.n	800c00c <__ssvfiscanf_r+0x1b8>
 800bf40:	2303      	movs	r3, #3
 800bf42:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bf44:	230a      	movs	r3, #10
 800bf46:	9342      	str	r3, [sp, #264]	@ 0x108
 800bf48:	e078      	b.n	800c03c <__ssvfiscanf_r+0x1e8>
 800bf4a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800bf4c:	fb02 1103 	mla	r1, r2, r3, r1
 800bf50:	3930      	subs	r1, #48	@ 0x30
 800bf52:	9143      	str	r1, [sp, #268]	@ 0x10c
 800bf54:	464d      	mov	r5, r9
 800bf56:	e7d2      	b.n	800befe <__ssvfiscanf_r+0xaa>
 800bf58:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800bf5c:	2a20      	cmp	r2, #32
 800bf5e:	d8ef      	bhi.n	800bf40 <__ssvfiscanf_r+0xec>
 800bf60:	a101      	add	r1, pc, #4	@ (adr r1, 800bf68 <__ssvfiscanf_r+0x114>)
 800bf62:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bf66:	bf00      	nop
 800bf68:	0800c01b 	.word	0x0800c01b
 800bf6c:	0800bf41 	.word	0x0800bf41
 800bf70:	0800bf41 	.word	0x0800bf41
 800bf74:	0800c075 	.word	0x0800c075
 800bf78:	0800bf41 	.word	0x0800bf41
 800bf7c:	0800bf41 	.word	0x0800bf41
 800bf80:	0800bf41 	.word	0x0800bf41
 800bf84:	0800bf41 	.word	0x0800bf41
 800bf88:	0800bf41 	.word	0x0800bf41
 800bf8c:	0800bf41 	.word	0x0800bf41
 800bf90:	0800bf41 	.word	0x0800bf41
 800bf94:	0800c08b 	.word	0x0800c08b
 800bf98:	0800c071 	.word	0x0800c071
 800bf9c:	0800bff3 	.word	0x0800bff3
 800bfa0:	0800bff3 	.word	0x0800bff3
 800bfa4:	0800bff3 	.word	0x0800bff3
 800bfa8:	0800bf41 	.word	0x0800bf41
 800bfac:	0800c02d 	.word	0x0800c02d
 800bfb0:	0800bf41 	.word	0x0800bf41
 800bfb4:	0800bf41 	.word	0x0800bf41
 800bfb8:	0800bf41 	.word	0x0800bf41
 800bfbc:	0800bf41 	.word	0x0800bf41
 800bfc0:	0800c09b 	.word	0x0800c09b
 800bfc4:	0800c035 	.word	0x0800c035
 800bfc8:	0800c013 	.word	0x0800c013
 800bfcc:	0800bf41 	.word	0x0800bf41
 800bfd0:	0800bf41 	.word	0x0800bf41
 800bfd4:	0800c097 	.word	0x0800c097
 800bfd8:	0800bf41 	.word	0x0800bf41
 800bfdc:	0800c071 	.word	0x0800c071
 800bfe0:	0800bf41 	.word	0x0800bf41
 800bfe4:	0800bf41 	.word	0x0800bf41
 800bfe8:	0800c01b 	.word	0x0800c01b
 800bfec:	3b45      	subs	r3, #69	@ 0x45
 800bfee:	2b02      	cmp	r3, #2
 800bff0:	d8a6      	bhi.n	800bf40 <__ssvfiscanf_r+0xec>
 800bff2:	2305      	movs	r3, #5
 800bff4:	e021      	b.n	800c03a <__ssvfiscanf_r+0x1e6>
 800bff6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bff8:	4621      	mov	r1, r4
 800bffa:	4630      	mov	r0, r6
 800bffc:	4798      	blx	r3
 800bffe:	2800      	cmp	r0, #0
 800c000:	f43f af66 	beq.w	800bed0 <__ssvfiscanf_r+0x7c>
 800c004:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c006:	2800      	cmp	r0, #0
 800c008:	f040 808b 	bne.w	800c122 <__ssvfiscanf_r+0x2ce>
 800c00c:	f04f 30ff 	mov.w	r0, #4294967295
 800c010:	e08b      	b.n	800c12a <__ssvfiscanf_r+0x2d6>
 800c012:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c014:	f042 0220 	orr.w	r2, r2, #32
 800c018:	9241      	str	r2, [sp, #260]	@ 0x104
 800c01a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c01c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c020:	9241      	str	r2, [sp, #260]	@ 0x104
 800c022:	2210      	movs	r2, #16
 800c024:	2b6e      	cmp	r3, #110	@ 0x6e
 800c026:	9242      	str	r2, [sp, #264]	@ 0x108
 800c028:	d902      	bls.n	800c030 <__ssvfiscanf_r+0x1dc>
 800c02a:	e005      	b.n	800c038 <__ssvfiscanf_r+0x1e4>
 800c02c:	2300      	movs	r3, #0
 800c02e:	9342      	str	r3, [sp, #264]	@ 0x108
 800c030:	2303      	movs	r3, #3
 800c032:	e002      	b.n	800c03a <__ssvfiscanf_r+0x1e6>
 800c034:	2308      	movs	r3, #8
 800c036:	9342      	str	r3, [sp, #264]	@ 0x108
 800c038:	2304      	movs	r3, #4
 800c03a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c03c:	6863      	ldr	r3, [r4, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	dd39      	ble.n	800c0b6 <__ssvfiscanf_r+0x262>
 800c042:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c044:	0659      	lsls	r1, r3, #25
 800c046:	d404      	bmi.n	800c052 <__ssvfiscanf_r+0x1fe>
 800c048:	6823      	ldr	r3, [r4, #0]
 800c04a:	781a      	ldrb	r2, [r3, #0]
 800c04c:	5cba      	ldrb	r2, [r7, r2]
 800c04e:	0712      	lsls	r2, r2, #28
 800c050:	d438      	bmi.n	800c0c4 <__ssvfiscanf_r+0x270>
 800c052:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c054:	2b02      	cmp	r3, #2
 800c056:	dc47      	bgt.n	800c0e8 <__ssvfiscanf_r+0x294>
 800c058:	466b      	mov	r3, sp
 800c05a:	4622      	mov	r2, r4
 800c05c:	a941      	add	r1, sp, #260	@ 0x104
 800c05e:	4630      	mov	r0, r6
 800c060:	f000 f86c 	bl	800c13c <_scanf_chars>
 800c064:	2801      	cmp	r0, #1
 800c066:	d064      	beq.n	800c132 <__ssvfiscanf_r+0x2de>
 800c068:	2802      	cmp	r0, #2
 800c06a:	f47f af18 	bne.w	800be9e <__ssvfiscanf_r+0x4a>
 800c06e:	e7c9      	b.n	800c004 <__ssvfiscanf_r+0x1b0>
 800c070:	220a      	movs	r2, #10
 800c072:	e7d7      	b.n	800c024 <__ssvfiscanf_r+0x1d0>
 800c074:	4629      	mov	r1, r5
 800c076:	4640      	mov	r0, r8
 800c078:	f000 fa5a 	bl	800c530 <__sccl>
 800c07c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c07e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c082:	9341      	str	r3, [sp, #260]	@ 0x104
 800c084:	4605      	mov	r5, r0
 800c086:	2301      	movs	r3, #1
 800c088:	e7d7      	b.n	800c03a <__ssvfiscanf_r+0x1e6>
 800c08a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c08c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c090:	9341      	str	r3, [sp, #260]	@ 0x104
 800c092:	2300      	movs	r3, #0
 800c094:	e7d1      	b.n	800c03a <__ssvfiscanf_r+0x1e6>
 800c096:	2302      	movs	r3, #2
 800c098:	e7cf      	b.n	800c03a <__ssvfiscanf_r+0x1e6>
 800c09a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c09c:	06c3      	lsls	r3, r0, #27
 800c09e:	f53f aefe 	bmi.w	800be9e <__ssvfiscanf_r+0x4a>
 800c0a2:	9b00      	ldr	r3, [sp, #0]
 800c0a4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c0a6:	1d19      	adds	r1, r3, #4
 800c0a8:	9100      	str	r1, [sp, #0]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	07c0      	lsls	r0, r0, #31
 800c0ae:	bf4c      	ite	mi
 800c0b0:	801a      	strhmi	r2, [r3, #0]
 800c0b2:	601a      	strpl	r2, [r3, #0]
 800c0b4:	e6f3      	b.n	800be9e <__ssvfiscanf_r+0x4a>
 800c0b6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c0b8:	4621      	mov	r1, r4
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	4798      	blx	r3
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	d0bf      	beq.n	800c042 <__ssvfiscanf_r+0x1ee>
 800c0c2:	e79f      	b.n	800c004 <__ssvfiscanf_r+0x1b0>
 800c0c4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c0c6:	3201      	adds	r2, #1
 800c0c8:	9245      	str	r2, [sp, #276]	@ 0x114
 800c0ca:	6862      	ldr	r2, [r4, #4]
 800c0cc:	3a01      	subs	r2, #1
 800c0ce:	2a00      	cmp	r2, #0
 800c0d0:	6062      	str	r2, [r4, #4]
 800c0d2:	dd02      	ble.n	800c0da <__ssvfiscanf_r+0x286>
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	6023      	str	r3, [r4, #0]
 800c0d8:	e7b6      	b.n	800c048 <__ssvfiscanf_r+0x1f4>
 800c0da:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c0dc:	4621      	mov	r1, r4
 800c0de:	4630      	mov	r0, r6
 800c0e0:	4798      	blx	r3
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	d0b0      	beq.n	800c048 <__ssvfiscanf_r+0x1f4>
 800c0e6:	e78d      	b.n	800c004 <__ssvfiscanf_r+0x1b0>
 800c0e8:	2b04      	cmp	r3, #4
 800c0ea:	dc0f      	bgt.n	800c10c <__ssvfiscanf_r+0x2b8>
 800c0ec:	466b      	mov	r3, sp
 800c0ee:	4622      	mov	r2, r4
 800c0f0:	a941      	add	r1, sp, #260	@ 0x104
 800c0f2:	4630      	mov	r0, r6
 800c0f4:	f000 f87c 	bl	800c1f0 <_scanf_i>
 800c0f8:	e7b4      	b.n	800c064 <__ssvfiscanf_r+0x210>
 800c0fa:	bf00      	nop
 800c0fc:	0800bda5 	.word	0x0800bda5
 800c100:	0800be1b 	.word	0x0800be1b
 800c104:	0800d821 	.word	0x0800d821
 800c108:	0800d927 	.word	0x0800d927
 800c10c:	4b0a      	ldr	r3, [pc, #40]	@ (800c138 <__ssvfiscanf_r+0x2e4>)
 800c10e:	2b00      	cmp	r3, #0
 800c110:	f43f aec5 	beq.w	800be9e <__ssvfiscanf_r+0x4a>
 800c114:	466b      	mov	r3, sp
 800c116:	4622      	mov	r2, r4
 800c118:	a941      	add	r1, sp, #260	@ 0x104
 800c11a:	4630      	mov	r0, r6
 800c11c:	f7fc fe5e 	bl	8008ddc <_scanf_float>
 800c120:	e7a0      	b.n	800c064 <__ssvfiscanf_r+0x210>
 800c122:	89a3      	ldrh	r3, [r4, #12]
 800c124:	065b      	lsls	r3, r3, #25
 800c126:	f53f af71 	bmi.w	800c00c <__ssvfiscanf_r+0x1b8>
 800c12a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800c12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c132:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c134:	e7f9      	b.n	800c12a <__ssvfiscanf_r+0x2d6>
 800c136:	bf00      	nop
 800c138:	08008ddd 	.word	0x08008ddd

0800c13c <_scanf_chars>:
 800c13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c140:	4615      	mov	r5, r2
 800c142:	688a      	ldr	r2, [r1, #8]
 800c144:	4680      	mov	r8, r0
 800c146:	460c      	mov	r4, r1
 800c148:	b932      	cbnz	r2, 800c158 <_scanf_chars+0x1c>
 800c14a:	698a      	ldr	r2, [r1, #24]
 800c14c:	2a00      	cmp	r2, #0
 800c14e:	bf14      	ite	ne
 800c150:	f04f 32ff 	movne.w	r2, #4294967295
 800c154:	2201      	moveq	r2, #1
 800c156:	608a      	str	r2, [r1, #8]
 800c158:	6822      	ldr	r2, [r4, #0]
 800c15a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800c1ec <_scanf_chars+0xb0>
 800c15e:	06d1      	lsls	r1, r2, #27
 800c160:	bf5f      	itttt	pl
 800c162:	681a      	ldrpl	r2, [r3, #0]
 800c164:	1d11      	addpl	r1, r2, #4
 800c166:	6019      	strpl	r1, [r3, #0]
 800c168:	6816      	ldrpl	r6, [r2, #0]
 800c16a:	2700      	movs	r7, #0
 800c16c:	69a0      	ldr	r0, [r4, #24]
 800c16e:	b188      	cbz	r0, 800c194 <_scanf_chars+0x58>
 800c170:	2801      	cmp	r0, #1
 800c172:	d107      	bne.n	800c184 <_scanf_chars+0x48>
 800c174:	682b      	ldr	r3, [r5, #0]
 800c176:	781a      	ldrb	r2, [r3, #0]
 800c178:	6963      	ldr	r3, [r4, #20]
 800c17a:	5c9b      	ldrb	r3, [r3, r2]
 800c17c:	b953      	cbnz	r3, 800c194 <_scanf_chars+0x58>
 800c17e:	2f00      	cmp	r7, #0
 800c180:	d031      	beq.n	800c1e6 <_scanf_chars+0xaa>
 800c182:	e022      	b.n	800c1ca <_scanf_chars+0x8e>
 800c184:	2802      	cmp	r0, #2
 800c186:	d120      	bne.n	800c1ca <_scanf_chars+0x8e>
 800c188:	682b      	ldr	r3, [r5, #0]
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c190:	071b      	lsls	r3, r3, #28
 800c192:	d41a      	bmi.n	800c1ca <_scanf_chars+0x8e>
 800c194:	6823      	ldr	r3, [r4, #0]
 800c196:	06da      	lsls	r2, r3, #27
 800c198:	bf5e      	ittt	pl
 800c19a:	682b      	ldrpl	r3, [r5, #0]
 800c19c:	781b      	ldrbpl	r3, [r3, #0]
 800c19e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c1a2:	682a      	ldr	r2, [r5, #0]
 800c1a4:	686b      	ldr	r3, [r5, #4]
 800c1a6:	3201      	adds	r2, #1
 800c1a8:	602a      	str	r2, [r5, #0]
 800c1aa:	68a2      	ldr	r2, [r4, #8]
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	3a01      	subs	r2, #1
 800c1b0:	606b      	str	r3, [r5, #4]
 800c1b2:	3701      	adds	r7, #1
 800c1b4:	60a2      	str	r2, [r4, #8]
 800c1b6:	b142      	cbz	r2, 800c1ca <_scanf_chars+0x8e>
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	dcd7      	bgt.n	800c16c <_scanf_chars+0x30>
 800c1bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c1c0:	4629      	mov	r1, r5
 800c1c2:	4640      	mov	r0, r8
 800c1c4:	4798      	blx	r3
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	d0d0      	beq.n	800c16c <_scanf_chars+0x30>
 800c1ca:	6823      	ldr	r3, [r4, #0]
 800c1cc:	f013 0310 	ands.w	r3, r3, #16
 800c1d0:	d105      	bne.n	800c1de <_scanf_chars+0xa2>
 800c1d2:	68e2      	ldr	r2, [r4, #12]
 800c1d4:	3201      	adds	r2, #1
 800c1d6:	60e2      	str	r2, [r4, #12]
 800c1d8:	69a2      	ldr	r2, [r4, #24]
 800c1da:	b102      	cbz	r2, 800c1de <_scanf_chars+0xa2>
 800c1dc:	7033      	strb	r3, [r6, #0]
 800c1de:	6923      	ldr	r3, [r4, #16]
 800c1e0:	443b      	add	r3, r7
 800c1e2:	6123      	str	r3, [r4, #16]
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ea:	bf00      	nop
 800c1ec:	0800d821 	.word	0x0800d821

0800c1f0 <_scanf_i>:
 800c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f4:	4698      	mov	r8, r3
 800c1f6:	4b74      	ldr	r3, [pc, #464]	@ (800c3c8 <_scanf_i+0x1d8>)
 800c1f8:	460c      	mov	r4, r1
 800c1fa:	4682      	mov	sl, r0
 800c1fc:	4616      	mov	r6, r2
 800c1fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c202:	b087      	sub	sp, #28
 800c204:	ab03      	add	r3, sp, #12
 800c206:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c20a:	4b70      	ldr	r3, [pc, #448]	@ (800c3cc <_scanf_i+0x1dc>)
 800c20c:	69a1      	ldr	r1, [r4, #24]
 800c20e:	4a70      	ldr	r2, [pc, #448]	@ (800c3d0 <_scanf_i+0x1e0>)
 800c210:	2903      	cmp	r1, #3
 800c212:	bf08      	it	eq
 800c214:	461a      	moveq	r2, r3
 800c216:	68a3      	ldr	r3, [r4, #8]
 800c218:	9201      	str	r2, [sp, #4]
 800c21a:	1e5a      	subs	r2, r3, #1
 800c21c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c220:	bf88      	it	hi
 800c222:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c226:	4627      	mov	r7, r4
 800c228:	bf82      	ittt	hi
 800c22a:	eb03 0905 	addhi.w	r9, r3, r5
 800c22e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c232:	60a3      	strhi	r3, [r4, #8]
 800c234:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c238:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800c23c:	bf98      	it	ls
 800c23e:	f04f 0900 	movls.w	r9, #0
 800c242:	6023      	str	r3, [r4, #0]
 800c244:	463d      	mov	r5, r7
 800c246:	f04f 0b00 	mov.w	fp, #0
 800c24a:	6831      	ldr	r1, [r6, #0]
 800c24c:	ab03      	add	r3, sp, #12
 800c24e:	7809      	ldrb	r1, [r1, #0]
 800c250:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c254:	2202      	movs	r2, #2
 800c256:	f7f3 ffe3 	bl	8000220 <memchr>
 800c25a:	b328      	cbz	r0, 800c2a8 <_scanf_i+0xb8>
 800c25c:	f1bb 0f01 	cmp.w	fp, #1
 800c260:	d159      	bne.n	800c316 <_scanf_i+0x126>
 800c262:	6862      	ldr	r2, [r4, #4]
 800c264:	b92a      	cbnz	r2, 800c272 <_scanf_i+0x82>
 800c266:	6822      	ldr	r2, [r4, #0]
 800c268:	2108      	movs	r1, #8
 800c26a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c26e:	6061      	str	r1, [r4, #4]
 800c270:	6022      	str	r2, [r4, #0]
 800c272:	6822      	ldr	r2, [r4, #0]
 800c274:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800c278:	6022      	str	r2, [r4, #0]
 800c27a:	68a2      	ldr	r2, [r4, #8]
 800c27c:	1e51      	subs	r1, r2, #1
 800c27e:	60a1      	str	r1, [r4, #8]
 800c280:	b192      	cbz	r2, 800c2a8 <_scanf_i+0xb8>
 800c282:	6832      	ldr	r2, [r6, #0]
 800c284:	1c51      	adds	r1, r2, #1
 800c286:	6031      	str	r1, [r6, #0]
 800c288:	7812      	ldrb	r2, [r2, #0]
 800c28a:	f805 2b01 	strb.w	r2, [r5], #1
 800c28e:	6872      	ldr	r2, [r6, #4]
 800c290:	3a01      	subs	r2, #1
 800c292:	2a00      	cmp	r2, #0
 800c294:	6072      	str	r2, [r6, #4]
 800c296:	dc07      	bgt.n	800c2a8 <_scanf_i+0xb8>
 800c298:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c29c:	4631      	mov	r1, r6
 800c29e:	4650      	mov	r0, sl
 800c2a0:	4790      	blx	r2
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	f040 8085 	bne.w	800c3b2 <_scanf_i+0x1c2>
 800c2a8:	f10b 0b01 	add.w	fp, fp, #1
 800c2ac:	f1bb 0f03 	cmp.w	fp, #3
 800c2b0:	d1cb      	bne.n	800c24a <_scanf_i+0x5a>
 800c2b2:	6863      	ldr	r3, [r4, #4]
 800c2b4:	b90b      	cbnz	r3, 800c2ba <_scanf_i+0xca>
 800c2b6:	230a      	movs	r3, #10
 800c2b8:	6063      	str	r3, [r4, #4]
 800c2ba:	6863      	ldr	r3, [r4, #4]
 800c2bc:	4945      	ldr	r1, [pc, #276]	@ (800c3d4 <_scanf_i+0x1e4>)
 800c2be:	6960      	ldr	r0, [r4, #20]
 800c2c0:	1ac9      	subs	r1, r1, r3
 800c2c2:	f000 f935 	bl	800c530 <__sccl>
 800c2c6:	f04f 0b00 	mov.w	fp, #0
 800c2ca:	68a3      	ldr	r3, [r4, #8]
 800c2cc:	6822      	ldr	r2, [r4, #0]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d03d      	beq.n	800c34e <_scanf_i+0x15e>
 800c2d2:	6831      	ldr	r1, [r6, #0]
 800c2d4:	6960      	ldr	r0, [r4, #20]
 800c2d6:	f891 c000 	ldrb.w	ip, [r1]
 800c2da:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	d035      	beq.n	800c34e <_scanf_i+0x15e>
 800c2e2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c2e6:	d124      	bne.n	800c332 <_scanf_i+0x142>
 800c2e8:	0510      	lsls	r0, r2, #20
 800c2ea:	d522      	bpl.n	800c332 <_scanf_i+0x142>
 800c2ec:	f10b 0b01 	add.w	fp, fp, #1
 800c2f0:	f1b9 0f00 	cmp.w	r9, #0
 800c2f4:	d003      	beq.n	800c2fe <_scanf_i+0x10e>
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	f109 39ff 	add.w	r9, r9, #4294967295
 800c2fc:	60a3      	str	r3, [r4, #8]
 800c2fe:	6873      	ldr	r3, [r6, #4]
 800c300:	3b01      	subs	r3, #1
 800c302:	2b00      	cmp	r3, #0
 800c304:	6073      	str	r3, [r6, #4]
 800c306:	dd1b      	ble.n	800c340 <_scanf_i+0x150>
 800c308:	6833      	ldr	r3, [r6, #0]
 800c30a:	3301      	adds	r3, #1
 800c30c:	6033      	str	r3, [r6, #0]
 800c30e:	68a3      	ldr	r3, [r4, #8]
 800c310:	3b01      	subs	r3, #1
 800c312:	60a3      	str	r3, [r4, #8]
 800c314:	e7d9      	b.n	800c2ca <_scanf_i+0xda>
 800c316:	f1bb 0f02 	cmp.w	fp, #2
 800c31a:	d1ae      	bne.n	800c27a <_scanf_i+0x8a>
 800c31c:	6822      	ldr	r2, [r4, #0]
 800c31e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800c322:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c326:	d1bf      	bne.n	800c2a8 <_scanf_i+0xb8>
 800c328:	2110      	movs	r1, #16
 800c32a:	6061      	str	r1, [r4, #4]
 800c32c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c330:	e7a2      	b.n	800c278 <_scanf_i+0x88>
 800c332:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800c336:	6022      	str	r2, [r4, #0]
 800c338:	780b      	ldrb	r3, [r1, #0]
 800c33a:	f805 3b01 	strb.w	r3, [r5], #1
 800c33e:	e7de      	b.n	800c2fe <_scanf_i+0x10e>
 800c340:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c344:	4631      	mov	r1, r6
 800c346:	4650      	mov	r0, sl
 800c348:	4798      	blx	r3
 800c34a:	2800      	cmp	r0, #0
 800c34c:	d0df      	beq.n	800c30e <_scanf_i+0x11e>
 800c34e:	6823      	ldr	r3, [r4, #0]
 800c350:	05d9      	lsls	r1, r3, #23
 800c352:	d50d      	bpl.n	800c370 <_scanf_i+0x180>
 800c354:	42bd      	cmp	r5, r7
 800c356:	d909      	bls.n	800c36c <_scanf_i+0x17c>
 800c358:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c35c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c360:	4632      	mov	r2, r6
 800c362:	4650      	mov	r0, sl
 800c364:	4798      	blx	r3
 800c366:	f105 39ff 	add.w	r9, r5, #4294967295
 800c36a:	464d      	mov	r5, r9
 800c36c:	42bd      	cmp	r5, r7
 800c36e:	d028      	beq.n	800c3c2 <_scanf_i+0x1d2>
 800c370:	6822      	ldr	r2, [r4, #0]
 800c372:	f012 0210 	ands.w	r2, r2, #16
 800c376:	d113      	bne.n	800c3a0 <_scanf_i+0x1b0>
 800c378:	702a      	strb	r2, [r5, #0]
 800c37a:	6863      	ldr	r3, [r4, #4]
 800c37c:	9e01      	ldr	r6, [sp, #4]
 800c37e:	4639      	mov	r1, r7
 800c380:	4650      	mov	r0, sl
 800c382:	47b0      	blx	r6
 800c384:	f8d8 3000 	ldr.w	r3, [r8]
 800c388:	6821      	ldr	r1, [r4, #0]
 800c38a:	1d1a      	adds	r2, r3, #4
 800c38c:	f8c8 2000 	str.w	r2, [r8]
 800c390:	f011 0f20 	tst.w	r1, #32
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	d00f      	beq.n	800c3b8 <_scanf_i+0x1c8>
 800c398:	6018      	str	r0, [r3, #0]
 800c39a:	68e3      	ldr	r3, [r4, #12]
 800c39c:	3301      	adds	r3, #1
 800c39e:	60e3      	str	r3, [r4, #12]
 800c3a0:	6923      	ldr	r3, [r4, #16]
 800c3a2:	1bed      	subs	r5, r5, r7
 800c3a4:	445d      	add	r5, fp
 800c3a6:	442b      	add	r3, r5
 800c3a8:	6123      	str	r3, [r4, #16]
 800c3aa:	2000      	movs	r0, #0
 800c3ac:	b007      	add	sp, #28
 800c3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3b2:	f04f 0b00 	mov.w	fp, #0
 800c3b6:	e7ca      	b.n	800c34e <_scanf_i+0x15e>
 800c3b8:	07ca      	lsls	r2, r1, #31
 800c3ba:	bf4c      	ite	mi
 800c3bc:	8018      	strhmi	r0, [r3, #0]
 800c3be:	6018      	strpl	r0, [r3, #0]
 800c3c0:	e7eb      	b.n	800c39a <_scanf_i+0x1aa>
 800c3c2:	2001      	movs	r0, #1
 800c3c4:	e7f2      	b.n	800c3ac <_scanf_i+0x1bc>
 800c3c6:	bf00      	nop
 800c3c8:	0800d560 	.word	0x0800d560
 800c3cc:	0800baf1 	.word	0x0800baf1
 800c3d0:	0800ced5 	.word	0x0800ced5
 800c3d4:	0800d942 	.word	0x0800d942

0800c3d8 <__sflush_r>:
 800c3d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3e0:	0716      	lsls	r6, r2, #28
 800c3e2:	4605      	mov	r5, r0
 800c3e4:	460c      	mov	r4, r1
 800c3e6:	d454      	bmi.n	800c492 <__sflush_r+0xba>
 800c3e8:	684b      	ldr	r3, [r1, #4]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	dc02      	bgt.n	800c3f4 <__sflush_r+0x1c>
 800c3ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	dd48      	ble.n	800c486 <__sflush_r+0xae>
 800c3f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c3f6:	2e00      	cmp	r6, #0
 800c3f8:	d045      	beq.n	800c486 <__sflush_r+0xae>
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c400:	682f      	ldr	r7, [r5, #0]
 800c402:	6a21      	ldr	r1, [r4, #32]
 800c404:	602b      	str	r3, [r5, #0]
 800c406:	d030      	beq.n	800c46a <__sflush_r+0x92>
 800c408:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c40a:	89a3      	ldrh	r3, [r4, #12]
 800c40c:	0759      	lsls	r1, r3, #29
 800c40e:	d505      	bpl.n	800c41c <__sflush_r+0x44>
 800c410:	6863      	ldr	r3, [r4, #4]
 800c412:	1ad2      	subs	r2, r2, r3
 800c414:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c416:	b10b      	cbz	r3, 800c41c <__sflush_r+0x44>
 800c418:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c41a:	1ad2      	subs	r2, r2, r3
 800c41c:	2300      	movs	r3, #0
 800c41e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c420:	6a21      	ldr	r1, [r4, #32]
 800c422:	4628      	mov	r0, r5
 800c424:	47b0      	blx	r6
 800c426:	1c43      	adds	r3, r0, #1
 800c428:	89a3      	ldrh	r3, [r4, #12]
 800c42a:	d106      	bne.n	800c43a <__sflush_r+0x62>
 800c42c:	6829      	ldr	r1, [r5, #0]
 800c42e:	291d      	cmp	r1, #29
 800c430:	d82b      	bhi.n	800c48a <__sflush_r+0xb2>
 800c432:	4a2a      	ldr	r2, [pc, #168]	@ (800c4dc <__sflush_r+0x104>)
 800c434:	410a      	asrs	r2, r1
 800c436:	07d6      	lsls	r6, r2, #31
 800c438:	d427      	bmi.n	800c48a <__sflush_r+0xb2>
 800c43a:	2200      	movs	r2, #0
 800c43c:	6062      	str	r2, [r4, #4]
 800c43e:	04d9      	lsls	r1, r3, #19
 800c440:	6922      	ldr	r2, [r4, #16]
 800c442:	6022      	str	r2, [r4, #0]
 800c444:	d504      	bpl.n	800c450 <__sflush_r+0x78>
 800c446:	1c42      	adds	r2, r0, #1
 800c448:	d101      	bne.n	800c44e <__sflush_r+0x76>
 800c44a:	682b      	ldr	r3, [r5, #0]
 800c44c:	b903      	cbnz	r3, 800c450 <__sflush_r+0x78>
 800c44e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c450:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c452:	602f      	str	r7, [r5, #0]
 800c454:	b1b9      	cbz	r1, 800c486 <__sflush_r+0xae>
 800c456:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c45a:	4299      	cmp	r1, r3
 800c45c:	d002      	beq.n	800c464 <__sflush_r+0x8c>
 800c45e:	4628      	mov	r0, r5
 800c460:	f7fd ff12 	bl	800a288 <_free_r>
 800c464:	2300      	movs	r3, #0
 800c466:	6363      	str	r3, [r4, #52]	@ 0x34
 800c468:	e00d      	b.n	800c486 <__sflush_r+0xae>
 800c46a:	2301      	movs	r3, #1
 800c46c:	4628      	mov	r0, r5
 800c46e:	47b0      	blx	r6
 800c470:	4602      	mov	r2, r0
 800c472:	1c50      	adds	r0, r2, #1
 800c474:	d1c9      	bne.n	800c40a <__sflush_r+0x32>
 800c476:	682b      	ldr	r3, [r5, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d0c6      	beq.n	800c40a <__sflush_r+0x32>
 800c47c:	2b1d      	cmp	r3, #29
 800c47e:	d001      	beq.n	800c484 <__sflush_r+0xac>
 800c480:	2b16      	cmp	r3, #22
 800c482:	d11e      	bne.n	800c4c2 <__sflush_r+0xea>
 800c484:	602f      	str	r7, [r5, #0]
 800c486:	2000      	movs	r0, #0
 800c488:	e022      	b.n	800c4d0 <__sflush_r+0xf8>
 800c48a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c48e:	b21b      	sxth	r3, r3
 800c490:	e01b      	b.n	800c4ca <__sflush_r+0xf2>
 800c492:	690f      	ldr	r7, [r1, #16]
 800c494:	2f00      	cmp	r7, #0
 800c496:	d0f6      	beq.n	800c486 <__sflush_r+0xae>
 800c498:	0793      	lsls	r3, r2, #30
 800c49a:	680e      	ldr	r6, [r1, #0]
 800c49c:	bf08      	it	eq
 800c49e:	694b      	ldreq	r3, [r1, #20]
 800c4a0:	600f      	str	r7, [r1, #0]
 800c4a2:	bf18      	it	ne
 800c4a4:	2300      	movne	r3, #0
 800c4a6:	eba6 0807 	sub.w	r8, r6, r7
 800c4aa:	608b      	str	r3, [r1, #8]
 800c4ac:	f1b8 0f00 	cmp.w	r8, #0
 800c4b0:	dde9      	ble.n	800c486 <__sflush_r+0xae>
 800c4b2:	6a21      	ldr	r1, [r4, #32]
 800c4b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c4b6:	4643      	mov	r3, r8
 800c4b8:	463a      	mov	r2, r7
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	47b0      	blx	r6
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	dc08      	bgt.n	800c4d4 <__sflush_r+0xfc>
 800c4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4ca:	81a3      	strh	r3, [r4, #12]
 800c4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4d4:	4407      	add	r7, r0
 800c4d6:	eba8 0800 	sub.w	r8, r8, r0
 800c4da:	e7e7      	b.n	800c4ac <__sflush_r+0xd4>
 800c4dc:	dfbffffe 	.word	0xdfbffffe

0800c4e0 <_fflush_r>:
 800c4e0:	b538      	push	{r3, r4, r5, lr}
 800c4e2:	690b      	ldr	r3, [r1, #16]
 800c4e4:	4605      	mov	r5, r0
 800c4e6:	460c      	mov	r4, r1
 800c4e8:	b913      	cbnz	r3, 800c4f0 <_fflush_r+0x10>
 800c4ea:	2500      	movs	r5, #0
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	bd38      	pop	{r3, r4, r5, pc}
 800c4f0:	b118      	cbz	r0, 800c4fa <_fflush_r+0x1a>
 800c4f2:	6a03      	ldr	r3, [r0, #32]
 800c4f4:	b90b      	cbnz	r3, 800c4fa <_fflush_r+0x1a>
 800c4f6:	f7fc ff11 	bl	800931c <__sinit>
 800c4fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d0f3      	beq.n	800c4ea <_fflush_r+0xa>
 800c502:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c504:	07d0      	lsls	r0, r2, #31
 800c506:	d404      	bmi.n	800c512 <_fflush_r+0x32>
 800c508:	0599      	lsls	r1, r3, #22
 800c50a:	d402      	bmi.n	800c512 <_fflush_r+0x32>
 800c50c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c50e:	f7fd f856 	bl	80095be <__retarget_lock_acquire_recursive>
 800c512:	4628      	mov	r0, r5
 800c514:	4621      	mov	r1, r4
 800c516:	f7ff ff5f 	bl	800c3d8 <__sflush_r>
 800c51a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c51c:	07da      	lsls	r2, r3, #31
 800c51e:	4605      	mov	r5, r0
 800c520:	d4e4      	bmi.n	800c4ec <_fflush_r+0xc>
 800c522:	89a3      	ldrh	r3, [r4, #12]
 800c524:	059b      	lsls	r3, r3, #22
 800c526:	d4e1      	bmi.n	800c4ec <_fflush_r+0xc>
 800c528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c52a:	f7fd f849 	bl	80095c0 <__retarget_lock_release_recursive>
 800c52e:	e7dd      	b.n	800c4ec <_fflush_r+0xc>

0800c530 <__sccl>:
 800c530:	b570      	push	{r4, r5, r6, lr}
 800c532:	780b      	ldrb	r3, [r1, #0]
 800c534:	4604      	mov	r4, r0
 800c536:	2b5e      	cmp	r3, #94	@ 0x5e
 800c538:	bf0b      	itete	eq
 800c53a:	784b      	ldrbeq	r3, [r1, #1]
 800c53c:	1c4a      	addne	r2, r1, #1
 800c53e:	1c8a      	addeq	r2, r1, #2
 800c540:	2100      	movne	r1, #0
 800c542:	bf08      	it	eq
 800c544:	2101      	moveq	r1, #1
 800c546:	3801      	subs	r0, #1
 800c548:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c54c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c550:	42a8      	cmp	r0, r5
 800c552:	d1fb      	bne.n	800c54c <__sccl+0x1c>
 800c554:	b90b      	cbnz	r3, 800c55a <__sccl+0x2a>
 800c556:	1e50      	subs	r0, r2, #1
 800c558:	bd70      	pop	{r4, r5, r6, pc}
 800c55a:	f081 0101 	eor.w	r1, r1, #1
 800c55e:	54e1      	strb	r1, [r4, r3]
 800c560:	4610      	mov	r0, r2
 800c562:	4602      	mov	r2, r0
 800c564:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c568:	2d2d      	cmp	r5, #45	@ 0x2d
 800c56a:	d005      	beq.n	800c578 <__sccl+0x48>
 800c56c:	2d5d      	cmp	r5, #93	@ 0x5d
 800c56e:	d016      	beq.n	800c59e <__sccl+0x6e>
 800c570:	2d00      	cmp	r5, #0
 800c572:	d0f1      	beq.n	800c558 <__sccl+0x28>
 800c574:	462b      	mov	r3, r5
 800c576:	e7f2      	b.n	800c55e <__sccl+0x2e>
 800c578:	7846      	ldrb	r6, [r0, #1]
 800c57a:	2e5d      	cmp	r6, #93	@ 0x5d
 800c57c:	d0fa      	beq.n	800c574 <__sccl+0x44>
 800c57e:	42b3      	cmp	r3, r6
 800c580:	dcf8      	bgt.n	800c574 <__sccl+0x44>
 800c582:	3002      	adds	r0, #2
 800c584:	461a      	mov	r2, r3
 800c586:	3201      	adds	r2, #1
 800c588:	4296      	cmp	r6, r2
 800c58a:	54a1      	strb	r1, [r4, r2]
 800c58c:	dcfb      	bgt.n	800c586 <__sccl+0x56>
 800c58e:	1af2      	subs	r2, r6, r3
 800c590:	3a01      	subs	r2, #1
 800c592:	1c5d      	adds	r5, r3, #1
 800c594:	42b3      	cmp	r3, r6
 800c596:	bfa8      	it	ge
 800c598:	2200      	movge	r2, #0
 800c59a:	18ab      	adds	r3, r5, r2
 800c59c:	e7e1      	b.n	800c562 <__sccl+0x32>
 800c59e:	4610      	mov	r0, r2
 800c5a0:	e7da      	b.n	800c558 <__sccl+0x28>

0800c5a2 <__submore>:
 800c5a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5a6:	460c      	mov	r4, r1
 800c5a8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c5aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c5ae:	4299      	cmp	r1, r3
 800c5b0:	d11d      	bne.n	800c5ee <__submore+0x4c>
 800c5b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c5b6:	f7fd fedb 	bl	800a370 <_malloc_r>
 800c5ba:	b918      	cbnz	r0, 800c5c4 <__submore+0x22>
 800c5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5c8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c5ca:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c5ce:	6360      	str	r0, [r4, #52]	@ 0x34
 800c5d0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800c5d4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c5d8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800c5dc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c5e0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800c5e4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c5e8:	6020      	str	r0, [r4, #0]
 800c5ea:	2000      	movs	r0, #0
 800c5ec:	e7e8      	b.n	800c5c0 <__submore+0x1e>
 800c5ee:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c5f0:	0077      	lsls	r7, r6, #1
 800c5f2:	463a      	mov	r2, r7
 800c5f4:	f000 fbd1 	bl	800cd9a <_realloc_r>
 800c5f8:	4605      	mov	r5, r0
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	d0de      	beq.n	800c5bc <__submore+0x1a>
 800c5fe:	eb00 0806 	add.w	r8, r0, r6
 800c602:	4601      	mov	r1, r0
 800c604:	4632      	mov	r2, r6
 800c606:	4640      	mov	r0, r8
 800c608:	f7fc ffdb 	bl	80095c2 <memcpy>
 800c60c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c610:	f8c4 8000 	str.w	r8, [r4]
 800c614:	e7e9      	b.n	800c5ea <__submore+0x48>

0800c616 <memmove>:
 800c616:	4288      	cmp	r0, r1
 800c618:	b510      	push	{r4, lr}
 800c61a:	eb01 0402 	add.w	r4, r1, r2
 800c61e:	d902      	bls.n	800c626 <memmove+0x10>
 800c620:	4284      	cmp	r4, r0
 800c622:	4623      	mov	r3, r4
 800c624:	d807      	bhi.n	800c636 <memmove+0x20>
 800c626:	1e43      	subs	r3, r0, #1
 800c628:	42a1      	cmp	r1, r4
 800c62a:	d008      	beq.n	800c63e <memmove+0x28>
 800c62c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c630:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c634:	e7f8      	b.n	800c628 <memmove+0x12>
 800c636:	4402      	add	r2, r0
 800c638:	4601      	mov	r1, r0
 800c63a:	428a      	cmp	r2, r1
 800c63c:	d100      	bne.n	800c640 <memmove+0x2a>
 800c63e:	bd10      	pop	{r4, pc}
 800c640:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c644:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c648:	e7f7      	b.n	800c63a <memmove+0x24>

0800c64a <strncmp>:
 800c64a:	b510      	push	{r4, lr}
 800c64c:	b16a      	cbz	r2, 800c66a <strncmp+0x20>
 800c64e:	3901      	subs	r1, #1
 800c650:	1884      	adds	r4, r0, r2
 800c652:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c656:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d103      	bne.n	800c666 <strncmp+0x1c>
 800c65e:	42a0      	cmp	r0, r4
 800c660:	d001      	beq.n	800c666 <strncmp+0x1c>
 800c662:	2a00      	cmp	r2, #0
 800c664:	d1f5      	bne.n	800c652 <strncmp+0x8>
 800c666:	1ad0      	subs	r0, r2, r3
 800c668:	bd10      	pop	{r4, pc}
 800c66a:	4610      	mov	r0, r2
 800c66c:	e7fc      	b.n	800c668 <strncmp+0x1e>
	...

0800c670 <_sbrk_r>:
 800c670:	b538      	push	{r3, r4, r5, lr}
 800c672:	4d06      	ldr	r5, [pc, #24]	@ (800c68c <_sbrk_r+0x1c>)
 800c674:	2300      	movs	r3, #0
 800c676:	4604      	mov	r4, r0
 800c678:	4608      	mov	r0, r1
 800c67a:	602b      	str	r3, [r5, #0]
 800c67c:	f7f6 fa5a 	bl	8002b34 <_sbrk>
 800c680:	1c43      	adds	r3, r0, #1
 800c682:	d102      	bne.n	800c68a <_sbrk_r+0x1a>
 800c684:	682b      	ldr	r3, [r5, #0]
 800c686:	b103      	cbz	r3, 800c68a <_sbrk_r+0x1a>
 800c688:	6023      	str	r3, [r4, #0]
 800c68a:	bd38      	pop	{r3, r4, r5, pc}
 800c68c:	2000080c 	.word	0x2000080c

0800c690 <nan>:
 800c690:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c698 <nan+0x8>
 800c694:	4770      	bx	lr
 800c696:	bf00      	nop
 800c698:	00000000 	.word	0x00000000
 800c69c:	7ff80000 	.word	0x7ff80000

0800c6a0 <__assert_func>:
 800c6a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6a2:	4614      	mov	r4, r2
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	4b09      	ldr	r3, [pc, #36]	@ (800c6cc <__assert_func+0x2c>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4605      	mov	r5, r0
 800c6ac:	68d8      	ldr	r0, [r3, #12]
 800c6ae:	b954      	cbnz	r4, 800c6c6 <__assert_func+0x26>
 800c6b0:	4b07      	ldr	r3, [pc, #28]	@ (800c6d0 <__assert_func+0x30>)
 800c6b2:	461c      	mov	r4, r3
 800c6b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c6b8:	9100      	str	r1, [sp, #0]
 800c6ba:	462b      	mov	r3, r5
 800c6bc:	4905      	ldr	r1, [pc, #20]	@ (800c6d4 <__assert_func+0x34>)
 800c6be:	f000 fc19 	bl	800cef4 <fiprintf>
 800c6c2:	f000 fc29 	bl	800cf18 <abort>
 800c6c6:	4b04      	ldr	r3, [pc, #16]	@ (800c6d8 <__assert_func+0x38>)
 800c6c8:	e7f4      	b.n	800c6b4 <__assert_func+0x14>
 800c6ca:	bf00      	nop
 800c6cc:	20000014 	.word	0x20000014
 800c6d0:	0800d990 	.word	0x0800d990
 800c6d4:	0800d962 	.word	0x0800d962
 800c6d8:	0800d955 	.word	0x0800d955

0800c6dc <_calloc_r>:
 800c6dc:	b570      	push	{r4, r5, r6, lr}
 800c6de:	fba1 5402 	umull	r5, r4, r1, r2
 800c6e2:	b93c      	cbnz	r4, 800c6f4 <_calloc_r+0x18>
 800c6e4:	4629      	mov	r1, r5
 800c6e6:	f7fd fe43 	bl	800a370 <_malloc_r>
 800c6ea:	4606      	mov	r6, r0
 800c6ec:	b928      	cbnz	r0, 800c6fa <_calloc_r+0x1e>
 800c6ee:	2600      	movs	r6, #0
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	bd70      	pop	{r4, r5, r6, pc}
 800c6f4:	220c      	movs	r2, #12
 800c6f6:	6002      	str	r2, [r0, #0]
 800c6f8:	e7f9      	b.n	800c6ee <_calloc_r+0x12>
 800c6fa:	462a      	mov	r2, r5
 800c6fc:	4621      	mov	r1, r4
 800c6fe:	f7fc fed2 	bl	80094a6 <memset>
 800c702:	e7f5      	b.n	800c6f0 <_calloc_r+0x14>

0800c704 <rshift>:
 800c704:	6903      	ldr	r3, [r0, #16]
 800c706:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c70a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c70e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c712:	f100 0414 	add.w	r4, r0, #20
 800c716:	dd45      	ble.n	800c7a4 <rshift+0xa0>
 800c718:	f011 011f 	ands.w	r1, r1, #31
 800c71c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c720:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c724:	d10c      	bne.n	800c740 <rshift+0x3c>
 800c726:	f100 0710 	add.w	r7, r0, #16
 800c72a:	4629      	mov	r1, r5
 800c72c:	42b1      	cmp	r1, r6
 800c72e:	d334      	bcc.n	800c79a <rshift+0x96>
 800c730:	1a9b      	subs	r3, r3, r2
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	1eea      	subs	r2, r5, #3
 800c736:	4296      	cmp	r6, r2
 800c738:	bf38      	it	cc
 800c73a:	2300      	movcc	r3, #0
 800c73c:	4423      	add	r3, r4
 800c73e:	e015      	b.n	800c76c <rshift+0x68>
 800c740:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c744:	f1c1 0820 	rsb	r8, r1, #32
 800c748:	40cf      	lsrs	r7, r1
 800c74a:	f105 0e04 	add.w	lr, r5, #4
 800c74e:	46a1      	mov	r9, r4
 800c750:	4576      	cmp	r6, lr
 800c752:	46f4      	mov	ip, lr
 800c754:	d815      	bhi.n	800c782 <rshift+0x7e>
 800c756:	1a9a      	subs	r2, r3, r2
 800c758:	0092      	lsls	r2, r2, #2
 800c75a:	3a04      	subs	r2, #4
 800c75c:	3501      	adds	r5, #1
 800c75e:	42ae      	cmp	r6, r5
 800c760:	bf38      	it	cc
 800c762:	2200      	movcc	r2, #0
 800c764:	18a3      	adds	r3, r4, r2
 800c766:	50a7      	str	r7, [r4, r2]
 800c768:	b107      	cbz	r7, 800c76c <rshift+0x68>
 800c76a:	3304      	adds	r3, #4
 800c76c:	1b1a      	subs	r2, r3, r4
 800c76e:	42a3      	cmp	r3, r4
 800c770:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c774:	bf08      	it	eq
 800c776:	2300      	moveq	r3, #0
 800c778:	6102      	str	r2, [r0, #16]
 800c77a:	bf08      	it	eq
 800c77c:	6143      	streq	r3, [r0, #20]
 800c77e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c782:	f8dc c000 	ldr.w	ip, [ip]
 800c786:	fa0c fc08 	lsl.w	ip, ip, r8
 800c78a:	ea4c 0707 	orr.w	r7, ip, r7
 800c78e:	f849 7b04 	str.w	r7, [r9], #4
 800c792:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c796:	40cf      	lsrs	r7, r1
 800c798:	e7da      	b.n	800c750 <rshift+0x4c>
 800c79a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c79e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c7a2:	e7c3      	b.n	800c72c <rshift+0x28>
 800c7a4:	4623      	mov	r3, r4
 800c7a6:	e7e1      	b.n	800c76c <rshift+0x68>

0800c7a8 <__hexdig_fun>:
 800c7a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c7ac:	2b09      	cmp	r3, #9
 800c7ae:	d802      	bhi.n	800c7b6 <__hexdig_fun+0xe>
 800c7b0:	3820      	subs	r0, #32
 800c7b2:	b2c0      	uxtb	r0, r0
 800c7b4:	4770      	bx	lr
 800c7b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c7ba:	2b05      	cmp	r3, #5
 800c7bc:	d801      	bhi.n	800c7c2 <__hexdig_fun+0x1a>
 800c7be:	3847      	subs	r0, #71	@ 0x47
 800c7c0:	e7f7      	b.n	800c7b2 <__hexdig_fun+0xa>
 800c7c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c7c6:	2b05      	cmp	r3, #5
 800c7c8:	d801      	bhi.n	800c7ce <__hexdig_fun+0x26>
 800c7ca:	3827      	subs	r0, #39	@ 0x27
 800c7cc:	e7f1      	b.n	800c7b2 <__hexdig_fun+0xa>
 800c7ce:	2000      	movs	r0, #0
 800c7d0:	4770      	bx	lr
	...

0800c7d4 <__gethex>:
 800c7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d8:	b085      	sub	sp, #20
 800c7da:	468a      	mov	sl, r1
 800c7dc:	9302      	str	r3, [sp, #8]
 800c7de:	680b      	ldr	r3, [r1, #0]
 800c7e0:	9001      	str	r0, [sp, #4]
 800c7e2:	4690      	mov	r8, r2
 800c7e4:	1c9c      	adds	r4, r3, #2
 800c7e6:	46a1      	mov	r9, r4
 800c7e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c7ec:	2830      	cmp	r0, #48	@ 0x30
 800c7ee:	d0fa      	beq.n	800c7e6 <__gethex+0x12>
 800c7f0:	eba9 0303 	sub.w	r3, r9, r3
 800c7f4:	f1a3 0b02 	sub.w	fp, r3, #2
 800c7f8:	f7ff ffd6 	bl	800c7a8 <__hexdig_fun>
 800c7fc:	4605      	mov	r5, r0
 800c7fe:	2800      	cmp	r0, #0
 800c800:	d168      	bne.n	800c8d4 <__gethex+0x100>
 800c802:	49a0      	ldr	r1, [pc, #640]	@ (800ca84 <__gethex+0x2b0>)
 800c804:	2201      	movs	r2, #1
 800c806:	4648      	mov	r0, r9
 800c808:	f7ff ff1f 	bl	800c64a <strncmp>
 800c80c:	4607      	mov	r7, r0
 800c80e:	2800      	cmp	r0, #0
 800c810:	d167      	bne.n	800c8e2 <__gethex+0x10e>
 800c812:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c816:	4626      	mov	r6, r4
 800c818:	f7ff ffc6 	bl	800c7a8 <__hexdig_fun>
 800c81c:	2800      	cmp	r0, #0
 800c81e:	d062      	beq.n	800c8e6 <__gethex+0x112>
 800c820:	4623      	mov	r3, r4
 800c822:	7818      	ldrb	r0, [r3, #0]
 800c824:	2830      	cmp	r0, #48	@ 0x30
 800c826:	4699      	mov	r9, r3
 800c828:	f103 0301 	add.w	r3, r3, #1
 800c82c:	d0f9      	beq.n	800c822 <__gethex+0x4e>
 800c82e:	f7ff ffbb 	bl	800c7a8 <__hexdig_fun>
 800c832:	fab0 f580 	clz	r5, r0
 800c836:	096d      	lsrs	r5, r5, #5
 800c838:	f04f 0b01 	mov.w	fp, #1
 800c83c:	464a      	mov	r2, r9
 800c83e:	4616      	mov	r6, r2
 800c840:	3201      	adds	r2, #1
 800c842:	7830      	ldrb	r0, [r6, #0]
 800c844:	f7ff ffb0 	bl	800c7a8 <__hexdig_fun>
 800c848:	2800      	cmp	r0, #0
 800c84a:	d1f8      	bne.n	800c83e <__gethex+0x6a>
 800c84c:	498d      	ldr	r1, [pc, #564]	@ (800ca84 <__gethex+0x2b0>)
 800c84e:	2201      	movs	r2, #1
 800c850:	4630      	mov	r0, r6
 800c852:	f7ff fefa 	bl	800c64a <strncmp>
 800c856:	2800      	cmp	r0, #0
 800c858:	d13f      	bne.n	800c8da <__gethex+0x106>
 800c85a:	b944      	cbnz	r4, 800c86e <__gethex+0x9a>
 800c85c:	1c74      	adds	r4, r6, #1
 800c85e:	4622      	mov	r2, r4
 800c860:	4616      	mov	r6, r2
 800c862:	3201      	adds	r2, #1
 800c864:	7830      	ldrb	r0, [r6, #0]
 800c866:	f7ff ff9f 	bl	800c7a8 <__hexdig_fun>
 800c86a:	2800      	cmp	r0, #0
 800c86c:	d1f8      	bne.n	800c860 <__gethex+0x8c>
 800c86e:	1ba4      	subs	r4, r4, r6
 800c870:	00a7      	lsls	r7, r4, #2
 800c872:	7833      	ldrb	r3, [r6, #0]
 800c874:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c878:	2b50      	cmp	r3, #80	@ 0x50
 800c87a:	d13e      	bne.n	800c8fa <__gethex+0x126>
 800c87c:	7873      	ldrb	r3, [r6, #1]
 800c87e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c880:	d033      	beq.n	800c8ea <__gethex+0x116>
 800c882:	2b2d      	cmp	r3, #45	@ 0x2d
 800c884:	d034      	beq.n	800c8f0 <__gethex+0x11c>
 800c886:	1c71      	adds	r1, r6, #1
 800c888:	2400      	movs	r4, #0
 800c88a:	7808      	ldrb	r0, [r1, #0]
 800c88c:	f7ff ff8c 	bl	800c7a8 <__hexdig_fun>
 800c890:	1e43      	subs	r3, r0, #1
 800c892:	b2db      	uxtb	r3, r3
 800c894:	2b18      	cmp	r3, #24
 800c896:	d830      	bhi.n	800c8fa <__gethex+0x126>
 800c898:	f1a0 0210 	sub.w	r2, r0, #16
 800c89c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c8a0:	f7ff ff82 	bl	800c7a8 <__hexdig_fun>
 800c8a4:	f100 3cff 	add.w	ip, r0, #4294967295
 800c8a8:	fa5f fc8c 	uxtb.w	ip, ip
 800c8ac:	f1bc 0f18 	cmp.w	ip, #24
 800c8b0:	f04f 030a 	mov.w	r3, #10
 800c8b4:	d91e      	bls.n	800c8f4 <__gethex+0x120>
 800c8b6:	b104      	cbz	r4, 800c8ba <__gethex+0xe6>
 800c8b8:	4252      	negs	r2, r2
 800c8ba:	4417      	add	r7, r2
 800c8bc:	f8ca 1000 	str.w	r1, [sl]
 800c8c0:	b1ed      	cbz	r5, 800c8fe <__gethex+0x12a>
 800c8c2:	f1bb 0f00 	cmp.w	fp, #0
 800c8c6:	bf0c      	ite	eq
 800c8c8:	2506      	moveq	r5, #6
 800c8ca:	2500      	movne	r5, #0
 800c8cc:	4628      	mov	r0, r5
 800c8ce:	b005      	add	sp, #20
 800c8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8d4:	2500      	movs	r5, #0
 800c8d6:	462c      	mov	r4, r5
 800c8d8:	e7b0      	b.n	800c83c <__gethex+0x68>
 800c8da:	2c00      	cmp	r4, #0
 800c8dc:	d1c7      	bne.n	800c86e <__gethex+0x9a>
 800c8de:	4627      	mov	r7, r4
 800c8e0:	e7c7      	b.n	800c872 <__gethex+0x9e>
 800c8e2:	464e      	mov	r6, r9
 800c8e4:	462f      	mov	r7, r5
 800c8e6:	2501      	movs	r5, #1
 800c8e8:	e7c3      	b.n	800c872 <__gethex+0x9e>
 800c8ea:	2400      	movs	r4, #0
 800c8ec:	1cb1      	adds	r1, r6, #2
 800c8ee:	e7cc      	b.n	800c88a <__gethex+0xb6>
 800c8f0:	2401      	movs	r4, #1
 800c8f2:	e7fb      	b.n	800c8ec <__gethex+0x118>
 800c8f4:	fb03 0002 	mla	r0, r3, r2, r0
 800c8f8:	e7ce      	b.n	800c898 <__gethex+0xc4>
 800c8fa:	4631      	mov	r1, r6
 800c8fc:	e7de      	b.n	800c8bc <__gethex+0xe8>
 800c8fe:	eba6 0309 	sub.w	r3, r6, r9
 800c902:	3b01      	subs	r3, #1
 800c904:	4629      	mov	r1, r5
 800c906:	2b07      	cmp	r3, #7
 800c908:	dc0a      	bgt.n	800c920 <__gethex+0x14c>
 800c90a:	9801      	ldr	r0, [sp, #4]
 800c90c:	f7fd fdbc 	bl	800a488 <_Balloc>
 800c910:	4604      	mov	r4, r0
 800c912:	b940      	cbnz	r0, 800c926 <__gethex+0x152>
 800c914:	4b5c      	ldr	r3, [pc, #368]	@ (800ca88 <__gethex+0x2b4>)
 800c916:	4602      	mov	r2, r0
 800c918:	21e4      	movs	r1, #228	@ 0xe4
 800c91a:	485c      	ldr	r0, [pc, #368]	@ (800ca8c <__gethex+0x2b8>)
 800c91c:	f7ff fec0 	bl	800c6a0 <__assert_func>
 800c920:	3101      	adds	r1, #1
 800c922:	105b      	asrs	r3, r3, #1
 800c924:	e7ef      	b.n	800c906 <__gethex+0x132>
 800c926:	f100 0a14 	add.w	sl, r0, #20
 800c92a:	2300      	movs	r3, #0
 800c92c:	4655      	mov	r5, sl
 800c92e:	469b      	mov	fp, r3
 800c930:	45b1      	cmp	r9, r6
 800c932:	d337      	bcc.n	800c9a4 <__gethex+0x1d0>
 800c934:	f845 bb04 	str.w	fp, [r5], #4
 800c938:	eba5 050a 	sub.w	r5, r5, sl
 800c93c:	10ad      	asrs	r5, r5, #2
 800c93e:	6125      	str	r5, [r4, #16]
 800c940:	4658      	mov	r0, fp
 800c942:	f7fd fe93 	bl	800a66c <__hi0bits>
 800c946:	016d      	lsls	r5, r5, #5
 800c948:	f8d8 6000 	ldr.w	r6, [r8]
 800c94c:	1a2d      	subs	r5, r5, r0
 800c94e:	42b5      	cmp	r5, r6
 800c950:	dd54      	ble.n	800c9fc <__gethex+0x228>
 800c952:	1bad      	subs	r5, r5, r6
 800c954:	4629      	mov	r1, r5
 800c956:	4620      	mov	r0, r4
 800c958:	f7fe fa27 	bl	800adaa <__any_on>
 800c95c:	4681      	mov	r9, r0
 800c95e:	b178      	cbz	r0, 800c980 <__gethex+0x1ac>
 800c960:	1e6b      	subs	r3, r5, #1
 800c962:	1159      	asrs	r1, r3, #5
 800c964:	f003 021f 	and.w	r2, r3, #31
 800c968:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c96c:	f04f 0901 	mov.w	r9, #1
 800c970:	fa09 f202 	lsl.w	r2, r9, r2
 800c974:	420a      	tst	r2, r1
 800c976:	d003      	beq.n	800c980 <__gethex+0x1ac>
 800c978:	454b      	cmp	r3, r9
 800c97a:	dc36      	bgt.n	800c9ea <__gethex+0x216>
 800c97c:	f04f 0902 	mov.w	r9, #2
 800c980:	4629      	mov	r1, r5
 800c982:	4620      	mov	r0, r4
 800c984:	f7ff febe 	bl	800c704 <rshift>
 800c988:	442f      	add	r7, r5
 800c98a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c98e:	42bb      	cmp	r3, r7
 800c990:	da42      	bge.n	800ca18 <__gethex+0x244>
 800c992:	9801      	ldr	r0, [sp, #4]
 800c994:	4621      	mov	r1, r4
 800c996:	f7fd fdb7 	bl	800a508 <_Bfree>
 800c99a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c99c:	2300      	movs	r3, #0
 800c99e:	6013      	str	r3, [r2, #0]
 800c9a0:	25a3      	movs	r5, #163	@ 0xa3
 800c9a2:	e793      	b.n	800c8cc <__gethex+0xf8>
 800c9a4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c9a8:	2a2e      	cmp	r2, #46	@ 0x2e
 800c9aa:	d012      	beq.n	800c9d2 <__gethex+0x1fe>
 800c9ac:	2b20      	cmp	r3, #32
 800c9ae:	d104      	bne.n	800c9ba <__gethex+0x1e6>
 800c9b0:	f845 bb04 	str.w	fp, [r5], #4
 800c9b4:	f04f 0b00 	mov.w	fp, #0
 800c9b8:	465b      	mov	r3, fp
 800c9ba:	7830      	ldrb	r0, [r6, #0]
 800c9bc:	9303      	str	r3, [sp, #12]
 800c9be:	f7ff fef3 	bl	800c7a8 <__hexdig_fun>
 800c9c2:	9b03      	ldr	r3, [sp, #12]
 800c9c4:	f000 000f 	and.w	r0, r0, #15
 800c9c8:	4098      	lsls	r0, r3
 800c9ca:	ea4b 0b00 	orr.w	fp, fp, r0
 800c9ce:	3304      	adds	r3, #4
 800c9d0:	e7ae      	b.n	800c930 <__gethex+0x15c>
 800c9d2:	45b1      	cmp	r9, r6
 800c9d4:	d8ea      	bhi.n	800c9ac <__gethex+0x1d8>
 800c9d6:	492b      	ldr	r1, [pc, #172]	@ (800ca84 <__gethex+0x2b0>)
 800c9d8:	9303      	str	r3, [sp, #12]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	4630      	mov	r0, r6
 800c9de:	f7ff fe34 	bl	800c64a <strncmp>
 800c9e2:	9b03      	ldr	r3, [sp, #12]
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	d1e1      	bne.n	800c9ac <__gethex+0x1d8>
 800c9e8:	e7a2      	b.n	800c930 <__gethex+0x15c>
 800c9ea:	1ea9      	subs	r1, r5, #2
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	f7fe f9dc 	bl	800adaa <__any_on>
 800c9f2:	2800      	cmp	r0, #0
 800c9f4:	d0c2      	beq.n	800c97c <__gethex+0x1a8>
 800c9f6:	f04f 0903 	mov.w	r9, #3
 800c9fa:	e7c1      	b.n	800c980 <__gethex+0x1ac>
 800c9fc:	da09      	bge.n	800ca12 <__gethex+0x23e>
 800c9fe:	1b75      	subs	r5, r6, r5
 800ca00:	4621      	mov	r1, r4
 800ca02:	9801      	ldr	r0, [sp, #4]
 800ca04:	462a      	mov	r2, r5
 800ca06:	f7fd ff97 	bl	800a938 <__lshift>
 800ca0a:	1b7f      	subs	r7, r7, r5
 800ca0c:	4604      	mov	r4, r0
 800ca0e:	f100 0a14 	add.w	sl, r0, #20
 800ca12:	f04f 0900 	mov.w	r9, #0
 800ca16:	e7b8      	b.n	800c98a <__gethex+0x1b6>
 800ca18:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ca1c:	42bd      	cmp	r5, r7
 800ca1e:	dd6f      	ble.n	800cb00 <__gethex+0x32c>
 800ca20:	1bed      	subs	r5, r5, r7
 800ca22:	42ae      	cmp	r6, r5
 800ca24:	dc34      	bgt.n	800ca90 <__gethex+0x2bc>
 800ca26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ca2a:	2b02      	cmp	r3, #2
 800ca2c:	d022      	beq.n	800ca74 <__gethex+0x2a0>
 800ca2e:	2b03      	cmp	r3, #3
 800ca30:	d024      	beq.n	800ca7c <__gethex+0x2a8>
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	d115      	bne.n	800ca62 <__gethex+0x28e>
 800ca36:	42ae      	cmp	r6, r5
 800ca38:	d113      	bne.n	800ca62 <__gethex+0x28e>
 800ca3a:	2e01      	cmp	r6, #1
 800ca3c:	d10b      	bne.n	800ca56 <__gethex+0x282>
 800ca3e:	9a02      	ldr	r2, [sp, #8]
 800ca40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ca44:	6013      	str	r3, [r2, #0]
 800ca46:	2301      	movs	r3, #1
 800ca48:	6123      	str	r3, [r4, #16]
 800ca4a:	f8ca 3000 	str.w	r3, [sl]
 800ca4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca50:	2562      	movs	r5, #98	@ 0x62
 800ca52:	601c      	str	r4, [r3, #0]
 800ca54:	e73a      	b.n	800c8cc <__gethex+0xf8>
 800ca56:	1e71      	subs	r1, r6, #1
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f7fe f9a6 	bl	800adaa <__any_on>
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	d1ed      	bne.n	800ca3e <__gethex+0x26a>
 800ca62:	9801      	ldr	r0, [sp, #4]
 800ca64:	4621      	mov	r1, r4
 800ca66:	f7fd fd4f 	bl	800a508 <_Bfree>
 800ca6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	6013      	str	r3, [r2, #0]
 800ca70:	2550      	movs	r5, #80	@ 0x50
 800ca72:	e72b      	b.n	800c8cc <__gethex+0xf8>
 800ca74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1f3      	bne.n	800ca62 <__gethex+0x28e>
 800ca7a:	e7e0      	b.n	800ca3e <__gethex+0x26a>
 800ca7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d1dd      	bne.n	800ca3e <__gethex+0x26a>
 800ca82:	e7ee      	b.n	800ca62 <__gethex+0x28e>
 800ca84:	0800d7c8 	.word	0x0800d7c8
 800ca88:	0800d65f 	.word	0x0800d65f
 800ca8c:	0800d991 	.word	0x0800d991
 800ca90:	1e6f      	subs	r7, r5, #1
 800ca92:	f1b9 0f00 	cmp.w	r9, #0
 800ca96:	d130      	bne.n	800cafa <__gethex+0x326>
 800ca98:	b127      	cbz	r7, 800caa4 <__gethex+0x2d0>
 800ca9a:	4639      	mov	r1, r7
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	f7fe f984 	bl	800adaa <__any_on>
 800caa2:	4681      	mov	r9, r0
 800caa4:	117a      	asrs	r2, r7, #5
 800caa6:	2301      	movs	r3, #1
 800caa8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800caac:	f007 071f 	and.w	r7, r7, #31
 800cab0:	40bb      	lsls	r3, r7
 800cab2:	4213      	tst	r3, r2
 800cab4:	4629      	mov	r1, r5
 800cab6:	4620      	mov	r0, r4
 800cab8:	bf18      	it	ne
 800caba:	f049 0902 	orrne.w	r9, r9, #2
 800cabe:	f7ff fe21 	bl	800c704 <rshift>
 800cac2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cac6:	1b76      	subs	r6, r6, r5
 800cac8:	2502      	movs	r5, #2
 800caca:	f1b9 0f00 	cmp.w	r9, #0
 800cace:	d047      	beq.n	800cb60 <__gethex+0x38c>
 800cad0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cad4:	2b02      	cmp	r3, #2
 800cad6:	d015      	beq.n	800cb04 <__gethex+0x330>
 800cad8:	2b03      	cmp	r3, #3
 800cada:	d017      	beq.n	800cb0c <__gethex+0x338>
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d109      	bne.n	800caf4 <__gethex+0x320>
 800cae0:	f019 0f02 	tst.w	r9, #2
 800cae4:	d006      	beq.n	800caf4 <__gethex+0x320>
 800cae6:	f8da 3000 	ldr.w	r3, [sl]
 800caea:	ea49 0903 	orr.w	r9, r9, r3
 800caee:	f019 0f01 	tst.w	r9, #1
 800caf2:	d10e      	bne.n	800cb12 <__gethex+0x33e>
 800caf4:	f045 0510 	orr.w	r5, r5, #16
 800caf8:	e032      	b.n	800cb60 <__gethex+0x38c>
 800cafa:	f04f 0901 	mov.w	r9, #1
 800cafe:	e7d1      	b.n	800caa4 <__gethex+0x2d0>
 800cb00:	2501      	movs	r5, #1
 800cb02:	e7e2      	b.n	800caca <__gethex+0x2f6>
 800cb04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb06:	f1c3 0301 	rsb	r3, r3, #1
 800cb0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cb0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d0f0      	beq.n	800caf4 <__gethex+0x320>
 800cb12:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cb16:	f104 0314 	add.w	r3, r4, #20
 800cb1a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cb1e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cb22:	f04f 0c00 	mov.w	ip, #0
 800cb26:	4618      	mov	r0, r3
 800cb28:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb2c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cb30:	d01b      	beq.n	800cb6a <__gethex+0x396>
 800cb32:	3201      	adds	r2, #1
 800cb34:	6002      	str	r2, [r0, #0]
 800cb36:	2d02      	cmp	r5, #2
 800cb38:	f104 0314 	add.w	r3, r4, #20
 800cb3c:	d13c      	bne.n	800cbb8 <__gethex+0x3e4>
 800cb3e:	f8d8 2000 	ldr.w	r2, [r8]
 800cb42:	3a01      	subs	r2, #1
 800cb44:	42b2      	cmp	r2, r6
 800cb46:	d109      	bne.n	800cb5c <__gethex+0x388>
 800cb48:	1171      	asrs	r1, r6, #5
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cb50:	f006 061f 	and.w	r6, r6, #31
 800cb54:	fa02 f606 	lsl.w	r6, r2, r6
 800cb58:	421e      	tst	r6, r3
 800cb5a:	d13a      	bne.n	800cbd2 <__gethex+0x3fe>
 800cb5c:	f045 0520 	orr.w	r5, r5, #32
 800cb60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb62:	601c      	str	r4, [r3, #0]
 800cb64:	9b02      	ldr	r3, [sp, #8]
 800cb66:	601f      	str	r7, [r3, #0]
 800cb68:	e6b0      	b.n	800c8cc <__gethex+0xf8>
 800cb6a:	4299      	cmp	r1, r3
 800cb6c:	f843 cc04 	str.w	ip, [r3, #-4]
 800cb70:	d8d9      	bhi.n	800cb26 <__gethex+0x352>
 800cb72:	68a3      	ldr	r3, [r4, #8]
 800cb74:	459b      	cmp	fp, r3
 800cb76:	db17      	blt.n	800cba8 <__gethex+0x3d4>
 800cb78:	6861      	ldr	r1, [r4, #4]
 800cb7a:	9801      	ldr	r0, [sp, #4]
 800cb7c:	3101      	adds	r1, #1
 800cb7e:	f7fd fc83 	bl	800a488 <_Balloc>
 800cb82:	4681      	mov	r9, r0
 800cb84:	b918      	cbnz	r0, 800cb8e <__gethex+0x3ba>
 800cb86:	4b1a      	ldr	r3, [pc, #104]	@ (800cbf0 <__gethex+0x41c>)
 800cb88:	4602      	mov	r2, r0
 800cb8a:	2184      	movs	r1, #132	@ 0x84
 800cb8c:	e6c5      	b.n	800c91a <__gethex+0x146>
 800cb8e:	6922      	ldr	r2, [r4, #16]
 800cb90:	3202      	adds	r2, #2
 800cb92:	f104 010c 	add.w	r1, r4, #12
 800cb96:	0092      	lsls	r2, r2, #2
 800cb98:	300c      	adds	r0, #12
 800cb9a:	f7fc fd12 	bl	80095c2 <memcpy>
 800cb9e:	4621      	mov	r1, r4
 800cba0:	9801      	ldr	r0, [sp, #4]
 800cba2:	f7fd fcb1 	bl	800a508 <_Bfree>
 800cba6:	464c      	mov	r4, r9
 800cba8:	6923      	ldr	r3, [r4, #16]
 800cbaa:	1c5a      	adds	r2, r3, #1
 800cbac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cbb0:	6122      	str	r2, [r4, #16]
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	615a      	str	r2, [r3, #20]
 800cbb6:	e7be      	b.n	800cb36 <__gethex+0x362>
 800cbb8:	6922      	ldr	r2, [r4, #16]
 800cbba:	455a      	cmp	r2, fp
 800cbbc:	dd0b      	ble.n	800cbd6 <__gethex+0x402>
 800cbbe:	2101      	movs	r1, #1
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f7ff fd9f 	bl	800c704 <rshift>
 800cbc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cbca:	3701      	adds	r7, #1
 800cbcc:	42bb      	cmp	r3, r7
 800cbce:	f6ff aee0 	blt.w	800c992 <__gethex+0x1be>
 800cbd2:	2501      	movs	r5, #1
 800cbd4:	e7c2      	b.n	800cb5c <__gethex+0x388>
 800cbd6:	f016 061f 	ands.w	r6, r6, #31
 800cbda:	d0fa      	beq.n	800cbd2 <__gethex+0x3fe>
 800cbdc:	4453      	add	r3, sl
 800cbde:	f1c6 0620 	rsb	r6, r6, #32
 800cbe2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cbe6:	f7fd fd41 	bl	800a66c <__hi0bits>
 800cbea:	42b0      	cmp	r0, r6
 800cbec:	dbe7      	blt.n	800cbbe <__gethex+0x3ea>
 800cbee:	e7f0      	b.n	800cbd2 <__gethex+0x3fe>
 800cbf0:	0800d65f 	.word	0x0800d65f

0800cbf4 <L_shift>:
 800cbf4:	f1c2 0208 	rsb	r2, r2, #8
 800cbf8:	0092      	lsls	r2, r2, #2
 800cbfa:	b570      	push	{r4, r5, r6, lr}
 800cbfc:	f1c2 0620 	rsb	r6, r2, #32
 800cc00:	6843      	ldr	r3, [r0, #4]
 800cc02:	6804      	ldr	r4, [r0, #0]
 800cc04:	fa03 f506 	lsl.w	r5, r3, r6
 800cc08:	432c      	orrs	r4, r5
 800cc0a:	40d3      	lsrs	r3, r2
 800cc0c:	6004      	str	r4, [r0, #0]
 800cc0e:	f840 3f04 	str.w	r3, [r0, #4]!
 800cc12:	4288      	cmp	r0, r1
 800cc14:	d3f4      	bcc.n	800cc00 <L_shift+0xc>
 800cc16:	bd70      	pop	{r4, r5, r6, pc}

0800cc18 <__match>:
 800cc18:	b530      	push	{r4, r5, lr}
 800cc1a:	6803      	ldr	r3, [r0, #0]
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc22:	b914      	cbnz	r4, 800cc2a <__match+0x12>
 800cc24:	6003      	str	r3, [r0, #0]
 800cc26:	2001      	movs	r0, #1
 800cc28:	bd30      	pop	{r4, r5, pc}
 800cc2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc2e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cc32:	2d19      	cmp	r5, #25
 800cc34:	bf98      	it	ls
 800cc36:	3220      	addls	r2, #32
 800cc38:	42a2      	cmp	r2, r4
 800cc3a:	d0f0      	beq.n	800cc1e <__match+0x6>
 800cc3c:	2000      	movs	r0, #0
 800cc3e:	e7f3      	b.n	800cc28 <__match+0x10>

0800cc40 <__hexnan>:
 800cc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc44:	680b      	ldr	r3, [r1, #0]
 800cc46:	6801      	ldr	r1, [r0, #0]
 800cc48:	115e      	asrs	r6, r3, #5
 800cc4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cc4e:	f013 031f 	ands.w	r3, r3, #31
 800cc52:	b087      	sub	sp, #28
 800cc54:	bf18      	it	ne
 800cc56:	3604      	addne	r6, #4
 800cc58:	2500      	movs	r5, #0
 800cc5a:	1f37      	subs	r7, r6, #4
 800cc5c:	4682      	mov	sl, r0
 800cc5e:	4690      	mov	r8, r2
 800cc60:	9301      	str	r3, [sp, #4]
 800cc62:	f846 5c04 	str.w	r5, [r6, #-4]
 800cc66:	46b9      	mov	r9, r7
 800cc68:	463c      	mov	r4, r7
 800cc6a:	9502      	str	r5, [sp, #8]
 800cc6c:	46ab      	mov	fp, r5
 800cc6e:	784a      	ldrb	r2, [r1, #1]
 800cc70:	1c4b      	adds	r3, r1, #1
 800cc72:	9303      	str	r3, [sp, #12]
 800cc74:	b342      	cbz	r2, 800ccc8 <__hexnan+0x88>
 800cc76:	4610      	mov	r0, r2
 800cc78:	9105      	str	r1, [sp, #20]
 800cc7a:	9204      	str	r2, [sp, #16]
 800cc7c:	f7ff fd94 	bl	800c7a8 <__hexdig_fun>
 800cc80:	2800      	cmp	r0, #0
 800cc82:	d151      	bne.n	800cd28 <__hexnan+0xe8>
 800cc84:	9a04      	ldr	r2, [sp, #16]
 800cc86:	9905      	ldr	r1, [sp, #20]
 800cc88:	2a20      	cmp	r2, #32
 800cc8a:	d818      	bhi.n	800ccbe <__hexnan+0x7e>
 800cc8c:	9b02      	ldr	r3, [sp, #8]
 800cc8e:	459b      	cmp	fp, r3
 800cc90:	dd13      	ble.n	800ccba <__hexnan+0x7a>
 800cc92:	454c      	cmp	r4, r9
 800cc94:	d206      	bcs.n	800cca4 <__hexnan+0x64>
 800cc96:	2d07      	cmp	r5, #7
 800cc98:	dc04      	bgt.n	800cca4 <__hexnan+0x64>
 800cc9a:	462a      	mov	r2, r5
 800cc9c:	4649      	mov	r1, r9
 800cc9e:	4620      	mov	r0, r4
 800cca0:	f7ff ffa8 	bl	800cbf4 <L_shift>
 800cca4:	4544      	cmp	r4, r8
 800cca6:	d952      	bls.n	800cd4e <__hexnan+0x10e>
 800cca8:	2300      	movs	r3, #0
 800ccaa:	f1a4 0904 	sub.w	r9, r4, #4
 800ccae:	f844 3c04 	str.w	r3, [r4, #-4]
 800ccb2:	f8cd b008 	str.w	fp, [sp, #8]
 800ccb6:	464c      	mov	r4, r9
 800ccb8:	461d      	mov	r5, r3
 800ccba:	9903      	ldr	r1, [sp, #12]
 800ccbc:	e7d7      	b.n	800cc6e <__hexnan+0x2e>
 800ccbe:	2a29      	cmp	r2, #41	@ 0x29
 800ccc0:	d157      	bne.n	800cd72 <__hexnan+0x132>
 800ccc2:	3102      	adds	r1, #2
 800ccc4:	f8ca 1000 	str.w	r1, [sl]
 800ccc8:	f1bb 0f00 	cmp.w	fp, #0
 800cccc:	d051      	beq.n	800cd72 <__hexnan+0x132>
 800ccce:	454c      	cmp	r4, r9
 800ccd0:	d206      	bcs.n	800cce0 <__hexnan+0xa0>
 800ccd2:	2d07      	cmp	r5, #7
 800ccd4:	dc04      	bgt.n	800cce0 <__hexnan+0xa0>
 800ccd6:	462a      	mov	r2, r5
 800ccd8:	4649      	mov	r1, r9
 800ccda:	4620      	mov	r0, r4
 800ccdc:	f7ff ff8a 	bl	800cbf4 <L_shift>
 800cce0:	4544      	cmp	r4, r8
 800cce2:	d936      	bls.n	800cd52 <__hexnan+0x112>
 800cce4:	f1a8 0204 	sub.w	r2, r8, #4
 800cce8:	4623      	mov	r3, r4
 800ccea:	f853 1b04 	ldr.w	r1, [r3], #4
 800ccee:	f842 1f04 	str.w	r1, [r2, #4]!
 800ccf2:	429f      	cmp	r7, r3
 800ccf4:	d2f9      	bcs.n	800ccea <__hexnan+0xaa>
 800ccf6:	1b3b      	subs	r3, r7, r4
 800ccf8:	f023 0303 	bic.w	r3, r3, #3
 800ccfc:	3304      	adds	r3, #4
 800ccfe:	3401      	adds	r4, #1
 800cd00:	3e03      	subs	r6, #3
 800cd02:	42b4      	cmp	r4, r6
 800cd04:	bf88      	it	hi
 800cd06:	2304      	movhi	r3, #4
 800cd08:	4443      	add	r3, r8
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	f843 2b04 	str.w	r2, [r3], #4
 800cd10:	429f      	cmp	r7, r3
 800cd12:	d2fb      	bcs.n	800cd0c <__hexnan+0xcc>
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	b91b      	cbnz	r3, 800cd20 <__hexnan+0xe0>
 800cd18:	4547      	cmp	r7, r8
 800cd1a:	d128      	bne.n	800cd6e <__hexnan+0x12e>
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	603b      	str	r3, [r7, #0]
 800cd20:	2005      	movs	r0, #5
 800cd22:	b007      	add	sp, #28
 800cd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd28:	3501      	adds	r5, #1
 800cd2a:	2d08      	cmp	r5, #8
 800cd2c:	f10b 0b01 	add.w	fp, fp, #1
 800cd30:	dd06      	ble.n	800cd40 <__hexnan+0x100>
 800cd32:	4544      	cmp	r4, r8
 800cd34:	d9c1      	bls.n	800ccba <__hexnan+0x7a>
 800cd36:	2300      	movs	r3, #0
 800cd38:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd3c:	2501      	movs	r5, #1
 800cd3e:	3c04      	subs	r4, #4
 800cd40:	6822      	ldr	r2, [r4, #0]
 800cd42:	f000 000f 	and.w	r0, r0, #15
 800cd46:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cd4a:	6020      	str	r0, [r4, #0]
 800cd4c:	e7b5      	b.n	800ccba <__hexnan+0x7a>
 800cd4e:	2508      	movs	r5, #8
 800cd50:	e7b3      	b.n	800ccba <__hexnan+0x7a>
 800cd52:	9b01      	ldr	r3, [sp, #4]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d0dd      	beq.n	800cd14 <__hexnan+0xd4>
 800cd58:	f1c3 0320 	rsb	r3, r3, #32
 800cd5c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd60:	40da      	lsrs	r2, r3
 800cd62:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cd66:	4013      	ands	r3, r2
 800cd68:	f846 3c04 	str.w	r3, [r6, #-4]
 800cd6c:	e7d2      	b.n	800cd14 <__hexnan+0xd4>
 800cd6e:	3f04      	subs	r7, #4
 800cd70:	e7d0      	b.n	800cd14 <__hexnan+0xd4>
 800cd72:	2004      	movs	r0, #4
 800cd74:	e7d5      	b.n	800cd22 <__hexnan+0xe2>

0800cd76 <__ascii_mbtowc>:
 800cd76:	b082      	sub	sp, #8
 800cd78:	b901      	cbnz	r1, 800cd7c <__ascii_mbtowc+0x6>
 800cd7a:	a901      	add	r1, sp, #4
 800cd7c:	b142      	cbz	r2, 800cd90 <__ascii_mbtowc+0x1a>
 800cd7e:	b14b      	cbz	r3, 800cd94 <__ascii_mbtowc+0x1e>
 800cd80:	7813      	ldrb	r3, [r2, #0]
 800cd82:	600b      	str	r3, [r1, #0]
 800cd84:	7812      	ldrb	r2, [r2, #0]
 800cd86:	1e10      	subs	r0, r2, #0
 800cd88:	bf18      	it	ne
 800cd8a:	2001      	movne	r0, #1
 800cd8c:	b002      	add	sp, #8
 800cd8e:	4770      	bx	lr
 800cd90:	4610      	mov	r0, r2
 800cd92:	e7fb      	b.n	800cd8c <__ascii_mbtowc+0x16>
 800cd94:	f06f 0001 	mvn.w	r0, #1
 800cd98:	e7f8      	b.n	800cd8c <__ascii_mbtowc+0x16>

0800cd9a <_realloc_r>:
 800cd9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd9e:	4680      	mov	r8, r0
 800cda0:	4615      	mov	r5, r2
 800cda2:	460c      	mov	r4, r1
 800cda4:	b921      	cbnz	r1, 800cdb0 <_realloc_r+0x16>
 800cda6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdaa:	4611      	mov	r1, r2
 800cdac:	f7fd bae0 	b.w	800a370 <_malloc_r>
 800cdb0:	b92a      	cbnz	r2, 800cdbe <_realloc_r+0x24>
 800cdb2:	f7fd fa69 	bl	800a288 <_free_r>
 800cdb6:	2400      	movs	r4, #0
 800cdb8:	4620      	mov	r0, r4
 800cdba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdbe:	f000 f8b2 	bl	800cf26 <_malloc_usable_size_r>
 800cdc2:	4285      	cmp	r5, r0
 800cdc4:	4606      	mov	r6, r0
 800cdc6:	d802      	bhi.n	800cdce <_realloc_r+0x34>
 800cdc8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cdcc:	d8f4      	bhi.n	800cdb8 <_realloc_r+0x1e>
 800cdce:	4629      	mov	r1, r5
 800cdd0:	4640      	mov	r0, r8
 800cdd2:	f7fd facd 	bl	800a370 <_malloc_r>
 800cdd6:	4607      	mov	r7, r0
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	d0ec      	beq.n	800cdb6 <_realloc_r+0x1c>
 800cddc:	42b5      	cmp	r5, r6
 800cdde:	462a      	mov	r2, r5
 800cde0:	4621      	mov	r1, r4
 800cde2:	bf28      	it	cs
 800cde4:	4632      	movcs	r2, r6
 800cde6:	f7fc fbec 	bl	80095c2 <memcpy>
 800cdea:	4621      	mov	r1, r4
 800cdec:	4640      	mov	r0, r8
 800cdee:	f7fd fa4b 	bl	800a288 <_free_r>
 800cdf2:	463c      	mov	r4, r7
 800cdf4:	e7e0      	b.n	800cdb8 <_realloc_r+0x1e>
	...

0800cdf8 <_strtoul_l.constprop.0>:
 800cdf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cdfc:	4e34      	ldr	r6, [pc, #208]	@ (800ced0 <_strtoul_l.constprop.0+0xd8>)
 800cdfe:	4686      	mov	lr, r0
 800ce00:	460d      	mov	r5, r1
 800ce02:	4628      	mov	r0, r5
 800ce04:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce08:	5d37      	ldrb	r7, [r6, r4]
 800ce0a:	f017 0708 	ands.w	r7, r7, #8
 800ce0e:	d1f8      	bne.n	800ce02 <_strtoul_l.constprop.0+0xa>
 800ce10:	2c2d      	cmp	r4, #45	@ 0x2d
 800ce12:	d12f      	bne.n	800ce74 <_strtoul_l.constprop.0+0x7c>
 800ce14:	782c      	ldrb	r4, [r5, #0]
 800ce16:	2701      	movs	r7, #1
 800ce18:	1c85      	adds	r5, r0, #2
 800ce1a:	f033 0010 	bics.w	r0, r3, #16
 800ce1e:	d109      	bne.n	800ce34 <_strtoul_l.constprop.0+0x3c>
 800ce20:	2c30      	cmp	r4, #48	@ 0x30
 800ce22:	d12c      	bne.n	800ce7e <_strtoul_l.constprop.0+0x86>
 800ce24:	7828      	ldrb	r0, [r5, #0]
 800ce26:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800ce2a:	2858      	cmp	r0, #88	@ 0x58
 800ce2c:	d127      	bne.n	800ce7e <_strtoul_l.constprop.0+0x86>
 800ce2e:	786c      	ldrb	r4, [r5, #1]
 800ce30:	2310      	movs	r3, #16
 800ce32:	3502      	adds	r5, #2
 800ce34:	f04f 38ff 	mov.w	r8, #4294967295
 800ce38:	2600      	movs	r6, #0
 800ce3a:	fbb8 f8f3 	udiv	r8, r8, r3
 800ce3e:	fb03 f908 	mul.w	r9, r3, r8
 800ce42:	ea6f 0909 	mvn.w	r9, r9
 800ce46:	4630      	mov	r0, r6
 800ce48:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ce4c:	f1bc 0f09 	cmp.w	ip, #9
 800ce50:	d81c      	bhi.n	800ce8c <_strtoul_l.constprop.0+0x94>
 800ce52:	4664      	mov	r4, ip
 800ce54:	42a3      	cmp	r3, r4
 800ce56:	dd2a      	ble.n	800ceae <_strtoul_l.constprop.0+0xb6>
 800ce58:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ce5c:	d007      	beq.n	800ce6e <_strtoul_l.constprop.0+0x76>
 800ce5e:	4580      	cmp	r8, r0
 800ce60:	d322      	bcc.n	800cea8 <_strtoul_l.constprop.0+0xb0>
 800ce62:	d101      	bne.n	800ce68 <_strtoul_l.constprop.0+0x70>
 800ce64:	45a1      	cmp	r9, r4
 800ce66:	db1f      	blt.n	800cea8 <_strtoul_l.constprop.0+0xb0>
 800ce68:	fb00 4003 	mla	r0, r0, r3, r4
 800ce6c:	2601      	movs	r6, #1
 800ce6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce72:	e7e9      	b.n	800ce48 <_strtoul_l.constprop.0+0x50>
 800ce74:	2c2b      	cmp	r4, #43	@ 0x2b
 800ce76:	bf04      	itt	eq
 800ce78:	782c      	ldrbeq	r4, [r5, #0]
 800ce7a:	1c85      	addeq	r5, r0, #2
 800ce7c:	e7cd      	b.n	800ce1a <_strtoul_l.constprop.0+0x22>
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d1d8      	bne.n	800ce34 <_strtoul_l.constprop.0+0x3c>
 800ce82:	2c30      	cmp	r4, #48	@ 0x30
 800ce84:	bf0c      	ite	eq
 800ce86:	2308      	moveq	r3, #8
 800ce88:	230a      	movne	r3, #10
 800ce8a:	e7d3      	b.n	800ce34 <_strtoul_l.constprop.0+0x3c>
 800ce8c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ce90:	f1bc 0f19 	cmp.w	ip, #25
 800ce94:	d801      	bhi.n	800ce9a <_strtoul_l.constprop.0+0xa2>
 800ce96:	3c37      	subs	r4, #55	@ 0x37
 800ce98:	e7dc      	b.n	800ce54 <_strtoul_l.constprop.0+0x5c>
 800ce9a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ce9e:	f1bc 0f19 	cmp.w	ip, #25
 800cea2:	d804      	bhi.n	800ceae <_strtoul_l.constprop.0+0xb6>
 800cea4:	3c57      	subs	r4, #87	@ 0x57
 800cea6:	e7d5      	b.n	800ce54 <_strtoul_l.constprop.0+0x5c>
 800cea8:	f04f 36ff 	mov.w	r6, #4294967295
 800ceac:	e7df      	b.n	800ce6e <_strtoul_l.constprop.0+0x76>
 800ceae:	1c73      	adds	r3, r6, #1
 800ceb0:	d106      	bne.n	800cec0 <_strtoul_l.constprop.0+0xc8>
 800ceb2:	2322      	movs	r3, #34	@ 0x22
 800ceb4:	f8ce 3000 	str.w	r3, [lr]
 800ceb8:	4630      	mov	r0, r6
 800ceba:	b932      	cbnz	r2, 800ceca <_strtoul_l.constprop.0+0xd2>
 800cebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cec0:	b107      	cbz	r7, 800cec4 <_strtoul_l.constprop.0+0xcc>
 800cec2:	4240      	negs	r0, r0
 800cec4:	2a00      	cmp	r2, #0
 800cec6:	d0f9      	beq.n	800cebc <_strtoul_l.constprop.0+0xc4>
 800cec8:	b106      	cbz	r6, 800cecc <_strtoul_l.constprop.0+0xd4>
 800ceca:	1e69      	subs	r1, r5, #1
 800cecc:	6011      	str	r1, [r2, #0]
 800cece:	e7f5      	b.n	800cebc <_strtoul_l.constprop.0+0xc4>
 800ced0:	0800d821 	.word	0x0800d821

0800ced4 <_strtoul_r>:
 800ced4:	f7ff bf90 	b.w	800cdf8 <_strtoul_l.constprop.0>

0800ced8 <__ascii_wctomb>:
 800ced8:	4603      	mov	r3, r0
 800ceda:	4608      	mov	r0, r1
 800cedc:	b141      	cbz	r1, 800cef0 <__ascii_wctomb+0x18>
 800cede:	2aff      	cmp	r2, #255	@ 0xff
 800cee0:	d904      	bls.n	800ceec <__ascii_wctomb+0x14>
 800cee2:	228a      	movs	r2, #138	@ 0x8a
 800cee4:	601a      	str	r2, [r3, #0]
 800cee6:	f04f 30ff 	mov.w	r0, #4294967295
 800ceea:	4770      	bx	lr
 800ceec:	700a      	strb	r2, [r1, #0]
 800ceee:	2001      	movs	r0, #1
 800cef0:	4770      	bx	lr
	...

0800cef4 <fiprintf>:
 800cef4:	b40e      	push	{r1, r2, r3}
 800cef6:	b503      	push	{r0, r1, lr}
 800cef8:	4601      	mov	r1, r0
 800cefa:	ab03      	add	r3, sp, #12
 800cefc:	4805      	ldr	r0, [pc, #20]	@ (800cf14 <fiprintf+0x20>)
 800cefe:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf02:	6800      	ldr	r0, [r0, #0]
 800cf04:	9301      	str	r3, [sp, #4]
 800cf06:	f000 f83f 	bl	800cf88 <_vfiprintf_r>
 800cf0a:	b002      	add	sp, #8
 800cf0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf10:	b003      	add	sp, #12
 800cf12:	4770      	bx	lr
 800cf14:	20000014 	.word	0x20000014

0800cf18 <abort>:
 800cf18:	b508      	push	{r3, lr}
 800cf1a:	2006      	movs	r0, #6
 800cf1c:	f000 fa08 	bl	800d330 <raise>
 800cf20:	2001      	movs	r0, #1
 800cf22:	f7f5 fd8f 	bl	8002a44 <_exit>

0800cf26 <_malloc_usable_size_r>:
 800cf26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf2a:	1f18      	subs	r0, r3, #4
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	bfbc      	itt	lt
 800cf30:	580b      	ldrlt	r3, [r1, r0]
 800cf32:	18c0      	addlt	r0, r0, r3
 800cf34:	4770      	bx	lr

0800cf36 <__sfputc_r>:
 800cf36:	6893      	ldr	r3, [r2, #8]
 800cf38:	3b01      	subs	r3, #1
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	b410      	push	{r4}
 800cf3e:	6093      	str	r3, [r2, #8]
 800cf40:	da08      	bge.n	800cf54 <__sfputc_r+0x1e>
 800cf42:	6994      	ldr	r4, [r2, #24]
 800cf44:	42a3      	cmp	r3, r4
 800cf46:	db01      	blt.n	800cf4c <__sfputc_r+0x16>
 800cf48:	290a      	cmp	r1, #10
 800cf4a:	d103      	bne.n	800cf54 <__sfputc_r+0x1e>
 800cf4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf50:	f000 b932 	b.w	800d1b8 <__swbuf_r>
 800cf54:	6813      	ldr	r3, [r2, #0]
 800cf56:	1c58      	adds	r0, r3, #1
 800cf58:	6010      	str	r0, [r2, #0]
 800cf5a:	7019      	strb	r1, [r3, #0]
 800cf5c:	4608      	mov	r0, r1
 800cf5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <__sfputs_r>:
 800cf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf66:	4606      	mov	r6, r0
 800cf68:	460f      	mov	r7, r1
 800cf6a:	4614      	mov	r4, r2
 800cf6c:	18d5      	adds	r5, r2, r3
 800cf6e:	42ac      	cmp	r4, r5
 800cf70:	d101      	bne.n	800cf76 <__sfputs_r+0x12>
 800cf72:	2000      	movs	r0, #0
 800cf74:	e007      	b.n	800cf86 <__sfputs_r+0x22>
 800cf76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf7a:	463a      	mov	r2, r7
 800cf7c:	4630      	mov	r0, r6
 800cf7e:	f7ff ffda 	bl	800cf36 <__sfputc_r>
 800cf82:	1c43      	adds	r3, r0, #1
 800cf84:	d1f3      	bne.n	800cf6e <__sfputs_r+0xa>
 800cf86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cf88 <_vfiprintf_r>:
 800cf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf8c:	460d      	mov	r5, r1
 800cf8e:	b09d      	sub	sp, #116	@ 0x74
 800cf90:	4614      	mov	r4, r2
 800cf92:	4698      	mov	r8, r3
 800cf94:	4606      	mov	r6, r0
 800cf96:	b118      	cbz	r0, 800cfa0 <_vfiprintf_r+0x18>
 800cf98:	6a03      	ldr	r3, [r0, #32]
 800cf9a:	b90b      	cbnz	r3, 800cfa0 <_vfiprintf_r+0x18>
 800cf9c:	f7fc f9be 	bl	800931c <__sinit>
 800cfa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfa2:	07d9      	lsls	r1, r3, #31
 800cfa4:	d405      	bmi.n	800cfb2 <_vfiprintf_r+0x2a>
 800cfa6:	89ab      	ldrh	r3, [r5, #12]
 800cfa8:	059a      	lsls	r2, r3, #22
 800cfaa:	d402      	bmi.n	800cfb2 <_vfiprintf_r+0x2a>
 800cfac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfae:	f7fc fb06 	bl	80095be <__retarget_lock_acquire_recursive>
 800cfb2:	89ab      	ldrh	r3, [r5, #12]
 800cfb4:	071b      	lsls	r3, r3, #28
 800cfb6:	d501      	bpl.n	800cfbc <_vfiprintf_r+0x34>
 800cfb8:	692b      	ldr	r3, [r5, #16]
 800cfba:	b99b      	cbnz	r3, 800cfe4 <_vfiprintf_r+0x5c>
 800cfbc:	4629      	mov	r1, r5
 800cfbe:	4630      	mov	r0, r6
 800cfc0:	f000 f938 	bl	800d234 <__swsetup_r>
 800cfc4:	b170      	cbz	r0, 800cfe4 <_vfiprintf_r+0x5c>
 800cfc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfc8:	07dc      	lsls	r4, r3, #31
 800cfca:	d504      	bpl.n	800cfd6 <_vfiprintf_r+0x4e>
 800cfcc:	f04f 30ff 	mov.w	r0, #4294967295
 800cfd0:	b01d      	add	sp, #116	@ 0x74
 800cfd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd6:	89ab      	ldrh	r3, [r5, #12]
 800cfd8:	0598      	lsls	r0, r3, #22
 800cfda:	d4f7      	bmi.n	800cfcc <_vfiprintf_r+0x44>
 800cfdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfde:	f7fc faef 	bl	80095c0 <__retarget_lock_release_recursive>
 800cfe2:	e7f3      	b.n	800cfcc <_vfiprintf_r+0x44>
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfe8:	2320      	movs	r3, #32
 800cfea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cfee:	f8cd 800c 	str.w	r8, [sp, #12]
 800cff2:	2330      	movs	r3, #48	@ 0x30
 800cff4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d1a4 <_vfiprintf_r+0x21c>
 800cff8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cffc:	f04f 0901 	mov.w	r9, #1
 800d000:	4623      	mov	r3, r4
 800d002:	469a      	mov	sl, r3
 800d004:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d008:	b10a      	cbz	r2, 800d00e <_vfiprintf_r+0x86>
 800d00a:	2a25      	cmp	r2, #37	@ 0x25
 800d00c:	d1f9      	bne.n	800d002 <_vfiprintf_r+0x7a>
 800d00e:	ebba 0b04 	subs.w	fp, sl, r4
 800d012:	d00b      	beq.n	800d02c <_vfiprintf_r+0xa4>
 800d014:	465b      	mov	r3, fp
 800d016:	4622      	mov	r2, r4
 800d018:	4629      	mov	r1, r5
 800d01a:	4630      	mov	r0, r6
 800d01c:	f7ff ffa2 	bl	800cf64 <__sfputs_r>
 800d020:	3001      	adds	r0, #1
 800d022:	f000 80a7 	beq.w	800d174 <_vfiprintf_r+0x1ec>
 800d026:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d028:	445a      	add	r2, fp
 800d02a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d02c:	f89a 3000 	ldrb.w	r3, [sl]
 800d030:	2b00      	cmp	r3, #0
 800d032:	f000 809f 	beq.w	800d174 <_vfiprintf_r+0x1ec>
 800d036:	2300      	movs	r3, #0
 800d038:	f04f 32ff 	mov.w	r2, #4294967295
 800d03c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d040:	f10a 0a01 	add.w	sl, sl, #1
 800d044:	9304      	str	r3, [sp, #16]
 800d046:	9307      	str	r3, [sp, #28]
 800d048:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d04c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d04e:	4654      	mov	r4, sl
 800d050:	2205      	movs	r2, #5
 800d052:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d056:	4853      	ldr	r0, [pc, #332]	@ (800d1a4 <_vfiprintf_r+0x21c>)
 800d058:	f7f3 f8e2 	bl	8000220 <memchr>
 800d05c:	9a04      	ldr	r2, [sp, #16]
 800d05e:	b9d8      	cbnz	r0, 800d098 <_vfiprintf_r+0x110>
 800d060:	06d1      	lsls	r1, r2, #27
 800d062:	bf44      	itt	mi
 800d064:	2320      	movmi	r3, #32
 800d066:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d06a:	0713      	lsls	r3, r2, #28
 800d06c:	bf44      	itt	mi
 800d06e:	232b      	movmi	r3, #43	@ 0x2b
 800d070:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d074:	f89a 3000 	ldrb.w	r3, [sl]
 800d078:	2b2a      	cmp	r3, #42	@ 0x2a
 800d07a:	d015      	beq.n	800d0a8 <_vfiprintf_r+0x120>
 800d07c:	9a07      	ldr	r2, [sp, #28]
 800d07e:	4654      	mov	r4, sl
 800d080:	2000      	movs	r0, #0
 800d082:	f04f 0c0a 	mov.w	ip, #10
 800d086:	4621      	mov	r1, r4
 800d088:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d08c:	3b30      	subs	r3, #48	@ 0x30
 800d08e:	2b09      	cmp	r3, #9
 800d090:	d94b      	bls.n	800d12a <_vfiprintf_r+0x1a2>
 800d092:	b1b0      	cbz	r0, 800d0c2 <_vfiprintf_r+0x13a>
 800d094:	9207      	str	r2, [sp, #28]
 800d096:	e014      	b.n	800d0c2 <_vfiprintf_r+0x13a>
 800d098:	eba0 0308 	sub.w	r3, r0, r8
 800d09c:	fa09 f303 	lsl.w	r3, r9, r3
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	9304      	str	r3, [sp, #16]
 800d0a4:	46a2      	mov	sl, r4
 800d0a6:	e7d2      	b.n	800d04e <_vfiprintf_r+0xc6>
 800d0a8:	9b03      	ldr	r3, [sp, #12]
 800d0aa:	1d19      	adds	r1, r3, #4
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	9103      	str	r1, [sp, #12]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	bfbb      	ittet	lt
 800d0b4:	425b      	neglt	r3, r3
 800d0b6:	f042 0202 	orrlt.w	r2, r2, #2
 800d0ba:	9307      	strge	r3, [sp, #28]
 800d0bc:	9307      	strlt	r3, [sp, #28]
 800d0be:	bfb8      	it	lt
 800d0c0:	9204      	strlt	r2, [sp, #16]
 800d0c2:	7823      	ldrb	r3, [r4, #0]
 800d0c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0c6:	d10a      	bne.n	800d0de <_vfiprintf_r+0x156>
 800d0c8:	7863      	ldrb	r3, [r4, #1]
 800d0ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0cc:	d132      	bne.n	800d134 <_vfiprintf_r+0x1ac>
 800d0ce:	9b03      	ldr	r3, [sp, #12]
 800d0d0:	1d1a      	adds	r2, r3, #4
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	9203      	str	r2, [sp, #12]
 800d0d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d0da:	3402      	adds	r4, #2
 800d0dc:	9305      	str	r3, [sp, #20]
 800d0de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d1b4 <_vfiprintf_r+0x22c>
 800d0e2:	7821      	ldrb	r1, [r4, #0]
 800d0e4:	2203      	movs	r2, #3
 800d0e6:	4650      	mov	r0, sl
 800d0e8:	f7f3 f89a 	bl	8000220 <memchr>
 800d0ec:	b138      	cbz	r0, 800d0fe <_vfiprintf_r+0x176>
 800d0ee:	9b04      	ldr	r3, [sp, #16]
 800d0f0:	eba0 000a 	sub.w	r0, r0, sl
 800d0f4:	2240      	movs	r2, #64	@ 0x40
 800d0f6:	4082      	lsls	r2, r0
 800d0f8:	4313      	orrs	r3, r2
 800d0fa:	3401      	adds	r4, #1
 800d0fc:	9304      	str	r3, [sp, #16]
 800d0fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d102:	4829      	ldr	r0, [pc, #164]	@ (800d1a8 <_vfiprintf_r+0x220>)
 800d104:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d108:	2206      	movs	r2, #6
 800d10a:	f7f3 f889 	bl	8000220 <memchr>
 800d10e:	2800      	cmp	r0, #0
 800d110:	d03f      	beq.n	800d192 <_vfiprintf_r+0x20a>
 800d112:	4b26      	ldr	r3, [pc, #152]	@ (800d1ac <_vfiprintf_r+0x224>)
 800d114:	bb1b      	cbnz	r3, 800d15e <_vfiprintf_r+0x1d6>
 800d116:	9b03      	ldr	r3, [sp, #12]
 800d118:	3307      	adds	r3, #7
 800d11a:	f023 0307 	bic.w	r3, r3, #7
 800d11e:	3308      	adds	r3, #8
 800d120:	9303      	str	r3, [sp, #12]
 800d122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d124:	443b      	add	r3, r7
 800d126:	9309      	str	r3, [sp, #36]	@ 0x24
 800d128:	e76a      	b.n	800d000 <_vfiprintf_r+0x78>
 800d12a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d12e:	460c      	mov	r4, r1
 800d130:	2001      	movs	r0, #1
 800d132:	e7a8      	b.n	800d086 <_vfiprintf_r+0xfe>
 800d134:	2300      	movs	r3, #0
 800d136:	3401      	adds	r4, #1
 800d138:	9305      	str	r3, [sp, #20]
 800d13a:	4619      	mov	r1, r3
 800d13c:	f04f 0c0a 	mov.w	ip, #10
 800d140:	4620      	mov	r0, r4
 800d142:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d146:	3a30      	subs	r2, #48	@ 0x30
 800d148:	2a09      	cmp	r2, #9
 800d14a:	d903      	bls.n	800d154 <_vfiprintf_r+0x1cc>
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d0c6      	beq.n	800d0de <_vfiprintf_r+0x156>
 800d150:	9105      	str	r1, [sp, #20]
 800d152:	e7c4      	b.n	800d0de <_vfiprintf_r+0x156>
 800d154:	fb0c 2101 	mla	r1, ip, r1, r2
 800d158:	4604      	mov	r4, r0
 800d15a:	2301      	movs	r3, #1
 800d15c:	e7f0      	b.n	800d140 <_vfiprintf_r+0x1b8>
 800d15e:	ab03      	add	r3, sp, #12
 800d160:	9300      	str	r3, [sp, #0]
 800d162:	462a      	mov	r2, r5
 800d164:	4b12      	ldr	r3, [pc, #72]	@ (800d1b0 <_vfiprintf_r+0x228>)
 800d166:	a904      	add	r1, sp, #16
 800d168:	4630      	mov	r0, r6
 800d16a:	f7fb fa7f 	bl	800866c <_printf_float>
 800d16e:	4607      	mov	r7, r0
 800d170:	1c78      	adds	r0, r7, #1
 800d172:	d1d6      	bne.n	800d122 <_vfiprintf_r+0x19a>
 800d174:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d176:	07d9      	lsls	r1, r3, #31
 800d178:	d405      	bmi.n	800d186 <_vfiprintf_r+0x1fe>
 800d17a:	89ab      	ldrh	r3, [r5, #12]
 800d17c:	059a      	lsls	r2, r3, #22
 800d17e:	d402      	bmi.n	800d186 <_vfiprintf_r+0x1fe>
 800d180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d182:	f7fc fa1d 	bl	80095c0 <__retarget_lock_release_recursive>
 800d186:	89ab      	ldrh	r3, [r5, #12]
 800d188:	065b      	lsls	r3, r3, #25
 800d18a:	f53f af1f 	bmi.w	800cfcc <_vfiprintf_r+0x44>
 800d18e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d190:	e71e      	b.n	800cfd0 <_vfiprintf_r+0x48>
 800d192:	ab03      	add	r3, sp, #12
 800d194:	9300      	str	r3, [sp, #0]
 800d196:	462a      	mov	r2, r5
 800d198:	4b05      	ldr	r3, [pc, #20]	@ (800d1b0 <_vfiprintf_r+0x228>)
 800d19a:	a904      	add	r1, sp, #16
 800d19c:	4630      	mov	r0, r6
 800d19e:	f7fb fcfd 	bl	8008b9c <_printf_i>
 800d1a2:	e7e4      	b.n	800d16e <_vfiprintf_r+0x1e6>
 800d1a4:	0800d921 	.word	0x0800d921
 800d1a8:	0800d92b 	.word	0x0800d92b
 800d1ac:	0800866d 	.word	0x0800866d
 800d1b0:	0800cf65 	.word	0x0800cf65
 800d1b4:	0800d927 	.word	0x0800d927

0800d1b8 <__swbuf_r>:
 800d1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ba:	460e      	mov	r6, r1
 800d1bc:	4614      	mov	r4, r2
 800d1be:	4605      	mov	r5, r0
 800d1c0:	b118      	cbz	r0, 800d1ca <__swbuf_r+0x12>
 800d1c2:	6a03      	ldr	r3, [r0, #32]
 800d1c4:	b90b      	cbnz	r3, 800d1ca <__swbuf_r+0x12>
 800d1c6:	f7fc f8a9 	bl	800931c <__sinit>
 800d1ca:	69a3      	ldr	r3, [r4, #24]
 800d1cc:	60a3      	str	r3, [r4, #8]
 800d1ce:	89a3      	ldrh	r3, [r4, #12]
 800d1d0:	071a      	lsls	r2, r3, #28
 800d1d2:	d501      	bpl.n	800d1d8 <__swbuf_r+0x20>
 800d1d4:	6923      	ldr	r3, [r4, #16]
 800d1d6:	b943      	cbnz	r3, 800d1ea <__swbuf_r+0x32>
 800d1d8:	4621      	mov	r1, r4
 800d1da:	4628      	mov	r0, r5
 800d1dc:	f000 f82a 	bl	800d234 <__swsetup_r>
 800d1e0:	b118      	cbz	r0, 800d1ea <__swbuf_r+0x32>
 800d1e2:	f04f 37ff 	mov.w	r7, #4294967295
 800d1e6:	4638      	mov	r0, r7
 800d1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1ea:	6823      	ldr	r3, [r4, #0]
 800d1ec:	6922      	ldr	r2, [r4, #16]
 800d1ee:	1a98      	subs	r0, r3, r2
 800d1f0:	6963      	ldr	r3, [r4, #20]
 800d1f2:	b2f6      	uxtb	r6, r6
 800d1f4:	4283      	cmp	r3, r0
 800d1f6:	4637      	mov	r7, r6
 800d1f8:	dc05      	bgt.n	800d206 <__swbuf_r+0x4e>
 800d1fa:	4621      	mov	r1, r4
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	f7ff f96f 	bl	800c4e0 <_fflush_r>
 800d202:	2800      	cmp	r0, #0
 800d204:	d1ed      	bne.n	800d1e2 <__swbuf_r+0x2a>
 800d206:	68a3      	ldr	r3, [r4, #8]
 800d208:	3b01      	subs	r3, #1
 800d20a:	60a3      	str	r3, [r4, #8]
 800d20c:	6823      	ldr	r3, [r4, #0]
 800d20e:	1c5a      	adds	r2, r3, #1
 800d210:	6022      	str	r2, [r4, #0]
 800d212:	701e      	strb	r6, [r3, #0]
 800d214:	6962      	ldr	r2, [r4, #20]
 800d216:	1c43      	adds	r3, r0, #1
 800d218:	429a      	cmp	r2, r3
 800d21a:	d004      	beq.n	800d226 <__swbuf_r+0x6e>
 800d21c:	89a3      	ldrh	r3, [r4, #12]
 800d21e:	07db      	lsls	r3, r3, #31
 800d220:	d5e1      	bpl.n	800d1e6 <__swbuf_r+0x2e>
 800d222:	2e0a      	cmp	r6, #10
 800d224:	d1df      	bne.n	800d1e6 <__swbuf_r+0x2e>
 800d226:	4621      	mov	r1, r4
 800d228:	4628      	mov	r0, r5
 800d22a:	f7ff f959 	bl	800c4e0 <_fflush_r>
 800d22e:	2800      	cmp	r0, #0
 800d230:	d0d9      	beq.n	800d1e6 <__swbuf_r+0x2e>
 800d232:	e7d6      	b.n	800d1e2 <__swbuf_r+0x2a>

0800d234 <__swsetup_r>:
 800d234:	b538      	push	{r3, r4, r5, lr}
 800d236:	4b29      	ldr	r3, [pc, #164]	@ (800d2dc <__swsetup_r+0xa8>)
 800d238:	4605      	mov	r5, r0
 800d23a:	6818      	ldr	r0, [r3, #0]
 800d23c:	460c      	mov	r4, r1
 800d23e:	b118      	cbz	r0, 800d248 <__swsetup_r+0x14>
 800d240:	6a03      	ldr	r3, [r0, #32]
 800d242:	b90b      	cbnz	r3, 800d248 <__swsetup_r+0x14>
 800d244:	f7fc f86a 	bl	800931c <__sinit>
 800d248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d24c:	0719      	lsls	r1, r3, #28
 800d24e:	d422      	bmi.n	800d296 <__swsetup_r+0x62>
 800d250:	06da      	lsls	r2, r3, #27
 800d252:	d407      	bmi.n	800d264 <__swsetup_r+0x30>
 800d254:	2209      	movs	r2, #9
 800d256:	602a      	str	r2, [r5, #0]
 800d258:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d25c:	81a3      	strh	r3, [r4, #12]
 800d25e:	f04f 30ff 	mov.w	r0, #4294967295
 800d262:	e033      	b.n	800d2cc <__swsetup_r+0x98>
 800d264:	0758      	lsls	r0, r3, #29
 800d266:	d512      	bpl.n	800d28e <__swsetup_r+0x5a>
 800d268:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d26a:	b141      	cbz	r1, 800d27e <__swsetup_r+0x4a>
 800d26c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d270:	4299      	cmp	r1, r3
 800d272:	d002      	beq.n	800d27a <__swsetup_r+0x46>
 800d274:	4628      	mov	r0, r5
 800d276:	f7fd f807 	bl	800a288 <_free_r>
 800d27a:	2300      	movs	r3, #0
 800d27c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d27e:	89a3      	ldrh	r3, [r4, #12]
 800d280:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d284:	81a3      	strh	r3, [r4, #12]
 800d286:	2300      	movs	r3, #0
 800d288:	6063      	str	r3, [r4, #4]
 800d28a:	6923      	ldr	r3, [r4, #16]
 800d28c:	6023      	str	r3, [r4, #0]
 800d28e:	89a3      	ldrh	r3, [r4, #12]
 800d290:	f043 0308 	orr.w	r3, r3, #8
 800d294:	81a3      	strh	r3, [r4, #12]
 800d296:	6923      	ldr	r3, [r4, #16]
 800d298:	b94b      	cbnz	r3, 800d2ae <__swsetup_r+0x7a>
 800d29a:	89a3      	ldrh	r3, [r4, #12]
 800d29c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d2a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d2a4:	d003      	beq.n	800d2ae <__swsetup_r+0x7a>
 800d2a6:	4621      	mov	r1, r4
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	f000 f883 	bl	800d3b4 <__smakebuf_r>
 800d2ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2b2:	f013 0201 	ands.w	r2, r3, #1
 800d2b6:	d00a      	beq.n	800d2ce <__swsetup_r+0x9a>
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	60a2      	str	r2, [r4, #8]
 800d2bc:	6962      	ldr	r2, [r4, #20]
 800d2be:	4252      	negs	r2, r2
 800d2c0:	61a2      	str	r2, [r4, #24]
 800d2c2:	6922      	ldr	r2, [r4, #16]
 800d2c4:	b942      	cbnz	r2, 800d2d8 <__swsetup_r+0xa4>
 800d2c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d2ca:	d1c5      	bne.n	800d258 <__swsetup_r+0x24>
 800d2cc:	bd38      	pop	{r3, r4, r5, pc}
 800d2ce:	0799      	lsls	r1, r3, #30
 800d2d0:	bf58      	it	pl
 800d2d2:	6962      	ldrpl	r2, [r4, #20]
 800d2d4:	60a2      	str	r2, [r4, #8]
 800d2d6:	e7f4      	b.n	800d2c2 <__swsetup_r+0x8e>
 800d2d8:	2000      	movs	r0, #0
 800d2da:	e7f7      	b.n	800d2cc <__swsetup_r+0x98>
 800d2dc:	20000014 	.word	0x20000014

0800d2e0 <_raise_r>:
 800d2e0:	291f      	cmp	r1, #31
 800d2e2:	b538      	push	{r3, r4, r5, lr}
 800d2e4:	4605      	mov	r5, r0
 800d2e6:	460c      	mov	r4, r1
 800d2e8:	d904      	bls.n	800d2f4 <_raise_r+0x14>
 800d2ea:	2316      	movs	r3, #22
 800d2ec:	6003      	str	r3, [r0, #0]
 800d2ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f2:	bd38      	pop	{r3, r4, r5, pc}
 800d2f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d2f6:	b112      	cbz	r2, 800d2fe <_raise_r+0x1e>
 800d2f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d2fc:	b94b      	cbnz	r3, 800d312 <_raise_r+0x32>
 800d2fe:	4628      	mov	r0, r5
 800d300:	f000 f830 	bl	800d364 <_getpid_r>
 800d304:	4622      	mov	r2, r4
 800d306:	4601      	mov	r1, r0
 800d308:	4628      	mov	r0, r5
 800d30a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d30e:	f000 b817 	b.w	800d340 <_kill_r>
 800d312:	2b01      	cmp	r3, #1
 800d314:	d00a      	beq.n	800d32c <_raise_r+0x4c>
 800d316:	1c59      	adds	r1, r3, #1
 800d318:	d103      	bne.n	800d322 <_raise_r+0x42>
 800d31a:	2316      	movs	r3, #22
 800d31c:	6003      	str	r3, [r0, #0]
 800d31e:	2001      	movs	r0, #1
 800d320:	e7e7      	b.n	800d2f2 <_raise_r+0x12>
 800d322:	2100      	movs	r1, #0
 800d324:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d328:	4620      	mov	r0, r4
 800d32a:	4798      	blx	r3
 800d32c:	2000      	movs	r0, #0
 800d32e:	e7e0      	b.n	800d2f2 <_raise_r+0x12>

0800d330 <raise>:
 800d330:	4b02      	ldr	r3, [pc, #8]	@ (800d33c <raise+0xc>)
 800d332:	4601      	mov	r1, r0
 800d334:	6818      	ldr	r0, [r3, #0]
 800d336:	f7ff bfd3 	b.w	800d2e0 <_raise_r>
 800d33a:	bf00      	nop
 800d33c:	20000014 	.word	0x20000014

0800d340 <_kill_r>:
 800d340:	b538      	push	{r3, r4, r5, lr}
 800d342:	4d07      	ldr	r5, [pc, #28]	@ (800d360 <_kill_r+0x20>)
 800d344:	2300      	movs	r3, #0
 800d346:	4604      	mov	r4, r0
 800d348:	4608      	mov	r0, r1
 800d34a:	4611      	mov	r1, r2
 800d34c:	602b      	str	r3, [r5, #0]
 800d34e:	f7f5 fb69 	bl	8002a24 <_kill>
 800d352:	1c43      	adds	r3, r0, #1
 800d354:	d102      	bne.n	800d35c <_kill_r+0x1c>
 800d356:	682b      	ldr	r3, [r5, #0]
 800d358:	b103      	cbz	r3, 800d35c <_kill_r+0x1c>
 800d35a:	6023      	str	r3, [r4, #0]
 800d35c:	bd38      	pop	{r3, r4, r5, pc}
 800d35e:	bf00      	nop
 800d360:	2000080c 	.word	0x2000080c

0800d364 <_getpid_r>:
 800d364:	f7f5 bb56 	b.w	8002a14 <_getpid>

0800d368 <__swhatbuf_r>:
 800d368:	b570      	push	{r4, r5, r6, lr}
 800d36a:	460c      	mov	r4, r1
 800d36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d370:	2900      	cmp	r1, #0
 800d372:	b096      	sub	sp, #88	@ 0x58
 800d374:	4615      	mov	r5, r2
 800d376:	461e      	mov	r6, r3
 800d378:	da0d      	bge.n	800d396 <__swhatbuf_r+0x2e>
 800d37a:	89a3      	ldrh	r3, [r4, #12]
 800d37c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d380:	f04f 0100 	mov.w	r1, #0
 800d384:	bf14      	ite	ne
 800d386:	2340      	movne	r3, #64	@ 0x40
 800d388:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d38c:	2000      	movs	r0, #0
 800d38e:	6031      	str	r1, [r6, #0]
 800d390:	602b      	str	r3, [r5, #0]
 800d392:	b016      	add	sp, #88	@ 0x58
 800d394:	bd70      	pop	{r4, r5, r6, pc}
 800d396:	466a      	mov	r2, sp
 800d398:	f000 f848 	bl	800d42c <_fstat_r>
 800d39c:	2800      	cmp	r0, #0
 800d39e:	dbec      	blt.n	800d37a <__swhatbuf_r+0x12>
 800d3a0:	9901      	ldr	r1, [sp, #4]
 800d3a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d3a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d3aa:	4259      	negs	r1, r3
 800d3ac:	4159      	adcs	r1, r3
 800d3ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d3b2:	e7eb      	b.n	800d38c <__swhatbuf_r+0x24>

0800d3b4 <__smakebuf_r>:
 800d3b4:	898b      	ldrh	r3, [r1, #12]
 800d3b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3b8:	079d      	lsls	r5, r3, #30
 800d3ba:	4606      	mov	r6, r0
 800d3bc:	460c      	mov	r4, r1
 800d3be:	d507      	bpl.n	800d3d0 <__smakebuf_r+0x1c>
 800d3c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d3c4:	6023      	str	r3, [r4, #0]
 800d3c6:	6123      	str	r3, [r4, #16]
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	6163      	str	r3, [r4, #20]
 800d3cc:	b003      	add	sp, #12
 800d3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3d0:	ab01      	add	r3, sp, #4
 800d3d2:	466a      	mov	r2, sp
 800d3d4:	f7ff ffc8 	bl	800d368 <__swhatbuf_r>
 800d3d8:	9f00      	ldr	r7, [sp, #0]
 800d3da:	4605      	mov	r5, r0
 800d3dc:	4639      	mov	r1, r7
 800d3de:	4630      	mov	r0, r6
 800d3e0:	f7fc ffc6 	bl	800a370 <_malloc_r>
 800d3e4:	b948      	cbnz	r0, 800d3fa <__smakebuf_r+0x46>
 800d3e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3ea:	059a      	lsls	r2, r3, #22
 800d3ec:	d4ee      	bmi.n	800d3cc <__smakebuf_r+0x18>
 800d3ee:	f023 0303 	bic.w	r3, r3, #3
 800d3f2:	f043 0302 	orr.w	r3, r3, #2
 800d3f6:	81a3      	strh	r3, [r4, #12]
 800d3f8:	e7e2      	b.n	800d3c0 <__smakebuf_r+0xc>
 800d3fa:	89a3      	ldrh	r3, [r4, #12]
 800d3fc:	6020      	str	r0, [r4, #0]
 800d3fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d402:	81a3      	strh	r3, [r4, #12]
 800d404:	9b01      	ldr	r3, [sp, #4]
 800d406:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d40a:	b15b      	cbz	r3, 800d424 <__smakebuf_r+0x70>
 800d40c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d410:	4630      	mov	r0, r6
 800d412:	f000 f81d 	bl	800d450 <_isatty_r>
 800d416:	b128      	cbz	r0, 800d424 <__smakebuf_r+0x70>
 800d418:	89a3      	ldrh	r3, [r4, #12]
 800d41a:	f023 0303 	bic.w	r3, r3, #3
 800d41e:	f043 0301 	orr.w	r3, r3, #1
 800d422:	81a3      	strh	r3, [r4, #12]
 800d424:	89a3      	ldrh	r3, [r4, #12]
 800d426:	431d      	orrs	r5, r3
 800d428:	81a5      	strh	r5, [r4, #12]
 800d42a:	e7cf      	b.n	800d3cc <__smakebuf_r+0x18>

0800d42c <_fstat_r>:
 800d42c:	b538      	push	{r3, r4, r5, lr}
 800d42e:	4d07      	ldr	r5, [pc, #28]	@ (800d44c <_fstat_r+0x20>)
 800d430:	2300      	movs	r3, #0
 800d432:	4604      	mov	r4, r0
 800d434:	4608      	mov	r0, r1
 800d436:	4611      	mov	r1, r2
 800d438:	602b      	str	r3, [r5, #0]
 800d43a:	f7f5 fb53 	bl	8002ae4 <_fstat>
 800d43e:	1c43      	adds	r3, r0, #1
 800d440:	d102      	bne.n	800d448 <_fstat_r+0x1c>
 800d442:	682b      	ldr	r3, [r5, #0]
 800d444:	b103      	cbz	r3, 800d448 <_fstat_r+0x1c>
 800d446:	6023      	str	r3, [r4, #0]
 800d448:	bd38      	pop	{r3, r4, r5, pc}
 800d44a:	bf00      	nop
 800d44c:	2000080c 	.word	0x2000080c

0800d450 <_isatty_r>:
 800d450:	b538      	push	{r3, r4, r5, lr}
 800d452:	4d06      	ldr	r5, [pc, #24]	@ (800d46c <_isatty_r+0x1c>)
 800d454:	2300      	movs	r3, #0
 800d456:	4604      	mov	r4, r0
 800d458:	4608      	mov	r0, r1
 800d45a:	602b      	str	r3, [r5, #0]
 800d45c:	f7f5 fb52 	bl	8002b04 <_isatty>
 800d460:	1c43      	adds	r3, r0, #1
 800d462:	d102      	bne.n	800d46a <_isatty_r+0x1a>
 800d464:	682b      	ldr	r3, [r5, #0]
 800d466:	b103      	cbz	r3, 800d46a <_isatty_r+0x1a>
 800d468:	6023      	str	r3, [r4, #0]
 800d46a:	bd38      	pop	{r3, r4, r5, pc}
 800d46c:	2000080c 	.word	0x2000080c

0800d470 <_init>:
 800d470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d472:	bf00      	nop
 800d474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d476:	bc08      	pop	{r3}
 800d478:	469e      	mov	lr, r3
 800d47a:	4770      	bx	lr

0800d47c <_fini>:
 800d47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d47e:	bf00      	nop
 800d480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d482:	bc08      	pop	{r3}
 800d484:	469e      	mov	lr, r3
 800d486:	4770      	bx	lr
